

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Sep 22 19:55:32 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.40
    60                           ; Generated 17/11/2021 GMT
    61                           ; 
    62                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1827 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0212                     	;# 
   183  0213                     	;# 
   184  0213                     	;# 
   185  0214                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0219                     	;# 
   195  021A                     	;# 
   196  021B                     	;# 
   197  021C                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029E                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0318                     	;# 
   224  0318                     	;# 
   225  0319                     	;# 
   226  031A                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  0111                     	;# 
   301  0112                     	;# 
   302  0113                     	;# 
   303  0114                     	;# 
   304  0115                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011D                     	;# 
   312  011E                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0219                     	;# 
   353  021A                     	;# 
   354  021B                     	;# 
   355  021C                     	;# 
   356  021D                     	;# 
   357  021E                     	;# 
   358  021F                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  039A                     	;# 
   389  039C                     	;# 
   390  039D                     	;# 
   391  039E                     	;# 
   392  039F                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  041C                     	;# 
   397  041D                     	;# 
   398  041E                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0219                     	;# 
   511  021A                     	;# 
   512  021B                     	;# 
   513  021C                     	;# 
   514  021D                     	;# 
   515  021E                     	;# 
   516  021F                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0294                     	;# 
   522  0295                     	;# 
   523  0295                     	;# 
   524  0296                     	;# 
   525  0298                     	;# 
   526  0298                     	;# 
   527  0299                     	;# 
   528  029A                     	;# 
   529  029B                     	;# 
   530  029C                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0219                     	;# 
   669  021A                     	;# 
   670  021B                     	;# 
   671  021C                     	;# 
   672  021D                     	;# 
   673  021E                     	;# 
   674  021F                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0294                     	;# 
   680  0295                     	;# 
   681  0295                     	;# 
   682  0296                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029B                     	;# 
   688  029C                     	;# 
   689  029C                     	;# 
   690  029D                     	;# 
   691  029E                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0415                     	;# 
   710  0416                     	;# 
   711  0417                     	;# 
   712  041C                     	;# 
   713  041D                     	;# 
   714  041E                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  001E                     	;# 
   754  001F                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0219                     	;# 
   827  021A                     	;# 
   828  021B                     	;# 
   829  021C                     	;# 
   830  021D                     	;# 
   831  021E                     	;# 
   832  021F                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0295                     	;# 
   840  0296                     	;# 
   841  0298                     	;# 
   842  0298                     	;# 
   843  0299                     	;# 
   844  029A                     	;# 
   845  029B                     	;# 
   846  029C                     	;# 
   847  029C                     	;# 
   848  029D                     	;# 
   849  029E                     	;# 
   850  029E                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0016                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001C                     	;# 
   911  001E                     	;# 
   912  001F                     	;# 
   913  008C                     	;# 
   914  008D                     	;# 
   915  0091                     	;# 
   916  0092                     	;# 
   917  0093                     	;# 
   918  0094                     	;# 
   919  0095                     	;# 
   920  0096                     	;# 
   921  0097                     	;# 
   922  0098                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  0111                     	;# 
   933  0112                     	;# 
   934  0113                     	;# 
   935  0114                     	;# 
   936  0115                     	;# 
   937  0116                     	;# 
   938  0117                     	;# 
   939  0118                     	;# 
   940  0119                     	;# 
   941  011A                     	;# 
   942  011B                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019C                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  0211                     	;# 
   970  0211                     	;# 
   971  0212                     	;# 
   972  0212                     	;# 
   973  0213                     	;# 
   974  0213                     	;# 
   975  0214                     	;# 
   976  0214                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0216                     	;# 
   981  0216                     	;# 
   982  0217                     	;# 
   983  0217                     	;# 
   984  0219                     	;# 
   985  021A                     	;# 
   986  021B                     	;# 
   987  021C                     	;# 
   988  021D                     	;# 
   989  021E                     	;# 
   990  021F                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  039A                     	;# 
  1021  039C                     	;# 
  1022  039D                     	;# 
  1023  039E                     	;# 
  1024  039F                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  041C                     	;# 
  1029  041D                     	;# 
  1030  041E                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011A                     	;# 
  1100  011B                     	;# 
  1101  011D                     	;# 
  1102  011E                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0219                     	;# 
  1143  021A                     	;# 
  1144  021B                     	;# 
  1145  021C                     	;# 
  1146  021D                     	;# 
  1147  021E                     	;# 
  1148  021F                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029C                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  029E                     	;# 
  1167  0311                     	;# 
  1168  0311                     	;# 
  1169  0312                     	;# 
  1170  0313                     	;# 
  1171  0318                     	;# 
  1172  0318                     	;# 
  1173  0319                     	;# 
  1174  031A                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  041C                     	;# 
  1187  041D                     	;# 
  1188  041E                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  0011                     	;# 
  1215  0012                     	;# 
  1216  0013                     	;# 
  1217  0014                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0016                     	;# 
  1221  0017                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  0111                     	;# 
  1249  0112                     	;# 
  1250  0113                     	;# 
  1251  0114                     	;# 
  1252  0115                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0118                     	;# 
  1256  0119                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011D                     	;# 
  1260  011E                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  0191                     	;# 
  1264  0191                     	;# 
  1265  0192                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019D                     	;# 
  1281  019E                     	;# 
  1282  019F                     	;# 
  1283  020C                     	;# 
  1284  020D                     	;# 
  1285  0211                     	;# 
  1286  0211                     	;# 
  1287  0212                     	;# 
  1288  0212                     	;# 
  1289  0213                     	;# 
  1290  0213                     	;# 
  1291  0214                     	;# 
  1292  0214                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  0219                     	;# 
  1301  021A                     	;# 
  1302  021B                     	;# 
  1303  021C                     	;# 
  1304  021D                     	;# 
  1305  021E                     	;# 
  1306  021F                     	;# 
  1307  0291                     	;# 
  1308  0291                     	;# 
  1309  0292                     	;# 
  1310  0293                     	;# 
  1311  0294                     	;# 
  1312  0295                     	;# 
  1313  0295                     	;# 
  1314  0296                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029B                     	;# 
  1320  029C                     	;# 
  1321  029C                     	;# 
  1322  029D                     	;# 
  1323  029E                     	;# 
  1324  029E                     	;# 
  1325  0311                     	;# 
  1326  0311                     	;# 
  1327  0312                     	;# 
  1328  0313                     	;# 
  1329  0318                     	;# 
  1330  0318                     	;# 
  1331  0319                     	;# 
  1332  031A                     	;# 
  1333  0394                     	;# 
  1334  0395                     	;# 
  1335  0396                     	;# 
  1336  039A                     	;# 
  1337  039C                     	;# 
  1338  039D                     	;# 
  1339  039E                     	;# 
  1340  039F                     	;# 
  1341  0415                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  041C                     	;# 
  1345  041D                     	;# 
  1346  041E                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0013                     	;# 
  1375  0014                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008D                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0094                     	;# 
  1393  0095                     	;# 
  1394  0096                     	;# 
  1395  0097                     	;# 
  1396  0098                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  0111                     	;# 
  1407  0112                     	;# 
  1408  0113                     	;# 
  1409  0114                     	;# 
  1410  0115                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  0118                     	;# 
  1414  0119                     	;# 
  1415  011A                     	;# 
  1416  011B                     	;# 
  1417  011D                     	;# 
  1418  011E                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0219                     	;# 
  1459  021A                     	;# 
  1460  021B                     	;# 
  1461  021C                     	;# 
  1462  021D                     	;# 
  1463  021E                     	;# 
  1464  021F                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0294                     	;# 
  1470  0295                     	;# 
  1471  0295                     	;# 
  1472  0296                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029B                     	;# 
  1478  029C                     	;# 
  1479  029C                     	;# 
  1480  029D                     	;# 
  1481  029E                     	;# 
  1482  029E                     	;# 
  1483  0311                     	;# 
  1484  0311                     	;# 
  1485  0312                     	;# 
  1486  0313                     	;# 
  1487  0318                     	;# 
  1488  0318                     	;# 
  1489  0319                     	;# 
  1490  031A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  039A                     	;# 
  1495  039C                     	;# 
  1496  039D                     	;# 
  1497  039E                     	;# 
  1498  039F                     	;# 
  1499  0415                     	;# 
  1500  0416                     	;# 
  1501  0417                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  0011                     	;# 
  1531  0012                     	;# 
  1532  0013                     	;# 
  1533  0014                     	;# 
  1534  0015                     	;# 
  1535  0016                     	;# 
  1536  0016                     	;# 
  1537  0017                     	;# 
  1538  0018                     	;# 
  1539  0019                     	;# 
  1540  001A                     	;# 
  1541  001B                     	;# 
  1542  001C                     	;# 
  1543  001E                     	;# 
  1544  001F                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0098                     	;# 
  1555  0099                     	;# 
  1556  009A                     	;# 
  1557  009B                     	;# 
  1558  009B                     	;# 
  1559  009C                     	;# 
  1560  009D                     	;# 
  1561  009E                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  0111                     	;# 
  1565  0112                     	;# 
  1566  0113                     	;# 
  1567  0114                     	;# 
  1568  0115                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  0118                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011B                     	;# 
  1575  011D                     	;# 
  1576  011E                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  0191                     	;# 
  1580  0191                     	;# 
  1581  0192                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0199                     	;# 
  1589  019A                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  020C                     	;# 
  1600  020D                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  0219                     	;# 
  1617  021A                     	;# 
  1618  021B                     	;# 
  1619  021C                     	;# 
  1620  021D                     	;# 
  1621  021E                     	;# 
  1622  021F                     	;# 
  1623  0291                     	;# 
  1624  0291                     	;# 
  1625  0292                     	;# 
  1626  0293                     	;# 
  1627  0294                     	;# 
  1628  0295                     	;# 
  1629  0295                     	;# 
  1630  0296                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  029B                     	;# 
  1636  029C                     	;# 
  1637  029C                     	;# 
  1638  029D                     	;# 
  1639  029E                     	;# 
  1640  029E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0318                     	;# 
  1646  0318                     	;# 
  1647  0319                     	;# 
  1648  031A                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  039A                     	;# 
  1653  039C                     	;# 
  1654  039D                     	;# 
  1655  039E                     	;# 
  1656  039F                     	;# 
  1657  0415                     	;# 
  1658  0416                     	;# 
  1659  0417                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  000D                     _PORTB	set	13
  1675  000C                     _PORTA	set	12
  1676  001C                     _T2CONbits	set	28
  1677  001B                     _PR2	set	27
  1678  000B                     _INTCONbits	set	11
  1679  009B                     _ADRESL	set	155
  1680  009C                     _ADRESH	set	156
  1681  009D                     _ADCON0bits	set	157
  1682  008D                     _TRISB	set	141
  1683  008C                     _TRISA	set	140
  1684  009E                     _ADCON1	set	158
  1685  009D                     _ADCON0	set	157
  1686  0095                     _OPTION_REG	set	149
  1687  0095                     _OPTION_REGbits	set	149
  1688  0091                     _PIE1bits	set	145
  1689  0099                     _OSCCONbits	set	153
  1690  010D                     _LATB	set	269
  1691  010C                     _LATA	set	268
  1692  011D                     _APFCON0bits	set	285
  1693  018D                     _ANSELB	set	397
  1694  018C                     _ANSELA	set	396
  1695  0293                     _CCP1CONbits	set	659
  1696  0296                     _PSTR1CONbits	set	662
  1697  0291                     _CCPR1L	set	657
  1698  0293                     _CCP1CON	set	659
  1699                           
  1700                           	psect	stringtext1
  1701  07FE                     __pstringtext1:
  1702  07FE                     STR_1:
  1703  07FE  3428               	retlw	40	;'('
  1704  07FF  3428               	retlw	40	;'('
  1705  0800  3449               	retlw	73	;'I'
  1706  0801  344E               	retlw	78	;'N'
  1707  0802  3454               	retlw	84	;'T'
  1708  0803  3443               	retlw	67	;'C'
  1709  0804  344F               	retlw	79	;'O'
  1710  0805  344E               	retlw	78	;'N'
  1711  0806  3429               	retlw	41	;')'
  1712  0807  3426               	retlw	38	;'&'
  1713  0808  3430               	retlw	48	;'0'
  1714  0809  3437               	retlw	55	;'7'
  1715  080A  3446               	retlw	70	;'F'
  1716  080B  3468               	retlw	104	;'h'
  1717  080C  3429               	retlw	41	;')'
  1718  080D  342C               	retlw	44	;','
  1719  080E  3432               	retlw	50	;'2'
  1720  080F  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext2
  1723  0000                     __pstringtext2:
  1724  07FE                     
  1725                           	psect	cinit
  1726  0088                     start_initialization:	
  1727                           ; #config settings
  1728                           
  1729  0088                     __initialization:
  1730                           
  1731                           ; Clear objects allocated to BANK0
  1732  0088  305F               	movlw	low __pbssBANK0
  1733  0089  0084               	movwf	4
  1734  008A  3000               	movlw	high __pbssBANK0
  1735  008B  0085               	movwf	5
  1736  008C  3010               	movlw	16
  1737  008D  318B  2391  3180   	fcall	clear_ram0
  1738                           
  1739                           ; Clear objects allocated to BANK1
  1740  0090  30A0               	movlw	low __pbssBANK1
  1741  0091  0084               	movwf	4
  1742  0092  3000               	movlw	high __pbssBANK1
  1743  0093  0085               	movwf	5
  1744  0094  3032               	movlw	50
  1745  0095  318B  2391  3180   	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK2
  1748  0098  3020               	movlw	low __pbssBANK2
  1749  0099  0084               	movwf	4
  1750  009A  3001               	movlw	high __pbssBANK2
  1751  009B  0085               	movwf	5
  1752  009C  3040               	movlw	64
  1753  009D  318B  2391  3180   	fcall	clear_ram0
  1754                           
  1755                           ; Clear objects allocated to BANK3
  1756  00A0  30A0               	movlw	low __pbssBANK3
  1757  00A1  0084               	movwf	4
  1758  00A2  3001               	movlw	high __pbssBANK3
  1759  00A3  0085               	movwf	5
  1760  00A4  3040               	movlw	64
  1761  00A5  318B  2391  3180   	fcall	clear_ram0
  1762                           
  1763                           ; Clear objects allocated to BANK4
  1764  00A8  3020               	movlw	low __pbssBANK4
  1765  00A9  0084               	movwf	4
  1766  00AA  3002               	movlw	high __pbssBANK4
  1767  00AB  0085               	movwf	5
  1768  00AC  3020               	movlw	32
  1769  00AD  318B  2391  3180   	fcall	clear_ram0
  1770  00B0                     end_of_initialization:	
  1771                           ;End of C runtime variable initialization code
  1772                           
  1773  00B0                     __end_of__initialization:
  1774  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1775  00B1  0020               	movlb	0
  1776  00B2  318C  2CED         	ljmp	_main	;jump to C main() function
  1777                           
  1778                           	psect	bssBANK0
  1779  005F                     __pbssBANK0:
  1780  005F                     _filteredVout:
  1781  005F                     	ds	2
  1782  0061                     _latestIL:
  1783  0061                     	ds	2
  1784  0063                     _setDuty:
  1785  0063                     	ds	2
  1786  0065                     _slotTest:
  1787  0065                     	ds	1
  1788  0066                     _timerSlotQuarter:
  1789  0066                     	ds	1
  1790  0067                     _timerSlotHalf:
  1791  0067                     	ds	1
  1792  0068                     _potSetCount:
  1793  0068                     	ds	1
  1794  0069                     _currentTripCount:
  1795  0069                     	ds	1
  1796  006A                     _tripIL:
  1797  006A                     	ds	1
  1798  006B                     _tripIDS:
  1799  006B                     	ds	1
  1800  006C                     _currentState:
  1801  006C                     	ds	1
  1802  006D                     _prevPeriod:
  1803  006D                     	ds	1
  1804  006E                     _setPeriod:
  1805  006E                     	ds	1
  1806                           
  1807                           	psect	bssBANK1
  1808  00A0                     __pbssBANK1:
  1809  00A0                     _integratorScaledLimit:
  1810  00A0                     	ds	8
  1811  00A8                     _clockFrequency:
  1812  00A8                     	ds	4
  1813  00AC                     _filteredDutyPot:
  1814  00AC                     	ds	2
  1815  00AE                     _filteredFreqPot:
  1816  00AE                     	ds	2
  1817  00B0                     _filteredIL:
  1818  00B0                     	ds	2
  1819  00B2                     _filteredIDS:
  1820  00B2                     	ds	2
  1821  00B4                     _prevDuty:
  1822  00B4                     	ds	2
  1823  00B6                     _voltageModeVariables:
  1824  00B6                     	ds	28
  1825                           
  1826                           	psect	bssBANK2
  1827  0120                     __pbssBANK2:
  1828  0120                     _currentILFIFO:
  1829  0120                     	ds	32
  1830  0140                     _currentIDSFIFO:
  1831  0140                     	ds	32
  1832                           
  1833                           	psect	bssBANK3
  1834  01A0                     __pbssBANK3:
  1835  01A0                     _freqPotFIFO:
  1836  01A0                     	ds	32
  1837  01C0                     _voutFIFO:
  1838  01C0                     	ds	32
  1839                           
  1840                           	psect	bssBANK4
  1841  0220                     __pbssBANK4:
  1842  0220                     _dutyPotFIFO:
  1843  0220                     	ds	32
  1844                           
  1845                           	psect	clrtext
  1846  0B91                     clear_ram0:	
  1847                           ;	Called with FSR0 containing the base address, and
  1848                           ;	WREG with the size to clear
  1849                           
  1850  0B91  0064               	clrwdt	;clear the watchdog before getting into this loop
  1851  0B92                     clrloop0:
  1852  0B92  0180               	clrf	0	;clear RAM location pointed to by FSR
  1853  0B93  3101               	addfsr 0,1
  1854  0B94  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1855  0B95  2B92               	goto	clrloop0	;have we reached the end yet?
  1856  0B96  3400               	retlw	0	;all done for this memory range, return
  1857                           
  1858                           	psect	cstackBANK1
  1859  00D2                     __pcstackBANK1:
  1860  00D2                     ?_writeGPIO:
  1861  00D2                     ??_transToInitialising:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  00D2                     ??_setupInternalOscillator:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00D2                     ??_setupTimer0Interrupt:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00D2                     ??_initialiseADCModule:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00D2                     ?_initialiseGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00D2                     ??_readGPIO:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00D2                     ??_transToVoltageModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00D2                     ??_transToCurrentModeControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00D2                     ??_transToPotControl:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00D2                     ??_initialiseADCPin:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00D2                     initialiseGPIO@direction:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00D2                     writeGPIO@writeValue:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x0
  1899  00D2                     	ds	1
  1900  00D3                     ??_writeGPIO:
  1901  00D3                     ??_initialiseGPIO:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1
  1906  00D3                     	ds	1
  1907  00D4                     setupInternalOscillator@selectedFreq:
  1908  00D4                     initialiseADCPin@gpioValid:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911  00D4                     readGPIO@readA:	
  1912                           ; 1 bytes @ 0x2
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x2
  1916  00D4                     	ds	1
  1917  00D5                     initialiseADCPin@portType:
  1918  00D5                     initialiseGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00D5                     writeGPIO@portType:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924  00D5                     readGPIO@returnValueA:	
  1925                           ; 1 bytes @ 0x3
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x3
  1929  00D5                     	ds	1
  1930  00D6                     initialiseADCPin@portNumber:
  1931  00D6                     initialiseGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00D6                     writeGPIO@gpioNumber:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937  00D6                     readGPIO@readB:	
  1938                           ; 1 bytes @ 0x4
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x4
  1942  00D6                     	ds	1
  1943  00D7                     initialiseADCPin@gpioNumber:
  1944  00D7                     initialiseGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00D7                     writeGPIO@portNumber:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  00D7                     readGPIO@returnValueB:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  00D7                     	ds	1
  1956  00D8                     ??_setupPWM:
  1957  00D8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00D8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00D8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00D8                     ??_currentTripReset:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969  00D8                     readGPIO@portNumber:	
  1970                           ; 1 bytes @ 0x6
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x6
  1974  00D8                     	ds	1
  1975  00D9                     readGPIO@portType:
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  00D9                     	ds	1
  1979  00DA                     readGPIO@gpioNumber:
  1980                           
  1981                           ; 1 bytes @ 0x8
  1982  00DA                     	ds	1
  1983  00DB                     ?_main:
  1984  00DB                     main@argc:	
  1985                           ; 2 bytes @ 0x9
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00DB                     	ds	2
  1990  00DD                     main@argv:
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  00DD                     	ds	2
  1994  00DF                     ??_main:
  1995                           
  1996                           	psect	cstackCOMMON
  1997  0070                     __pcstackCOMMON:	
  1998                           ; 1 bytes @ 0xD
  1999                           
  2000  0070                     ?_setPWMDutyandPeriod:
  2001  0070                     ?_controlRoutine:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_runPotScaling:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_transToInitialising:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_setupInternalOscillator:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_setupPWM:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_setupTimer0Interrupt:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_initialiseADCModule:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_initialiseCurrentSensors:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialisePotentiometers:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_initialiseController:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_readGPIO:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_transToVoltageModeControl:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_transToCurrentModeControl:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_transToPotControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_runVoltageModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_currentTripReset:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_transToOverCurrentFault:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_transToOverCurrentFault:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick490Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_currentTripRead:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ??___omul:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_writeGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_readGPIO:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1_currentTripReset:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_currentTripMonitor:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_readFilteredIL:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?_abs:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?_readADCRaw:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?___wmul:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?___lmul:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097  0070                     i1writeGPIO@writeValue:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     setPWMDutyandPeriod@dutyCycle:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___wmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     abs@a:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ___lmul@multiplier:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112                           
  2113                           ; 4 bytes @ 0x0
  2114  0070                     	ds	1
  2115  0071                     ??i1_writeGPIO:
  2116  0071                     ___omul@product:	
  2117                           ; 1 bytes @ 0x1
  2118                           
  2119                           
  2120                           ; 8 bytes @ 0x1
  2121  0071                     	ds	1
  2122  0072                     ??_readFilteredIL:
  2123  0072                     ??_abs:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     ??_readADCRaw:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     setPWMDutyandPeriod@period:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132  0072                     i1readGPIO@readA:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     ___wmul@multiplicand:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x2
  2140  0072                     	ds	1
  2141  0073                     ??_setPWMDutyandPeriod:
  2142  0073                     i1writeGPIO@portType:	
  2143                           ; 1 bytes @ 0x3
  2144                           
  2145  0073                     i1readGPIO@returnValueA:	
  2146                           ; 1 bytes @ 0x3
  2147                           
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  0073                     	ds	1
  2151  0074                     ??___wmul:
  2152  0074                     i1writeGPIO@gpioNumber:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     i1readGPIO@readB:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     readADCRaw@returnValue:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161  0074                     ___wmul@product:	
  2162                           ; 2 bytes @ 0x4
  2163                           
  2164  0074                     ___lmul@multiplicand:	
  2165                           ; 2 bytes @ 0x4
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1writeGPIO@portNumber:
  2171  0075                     i1readGPIO@returnValueB:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174                           
  2175                           ; 1 bytes @ 0x5
  2176  0075                     	ds	1
  2177  0076                     ??i1_currentTripReset:
  2178  0076                     ?___lldiv:	
  2179                           ; 1 bytes @ 0x6
  2180                           
  2181  0076                     readADCRaw@channel:	
  2182                           ; 4 bytes @ 0x6
  2183                           
  2184  0076                     i1readGPIO@portNumber:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187  0076                     readFilteredIL@sumOfSamples:	
  2188                           ; 1 bytes @ 0x6
  2189                           
  2190  0076                     ___lldiv@divisor:	
  2191                           ; 4 bytes @ 0x6
  2192                           
  2193                           
  2194                           ; 4 bytes @ 0x6
  2195  0076                     	ds	1
  2196  0077                     readADCRaw@gpioValid:
  2197  0077                     i1readGPIO@portType:	
  2198                           ; 1 bytes @ 0x7
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x7
  2202  0077                     	ds	1
  2203  0078                     ??___lmul:
  2204  0078                     readADCRaw@i:	
  2205                           ; 1 bytes @ 0x8
  2206                           
  2207  0078                     i1readGPIO@gpioNumber:	
  2208                           ; 1 bytes @ 0x8
  2209                           
  2210  0078                     ___lmul@product:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213                           
  2214                           ; 4 bytes @ 0x8
  2215  0078                     	ds	1
  2216  0079                     ??_currentTripRead:
  2217  0079                     readADCRaw@gpioNumber:	
  2218                           ; 1 bytes @ 0x9
  2219                           
  2220                           
  2221                           ; 1 bytes @ 0x9
  2222  0079                     	ds	1
  2223  007A                     ?_readFilteredVout:
  2224  007A                     ?_readFilteredDutyPot:	
  2225                           ; 2 bytes @ 0xA
  2226                           
  2227  007A                     ?_readFilteredFreqPot:	
  2228                           ; 2 bytes @ 0xA
  2229                           
  2230  007A                     _currentTripRead$918:	
  2231                           ; 2 bytes @ 0xA
  2232                           
  2233  007A                     readFilteredIL@i_926:	
  2234                           ; 1 bytes @ 0xA
  2235                           
  2236  007A                     ___lldiv@dividend:	
  2237                           ; 1 bytes @ 0xA
  2238                           
  2239                           
  2240                           ; 4 bytes @ 0xA
  2241  007A                     	ds	1
  2242  007B                     ??_currentTripMonitor:
  2243  007B                     readFilteredIL@i:	
  2244                           ; 1 bytes @ 0xB
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0xB
  2248  007B                     	ds	1
  2249  007C                     ?_convertRawToMilliVolts:
  2250  007C                     convertRawToMilliVolts@rawValue:	
  2251                           ; 2 bytes @ 0xC
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0xC
  2255  007C                     	ds	2
  2256                           
  2257                           	psect	cstackBANK0
  2258  0020                     __pcstackBANK0:
  2259  0020                     ??_readFilteredVout:
  2260  0020                     ??_readFilteredDutyPot:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0020                     ??_readFilteredFreqPot:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0020                     ??_convertRawToMilliVolts:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0020                     ??___lldiv:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0020                     ?___omul:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0020                     ___omul@multiplier:	
  2276                           ; 8 bytes @ 0x0
  2277                           
  2278                           
  2279                           ; 8 bytes @ 0x0
  2280  0020                     	ds	1
  2281  0021                     ___lldiv@quotient:
  2282                           
  2283                           ; 4 bytes @ 0x1
  2284  0021                     	ds	3
  2285  0024                     readFilteredDutyPot@sumOfSamples:
  2286  0024                     readFilteredFreqPot@sumOfSamples:	
  2287                           ; 4 bytes @ 0x4
  2288                           
  2289  0024                     readFilteredVout@sumOfSamples:	
  2290                           ; 4 bytes @ 0x4
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x4
  2294  0024                     	ds	1
  2295  0025                     ___lldiv@counter:
  2296  0025                     convertRawToMilliVolts@vsenseMult:	
  2297                           ; 1 bytes @ 0x5
  2298                           
  2299                           
  2300                           ; 4 bytes @ 0x5
  2301  0025                     	ds	1
  2302  0026                     ??_runPotScaling:
  2303                           
  2304                           ; 1 bytes @ 0x6
  2305  0026                     	ds	2
  2306  0028                     readFilteredDutyPot@i_754:
  2307  0028                     readFilteredFreqPot@i_758:	
  2308                           ; 1 bytes @ 0x8
  2309                           
  2310  0028                     readFilteredVout@i_836:	
  2311                           ; 1 bytes @ 0x8
  2312                           
  2313  0028                     ___omul@multiplicand:	
  2314                           ; 1 bytes @ 0x8
  2315                           
  2316                           
  2317                           ; 8 bytes @ 0x8
  2318  0028                     	ds	1
  2319  0029                     readFilteredDutyPot@i:
  2320  0029                     readFilteredFreqPot@i:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0029                     readFilteredVout@i:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0029                     convertRawToMilliVolts@offsetted:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 2 bytes @ 0x9
  2331  0029                     	ds	2
  2332  002B                     convertRawToMilliVolts@returnValuedV:
  2333                           
  2334                           ; 2 bytes @ 0xB
  2335  002B                     	ds	1
  2336  002C                     runPotScaling@potScaled:
  2337                           
  2338                           ; 4 bytes @ 0xC
  2339  002C                     	ds	4
  2340  0030                     ??_runVoltageModeControl:
  2341  0030                     runPotScaling@maxDuty:	
  2342                           ; 1 bytes @ 0x10
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x10
  2346  0030                     	ds	2
  2347  0032                     runPotScaling@minDuty:
  2348                           
  2349                           ; 2 bytes @ 0x12
  2350  0032                     	ds	14
  2351  0040                     runVoltageModeControl@integralMult:
  2352                           
  2353                           ; 8 bytes @ 0x20
  2354  0040                     	ds	8
  2355  0048                     runVoltageModeControl@propMult:
  2356                           
  2357                           ; 8 bytes @ 0x28
  2358  0048                     	ds	8
  2359  0050                     runVoltageModeControl@newVoltage:
  2360                           
  2361                           ; 2 bytes @ 0x30
  2362  0050                     	ds	2
  2363  0052                     ??_controlRoutine:
  2364                           
  2365                           ; 1 bytes @ 0x32
  2366  0052                     	ds	6
  2367  0058                     controlRoutine@maxDuty:
  2368                           
  2369                           ; 2 bytes @ 0x38
  2370  0058                     	ds	2
  2371  005A                     controlRoutine@minDuty:
  2372                           
  2373                           ; 2 bytes @ 0x3A
  2374  005A                     	ds	2
  2375  005C                     controlRoutine@setDuty_unreg:
  2376                           
  2377                           ; 2 bytes @ 0x3C
  2378  005C                     	ds	2
  2379  005E                     ??_Tick490Hz:
  2380                           
  2381                           ; 1 bytes @ 0x3E
  2382  005E                     	ds	1
  2383                           
  2384                           	psect	maintext
  2385  0CED                     __pmaintext:	
  2386 ;;
  2387 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2388 ;;
  2389 ;; *************** function _main *****************
  2390 ;; Defined at:
  2391 ;;		line 107 in file "main.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  argc            2    9[BANK1 ] int 
  2394 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2    9[BANK1 ] int 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : B1F/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2406 ;;      Params:         0       0       4       0       0       0
  2407 ;;      Locals:         0       0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0
  2409 ;;      Totals:         0       0       4       0       0       0
  2410 ;;Total ram usage:        4 bytes
  2411 ;; Hardware stack levels required when called: 8
  2412 ;; This function calls:
  2413 ;;		_initialiseADCModule
  2414 ;;		_initialiseController
  2415 ;;		_initialiseCurrentSensors
  2416 ;;		_initialiseGPIO
  2417 ;;		_initialisePotentiometers
  2418 ;;		_readGPIO
  2419 ;;		_setupInternalOscillator
  2420 ;;		_setupPWM
  2421 ;;		_setupTimer0Interrupt
  2422 ;;		_transToCurrentModeControl
  2423 ;;		_transToInitialising
  2424 ;;		_transToPotControl
  2425 ;;		_transToVoltageModeControl
  2426 ;; This function is called by:
  2427 ;;		Startup code after reset
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431  0CED                     _main:	
  2432                           ;psect for function _main
  2433                           
  2434  0CED                     l2733:	
  2435                           ;incstack = 0
  2436                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2437                           
  2438                           
  2439                           ;main.c: 109:     transToInitialising();
  2440  0CED  318B  2384  318C   	fcall	_transToInitialising
  2441  0CF0                     l2735:
  2442                           
  2443                           ;main.c: 110:     setupInternalOscillator(freq32M);
  2444  0CF0  300A               	movlw	10
  2445  0CF1  3185  2516  318C   	fcall	_setupInternalOscillator
  2446  0CF4                     l2737:
  2447                           
  2448                           ;main.c: 111:     setupPWM();
  2449  0CF4  318B  23F3  318C   	fcall	_setupPWM
  2450  0CF7                     l2739:
  2451                           
  2452                           ;main.c: 112:     setupTimer0Interrupt();
  2453  0CF7  318B  23A5  318C   	fcall	_setupTimer0Interrupt
  2454  0CFA                     l2741:
  2455                           
  2456                           ;main.c: 113:     initialiseADCModule();
  2457  0CFA  318B  238B  318C   	fcall	_initialiseADCModule
  2458  0CFD                     l2743:
  2459                           
  2460                           ;main.c: 114:     initialiseCurrentSensors();
  2461  0CFD  318C  244B  318C   	fcall	_initialiseCurrentSensors
  2462  0D00                     l2745:
  2463                           
  2464                           ;main.c: 115:     initialisePotentiometers();
  2465  0D00  318B  23B6  318C   	fcall	_initialisePotentiometers
  2466  0D03                     l2747:
  2467                           
  2468                           ;main.c: 116:     initialiseController();
  2469  0D03  318C  240F  318C   	fcall	_initialiseController
  2470  0D06                     l2749:
  2471                           
  2472                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2473  0D06  0021               	movlb	1	; select bank1
  2474  0D07  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2475  0D08  300C               	movlw	12
  2476  0D09  3185  25DB  318C   	fcall	_initialiseGPIO
  2477  0D0C                     l2751:
  2478                           
  2479                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2480  0D0C  0021               	movlb	1	; select bank1
  2481  0D0D  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2482  0D0E  300D               	movlw	13
  2483  0D0F  3185  25DB  318C   	fcall	_initialiseGPIO
  2484  0D12                     l2753:
  2485  0D12                     l2755:	
  2486                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2487                           
  2488                           
  2489                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2490  0D12  3008               	movlw	8
  2491  0D13  318D  25A7  318C   	fcall	_readGPIO
  2492  0D16  3A01               	xorlw	1
  2493  0D17  1903               	skipnz
  2494  0D18  2D1A               	goto	u2611
  2495  0D19  2D1B               	goto	u2610
  2496  0D1A                     u2611:
  2497  0D1A  2D1F               	goto	l2761
  2498  0D1B                     u2610:
  2499  0D1B                     l2757:
  2500  0D1B  318B  239E  318C   	fcall	_transToVoltageModeControl
  2501  0D1E  2D22               	goto	l120
  2502  0D1F                     l2761:
  2503  0D1F  318B  2387  318C   	fcall	_transToPotControl
  2504  0D22                     l120:	
  2505                           ;main.c: 129:     while(1){
  2506                           
  2507  0D22  2D22               	goto	l120
  2508  0D23  3180  2886         	ljmp	start
  2509  0D25                     __end_of_main:
  2510                           
  2511                           	psect	text1
  2512  0B9E                     __ptext1:	
  2513 ;; *************** function _transToVoltageModeControl *****************
  2514 ;; Defined at:
  2515 ;;		line 35 in file "StateMachine.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2529 ;;      Params:         0       0       0       0       0       0
  2530 ;;      Locals:         0       0       0       0       0       0
  2531 ;;      Temps:          0       0       1       0       0       0
  2532 ;;      Totals:         0       0       1       0       0       0
  2533 ;;Total ram usage:        1 bytes
  2534 ;; Hardware stack levels used: 1
  2535 ;; Hardware stack levels required when called: 5
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_main
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543  0B9E                     _transToVoltageModeControl:	
  2544                           ;psect for function _transToVoltageModeControl
  2545                           
  2546  0B9E                     l2693:	
  2547                           ;incstack = 0
  2548                           ; Regs used in _transToVoltageModeControl: [wreg]
  2549                           
  2550                           
  2551                           ;StateMachine.c: 36:     currentState = voltageModeControl;
  2552  0B9E  3002               	movlw	2
  2553  0B9F  0021               	movlb	1	; select bank1
  2554  0BA0  00D2               	movwf	??_transToVoltageModeControl^(0+128)
  2555  0BA1  0852               	movf	??_transToVoltageModeControl^(0+128),w
  2556  0BA2  0020               	movlb	0	; select bank0
  2557  0BA3  00EC               	movwf	_currentState
  2558  0BA4                     l566:
  2559  0BA4  0008               	return
  2560  0BA5                     __end_of_transToVoltageModeControl:
  2561                           
  2562                           	psect	text2
  2563  0B87                     __ptext2:	
  2564 ;; *************** function _transToPotControl *****************
  2565 ;; Defined at:
  2566 ;;		line 26 in file "StateMachine.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		None
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2580 ;;      Params:         0       0       0       0       0       0
  2581 ;;      Locals:         0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0
  2583 ;;      Totals:         0       0       0       0       0       0
  2584 ;;Total ram usage:        0 bytes
  2585 ;; Hardware stack levels used: 1
  2586 ;; Hardware stack levels required when called: 5
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_main
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594  0B87                     _transToPotControl:	
  2595                           ;psect for function _transToPotControl
  2596                           
  2597  0B87                     l2697:	
  2598                           ;incstack = 0
  2599                           ; Regs used in _transToPotControl: []
  2600                           
  2601                           
  2602                           ;StateMachine.c: 27:     currentState = potControl;
  2603  0B87  0020               	movlb	0	; select bank0
  2604  0B88  01EC               	clrf	_currentState
  2605  0B89  0AEC               	incf	_currentState,f
  2606  0B8A                     l563:
  2607  0B8A  0008               	return
  2608  0B8B                     __end_of_transToPotControl:
  2609                           
  2610                           	psect	text3
  2611  0B84                     __ptext3:	
  2612 ;; *************** function _transToInitialising *****************
  2613 ;; Defined at:
  2614 ;;		line 18 in file "StateMachine.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		status,2
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2628 ;;      Params:         0       0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0
  2631 ;;      Totals:         0       0       0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 5
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_main
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642  0B84                     _transToInitialising:	
  2643                           ;psect for function _transToInitialising
  2644                           
  2645  0B84                     l2535:	
  2646                           ;incstack = 0
  2647                           ; Regs used in _transToInitialising: [status,2]
  2648                           
  2649                           
  2650                           ;StateMachine.c: 19:     currentState = initialising;
  2651  0B84  0020               	movlb	0	; select bank0
  2652  0B85  01EC               	clrf	_currentState
  2653  0B86                     l560:
  2654  0B86  0008               	return
  2655  0B87                     __end_of_transToInitialising:
  2656                           
  2657                           	psect	text4
  2658  0B97                     __ptext4:	
  2659 ;; *************** function _transToCurrentModeControl *****************
  2660 ;; Defined at:
  2661 ;;		line 44 in file "StateMachine.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2675 ;;      Params:         0       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0
  2677 ;;      Temps:          0       0       1       0       0       0
  2678 ;;      Totals:         0       0       1       0       0       0
  2679 ;;Total ram usage:        1 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 5
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689  0B97                     _transToCurrentModeControl:	
  2690                           ;psect for function _transToCurrentModeControl
  2691                           
  2692  0B97                     l2695:	
  2693                           ;incstack = 0
  2694                           ; Regs used in _transToCurrentModeControl: [wreg]
  2695                           
  2696                           
  2697                           ;StateMachine.c: 45:     currentState = currentModeControl;
  2698  0B97  3003               	movlw	3
  2699  0B98  0021               	movlb	1	; select bank1
  2700  0B99  00D2               	movwf	??_transToCurrentModeControl^(0+128)
  2701  0B9A  0852               	movf	??_transToCurrentModeControl^(0+128),w
  2702  0B9B  0020               	movlb	0	; select bank0
  2703  0B9C  00EC               	movwf	_currentState
  2704  0B9D                     l569:
  2705  0B9D  0008               	return
  2706  0B9E                     __end_of_transToCurrentModeControl:
  2707                           
  2708                           	psect	text5
  2709  0BA5                     __ptext5:	
  2710 ;; *************** function _setupTimer0Interrupt *****************
  2711 ;; Defined at:
  2712 ;;		line 17 in file "Timer0.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2726 ;;      Params:         0       0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used: 1
  2732 ;; Hardware stack levels required when called: 5
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740  0BA5                     _setupTimer0Interrupt:	
  2741                           ;psect for function _setupTimer0Interrupt
  2742                           
  2743  0BA5                     l2639:	
  2744                           ;incstack = 0
  2745                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2746                           
  2747                           
  2748                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2749  0BA5  178B               	bsf	11,7	;volatile
  2750                           
  2751                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2752  0BA6  168B               	bsf	11,5	;volatile
  2753                           
  2754                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2755  0BA7  0021               	movlb	1	; select bank1
  2756  0BA8  1295               	bcf	21,5	;volatile
  2757                           
  2758                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2759  0BA9  1195               	bcf	21,3	;volatile
  2760  0BAA                     l2641:
  2761                           
  2762                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2763  0BAA  3005               	movlw	5
  2764  0BAB  0095               	movwf	21	;volatile
  2765  0BAC                     l201:
  2766  0BAC  0008               	return
  2767  0BAD                     __end_of_setupTimer0Interrupt:
  2768                           
  2769                           	psect	text6
  2770  0BF3                     __ptext6:	
  2771 ;; *************** function _setupPWM *****************
  2772 ;; Defined at:
  2773 ;;		line 16 in file "PWM.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2787 ;;      Params:         0       0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used: 1
  2793 ;; Hardware stack levels required when called: 6
  2794 ;; This function calls:
  2795 ;;		_initialiseGPIO
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801  0BF3                     _setupPWM:	
  2802                           ;psect for function _setupPWM
  2803                           
  2804  0BF3                     l2615:	
  2805                           ;incstack = 0
  2806                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2807                           
  2808                           
  2809                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2810  0BF3  300C               	movlw	12
  2811  0BF4  0025               	movlb	5	; select bank5
  2812  0BF5  0093               	movwf	19	;volatile
  2813  0BF6                     l2617:
  2814                           
  2815                           ;PWM.c: 20:     PR2 = 0;
  2816  0BF6  0020               	movlb	0	; select bank0
  2817  0BF7  019B               	clrf	27	;volatile
  2818  0BF8                     l2619:
  2819                           
  2820                           ;PWM.c: 21:     CCPR1L = 0;
  2821  0BF8  0025               	movlb	5	; select bank5
  2822  0BF9  0191               	clrf	17	;volatile
  2823  0BFA                     l2621:
  2824                           
  2825                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2826  0BFA  0022               	movlb	2	; select bank2
  2827  0BFB  151D               	bsf	29,2	;volatile
  2828  0BFC                     l2623:
  2829                           
  2830                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2831  0BFC  0025               	movlb	5	; select bank5
  2832  0BFD  1596               	bsf	22,3	;volatile
  2833  0BFE                     l2625:
  2834                           
  2835                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2836  0BFE  1016               	bcf	22,0	;volatile
  2837  0BFF                     l2627:
  2838                           
  2839                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2840  0BFF  30FC               	movlw	-4
  2841  0C00  0020               	movlb	0	; select bank0
  2842  0C01  059C               	andwf	28,f	;volatile
  2843  0C02                     l2629:
  2844                           
  2845                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2846  0C02  0021               	movlb	1	; select bank1
  2847  0C03  1091               	bcf	17,1	;volatile
  2848  0C04                     l2631:
  2849                           
  2850                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2851  0C04  0020               	movlb	0	; select bank0
  2852  0C05  151C               	bsf	28,2	;volatile
  2853  0C06                     l2633:
  2854                           
  2855                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2856  0C06  170B               	bsf	11,6	;volatile
  2857  0C07                     l2635:
  2858                           
  2859                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2860  0C07  0021               	movlb	1	; select bank1
  2861  0C08  1511               	bsf	17,2	;volatile
  2862  0C09                     l2637:
  2863                           
  2864                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2865  0C09  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2866  0C0A  3006               	movlw	6
  2867  0C0B  3185  25DB  318B   	fcall	_initialiseGPIO
  2868  0C0E                     l174:
  2869  0C0E  0008               	return
  2870  0C0F                     __end_of_setupPWM:
  2871                           
  2872                           	psect	text7
  2873  0516                     __ptext7:	
  2874 ;; *************** function _setupInternalOscillator *****************
  2875 ;; Defined at:
  2876 ;;		line 140 in file "main.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  selectedFreq    1    wreg     const enum E2846
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  selectedFreq    1    2[BANK1 ] const enum E2846
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2890 ;;      Params:         0       0       0       0       0       0
  2891 ;;      Locals:         0       0       1       0       0       0
  2892 ;;      Temps:          0       0       2       0       0       0
  2893 ;;      Totals:         0       0       3       0       0       0
  2894 ;;Total ram usage:        3 bytes
  2895 ;; Hardware stack levels used: 1
  2896 ;; Hardware stack levels required when called: 5
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904  0516                     _setupInternalOscillator:	
  2905                           ;psect for function _setupInternalOscillator
  2906                           
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2910                           ;setupInternalOscillator@selectedFreq stored from wreg
  2911  0516  0021               	movlb	1	; select bank1
  2912  0517  00D4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2913  0518                     l2537:
  2914                           
  2915                           ;main.c: 144:     switch(selectedFreq){
  2916  0518  2DAF               	goto	l2607
  2917  0519                     l2539:
  2918  0519  3087               	movlw	-121
  2919  051A  0599               	andwf	25,f	;volatile
  2920  051B                     l2541:
  2921  051B  1399               	bcf	25,7	;volatile
  2922  051C                     l2543:
  2923  051C  3000               	movlw	0
  2924  051D  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2925  051E  3000               	movlw	0
  2926  051F  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2927  0520  3079               	movlw	121
  2928  0521  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2929  0522  3018               	movlw	24
  2930  0523  00A8               	movwf	_clockFrequency^(0+128)
  2931  0524  2DDA               	goto	l139
  2932  0525                     l2545:
  2933  0525  0819               	movf	25,w	;volatile
  2934  0526  3987               	andlw	-121
  2935  0527  3820               	iorlw	32
  2936  0528  0099               	movwf	25	;volatile
  2937  0529                     l2547:
  2938  0529  1399               	bcf	25,7	;volatile
  2939  052A                     l2549:
  2940  052A  3000               	movlw	0
  2941  052B  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2942  052C  3000               	movlw	0
  2943  052D  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2944  052E  30F4               	movlw	244
  2945  052F  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2946  0530  3024               	movlw	36
  2947  0531  00A8               	movwf	_clockFrequency^(0+128)
  2948  0532  2DDA               	goto	l139
  2949  0533                     l2551:
  2950  0533  0819               	movf	25,w	;volatile
  2951  0534  3987               	andlw	-121
  2952  0535  3828               	iorlw	40
  2953  0536  0099               	movwf	25	;volatile
  2954  0537                     l2553:
  2955  0537  1399               	bcf	25,7	;volatile
  2956  0538                     l2555:
  2957  0538  3000               	movlw	0
  2958  0539  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2959  053A  3001               	movlw	1
  2960  053B  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2961  053C  30E8               	movlw	232
  2962  053D  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2963  053E  3048               	movlw	72
  2964  053F  00A8               	movwf	_clockFrequency^(0+128)
  2965  0540  2DDA               	goto	l139
  2966  0541                     l2557:
  2967  0541  0819               	movf	25,w	;volatile
  2968  0542  3987               	andlw	-121
  2969  0543  3830               	iorlw	48
  2970  0544  0099               	movwf	25	;volatile
  2971  0545                     l2559:
  2972  0545  1399               	bcf	25,7	;volatile
  2973  0546                     l2561:
  2974  0546  3000               	movlw	0
  2975  0547  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2976  0548  3003               	movlw	3
  2977  0549  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2978  054A  30D0               	movlw	208
  2979  054B  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2980  054C  3090               	movlw	144
  2981  054D  00A8               	movwf	_clockFrequency^(0+128)
  2982  054E  2DDA               	goto	l139
  2983  054F                     l2563:
  2984  054F  0819               	movf	25,w	;volatile
  2985  0550  3987               	andlw	-121
  2986  0551  3838               	iorlw	56
  2987  0552  0099               	movwf	25	;volatile
  2988  0553                     l2565:
  2989  0553  1399               	bcf	25,7	;volatile
  2990  0554                     l2567:
  2991  0554  3000               	movlw	0
  2992  0555  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2993  0556  3007               	movlw	7
  2994  0557  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2995  0558  30A1               	movlw	161
  2996  0559  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2997  055A  3020               	movlw	32
  2998  055B  00A8               	movwf	_clockFrequency^(0+128)
  2999  055C  2DDA               	goto	l139
  3000  055D                     l2569:
  3001  055D  0819               	movf	25,w	;volatile
  3002  055E  3987               	andlw	-121
  3003  055F  3858               	iorlw	88
  3004  0560  0099               	movwf	25	;volatile
  3005  0561                     l2571:
  3006  0561  1399               	bcf	25,7	;volatile
  3007  0562                     l2573:
  3008  0562  3000               	movlw	0
  3009  0563  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3010  0564  300F               	movlw	15
  3011  0565  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3012  0566  3042               	movlw	66
  3013  0567  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3014  0568  3040               	movlw	64
  3015  0569  00A8               	movwf	_clockFrequency^(0+128)
  3016  056A  2DDA               	goto	l139
  3017  056B                     l2575:
  3018  056B  0819               	movf	25,w	;volatile
  3019  056C  3987               	andlw	-121
  3020  056D  3860               	iorlw	96
  3021  056E  0099               	movwf	25	;volatile
  3022  056F                     l2577:
  3023  056F  1399               	bcf	25,7	;volatile
  3024  0570                     l2579:
  3025  0570  3000               	movlw	0
  3026  0571  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3027  0572  301E               	movlw	30
  3028  0573  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3029  0574  3084               	movlw	132
  3030  0575  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3031  0576  3080               	movlw	128
  3032  0577  00A8               	movwf	_clockFrequency^(0+128)
  3033  0578  2DDA               	goto	l139
  3034  0579                     l2581:
  3035  0579  0819               	movf	25,w	;volatile
  3036  057A  3987               	andlw	-121
  3037  057B  3868               	iorlw	104
  3038  057C  0099               	movwf	25	;volatile
  3039  057D                     l2583:
  3040  057D  1399               	bcf	25,7	;volatile
  3041  057E                     l2585:
  3042  057E  3000               	movlw	0
  3043  057F  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3044  0580  303D               	movlw	61
  3045  0581  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3046  0582  3009               	movlw	9
  3047  0583  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3048  0584  3000               	movlw	0
  3049  0585  00A8               	movwf	_clockFrequency^(0+128)
  3050  0586  2DDA               	goto	l139
  3051  0587                     l2587:
  3052  0587  0819               	movf	25,w	;volatile
  3053  0588  3987               	andlw	-121
  3054  0589  3870               	iorlw	112
  3055  058A  0099               	movwf	25	;volatile
  3056  058B                     l2589:
  3057  058B  1399               	bcf	25,7	;volatile
  3058  058C                     l2591:
  3059  058C  3000               	movlw	0
  3060  058D  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3061  058E  307A               	movlw	122
  3062  058F  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3063  0590  3012               	movlw	18
  3064  0591  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3065  0592  3000               	movlw	0
  3066  0593  00A8               	movwf	_clockFrequency^(0+128)
  3067  0594  2DDA               	goto	l139
  3068  0595                     l2593:
  3069  0595  3078               	movlw	120
  3070  0596  0499               	iorwf	25,f	;volatile
  3071  0597                     l2595:
  3072  0597  1399               	bcf	25,7	;volatile
  3073  0598                     l2597:
  3074  0598  3000               	movlw	0
  3075  0599  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3076  059A  30F4               	movlw	244
  3077  059B  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3078  059C  3024               	movlw	36
  3079  059D  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3080  059E  3000               	movlw	0
  3081  059F  00A8               	movwf	_clockFrequency^(0+128)
  3082  05A0  2DDA               	goto	l139
  3083  05A1                     l2599:
  3084  05A1  0819               	movf	25,w	;volatile
  3085  05A2  3987               	andlw	-121
  3086  05A3  3870               	iorlw	112
  3087  05A4  0099               	movwf	25	;volatile
  3088  05A5                     l2601:
  3089  05A5  1799               	bsf	25,7	;volatile
  3090  05A6                     l2603:
  3091  05A6  3001               	movlw	1
  3092  05A7  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3093  05A8  30E8               	movlw	232
  3094  05A9  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3095  05AA  3048               	movlw	72
  3096  05AB  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3097  05AC  3000               	movlw	0
  3098  05AD  00A8               	movwf	_clockFrequency^(0+128)
  3099  05AE  2DDA               	goto	l139
  3100  05AF                     l2607:
  3101  05AF  0854               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3102  05B0  00D2               	movwf	??_setupInternalOscillator^(0+128)
  3103  05B1  01D3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3104                           
  3105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3106                           ; Switch size 1, requested type "simple"
  3107                           ; Number of cases is 1, Range of values is 0 to 0
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte            4     3 (average)
  3111                           ; direct_byte            8     6 (fixed)
  3112                           ; jumptable            260     6 (fixed)
  3113                           ;	Chosen strategy is simple_byte
  3114  05B2  0853               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3115  05B3  3A00               	xorlw	0	; case 0
  3116  05B4  1903               	skipnz
  3117  05B5  2DB7               	goto	l2827
  3118  05B6  2DDA               	goto	l139
  3119  05B7                     l2827:
  3120                           
  3121                           ; Switch size 1, requested type "simple"
  3122                           ; Number of cases is 11, Range of values is 0 to 10
  3123                           ; switch strategies available:
  3124                           ; Name         Instructions Cycles
  3125                           ; direct_byte           28     6 (fixed)
  3126                           ; simple_byte           34    18 (average)
  3127                           ; jumptable            260     6 (fixed)
  3128                           ;	Chosen strategy is simple_byte
  3129  05B7  0852               	movf	??_setupInternalOscillator^(0+128),w
  3130  05B8  3A00               	xorlw	0	; case 0
  3131  05B9  1903               	skipnz
  3132  05BA  2D19               	goto	l2539
  3133  05BB  3A01               	xorlw	1	; case 1
  3134  05BC  1903               	skipnz
  3135  05BD  2D25               	goto	l2545
  3136  05BE  3A03               	xorlw	3	; case 2
  3137  05BF  1903               	skipnz
  3138  05C0  2D33               	goto	l2551
  3139  05C1  3A01               	xorlw	1	; case 3
  3140  05C2  1903               	skipnz
  3141  05C3  2D41               	goto	l2557
  3142  05C4  3A07               	xorlw	7	; case 4
  3143  05C5  1903               	skipnz
  3144  05C6  2D4F               	goto	l2563
  3145  05C7  3A01               	xorlw	1	; case 5
  3146  05C8  1903               	skipnz
  3147  05C9  2D5D               	goto	l2569
  3148  05CA  3A03               	xorlw	3	; case 6
  3149  05CB  1903               	skipnz
  3150  05CC  2D6B               	goto	l2575
  3151  05CD  3A01               	xorlw	1	; case 7
  3152  05CE  1903               	skipnz
  3153  05CF  2D79               	goto	l2581
  3154  05D0  3A0F               	xorlw	15	; case 8
  3155  05D1  1903               	skipnz
  3156  05D2  2D87               	goto	l2587
  3157  05D3  3A01               	xorlw	1	; case 9
  3158  05D4  1903               	skipnz
  3159  05D5  2D95               	goto	l2593
  3160  05D6  3A03               	xorlw	3	; case 10
  3161  05D7  1903               	skipnz
  3162  05D8  2DA1               	goto	l2599
  3163  05D9  2DDA               	goto	l139
  3164  05DA                     l139:
  3165  05DA  0008               	return
  3166  05DB                     __end_of_setupInternalOscillator:
  3167                           
  3168                           	psect	text8
  3169  0DA7                     __ptext8:	
  3170 ;; *************** function _readGPIO *****************
  3171 ;; Defined at:
  3172 ;;		line 79 in file "GPIO.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  gpioNumber      1    wreg     const enum E2798
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3177 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3178 ;;  readB           1    4[BANK1 ] unsigned char 
  3179 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3180 ;;  readA           1    2[BANK1 ] unsigned char 
  3181 ;;  portType        1    7[BANK1 ] unsigned char 
  3182 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      _Bool 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3192 ;;      Params:         0       0       0       0       0       0
  3193 ;;      Locals:         0       0       7       0       0       0
  3194 ;;      Temps:          0       0       2       0       0       0
  3195 ;;      Totals:         0       0       9       0       0       0
  3196 ;;Total ram usage:        9 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 5
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206  0DA7                     _readGPIO:	
  3207                           ;psect for function _readGPIO
  3208                           
  3209                           
  3210                           ;incstack = 0
  3211                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3212                           ;readGPIO@gpioNumber stored from wreg
  3213  0DA7  0021               	movlb	1	; select bank1
  3214  0DA8  00DA               	movwf	readGPIO@gpioNumber^(0+128)
  3215  0DA9                     l2653:
  3216                           
  3217                           ;GPIO.c: 81:     uint8_t portType = 0;
  3218  0DA9  01D9               	clrf	readGPIO@portType^(0+128)
  3219  0DAA                     l2655:
  3220                           
  3221                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3222  0DAA  3008               	movlw	8
  3223  0DAB  025A               	subwf	readGPIO@gpioNumber^(0+128),w
  3224  0DAC  1C03               	skipc
  3225  0DAD  2DAF               	goto	u2481
  3226  0DAE  2DB0               	goto	u2480
  3227  0DAF                     u2481:
  3228  0DAF  2DB8               	goto	l2661
  3229  0DB0                     u2480:
  3230  0DB0                     l2657:
  3231                           
  3232                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3233  0DB0  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3234  0DB1  3EF8               	addlw	248
  3235  0DB2  00D2               	movwf	??_readGPIO^(0+128)
  3236  0DB3  0852               	movf	??_readGPIO^(0+128),w
  3237  0DB4  00D8               	movwf	readGPIO@portNumber^(0+128)
  3238  0DB5                     l2659:
  3239                           
  3240                           ;GPIO.c: 84:         portType = 1;
  3241  0DB5  01D9               	clrf	readGPIO@portType^(0+128)
  3242  0DB6  0AD9               	incf	readGPIO@portType^(0+128),f
  3243                           
  3244                           ;GPIO.c: 85:     }
  3245  0DB7  2DBD               	goto	l2665
  3246  0DB8                     l2661:
  3247                           
  3248                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3249  0DB8  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3250  0DB9  00D2               	movwf	??_readGPIO^(0+128)
  3251  0DBA  0852               	movf	??_readGPIO^(0+128),w
  3252  0DBB  00D8               	movwf	readGPIO@portNumber^(0+128)
  3253  0DBC                     l2663:
  3254                           
  3255                           ;GPIO.c: 88:         portType = 0;
  3256  0DBC  01D9               	clrf	readGPIO@portType^(0+128)
  3257  0DBD                     l2665:
  3258                           
  3259                           ;GPIO.c: 91:     if(portType == 0){
  3260  0DBD  0859               	movf	readGPIO@portType^(0+128),w
  3261  0DBE  1D03               	btfss	3,2
  3262  0DBF  2DC1               	goto	u2491
  3263  0DC0  2DC2               	goto	u2490
  3264  0DC1                     u2491:
  3265  0DC1  2DD6               	goto	l2677
  3266  0DC2                     u2490:
  3267  0DC2                     l2667:
  3268                           
  3269                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3270  0DC2  0020               	movlb	0	; select bank0
  3271  0DC3  080C               	movf	12,w	;volatile
  3272  0DC4  0021               	movlb	1	; select bank1
  3273  0DC5  00D2               	movwf	??_readGPIO^(0+128)
  3274  0DC6  0852               	movf	??_readGPIO^(0+128),w
  3275  0DC7  00D4               	movwf	readGPIO@readA^(0+128)
  3276  0DC8                     l2669:
  3277                           
  3278                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3279  0DC8  0854               	movf	readGPIO@readA^(0+128),w
  3280  0DC9  00D2               	movwf	??_readGPIO^(0+128)
  3281  0DCA  0A58               	incf	readGPIO@portNumber^(0+128),w
  3282  0DCB  2DCD               	goto	u2504
  3283  0DCC                     u2505:
  3284  0DCC  36D2               	lsrf	??_readGPIO^(0+128),f
  3285  0DCD                     u2504:
  3286  0DCD  0B89               	decfsz	9,f
  3287  0DCE  2DCC               	goto	u2505
  3288  0DCF  0852               	movf	??_readGPIO^(0+128),w
  3289  0DD0  3901               	andlw	1
  3290  0DD1  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3291  0DD2  0853               	movf	(??_readGPIO+1)^(0+128),w
  3292  0DD3  00D5               	movwf	readGPIO@returnValueA^(0+128)
  3293  0DD4                     l2671:
  3294                           
  3295                           ;GPIO.c: 94:         return returnValueA;
  3296  0DD4  0855               	movf	readGPIO@returnValueA^(0+128),w
  3297  0DD5  2DF0               	goto	l326
  3298  0DD6                     l2677:
  3299  0DD6  0359               	decf	readGPIO@portType^(0+128),w
  3300  0DD7  1D03               	btfss	3,2
  3301  0DD8  2DDA               	goto	u2511
  3302  0DD9  2DDB               	goto	u2510
  3303  0DDA                     u2511:
  3304  0DDA  2DEF               	goto	l2689
  3305  0DDB                     u2510:
  3306  0DDB                     l2679:
  3307                           
  3308                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3309  0DDB  0020               	movlb	0	; select bank0
  3310  0DDC  080D               	movf	13,w	;volatile
  3311  0DDD  0021               	movlb	1	; select bank1
  3312  0DDE  00D2               	movwf	??_readGPIO^(0+128)
  3313  0DDF  0852               	movf	??_readGPIO^(0+128),w
  3314  0DE0  00D6               	movwf	readGPIO@readB^(0+128)
  3315  0DE1                     l2681:
  3316                           
  3317                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3318  0DE1  0856               	movf	readGPIO@readB^(0+128),w
  3319  0DE2  00D2               	movwf	??_readGPIO^(0+128)
  3320  0DE3  0A58               	incf	readGPIO@portNumber^(0+128),w
  3321  0DE4  2DE6               	goto	u2524
  3322  0DE5                     u2525:
  3323  0DE5  36D2               	lsrf	??_readGPIO^(0+128),f
  3324  0DE6                     u2524:
  3325  0DE6  0B89               	decfsz	9,f
  3326  0DE7  2DE5               	goto	u2525
  3327  0DE8  0852               	movf	??_readGPIO^(0+128),w
  3328  0DE9  3901               	andlw	1
  3329  0DEA  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3330  0DEB  0853               	movf	(??_readGPIO+1)^(0+128),w
  3331  0DEC  00D7               	movwf	readGPIO@returnValueB^(0+128)
  3332  0DED                     l2683:
  3333                           
  3334                           ;GPIO.c: 99:         return returnValueB;
  3335  0DED  0857               	movf	readGPIO@returnValueB^(0+128),w
  3336  0DEE  2DF0               	goto	l326
  3337  0DEF                     l2689:
  3338  0DEF  3000               	movlw	0
  3339  0DF0                     l326:
  3340  0DF0  0008               	return
  3341  0DF1                     __end_of_readGPIO:
  3342                           
  3343                           	psect	text9
  3344  0BB6                     __ptext9:	
  3345 ;; *************** function _initialisePotentiometers *****************
  3346 ;; Defined at:
  3347 ;;		line 15 in file "Potentiometer.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0, pclath, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3361 ;;      Params:         0       0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0
  3364 ;;      Totals:         0       0       0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used: 1
  3367 ;; Hardware stack levels required when called: 6
  3368 ;; This function calls:
  3369 ;;		_initialiseADCPin
  3370 ;; This function is called by:
  3371 ;;		_main
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375  0BB6                     _initialisePotentiometers:	
  3376                           ;psect for function _initialisePotentiometers
  3377                           
  3378  0BB6                     l2647:	
  3379                           ;incstack = 0
  3380                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3381                           
  3382                           
  3383                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3384  0BB6  3009               	movlw	9
  3385  0BB7  3186  2651  318B   	fcall	_initialiseADCPin
  3386                           
  3387                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3388  0BBA  300A               	movlw	10
  3389  0BBB  3186  2651  318B   	fcall	_initialiseADCPin
  3390  0BBE                     l358:
  3391  0BBE  0008               	return
  3392  0BBF                     __end_of_initialisePotentiometers:
  3393                           
  3394                           	psect	text10
  3395  0C4B                     __ptext10:	
  3396 ;; *************** function _initialiseCurrentSensors *****************
  3397 ;; Defined at:
  3398 ;;		line 18 in file "CurrentSensor.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3412 ;;      Params:         0       0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used: 1
  3418 ;; Hardware stack levels required when called: 7
  3419 ;; This function calls:
  3420 ;;		_currentTripReset
  3421 ;;		_initialiseADCPin
  3422 ;;		_initialiseGPIO
  3423 ;; This function is called by:
  3424 ;;		_main
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428  0C4B                     _initialiseCurrentSensors:	
  3429                           ;psect for function _initialiseCurrentSensors
  3430                           
  3431  0C4B                     l2645:	
  3432                           ;incstack = 0
  3433                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3434                           
  3435                           
  3436                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3437  0C4B  0021               	movlb	1	; select bank1
  3438  0C4C  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3439  0C4D  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3440  0C4E  3003               	movlw	3
  3441  0C4F  3185  25DB  318C   	fcall	_initialiseGPIO
  3442                           
  3443                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3444  0C52  0021               	movlb	1	; select bank1
  3445  0C53  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3446  0C54  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3447  0C55  3001               	movlw	1
  3448  0C56  3185  25DB  318C   	fcall	_initialiseGPIO
  3449                           
  3450                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3451  0C59  3000               	movlw	0
  3452  0C5A  3186  2651  318C   	fcall	_initialiseADCPin
  3453                           
  3454                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3455  0C5D  3002               	movlw	2
  3456  0C5E  3186  2651  318C   	fcall	_initialiseADCPin
  3457                           
  3458                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3459  0C61  0021               	movlb	1	; select bank1
  3460  0C62  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3461  0C63  300B               	movlw	11
  3462  0C64  3185  25DB  318C   	fcall	_initialiseGPIO
  3463                           
  3464                           ;CurrentSensor.c: 24:     currentTripReset();
  3465  0C67  318B  23CB  318C   	fcall	_currentTripReset
  3466  0C6A                     l512:
  3467  0C6A  0008               	return
  3468  0C6B                     __end_of_initialiseCurrentSensors:
  3469                           
  3470                           	psect	text11
  3471  0BCB                     __ptext11:	
  3472 ;; *************** function _currentTripReset *****************
  3473 ;; Defined at:
  3474 ;;		line 71 in file "CurrentSensor.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, pclath, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3488 ;;      Params:         0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 6
  3495 ;; This function calls:
  3496 ;;		_writeGPIO
  3497 ;; This function is called by:
  3498 ;;		_initialiseCurrentSensors
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502  0BCB                     _currentTripReset:	
  3503                           ;psect for function _currentTripReset
  3504                           
  3505  0BCB                     l2279:	
  3506                           ;incstack = 0
  3507                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3508                           
  3509                           
  3510                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3511  0BCB  0021               	movlb	1	; select bank1
  3512  0BCC  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3513  0BCD  300B               	movlw	11
  3514  0BCE  3186  26B7  318B   	fcall	_writeGPIO
  3515  0BD1                     l2281:
  3516                           
  3517                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3518                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3519  0BD1  0021               	movlb	1	; select bank1
  3520  0BD2  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3521  0BD3  0AD2               	incf	writeGPIO@writeValue^(0+128),f
  3522  0BD4  300B               	movlw	11
  3523  0BD5  3186  26B7  318B   	fcall	_writeGPIO
  3524  0BD8                     l534:
  3525  0BD8  0008               	return
  3526  0BD9                     __end_of_currentTripReset:
  3527                           
  3528                           	psect	text12
  3529  06B7                     __ptext12:	
  3530 ;; *************** function _writeGPIO *****************
  3531 ;; Defined at:
  3532 ;;		line 52 in file "GPIO.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  gpioNumber      1    wreg     const enum E2798
  3535 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3538 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3539 ;;  portType        1    3[BANK1 ] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3549 ;;      Params:         0       0       1       0       0       0
  3550 ;;      Locals:         0       0       3       0       0       0
  3551 ;;      Temps:          0       0       2       0       0       0
  3552 ;;      Totals:         0       0       6       0       0       0
  3553 ;;Total ram usage:        6 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; Hardware stack levels required when called: 5
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_currentTripReset
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563  06B7                     _writeGPIO:	
  3564                           ;psect for function _writeGPIO
  3565                           
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3569                           ;writeGPIO@gpioNumber stored from wreg
  3570  06B7  0021               	movlb	1	; select bank1
  3571  06B8  00D6               	movwf	writeGPIO@gpioNumber^(0+128)
  3572  06B9                     l2027:
  3573                           
  3574                           ;GPIO.c: 54:     uint8_t portType = 0;
  3575  06B9  01D5               	clrf	writeGPIO@portType^(0+128)
  3576  06BA                     l2029:
  3577                           
  3578                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3579  06BA  3008               	movlw	8
  3580  06BB  0256               	subwf	writeGPIO@gpioNumber^(0+128),w
  3581  06BC  1C03               	skipc
  3582  06BD  2EBF               	goto	u1371
  3583  06BE  2EC0               	goto	u1370
  3584  06BF                     u1371:
  3585  06BF  2EC8               	goto	l2035
  3586  06C0                     u1370:
  3587  06C0                     l2031:
  3588                           
  3589                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3590  06C0  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3591  06C1  3EF8               	addlw	248
  3592  06C2  00D3               	movwf	??_writeGPIO^(0+128)
  3593  06C3  0853               	movf	??_writeGPIO^(0+128),w
  3594  06C4  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3595  06C5                     l2033:
  3596                           
  3597                           ;GPIO.c: 57:         portType = 1;
  3598  06C5  01D5               	clrf	writeGPIO@portType^(0+128)
  3599  06C6  0AD5               	incf	writeGPIO@portType^(0+128),f
  3600                           
  3601                           ;GPIO.c: 58:     }
  3602  06C7  2ECD               	goto	l2039
  3603  06C8                     l2035:
  3604                           
  3605                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3606  06C8  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3607  06C9  00D3               	movwf	??_writeGPIO^(0+128)
  3608  06CA  0853               	movf	??_writeGPIO^(0+128),w
  3609  06CB  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3610  06CC                     l2037:
  3611                           
  3612                           ;GPIO.c: 61:         portType = 0;
  3613  06CC  01D5               	clrf	writeGPIO@portType^(0+128)
  3614  06CD                     l2039:
  3615                           
  3616                           ;GPIO.c: 64:     if(portType == 0){
  3617  06CD  0855               	movf	writeGPIO@portType^(0+128),w
  3618  06CE  1D03               	btfss	3,2
  3619  06CF  2ED1               	goto	u1381
  3620  06D0  2ED2               	goto	u1380
  3621  06D1                     u1381:
  3622  06D1  2EF2               	goto	l2047
  3623  06D2                     u1380:
  3624  06D2                     l2041:
  3625                           
  3626                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3627  06D2  0852               	movf	writeGPIO@writeValue^(0+128),w
  3628  06D3  1903               	btfsc	3,2
  3629  06D4  2ED6               	goto	u1391
  3630  06D5  2ED7               	goto	u1390
  3631  06D6                     u1391:
  3632  06D6  2EE4               	goto	l2045
  3633  06D7                     u1390:
  3634  06D7                     l2043:
  3635  06D7  3001               	movlw	1
  3636  06D8  00D3               	movwf	??_writeGPIO^(0+128)
  3637  06D9  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3638  06DA  2EDC               	goto	u1404
  3639  06DB                     u1405:
  3640  06DB  35D3               	lslf	??_writeGPIO^(0+128),f
  3641  06DC                     u1404:
  3642  06DC  0B89               	decfsz	9,f
  3643  06DD  2EDB               	goto	u1405
  3644  06DE  0853               	movf	??_writeGPIO^(0+128),w
  3645  06DF  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3646  06E0  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3647  06E1  0022               	movlb	2	; select bank2
  3648  06E2  048C               	iorwf	12,f	;volatile
  3649  06E3  2F16               	goto	l320
  3650  06E4                     l2045:
  3651  06E4  3001               	movlw	1
  3652  06E5  00D3               	movwf	??_writeGPIO^(0+128)
  3653  06E6  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3654  06E7  2EE9               	goto	u1414
  3655  06E8                     u1415:
  3656  06E8  35D3               	lslf	??_writeGPIO^(0+128),f
  3657  06E9                     u1414:
  3658  06E9  0B89               	decfsz	9,f
  3659  06EA  2EE8               	goto	u1415
  3660  06EB  0853               	movf	??_writeGPIO^(0+128),w
  3661  06EC  3AFF               	xorlw	255
  3662  06ED  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3663  06EE  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3664  06EF  0022               	movlb	2	; select bank2
  3665  06F0  058C               	andwf	12,f	;volatile
  3666  06F1  2F16               	goto	l320
  3667  06F2                     l2047:
  3668  06F2  0355               	decf	writeGPIO@portType^(0+128),w
  3669  06F3  1D03               	btfss	3,2
  3670  06F4  2EF6               	goto	u1421
  3671  06F5  2EF7               	goto	u1420
  3672  06F6                     u1421:
  3673  06F6  2F16               	goto	l320
  3674  06F7                     u1420:
  3675  06F7                     l2049:
  3676                           
  3677                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3678  06F7  0852               	movf	writeGPIO@writeValue^(0+128),w
  3679  06F8  1903               	btfsc	3,2
  3680  06F9  2EFB               	goto	u1431
  3681  06FA  2EFC               	goto	u1430
  3682  06FB                     u1431:
  3683  06FB  2F09               	goto	l2053
  3684  06FC                     u1430:
  3685  06FC                     l2051:
  3686  06FC  3001               	movlw	1
  3687  06FD  00D3               	movwf	??_writeGPIO^(0+128)
  3688  06FE  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3689  06FF  2F01               	goto	u1444
  3690  0700                     u1445:
  3691  0700  35D3               	lslf	??_writeGPIO^(0+128),f
  3692  0701                     u1444:
  3693  0701  0B89               	decfsz	9,f
  3694  0702  2F00               	goto	u1445
  3695  0703  0853               	movf	??_writeGPIO^(0+128),w
  3696  0704  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3697  0705  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3698  0706  0022               	movlb	2	; select bank2
  3699  0707  048D               	iorwf	13,f	;volatile
  3700  0708  2F16               	goto	l320
  3701  0709                     l2053:
  3702  0709  3001               	movlw	1
  3703  070A  00D3               	movwf	??_writeGPIO^(0+128)
  3704  070B  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3705  070C  2F0E               	goto	u1454
  3706  070D                     u1455:
  3707  070D  35D3               	lslf	??_writeGPIO^(0+128),f
  3708  070E                     u1454:
  3709  070E  0B89               	decfsz	9,f
  3710  070F  2F0D               	goto	u1455
  3711  0710  0853               	movf	??_writeGPIO^(0+128),w
  3712  0711  3AFF               	xorlw	255
  3713  0712  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3714  0713  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3715  0714  0022               	movlb	2	; select bank2
  3716  0715  058D               	andwf	13,f	;volatile
  3717  0716                     l320:
  3718  0716  0008               	return
  3719  0717                     __end_of_writeGPIO:
  3720                           
  3721                           	psect	text13
  3722  0C0F                     __ptext13:	
  3723 ;; *************** function _initialiseController *****************
  3724 ;; Defined at:
  3725 ;;		line 28 in file "Controller.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0, pclath, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3739 ;;      Params:         0       0       0       0       0       0
  3740 ;;      Locals:         0       0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0
  3742 ;;      Totals:         0       0       0       0       0       0
  3743 ;;Total ram usage:        0 bytes
  3744 ;; Hardware stack levels used: 1
  3745 ;; Hardware stack levels required when called: 6
  3746 ;; This function calls:
  3747 ;;		_initialiseADCPin
  3748 ;;		_initialiseGPIO
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754  0C0F                     _initialiseController:	
  3755                           ;psect for function _initialiseController
  3756                           
  3757  0C0F                     l2649:	
  3758                           ;incstack = 0
  3759                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3760                           
  3761                           
  3762                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3763  0C0F  0021               	movlb	1	; select bank1
  3764  0C10  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3765  0C11  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3766  0C12  3004               	movlw	4
  3767  0C13  3185  25DB  318C   	fcall	_initialiseGPIO
  3768                           
  3769                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3770  0C16  3004               	movlw	4
  3771  0C17  3186  2651  318C   	fcall	_initialiseADCPin
  3772  0C1A                     l2651:
  3773                           
  3774                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (7u + 16u)
      +                          );
  3775  0C1A  3000               	movlw	0
  3776  0C1B  0021               	movlb	1	; select bank1
  3777  0C1C  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3778  0C1D  3000               	movlw	0
  3779  0C1E  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3780  0C1F  3000               	movlw	0
  3781  0C20  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3782  0C21  3001               	movlw	1
  3783  0C22  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3784  0C23  3000               	movlw	0
  3785  0C24  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3786  0C25  3000               	movlw	0
  3787  0C26  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3788  0C27  3000               	movlw	0
  3789  0C28  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3790  0C29  3000               	movlw	0
  3791  0C2A  00A0               	movwf	_integratorScaledLimit^(0+128)
  3792  0C2B                     l430:
  3793  0C2B  0008               	return
  3794  0C2C                     __end_of_initialiseController:
  3795                           
  3796                           	psect	text14
  3797  05DB                     __ptext14:	
  3798 ;; *************** function _initialiseGPIO *****************
  3799 ;; Defined at:
  3800 ;;		line 18 in file "GPIO.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  gpioNumber      1    wreg     const enum E2798
  3803 ;;  direction       1    0[BANK1 ] unsigned char 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3806 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3807 ;;  portType        1    3[BANK1 ] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3817 ;;      Params:         0       0       1       0       0       0
  3818 ;;      Locals:         0       0       3       0       0       0
  3819 ;;      Temps:          0       0       2       0       0       0
  3820 ;;      Totals:         0       0       6       0       0       0
  3821 ;;Total ram usage:        6 bytes
  3822 ;; Hardware stack levels used: 1
  3823 ;; Hardware stack levels required when called: 5
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;;		_setupPWM
  3829 ;;		_initialiseController
  3830 ;;		_initialiseCurrentSensors
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834  05DB                     _initialiseGPIO:	
  3835                           ;psect for function _initialiseGPIO
  3836                           
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3840                           ;initialiseGPIO@gpioNumber stored from wreg
  3841  05DB  0021               	movlb	1	; select bank1
  3842  05DC  00D6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3843  05DD                     l2147:
  3844                           
  3845                           ;GPIO.c: 20:     uint8_t portType = 0;
  3846  05DD  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3847  05DE                     l2149:
  3848                           
  3849                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3850  05DE  3008               	movlw	8
  3851  05DF  0256               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3852  05E0  1C03               	skipc
  3853  05E1  2DE3               	goto	u1651
  3854  05E2  2DE4               	goto	u1650
  3855  05E3                     u1651:
  3856  05E3  2DEC               	goto	l2155
  3857  05E4                     u1650:
  3858  05E4                     l2151:
  3859                           
  3860                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3861  05E4  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3862  05E5  3EF8               	addlw	248
  3863  05E6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3864  05E7  0853               	movf	??_initialiseGPIO^(0+128),w
  3865  05E8  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3866  05E9                     l2153:
  3867                           
  3868                           ;GPIO.c: 23:         portType = 1;
  3869  05E9  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3870  05EA  0AD5               	incf	initialiseGPIO@portType^(0+128),f
  3871                           
  3872                           ;GPIO.c: 24:     }
  3873  05EB  2DF1               	goto	l2159
  3874  05EC                     l2155:
  3875                           
  3876                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3877  05EC  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3878  05ED  00D3               	movwf	??_initialiseGPIO^(0+128)
  3879  05EE  0853               	movf	??_initialiseGPIO^(0+128),w
  3880  05EF  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3881  05F0                     l2157:
  3882                           
  3883                           ;GPIO.c: 27:         portType = 0;
  3884  05F0  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3885  05F1                     l2159:
  3886                           
  3887                           ;GPIO.c: 30:     if(portType == 0){
  3888  05F1  0855               	movf	initialiseGPIO@portType^(0+128),w
  3889  05F2  1D03               	btfss	3,2
  3890  05F3  2DF5               	goto	u1661
  3891  05F4  2DF6               	goto	u1660
  3892  05F5                     u1661:
  3893  05F5  2E21               	goto	l2167
  3894  05F6                     u1660:
  3895  05F6                     l2161:
  3896                           
  3897                           ;GPIO.c: 31:         if(direction){
  3898  05F6  0852               	movf	initialiseGPIO@direction^(0+128),w
  3899  05F7  1903               	btfsc	3,2
  3900  05F8  2DFA               	goto	u1671
  3901  05F9  2DFB               	goto	u1670
  3902  05FA                     u1671:
  3903  05FA  2E14               	goto	l2165
  3904  05FB                     u1670:
  3905  05FB                     l2163:
  3906                           
  3907                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3908  05FB  3001               	movlw	1
  3909  05FC  00D3               	movwf	??_initialiseGPIO^(0+128)
  3910  05FD  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3911  05FE  2E00               	goto	u1684
  3912  05FF                     u1685:
  3913  05FF  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3914  0600                     u1684:
  3915  0600  0B89               	decfsz	9,f
  3916  0601  2DFF               	goto	u1685
  3917  0602  0853               	movf	??_initialiseGPIO^(0+128),w
  3918  0603  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3919  0604  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3920  0605  048C               	iorwf	12,f	;volatile
  3921                           
  3922                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3923  0606  3001               	movlw	1
  3924  0607  00D3               	movwf	??_initialiseGPIO^(0+128)
  3925  0608  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3926  0609  2E0B               	goto	u1694
  3927  060A                     u1695:
  3928  060A  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3929  060B                     u1694:
  3930  060B  0B89               	decfsz	9,f
  3931  060C  2E0A               	goto	u1695
  3932  060D  0853               	movf	??_initialiseGPIO^(0+128),w
  3933  060E  3AFF               	xorlw	255
  3934  060F  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3935  0610  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3936  0611  0023               	movlb	3	; select bank3
  3937  0612  058C               	andwf	12,f	;volatile
  3938                           
  3939                           ;GPIO.c: 34:         }
  3940  0613  2E50               	goto	l306
  3941  0614                     l2165:
  3942  0614  3001               	movlw	1
  3943  0615  00D3               	movwf	??_initialiseGPIO^(0+128)
  3944  0616  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3945  0617  2E19               	goto	u1704
  3946  0618                     u1705:
  3947  0618  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3948  0619                     u1704:
  3949  0619  0B89               	decfsz	9,f
  3950  061A  2E18               	goto	u1705
  3951  061B  0853               	movf	??_initialiseGPIO^(0+128),w
  3952  061C  3AFF               	xorlw	255
  3953  061D  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3954  061E  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3955  061F  058C               	andwf	12,f	;volatile
  3956  0620  2E50               	goto	l306
  3957  0621                     l2167:
  3958  0621  0355               	decf	initialiseGPIO@portType^(0+128),w
  3959  0622  1D03               	btfss	3,2
  3960  0623  2E25               	goto	u1711
  3961  0624  2E26               	goto	u1710
  3962  0625                     u1711:
  3963  0625  2E50               	goto	l306
  3964  0626                     u1710:
  3965  0626                     l2169:
  3966                           
  3967                           ;GPIO.c: 38:         if(direction){
  3968  0626  0852               	movf	initialiseGPIO@direction^(0+128),w
  3969  0627  1903               	btfsc	3,2
  3970  0628  2E2A               	goto	u1721
  3971  0629  2E2B               	goto	u1720
  3972  062A                     u1721:
  3973  062A  2E44               	goto	l2173
  3974  062B                     u1720:
  3975  062B                     l2171:
  3976                           
  3977                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3978  062B  3001               	movlw	1
  3979  062C  00D3               	movwf	??_initialiseGPIO^(0+128)
  3980  062D  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3981  062E  2E30               	goto	u1734
  3982  062F                     u1735:
  3983  062F  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3984  0630                     u1734:
  3985  0630  0B89               	decfsz	9,f
  3986  0631  2E2F               	goto	u1735
  3987  0632  0853               	movf	??_initialiseGPIO^(0+128),w
  3988  0633  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3989  0634  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3990  0635  048D               	iorwf	13,f	;volatile
  3991                           
  3992                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3993  0636  3001               	movlw	1
  3994  0637  00D3               	movwf	??_initialiseGPIO^(0+128)
  3995  0638  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3996  0639  2E3B               	goto	u1744
  3997  063A                     u1745:
  3998  063A  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3999  063B                     u1744:
  4000  063B  0B89               	decfsz	9,f
  4001  063C  2E3A               	goto	u1745
  4002  063D  0853               	movf	??_initialiseGPIO^(0+128),w
  4003  063E  3AFF               	xorlw	255
  4004  063F  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4005  0640  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4006  0641  0023               	movlb	3	; select bank3
  4007  0642  058D               	andwf	13,f	;volatile
  4008                           
  4009                           ;GPIO.c: 41:         }
  4010  0643  2E50               	goto	l306
  4011  0644                     l2173:
  4012  0644  3001               	movlw	1
  4013  0645  00D3               	movwf	??_initialiseGPIO^(0+128)
  4014  0646  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  4015  0647  2E49               	goto	u1754
  4016  0648                     u1755:
  4017  0648  35D3               	lslf	??_initialiseGPIO^(0+128),f
  4018  0649                     u1754:
  4019  0649  0B89               	decfsz	9,f
  4020  064A  2E48               	goto	u1755
  4021  064B  0853               	movf	??_initialiseGPIO^(0+128),w
  4022  064C  3AFF               	xorlw	255
  4023  064D  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4024  064E  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4025  064F  058D               	andwf	13,f	;volatile
  4026  0650                     l306:
  4027  0650  0008               	return
  4028  0651                     __end_of_initialiseGPIO:
  4029                           
  4030                           	psect	text15
  4031  0651                     __ptext15:	
  4032 ;; *************** function _initialiseADCPin *****************
  4033 ;; Defined at:
  4034 ;;		line 37 in file "ADC.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  gpioNumber      1    wreg     const enum E2798
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  4039 ;;  portNumber      1    4[BANK1 ] unsigned char 
  4040 ;;  portType        1    3[BANK1 ] unsigned char 
  4041 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4051 ;;      Params:         0       0       0       0       0       0
  4052 ;;      Locals:         0       0       4       0       0       0
  4053 ;;      Temps:          0       0       2       0       0       0
  4054 ;;      Totals:         0       0       6       0       0       0
  4055 ;;Total ram usage:        6 bytes
  4056 ;; Hardware stack levels used: 1
  4057 ;; Hardware stack levels required when called: 5
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_initialisePotentiometers
  4062 ;;		_initialiseController
  4063 ;;		_initialiseCurrentSensors
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067  0651                     _initialiseADCPin:	
  4068                           ;psect for function _initialiseADCPin
  4069                           
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4073                           ;initialiseADCPin@gpioNumber stored from wreg
  4074  0651  0021               	movlb	1	; select bank1
  4075  0652  00D7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4076  0653                     l2175:
  4077                           
  4078                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4079  0653  01D6               	clrf	initialiseADCPin@portNumber^(0+128)
  4080                           
  4081                           ;ADC.c: 40:     uint8_t portType = 0;
  4082  0654  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4083                           
  4084                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4085  0655  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4086  0656                     l2177:
  4087                           
  4088                           ;ADC.c: 43:     if(gpioNumber < 4){
  4089  0656  3004               	movlw	4
  4090  0657  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4091  0658  1803               	skipnc
  4092  0659  2E5B               	goto	u1761
  4093  065A  2E5C               	goto	u1760
  4094  065B                     u1761:
  4095  065B  2E63               	goto	l2185
  4096  065C                     u1760:
  4097  065C                     l2179:
  4098                           
  4099                           ;ADC.c: 44:         portNumber = gpioNumber;
  4100  065C  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4101  065D  00D2               	movwf	??_initialiseADCPin^(0+128)
  4102  065E  0852               	movf	??_initialiseADCPin^(0+128),w
  4103  065F  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4104  0660                     l2181:
  4105                           
  4106                           ;ADC.c: 45:         portType = 0;
  4107  0660  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4108  0661                     l2183:
  4109                           
  4110                           ;ADC.c: 46:         gpioValid = 1;
  4111  0661  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4112  0662  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4113  0663                     l2185:
  4114                           
  4115                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4116  0663  3009               	movlw	9
  4117  0664  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4118  0665  1C03               	skipc
  4119  0666  2E68               	goto	u1771
  4120  0667  2E69               	goto	u1770
  4121  0668                     u1771:
  4122  0668  2E78               	goto	l238
  4123  0669                     u1770:
  4124  0669                     l2187:
  4125  0669  3010               	movlw	16
  4126  066A  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4127  066B  1803               	skipnc
  4128  066C  2E6E               	goto	u1781
  4129  066D  2E6F               	goto	u1780
  4130  066E                     u1781:
  4131  066E  2E78               	goto	l238
  4132  066F                     u1780:
  4133  066F                     l2189:
  4134                           
  4135                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4136  066F  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4137  0670  3EF8               	addlw	248
  4138  0671  00D2               	movwf	??_initialiseADCPin^(0+128)
  4139  0672  0852               	movf	??_initialiseADCPin^(0+128),w
  4140  0673  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4141  0674                     l2191:
  4142                           
  4143                           ;ADC.c: 51:         portType = 1;
  4144  0674  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4145  0675  0AD5               	incf	initialiseADCPin@portType^(0+128),f
  4146  0676                     l2193:
  4147                           
  4148                           ;ADC.c: 52:         gpioValid = 1;
  4149  0676  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4150  0677  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4151  0678                     l238:	
  4152                           ;ADC.c: 53:     }
  4153                           
  4154                           
  4155                           ;ADC.c: 55:     if(gpioValid){
  4156  0678  0854               	movf	initialiseADCPin@gpioValid^(0+128),w
  4157  0679  1903               	btfsc	3,2
  4158  067A  2E7C               	goto	u1791
  4159  067B  2E7D               	goto	u1790
  4160  067C                     u1791:
  4161  067C  2EB6               	goto	l243
  4162  067D                     u1790:
  4163  067D                     l2195:
  4164                           
  4165                           ;ADC.c: 56:         if(portType == 0){
  4166  067D  0855               	movf	initialiseADCPin@portType^(0+128),w
  4167  067E  1D03               	btfss	3,2
  4168  067F  2E81               	goto	u1801
  4169  0680  2E82               	goto	u1800
  4170  0681                     u1801:
  4171  0681  2E9A               	goto	l2199
  4172  0682                     u1800:
  4173  0682                     l2197:
  4174                           
  4175                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4176  0682  3001               	movlw	1
  4177  0683  00D2               	movwf	??_initialiseADCPin^(0+128)
  4178  0684  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4179  0685  2E87               	goto	u1814
  4180  0686                     u1815:
  4181  0686  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4182  0687                     u1814:
  4183  0687  0B89               	decfsz	9,f
  4184  0688  2E86               	goto	u1815
  4185  0689  0852               	movf	??_initialiseADCPin^(0+128),w
  4186  068A  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4187  068B  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4188  068C  048C               	iorwf	12,f	;volatile
  4189                           
  4190                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4191  068D  3001               	movlw	1
  4192  068E  00D2               	movwf	??_initialiseADCPin^(0+128)
  4193  068F  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4194  0690  2E92               	goto	u1824
  4195  0691                     u1825:
  4196  0691  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4197  0692                     u1824:
  4198  0692  0B89               	decfsz	9,f
  4199  0693  2E91               	goto	u1825
  4200  0694  0852               	movf	??_initialiseADCPin^(0+128),w
  4201  0695  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4202  0696  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4203  0697  0023               	movlb	3	; select bank3
  4204  0698  048C               	iorwf	12,f	;volatile
  4205                           
  4206                           ;ADC.c: 59:         }
  4207  0699  2EB6               	goto	l243
  4208  069A                     l2199:
  4209  069A  0355               	decf	initialiseADCPin@portType^(0+128),w
  4210  069B  1D03               	btfss	3,2
  4211  069C  2E9E               	goto	u1831
  4212  069D  2E9F               	goto	u1830
  4213  069E                     u1831:
  4214  069E  2EB6               	goto	l243
  4215  069F                     u1830:
  4216  069F                     l2201:
  4217                           
  4218                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4219  069F  3001               	movlw	1
  4220  06A0  00D2               	movwf	??_initialiseADCPin^(0+128)
  4221  06A1  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4222  06A2  2EA4               	goto	u1844
  4223  06A3                     u1845:
  4224  06A3  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4225  06A4                     u1844:
  4226  06A4  0B89               	decfsz	9,f
  4227  06A5  2EA3               	goto	u1845
  4228  06A6  0852               	movf	??_initialiseADCPin^(0+128),w
  4229  06A7  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4230  06A8  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4231  06A9  048D               	iorwf	13,f	;volatile
  4232                           
  4233                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4234  06AA  3001               	movlw	1
  4235  06AB  00D2               	movwf	??_initialiseADCPin^(0+128)
  4236  06AC  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4237  06AD  2EAF               	goto	u1854
  4238  06AE                     u1855:
  4239  06AE  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4240  06AF                     u1854:
  4241  06AF  0B89               	decfsz	9,f
  4242  06B0  2EAE               	goto	u1855
  4243  06B1  0852               	movf	??_initialiseADCPin^(0+128),w
  4244  06B2  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4245  06B3  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4246  06B4  0023               	movlb	3	; select bank3
  4247  06B5  048D               	iorwf	13,f	;volatile
  4248  06B6                     l243:
  4249  06B6  0008               	return
  4250  06B7                     __end_of_initialiseADCPin:
  4251                           
  4252                           	psect	text16
  4253  0B8B                     __ptext16:	
  4254 ;; *************** function _initialiseADCModule *****************
  4255 ;; Defined at:
  4256 ;;		line 14 in file "ADC.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4270 ;;      Params:         0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 5
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284  0B8B                     _initialiseADCModule:	
  4285                           ;psect for function _initialiseADCModule
  4286                           
  4287  0B8B                     l2643:	
  4288                           ;incstack = 0
  4289                           ; Regs used in _initialiseADCModule: [wreg]
  4290                           
  4291                           
  4292                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4293  0B8B  3001               	movlw	1
  4294  0B8C  0021               	movlb	1	; select bank1
  4295  0B8D  009D               	movwf	29	;volatile
  4296                           
  4297                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4298  0B8E  3090               	movlw	144
  4299  0B8F  009E               	movwf	30	;volatile
  4300  0B90                     l234:
  4301  0B90  0008               	return
  4302  0B91                     __end_of_initialiseADCModule:
  4303                           
  4304                           	psect	intentry
  4305  0004                     __pintentry:	
  4306 ;; *************** function _Tick490Hz *****************
  4307 ;; Defined at:
  4308 ;;		line 42 in file "main.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4322 ;;      Params:         0       0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0
  4324 ;;      Temps:          0       1       0       0       0       0
  4325 ;;      Totals:         0       1       0       0       0       0
  4326 ;;Total ram usage:        1 bytes
  4327 ;; Hardware stack levels used: 1
  4328 ;; Hardware stack levels required when called: 4
  4329 ;; This function calls:
  4330 ;;		_controlRoutine
  4331 ;;		_currentTripMonitor
  4332 ;;		_readFilteredDutyPot
  4333 ;;		_readFilteredFreqPot
  4334 ;;		_readFilteredIL
  4335 ;;		_readFilteredVout
  4336 ;;		_runPotScaling
  4337 ;;		_setPWMDutyandPeriod
  4338 ;;		i1_writeGPIO
  4339 ;; This function is called by:
  4340 ;;		Interrupt level 1
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344  0004                     _Tick490Hz:
  4345                           
  4346                           ;incstack = 0
  4347  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4348                           
  4349                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4350  0005  3180               	pagesel	$
  4351  0006                     i1l2699:
  4352                           
  4353                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4354  0006  01F0               	clrf	i1writeGPIO@writeValue
  4355  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4356  0008  300C               	movlw	12
  4357  0009  3187  2717  3180   	fcall	i1_writeGPIO
  4358                           
  4359                           ;main.c: 54:         currentTripMonitor();
  4360  000C  318C  246B  3180   	fcall	_currentTripMonitor
  4361                           
  4362                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4363  000F  0020               	movlb	0	; select bank0
  4364  0010  0864               	movf	_setDuty+1,w
  4365  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4366  0012  0863               	movf	_setDuty,w
  4367  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4368  0014  086E               	movf	_setPeriod,w
  4369  0015  00DE               	movwf	??_Tick490Hz
  4370  0016  085E               	movf	??_Tick490Hz,w
  4371  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4372  0018  318C  248F  3180   	fcall	_setPWMDutyandPeriod
  4373  001B                     i1l2701:
  4374                           
  4375                           ;main.c: 58:         if(timerSlotHalf == 0){
  4376  001B  0020               	movlb	0	; select bank0
  4377  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4378  001D  1D03               	btfss	3,2
  4379  001E  2820               	goto	u253_21
  4380  001F  2821               	goto	u253_20
  4381  0020                     u253_21:
  4382  0020  2829               	goto	i1l2707
  4383  0021                     u253_20:
  4384  0021                     i1l2703:
  4385                           
  4386                           ;main.c: 60:             controlRoutine();
  4387  0021  3184  2440  3180   	fcall	_controlRoutine
  4388  0024                     i1l2705:
  4389                           
  4390                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4391  0024  01F0               	clrf	i1writeGPIO@writeValue
  4392  0025  300C               	movlw	12
  4393  0026  3187  2717  3180   	fcall	i1_writeGPIO
  4394  0029                     i1l2707:
  4395                           
  4396                           ;main.c: 64:         if(timerSlotHalf == 1){
  4397  0029  0020               	movlb	0	; select bank0
  4398  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4399  002B  1D03               	btfss	3,2
  4400  002C  282E               	goto	u254_21
  4401  002D  282F               	goto	u254_20
  4402  002E                     u254_21:
  4403  002E  2878               	goto	i1l2729
  4404  002F                     u254_20:
  4405  002F                     i1l2709:
  4406                           
  4407                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4408  002F  01F0               	clrf	i1writeGPIO@writeValue
  4409  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4410  0031  300D               	movlw	13
  4411  0032  3187  2717  3180   	fcall	i1_writeGPIO
  4412  0035                     i1l2711:
  4413                           
  4414                           ;main.c: 67:             filteredIL = readFilteredIL();
  4415  0035  318E  263D  3180   	fcall	_readFilteredIL
  4416  0038  0871               	movf	?_readFilteredIL+1,w
  4417  0039  0021               	movlb	1	; select bank1
  4418  003A  00B1               	movwf	(_filteredIL+1)^(0+128)
  4419  003B  0870               	movf	?_readFilteredIL,w
  4420  003C  00B0               	movwf	_filteredIL^(0+128)
  4421  003D                     i1l2713:
  4422                           
  4423                           ;main.c: 69:             filteredVout = readFilteredVout();
  4424  003D  3187  2776  3180   	fcall	_readFilteredVout
  4425  0040  087B               	movf	?_readFilteredVout+1,w
  4426  0041  0020               	movlb	0	; select bank0
  4427  0042  00E0               	movwf	_filteredVout+1
  4428  0043  087A               	movf	?_readFilteredVout,w
  4429  0044  00DF               	movwf	_filteredVout
  4430  0045                     i1l2715:
  4431                           
  4432                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4433  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4434  0046  1D03               	btfss	3,2
  4435  0047  2849               	goto	u255_21
  4436  0048  284A               	goto	u255_20
  4437  0049                     u255_21:
  4438  0049  284D               	goto	i1l2719
  4439  004A                     u255_20:
  4440  004A                     i1l2717:
  4441                           
  4442                           ;main.c: 74:                 runPotScaling();
  4443  004A  3183  2313  3180   	fcall	_runPotScaling
  4444  004D                     i1l2719:
  4445                           
  4446                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4447  004D  0020               	movlb	0	; select bank0
  4448  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4449  004F  1D03               	btfss	3,2
  4450  0050  2852               	goto	u256_21
  4451  0051  2853               	goto	u256_20
  4452  0052                     u256_21:
  4453  0052  2863               	goto	i1l2723
  4454  0053                     u256_20:
  4455  0053                     i1l2721:
  4456                           
  4457                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4458  0053  318F  274A  3180   	fcall	_readFilteredDutyPot
  4459  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4460  0057  0021               	movlb	1	; select bank1
  4461  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4462  0059  087A               	movf	?_readFilteredDutyPot,w
  4463  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4464                           
  4465                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4466  005B  318F  27A5  3180   	fcall	_readFilteredFreqPot
  4467  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4468  005F  0021               	movlb	1	; select bank1
  4469  0060  00AF               	movwf	(_filteredFreqPot+1)^(0+128)
  4470  0061  087A               	movf	?_readFilteredFreqPot,w
  4471  0062  00AE               	movwf	_filteredFreqPot^(0+128)
  4472  0063                     i1l2723:
  4473                           
  4474                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4475  0063  0020               	movlb	0	; select bank0
  4476  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4477  0065  1D03               	btfss	3,2
  4478  0066  2868               	goto	u257_21
  4479  0067  286A               	goto	u257_20
  4480  0068                     u257_21:
  4481  0068  3001               	movlw	1
  4482  0069  286B               	goto	u258_20
  4483  006A                     u257_20:
  4484  006A  3000               	movlw	0
  4485  006B                     u258_20:
  4486  006B  00DE               	movwf	??_Tick490Hz
  4487  006C  085E               	movf	??_Tick490Hz,w
  4488  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4489  006E                     i1l2725:
  4490                           
  4491                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4492  006E  01F0               	clrf	i1writeGPIO@writeValue
  4493  006F  300C               	movlw	12
  4494  0070  3187  2717  3180   	fcall	i1_writeGPIO
  4495  0073                     i1l2727:
  4496                           
  4497                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4498  0073  01F0               	clrf	i1writeGPIO@writeValue
  4499  0074  300D               	movlw	13
  4500  0075  3187  2717  3180   	fcall	i1_writeGPIO
  4501  0078                     i1l2729:
  4502                           
  4503                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4504  0078  0020               	movlb	0	; select bank0
  4505  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4506  007A  1D03               	btfss	3,2
  4507  007B  287D               	goto	u259_21
  4508  007C  287F               	goto	u259_20
  4509  007D                     u259_21:
  4510  007D  3001               	movlw	1
  4511  007E  2880               	goto	u260_20
  4512  007F                     u259_20:
  4513  007F  3000               	movlw	0
  4514  0080                     u260_20:
  4515  0080  00DE               	movwf	??_Tick490Hz
  4516  0081  085E               	movf	??_Tick490Hz,w
  4517  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4518  0083                     i1l2731:
  4519                           
  4520                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4521  0083  110B               	bcf	11,2	;volatile
  4522  0084                     i1l110:
  4523  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4524  0085  0009               	retfie
  4525  0086                     __end_of_Tick490Hz:
  4526                           
  4527                           	psect	text18
  4528  0C8F                     __ptext18:	
  4529 ;; *************** function _setPWMDutyandPeriod *****************
  4530 ;; Defined at:
  4531 ;;		line 49 in file "PWM.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4534 ;;  period          1    2[COMMON] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4546 ;;      Params:         3       0       0       0       0       0
  4547 ;;      Locals:         0       0       0       0       0       0
  4548 ;;      Temps:          2       0       0       0       0       0
  4549 ;;      Totals:         5       0       0       0       0       0
  4550 ;;Total ram usage:        5 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_Tick490Hz
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559  0C8F                     _setPWMDutyandPeriod:	
  4560                           ;psect for function _setPWMDutyandPeriod
  4561                           
  4562  0C8F                     i1l2355:	
  4563                           ;incstack = 0
  4564                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4565                           
  4566                           
  4567                           ;PWM.c: 50:     PR2 = period;
  4568  0C8F  0872               	movf	setPWMDutyandPeriod@period,w
  4569  0C90  0020               	movlb	0	; select bank0
  4570  0C91  009B               	movwf	27	;volatile
  4571  0C92                     i1l2357:
  4572                           
  4573                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4574  0C92  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4575  0C93  00F4               	movwf	??_setPWMDutyandPeriod+1
  4576  0C94  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4577  0C95  00F3               	movwf	??_setPWMDutyandPeriod
  4578  0C96  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4579  0C97  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4580  0C98  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4581  0C99  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4582  0C9A  0873               	movf	??_setPWMDutyandPeriod,w
  4583  0C9B  0025               	movlb	5	; select bank5
  4584  0C9C  0091               	movwf	17	;volatile
  4585  0C9D                     i1l2359:
  4586                           
  4587                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4588  0C9D  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4589  0C9E  3901               	andlw	1
  4590  0C9F  00F3               	movwf	??_setPWMDutyandPeriod
  4591  0CA0  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4592  0CA1  0813               	movf	19,w	;volatile
  4593  0CA2  0673               	xorwf	??_setPWMDutyandPeriod,w
  4594  0CA3  39EF               	andlw	-17
  4595  0CA4  0673               	xorwf	??_setPWMDutyandPeriod,w
  4596  0CA5  0093               	movwf	19	;volatile
  4597                           
  4598                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4599  0CA6  3002               	movlw	2
  4600  0CA7  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4601  0CA8  00F3               	movwf	??_setPWMDutyandPeriod
  4602  0CA9  3000               	movlw	0
  4603  0CAA  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4604  0CAB  00F4               	movwf	??_setPWMDutyandPeriod+1
  4605  0CAC  3000               	movlw	0
  4606  0CAD  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4607  0CAE  3002               	movlw	2
  4608  0CAF  1903               	skipnz
  4609  0CB0  0273               	subwf	??_setPWMDutyandPeriod,w
  4610  0CB1  1803               	skipnc
  4611  0CB2  2CB4               	goto	u220_21
  4612  0CB3  2CB7               	goto	u220_20
  4613  0CB4                     u220_21:
  4614  0CB4  0025               	movlb	5	; select bank5
  4615  0CB5  1693               	bsf	19,5	;volatile
  4616  0CB6  2CB9               	goto	u221_24
  4617  0CB7                     u220_20:
  4618  0CB7  0025               	movlb	5	; select bank5
  4619  0CB8  1293               	bcf	19,5	;volatile
  4620  0CB9                     u221_24:
  4621  0CB9                     i1l177:
  4622  0CB9  0008               	return
  4623  0CBA                     __end_of_setPWMDutyandPeriod:
  4624                           
  4625                           	psect	text19
  4626  0313                     __ptext19:	
  4627 ;; *************** function _runPotScaling *****************
  4628 ;; Defined at:
  4629 ;;		line 55 in file "Potentiometer.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  potScaled       4   12[BANK0 ] unsigned long 
  4634 ;;  minDuty         2   18[BANK0 ] unsigned short 
  4635 ;;  maxDuty         2   16[BANK0 ] unsigned short 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4645 ;;      Params:         0       0       0       0       0       0
  4646 ;;      Locals:         0       8       0       0       0       0
  4647 ;;      Temps:          0       6       0       0       0       0
  4648 ;;      Totals:         0      14       0       0       0       0
  4649 ;;Total ram usage:       14 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; Hardware stack levels required when called: 1
  4652 ;; This function calls:
  4653 ;;		___lldiv
  4654 ;;		___lmul
  4655 ;;		___wmul
  4656 ;; This function is called by:
  4657 ;;		_Tick490Hz
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661  0313                     _runPotScaling:	
  4662                           ;psect for function _runPotScaling
  4663                           
  4664  0313                     i1l2455:	
  4665                           ;incstack = 0
  4666                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4667                           
  4668                           
  4669                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4670  0313  0020               	movlb	0	; select bank0
  4671  0314  036C               	decf	_currentState,w
  4672  0315  1D03               	btfss	3,2
  4673  0316  2B18               	goto	u235_21
  4674  0317  2B19               	goto	u235_20
  4675  0318                     u235_21:
  4676  0318  2C3F               	goto	i1l379
  4677  0319                     u235_20:
  4678  0319                     i1l2457:
  4679                           
  4680                           ;Potentiometer.c: 58:         potSetCount++;
  4681  0319  3001               	movlw	1
  4682  031A  00A6               	movwf	??_runPotScaling
  4683  031B  0826               	movf	??_runPotScaling,w
  4684  031C  07E8               	addwf	_potSetCount,f
  4685                           
  4686                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4687  031D  3020               	movlw	32
  4688  031E  0668               	xorwf	_potSetCount,w
  4689  031F  1D03               	btfss	3,2
  4690  0320  2B22               	goto	u236_21
  4691  0321  2B23               	goto	u236_20
  4692  0322                     u236_21:
  4693  0322  2C3F               	goto	i1l379
  4694  0323                     u236_20:
  4695  0323                     i1l2459:
  4696                           
  4697                           ;Potentiometer.c: 62:             uint32_t potScaled = (uint32_t) ((uint32_t)((uint32_t)
      +                          (filteredFreqPot - 51) * 270) >> 8);
  4698  0323  0021               	movlb	1	; select bank1
  4699  0324  082E               	movf	_filteredFreqPot^(0+128),w
  4700  0325  3ECD               	addlw	205
  4701  0326  00F0               	movwf	___lmul@multiplier
  4702  0327  30FF               	movlw	255
  4703  0328  3D2F               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4704  0329  00F1               	movwf	___lmul@multiplier+1
  4705  032A  01F2               	clrf	___lmul@multiplier+2
  4706  032B  01F3               	clrf	___lmul@multiplier+3
  4707  032C  3000               	movlw	0
  4708  032D  00F7               	movwf	___lmul@multiplicand+3
  4709  032E  3000               	movlw	0
  4710  032F  00F6               	movwf	___lmul@multiplicand+2
  4711  0330  3001               	movlw	1
  4712  0331  00F5               	movwf	___lmul@multiplicand+1
  4713  0332  300E               	movlw	14
  4714  0333  00F4               	movwf	___lmul@multiplicand
  4715  0334  318C  24BA  3183   	fcall	___lmul
  4716  0337  0870               	movf	?___lmul,w
  4717  0338  0020               	movlb	0	; select bank0
  4718  0339  00A6               	movwf	??_runPotScaling
  4719  033A  0871               	movf	?___lmul+1,w
  4720  033B  00A7               	movwf	??_runPotScaling+1
  4721  033C  0872               	movf	?___lmul+2,w
  4722  033D  00A8               	movwf	??_runPotScaling+2
  4723  033E  0873               	movf	?___lmul+3,w
  4724  033F  00A9               	movwf	??_runPotScaling+3
  4725  0340  3008               	movlw	8
  4726  0341                     u237_25:
  4727  0341  36A9               	lsrf	??_runPotScaling+3,f
  4728  0342  0CA8               	rrf	??_runPotScaling+2,f
  4729  0343  0CA7               	rrf	??_runPotScaling+1,f
  4730  0344  0CA6               	rrf	??_runPotScaling,f
  4731  0345                     u237_20:
  4732  0345  0B89               	decfsz	9,f
  4733  0346  2B41               	goto	u237_25
  4734  0347  0829               	movf	??_runPotScaling+3,w
  4735  0348  00AF               	movwf	runPotScaling@potScaled+3
  4736  0349  0828               	movf	??_runPotScaling+2,w
  4737  034A  00AE               	movwf	runPotScaling@potScaled+2
  4738  034B  0827               	movf	??_runPotScaling+1,w
  4739  034C  00AD               	movwf	runPotScaling@potScaled+1
  4740  034D  0826               	movf	??_runPotScaling,w
  4741  034E  00AC               	movwf	runPotScaling@potScaled
  4742                           
  4743                           ;Potentiometer.c: 63:             setPeriod = (uint32_t) ((potScaled) * (uint32_t)(180u 
      +                          -15u) >> (10)) + 15u;
  4744  034F  082F               	movf	runPotScaling@potScaled+3,w
  4745  0350  00F3               	movwf	___lmul@multiplier+3
  4746  0351  082E               	movf	runPotScaling@potScaled+2,w
  4747  0352  00F2               	movwf	___lmul@multiplier+2
  4748  0353  082D               	movf	runPotScaling@potScaled+1,w
  4749  0354  00F1               	movwf	___lmul@multiplier+1
  4750  0355  082C               	movf	runPotScaling@potScaled,w
  4751  0356  00F0               	movwf	___lmul@multiplier
  4752  0357  3000               	movlw	0
  4753  0358  00F7               	movwf	___lmul@multiplicand+3
  4754  0359  3000               	movlw	0
  4755  035A  00F6               	movwf	___lmul@multiplicand+2
  4756  035B  3000               	movlw	0
  4757  035C  00F5               	movwf	___lmul@multiplicand+1
  4758  035D  30A5               	movlw	165
  4759  035E  00F4               	movwf	___lmul@multiplicand
  4760  035F  318C  24BA  3183   	fcall	___lmul
  4761  0362  0870               	movf	?___lmul,w
  4762  0363  0020               	movlb	0	; select bank0
  4763  0364  00A6               	movwf	??_runPotScaling
  4764  0365  0871               	movf	?___lmul+1,w
  4765  0366  00A7               	movwf	??_runPotScaling+1
  4766  0367  0872               	movf	?___lmul+2,w
  4767  0368  00A8               	movwf	??_runPotScaling+2
  4768  0369  0873               	movf	?___lmul+3,w
  4769  036A  00A9               	movwf	??_runPotScaling+3
  4770  036B  300A               	movlw	10
  4771  036C                     u238_25:
  4772  036C  36A9               	lsrf	??_runPotScaling+3,f
  4773  036D  0CA8               	rrf	??_runPotScaling+2,f
  4774  036E  0CA7               	rrf	??_runPotScaling+1,f
  4775  036F  0CA6               	rrf	??_runPotScaling,f
  4776  0370                     u238_20:
  4777  0370  0B89               	decfsz	9,f
  4778  0371  2B6C               	goto	u238_25
  4779  0372  0826               	movf	??_runPotScaling,w
  4780  0373  3E0F               	addlw	15
  4781  0374  00AA               	movwf	??_runPotScaling+4
  4782  0375  082A               	movf	??_runPotScaling+4,w
  4783  0376  00EE               	movwf	_setPeriod
  4784                           
  4785                           ;Potentiometer.c: 66:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4786  0377  3000               	movlw	0
  4787  0378  00F9               	movwf	___lldiv@divisor+3
  4788  0379  3000               	movlw	0
  4789  037A  00F8               	movwf	___lldiv@divisor+2
  4790  037B  3000               	movlw	0
  4791  037C  00F7               	movwf	___lldiv@divisor+1
  4792  037D  3019               	movlw	25
  4793  037E  00F6               	movwf	___lldiv@divisor
  4794  037F  305A               	movlw	90
  4795  0380  00F2               	movwf	___wmul@multiplicand
  4796  0381  3000               	movlw	0
  4797  0382  00F3               	movwf	___wmul@multiplicand+1
  4798  0383  086E               	movf	_setPeriod,w
  4799  0384  00A6               	movwf	??_runPotScaling
  4800  0385  01A7               	clrf	??_runPotScaling+1
  4801  0386  0826               	movf	??_runPotScaling,w
  4802  0387  00F0               	movwf	___wmul@multiplier
  4803  0388  0827               	movf	??_runPotScaling+1,w
  4804  0389  00F1               	movwf	___wmul@multiplier+1
  4805  038A  318C  242C  3183   	fcall	___wmul
  4806  038D  0870               	movf	?___wmul,w
  4807  038E  0020               	movlb	0	; select bank0
  4808  038F  00A8               	movwf	??_runPotScaling+2
  4809  0390  0871               	movf	?___wmul+1,w
  4810  0391  00A9               	movwf	??_runPotScaling+3
  4811  0392  01AA               	clrf	??_runPotScaling+4
  4812  0393  01AB               	clrf	??_runPotScaling+5
  4813  0394  082B               	movf	??_runPotScaling+5,w
  4814  0395  00FD               	movwf	___lldiv@dividend+3
  4815  0396  082A               	movf	??_runPotScaling+4,w
  4816  0397  00FC               	movwf	___lldiv@dividend+2
  4817  0398  0829               	movf	??_runPotScaling+3,w
  4818  0399  00FB               	movwf	___lldiv@dividend+1
  4819  039A  0828               	movf	??_runPotScaling+2,w
  4820  039B  00FA               	movwf	___lldiv@dividend
  4821  039C  318E  26EF  3183   	fcall	___lldiv
  4822  039F  0877               	movf	?___lldiv+1,w
  4823  03A0  0020               	movlb	0	; select bank0
  4824  03A1  00B1               	movwf	runPotScaling@maxDuty+1
  4825  03A2  0876               	movf	?___lldiv,w
  4826  03A3  00B0               	movwf	runPotScaling@maxDuty
  4827                           
  4828                           ;Potentiometer.c: 67:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4829  03A4  3000               	movlw	0
  4830  03A5  00F9               	movwf	___lldiv@divisor+3
  4831  03A6  3000               	movlw	0
  4832  03A7  00F8               	movwf	___lldiv@divisor+2
  4833  03A8  3000               	movlw	0
  4834  03A9  00F7               	movwf	___lldiv@divisor+1
  4835  03AA  3019               	movlw	25
  4836  03AB  00F6               	movwf	___lldiv@divisor
  4837  03AC  300A               	movlw	10
  4838  03AD  00F2               	movwf	___wmul@multiplicand
  4839  03AE  3000               	movlw	0
  4840  03AF  00F3               	movwf	___wmul@multiplicand+1
  4841  03B0  086E               	movf	_setPeriod,w
  4842  03B1  00A6               	movwf	??_runPotScaling
  4843  03B2  01A7               	clrf	??_runPotScaling+1
  4844  03B3  0826               	movf	??_runPotScaling,w
  4845  03B4  00F0               	movwf	___wmul@multiplier
  4846  03B5  0827               	movf	??_runPotScaling+1,w
  4847  03B6  00F1               	movwf	___wmul@multiplier+1
  4848  03B7  318C  242C  3183   	fcall	___wmul
  4849  03BA  0870               	movf	?___wmul,w
  4850  03BB  0020               	movlb	0	; select bank0
  4851  03BC  00A8               	movwf	??_runPotScaling+2
  4852  03BD  0871               	movf	?___wmul+1,w
  4853  03BE  00A9               	movwf	??_runPotScaling+3
  4854  03BF  01AA               	clrf	??_runPotScaling+4
  4855  03C0  01AB               	clrf	??_runPotScaling+5
  4856  03C1  082B               	movf	??_runPotScaling+5,w
  4857  03C2  00FD               	movwf	___lldiv@dividend+3
  4858  03C3  082A               	movf	??_runPotScaling+4,w
  4859  03C4  00FC               	movwf	___lldiv@dividend+2
  4860  03C5  0829               	movf	??_runPotScaling+3,w
  4861  03C6  00FB               	movwf	___lldiv@dividend+1
  4862  03C7  0828               	movf	??_runPotScaling+2,w
  4863  03C8  00FA               	movwf	___lldiv@dividend
  4864  03C9  318E  26EF  3183   	fcall	___lldiv
  4865  03CC  0877               	movf	?___lldiv+1,w
  4866  03CD  0020               	movlb	0	; select bank0
  4867  03CE  00B3               	movwf	runPotScaling@minDuty+1
  4868  03CF  0876               	movf	?___lldiv,w
  4869  03D0  00B2               	movwf	runPotScaling@minDuty
  4870                           
  4871                           ;Potentiometer.c: 70:             potScaled = (uint32_t) ((uint32_t)((filteredDutyPot - 
      +                          51) * 270) >> 8);
  4872  03D1  0021               	movlb	1	; select bank1
  4873  03D2  082C               	movf	_filteredDutyPot^(0+128),w
  4874  03D3  3ECD               	addlw	205
  4875  03D4  00F0               	movwf	___wmul@multiplier
  4876  03D5  30FF               	movlw	255
  4877  03D6  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4878  03D7  00F1               	movwf	___wmul@multiplier+1
  4879  03D8  300E               	movlw	14
  4880  03D9  00F2               	movwf	___wmul@multiplicand
  4881  03DA  3001               	movlw	1
  4882  03DB  00F3               	movwf	___wmul@multiplicand+1
  4883  03DC  318C  242C  3183   	fcall	___wmul
  4884  03DF  0870               	movf	?___wmul,w
  4885  03E0  0020               	movlb	0	; select bank0
  4886  03E1  00A6               	movwf	??_runPotScaling
  4887  03E2  0871               	movf	?___wmul+1,w
  4888  03E3  00A7               	movwf	??_runPotScaling+1
  4889  03E4  0827               	movf	??_runPotScaling+1,w
  4890  03E5  00A6               	movwf	??_runPotScaling
  4891  03E6  01A7               	clrf	??_runPotScaling+1
  4892  03E7  0826               	movf	??_runPotScaling,w
  4893  03E8  00AC               	movwf	runPotScaling@potScaled
  4894  03E9  0827               	movf	??_runPotScaling+1,w
  4895  03EA  00AD               	movwf	runPotScaling@potScaled+1
  4896  03EB  01AE               	clrf	runPotScaling@potScaled+2
  4897  03EC  01AF               	clrf	runPotScaling@potScaled+3
  4898                           
  4899                           ;Potentiometer.c: 71:             setDuty = ((uint32_t)((potScaled) * (uint32_t)(maxDuty
      +                          -minDuty)) >> (10)) + minDuty;
  4900  03ED  0832               	movf	runPotScaling@minDuty,w
  4901  03EE  0230               	subwf	runPotScaling@maxDuty,w
  4902  03EF  00F0               	movwf	___lmul@multiplier
  4903  03F0  0833               	movf	runPotScaling@minDuty+1,w
  4904  03F1  3B31               	subwfb	runPotScaling@maxDuty+1,w
  4905  03F2  00F1               	movwf	___lmul@multiplier+1
  4906  03F3  01F2               	clrf	___lmul@multiplier+2
  4907  03F4  01F3               	clrf	___lmul@multiplier+3
  4908  03F5  082F               	movf	runPotScaling@potScaled+3,w
  4909  03F6  00F7               	movwf	___lmul@multiplicand+3
  4910  03F7  082E               	movf	runPotScaling@potScaled+2,w
  4911  03F8  00F6               	movwf	___lmul@multiplicand+2
  4912  03F9  082D               	movf	runPotScaling@potScaled+1,w
  4913  03FA  00F5               	movwf	___lmul@multiplicand+1
  4914  03FB  082C               	movf	runPotScaling@potScaled,w
  4915  03FC  00F4               	movwf	___lmul@multiplicand
  4916  03FD  318C  24BA  3183   	fcall	___lmul
  4917  0400  0870               	movf	?___lmul,w
  4918  0401  0020               	movlb	0	; select bank0
  4919  0402  00A6               	movwf	??_runPotScaling
  4920  0403  0871               	movf	?___lmul+1,w
  4921  0404  00A7               	movwf	??_runPotScaling+1
  4922  0405  0872               	movf	?___lmul+2,w
  4923  0406  00A8               	movwf	??_runPotScaling+2
  4924  0407  0873               	movf	?___lmul+3,w
  4925  0408  00A9               	movwf	??_runPotScaling+3
  4926  0409  300A               	movlw	10
  4927  040A                     u239_25:
  4928  040A  36A9               	lsrf	??_runPotScaling+3,f
  4929  040B  0CA8               	rrf	??_runPotScaling+2,f
  4930  040C  0CA7               	rrf	??_runPotScaling+1,f
  4931  040D  0CA6               	rrf	??_runPotScaling,f
  4932  040E                     u239_20:
  4933  040E  0B89               	decfsz	9,f
  4934  040F  2C0A               	goto	u239_25
  4935  0410  0832               	movf	runPotScaling@minDuty,w
  4936  0411  0726               	addwf	??_runPotScaling,w
  4937  0412  00E3               	movwf	_setDuty
  4938  0413  0833               	movf	runPotScaling@minDuty+1,w
  4939  0414  3D27               	addwfc	??_runPotScaling+1,w
  4940  0415  00E4               	movwf	_setDuty+1
  4941  0416                     i1l2461:
  4942                           
  4943                           ;Potentiometer.c: 72:             setDuty = (maxDuty) - (setDuty - minDuty);
  4944  0416  0863               	movf	_setDuty,w
  4945  0417  0232               	subwf	runPotScaling@minDuty,w
  4946  0418  00A6               	movwf	??_runPotScaling
  4947  0419  0864               	movf	_setDuty+1,w
  4948  041A  3B33               	subwfb	runPotScaling@minDuty+1,w
  4949  041B  00A7               	movwf	??_runPotScaling+1
  4950  041C  0830               	movf	runPotScaling@maxDuty,w
  4951  041D  0726               	addwf	??_runPotScaling,w
  4952  041E  00E3               	movwf	_setDuty
  4953  041F  0831               	movf	runPotScaling@maxDuty+1,w
  4954  0420  3D27               	addwfc	??_runPotScaling+1,w
  4955  0421  00E4               	movwf	_setDuty+1
  4956  0422                     i1l2463:
  4957                           
  4958                           ;Potentiometer.c: 75:             if(setDuty > maxDuty) setDuty = maxDuty;
  4959  0422  0864               	movf	_setDuty+1,w
  4960  0423  0231               	subwf	runPotScaling@maxDuty+1,w
  4961  0424  1D03               	skipz
  4962  0425  2C28               	goto	u240_25
  4963  0426  0863               	movf	_setDuty,w
  4964  0427  0230               	subwf	runPotScaling@maxDuty,w
  4965  0428                     u240_25:
  4966  0428  1803               	skipnc
  4967  0429  2C2B               	goto	u240_21
  4968  042A  2C2C               	goto	u240_20
  4969  042B                     u240_21:
  4970  042B  2C30               	goto	i1l377
  4971  042C                     u240_20:
  4972  042C                     i1l2465:
  4973  042C  0831               	movf	runPotScaling@maxDuty+1,w
  4974  042D  00E4               	movwf	_setDuty+1
  4975  042E  0830               	movf	runPotScaling@maxDuty,w
  4976  042F  00E3               	movwf	_setDuty
  4977  0430                     i1l377:
  4978                           
  4979                           ;Potentiometer.c: 76:             if(setDuty < minDuty) setDuty = minDuty;
  4980  0430  0833               	movf	runPotScaling@minDuty+1,w
  4981  0431  0264               	subwf	_setDuty+1,w
  4982  0432  1D03               	skipz
  4983  0433  2C36               	goto	u241_25
  4984  0434  0832               	movf	runPotScaling@minDuty,w
  4985  0435  0263               	subwf	_setDuty,w
  4986  0436                     u241_25:
  4987  0436  1803               	skipnc
  4988  0437  2C39               	goto	u241_21
  4989  0438  2C3A               	goto	u241_20
  4990  0439                     u241_21:
  4991  0439  2C3E               	goto	i1l2469
  4992  043A                     u241_20:
  4993  043A                     i1l2467:
  4994  043A  0833               	movf	runPotScaling@minDuty+1,w
  4995  043B  00E4               	movwf	_setDuty+1
  4996  043C  0832               	movf	runPotScaling@minDuty,w
  4997  043D  00E3               	movwf	_setDuty
  4998  043E                     i1l2469:
  4999                           
  5000                           ;Potentiometer.c: 78:             potSetCount = 0;
  5001  043E  01E8               	clrf	_potSetCount
  5002  043F                     i1l379:
  5003  043F  0008               	return
  5004  0440                     __end_of_runPotScaling:
  5005                           
  5006                           	psect	text20
  5007  0776                     __ptext20:	
  5008 ;; *************** function _readFilteredVout *****************
  5009 ;; Defined at:
  5010 ;;		line 39 in file "Controller.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  i               1    8[BANK0 ] unsigned char 
  5015 ;;  i               1    9[BANK0 ] unsigned char 
  5016 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  2   10[COMMON] unsigned short 
  5019 ;; Registers used:
  5020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5026 ;;      Params:         2       0       0       0       0       0
  5027 ;;      Locals:         0       6       0       0       0       0
  5028 ;;      Temps:          0       4       0       0       0       0
  5029 ;;      Totals:         2      10       0       0       0       0
  5030 ;;Total ram usage:       12 bytes
  5031 ;; Hardware stack levels used: 1
  5032 ;; Hardware stack levels required when called: 1
  5033 ;; This function calls:
  5034 ;;		_readADCRaw
  5035 ;; This function is called by:
  5036 ;;		_Tick490Hz
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040  0776                     _readFilteredVout:	
  5041                           ;psect for function _readFilteredVout
  5042                           
  5043  0776                     i1l2423:	
  5044                           ;incstack = 0
  5045                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5046                           
  5047                           
  5048                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  5049  0776  0020               	movlb	0	; select bank0
  5050  0777  01A9               	clrf	readFilteredVout@i
  5051  0778                     i1l2429:
  5052  0778  3529               	lslf	readFilteredVout@i,w
  5053  0779  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  5054  077A  0086               	movwf	6
  5055  077B  3001               	movlw	1	; select bank3/4
  5056  077C  0087               	movwf	7
  5057  077D  3529               	lslf	readFilteredVout@i,w
  5058  077E  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5059  077F  0084               	movwf	4
  5060  0780  3001               	movlw	1	; select bank3/4
  5061  0781  0085               	movwf	5
  5062  0782  3F40               	moviw [0]fsr1
  5063  0783  3F80               	movwi [0]fsr0
  5064  0784  3F41               	moviw [1]fsr1
  5065  0785  3F81               	movwi [1]fsr0
  5066  0786                     i1l2431:
  5067  0786  3001               	movlw	1
  5068  0787  00A0               	movwf	??_readFilteredVout
  5069  0788  0820               	movf	??_readFilteredVout,w
  5070  0789  07A9               	addwf	readFilteredVout@i,f
  5071  078A                     i1l2433:
  5072  078A  300F               	movlw	15
  5073  078B  0229               	subwf	readFilteredVout@i,w
  5074  078C  1C03               	skipc
  5075  078D  2F8F               	goto	u232_21
  5076  078E  2F90               	goto	u232_20
  5077  078F                     u232_21:
  5078  078F  2F78               	goto	i1l2429
  5079  0790                     u232_20:
  5080  0790                     i1l2435:
  5081                           
  5082                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  5083  0790  3004               	movlw	4
  5084  0791  318E  2695  3187   	fcall	_readADCRaw
  5085  0794  0871               	movf	?_readADCRaw+1,w
  5086  0795  0023               	movlb	3	; select bank3
  5087  0796  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5088  0797  0870               	movf	?_readADCRaw,w
  5089  0798  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5090  0799                     i1l2437:
  5091                           
  5092                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  5093  0799  3000               	movlw	0
  5094  079A  0020               	movlb	0	; select bank0
  5095  079B  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5096  079C  3000               	movlw	0
  5097  079D  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5098  079E  3000               	movlw	0
  5099  079F  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5100  07A0  3000               	movlw	0
  5101  07A1  00A4               	movwf	readFilteredVout@sumOfSamples
  5102  07A2                     i1l2439:
  5103                           
  5104                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  5105  07A2  01A8               	clrf	readFilteredVout@i_836
  5106  07A3                     i1l2445:
  5107  07A3  3528               	lslf	readFilteredVout@i_836,w
  5108  07A4  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5109  07A5  0086               	movwf	6
  5110  07A6  3001               	movlw	1	; select bank3/4
  5111  07A7  0087               	movwf	7
  5112  07A8  3F40               	moviw [0]fsr1
  5113  07A9  00A0               	movwf	??_readFilteredVout
  5114  07AA  3F41               	moviw [1]fsr1
  5115  07AB  00A1               	movwf	??_readFilteredVout+1
  5116  07AC  0820               	movf	??_readFilteredVout,w
  5117  07AD  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5118  07AE  0821               	movf	??_readFilteredVout+1,w
  5119  07AF  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5120  07B0  3000               	movlw	0
  5121  07B1  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5122  07B2  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5123  07B3                     i1l2447:
  5124  07B3  3001               	movlw	1
  5125  07B4  00A0               	movwf	??_readFilteredVout
  5126  07B5  0820               	movf	??_readFilteredVout,w
  5127  07B6  07A8               	addwf	readFilteredVout@i_836,f
  5128  07B7                     i1l2449:
  5129  07B7  3010               	movlw	16
  5130  07B8  0228               	subwf	readFilteredVout@i_836,w
  5131  07B9  1C03               	skipc
  5132  07BA  2FBC               	goto	u233_21
  5133  07BB  2FBD               	goto	u233_20
  5134  07BC                     u233_21:
  5135  07BC  2FA3               	goto	i1l2445
  5136  07BD                     u233_20:
  5137  07BD                     i1l2451:
  5138                           
  5139                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  5140  07BD  0824               	movf	readFilteredVout@sumOfSamples,w
  5141  07BE  00A0               	movwf	??_readFilteredVout
  5142  07BF  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5143  07C0  00A1               	movwf	??_readFilteredVout+1
  5144  07C1  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5145  07C2  00A2               	movwf	??_readFilteredVout+2
  5146  07C3  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5147  07C4  00A3               	movwf	??_readFilteredVout+3
  5148  07C5  3004               	movlw	4
  5149  07C6                     u234_25:
  5150  07C6  36A3               	lsrf	??_readFilteredVout+3,f
  5151  07C7  0CA2               	rrf	??_readFilteredVout+2,f
  5152  07C8  0CA1               	rrf	??_readFilteredVout+1,f
  5153  07C9  0CA0               	rrf	??_readFilteredVout,f
  5154  07CA                     u234_20:
  5155  07CA  0B89               	decfsz	9,f
  5156  07CB  2FC6               	goto	u234_25
  5157  07CC  0821               	movf	??_readFilteredVout+1,w
  5158  07CD  00FB               	movwf	?_readFilteredVout+1
  5159  07CE  0820               	movf	??_readFilteredVout,w
  5160  07CF  00FA               	movwf	?_readFilteredVout
  5161  07D0                     i1l437:
  5162  07D0  0008               	return
  5163  07D1                     __end_of_readFilteredVout:
  5164                           
  5165                           	psect	text21
  5166  0E3D                     __ptext21:	
  5167 ;; *************** function _readFilteredIL *****************
  5168 ;; Defined at:
  5169 ;;		line 56 in file "CurrentSensor.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  i               1   10[COMMON] unsigned char 
  5174 ;;  i               1   11[COMMON] unsigned char 
  5175 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  2    0[COMMON] unsigned short 
  5178 ;; Registers used:
  5179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5185 ;;      Params:         2       0       0       0       0       0
  5186 ;;      Locals:         6       0       0       0       0       0
  5187 ;;      Temps:          4       0       0       0       0       0
  5188 ;;      Totals:        12       0       0       0       0       0
  5189 ;;Total ram usage:       12 bytes
  5190 ;; Hardware stack levels used: 1
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_Tick490Hz
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198  0E3D                     _readFilteredIL:	
  5199                           ;psect for function _readFilteredIL
  5200                           
  5201  0E3D                     i1l2393:	
  5202                           ;incstack = 0
  5203                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5204                           
  5205                           
  5206                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5207  0E3D  01FB               	clrf	readFilteredIL@i
  5208  0E3E                     i1l2399:
  5209  0E3E  357B               	lslf	readFilteredIL@i,w
  5210  0E3F  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5211  0E40  0086               	movwf	6
  5212  0E41  3001               	movlw	1	; select bank2/3
  5213  0E42  0087               	movwf	7
  5214  0E43  357B               	lslf	readFilteredIL@i,w
  5215  0E44  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5216  0E45  0084               	movwf	4
  5217  0E46  3001               	movlw	1	; select bank2/3
  5218  0E47  0085               	movwf	5
  5219  0E48  3F40               	moviw [0]fsr1
  5220  0E49  3F80               	movwi [0]fsr0
  5221  0E4A  3F41               	moviw [1]fsr1
  5222  0E4B  3F81               	movwi [1]fsr0
  5223  0E4C                     i1l2401:
  5224  0E4C  3001               	movlw	1
  5225  0E4D  00F2               	movwf	??_readFilteredIL
  5226  0E4E  0872               	movf	??_readFilteredIL,w
  5227  0E4F  07FB               	addwf	readFilteredIL@i,f
  5228  0E50                     i1l2403:
  5229  0E50  300F               	movlw	15
  5230  0E51  027B               	subwf	readFilteredIL@i,w
  5231  0E52  1C03               	skipc
  5232  0E53  2E55               	goto	u229_21
  5233  0E54  2E56               	goto	u229_20
  5234  0E55                     u229_21:
  5235  0E55  2E3E               	goto	i1l2399
  5236  0E56                     u229_20:
  5237  0E56                     i1l2405:
  5238                           
  5239                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5240  0E56  0020               	movlb	0	; select bank0
  5241  0E57  0862               	movf	_latestIL+1,w	;volatile
  5242  0E58  0022               	movlb	2	; select bank2
  5243  0E59  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5244  0E5A  0020               	movlb	0	; select bank0
  5245  0E5B  0861               	movf	_latestIL,w	;volatile
  5246  0E5C  0022               	movlb	2	; select bank2
  5247  0E5D  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5248                           
  5249                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5250  0E5E  3000               	movlw	0
  5251  0E5F  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5252  0E60  3000               	movlw	0
  5253  0E61  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5254  0E62  3000               	movlw	0
  5255  0E63  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5256  0E64  3000               	movlw	0
  5257  0E65  00F6               	movwf	readFilteredIL@sumOfSamples
  5258  0E66                     i1l2407:
  5259                           
  5260                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5261  0E66  01FA               	clrf	readFilteredIL@i_926
  5262  0E67                     i1l2413:
  5263  0E67  357A               	lslf	readFilteredIL@i_926,w
  5264  0E68  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5265  0E69  0086               	movwf	6
  5266  0E6A  3001               	movlw	1	; select bank2/3
  5267  0E6B  0087               	movwf	7
  5268  0E6C  3F40               	moviw [0]fsr1
  5269  0E6D  00F2               	movwf	??_readFilteredIL
  5270  0E6E  3F41               	moviw [1]fsr1
  5271  0E6F  00F3               	movwf	??_readFilteredIL+1
  5272  0E70  0872               	movf	??_readFilteredIL,w
  5273  0E71  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5274  0E72  0873               	movf	??_readFilteredIL+1,w
  5275  0E73  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5276  0E74  3000               	movlw	0
  5277  0E75  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5278  0E76  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5279  0E77                     i1l2415:
  5280  0E77  3001               	movlw	1
  5281  0E78  00F2               	movwf	??_readFilteredIL
  5282  0E79  0872               	movf	??_readFilteredIL,w
  5283  0E7A  07FA               	addwf	readFilteredIL@i_926,f
  5284  0E7B                     i1l2417:
  5285  0E7B  3010               	movlw	16
  5286  0E7C  027A               	subwf	readFilteredIL@i_926,w
  5287  0E7D  1C03               	skipc
  5288  0E7E  2E80               	goto	u230_21
  5289  0E7F  2E81               	goto	u230_20
  5290  0E80                     u230_21:
  5291  0E80  2E67               	goto	i1l2413
  5292  0E81                     u230_20:
  5293  0E81                     i1l2419:
  5294                           
  5295                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5296  0E81  0876               	movf	readFilteredIL@sumOfSamples,w
  5297  0E82  00F2               	movwf	??_readFilteredIL
  5298  0E83  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5299  0E84  00F3               	movwf	??_readFilteredIL+1
  5300  0E85  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5301  0E86  00F4               	movwf	??_readFilteredIL+2
  5302  0E87  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5303  0E88  00F5               	movwf	??_readFilteredIL+3
  5304  0E89  3004               	movlw	4
  5305  0E8A                     u231_25:
  5306  0E8A  36F5               	lsrf	??_readFilteredIL+3,f
  5307  0E8B  0CF4               	rrf	??_readFilteredIL+2,f
  5308  0E8C  0CF3               	rrf	??_readFilteredIL+1,f
  5309  0E8D  0CF2               	rrf	??_readFilteredIL,f
  5310  0E8E                     u231_20:
  5311  0E8E  0B89               	decfsz	9,f
  5312  0E8F  2E8A               	goto	u231_25
  5313  0E90  0873               	movf	??_readFilteredIL+1,w
  5314  0E91  00F1               	movwf	?_readFilteredIL+1
  5315  0E92  0872               	movf	??_readFilteredIL,w
  5316  0E93  00F0               	movwf	?_readFilteredIL
  5317  0E94                     i1l531:
  5318  0E94  0008               	return
  5319  0E95                     __end_of_readFilteredIL:
  5320                           
  5321                           	psect	text22
  5322  0FA5                     __ptext22:	
  5323 ;; *************** function _readFilteredFreqPot *****************
  5324 ;; Defined at:
  5325 ;;		line 39 in file "Potentiometer.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  i               1    8[BANK0 ] unsigned char 
  5330 ;;  i               1    9[BANK0 ] unsigned char 
  5331 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  2   10[COMMON] unsigned short 
  5334 ;; Registers used:
  5335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5341 ;;      Params:         2       0       0       0       0       0
  5342 ;;      Locals:         0       6       0       0       0       0
  5343 ;;      Temps:          0       4       0       0       0       0
  5344 ;;      Totals:         2      10       0       0       0       0
  5345 ;;Total ram usage:       12 bytes
  5346 ;; Hardware stack levels used: 1
  5347 ;; Hardware stack levels required when called: 1
  5348 ;; This function calls:
  5349 ;;		_readADCRaw
  5350 ;; This function is called by:
  5351 ;;		_Tick490Hz
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355  0FA5                     _readFilteredFreqPot:	
  5356                           ;psect for function _readFilteredFreqPot
  5357                           
  5358  0FA5                     i1l2503:	
  5359                           ;incstack = 0
  5360                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5361                           
  5362                           
  5363                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5364  0FA5  0020               	movlb	0	; select bank0
  5365  0FA6  01A9               	clrf	readFilteredFreqPot@i
  5366  0FA7                     i1l2509:
  5367  0FA7  3529               	lslf	readFilteredFreqPot@i,w
  5368  0FA8  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5369  0FA9  0086               	movwf	6
  5370  0FAA  3001               	movlw	1	; select bank3/4
  5371  0FAB  0087               	movwf	7
  5372  0FAC  3529               	lslf	readFilteredFreqPot@i,w
  5373  0FAD  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5374  0FAE  0084               	movwf	4
  5375  0FAF  3001               	movlw	1	; select bank3/4
  5376  0FB0  0085               	movwf	5
  5377  0FB1  3F40               	moviw [0]fsr1
  5378  0FB2  3F80               	movwi [0]fsr0
  5379  0FB3  3F41               	moviw [1]fsr1
  5380  0FB4  3F81               	movwi [1]fsr0
  5381  0FB5                     i1l2511:
  5382  0FB5  3001               	movlw	1
  5383  0FB6  00A0               	movwf	??_readFilteredFreqPot
  5384  0FB7  0820               	movf	??_readFilteredFreqPot,w
  5385  0FB8  07A9               	addwf	readFilteredFreqPot@i,f
  5386  0FB9                     i1l2513:
  5387  0FB9  300F               	movlw	15
  5388  0FBA  0229               	subwf	readFilteredFreqPot@i,w
  5389  0FBB  1C03               	skipc
  5390  0FBC  2FBE               	goto	u245_21
  5391  0FBD  2FBF               	goto	u245_20
  5392  0FBE                     u245_21:
  5393  0FBE  2FA7               	goto	i1l2509
  5394  0FBF                     u245_20:
  5395  0FBF                     i1l2515:
  5396                           
  5397                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5398  0FBF  300A               	movlw	10
  5399  0FC0  318E  2695  318F   	fcall	_readADCRaw
  5400  0FC3  0871               	movf	?_readADCRaw+1,w
  5401  0FC4  0023               	movlb	3	; select bank3
  5402  0FC5  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5403  0FC6  0870               	movf	?_readADCRaw,w
  5404  0FC7  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5405  0FC8                     i1l2517:
  5406                           
  5407                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5408  0FC8  3000               	movlw	0
  5409  0FC9  0020               	movlb	0	; select bank0
  5410  0FCA  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5411  0FCB  3000               	movlw	0
  5412  0FCC  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5413  0FCD  3000               	movlw	0
  5414  0FCE  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5415  0FCF  3000               	movlw	0
  5416  0FD0  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5417  0FD1                     i1l2519:
  5418                           
  5419                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5420  0FD1  01A8               	clrf	readFilteredFreqPot@i_758
  5421  0FD2                     i1l2525:
  5422  0FD2  3528               	lslf	readFilteredFreqPot@i_758,w
  5423  0FD3  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5424  0FD4  0086               	movwf	6
  5425  0FD5  3001               	movlw	1	; select bank3/4
  5426  0FD6  0087               	movwf	7
  5427  0FD7  3F40               	moviw [0]fsr1
  5428  0FD8  00A0               	movwf	??_readFilteredFreqPot
  5429  0FD9  3F41               	moviw [1]fsr1
  5430  0FDA  00A1               	movwf	??_readFilteredFreqPot+1
  5431  0FDB  0820               	movf	??_readFilteredFreqPot,w
  5432  0FDC  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5433  0FDD  0821               	movf	??_readFilteredFreqPot+1,w
  5434  0FDE  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5435  0FDF  3000               	movlw	0
  5436  0FE0  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5437  0FE1  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5438  0FE2                     i1l2527:
  5439  0FE2  3001               	movlw	1
  5440  0FE3  00A0               	movwf	??_readFilteredFreqPot
  5441  0FE4  0820               	movf	??_readFilteredFreqPot,w
  5442  0FE5  07A8               	addwf	readFilteredFreqPot@i_758,f
  5443  0FE6                     i1l2529:
  5444  0FE6  3010               	movlw	16
  5445  0FE7  0228               	subwf	readFilteredFreqPot@i_758,w
  5446  0FE8  1C03               	skipc
  5447  0FE9  2FEB               	goto	u246_21
  5448  0FEA  2FEC               	goto	u246_20
  5449  0FEB                     u246_21:
  5450  0FEB  2FD2               	goto	i1l2525
  5451  0FEC                     u246_20:
  5452  0FEC                     i1l2531:
  5453                           
  5454                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5455  0FEC  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5456  0FED  00A0               	movwf	??_readFilteredFreqPot
  5457  0FEE  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5458  0FEF  00A1               	movwf	??_readFilteredFreqPot+1
  5459  0FF0  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5460  0FF1  00A2               	movwf	??_readFilteredFreqPot+2
  5461  0FF2  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5462  0FF3  00A3               	movwf	??_readFilteredFreqPot+3
  5463  0FF4  3004               	movlw	4
  5464  0FF5                     u247_25:
  5465  0FF5  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5466  0FF6  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5467  0FF7  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5468  0FF8  0CA0               	rrf	??_readFilteredFreqPot,f
  5469  0FF9                     u247_20:
  5470  0FF9  0B89               	decfsz	9,f
  5471  0FFA  2FF5               	goto	u247_25
  5472  0FFB  0821               	movf	??_readFilteredFreqPot+1,w
  5473  0FFC  00FB               	movwf	?_readFilteredFreqPot+1
  5474  0FFD  0820               	movf	??_readFilteredFreqPot,w
  5475  0FFE  00FA               	movwf	?_readFilteredFreqPot
  5476  0FFF                     i1l372:
  5477  0FFF  0008               	return
  5478  1000                     __end_of_readFilteredFreqPot:
  5479                           
  5480                           	psect	text23
  5481  0F4A                     __ptext23:	
  5482 ;; *************** function _readFilteredDutyPot *****************
  5483 ;; Defined at:
  5484 ;;		line 25 in file "Potentiometer.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  i               1    8[BANK0 ] unsigned char 
  5489 ;;  i               1    9[BANK0 ] unsigned char 
  5490 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  2   10[COMMON] unsigned short 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5500 ;;      Params:         2       0       0       0       0       0
  5501 ;;      Locals:         0       6       0       0       0       0
  5502 ;;      Temps:          0       4       0       0       0       0
  5503 ;;      Totals:         2      10       0       0       0       0
  5504 ;;Total ram usage:       12 bytes
  5505 ;; Hardware stack levels used: 1
  5506 ;; Hardware stack levels required when called: 1
  5507 ;; This function calls:
  5508 ;;		_readADCRaw
  5509 ;; This function is called by:
  5510 ;;		_Tick490Hz
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514  0F4A                     _readFilteredDutyPot:	
  5515                           ;psect for function _readFilteredDutyPot
  5516                           
  5517  0F4A                     i1l2471:	
  5518                           ;incstack = 0
  5519                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5520                           
  5521                           
  5522                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5523  0F4A  0020               	movlb	0	; select bank0
  5524  0F4B  01A9               	clrf	readFilteredDutyPot@i
  5525  0F4C                     i1l2477:
  5526  0F4C  3529               	lslf	readFilteredDutyPot@i,w
  5527  0F4D  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5528  0F4E  0086               	movwf	6
  5529  0F4F  3002               	movlw	2	; select bank4/5
  5530  0F50  0087               	movwf	7
  5531  0F51  3529               	lslf	readFilteredDutyPot@i,w
  5532  0F52  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5533  0F53  0084               	movwf	4
  5534  0F54  3002               	movlw	2	; select bank4/5
  5535  0F55  0085               	movwf	5
  5536  0F56  3F40               	moviw [0]fsr1
  5537  0F57  3F80               	movwi [0]fsr0
  5538  0F58  3F41               	moviw [1]fsr1
  5539  0F59  3F81               	movwi [1]fsr0
  5540  0F5A                     i1l2479:
  5541  0F5A  3001               	movlw	1
  5542  0F5B  00A0               	movwf	??_readFilteredDutyPot
  5543  0F5C  0820               	movf	??_readFilteredDutyPot,w
  5544  0F5D  07A9               	addwf	readFilteredDutyPot@i,f
  5545  0F5E                     i1l2481:
  5546  0F5E  300F               	movlw	15
  5547  0F5F  0229               	subwf	readFilteredDutyPot@i,w
  5548  0F60  1C03               	skipc
  5549  0F61  2F63               	goto	u242_21
  5550  0F62  2F64               	goto	u242_20
  5551  0F63                     u242_21:
  5552  0F63  2F4C               	goto	i1l2477
  5553  0F64                     u242_20:
  5554  0F64                     i1l2483:
  5555                           
  5556                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5557  0F64  3009               	movlw	9
  5558  0F65  318E  2695  318F   	fcall	_readADCRaw
  5559  0F68  0871               	movf	?_readADCRaw+1,w
  5560  0F69  0024               	movlb	4	; select bank4
  5561  0F6A  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5562  0F6B  0870               	movf	?_readADCRaw,w
  5563  0F6C  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5564  0F6D                     i1l2485:
  5565                           
  5566                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5567  0F6D  3000               	movlw	0
  5568  0F6E  0020               	movlb	0	; select bank0
  5569  0F6F  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5570  0F70  3000               	movlw	0
  5571  0F71  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5572  0F72  3000               	movlw	0
  5573  0F73  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5574  0F74  3000               	movlw	0
  5575  0F75  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5576  0F76                     i1l2487:
  5577                           
  5578                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5579  0F76  01A8               	clrf	readFilteredDutyPot@i_754
  5580  0F77                     i1l2493:
  5581  0F77  3528               	lslf	readFilteredDutyPot@i_754,w
  5582  0F78  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5583  0F79  0086               	movwf	6
  5584  0F7A  3002               	movlw	2	; select bank4/5
  5585  0F7B  0087               	movwf	7
  5586  0F7C  3F40               	moviw [0]fsr1
  5587  0F7D  00A0               	movwf	??_readFilteredDutyPot
  5588  0F7E  3F41               	moviw [1]fsr1
  5589  0F7F  00A1               	movwf	??_readFilteredDutyPot+1
  5590  0F80  0820               	movf	??_readFilteredDutyPot,w
  5591  0F81  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5592  0F82  0821               	movf	??_readFilteredDutyPot+1,w
  5593  0F83  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5594  0F84  3000               	movlw	0
  5595  0F85  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5596  0F86  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5597  0F87                     i1l2495:
  5598  0F87  3001               	movlw	1
  5599  0F88  00A0               	movwf	??_readFilteredDutyPot
  5600  0F89  0820               	movf	??_readFilteredDutyPot,w
  5601  0F8A  07A8               	addwf	readFilteredDutyPot@i_754,f
  5602  0F8B                     i1l2497:
  5603  0F8B  3010               	movlw	16
  5604  0F8C  0228               	subwf	readFilteredDutyPot@i_754,w
  5605  0F8D  1C03               	skipc
  5606  0F8E  2F90               	goto	u243_21
  5607  0F8F  2F91               	goto	u243_20
  5608  0F90                     u243_21:
  5609  0F90  2F77               	goto	i1l2493
  5610  0F91                     u243_20:
  5611  0F91                     i1l2499:
  5612                           
  5613                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5614  0F91  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5615  0F92  00A0               	movwf	??_readFilteredDutyPot
  5616  0F93  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5617  0F94  00A1               	movwf	??_readFilteredDutyPot+1
  5618  0F95  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5619  0F96  00A2               	movwf	??_readFilteredDutyPot+2
  5620  0F97  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5621  0F98  00A3               	movwf	??_readFilteredDutyPot+3
  5622  0F99  3004               	movlw	4
  5623  0F9A                     u244_25:
  5624  0F9A  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5625  0F9B  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5626  0F9C  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5627  0F9D  0CA0               	rrf	??_readFilteredDutyPot,f
  5628  0F9E                     u244_20:
  5629  0F9E  0B89               	decfsz	9,f
  5630  0F9F  2F9A               	goto	u244_25
  5631  0FA0  0821               	movf	??_readFilteredDutyPot+1,w
  5632  0FA1  00FB               	movwf	?_readFilteredDutyPot+1
  5633  0FA2  0820               	movf	??_readFilteredDutyPot,w
  5634  0FA3  00FA               	movwf	?_readFilteredDutyPot
  5635  0FA4                     i1l365:
  5636  0FA4  0008               	return
  5637  0FA5                     __end_of_readFilteredDutyPot:
  5638                           
  5639                           	psect	text24
  5640  0E95                     __ptext24:	
  5641 ;; *************** function _readADCRaw *****************
  5642 ;; Defined at:
  5643 ;;		line 71 in file "ADC.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  gpioNumber      1    wreg     const enum E2798
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5648 ;;  i               1    8[COMMON] unsigned char 
  5649 ;;  returnValue     2    4[COMMON] unsigned int 
  5650 ;;  gpioValid       1    7[COMMON] unsigned char 
  5651 ;;  channel         1    6[COMMON] unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  2    0[COMMON] unsigned short 
  5654 ;; Registers used:
  5655 ;;		wreg, status,2, status,0
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5661 ;;      Params:         2       0       0       0       0       0
  5662 ;;      Locals:         6       0       0       0       0       0
  5663 ;;      Temps:          2       0       0       0       0       0
  5664 ;;      Totals:        10       0       0       0       0       0
  5665 ;;Total ram usage:       10 bytes
  5666 ;; Hardware stack levels used: 1
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_readFilteredDutyPot
  5671 ;;		_readFilteredFreqPot
  5672 ;;		_readFilteredVout
  5673 ;;		_readFilteredIDS
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677  0E95                     _readADCRaw:	
  5678                           ;psect for function _readADCRaw
  5679                           
  5680                           
  5681                           ;incstack = 0
  5682                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5683                           ;readADCRaw@gpioNumber stored from wreg
  5684  0E95  00F9               	movwf	readADCRaw@gpioNumber
  5685  0E96                     i1l2203:
  5686                           
  5687                           ;ADC.c: 72:     uint8_t channel = 0;
  5688  0E96  01F6               	clrf	readADCRaw@channel
  5689                           
  5690                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5691  0E97  01F7               	clrf	readADCRaw@gpioValid
  5692  0E98                     i1l2205:
  5693                           
  5694                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5695  0E98  3005               	movlw	5
  5696  0E99  0279               	subwf	readADCRaw@gpioNumber,w
  5697  0E9A  1803               	skipnc
  5698  0E9B  2E9D               	goto	u186_21
  5699  0E9C  2E9E               	goto	u186_20
  5700  0E9D                     u186_21:
  5701  0E9D  2EA4               	goto	i1l246
  5702  0E9E                     u186_20:
  5703  0E9E                     i1l2207:
  5704                           
  5705                           ;ADC.c: 76:         channel = gpioNumber;
  5706  0E9E  0879               	movf	readADCRaw@gpioNumber,w
  5707  0E9F  00F2               	movwf	??_readADCRaw
  5708  0EA0  0872               	movf	??_readADCRaw,w
  5709  0EA1  00F6               	movwf	readADCRaw@channel
  5710  0EA2                     i1l2209:
  5711                           
  5712                           ;ADC.c: 77:         gpioValid = 1;
  5713  0EA2  01F7               	clrf	readADCRaw@gpioValid
  5714  0EA3  0AF7               	incf	readADCRaw@gpioValid,f
  5715  0EA4                     i1l246:	
  5716                           ;ADC.c: 78:     }
  5717                           
  5718                           
  5719                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5720  0EA4  3009               	movlw	9
  5721  0EA5  0279               	subwf	readADCRaw@gpioNumber,w
  5722  0EA6  1C03               	skipc
  5723  0EA7  2EA9               	goto	u187_21
  5724  0EA8  2EAA               	goto	u187_20
  5725  0EA9                     u187_21:
  5726  0EA9  2EB7               	goto	i1l247
  5727  0EAA                     u187_20:
  5728  0EAA                     i1l2211:
  5729  0EAA  3010               	movlw	16
  5730  0EAB  0279               	subwf	readADCRaw@gpioNumber,w
  5731  0EAC  1803               	skipnc
  5732  0EAD  2EAF               	goto	u188_21
  5733  0EAE  2EB0               	goto	u188_20
  5734  0EAF                     u188_21:
  5735  0EAF  2EB7               	goto	i1l247
  5736  0EB0                     u188_20:
  5737  0EB0                     i1l2213:
  5738                           
  5739                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5740  0EB0  0879               	movf	readADCRaw@gpioNumber,w
  5741  0EB1  3C14               	sublw	20
  5742  0EB2  00F2               	movwf	??_readADCRaw
  5743  0EB3  0872               	movf	??_readADCRaw,w
  5744  0EB4  00F6               	movwf	readADCRaw@channel
  5745  0EB5                     i1l2215:
  5746                           
  5747                           ;ADC.c: 81:         gpioValid = 1;
  5748  0EB5  01F7               	clrf	readADCRaw@gpioValid
  5749  0EB6  0AF7               	incf	readADCRaw@gpioValid,f
  5750  0EB7                     i1l247:	
  5751                           ;ADC.c: 82:     }
  5752                           
  5753                           
  5754                           ;ADC.c: 83:     if(gpioValid){
  5755  0EB7  0877               	movf	readADCRaw@gpioValid,w
  5756  0EB8  1903               	btfsc	3,2
  5757  0EB9  2EBB               	goto	u189_21
  5758  0EBA  2EBC               	goto	u189_20
  5759  0EBB                     u189_21:
  5760  0EBB  2EEC               	goto	i1l2243
  5761  0EBC                     u189_20:
  5762  0EBC                     i1l2217:
  5763                           
  5764                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5765  0EBC  0021               	movlb	1	; select bank1
  5766  0EBD  081D               	movf	29,w	;volatile
  5767  0EBE                     i1l2219:
  5768                           
  5769                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5770  0EBE  3083               	movlw	131
  5771  0EBF  00F2               	movwf	??_readADCRaw
  5772  0EC0  0872               	movf	??_readADCRaw,w
  5773  0EC1  059D               	andwf	29,f	;volatile
  5774  0EC2                     i1l2221:
  5775                           
  5776                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5777  0EC2  0876               	movf	readADCRaw@channel,w	;volatile
  5778  0EC3  00F2               	movwf	??_readADCRaw
  5779  0EC4  3001               	movlw	1
  5780  0EC5                     u190_25:
  5781  0EC5  35F2               	lslf	??_readADCRaw,f
  5782  0EC6  3EFF               	addlw	-1
  5783  0EC7  1D03               	skipz
  5784  0EC8  2EC5               	goto	u190_25
  5785  0EC9  3572               	lslf	??_readADCRaw,w
  5786  0ECA  00F3               	movwf	??_readADCRaw+1
  5787  0ECB  0873               	movf	??_readADCRaw+1,w
  5788  0ECC  049D               	iorwf	29,f	;volatile
  5789  0ECD                     i1l2223:
  5790                           
  5791                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5792  0ECD  01F8               	clrf	readADCRaw@i
  5793  0ECE                     i1l2229:
  5794  0ECE  3001               	movlw	1
  5795  0ECF  00F2               	movwf	??_readADCRaw
  5796  0ED0  0872               	movf	??_readADCRaw,w
  5797  0ED1  07F8               	addwf	readADCRaw@i,f
  5798  0ED2                     i1l2231:
  5799  0ED2  3010               	movlw	16
  5800  0ED3  0278               	subwf	readADCRaw@i,w
  5801  0ED4  1C03               	skipc
  5802  0ED5  2ED7               	goto	u191_21
  5803  0ED6  2ED8               	goto	u191_20
  5804  0ED7                     u191_21:
  5805  0ED7  2ECE               	goto	i1l2229
  5806  0ED8                     u191_20:
  5807  0ED8                     i1l251:
  5808                           
  5809                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5810  0ED8  0021               	movlb	1	; select bank1
  5811  0ED9  149D               	bsf	29,1	;volatile
  5812  0EDA                     i1l252:	
  5813                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5814                           
  5815  0EDA  189D               	btfsc	29,1	;volatile
  5816  0EDB  2EDD               	goto	u192_21
  5817  0EDC  2EDE               	goto	u192_20
  5818  0EDD                     u192_21:
  5819  0EDD  2EDA               	goto	i1l252
  5820  0EDE                     u192_20:
  5821  0EDE                     i1l2233:
  5822                           
  5823                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5824  0EDE  081C               	movf	28,w	;volatile
  5825  0EDF  00F5               	movwf	readADCRaw@returnValue+1
  5826  0EE0  081B               	movf	27,w	;volatile
  5827  0EE1  00F4               	movwf	readADCRaw@returnValue
  5828  0EE2                     i1l2235:
  5829                           
  5830                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5831  0EE2  3083               	movlw	131
  5832  0EE3  00F2               	movwf	??_readADCRaw
  5833  0EE4  0872               	movf	??_readADCRaw,w
  5834  0EE5  059D               	andwf	29,f	;volatile
  5835  0EE6                     i1l2237:
  5836                           
  5837                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5838  0EE6  159D               	bsf	29,3	;volatile
  5839  0EE7                     i1l2239:
  5840                           
  5841                           ;ADC.c: 98:             return returnValue;
  5842  0EE7  0875               	movf	readADCRaw@returnValue+1,w
  5843  0EE8  00F1               	movwf	?_readADCRaw+1
  5844  0EE9  0874               	movf	readADCRaw@returnValue,w
  5845  0EEA  00F0               	movwf	?_readADCRaw
  5846  0EEB  2EEE               	goto	i1l255
  5847  0EEC                     i1l2243:
  5848  0EEC  01F0               	clrf	?_readADCRaw
  5849  0EED  01F1               	clrf	?_readADCRaw+1
  5850  0EEE                     i1l255:
  5851  0EEE  0008               	return
  5852  0EEF                     __end_of_readADCRaw:
  5853                           
  5854                           	psect	text25
  5855  0C6B                     __ptext25:	
  5856 ;; *************** function _currentTripMonitor *****************
  5857 ;; Defined at:
  5858 ;;		line 94 in file "CurrentSensor.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    4[None  ] int 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0, pclath, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5872 ;;      Params:         0       0       0       0       0       0
  5873 ;;      Locals:         0       0       0       0       0       0
  5874 ;;      Temps:          1       0       0       0       0       0
  5875 ;;      Totals:         1       0       0       0       0       0
  5876 ;;Total ram usage:        1 bytes
  5877 ;; Hardware stack levels used: 1
  5878 ;; Hardware stack levels required when called: 2
  5879 ;; This function calls:
  5880 ;;		_currentTripRead
  5881 ;;		_transToOverCurrentFault
  5882 ;;		i1_currentTripReset
  5883 ;; This function is called by:
  5884 ;;		_Tick490Hz
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888  0C6B                     _currentTripMonitor:	
  5889                           ;psect for function _currentTripMonitor
  5890                           
  5891  0C6B                     i1l2343:	
  5892                           ;incstack = 0
  5893                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5894                           
  5895                           
  5896                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5897  0C6B  3187  27D1  318C   	fcall	_currentTripRead
  5898  0C6E  3A01               	xorlw	1
  5899  0C6F  1D03               	skipz
  5900  0C70  2C72               	goto	u217_21
  5901  0C71  2C73               	goto	u217_20
  5902  0C72                     u217_21:
  5903  0C72  2C86               	goto	i1l2351
  5904  0C73                     u217_20:
  5905  0C73                     i1l2345:
  5906                           
  5907                           ;CurrentSensor.c: 97:         currentTripCount++;
  5908  0C73  3001               	movlw	1
  5909  0C74  00FB               	movwf	??_currentTripMonitor
  5910  0C75  087B               	movf	??_currentTripMonitor,w
  5911  0C76  0020               	movlb	0	; select bank0
  5912  0C77  07E9               	addwf	_currentTripCount,f
  5913                           
  5914                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5915  0C78  3003               	movlw	3
  5916  0C79  0669               	xorwf	_currentTripCount,w
  5917  0C7A  1D03               	btfss	3,2
  5918  0C7B  2C7D               	goto	u218_21
  5919  0C7C  2C7E               	goto	u218_20
  5920  0C7D                     u218_21:
  5921  0C7D  2C82               	goto	i1l2349
  5922  0C7E                     u218_20:
  5923  0C7E                     i1l2347:
  5924                           
  5925                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5926  0C7E  318B  23AD  318C   	fcall	_transToOverCurrentFault
  5927                           
  5928                           ;CurrentSensor.c: 100:         }
  5929  0C81  2C8E               	goto	i1l545
  5930  0C82                     i1l2349:
  5931                           
  5932                           ;CurrentSensor.c: 102:             currentTripReset();
  5933  0C82  318B  23BF  318C   	fcall	i1_currentTripReset
  5934  0C85  2C8E               	goto	i1l545
  5935  0C86                     i1l2351:
  5936                           
  5937                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5938  0C86  0020               	movlb	0	; select bank0
  5939  0C87  0869               	movf	_currentTripCount,w
  5940  0C88  1903               	btfsc	3,2
  5941  0C89  2C8B               	goto	u219_21
  5942  0C8A  2C8C               	goto	u219_20
  5943  0C8B                     u219_21:
  5944  0C8B  2C8E               	goto	i1l545
  5945  0C8C                     u219_20:
  5946  0C8C                     i1l2353:
  5947                           
  5948                           ;CurrentSensor.c: 107:             currentTripCount--;
  5949  0C8C  3001               	movlw	1
  5950  0C8D  02E9               	subwf	_currentTripCount,f
  5951  0C8E                     i1l545:
  5952  0C8E  0008               	return
  5953  0C8F                     __end_of_currentTripMonitor:
  5954                           
  5955                           	psect	text26
  5956  0BBF                     __ptext26:	
  5957 ;; *************** function i1_currentTripReset *****************
  5958 ;; Defined at:
  5959 ;;		line 71 in file "CurrentSensor.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, status,2, status,0, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5973 ;;      Params:         0       0       0       0       0       0
  5974 ;;      Locals:         0       0       0       0       0       0
  5975 ;;      Temps:          0       0       0       0       0       0
  5976 ;;      Totals:         0       0       0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used: 1
  5979 ;; Hardware stack levels required when called: 1
  5980 ;; This function calls:
  5981 ;;		i1_writeGPIO
  5982 ;; This function is called by:
  5983 ;;		_currentTripMonitor
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987  0BBF                     i1_currentTripReset:	
  5988                           ;psect for function i1_currentTripReset
  5989                           
  5990  0BBF                     i1l2339:	
  5991                           ;incstack = 0
  5992                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5993                           
  5994                           
  5995                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5996  0BBF  01F0               	clrf	i1writeGPIO@writeValue
  5997  0BC0  300B               	movlw	11
  5998  0BC1  3187  2717  318B   	fcall	i1_writeGPIO
  5999  0BC4                     i1l2341:
  6000                           
  6001                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  6002                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  6003  0BC4  01F0               	clrf	i1writeGPIO@writeValue
  6004  0BC5  0AF0               	incf	i1writeGPIO@writeValue,f
  6005  0BC6  300B               	movlw	11
  6006  0BC7  3187  2717  318B   	fcall	i1_writeGPIO
  6007  0BCA                     i1l534:
  6008  0BCA  0008               	return
  6009  0BCB                     __end_ofi1_currentTripReset:
  6010                           
  6011                           	psect	text27
  6012  0717                     __ptext27:	
  6013 ;; *************** function i1_writeGPIO *****************
  6014 ;; Defined at:
  6015 ;;		line 52 in file "GPIO.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  gpioNumber      1    wreg     const enum E2798
  6018 ;;  writeValue      1    0[COMMON] unsigned char 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  gpioNumber      1    4[COMMON] const enum E2798
  6021 ;;  portNumber      1    5[COMMON] unsigned char 
  6022 ;;  portType        1    3[COMMON] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6032 ;;      Params:         1       0       0       0       0       0
  6033 ;;      Locals:         3       0       0       0       0       0
  6034 ;;      Temps:          2       0       0       0       0       0
  6035 ;;      Totals:         6       0       0       0       0       0
  6036 ;;Total ram usage:        6 bytes
  6037 ;; Hardware stack levels used: 1
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_Tick490Hz
  6042 ;;		i1_currentTripReset
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046  0717                     i1_writeGPIO:	
  6047                           ;psect for function i1_writeGPIO
  6048                           
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  6052                           ;i1writeGPIO@gpioNumber stored from wreg
  6053  0717  00F4               	movwf	i1writeGPIO@gpioNumber
  6054  0718                     i1l2079:
  6055                           
  6056                           ;GPIO.c: 54:     uint8_t portType = 0;
  6057  0718  01F3               	clrf	i1writeGPIO@portType
  6058  0719                     i1l2081:
  6059                           
  6060                           ;GPIO.c: 55:     if(gpioNumber > 7){
  6061  0719  3008               	movlw	8
  6062  071A  0274               	subwf	i1writeGPIO@gpioNumber,w
  6063  071B  1C03               	skipc
  6064  071C  2F1E               	goto	u151_21
  6065  071D  2F1F               	goto	u151_20
  6066  071E                     u151_21:
  6067  071E  2F27               	goto	i1l2087
  6068  071F                     u151_20:
  6069  071F                     i1l2083:
  6070                           
  6071                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  6072  071F  0874               	movf	i1writeGPIO@gpioNumber,w
  6073  0720  3EF8               	addlw	248
  6074  0721  00F1               	movwf	??i1_writeGPIO
  6075  0722  0871               	movf	??i1_writeGPIO,w
  6076  0723  00F5               	movwf	i1writeGPIO@portNumber
  6077  0724                     i1l2085:
  6078                           
  6079                           ;GPIO.c: 57:         portType = 1;
  6080  0724  01F3               	clrf	i1writeGPIO@portType
  6081  0725  0AF3               	incf	i1writeGPIO@portType,f
  6082                           
  6083                           ;GPIO.c: 58:     }
  6084  0726  2F2C               	goto	i1l2091
  6085  0727                     i1l2087:
  6086                           
  6087                           ;GPIO.c: 60:         portNumber = gpioNumber;
  6088  0727  0874               	movf	i1writeGPIO@gpioNumber,w
  6089  0728  00F1               	movwf	??i1_writeGPIO
  6090  0729  0871               	movf	??i1_writeGPIO,w
  6091  072A  00F5               	movwf	i1writeGPIO@portNumber
  6092  072B                     i1l2089:
  6093                           
  6094                           ;GPIO.c: 61:         portType = 0;
  6095  072B  01F3               	clrf	i1writeGPIO@portType
  6096  072C                     i1l2091:
  6097                           
  6098                           ;GPIO.c: 64:     if(portType == 0){
  6099  072C  0873               	movf	i1writeGPIO@portType,w
  6100  072D  1D03               	btfss	3,2
  6101  072E  2F30               	goto	u152_21
  6102  072F  2F31               	goto	u152_20
  6103  0730                     u152_21:
  6104  0730  2F51               	goto	i1l2099
  6105  0731                     u152_20:
  6106  0731                     i1l2093:
  6107                           
  6108                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  6109  0731  0870               	movf	i1writeGPIO@writeValue,w
  6110  0732  1903               	btfsc	3,2
  6111  0733  2F35               	goto	u153_21
  6112  0734  2F36               	goto	u153_20
  6113  0735                     u153_21:
  6114  0735  2F43               	goto	i1l2097
  6115  0736                     u153_20:
  6116  0736                     i1l2095:
  6117  0736  3001               	movlw	1
  6118  0737  00F1               	movwf	??i1_writeGPIO
  6119  0738  0A75               	incf	i1writeGPIO@portNumber,w
  6120  0739  2F3B               	goto	u154_24
  6121  073A                     u154_25:
  6122  073A  35F1               	lslf	??i1_writeGPIO,f
  6123  073B                     u154_24:
  6124  073B  0B89               	decfsz	9,f
  6125  073C  2F3A               	goto	u154_25
  6126  073D  0871               	movf	??i1_writeGPIO,w
  6127  073E  00F2               	movwf	??i1_writeGPIO+1
  6128  073F  0872               	movf	??i1_writeGPIO+1,w
  6129  0740  0022               	movlb	2	; select bank2
  6130  0741  048C               	iorwf	12,f	;volatile
  6131  0742  2F75               	goto	i1l320
  6132  0743                     i1l2097:
  6133  0743  3001               	movlw	1
  6134  0744  00F1               	movwf	??i1_writeGPIO
  6135  0745  0A75               	incf	i1writeGPIO@portNumber,w
  6136  0746  2F48               	goto	u155_24
  6137  0747                     u155_25:
  6138  0747  35F1               	lslf	??i1_writeGPIO,f
  6139  0748                     u155_24:
  6140  0748  0B89               	decfsz	9,f
  6141  0749  2F47               	goto	u155_25
  6142  074A  0871               	movf	??i1_writeGPIO,w
  6143  074B  3AFF               	xorlw	255
  6144  074C  00F2               	movwf	??i1_writeGPIO+1
  6145  074D  0872               	movf	??i1_writeGPIO+1,w
  6146  074E  0022               	movlb	2	; select bank2
  6147  074F  058C               	andwf	12,f	;volatile
  6148  0750  2F75               	goto	i1l320
  6149  0751                     i1l2099:
  6150  0751  0373               	decf	i1writeGPIO@portType,w
  6151  0752  1D03               	btfss	3,2
  6152  0753  2F55               	goto	u156_21
  6153  0754  2F56               	goto	u156_20
  6154  0755                     u156_21:
  6155  0755  2F75               	goto	i1l320
  6156  0756                     u156_20:
  6157  0756                     i1l2101:
  6158                           
  6159                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6160  0756  0870               	movf	i1writeGPIO@writeValue,w
  6161  0757  1903               	btfsc	3,2
  6162  0758  2F5A               	goto	u157_21
  6163  0759  2F5B               	goto	u157_20
  6164  075A                     u157_21:
  6165  075A  2F68               	goto	i1l2105
  6166  075B                     u157_20:
  6167  075B                     i1l2103:
  6168  075B  3001               	movlw	1
  6169  075C  00F1               	movwf	??i1_writeGPIO
  6170  075D  0A75               	incf	i1writeGPIO@portNumber,w
  6171  075E  2F60               	goto	u158_24
  6172  075F                     u158_25:
  6173  075F  35F1               	lslf	??i1_writeGPIO,f
  6174  0760                     u158_24:
  6175  0760  0B89               	decfsz	9,f
  6176  0761  2F5F               	goto	u158_25
  6177  0762  0871               	movf	??i1_writeGPIO,w
  6178  0763  00F2               	movwf	??i1_writeGPIO+1
  6179  0764  0872               	movf	??i1_writeGPIO+1,w
  6180  0765  0022               	movlb	2	; select bank2
  6181  0766  048D               	iorwf	13,f	;volatile
  6182  0767  2F75               	goto	i1l320
  6183  0768                     i1l2105:
  6184  0768  3001               	movlw	1
  6185  0769  00F1               	movwf	??i1_writeGPIO
  6186  076A  0A75               	incf	i1writeGPIO@portNumber,w
  6187  076B  2F6D               	goto	u159_24
  6188  076C                     u159_25:
  6189  076C  35F1               	lslf	??i1_writeGPIO,f
  6190  076D                     u159_24:
  6191  076D  0B89               	decfsz	9,f
  6192  076E  2F6C               	goto	u159_25
  6193  076F  0871               	movf	??i1_writeGPIO,w
  6194  0770  3AFF               	xorlw	255
  6195  0771  00F2               	movwf	??i1_writeGPIO+1
  6196  0772  0872               	movf	??i1_writeGPIO+1,w
  6197  0773  0022               	movlb	2	; select bank2
  6198  0774  058D               	andwf	13,f	;volatile
  6199  0775                     i1l320:
  6200  0775  0008               	return
  6201  0776                     __end_ofi1_writeGPIO:
  6202                           
  6203                           	psect	text28
  6204  0BAD                     __ptext28:	
  6205 ;; *************** function _transToOverCurrentFault *****************
  6206 ;; Defined at:
  6207 ;;		line 53 in file "StateMachine.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6221 ;;      Params:         0       0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0
  6223 ;;      Temps:          1       0       0       0       0       0
  6224 ;;      Totals:         1       0       0       0       0       0
  6225 ;;Total ram usage:        1 bytes
  6226 ;; Hardware stack levels used: 1
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		_currentTripMonitor
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234  0BAD                     _transToOverCurrentFault:	
  6235                           ;psect for function _transToOverCurrentFault
  6236                           
  6237  0BAD                     i1l2297:	
  6238                           ;incstack = 0
  6239                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6240                           
  6241                           
  6242                           ;StateMachine.c: 54:     setDuty = 0;
  6243  0BAD  0020               	movlb	0	; select bank0
  6244  0BAE  01E3               	clrf	_setDuty
  6245  0BAF  01E4               	clrf	_setDuty+1
  6246                           
  6247                           ;StateMachine.c: 55:     setPeriod = 0;
  6248  0BB0  01EE               	clrf	_setPeriod
  6249  0BB1                     i1l2299:
  6250                           
  6251                           ;StateMachine.c: 56:     currentState = overCurrentFault;
  6252  0BB1  3004               	movlw	4
  6253  0BB2  00F0               	movwf	??_transToOverCurrentFault
  6254  0BB3  0870               	movf	??_transToOverCurrentFault,w
  6255  0BB4  00EC               	movwf	_currentState
  6256  0BB5                     i1l572:
  6257  0BB5  0008               	return
  6258  0BB6                     __end_of_transToOverCurrentFault:
  6259                           
  6260                           	psect	text29
  6261  07D1                     __ptext29:	
  6262 ;; *************** function _currentTripRead *****************
  6263 ;; Defined at:
  6264 ;;		line 31 in file "CurrentSensor.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      _Bool 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0, pclath, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6278 ;;      Params:         0       0       0       0       0       0
  6279 ;;      Locals:         1       0       0       0       0       0
  6280 ;;      Temps:          1       0       0       0       0       0
  6281 ;;      Totals:         2       0       0       0       0       0
  6282 ;;Total ram usage:        2 bytes
  6283 ;; Hardware stack levels used: 1
  6284 ;; Hardware stack levels required when called: 1
  6285 ;; This function calls:
  6286 ;;		i1_readGPIO
  6287 ;; This function is called by:
  6288 ;;		_currentTripMonitor
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292  07D1                     _currentTripRead:	
  6293                           ;psect for function _currentTripRead
  6294                           
  6295  07D1                     i1l2283:	
  6296                           ;incstack = 0
  6297                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6298                           
  6299                           
  6300                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6301  07D1  3001               	movlw	1
  6302  07D2  318D  2560  3187   	fcall	i1_readGPIO
  6303  07D5  3A01               	xorlw	1
  6304  07D6  1D03               	skipz
  6305  07D7  2FD9               	goto	u200_21
  6306  07D8  2FDB               	goto	u200_20
  6307  07D9                     u200_21:
  6308  07D9  3001               	movlw	1
  6309  07DA  2FDC               	goto	u201_20
  6310  07DB                     u200_20:
  6311  07DB  3000               	movlw	0
  6312  07DC                     u201_20:
  6313  07DC  00F9               	movwf	??_currentTripRead
  6314  07DD  0879               	movf	??_currentTripRead,w
  6315  07DE  0020               	movlb	0	; select bank0
  6316  07DF  00EB               	movwf	_tripIDS
  6317                           
  6318                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6319  07E0  3003               	movlw	3
  6320  07E1  318D  2560  3187   	fcall	i1_readGPIO
  6321  07E4  3A01               	xorlw	1
  6322  07E5  1D03               	skipz
  6323  07E6  2FE8               	goto	u202_21
  6324  07E7  2FEA               	goto	u202_20
  6325  07E8                     u202_21:
  6326  07E8  3001               	movlw	1
  6327  07E9  2FEB               	goto	u203_20
  6328  07EA                     u202_20:
  6329  07EA  3000               	movlw	0
  6330  07EB                     u203_20:
  6331  07EB  00F9               	movwf	??_currentTripRead
  6332  07EC  0879               	movf	??_currentTripRead,w
  6333  07ED  0020               	movlb	0	; select bank0
  6334  07EE  00EA               	movwf	_tripIL
  6335  07EF                     i1l2285:
  6336                           
  6337                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6338  07EF  01FA               	clrf	_currentTripRead$918
  6339  07F0  0AFA               	incf	_currentTripRead$918,f
  6340  07F1                     i1l2287:
  6341  07F1  086A               	movf	_tripIL,w
  6342  07F2  1D03               	btfss	3,2
  6343  07F3  2FF5               	goto	u204_21
  6344  07F4  2FF6               	goto	u204_20
  6345  07F5                     u204_21:
  6346  07F5  2FFC               	goto	i1l2293
  6347  07F6                     u204_20:
  6348  07F6                     i1l2289:
  6349  07F6  086B               	movf	_tripIDS,w
  6350  07F7  1D03               	btfss	3,2
  6351  07F8  2FFA               	goto	u205_21
  6352  07F9  2FFB               	goto	u205_20
  6353  07FA                     u205_21:
  6354  07FA  2FFC               	goto	i1l2293
  6355  07FB                     u205_20:
  6356  07FB                     i1l2291:
  6357  07FB  01FA               	clrf	_currentTripRead$918
  6358  07FC                     i1l2293:
  6359  07FC  087A               	movf	_currentTripRead$918,w
  6360  07FD                     i1l517:
  6361  07FD  0008               	return
  6362  07FE                     __end_of_currentTripRead:
  6363                           
  6364                           	psect	text30
  6365  0440                     __ptext30:	
  6366 ;; *************** function _controlRoutine *****************
  6367 ;; Defined at:
  6368 ;;		line 65 in file "Controller.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;  setDuty_unre    2   60[BANK0 ] short 
  6373 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6374 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6384 ;;      Params:         0       0       0       0       0       0
  6385 ;;      Locals:         0       6       0       0       0       0
  6386 ;;      Temps:          0       6       0       0       0       0
  6387 ;;      Totals:         0      12       0       0       0       0
  6388 ;;Total ram usage:       12 bytes
  6389 ;; Hardware stack levels used: 1
  6390 ;; Hardware stack levels required when called: 3
  6391 ;; This function calls:
  6392 ;;		___lldiv
  6393 ;;		___wmul
  6394 ;;		_runVoltageModeControl
  6395 ;; This function is called by:
  6396 ;;		_Tick490Hz
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400  0440                     _controlRoutine:	
  6401                           ;psect for function _controlRoutine
  6402                           
  6403  0440                     i1l2361:	
  6404                           ;incstack = 0
  6405                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6406                           
  6407                           
  6408                           ;Controller.c: 67:     if((currentState == voltageModeControl) || (currentState == curre
      +                          ntModeControl)){
  6409  0440  3002               	movlw	2
  6410  0441  0020               	movlb	0	; select bank0
  6411  0442  066C               	xorwf	_currentState,w
  6412  0443  1903               	btfsc	3,2
  6413  0444  2C46               	goto	u222_21
  6414  0445  2C47               	goto	u222_20
  6415  0446                     u222_21:
  6416  0446  2C4D               	goto	i1l2365
  6417  0447                     u222_20:
  6418  0447                     i1l2363:
  6419  0447  3003               	movlw	3
  6420  0448  066C               	xorwf	_currentState,w
  6421  0449  1D03               	btfss	3,2
  6422  044A  2C4C               	goto	u223_21
  6423  044B  2C4D               	goto	u223_20
  6424  044C                     u223_21:
  6425  044C  2D15               	goto	i1l454
  6426  044D                     u223_20:
  6427  044D                     i1l2365:
  6428                           
  6429                           ;Controller.c: 68:         int16_t setDuty_unreg = 0;
  6430  044D  01DC               	clrf	controlRoutine@setDuty_unreg
  6431  044E  01DD               	clrf	controlRoutine@setDuty_unreg+1
  6432  044F                     i1l2367:
  6433                           
  6434                           ;Controller.c: 71:         if(currentState == voltageModeControl){
  6435  044F  3002               	movlw	2
  6436  0450  066C               	xorwf	_currentState,w
  6437  0451  1D03               	btfss	3,2
  6438  0452  2C54               	goto	u224_21
  6439  0453  2C55               	goto	u224_20
  6440  0454                     u224_21:
  6441  0454  2C90               	goto	i1l2377
  6442  0455                     u224_20:
  6443  0455                     i1l2369:
  6444                           
  6445                           ;Controller.c: 73:             runVoltageModeControl();
  6446  0455  3180  20B4  3184   	fcall	_runVoltageModeControl
  6447  0458                     i1l2371:
  6448                           
  6449                           ;Controller.c: 74:             setPeriod = 79u;
  6450  0458  304F               	movlw	79
  6451  0459  0020               	movlb	0	; select bank0
  6452  045A  00D2               	movwf	??_controlRoutine
  6453  045B  0852               	movf	??_controlRoutine,w
  6454  045C  00EE               	movwf	_setPeriod
  6455  045D                     i1l2373:
  6456                           
  6457                           ;Controller.c: 76:             setDuty_unreg = (int16_t) (((uint32_t)(((uint16_t) 50u) *
      +                           setPeriod)) / 25) + voltageModeVariables.sumOutput;
  6458  045D  3016               	movlw	22
  6459  045E  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6460  045F  0086               	movwf	6
  6461  0460  0187               	clrf	7
  6462  0461  3000               	movlw	0
  6463  0462  00F9               	movwf	___lldiv@divisor+3
  6464  0463  3000               	movlw	0
  6465  0464  00F8               	movwf	___lldiv@divisor+2
  6466  0465  3000               	movlw	0
  6467  0466  00F7               	movwf	___lldiv@divisor+1
  6468  0467  3019               	movlw	25
  6469  0468  00F6               	movwf	___lldiv@divisor
  6470  0469  3032               	movlw	50
  6471  046A  00F2               	movwf	___wmul@multiplicand
  6472  046B  3000               	movlw	0
  6473  046C  00F3               	movwf	___wmul@multiplicand+1
  6474  046D  086E               	movf	_setPeriod,w
  6475  046E  00D2               	movwf	??_controlRoutine
  6476  046F  01D3               	clrf	??_controlRoutine+1
  6477  0470  0852               	movf	??_controlRoutine,w
  6478  0471  00F0               	movwf	___wmul@multiplier
  6479  0472  0853               	movf	??_controlRoutine+1,w
  6480  0473  00F1               	movwf	___wmul@multiplier+1
  6481  0474  318C  242C  3184   	fcall	___wmul
  6482  0477  0870               	movf	?___wmul,w
  6483  0478  0020               	movlb	0	; select bank0
  6484  0479  00D4               	movwf	??_controlRoutine+2
  6485  047A  0871               	movf	?___wmul+1,w
  6486  047B  00D5               	movwf	??_controlRoutine+3
  6487  047C  01D6               	clrf	??_controlRoutine+4
  6488  047D  01D7               	clrf	??_controlRoutine+5
  6489  047E  0857               	movf	??_controlRoutine+5,w
  6490  047F  00FD               	movwf	___lldiv@dividend+3
  6491  0480  0856               	movf	??_controlRoutine+4,w
  6492  0481  00FC               	movwf	___lldiv@dividend+2
  6493  0482  0855               	movf	??_controlRoutine+3,w
  6494  0483  00FB               	movwf	___lldiv@dividend+1
  6495  0484  0854               	movf	??_controlRoutine+2,w
  6496  0485  00FA               	movwf	___lldiv@dividend
  6497  0486  318E  26EF  3184   	fcall	___lldiv
  6498  0489  3F40               	moviw [0]fsr1
  6499  048A  0776               	addwf	?___lldiv,w
  6500  048B  0020               	movlb	0	; select bank0
  6501  048C  00DC               	movwf	controlRoutine@setDuty_unreg
  6502  048D  3F41               	moviw [1]fsr1
  6503  048E  3D77               	addwfc	?___lldiv+1,w
  6504  048F  00DD               	movwf	controlRoutine@setDuty_unreg+1
  6505  0490                     i1l2377:
  6506                           
  6507                           ;Controller.c: 88:         uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * 
      +                          setPeriod)) / 25);
  6508  0490  3000               	movlw	0
  6509  0491  00F9               	movwf	___lldiv@divisor+3
  6510  0492  3000               	movlw	0
  6511  0493  00F8               	movwf	___lldiv@divisor+2
  6512  0494  3000               	movlw	0
  6513  0495  00F7               	movwf	___lldiv@divisor+1
  6514  0496  3019               	movlw	25
  6515  0497  00F6               	movwf	___lldiv@divisor
  6516  0498  305A               	movlw	90
  6517  0499  00F2               	movwf	___wmul@multiplicand
  6518  049A  3000               	movlw	0
  6519  049B  00F3               	movwf	___wmul@multiplicand+1
  6520  049C  086E               	movf	_setPeriod,w
  6521  049D  00D2               	movwf	??_controlRoutine
  6522  049E  01D3               	clrf	??_controlRoutine+1
  6523  049F  0852               	movf	??_controlRoutine,w
  6524  04A0  00F0               	movwf	___wmul@multiplier
  6525  04A1  0853               	movf	??_controlRoutine+1,w
  6526  04A2  00F1               	movwf	___wmul@multiplier+1
  6527  04A3  318C  242C  3184   	fcall	___wmul
  6528  04A6  0870               	movf	?___wmul,w
  6529  04A7  0020               	movlb	0	; select bank0
  6530  04A8  00D4               	movwf	??_controlRoutine+2
  6531  04A9  0871               	movf	?___wmul+1,w
  6532  04AA  00D5               	movwf	??_controlRoutine+3
  6533  04AB  01D6               	clrf	??_controlRoutine+4
  6534  04AC  01D7               	clrf	??_controlRoutine+5
  6535  04AD  0857               	movf	??_controlRoutine+5,w
  6536  04AE  00FD               	movwf	___lldiv@dividend+3
  6537  04AF  0856               	movf	??_controlRoutine+4,w
  6538  04B0  00FC               	movwf	___lldiv@dividend+2
  6539  04B1  0855               	movf	??_controlRoutine+3,w
  6540  04B2  00FB               	movwf	___lldiv@dividend+1
  6541  04B3  0854               	movf	??_controlRoutine+2,w
  6542  04B4  00FA               	movwf	___lldiv@dividend
  6543  04B5  318E  26EF  3184   	fcall	___lldiv
  6544  04B8  0877               	movf	?___lldiv+1,w
  6545  04B9  0020               	movlb	0	; select bank0
  6546  04BA  00D9               	movwf	controlRoutine@maxDuty+1
  6547  04BB  0876               	movf	?___lldiv,w
  6548  04BC  00D8               	movwf	controlRoutine@maxDuty
  6549                           
  6550                           ;Controller.c: 89:         uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * 
      +                          setPeriod)) / 25);
  6551  04BD  3000               	movlw	0
  6552  04BE  00F9               	movwf	___lldiv@divisor+3
  6553  04BF  3000               	movlw	0
  6554  04C0  00F8               	movwf	___lldiv@divisor+2
  6555  04C1  3000               	movlw	0
  6556  04C2  00F7               	movwf	___lldiv@divisor+1
  6557  04C3  3019               	movlw	25
  6558  04C4  00F6               	movwf	___lldiv@divisor
  6559  04C5  300A               	movlw	10
  6560  04C6  00F2               	movwf	___wmul@multiplicand
  6561  04C7  3000               	movlw	0
  6562  04C8  00F3               	movwf	___wmul@multiplicand+1
  6563  04C9  086E               	movf	_setPeriod,w
  6564  04CA  00D2               	movwf	??_controlRoutine
  6565  04CB  01D3               	clrf	??_controlRoutine+1
  6566  04CC  0852               	movf	??_controlRoutine,w
  6567  04CD  00F0               	movwf	___wmul@multiplier
  6568  04CE  0853               	movf	??_controlRoutine+1,w
  6569  04CF  00F1               	movwf	___wmul@multiplier+1
  6570  04D0  318C  242C  3184   	fcall	___wmul
  6571  04D3  0870               	movf	?___wmul,w
  6572  04D4  0020               	movlb	0	; select bank0
  6573  04D5  00D4               	movwf	??_controlRoutine+2
  6574  04D6  0871               	movf	?___wmul+1,w
  6575  04D7  00D5               	movwf	??_controlRoutine+3
  6576  04D8  01D6               	clrf	??_controlRoutine+4
  6577  04D9  01D7               	clrf	??_controlRoutine+5
  6578  04DA  0857               	movf	??_controlRoutine+5,w
  6579  04DB  00FD               	movwf	___lldiv@dividend+3
  6580  04DC  0856               	movf	??_controlRoutine+4,w
  6581  04DD  00FC               	movwf	___lldiv@dividend+2
  6582  04DE  0855               	movf	??_controlRoutine+3,w
  6583  04DF  00FB               	movwf	___lldiv@dividend+1
  6584  04E0  0854               	movf	??_controlRoutine+2,w
  6585  04E1  00FA               	movwf	___lldiv@dividend
  6586  04E2  318E  26EF  3184   	fcall	___lldiv
  6587  04E5  0877               	movf	?___lldiv+1,w
  6588  04E6  0020               	movlb	0	; select bank0
  6589  04E7  00DB               	movwf	controlRoutine@minDuty+1
  6590  04E8  0876               	movf	?___lldiv,w
  6591  04E9  00DA               	movwf	controlRoutine@minDuty
  6592  04EA                     i1l2379:
  6593                           
  6594                           ;Controller.c: 91:         setDuty = setDuty_unreg;
  6595  04EA  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6596  04EB  00E4               	movwf	_setDuty+1
  6597  04EC  085C               	movf	controlRoutine@setDuty_unreg,w
  6598  04ED  00E3               	movwf	_setDuty
  6599  04EE                     i1l2381:
  6600                           
  6601                           ;Controller.c: 93:         if(setDuty_unreg < 0) setDuty = minDuty;
  6602  04EE  1FDD               	btfss	controlRoutine@setDuty_unreg+1,7
  6603  04EF  2CF1               	goto	u225_21
  6604  04F0  2CF2               	goto	u225_20
  6605  04F1                     u225_21:
  6606  04F1  2CF7               	goto	i1l448
  6607  04F2                     u225_20:
  6608  04F2                     i1l2383:
  6609  04F2  085B               	movf	controlRoutine@minDuty+1,w
  6610  04F3  00E4               	movwf	_setDuty+1
  6611  04F4  085A               	movf	controlRoutine@minDuty,w
  6612  04F5  00E3               	movwf	_setDuty
  6613  04F6  2D15               	goto	i1l454
  6614  04F7                     i1l448:	
  6615                           ;Controller.c: 94:         else if(setDuty_unreg >= 0){
  6616                           
  6617  04F7  1BDD               	btfsc	controlRoutine@setDuty_unreg+1,7
  6618  04F8  2CFA               	goto	u226_21
  6619  04F9  2CFB               	goto	u226_20
  6620  04FA                     u226_21:
  6621  04FA  2D15               	goto	i1l454
  6622  04FB                     u226_20:
  6623  04FB                     i1l2385:
  6624                           
  6625                           ;Controller.c: 95:             if(setDuty_unreg < minDuty) setDuty = minDuty;
  6626  04FB  085B               	movf	controlRoutine@minDuty+1,w
  6627  04FC  025D               	subwf	controlRoutine@setDuty_unreg+1,w
  6628  04FD  1D03               	skipz
  6629  04FE  2D01               	goto	u227_25
  6630  04FF  085A               	movf	controlRoutine@minDuty,w
  6631  0500  025C               	subwf	controlRoutine@setDuty_unreg,w
  6632  0501                     u227_25:
  6633  0501  1803               	skipnc
  6634  0502  2D04               	goto	u227_21
  6635  0503  2D05               	goto	u227_20
  6636  0504                     u227_21:
  6637  0504  2D06               	goto	i1l2389
  6638  0505                     u227_20:
  6639  0505  2CF2               	goto	i1l2383
  6640  0506                     i1l2389:
  6641  0506  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6642  0507  0259               	subwf	controlRoutine@maxDuty+1,w
  6643  0508  1D03               	skipz
  6644  0509  2D0C               	goto	u228_25
  6645  050A  085C               	movf	controlRoutine@setDuty_unreg,w
  6646  050B  0258               	subwf	controlRoutine@maxDuty,w
  6647  050C                     u228_25:
  6648  050C  1803               	skipnc
  6649  050D  2D0F               	goto	u228_21
  6650  050E  2D10               	goto	u228_20
  6651  050F                     u228_21:
  6652  050F  2D15               	goto	i1l449
  6653  0510                     u228_20:
  6654  0510                     i1l2391:
  6655  0510  0859               	movf	controlRoutine@maxDuty+1,w
  6656  0511  00E4               	movwf	_setDuty+1
  6657  0512  0858               	movf	controlRoutine@maxDuty,w
  6658  0513  00E3               	movwf	_setDuty
  6659  0514  2D15               	goto	i1l454
  6660  0515                     i1l449:
  6661  0515                     i1l454:
  6662  0515  0008               	return
  6663  0516                     __end_of_controlRoutine:
  6664                           
  6665                           	psect	text31
  6666  00B4                     __ptext31:	
  6667 ;; *************** function _runVoltageModeControl *****************
  6668 ;; Defined at:
  6669 ;;		line 106 in file "Controller.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  propMult        8   40[BANK0 ] long long 
  6674 ;;  integralMult    8   32[BANK0 ] long long 
  6675 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6685 ;;      Params:         0       0       0       0       0       0
  6686 ;;      Locals:         0      18       0       0       0       0
  6687 ;;      Temps:          0      16       0       0       0       0
  6688 ;;      Totals:         0      34       0       0       0       0
  6689 ;;Total ram usage:       34 bytes
  6690 ;; Hardware stack levels used: 1
  6691 ;; Hardware stack levels required when called: 2
  6692 ;; This function calls:
  6693 ;;		___omul
  6694 ;;		_abs
  6695 ;;		_convertRawToMilliVolts
  6696 ;;		i1_readGPIO
  6697 ;; This function is called by:
  6698 ;;		_controlRoutine
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702  00B4                     _runVoltageModeControl:	
  6703                           ;psect for function _runVoltageModeControl
  6704                           
  6705  00B4                     i1l2247:	
  6706                           ;incstack = 0
  6707                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6708                           
  6709                           
  6710                           ;Controller.c: 111:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6711  00B4  0020               	movlb	0	; select bank0
  6712  00B5  0860               	movf	_filteredVout+1,w
  6713  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6714  00B7  085F               	movf	_filteredVout,w
  6715  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6716  00B9  318D  2525  3180   	fcall	_convertRawToMilliVolts
  6717  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6718  00BD  0020               	movlb	0	; select bank0
  6719  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6720  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6721  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6722                           
  6723                           ;Controller.c: 114:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6724  00C1  3008               	movlw	8
  6725  00C2  318D  2560  3180   	fcall	i1_readGPIO
  6726  00C5  3A00               	xorlw	0
  6727  00C6  1903               	skipnz
  6728  00C7  28C9               	goto	u193_21
  6729  00C8  28CA               	goto	u193_20
  6730  00C9                     u193_21:
  6731  00C9  28D9               	goto	i1l2251
  6732  00CA                     u193_20:
  6733  00CA                     i1l2249:
  6734  00CA  3080               	movlw	128
  6735  00CB  0020               	movlb	0	; select bank0
  6736  00CC  00B0               	movwf	??_runVoltageModeControl
  6737  00CD  303E               	movlw	62
  6738  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6739  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6740  00D0  0230               	subwf	??_runVoltageModeControl,w
  6741  00D1  0021               	movlb	1	; select bank1
  6742  00D2  00B6               	movwf	_voltageModeVariables^(0+128)
  6743  00D3  0020               	movlb	0	; select bank0
  6744  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6745  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6746  00D6  0021               	movlb	1	; select bank1
  6747  00D7  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6748  00D8  28E7               	goto	i1l2253
  6749  00D9                     i1l2251:
  6750  00D9  30E0               	movlw	224
  6751  00DA  0020               	movlb	0	; select bank0
  6752  00DB  00B0               	movwf	??_runVoltageModeControl
  6753  00DC  302E               	movlw	46
  6754  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6755  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6756  00DF  0230               	subwf	??_runVoltageModeControl,w
  6757  00E0  0021               	movlb	1	; select bank1
  6758  00E1  00B6               	movwf	_voltageModeVariables^(0+128)
  6759  00E2  0020               	movlb	0	; select bank0
  6760  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6761  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6762  00E5  0021               	movlb	1	; select bank1
  6763  00E6  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6764  00E7                     i1l2253:
  6765                           
  6766                           ;Controller.c: 118:    int64_t integralMult = ((int64_t) (36u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6767  00E7  0836               	movf	_voltageModeVariables^(0+128),w
  6768  00E8  0020               	movlb	0	; select bank0
  6769  00E9  00A0               	movwf	___omul@multiplier
  6770  00EA  0021               	movlb	1	; select bank1
  6771  00EB  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  6772  00EC  0020               	movlb	0	; select bank0
  6773  00ED  00A1               	movwf	___omul@multiplier+1
  6774  00EE  0D89               	rlf	9,f
  6775  00EF  3B89               	subwfb	9,f
  6776  00F0  0989               	comf	9,f
  6777  00F1  00A2               	movwf	___omul@multiplier+2
  6778  00F2  00A3               	movwf	___omul@multiplier+3
  6779  00F3  00A4               	movwf	___omul@multiplier+4
  6780  00F4  00A5               	movwf	___omul@multiplier+5
  6781  00F5  00A6               	movwf	___omul@multiplier+6
  6782  00F6  00A7               	movwf	___omul@multiplier+7
  6783  00F7  3000               	movlw	0
  6784  00F8  00AF               	movwf	___omul@multiplicand+7
  6785  00F9  3000               	movlw	0
  6786  00FA  00AE               	movwf	___omul@multiplicand+6
  6787  00FB  3000               	movlw	0
  6788  00FC  00AD               	movwf	___omul@multiplicand+5
  6789  00FD  3000               	movlw	0
  6790  00FE  00AC               	movwf	___omul@multiplicand+4
  6791  00FF  3000               	movlw	0
  6792  0100  00AB               	movwf	___omul@multiplicand+3
  6793  0101  3000               	movlw	0
  6794  0102  00AA               	movwf	___omul@multiplicand+2
  6795  0103  3025               	movlw	37
  6796  0104  00A9               	movwf	___omul@multiplicand+1
  6797  0105  308C               	movlw	140
  6798  0106  00A8               	movwf	___omul@multiplicand
  6799  0107  318D  25F1  3180   	fcall	___omul
  6800  010A  0020               	movlb	0	; select bank0
  6801  010B  0820               	movf	?___omul,w
  6802  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6803  010D  0821               	movf	?___omul+1,w
  6804  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6805  010F  0822               	movf	?___omul+2,w
  6806  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6807  0111  0823               	movf	?___omul+3,w
  6808  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6809  0113  0824               	movf	?___omul+4,w
  6810  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6811  0115  0825               	movf	?___omul+5,w
  6812  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6813  0117  0826               	movf	?___omul+6,w
  6814  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6815  0119  0827               	movf	?___omul+7,w
  6816  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6817  011B                     i1l2255:
  6818                           
  6819                           ;Controller.c: 120:    voltageModeVariables.integral = integralMult;
  6820  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6821  011C  0021               	movlb	1	; select bank1
  6822  011D  00BB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6823  011E  0020               	movlb	0	; select bank0
  6824  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6825  0120  0021               	movlb	1	; select bank1
  6826  0121  00BA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6827  0122  0020               	movlb	0	; select bank0
  6828  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6829  0124  0021               	movlb	1	; select bank1
  6830  0125  00B9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6831  0126  0020               	movlb	0	; select bank0
  6832  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6833  0128  0021               	movlb	1	; select bank1
  6834  0129  00B8               	movwf	(_voltageModeVariables^(0+128)+2)
  6835  012A                     i1l2257:
  6836                           
  6837                           ;Controller.c: 121:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6838  012A  300E               	movlw	14
  6839  012B  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6840  012C  0086               	movwf	6
  6841  012D  0187               	clrf	7
  6842  012E  3F40               	moviw [0]fsr1
  6843  012F  0020               	movlb	0	; select bank0
  6844  0130  00B0               	movwf	??_runVoltageModeControl
  6845  0131  3F41               	moviw [1]fsr1
  6846  0132  00B1               	movwf	??_runVoltageModeControl+1
  6847  0133  3F42               	moviw [2]fsr1
  6848  0134  00B2               	movwf	??_runVoltageModeControl+2
  6849  0135  3F43               	moviw [3]fsr1
  6850  0136  00B3               	movwf	??_runVoltageModeControl+3
  6851  0137  3F44               	moviw [4]fsr1
  6852  0138  00B4               	movwf	??_runVoltageModeControl+4
  6853  0139  3F45               	moviw [5]fsr1
  6854  013A  00B5               	movwf	??_runVoltageModeControl+5
  6855  013B  3F46               	moviw [6]fsr1
  6856  013C  00B6               	movwf	??_runVoltageModeControl+6
  6857  013D  3F47               	moviw [7]fsr1
  6858  013E  00B7               	movwf	??_runVoltageModeControl+7
  6859  013F  0021               	movlb	1	; select bank1
  6860  0140  0838               	movf	(_voltageModeVariables^(0+128)+2),w
  6861  0141  0020               	movlb	0	; select bank0
  6862  0142  00B8               	movwf	??_runVoltageModeControl+8
  6863  0143  0021               	movlb	1	; select bank1
  6864  0144  0839               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6865  0145  0020               	movlb	0	; select bank0
  6866  0146  00B9               	movwf	??_runVoltageModeControl+9
  6867  0147  0021               	movlb	1	; select bank1
  6868  0148  083A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6869  0149  0020               	movlb	0	; select bank0
  6870  014A  00BA               	movwf	??_runVoltageModeControl+10
  6871  014B  0021               	movlb	1	; select bank1
  6872  014C  083B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6873  014D  0020               	movlb	0	; select bank0
  6874  014E  00BB               	movwf	??_runVoltageModeControl+11
  6875  014F  3000               	movlw	0
  6876  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6877  0151  30FF               	movlw	255
  6878  0152  00BC               	movwf	??_runVoltageModeControl+12
  6879  0153  00BD               	movwf	??_runVoltageModeControl+13
  6880  0154  00BE               	movwf	??_runVoltageModeControl+14
  6881  0155  00BF               	movwf	??_runVoltageModeControl+15
  6882  0156  0838               	movf	??_runVoltageModeControl+8,w
  6883  0157  07B0               	addwf	??_runVoltageModeControl,f
  6884  0158  0839               	movf	??_runVoltageModeControl+9,w
  6885  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6886  015A  083A               	movf	??_runVoltageModeControl+10,w
  6887  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6888  015C  083B               	movf	??_runVoltageModeControl+11,w
  6889  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6890  015E  083C               	movf	??_runVoltageModeControl+12,w
  6891  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6892  0160  083D               	movf	??_runVoltageModeControl+13,w
  6893  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6894  0162  083E               	movf	??_runVoltageModeControl+14,w
  6895  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6896  0164  083F               	movf	??_runVoltageModeControl+15,w
  6897  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6898  0166  0837               	movf	??_runVoltageModeControl+7,w
  6899  0167  0021               	movlb	1	; select bank1
  6900  0168  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6901  0169  0020               	movlb	0	; select bank0
  6902  016A  0836               	movf	??_runVoltageModeControl+6,w
  6903  016B  0021               	movlb	1	; select bank1
  6904  016C  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6905  016D  0020               	movlb	0	; select bank0
  6906  016E  0835               	movf	??_runVoltageModeControl+5,w
  6907  016F  0021               	movlb	1	; select bank1
  6908  0170  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6909  0171  0020               	movlb	0	; select bank0
  6910  0172  0834               	movf	??_runVoltageModeControl+4,w
  6911  0173  0021               	movlb	1	; select bank1
  6912  0174  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6913  0175  0020               	movlb	0	; select bank0
  6914  0176  0833               	movf	??_runVoltageModeControl+3,w
  6915  0177  0021               	movlb	1	; select bank1
  6916  0178  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6917  0179  0020               	movlb	0	; select bank0
  6918  017A  0832               	movf	??_runVoltageModeControl+2,w
  6919  017B  0021               	movlb	1	; select bank1
  6920  017C  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6921  017D  0020               	movlb	0	; select bank0
  6922  017E  0831               	movf	??_runVoltageModeControl+1,w
  6923  017F  0021               	movlb	1	; select bank1
  6924  0180  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6925  0181  0020               	movlb	0	; select bank0
  6926  0182  0830               	movf	??_runVoltageModeControl,w
  6927  0183  0021               	movlb	1	; select bank1
  6928  0184  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6929  0185                     i1l2259:
  6930                           
  6931                           ;Controller.c: 124:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6932  0185  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6933  0186  3A80               	xorlw	128
  6934  0187  0020               	movlb	0	; select bank0
  6935  0188  00B0               	movwf	??_runVoltageModeControl
  6936  0189  0021               	movlb	1	; select bank1
  6937  018A  084B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6938  018B  3A80               	xorlw	128
  6939  018C  0020               	movlb	0	; select bank0
  6940  018D  0230               	subwf	??_runVoltageModeControl,w
  6941  018E  0021               	movlb	1	; select bank1
  6942  018F  1D03               	skipz
  6943  0190  29AB               	goto	u194_23
  6944  0191  084A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6945  0192  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6946  0193  1D03               	skipz
  6947  0194  29AB               	goto	u194_23
  6948  0195  0849               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6949  0196  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6950  0197  1D03               	skipz
  6951  0198  29AB               	goto	u194_23
  6952  0199  0848               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6953  019A  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6954  019B  1D03               	skipz
  6955  019C  29AB               	goto	u194_23
  6956  019D  0847               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6957  019E  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6958  019F  1D03               	skipz
  6959  01A0  29AB               	goto	u194_23
  6960  01A1  0846               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6961  01A2  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6962  01A3  1D03               	skipz
  6963  01A4  29AB               	goto	u194_23
  6964  01A5  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6965  01A6  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6966  01A7  1D03               	skipz
  6967  01A8  29AB               	goto	u194_23
  6968  01A9  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6969  01AA  0220               	subwf	_integratorScaledLimit^(0+128),w
  6970  01AB                     u194_23:
  6971  01AB  1803               	skipnc
  6972  01AC  29AE               	goto	u194_21
  6973  01AD  29AF               	goto	u194_20
  6974  01AE                     u194_21:
  6975  01AE  29BF               	goto	i1l2263
  6976  01AF                     u194_20:
  6977  01AF                     i1l2261:
  6978                           
  6979                           ;Controller.c: 125:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6980  01AF  0820               	movf	_integratorScaledLimit^(0+128),w
  6981  01B0  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6982  01B1  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6983  01B2  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6984  01B3  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6985  01B4  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6986  01B5  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6987  01B6  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6988  01B7  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6989  01B8  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6990  01B9  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6991  01BA  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6992  01BB  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6993  01BC  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6994  01BD  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6995  01BE  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6996  01BF                     i1l2263:
  6997                           
  6998                           ;Controller.c: 128:    if(voltageModeVariables.integralOutputScaled < 0){
  6999  01BF  300E               	movlw	14
  7000  01C0  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7001  01C1  0086               	movwf	6
  7002  01C2  0187               	clrf	7
  7003  01C3  3F47               	moviw [7]fsr1
  7004  01C4  0020               	movlb	0	; select bank0
  7005  01C5  00B0               	movwf	??_runVoltageModeControl
  7006  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  7007  01C7  29C9               	goto	u195_21
  7008  01C8  29CA               	goto	u195_20
  7009  01C9                     u195_21:
  7010  01C9  2A67               	goto	i1l2269
  7011  01CA                     u195_20:
  7012  01CA                     i1l2265:
  7013                           
  7014                           ;Controller.c: 129:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  7015  01CA  0021               	movlb	1	; select bank1
  7016  01CB  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  7017  01CC  00F1               	movwf	abs@a+1
  7018  01CD  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  7019  01CE  00F0               	movwf	abs@a
  7020  01CF  318B  23D9  3180   	fcall	_abs
  7021  01D2  0870               	movf	?_abs,w
  7022  01D3  0020               	movlb	0	; select bank0
  7023  01D4  00B0               	movwf	??_runVoltageModeControl
  7024  01D5  0871               	movf	?_abs+1,w
  7025  01D6  00B1               	movwf	??_runVoltageModeControl+1
  7026  01D7  3000               	movlw	0
  7027  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7028  01D9  30FF               	movlw	255
  7029  01DA  00B2               	movwf	??_runVoltageModeControl+2
  7030  01DB  00B3               	movwf	??_runVoltageModeControl+3
  7031  01DC  00B4               	movwf	??_runVoltageModeControl+4
  7032  01DD  00B5               	movwf	??_runVoltageModeControl+5
  7033  01DE  00B6               	movwf	??_runVoltageModeControl+6
  7034  01DF  00B7               	movwf	??_runVoltageModeControl+7
  7035  01E0  0021               	movlb	1	; select bank1
  7036  01E1  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7037  01E2  3A80               	xorlw	128
  7038  01E3  0020               	movlb	0	; select bank0
  7039  01E4  00B8               	movwf	??_runVoltageModeControl+8
  7040  01E5  0837               	movf	??_runVoltageModeControl+7,w
  7041  01E6  3A80               	xorlw	128
  7042  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  7043  01E8  0021               	movlb	1	; select bank1
  7044  01E9  1D03               	skipz
  7045  01EA  2A13               	goto	u196_23
  7046  01EB  0020               	movlb	0	; select bank0
  7047  01EC  0836               	movf	??_runVoltageModeControl+6,w
  7048  01ED  0021               	movlb	1	; select bank1
  7049  01EE  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  7050  01EF  1D03               	skipz
  7051  01F0  2A13               	goto	u196_23
  7052  01F1  0020               	movlb	0	; select bank0
  7053  01F2  0835               	movf	??_runVoltageModeControl+5,w
  7054  01F3  0021               	movlb	1	; select bank1
  7055  01F4  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  7056  01F5  1D03               	skipz
  7057  01F6  2A13               	goto	u196_23
  7058  01F7  0020               	movlb	0	; select bank0
  7059  01F8  0834               	movf	??_runVoltageModeControl+4,w
  7060  01F9  0021               	movlb	1	; select bank1
  7061  01FA  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  7062  01FB  1D03               	skipz
  7063  01FC  2A13               	goto	u196_23
  7064  01FD  0020               	movlb	0	; select bank0
  7065  01FE  0833               	movf	??_runVoltageModeControl+3,w
  7066  01FF  0021               	movlb	1	; select bank1
  7067  0200  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  7068  0201  1D03               	skipz
  7069  0202  2A13               	goto	u196_23
  7070  0203  0020               	movlb	0	; select bank0
  7071  0204  0832               	movf	??_runVoltageModeControl+2,w
  7072  0205  0021               	movlb	1	; select bank1
  7073  0206  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  7074  0207  1D03               	skipz
  7075  0208  2A13               	goto	u196_23
  7076  0209  0020               	movlb	0	; select bank0
  7077  020A  0831               	movf	??_runVoltageModeControl+1,w
  7078  020B  0021               	movlb	1	; select bank1
  7079  020C  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  7080  020D  1D03               	skipz
  7081  020E  2A13               	goto	u196_23
  7082  020F  0020               	movlb	0	; select bank0
  7083  0210  0830               	movf	??_runVoltageModeControl,w
  7084  0211  0021               	movlb	1	; select bank1
  7085  0212  0220               	subwf	_integratorScaledLimit^(0+128),w
  7086  0213                     u196_23:
  7087  0213  1803               	skipnc
  7088  0214  2A16               	goto	u196_21
  7089  0215  2A17               	goto	u196_20
  7090  0216                     u196_21:
  7091  0216  2A67               	goto	i1l2269
  7092  0217                     u196_20:
  7093  0217                     i1l2267:
  7094                           
  7095                           ;Controller.c: 130:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  7096  0217  3000               	movlw	0
  7097  0218  0020               	movlb	0	; select bank0
  7098  0219  00B0               	movwf	??_runVoltageModeControl
  7099  021A  3000               	movlw	0
  7100  021B  00B1               	movwf	??_runVoltageModeControl+1
  7101  021C  3000               	movlw	0
  7102  021D  00B2               	movwf	??_runVoltageModeControl+2
  7103  021E  3000               	movlw	0
  7104  021F  00B3               	movwf	??_runVoltageModeControl+3
  7105  0220  3000               	movlw	0
  7106  0221  00B4               	movwf	??_runVoltageModeControl+4
  7107  0222  3000               	movlw	0
  7108  0223  00B5               	movwf	??_runVoltageModeControl+5
  7109  0224  3000               	movlw	0
  7110  0225  00B6               	movwf	??_runVoltageModeControl+6
  7111  0226  3000               	movlw	0
  7112  0227  00B7               	movwf	??_runVoltageModeControl+7
  7113  0228  0021               	movlb	1	; select bank1
  7114  0229  0820               	movf	_integratorScaledLimit^(0+128),w
  7115  022A  0020               	movlb	0	; select bank0
  7116  022B  02B0               	subwf	??_runVoltageModeControl,f
  7117  022C  0021               	movlb	1	; select bank1
  7118  022D  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  7119  022E  0020               	movlb	0	; select bank0
  7120  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  7121  0230  0021               	movlb	1	; select bank1
  7122  0231  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  7123  0232  0020               	movlb	0	; select bank0
  7124  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  7125  0234  0021               	movlb	1	; select bank1
  7126  0235  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  7127  0236  0020               	movlb	0	; select bank0
  7128  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7129  0238  0021               	movlb	1	; select bank1
  7130  0239  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7131  023A  0020               	movlb	0	; select bank0
  7132  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7133  023C  0021               	movlb	1	; select bank1
  7134  023D  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7135  023E  0020               	movlb	0	; select bank0
  7136  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7137  0240  0021               	movlb	1	; select bank1
  7138  0241  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7139  0242  0020               	movlb	0	; select bank0
  7140  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7141  0244  0021               	movlb	1	; select bank1
  7142  0245  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7143  0246  0020               	movlb	0	; select bank0
  7144  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7145  0248  0837               	movf	??_runVoltageModeControl+7,w
  7146  0249  0021               	movlb	1	; select bank1
  7147  024A  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7148  024B  0020               	movlb	0	; select bank0
  7149  024C  0836               	movf	??_runVoltageModeControl+6,w
  7150  024D  0021               	movlb	1	; select bank1
  7151  024E  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7152  024F  0020               	movlb	0	; select bank0
  7153  0250  0835               	movf	??_runVoltageModeControl+5,w
  7154  0251  0021               	movlb	1	; select bank1
  7155  0252  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7156  0253  0020               	movlb	0	; select bank0
  7157  0254  0834               	movf	??_runVoltageModeControl+4,w
  7158  0255  0021               	movlb	1	; select bank1
  7159  0256  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7160  0257  0020               	movlb	0	; select bank0
  7161  0258  0833               	movf	??_runVoltageModeControl+3,w
  7162  0259  0021               	movlb	1	; select bank1
  7163  025A  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7164  025B  0020               	movlb	0	; select bank0
  7165  025C  0832               	movf	??_runVoltageModeControl+2,w
  7166  025D  0021               	movlb	1	; select bank1
  7167  025E  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7168  025F  0020               	movlb	0	; select bank0
  7169  0260  0831               	movf	??_runVoltageModeControl+1,w
  7170  0261  0021               	movlb	1	; select bank1
  7171  0262  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7172  0263  0020               	movlb	0	; select bank0
  7173  0264  0830               	movf	??_runVoltageModeControl,w
  7174  0265  0021               	movlb	1	; select bank1
  7175  0266  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7176  0267                     i1l2269:
  7177                           
  7178                           ;Controller.c: 135:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 7u);
  7179  0267  300E               	movlw	14
  7180  0268  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7181  0269  0086               	movwf	6
  7182  026A  0187               	clrf	7
  7183  026B  3F40               	moviw [0]fsr1
  7184  026C  0020               	movlb	0	; select bank0
  7185  026D  00B0               	movwf	??_runVoltageModeControl
  7186  026E  3F41               	moviw [1]fsr1
  7187  026F  00B1               	movwf	??_runVoltageModeControl+1
  7188  0270  3F42               	moviw [2]fsr1
  7189  0271  00B2               	movwf	??_runVoltageModeControl+2
  7190  0272  3F43               	moviw [3]fsr1
  7191  0273  00B3               	movwf	??_runVoltageModeControl+3
  7192  0274  3F44               	moviw [4]fsr1
  7193  0275  00B4               	movwf	??_runVoltageModeControl+4
  7194  0276  3F45               	moviw [5]fsr1
  7195  0277  00B5               	movwf	??_runVoltageModeControl+5
  7196  0278  3F46               	moviw [6]fsr1
  7197  0279  00B6               	movwf	??_runVoltageModeControl+6
  7198  027A  3F47               	moviw [7]fsr1
  7199  027B  00B7               	movwf	??_runVoltageModeControl+7
  7200  027C  3017               	movlw	23
  7201  027D  00B8               	movwf	??_runVoltageModeControl+8
  7202  027E                     u197_25:
  7203  027E  0020               	movlb	0	; select bank0
  7204  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7205  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7206  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7207  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7208  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7209  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7210  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7211  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7212  0287                     u197_20:
  7213  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7214  0288  2A7E               	goto	u197_25
  7215  0289  0020               	movlb	0	; select bank0
  7216  028A  0833               	movf	??_runVoltageModeControl+3,w
  7217  028B  0021               	movlb	1	; select bank1
  7218  028C  00C3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7219  028D  0020               	movlb	0	; select bank0
  7220  028E  0832               	movf	??_runVoltageModeControl+2,w
  7221  028F  0021               	movlb	1	; select bank1
  7222  0290  00C2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7223  0291  0020               	movlb	0	; select bank0
  7224  0292  0831               	movf	??_runVoltageModeControl+1,w
  7225  0293  0021               	movlb	1	; select bank1
  7226  0294  00C1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7227  0295  0020               	movlb	0	; select bank0
  7228  0296  0830               	movf	??_runVoltageModeControl,w
  7229  0297  0021               	movlb	1	; select bank1
  7230  0298  00C0               	movwf	(_voltageModeVariables^(0+128)+10)
  7231  0299                     i1l2271:
  7232                           
  7233                           ;Controller.c: 138:    int64_t propMult = (int32_t) (2u * ((int32_t) voltageModeVariable
      +                          s.error));
  7234  0299  0836               	movf	_voltageModeVariables^(0+128),w
  7235  029A  0020               	movlb	0	; select bank0
  7236  029B  00B0               	movwf	??_runVoltageModeControl
  7237  029C  0021               	movlb	1	; select bank1
  7238  029D  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7239  029E  0020               	movlb	0	; select bank0
  7240  029F  00B1               	movwf	??_runVoltageModeControl+1
  7241  02A0  3000               	movlw	0
  7242  02A1  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7243  02A2  30FF               	movlw	255
  7244  02A3  00B2               	movwf	??_runVoltageModeControl+2
  7245  02A4  00B3               	movwf	??_runVoltageModeControl+3
  7246  02A5  3001               	movlw	1
  7247  02A6                     u198_25:
  7248  02A6  35B0               	lslf	??_runVoltageModeControl,f
  7249  02A7  0DB1               	rlf	??_runVoltageModeControl+1,f
  7250  02A8  0DB2               	rlf	??_runVoltageModeControl+2,f
  7251  02A9  0DB3               	rlf	??_runVoltageModeControl+3,f
  7252  02AA                     u198_20:
  7253  02AA  0B89               	decfsz	9,f
  7254  02AB  2AA6               	goto	u198_25
  7255  02AC  0830               	movf	??_runVoltageModeControl,w
  7256  02AD  00C8               	movwf	runVoltageModeControl@propMult
  7257  02AE  0831               	movf	??_runVoltageModeControl+1,w
  7258  02AF  00C9               	movwf	runVoltageModeControl@propMult+1
  7259  02B0  0832               	movf	??_runVoltageModeControl+2,w
  7260  02B1  00CA               	movwf	runVoltageModeControl@propMult+2
  7261  02B2  0833               	movf	??_runVoltageModeControl+3,w
  7262  02B3  00CB               	movwf	runVoltageModeControl@propMult+3
  7263  02B4  3000               	movlw	0
  7264  02B5  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7265  02B6  30FF               	movlw	255
  7266  02B7  00CC               	movwf	runVoltageModeControl@propMult+4
  7267  02B8  00CD               	movwf	runVoltageModeControl@propMult+5
  7268  02B9  00CE               	movwf	runVoltageModeControl@propMult+6
  7269  02BA  00CF               	movwf	runVoltageModeControl@propMult+7
  7270  02BB                     i1l2273:
  7271                           
  7272                           ;Controller.c: 139:    voltageModeVariables.proportionalOutput = propMult >> 9u;
  7273  02BB  3048               	movlw	low runVoltageModeControl@propMult
  7274  02BC  0086               	movwf	6
  7275  02BD  3000               	movlw	high runVoltageModeControl@propMult
  7276  02BE  0087               	movwf	7
  7277  02BF  3F40               	moviw [0]fsr1
  7278  02C0  00B0               	movwf	??_runVoltageModeControl
  7279  02C1  3F41               	moviw [1]fsr1
  7280  02C2  00B1               	movwf	??_runVoltageModeControl+1
  7281  02C3  3F42               	moviw [2]fsr1
  7282  02C4  00B2               	movwf	??_runVoltageModeControl+2
  7283  02C5  3F43               	moviw [3]fsr1
  7284  02C6  00B3               	movwf	??_runVoltageModeControl+3
  7285  02C7  3F44               	moviw [4]fsr1
  7286  02C8  00B4               	movwf	??_runVoltageModeControl+4
  7287  02C9  3F45               	moviw [5]fsr1
  7288  02CA  00B5               	movwf	??_runVoltageModeControl+5
  7289  02CB  3F46               	moviw [6]fsr1
  7290  02CC  00B6               	movwf	??_runVoltageModeControl+6
  7291  02CD  3F47               	moviw [7]fsr1
  7292  02CE  00B7               	movwf	??_runVoltageModeControl+7
  7293  02CF  3009               	movlw	9
  7294  02D0  00B8               	movwf	??_runVoltageModeControl+8
  7295  02D1                     u199_25:
  7296  02D1  0020               	movlb	0	; select bank0
  7297  02D2  37B7               	asrf	??_runVoltageModeControl+7,f
  7298  02D3  0CB6               	rrf	??_runVoltageModeControl+6,f
  7299  02D4  0CB5               	rrf	??_runVoltageModeControl+5,f
  7300  02D5  0CB4               	rrf	??_runVoltageModeControl+4,f
  7301  02D6  0CB3               	rrf	??_runVoltageModeControl+3,f
  7302  02D7  0CB2               	rrf	??_runVoltageModeControl+2,f
  7303  02D8  0CB1               	rrf	??_runVoltageModeControl+1,f
  7304  02D9  0CB0               	rrf	??_runVoltageModeControl,f
  7305  02DA                     u199_20:
  7306  02DA  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7307  02DB  2AD1               	goto	u199_25
  7308  02DC  0020               	movlb	0	; select bank0
  7309  02DD  0833               	movf	??_runVoltageModeControl+3,w
  7310  02DE  0021               	movlb	1	; select bank1
  7311  02DF  00BF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7312  02E0  0020               	movlb	0	; select bank0
  7313  02E1  0832               	movf	??_runVoltageModeControl+2,w
  7314  02E2  0021               	movlb	1	; select bank1
  7315  02E3  00BE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7316  02E4  0020               	movlb	0	; select bank0
  7317  02E5  0831               	movf	??_runVoltageModeControl+1,w
  7318  02E6  0021               	movlb	1	; select bank1
  7319  02E7  00BD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7320  02E8  0020               	movlb	0	; select bank0
  7321  02E9  0830               	movf	??_runVoltageModeControl,w
  7322  02EA  0021               	movlb	1	; select bank1
  7323  02EB  00BC               	movwf	(_voltageModeVariables^(0+128)+6)
  7324  02EC                     i1l2275:
  7325                           
  7326                           ;Controller.c: 141:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7327  02EC  0840               	movf	(_voltageModeVariables^(0+128)+10),w
  7328  02ED  073C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7329  02EE  0020               	movlb	0	; select bank0
  7330  02EF  00B0               	movwf	??_runVoltageModeControl
  7331  02F0  0021               	movlb	1	; select bank1
  7332  02F1  0841               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7333  02F2  3D3D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7334  02F3  0020               	movlb	0	; select bank0
  7335  02F4  00B1               	movwf	??_runVoltageModeControl+1
  7336  02F5  0021               	movlb	1	; select bank1
  7337  02F6  0842               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7338  02F7  3D3E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7339  02F8  0020               	movlb	0	; select bank0
  7340  02F9  00B2               	movwf	??_runVoltageModeControl+2
  7341  02FA  0021               	movlb	1	; select bank1
  7342  02FB  0843               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7343  02FC  3D3F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7344  02FD  0020               	movlb	0	; select bank0
  7345  02FE  00B3               	movwf	??_runVoltageModeControl+3
  7346  02FF  0833               	movf	??_runVoltageModeControl+3,w
  7347  0300  0021               	movlb	1	; select bank1
  7348  0301  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7349  0302  0020               	movlb	0	; select bank0
  7350  0303  0832               	movf	??_runVoltageModeControl+2,w
  7351  0304  0021               	movlb	1	; select bank1
  7352  0305  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7353  0306  0020               	movlb	0	; select bank0
  7354  0307  0831               	movf	??_runVoltageModeControl+1,w
  7355  0308  0021               	movlb	1	; select bank1
  7356  0309  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7357  030A  0020               	movlb	0	; select bank0
  7358  030B  0830               	movf	??_runVoltageModeControl,w
  7359  030C  0021               	movlb	1	; select bank1
  7360  030D  00CC               	movwf	(_voltageModeVariables^(0+128)+22)
  7361  030E                     i1l2277:
  7362                           
  7363                           ;Controller.c: 142:    voltageModeVariables.previousError = voltageModeVariables.error;
  7364  030E  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7365  030F  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7366  0310  0836               	movf	_voltageModeVariables^(0+128),w
  7367  0311  00D0               	movwf	(_voltageModeVariables^(0+128)+26)
  7368  0312                     i1l462:
  7369  0312  0008               	return
  7370  0313                     __end_of_runVoltageModeControl:
  7371                           
  7372                           	psect	text32
  7373  0D60                     __ptext32:	
  7374 ;; *************** function i1_readGPIO *****************
  7375 ;; Defined at:
  7376 ;;		line 79 in file "GPIO.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  gpioNumber      1    wreg     const enum E2798
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7381 ;;  portType        1    7[COMMON] unsigned char 
  7382 ;;  portNumber      1    6[COMMON] unsigned char 
  7383 ;;  returnValueB    1    5[COMMON] unsigned char 
  7384 ;;  readB           1    4[COMMON] unsigned char 
  7385 ;;  returnValueA    1    3[COMMON] unsigned char 
  7386 ;;  readA           1    2[COMMON] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      _Bool 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7396 ;;      Params:         0       0       0       0       0       0
  7397 ;;      Locals:         7       0       0       0       0       0
  7398 ;;      Temps:          2       0       0       0       0       0
  7399 ;;      Totals:         9       0       0       0       0       0
  7400 ;;Total ram usage:        9 bytes
  7401 ;; Hardware stack levels used: 1
  7402 ;; This function calls:
  7403 ;;		Nothing
  7404 ;; This function is called by:
  7405 ;;		_runVoltageModeControl
  7406 ;;		_currentTripRead
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410  0D60                     i1_readGPIO:	
  7411                           ;psect for function i1_readGPIO
  7412                           
  7413                           
  7414                           ;incstack = 0
  7415                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7416                           ;i1readGPIO@gpioNumber stored from wreg
  7417  0D60  00F8               	movwf	i1readGPIO@gpioNumber
  7418  0D61                     i1l2107:
  7419                           
  7420                           ;GPIO.c: 81:     uint8_t portType = 0;
  7421  0D61  01F7               	clrf	i1readGPIO@portType
  7422  0D62                     i1l2109:
  7423                           
  7424                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7425  0D62  3008               	movlw	8
  7426  0D63  0278               	subwf	i1readGPIO@gpioNumber,w
  7427  0D64  1C03               	skipc
  7428  0D65  2D67               	goto	u160_21
  7429  0D66  2D68               	goto	u160_20
  7430  0D67                     u160_21:
  7431  0D67  2D70               	goto	i1l2115
  7432  0D68                     u160_20:
  7433  0D68                     i1l2111:
  7434                           
  7435                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7436  0D68  0878               	movf	i1readGPIO@gpioNumber,w
  7437  0D69  3EF8               	addlw	248
  7438  0D6A  00F0               	movwf	??i1_readGPIO
  7439  0D6B  0870               	movf	??i1_readGPIO,w
  7440  0D6C  00F6               	movwf	i1readGPIO@portNumber
  7441  0D6D                     i1l2113:
  7442                           
  7443                           ;GPIO.c: 84:         portType = 1;
  7444  0D6D  01F7               	clrf	i1readGPIO@portType
  7445  0D6E  0AF7               	incf	i1readGPIO@portType,f
  7446                           
  7447                           ;GPIO.c: 85:     }
  7448  0D6F  2D75               	goto	i1l2119
  7449  0D70                     i1l2115:
  7450                           
  7451                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7452  0D70  0878               	movf	i1readGPIO@gpioNumber,w
  7453  0D71  00F0               	movwf	??i1_readGPIO
  7454  0D72  0870               	movf	??i1_readGPIO,w
  7455  0D73  00F6               	movwf	i1readGPIO@portNumber
  7456  0D74                     i1l2117:
  7457                           
  7458                           ;GPIO.c: 88:         portType = 0;
  7459  0D74  01F7               	clrf	i1readGPIO@portType
  7460  0D75                     i1l2119:
  7461                           
  7462                           ;GPIO.c: 91:     if(portType == 0){
  7463  0D75  0877               	movf	i1readGPIO@portType,w
  7464  0D76  1D03               	btfss	3,2
  7465  0D77  2D79               	goto	u161_21
  7466  0D78  2D7A               	goto	u161_20
  7467  0D79                     u161_21:
  7468  0D79  2D8D               	goto	i1l2131
  7469  0D7A                     u161_20:
  7470  0D7A                     i1l2121:
  7471                           
  7472                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7473  0D7A  0020               	movlb	0	; select bank0
  7474  0D7B  080C               	movf	12,w	;volatile
  7475  0D7C  00F0               	movwf	??i1_readGPIO
  7476  0D7D  0870               	movf	??i1_readGPIO,w
  7477  0D7E  00F2               	movwf	i1readGPIO@readA
  7478  0D7F                     i1l2123:
  7479                           
  7480                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7481  0D7F  0872               	movf	i1readGPIO@readA,w
  7482  0D80  00F0               	movwf	??i1_readGPIO
  7483  0D81  0A76               	incf	i1readGPIO@portNumber,w
  7484  0D82  2D84               	goto	u162_24
  7485  0D83                     u162_25:
  7486  0D83  36F0               	lsrf	??i1_readGPIO,f
  7487  0D84                     u162_24:
  7488  0D84  0B89               	decfsz	9,f
  7489  0D85  2D83               	goto	u162_25
  7490  0D86  0870               	movf	??i1_readGPIO,w
  7491  0D87  3901               	andlw	1
  7492  0D88  00F1               	movwf	??i1_readGPIO+1
  7493  0D89  0871               	movf	??i1_readGPIO+1,w
  7494  0D8A  00F3               	movwf	i1readGPIO@returnValueA
  7495  0D8B                     i1l2125:
  7496                           
  7497                           ;GPIO.c: 94:         return returnValueA;
  7498  0D8B  0873               	movf	i1readGPIO@returnValueA,w
  7499  0D8C  2DA6               	goto	i1l326
  7500  0D8D                     i1l2131:
  7501  0D8D  0377               	decf	i1readGPIO@portType,w
  7502  0D8E  1D03               	btfss	3,2
  7503  0D8F  2D91               	goto	u163_21
  7504  0D90  2D92               	goto	u163_20
  7505  0D91                     u163_21:
  7506  0D91  2DA5               	goto	i1l2143
  7507  0D92                     u163_20:
  7508  0D92                     i1l2133:
  7509                           
  7510                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7511  0D92  0020               	movlb	0	; select bank0
  7512  0D93  080D               	movf	13,w	;volatile
  7513  0D94  00F0               	movwf	??i1_readGPIO
  7514  0D95  0870               	movf	??i1_readGPIO,w
  7515  0D96  00F4               	movwf	i1readGPIO@readB
  7516  0D97                     i1l2135:
  7517                           
  7518                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7519  0D97  0874               	movf	i1readGPIO@readB,w
  7520  0D98  00F0               	movwf	??i1_readGPIO
  7521  0D99  0A76               	incf	i1readGPIO@portNumber,w
  7522  0D9A  2D9C               	goto	u164_24
  7523  0D9B                     u164_25:
  7524  0D9B  36F0               	lsrf	??i1_readGPIO,f
  7525  0D9C                     u164_24:
  7526  0D9C  0B89               	decfsz	9,f
  7527  0D9D  2D9B               	goto	u164_25
  7528  0D9E  0870               	movf	??i1_readGPIO,w
  7529  0D9F  3901               	andlw	1
  7530  0DA0  00F1               	movwf	??i1_readGPIO+1
  7531  0DA1  0871               	movf	??i1_readGPIO+1,w
  7532  0DA2  00F5               	movwf	i1readGPIO@returnValueB
  7533  0DA3                     i1l2137:
  7534                           
  7535                           ;GPIO.c: 99:         return returnValueB;
  7536  0DA3  0875               	movf	i1readGPIO@returnValueB,w
  7537  0DA4  2DA6               	goto	i1l326
  7538  0DA5                     i1l2143:
  7539  0DA5  3000               	movlw	0
  7540  0DA6                     i1l326:
  7541  0DA6  0008               	return
  7542  0DA7                     __end_ofi1_readGPIO:
  7543                           
  7544                           	psect	text33
  7545  0D25                     __ptext33:	
  7546 ;; *************** function _convertRawToMilliVolts *****************
  7547 ;; Defined at:
  7548 ;;		line 53 in file "Controller.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  rawValue        2   12[COMMON] unsigned short 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  vsenseMult      4    5[BANK0 ] long 
  7553 ;;  returnValued    2   11[BANK0 ] short 
  7554 ;;  offsetted       2    9[BANK0 ] short 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  2   12[COMMON] short 
  7557 ;; Registers used:
  7558 ;;		wreg, status,2, status,0, pclath, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7564 ;;      Params:         2       0       0       0       0       0
  7565 ;;      Locals:         0       8       0       0       0       0
  7566 ;;      Temps:          0       5       0       0       0       0
  7567 ;;      Totals:         2      13       0       0       0       0
  7568 ;;Total ram usage:       15 bytes
  7569 ;; Hardware stack levels used: 1
  7570 ;; Hardware stack levels required when called: 1
  7571 ;; This function calls:
  7572 ;;		___lmul
  7573 ;; This function is called by:
  7574 ;;		_runVoltageModeControl
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578  0D25                     _convertRawToMilliVolts:	
  7579                           ;psect for function _convertRawToMilliVolts
  7580                           
  7581  0D25                     i1l2055:	
  7582                           ;incstack = 0
  7583                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7584                           
  7585                           
  7586                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7587  0D25  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7588  0D26  0020               	movlb	0	; select bank0
  7589  0D27  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7590  0D28  087C               	movf	convertRawToMilliVolts@rawValue,w
  7591  0D29  00A9               	movwf	convertRawToMilliVolts@offsetted
  7592  0D2A                     i1l2057:
  7593                           
  7594                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7595  0D2A  0829               	movf	convertRawToMilliVolts@offsetted,w
  7596  0D2B  00F0               	movwf	___lmul@multiplier
  7597  0D2C  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7598  0D2D  00F1               	movwf	___lmul@multiplier+1
  7599  0D2E  0D89               	rlf	9,f
  7600  0D2F  3B89               	subwfb	9,f
  7601  0D30  0989               	comf	9,f
  7602  0D31  00F2               	movwf	___lmul@multiplier+2
  7603  0D32  00F3               	movwf	___lmul@multiplier+3
  7604  0D33  3000               	movlw	0
  7605  0D34  00F7               	movwf	___lmul@multiplicand+3
  7606  0D35  3000               	movlw	0
  7607  0D36  00F6               	movwf	___lmul@multiplicand+2
  7608  0D37  3017               	movlw	23
  7609  0D38  00F5               	movwf	___lmul@multiplicand+1
  7610  0D39  30D4               	movlw	212
  7611  0D3A  00F4               	movwf	___lmul@multiplicand
  7612  0D3B  318C  24BA  318D   	fcall	___lmul
  7613  0D3E  0873               	movf	?___lmul+3,w
  7614  0D3F  0020               	movlb	0	; select bank0
  7615  0D40  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7616  0D41  0872               	movf	?___lmul+2,w
  7617  0D42  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7618  0D43  0871               	movf	?___lmul+1,w
  7619  0D44  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7620  0D45  0870               	movf	?___lmul,w
  7621  0D46  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7622  0D47                     i1l2059:
  7623                           
  7624                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7625  0D47  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7626  0D48  00A0               	movwf	??_convertRawToMilliVolts
  7627  0D49  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7628  0D4A  00A1               	movwf	??_convertRawToMilliVolts+1
  7629  0D4B  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7630  0D4C  00A2               	movwf	??_convertRawToMilliVolts+2
  7631  0D4D  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7632  0D4E  00A3               	movwf	??_convertRawToMilliVolts+3
  7633  0D4F  3008               	movlw	8
  7634  0D50  00A4               	movwf	??_convertRawToMilliVolts+4
  7635  0D51                     u146_25:
  7636  0D51  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7637  0D52  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7638  0D53  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7639  0D54  0CA0               	rrf	??_convertRawToMilliVolts,f
  7640  0D55                     u146_20:
  7641  0D55  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7642  0D56  2D51               	goto	u146_25
  7643  0D57  0821               	movf	??_convertRawToMilliVolts+1,w
  7644  0D58  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7645  0D59  0820               	movf	??_convertRawToMilliVolts,w
  7646  0D5A  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7647  0D5B                     i1l2061:
  7648                           
  7649                           ;Controller.c: 57:     return returnValuedV;
  7650  0D5B  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7651  0D5C  00FD               	movwf	?_convertRawToMilliVolts+1
  7652  0D5D  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7653  0D5E  00FC               	movwf	?_convertRawToMilliVolts
  7654  0D5F                     i1l440:
  7655  0D5F  0008               	return
  7656  0D60                     __end_of_convertRawToMilliVolts:
  7657                           
  7658                           	psect	text34
  7659  0CBA                     __ptext34:	
  7660 ;; *************** function ___lmul *****************
  7661 ;; Defined at:
  7662 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  multiplier      4    0[COMMON] unsigned long 
  7665 ;;  multiplicand    4    4[COMMON] unsigned long 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  product         4    8[COMMON] unsigned long 
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  4    0[COMMON] unsigned long 
  7670 ;; Registers used:
  7671 ;;		wreg, status,2, status,0
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7677 ;;      Params:         8       0       0       0       0       0
  7678 ;;      Locals:         4       0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0
  7680 ;;      Totals:        12       0       0       0       0       0
  7681 ;;Total ram usage:       12 bytes
  7682 ;; Hardware stack levels used: 1
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_runPotScaling
  7687 ;;		_convertRawToMilliVolts
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691  0CBA                     ___lmul:	
  7692                           ;psect for function ___lmul
  7693                           
  7694  0CBA                     i1l2013:	
  7695                           ;incstack = 0
  7696                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7697                           
  7698  0CBA  3000               	movlw	0
  7699  0CBB  00FB               	movwf	___lmul@product+3
  7700  0CBC  3000               	movlw	0
  7701  0CBD  00FA               	movwf	___lmul@product+2
  7702  0CBE  3000               	movlw	0
  7703  0CBF  00F9               	movwf	___lmul@product+1
  7704  0CC0  3000               	movlw	0
  7705  0CC1  00F8               	movwf	___lmul@product
  7706  0CC2                     i1l2015:
  7707  0CC2  1C70               	btfss	___lmul@multiplier,0
  7708  0CC3  2CC5               	goto	u133_21
  7709  0CC4  2CC6               	goto	u133_20
  7710  0CC5                     u133_21:
  7711  0CC5  2CCE               	goto	i1l2019
  7712  0CC6                     u133_20:
  7713  0CC6                     i1l2017:
  7714  0CC6  0874               	movf	___lmul@multiplicand,w
  7715  0CC7  07F8               	addwf	___lmul@product,f
  7716  0CC8  0875               	movf	___lmul@multiplicand+1,w
  7717  0CC9  3DF9               	addwfc	___lmul@product+1,f
  7718  0CCA  0876               	movf	___lmul@multiplicand+2,w
  7719  0CCB  3DFA               	addwfc	___lmul@product+2,f
  7720  0CCC  0877               	movf	___lmul@multiplicand+3,w
  7721  0CCD  3DFB               	addwfc	___lmul@product+3,f
  7722  0CCE                     i1l2019:
  7723  0CCE  3001               	movlw	1
  7724  0CCF                     u134_25:
  7725  0CCF  35F4               	lslf	___lmul@multiplicand,f
  7726  0CD0  0DF5               	rlf	___lmul@multiplicand+1,f
  7727  0CD1  0DF6               	rlf	___lmul@multiplicand+2,f
  7728  0CD2  0DF7               	rlf	___lmul@multiplicand+3,f
  7729  0CD3  0B89               	decfsz	9,f
  7730  0CD4  2CCF               	goto	u134_25
  7731  0CD5                     i1l2021:
  7732  0CD5  3001               	movlw	1
  7733  0CD6                     u135_25:
  7734  0CD6  36F3               	lsrf	___lmul@multiplier+3,f
  7735  0CD7  0CF2               	rrf	___lmul@multiplier+2,f
  7736  0CD8  0CF1               	rrf	___lmul@multiplier+1,f
  7737  0CD9  0CF0               	rrf	___lmul@multiplier,f
  7738  0CDA  0B89               	decfsz	9,f
  7739  0CDB  2CD6               	goto	u135_25
  7740  0CDC  0873               	movf	___lmul@multiplier+3,w
  7741  0CDD  0472               	iorwf	___lmul@multiplier+2,w
  7742  0CDE  0471               	iorwf	___lmul@multiplier+1,w
  7743  0CDF  0470               	iorwf	___lmul@multiplier,w
  7744  0CE0  1D03               	skipz
  7745  0CE1  2CE3               	goto	u136_21
  7746  0CE2  2CE4               	goto	u136_20
  7747  0CE3                     u136_21:
  7748  0CE3  2CC2               	goto	i1l2015
  7749  0CE4                     u136_20:
  7750  0CE4                     i1l2023:
  7751  0CE4  087B               	movf	___lmul@product+3,w
  7752  0CE5  00F3               	movwf	?___lmul+3
  7753  0CE6  087A               	movf	___lmul@product+2,w
  7754  0CE7  00F2               	movwf	?___lmul+2
  7755  0CE8  0879               	movf	___lmul@product+1,w
  7756  0CE9  00F1               	movwf	?___lmul+1
  7757  0CEA  0878               	movf	___lmul@product,w
  7758  0CEB  00F0               	movwf	?___lmul
  7759  0CEC                     i1l736:
  7760  0CEC  0008               	return
  7761  0CED                     __end_of___lmul:
  7762                           
  7763                           	psect	text35
  7764  0BD9                     __ptext35:	
  7765 ;; *************** function _abs *****************
  7766 ;; Defined at:
  7767 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  a               2    0[COMMON] int 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  2    0[COMMON] int 
  7774 ;; Registers used:
  7775 ;;		wreg, status,2, status,0
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7781 ;;      Params:         2       0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0
  7783 ;;      Temps:          2       0       0       0       0       0
  7784 ;;      Totals:         4       0       0       0       0       0
  7785 ;;Total ram usage:        4 bytes
  7786 ;; Hardware stack levels used: 1
  7787 ;; This function calls:
  7788 ;;		Nothing
  7789 ;; This function is called by:
  7790 ;;		_runVoltageModeControl
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794  0BD9                     _abs:	
  7795                           ;psect for function _abs
  7796                           
  7797  0BD9                     i1l2065:	
  7798                           ;incstack = 0
  7799                           ; Regs used in _abs: [wreg+status,2+status,0]
  7800                           
  7801  0BD9  0871               	movf	abs@a+1,w
  7802  0BDA  3A80               	xorlw	128
  7803  0BDB  00F2               	movwf	??_abs
  7804  0BDC  3080               	movlw	128
  7805  0BDD  0272               	subwf	??_abs,w
  7806  0BDE  1D03               	skipz
  7807  0BDF  2BE2               	goto	u147_25
  7808  0BE0  3001               	movlw	1
  7809  0BE1  0270               	subwf	abs@a,w
  7810  0BE2                     u147_25:
  7811  0BE2  1803               	skipnc
  7812  0BE3  2BE5               	goto	u147_21
  7813  0BE4  2BE6               	goto	u147_20
  7814  0BE5                     u147_21:
  7815  0BE5  2BF2               	goto	i1l1182
  7816  0BE6                     u147_20:
  7817  0BE6                     i1l2067:
  7818  0BE6  0970               	comf	abs@a,w
  7819  0BE7  00F2               	movwf	??_abs
  7820  0BE8  0971               	comf	abs@a+1,w
  7821  0BE9  00F3               	movwf	??_abs+1
  7822  0BEA  0AF2               	incf	??_abs,f
  7823  0BEB  1903               	skipnz
  7824  0BEC  0AF3               	incf	??_abs+1,f
  7825  0BED  0872               	movf	??_abs,w
  7826  0BEE  00F0               	movwf	?_abs
  7827  0BEF  0873               	movf	??_abs+1,w
  7828  0BF0  00F1               	movwf	?_abs+1
  7829  0BF1  2BF2               	goto	i1l1185
  7830  0BF2                     i1l1182:
  7831  0BF2                     i1l1185:
  7832  0BF2  0008               	return
  7833  0BF3                     __end_of_abs:
  7834                           
  7835                           	psect	text36
  7836  0DF1                     __ptext36:	
  7837 ;; *************** function ___omul *****************
  7838 ;; Defined at:
  7839 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7842 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  product         8    1[COMMON] unsigned long long 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  8    0[BANK0 ] unsigned long long 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7854 ;;      Params:         0      16       0       0       0       0
  7855 ;;      Locals:         8       0       0       0       0       0
  7856 ;;      Temps:          1       0       0       0       0       0
  7857 ;;      Totals:         9      16       0       0       0       0
  7858 ;;Total ram usage:       25 bytes
  7859 ;; Hardware stack levels used: 1
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_runVoltageModeControl
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867  0DF1                     ___omul:	
  7868                           ;psect for function ___omul
  7869                           
  7870  0DF1                     i1l2069:	
  7871                           ;incstack = 0
  7872                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7873                           
  7874  0DF1  3071               	movlw	low ___omul@product
  7875  0DF2  0086               	movwf	6
  7876  0DF3  3000               	movlw	high ___omul@product
  7877  0DF4  0087               	movwf	7
  7878  0DF5  3008               	movlw	8
  7879  0DF6  00F0               	movwf	??___omul
  7880  0DF7  3000               	movlw	0
  7881  0DF8                     u148_20:
  7882  0DF8  001E               	movwi fsr1++
  7883  0DF9  0BF0               	decfsz	??___omul,f
  7884  0DFA  2DF8               	goto	u148_20
  7885  0DFB                     i1l2071:
  7886  0DFB  0020               	movlb	0	; select bank0
  7887  0DFC  1C20               	btfss	___omul@multiplier,0
  7888  0DFD  2DFF               	goto	u149_21
  7889  0DFE  2E00               	goto	u149_20
  7890  0DFF                     u149_21:
  7891  0DFF  2E10               	goto	i1l2075
  7892  0E00                     u149_20:
  7893  0E00                     i1l2073:
  7894  0E00  0828               	movf	___omul@multiplicand,w
  7895  0E01  07F1               	addwf	___omul@product,f
  7896  0E02  0829               	movf	___omul@multiplicand+1,w
  7897  0E03  3DF2               	addwfc	___omul@product+1,f
  7898  0E04  082A               	movf	___omul@multiplicand+2,w
  7899  0E05  3DF3               	addwfc	___omul@product+2,f
  7900  0E06  082B               	movf	___omul@multiplicand+3,w
  7901  0E07  3DF4               	addwfc	___omul@product+3,f
  7902  0E08  082C               	movf	___omul@multiplicand+4,w
  7903  0E09  3DF5               	addwfc	___omul@product+4,f
  7904  0E0A  082D               	movf	___omul@multiplicand+5,w
  7905  0E0B  3DF6               	addwfc	___omul@product+5,f
  7906  0E0C  082E               	movf	___omul@multiplicand+6,w
  7907  0E0D  3DF7               	addwfc	___omul@product+6,f
  7908  0E0E  082F               	movf	___omul@multiplicand+7,w
  7909  0E0F  3DF8               	addwfc	___omul@product+7,f
  7910  0E10                     i1l2075:
  7911  0E10  35A8               	lslf	___omul@multiplicand,f
  7912  0E11  0DA9               	rlf	___omul@multiplicand+1,f
  7913  0E12  0DAA               	rlf	___omul@multiplicand+2,f
  7914  0E13  0DAB               	rlf	___omul@multiplicand+3,f
  7915  0E14  0DAC               	rlf	___omul@multiplicand+4,f
  7916  0E15  0DAD               	rlf	___omul@multiplicand+5,f
  7917  0E16  0DAE               	rlf	___omul@multiplicand+6,f
  7918  0E17  0DAF               	rlf	___omul@multiplicand+7,f
  7919  0E18                     i1l2077:
  7920  0E18  36A7               	lsrf	___omul@multiplier+7,f
  7921  0E19  0CA6               	rrf	___omul@multiplier+6,f
  7922  0E1A  0CA5               	rrf	___omul@multiplier+5,f
  7923  0E1B  0CA4               	rrf	___omul@multiplier+4,f
  7924  0E1C  0CA3               	rrf	___omul@multiplier+3,f
  7925  0E1D  0CA2               	rrf	___omul@multiplier+2,f
  7926  0E1E  0CA1               	rrf	___omul@multiplier+1,f
  7927  0E1F  0CA0               	rrf	___omul@multiplier,f
  7928  0E20  0820               	movf	___omul@multiplier,w
  7929  0E21  0421               	iorwf	___omul@multiplier+1,w
  7930  0E22  0422               	iorwf	___omul@multiplier+2,w
  7931  0E23  0423               	iorwf	___omul@multiplier+3,w
  7932  0E24  0424               	iorwf	___omul@multiplier+4,w
  7933  0E25  0425               	iorwf	___omul@multiplier+5,w
  7934  0E26  0426               	iorwf	___omul@multiplier+6,w
  7935  0E27  0427               	iorwf	___omul@multiplier+7,w
  7936  0E28  1D03               	skipz
  7937  0E29  2E2B               	goto	u150_21
  7938  0E2A  2E2C               	goto	u150_20
  7939  0E2B                     u150_21:
  7940  0E2B  2DFB               	goto	i1l2071
  7941  0E2C                     u150_20:
  7942  0E2C                     i1l741:
  7943  0E2C  0871               	movf	___omul@product,w
  7944  0E2D  00A0               	movwf	?___omul
  7945  0E2E  0872               	movf	___omul@product+1,w
  7946  0E2F  00A1               	movwf	?___omul+1
  7947  0E30  0873               	movf	___omul@product+2,w
  7948  0E31  00A2               	movwf	?___omul+2
  7949  0E32  0874               	movf	___omul@product+3,w
  7950  0E33  00A3               	movwf	?___omul+3
  7951  0E34  0875               	movf	___omul@product+4,w
  7952  0E35  00A4               	movwf	?___omul+4
  7953  0E36  0876               	movf	___omul@product+5,w
  7954  0E37  00A5               	movwf	?___omul+5
  7955  0E38  0877               	movf	___omul@product+6,w
  7956  0E39  00A6               	movwf	?___omul+6
  7957  0E3A  0878               	movf	___omul@product+7,w
  7958  0E3B  00A7               	movwf	?___omul+7
  7959  0E3C                     i1l742:
  7960  0E3C  0008               	return
  7961  0E3D                     __end_of___omul:
  7962                           
  7963                           	psect	text37
  7964  0C2C                     __ptext37:	
  7965 ;; *************** function ___wmul *****************
  7966 ;; Defined at:
  7967 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  multiplier      2    0[COMMON] unsigned int 
  7970 ;;  multiplicand    2    2[COMMON] unsigned int 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  product         2    4[COMMON] unsigned int 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  2    0[COMMON] unsigned int 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7982 ;;      Params:         4       0       0       0       0       0
  7983 ;;      Locals:         2       0       0       0       0       0
  7984 ;;      Temps:          0       0       0       0       0       0
  7985 ;;      Totals:         6       0       0       0       0       0
  7986 ;;Total ram usage:        6 bytes
  7987 ;; Hardware stack levels used: 1
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_runPotScaling
  7992 ;;		_controlRoutine
  7993 ;;		_convertRawToMilliAmps
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997  0C2C                     ___wmul:	
  7998                           ;psect for function ___wmul
  7999                           
  8000  0C2C                     i1l2301:	
  8001                           ;incstack = 0
  8002                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8003                           
  8004  0C2C  01F4               	clrf	___wmul@product
  8005  0C2D  01F5               	clrf	___wmul@product+1
  8006  0C2E                     i1l2303:
  8007  0C2E  1C70               	btfss	___wmul@multiplier,0
  8008  0C2F  2C31               	goto	u206_21
  8009  0C30  2C32               	goto	u206_20
  8010  0C31                     u206_21:
  8011  0C31  2C36               	goto	i1l722
  8012  0C32                     u206_20:
  8013  0C32                     i1l2305:
  8014  0C32  0872               	movf	___wmul@multiplicand,w
  8015  0C33  07F4               	addwf	___wmul@product,f
  8016  0C34  0873               	movf	___wmul@multiplicand+1,w
  8017  0C35  3DF5               	addwfc	___wmul@product+1,f
  8018  0C36                     i1l722:
  8019  0C36  3001               	movlw	1
  8020  0C37                     u207_25:
  8021  0C37  35F2               	lslf	___wmul@multiplicand,f
  8022  0C38  0DF3               	rlf	___wmul@multiplicand+1,f
  8023  0C39  0B89               	decfsz	9,f
  8024  0C3A  2C37               	goto	u207_25
  8025  0C3B                     i1l2307:
  8026  0C3B  3001               	movlw	1
  8027  0C3C                     u208_25:
  8028  0C3C  36F1               	lsrf	___wmul@multiplier+1,f
  8029  0C3D  0CF0               	rrf	___wmul@multiplier,f
  8030  0C3E  0B89               	decfsz	9,f
  8031  0C3F  2C3C               	goto	u208_25
  8032  0C40                     i1l2309:
  8033  0C40  0870               	movf	___wmul@multiplier,w
  8034  0C41  0471               	iorwf	___wmul@multiplier+1,w
  8035  0C42  1D03               	btfss	3,2
  8036  0C43  2C45               	goto	u209_21
  8037  0C44  2C46               	goto	u209_20
  8038  0C45                     u209_21:
  8039  0C45  2C2E               	goto	i1l2303
  8040  0C46                     u209_20:
  8041  0C46                     i1l2311:
  8042  0C46  0875               	movf	___wmul@product+1,w
  8043  0C47  00F1               	movwf	?___wmul+1
  8044  0C48  0874               	movf	___wmul@product,w
  8045  0C49  00F0               	movwf	?___wmul
  8046  0C4A                     i1l724:
  8047  0C4A  0008               	return
  8048  0C4B                     __end_of___wmul:
  8049                           
  8050                           	psect	text38
  8051  0EEF                     __ptext38:	
  8052 ;; *************** function ___lldiv *****************
  8053 ;; Defined at:
  8054 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  divisor         4    6[COMMON] unsigned long 
  8057 ;;  dividend        4   10[COMMON] unsigned long 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  quotient        4    1[BANK0 ] unsigned long 
  8060 ;;  counter         1    5[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  4    6[COMMON] unsigned long 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8070 ;;      Params:         8       0       0       0       0       0
  8071 ;;      Locals:         0       5       0       0       0       0
  8072 ;;      Temps:          0       1       0       0       0       0
  8073 ;;      Totals:         8       6       0       0       0       0
  8074 ;;Total ram usage:       14 bytes
  8075 ;; Hardware stack levels used: 1
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_runPotScaling
  8080 ;;		_controlRoutine
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084  0EEF                     ___lldiv:	
  8085                           ;psect for function ___lldiv
  8086                           
  8087  0EEF                     i1l2315:	
  8088                           ;incstack = 0
  8089                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8090                           
  8091  0EEF  3000               	movlw	0
  8092  0EF0  0020               	movlb	0	; select bank0
  8093  0EF1  00A4               	movwf	___lldiv@quotient+3
  8094  0EF2  3000               	movlw	0
  8095  0EF3  00A3               	movwf	___lldiv@quotient+2
  8096  0EF4  3000               	movlw	0
  8097  0EF5  00A2               	movwf	___lldiv@quotient+1
  8098  0EF6  3000               	movlw	0
  8099  0EF7  00A1               	movwf	___lldiv@quotient
  8100  0EF8  0879               	movf	___lldiv@divisor+3,w
  8101  0EF9  0478               	iorwf	___lldiv@divisor+2,w
  8102  0EFA  0477               	iorwf	___lldiv@divisor+1,w
  8103  0EFB  0476               	iorwf	___lldiv@divisor,w
  8104  0EFC  1903               	skipnz
  8105  0EFD  2EFF               	goto	u210_21
  8106  0EFE  2F00               	goto	u210_20
  8107  0EFF                     u210_21:
  8108  0EFF  2F41               	goto	i1l2335
  8109  0F00                     u210_20:
  8110  0F00                     i1l2317:
  8111  0F00  01A5               	clrf	___lldiv@counter
  8112  0F01  0AA5               	incf	___lldiv@counter,f
  8113  0F02  2F0E               	goto	i1l2321
  8114  0F03                     i1l2319:
  8115  0F03  3001               	movlw	1
  8116  0F04                     u211_25:
  8117  0F04  35F6               	lslf	___lldiv@divisor,f
  8118  0F05  0DF7               	rlf	___lldiv@divisor+1,f
  8119  0F06  0DF8               	rlf	___lldiv@divisor+2,f
  8120  0F07  0DF9               	rlf	___lldiv@divisor+3,f
  8121  0F08  0B89               	decfsz	9,f
  8122  0F09  2F04               	goto	u211_25
  8123  0F0A  3001               	movlw	1
  8124  0F0B  00A0               	movwf	??___lldiv
  8125  0F0C  0820               	movf	??___lldiv,w
  8126  0F0D  07A5               	addwf	___lldiv@counter,f
  8127  0F0E                     i1l2321:
  8128  0F0E  1FF9               	btfss	___lldiv@divisor+3,7
  8129  0F0F  2F11               	goto	u212_21
  8130  0F10  2F12               	goto	u212_20
  8131  0F11                     u212_21:
  8132  0F11  2F03               	goto	i1l2319
  8133  0F12                     u212_20:
  8134  0F12                     i1l2323:
  8135  0F12  3001               	movlw	1
  8136  0F13                     u213_25:
  8137  0F13  35A1               	lslf	___lldiv@quotient,f
  8138  0F14  0DA2               	rlf	___lldiv@quotient+1,f
  8139  0F15  0DA3               	rlf	___lldiv@quotient+2,f
  8140  0F16  0DA4               	rlf	___lldiv@quotient+3,f
  8141  0F17  0B89               	decfsz	9,f
  8142  0F18  2F13               	goto	u213_25
  8143  0F19                     i1l2325:
  8144  0F19  0879               	movf	___lldiv@divisor+3,w
  8145  0F1A  027D               	subwf	___lldiv@dividend+3,w
  8146  0F1B  1D03               	skipz
  8147  0F1C  2F27               	goto	u214_25
  8148  0F1D  0878               	movf	___lldiv@divisor+2,w
  8149  0F1E  027C               	subwf	___lldiv@dividend+2,w
  8150  0F1F  1D03               	skipz
  8151  0F20  2F27               	goto	u214_25
  8152  0F21  0877               	movf	___lldiv@divisor+1,w
  8153  0F22  027B               	subwf	___lldiv@dividend+1,w
  8154  0F23  1D03               	skipz
  8155  0F24  2F27               	goto	u214_25
  8156  0F25  0876               	movf	___lldiv@divisor,w
  8157  0F26  027A               	subwf	___lldiv@dividend,w
  8158  0F27                     u214_25:
  8159  0F27  1C03               	skipc
  8160  0F28  2F2A               	goto	u214_21
  8161  0F29  2F2B               	goto	u214_20
  8162  0F2A                     u214_21:
  8163  0F2A  2F34               	goto	i1l2331
  8164  0F2B                     u214_20:
  8165  0F2B                     i1l2327:
  8166  0F2B  0876               	movf	___lldiv@divisor,w
  8167  0F2C  02FA               	subwf	___lldiv@dividend,f
  8168  0F2D  0877               	movf	___lldiv@divisor+1,w
  8169  0F2E  3BFB               	subwfb	___lldiv@dividend+1,f
  8170  0F2F  0878               	movf	___lldiv@divisor+2,w
  8171  0F30  3BFC               	subwfb	___lldiv@dividend+2,f
  8172  0F31  0879               	movf	___lldiv@divisor+3,w
  8173  0F32  3BFD               	subwfb	___lldiv@dividend+3,f
  8174  0F33                     i1l2329:
  8175  0F33  1421               	bsf	___lldiv@quotient,0
  8176  0F34                     i1l2331:
  8177  0F34  3001               	movlw	1
  8178  0F35                     u215_25:
  8179  0F35  36F9               	lsrf	___lldiv@divisor+3,f
  8180  0F36  0CF8               	rrf	___lldiv@divisor+2,f
  8181  0F37  0CF7               	rrf	___lldiv@divisor+1,f
  8182  0F38  0CF6               	rrf	___lldiv@divisor,f
  8183  0F39  0B89               	decfsz	9,f
  8184  0F3A  2F35               	goto	u215_25
  8185  0F3B                     i1l2333:
  8186  0F3B  3001               	movlw	1
  8187  0F3C  02A5               	subwf	___lldiv@counter,f
  8188  0F3D  1D03               	btfss	3,2
  8189  0F3E  2F40               	goto	u216_21
  8190  0F3F  2F41               	goto	u216_20
  8191  0F40                     u216_21:
  8192  0F40  2F12               	goto	i1l2323
  8193  0F41                     u216_20:
  8194  0F41                     i1l2335:
  8195  0F41  0824               	movf	___lldiv@quotient+3,w
  8196  0F42  00F9               	movwf	?___lldiv+3
  8197  0F43  0823               	movf	___lldiv@quotient+2,w
  8198  0F44  00F8               	movwf	?___lldiv+2
  8199  0F45  0822               	movf	___lldiv@quotient+1,w
  8200  0F46  00F7               	movwf	?___lldiv+1
  8201  0F47  0821               	movf	___lldiv@quotient,w
  8202  0F48  00F6               	movwf	?___lldiv
  8203  0F49                     i1l758:
  8204  0F49  0008               	return
  8205  0F4A                     __end_of___lldiv:
  8206  007E                     btemp	set	126	;btemp
  8207  007E                     int$flags	set	126
  8208  007E                     wtemp0	set	126
  8209                           
  8210                           	psect	idloc
  8211                           
  8212                           ;Config register IDLOC0 @ 0x8000
  8213                           ;	unspecified, using default values
  8214  8000                     	org	32768
  8215  8000  3FFF               	dw	16383
  8216                           
  8217                           ;Config register IDLOC1 @ 0x8001
  8218                           ;	unspecified, using default values
  8219  8001                     	org	32769
  8220  8001  3FFF               	dw	16383
  8221                           
  8222                           ;Config register IDLOC2 @ 0x8002
  8223                           ;	unspecified, using default values
  8224  8002                     	org	32770
  8225  8002  3FFF               	dw	16383
  8226                           
  8227                           ;Config register IDLOC3 @ 0x8003
  8228                           ;	unspecified, using default values
  8229  8003                     	org	32771
  8230  8003  3FFF               	dw	16383
  8231                           
  8232                           	psect	config
  8233                           
  8234                           ;Config register CONFIG1 @ 0x8007
  8235                           ;	Oscillator Selection
  8236                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8237                           ;	Watchdog Timer Enable
  8238                           ;	WDTE = OFF, WDT disabled
  8239                           ;	Power-up Timer Enable
  8240                           ;	PWRTE = OFF, PWRT disabled
  8241                           ;	MCLR Pin Function Select
  8242                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8243                           ;	Flash Program Memory Code Protection
  8244                           ;	CP = OFF, Program memory code protection is disabled
  8245                           ;	Data Memory Code Protection
  8246                           ;	CPD = OFF, Data memory code protection is disabled
  8247                           ;	Brown-out Reset Enable
  8248                           ;	BOREN = ON, Brown-out Reset enabled
  8249                           ;	Clock Out Enable
  8250                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8251                           ;	Internal/External Switchover
  8252                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8253                           ;	Fail-Safe Clock Monitor Enable
  8254                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8255  8007                     	org	32775
  8256  8007  0FA4               	dw	4004
  8257                           
  8258                           ;Config register CONFIG2 @ 0x8008
  8259                           ;	Flash Memory Self-Write Protection
  8260                           ;	WRT = OFF, Write protection off
  8261                           ;	PLL Enable
  8262                           ;	PLLEN = OFF, 4x PLL disabled
  8263                           ;	Stack Overflow/Underflow Reset Enable
  8264                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8265                           ;	Brown-out Reset Voltage Selection
  8266                           ;	BORV = 0x1, unprogrammed default
  8267                           ;	Low-Voltage Programming Enable
  8268                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8269  8008                     	org	32776
  8270  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      79
    BANK1            80     13      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            32      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                _transToInitialising
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToInitialising                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    9713
                                             62 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       14    14      0    3024
                                              6 BANK0     14    14      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      12    12      0    3898
                                             50 BANK0     12    12      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    1596
                                             16 BANK0     34    34      0
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToInitialising
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0      20      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Sep 22 19:55:32 2023

              ??_transToInitialising 00D2                  ___wmul@multiplicand 0072  
                                l120 0D22                                  l201 0BAC  
                                l320 0716                                  l234 0B90  
                                l306 0650                                  l243 06B6  
                                l139 05DA                                  l238 0678  
                                l430 0C2B                                  l326 0DF0  
                                l174 0C0E                                  l512 0C6A  
                                l534 0BD8                                  l358 0BBE  
                                l560 0B86                                  l563 0B8A  
                                l566 0BA4                                  l569 0B9D  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0BD9                                  wreg 0009  
                __end_ofi1_writeGPIO 0776                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D3                           i1_readGPIO 0D60  
                               ?_abs 0070                                 l2031 06C0  
                               l2201 069F                                 l2041 06D2  
                               l2033 06C5                                 l2051 06FC  
                               l2043 06D7                                 l2035 06C8  
                               l2027 06B9                                 l2053 0709  
                               l2045 06E4                                 l2037 06CC  
                               l2029 06BA                                 l2151 05E4  
                               l2047 06F2                                 l2039 06CD  
                               l2161 05F6                                 l2153 05E9  
                               l2049 06F7                                 l2171 062B  
                               l2163 05FB                                 l2155 05EC  
                               l2147 05DD                                 l2181 0660  
                               l2173 0644                                 l2165 0614  
                               l2157 05F0                                 l2149 05DE  
                               l2191 0674                                 l2183 0661  
                               l2175 0653                                 l2167 0621  
                               l2159 05F1                                 l2193 0676  
                               l2185 0663                                 l2177 0656  
                               l2169 0626                                 l2281 0BD1  
                               l2601 05A5                                 l2195 067D  
                               l2187 0669                                 l2179 065C  
                               l2603 05A6                                 l2197 0682  
                               l2189 066F                                 l2541 051B  
                               l2621 0BFA                                 l2199 069A  
                               l2279 0BCB                                 l2551 0533  
                               l2543 051C                                 l2607 05AF  
                               l2631 0C04                                 l2623 0BFC  
                               l2615 0BF3                                 l2535 0B84  
                               l2561 0546                                 l2553 0537  
                               l2545 0525                                 l2537 0518  
                               l2633 0C06                                 l2625 0BFE  
                               l2617 0BF6                                 l2641 0BAA  
                               l2643 0B8B                                 l2651 0C1A  
                               l2571 0561                                 l2563 054F  
                               l2555 0538                                 l2547 0529  
                               l2539 0519                                 l2635 0C07  
                               l2627 0BFF                                 l2619 0BF8  
                               l2645 0C4B                                 l2661 0DB8  
                               l2653 0DA9                                 l2581 0579  
                               l2573 0562                                 l2565 0553  
                               l2557 0541                                 l2549 052A  
                               l2637 0C09                                 l2629 0C02  
                               l2741 0CFA                                 l2733 0CED  
                               l2647 0BB6                                 l2671 0DD4  
                               l2663 0DBC                                 l2655 0DAA  
                               l2591 058C                                 l2583 057D  
                               l2575 056B                                 l2567 0554  
                               l2559 0545                                 l2639 0BA5  
                               l2751 0D0C                                 l2743 0CFD  
                               l2735 0CF0                                 l2649 0C0F  
                               l2681 0DE1                                 l2665 0DBD  
                               l2657 0DB0                                 l2593 0595  
                               l2585 057E                                 l2577 056F  
                               l2569 055D                                 l2761 0D1F  
                               l2753 0D12                                 l2745 0D00  
                               l2737 0CF4                                 l2683 0DED  
                               l2667 0DC2                                 l2659 0DB5  
                               l2827 05B7                                 l2595 0597  
                               l2587 0587                                 l2579 0570  
                               l2755 0D12                                 l2747 0D03  
                               l2739 0CF7                                 l2669 0DC8  
                               l2677 0DD6                                 l2597 0598  
                               l2589 058B                                 l2693 0B9E  
                               l2757 0D1B                                 l2749 0D06  
                               l2679 0DDB                                 l2599 05A1  
                               l2695 0B97                                 l2689 0DEF  
                               l2697 0B87                                 STR_1 07FE  
                               u1420 06F7                                 u1404 06DC  
                               u1421 06F6                                 u1405 06DB  
                               _LATA 010C                                 u1430 06FC  
                               u1414 06E9                                 _LATB 010D  
                               u1431 06FB                                 u1415 06E8  
                               u1370 06C0                                 u1371 06BF  
                               u1444 0701                                 u1380 06D2  
                               u1445 0700                                 u1381 06D1  
                               u1710 0626                                 u1454 070E  
                               u1390 06D7                                 u2510 0DDB  
                               u1711 0625                                 u1455 070D  
                               u1391 06D6                                 u2511 0DDA  
                               u1800 0682                                 u1720 062B  
                               u1704 0619                                 u2504 0DCD  
                               u1801 0681                                 u1721 062A  
                               u1705 0618                                 u2505 0DCC  
                               u1650 05E4                                 u2610 0D1B  
                               u1651 05E3                                 u2611 0D1A  
                               u1660 05F6                                 u2524 0DE6  
                               u1661 05F5                                 u2525 0DE5  
                               u1830 069F                                 u1814 0687  
                               u1734 0630                                 u1670 05FB  
                               u1831 069E                                 u1815 0686  
                               u1735 062F                                 u1671 05FA  
                               u1824 0692                                 u1760 065C  
                               u1744 063B                                 u2480 0DB0  
                               u1825 0691                                 u1761 065B  
                               u1745 063A                                 u2481 0DAF  
                               u1770 0669                                 u1754 0649  
                               u2490 0DC2                                 u1771 0668  
                               u1755 0648                                 u2491 0DC1  
                               u1844 06A4                                 u1780 066F  
                               u1684 0600                                 u1845 06A3  
                               u1781 066E                                 u1685 05FF  
                               u1854 06AF                                 u1790 067D  
                               u1694 060B                                 u1855 06AE  
                               u1791 067C                                 u1695 060A  
          _transToVoltageModeControl 0B9E                      _filteredFreqPot 00AE  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0CED                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0086            ??_setupInternalOscillator 00D2  
                              ??_abs 0072                                ?_main 00DB  
                    __end_of___lldiv 0F4A                                i1l110 0084  
                              i1l320 0775                                i1l251 0ED8  
                              i1l252 0EDA                                i1l326 0DA6  
                              i1l246 0EA4                                i1l255 0EEE  
                              i1l247 0EB7                                i1l440 0D5F  
                              i1l177 0CB9                                i1l531 0E94  
                              i1l372 0FFF                                i1l517 07FD  
                              i1l365 0FA4                                i1l437 07D0  
                              i1l462 0312                                i1l454 0515  
                              i1l534 0BCA                                i1l448 04F7  
                              i1l449 0515                                i1l545 0C8E  
                              i1l377 0430                                i1l722 0C36  
                              i1l379 043F                                i1l724 0C4A  
                              i1l572 0BB5                                i1l741 0E2C  
                              i1l742 0E3C                                i1l736 0CEC  
                              i1l758 0F49                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_754 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00D5  
                _initialiseADCModule 0B8B                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00D7                      __initialization 0088  
                       __end_of_main 0D25                    ?_initialiseADCPin 0070  
              _integratorScaledLimit 00A0                          i1_writeGPIO 0717  
                             ??_main 00DF                   ??_initialiseADCPin 00D2  
           __end_of_readFilteredVout 07D1                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00D8      __end_of_setupInternalOscillator 05DB  
setupInternalOscillator@selectedFreq 00D4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2021 0CD5  
                             i1l2013 0CBA                               i1l2101 0756  
                             i1l2023 0CE4                               i1l2015 0CC2  
                             i1l2111 0D68                               i1l2103 075B  
                             i1l2017 0CC6                               i1l2121 0D7A  
                             i1l2113 0D6D                               i1l2105 0768  
                             i1l2019 0CCE                               i1l2123 0D7F  
                             i1l2131 0D8D                               i1l2115 0D70  
                             i1l2107 0D61                               i1l2211 0EAA  
                             i1l2203 0E96                               i1l2301 0C2C  
                             i1l2061 0D5B                               i1l2133 0D92  
                             i1l2125 0D8B                               i1l2117 0D74  
                             i1l2109 0D62                               i1l2221 0EC2  
                             i1l2213 0EB0                               i1l2205 0E98  
                             i1l1182 0BF2                               i1l2311 0C46  
                             i1l2303 0C2E                               i1l2071 0DFB  
                             i1l2055 0D25                               i1l2135 0D97  
                             i1l2143 0DA5                               i1l2119 0D75  
                             i1l2231 0ED2                               i1l2223 0ECD  
                             i1l2215 0EB5                               i1l2207 0E9E  
                             u200_20 07DB                               i1l2321 0F0E  
                             i1l2305 0C32                               i1l2073 0E00  
                             i1l1185 0BF2                               i1l2065 0BD9  
                             i1l2057 0D2A                               i1l2137 0DA3  
                             u200_21 07D9                               i1l2081 0719  
                             i1l2233 0EDE                               i1l2217 0EBC  
                             i1l2209 0EA2                               i1l2401 0E4C  
                             i1l2331 0F34                               i1l2323 0F12  
                             i1l2315 0EEF                               i1l2307 0C3B  
                             i1l2075 0E10                               i1l2067 0BE6  
                             i1l2059 0D47                               i1l2251 00D9  
                             i1l2091 072C                               i1l2083 071F  
                             i1l2235 0EE2                               i1l2219 0EBE  
                             i1l2243 0EEC                               i1l2403 0E50  
                             i1l2333 0F3B                               i1l2325 0F19  
                             i1l2317 0F00                               i1l2309 0C40  
                             i1l2077 0E18                               i1l2069 0DF1  
                             i1l2261 01AF                               i1l2253 00E7  
                             i1l2093 0731                               i1l2085 0724  
                             i1l2341 0BC4                               i1l2237 0EE6  
                             i1l2229 0ECE                               i1l2413 0E67  
                             i1l2405 0E56                               i1l2327 0F2B  
                             i1l2319 0F03                               i1l2335 0F41  
                             i1l2271 0299                               i1l2263 01BF  
                             i1l2255 011B                               i1l2247 00B4  
                             i1l2095 0736                               i1l2087 0727  
                             i1l2079 0718                               i1l2351 0C86  
                             i1l2343 0C6B                               i1l2239 0EE7  
                             i1l2511 0FB5                               i1l2503 0FA5  
                             i1l2415 0E77                               i1l2407 0E66  
                             i1l2431 0786                               i1l2423 0776  
                             u201_20 07DC                               i1l2329 0F33  
                             i1l2273 02BB                               i1l2265 01CA  
                             i1l2257 012A                               i1l2249 00CA  
                             i1l2361 0440                               i1l2097 0743  
                             i1l2089 072B                               i1l2353 0C8C  
                             i1l2345 0C73                               i1l2513 0FB9  
                             i1l2417 0E7B                               i1l2433 078A  
                             i1l2275 02EC                               i1l2267 0217  
                             i1l2259 0185                               i1l2371 0458  
                             i1l2363 0447                               i1l2291 07FB  
                             i1l2283 07D1                               i1l2099 0751  
                             i1l2339 0BBF                               i1l2347 0C7E  
                             i1l2531 0FEC                               i1l2515 0FBF  
                             i1l2419 0E81                               i1l2451 07BD  
                             i1l2435 0790                               i1l2355 0C8F  
                             i1l2277 030E                               i1l2269 0267  
                             i1l2381 04EE                               i1l2373 045D  
                             i1l2365 044D                               i1l2293 07FC  
                             i1l2285 07EF                               i1l2349 0C82  
                             i1l2525 0FD2                               i1l2517 0FC8  
                             i1l2509 0FA7                               i1l2445 07A3  
                             i1l2437 0799                               i1l2429 0778  
                             i1l2461 0416                               i1l2357 0C92  
                             i1l2701 001B                               i1l2391 0510  
                             i1l2383 04F2                               i1l2367 044F  
                             i1l2287 07F1                               i1l2471 0F4A  
                             i1l2527 0FE2                               i1l2519 0FD1  
                             i1l2447 07B3                               i1l2439 07A2  
                             i1l2463 0422                               i1l2455 0313  
                             i1l2359 0C9D                               i1l2711 0035  
                             i1l2703 0021                               u210_20 0F00  
                             u202_20 07EA                               u210_21 0EFF  
                             i1l2385 04FB                               i1l2369 0455  
                             i1l2377 0490                               i1l2289 07F6  
                             u202_21 07E8                               i1l2297 0BAD  
                             i1l2481 0F5E                               i1l2529 0FE6  
                             i1l2393 0E3D                               i1l2449 07B7  
                             i1l2465 042C                               i1l2457 0319  
                             i1l2721 0053                               i1l2713 003D  
                             i1l2705 0024                               i1l2379 04EA  
                             i1l2299 0BB1                               i1l2483 0F64  
                             i1l2467 043A                               i1l2459 0323  
                             i1l2731 0083                               i1l2723 0063  
                             i1l2715 0045                               i1l2707 0029  
                             i1l2389 0506                               i1l2493 0F77  
                             i1l2485 0F6D                               i1l2477 0F4C  
                             i1l2469 043E                               i1l2725 006E  
                             i1l2717 004A                               i1l2709 002F  
                             i1l2495 0F87                               i1l2487 0F76  
                             i1l2479 0F5A                               i1l2399 0E3E  
                             i1l2727 0073                               i1l2719 004D  
                             u203_20 07EB                               i1l2497 0F8B  
                             i1l2729 0078                               i1l2499 0F91  
                             u211_25 0F04                               u212_20 0F12  
                             u204_20 07F6                               u220_20 0CB7  
                             u212_21 0F11                               u204_21 07F5  
                             u220_21 0CB4                               i1l2699 0006  
                             u133_20 0CC6                               u205_20 07FB  
                             u133_21 0CC5                               u205_21 07FA  
                             u221_24 0CB9                               u213_25 0F13  
                             u214_20 0F2B                               u206_20 0C32  
                             u150_20 0E2C                               u222_20 0447  
                             u230_20 0E81                               u214_21 0F2A  
                             u206_21 0C31                               u150_21 0E2B  
                             u222_21 0446                               u230_21 0E80  
                             u214_25 0F27                               u134_25 0CCF  
                             u223_20 044D                               u151_20 071F  
                             u231_20 0E8E                               u223_21 044C  
                             u151_21 071E                               u215_25 0F35  
                             u207_25 0C37                               u135_25 0CD6  
                             u231_25 0E8A                               u216_20 0F41  
                             u136_20 0CE4                               u160_20 0D68  
                             u224_20 0455                               u152_20 0731  
                             u232_20 0790                               u240_20 042C  
                             u216_21 0F40                               u136_21 0CE3  
                             u160_21 0D67                               u224_21 0454  
                             u152_21 0730                               u232_21 078F  
                             u240_21 042B                               u208_25 0C3C  
                             u240_25 0428                               u209_20 0C46  
                             u161_20 0D7A                               u225_20 04F2  
                             u153_20 0736                               u217_20 0C73  
                             u233_20 07BD                               u241_20 043A  
                             u209_21 0C45                               u161_21 0D79  
                             u225_21 04F1                               u153_21 0735  
                             u217_21 0C72                               u233_21 07BC  
                             u241_21 0439                               u241_25 0436  
                             u146_20 0D55                               u226_20 04FB  
                             u218_20 0C7E                               u242_20 0F64  
                             u234_20 07CA                               u226_21 04FA  
                             u218_21 0C7D                               u242_21 0F63  
                             u162_24 0D84                               u154_24 073B  
                             u146_25 0D51                               u162_25 0D83  
                             u154_25 073A                               u234_25 07C6  
                             u147_20 0BE6                               u163_20 0D92  
                             u227_20 0505                               u219_20 0C8C  
                             u243_20 0F91                               u235_20 0319  
                             u147_21 0BE5                               u163_21 0D91  
                             u227_21 0504                               u219_21 0C8B  
                             u243_21 0F90                               u235_21 0318  
                             u155_24 0748                               u147_25 0BE2  
                             u227_25 0501                               u155_25 0747  
                             u148_20 0DF8                               u228_20 0510  
                             u156_20 0756                               u244_20 0F9E  
                             u236_20 0323                               u260_20 0080  
                             u228_21 050F                               u156_21 0755  
                             u236_21 0322                               u164_24 0D9C  
                             u164_25 0D9B                               u228_25 050C  
                             u244_25 0F9A                               u149_20 0E00  
                             u157_20 075B                               u245_20 0FBF  
                             u229_20 0E56                               u237_20 0345  
                             u253_20 0021                               u149_21 0DFF  
                             u157_21 075A                               u245_21 0FBE  
                             u229_21 0E55                               u253_21 0020  
                             u237_25 0341                               u246_20 0FEC  
                             u238_20 0370                               u254_20 002F  
                             u246_21 0FEB                               u254_21 002E  
                             u158_24 0760                               u158_25 075F  
                             u190_25 0EC5                               u238_25 036C  
                             u191_20 0ED8                               u247_20 0FF9  
                             u239_20 040E                               u255_20 004A  
                             u191_21 0ED7                               u255_21 0049  
                             u159_24 076D                               u159_25 076C  
                             u247_25 0FF5                               u239_25 040A  
                             u192_20 0EDE                               u256_20 0053  
                             u192_21 0EDD                               u256_21 0052  
                             u193_20 00CA                               u257_20 006A  
                             u193_21 00C9                               u257_21 0068  
                             u194_20 01AF                               u186_20 0E9E  
                             u258_20 006B                               u194_21 01AE  
                             u186_21 0E9D                               u194_23 01AB  
                             u195_20 01CA                               u187_20 0EAA  
                             u259_20 007F                               u195_21 01C9  
                             u187_21 0EA9                               u259_21 007D  
                             u196_20 0217                               u188_20 0EB0  
                             u196_21 0216                               u188_21 0EAF  
                             u196_23 0213                      ??_runPotScaling 0026  
                             u197_20 0287                               u189_20 0EBC  
                             u189_21 0EBB                               u197_25 027E  
                             u198_20 02AA                               u198_25 02A6  
                             u199_20 02DA                               u199_25 02D1  
            initialiseGPIO@direction 00D2                     readGPIO@portType 00D9  
                readADCRaw@gpioValid 0077                               ___lmul 0CBA  
                             ___omul 0DF1                               ___wmul 0C2C  
                          ??___lldiv 0020                     __end_of_readGPIO 0DF1  
                     _controlRoutine 0440                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D2             _initialisePotentiometers 0BB6  
         initialiseADCPin@portNumber 00D6                     __end_of_setupPWM 0C0F  
                    _currentTripRead 07D1           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00B0               __end_of_controlRoutine 0516  
                     __pcstackCOMMON 0070               runPotScaling@potScaled 002C  
          initialiseADCPin@gpioValid 00D4                i1writeGPIO@gpioNumber 0074  
                      _currentILFIFO 0120                       _OPTION_REGbits 0095  
                  __end_of_Tick490Hz 0086                _runVoltageModeControl 00B4  
                         __pbssBANK0 005F                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0220          __end_of_transToInitialising 0B87  
                         __pmaintext 0CED                      ?_controlRoutine 0070  
                            ?___lmul 0070                              ?___omul 0020  
                            ?___wmul 0070    __end_of_transToVoltageModeControl 0BA5  
           ??_convertRawToMilliVolts 0020                           __pintentry 0004  
                            _CCP1CON 0293                  ___omul@multiplicand 0028  
                     ___lmul@product 0078              __end_of_currentTripRead 07FE  
        __end_of_setPWMDutyandPeriod 0CBA     __end_of_initialiseCurrentSensors 0C6B  
         __end_ofi1_currentTripReset 0BCB             initialiseADCPin@portType 00D5  
            _transToOverCurrentFault 0BAD                   i1readGPIO@portType 0077  
              readFilteredVout@i_836 0028                i1writeGPIO@portNumber 0075  
                         _filteredIL 00B0                            ?_readGPIO 0070  
                         _readADCRaw 0E95                  _readFilteredFreqPot 0FA5  
               i1readGPIO@gpioNumber 0078                  _readFilteredDutyPot 0F4A  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00D6                              ___lldiv 0EEF  
                       ?i1_writeGPIO 0070                 ?_readFilteredFreqPot 007A  
                            __ptext1 0B9E                              __ptext2 0B87  
                            __ptext3 0B84                              __ptext4 0B97  
                            __ptext5 0BA5                              __ptext6 0BF3  
                            __ptext7 0516                              __ptext8 0DA7  
                            __ptext9 0BB6                 ?_readFilteredDutyPot 007A  
       __end_of_initialiseController 0C2C                            _T2CONbits 001C  
                  ?_readFilteredVout 007A                              _setDuty 0063  
              i1writeGPIO@writeValue 0070               ?_runVoltageModeControl 0070  
                            _tripIDS 006B                   ??_readFilteredVout 0020  
                       ??i1_readGPIO 0070                              clrloop0 0B92  
               end_of_initialization 00B0      convertRawToMilliVolts@offsetted 0029  
                         ??_readGPIO 00D2                       ___omul@product 0071  
           ?_setupInternalOscillator 0070                      ___lldiv@divisor 0076  
                    ___lldiv@counter 0025                     _currentTripCount 0069  
                         ??_setupPWM 00D8                     _currentTripReset 0BCB  
         ??_initialisePotentiometers 00D8                           _prevPeriod 006D  
                  writeGPIO@portType 00D5                       _readFilteredIL 0E3D  
                 __end_ofi1_readGPIO 0DA7                ??_readFilteredFreqPot 0020  
              ??_readFilteredDutyPot 0020                 i1readGPIO@portNumber 0076  
                   ?_currentTripRead 0070                    __end_of_writeGPIO 0717  
          ??_transToOverCurrentFault 0070             initialiseGPIO@portNumber 00D7  
                       _filteredVout 005F          ??_transToCurrentModeControl 00D2  
                        ?_readADCRaw 0070                    _transToPotControl 0B87  
                        _CCP1CONbits 0293                        readGPIO@readA 00D4  
                      readGPIO@readB 00D6                __end_of_runPotScaling 0440  
                 ?_transToPotControl 0070            ?_initialiseCurrentSensors 0070  
               _voltageModeVariables 00B6               __end_of_readFilteredIL 0E95  
                ??_transToPotControl 00D2                       __end_of___lmul 0CED  
        __end_of_initialiseADCModule 0B91                       __end_of___omul 0E3D  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0C4B  
              controlRoutine@minDuty 005A                       _clockFrequency 00A8  
                start_initialization 0088         __end_of_setupTimer0Interrupt 0BAD  
                     _currentIDSFIFO 0140                          __end_of_abs 0BF3  
                          _Tick490Hz 0004               _convertRawToMilliVolts 0D25  
          __end_of_transToPotControl 0B8B     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0BB6           __end_of_currentTripMonitor 0C8F  
               _initialiseController 0C0F                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0B97                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D2  
                         ?_Tick490Hz 0070                     _initialiseADCPin 0651  
                       _currentState 006C                   i1_currentTripReset 0BBF  
                 readGPIO@gpioNumber 00DA                ?_initialiseController 0070  
                     _initialiseGPIO 05DB                      i1readGPIO@readA 0072  
                    i1readGPIO@readB 0074     __end_of_initialisePotentiometers 0BBF  
                ?i1_currentTripReset 0070                             ?___lldiv 0076  
         ?_transToVoltageModeControl 0070      runVoltageModeControl@newVoltage 0050  
      runVoltageModeControl@propMult 0048              ??_runVoltageModeControl 0030  
               ??i1_currentTripReset 0076             __end_of_currentTripReset 0BD9  
    readFilteredDutyPot@sumOfSamples 0024                       ___wmul@product 0074  
             __end_of_initialiseGPIO 0651                            clear_ram0 0B91  
                          _setPeriod 006E                             _PIE1bits 0091  
       setPWMDutyandPeriod@dutyCycle 0070                 _setupTimer0Interrupt 0BA5  
  runVoltageModeControl@integralMult 0040                  _currentTripRead$918 007A  
                        _filteredIDS 00B2                           _ADCON0bits 009D  
                  ___wmul@multiplier 0070                   readGPIO@portNumber 00D8  
                        _freqPotFIFO 01A0                            _writeGPIO 06B7  
                        ??_Tick490Hz 005E                    ___lmul@multiplier 0070  
                       ??_readADCRaw 0072               ??_initialiseController 00D8  
                    ?_initialiseGPIO 00D2         readFilteredVout@sumOfSamples 0024  
                  readADCRaw@channel 0076                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 1000          __end_of_readFilteredDutyPot 0FA5  
               runPotScaling@maxDuty 0030                 runPotScaling@minDuty 0032  
                writeGPIO@gpioNumber 00D6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0EEF             readFilteredFreqPot@i_758 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00D2  
                           __ptext10 0C4B                             __ptext11 0BCB  
                           __ptext20 0776                             __ptext12 06B7  
                           __ptext21 0E3D                             __ptext13 0C0F  
                           __ptext30 0440                             __ptext22 0FA5  
                           __ptext14 05DB                             __ptext31 00B4  
                           __ptext23 0F4A                             __ptext15 0651  
                           __ptext32 0D60                             __ptext24 0E95  
                           __ptext16 0B8B                             __ptext33 0D25  
                           __ptext25 0C6B                             __ptext34 0CBA  
                           __ptext26 0BBF                             __ptext18 0C8F  
                           __ptext35 0BD9                             __ptext27 0717  
                           __ptext19 0313                             __ptext36 0DF1  
                           __ptext28 0BAD                             __ptext37 0C2C  
                           __ptext29 07D1                             __ptext38 0EEF  
          ?_initialisePotentiometers 0070                          _dutyPotFIFO 0220  
                i1writeGPIO@portType 0073           readFilteredIL@sumOfSamples 0076  
                           _readGPIO 0DA7                             _latestIL 0061  
                   ??_readFilteredIL 0072                        _timerSlotHalf 0067  
                       _PSTR1CONbits 0296                             _prevDuty 00B4  
                           _setupPWM 0BF3                             int$flags 007E  
                           _slotTest 0065             __end_of_initialiseADCPin 06B7  
                           main@argc 00DB             ?_transToOverCurrentFault 0070  
                           main@argv 00DD                             _voutFIFO 01C0  
    readFilteredFreqPot@sumOfSamples 0024                   _currentTripMonitor 0C6B  
                   _timerSlotQuarter 0066       __end_of_convertRawToMilliVolts 0D60  
                         _INTCONbits 000B                  ?_currentTripMonitor 0070  
  __end_of_transToCurrentModeControl 0B9E                  _transToInitialising 0B84  
                writeGPIO@portNumber 00D7                             intlevel1 0000  
           _initialiseCurrentSensors 0C4B                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 0776               ??_setupTimer0Interrupt 00D2  
                         _OSCCONbits 0099          controlRoutine@setDuty_unreg 005C  
               ??_currentTripMonitor 007B                          _potSetCount 0068  
               ?_transToInitialising 0070                  _setPWMDutyandPeriod 0C8F  
            _setupInternalOscillator 0516          ??_transToVoltageModeControl 00D2  
                      ??i1_writeGPIO 0071                        __pstringtext1 07FE  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 0313  
                writeGPIO@writeValue 00D2                          ??_writeGPIO 00D3  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00D8                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 0313  
               readGPIO@returnValueA 00D5                 readGPIO@returnValueB 00D7  
                readFilteredIL@i_926 007A                      readFilteredIL@i 007B  
