

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Aug 07 13:43:48 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.40
    60                           ; Generated 17/11/2021 GMT
    61                           ; 
    62                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1827 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0212                     	;# 
   183  0213                     	;# 
   184  0213                     	;# 
   185  0214                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0219                     	;# 
   195  021A                     	;# 
   196  021B                     	;# 
   197  021C                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029E                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0318                     	;# 
   224  0318                     	;# 
   225  0319                     	;# 
   226  031A                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  0111                     	;# 
   301  0112                     	;# 
   302  0113                     	;# 
   303  0114                     	;# 
   304  0115                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011D                     	;# 
   312  011E                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0219                     	;# 
   353  021A                     	;# 
   354  021B                     	;# 
   355  021C                     	;# 
   356  021D                     	;# 
   357  021E                     	;# 
   358  021F                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  039A                     	;# 
   389  039C                     	;# 
   390  039D                     	;# 
   391  039E                     	;# 
   392  039F                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  041C                     	;# 
   397  041D                     	;# 
   398  041E                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0219                     	;# 
   511  021A                     	;# 
   512  021B                     	;# 
   513  021C                     	;# 
   514  021D                     	;# 
   515  021E                     	;# 
   516  021F                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0294                     	;# 
   522  0295                     	;# 
   523  0295                     	;# 
   524  0296                     	;# 
   525  0298                     	;# 
   526  0298                     	;# 
   527  0299                     	;# 
   528  029A                     	;# 
   529  029B                     	;# 
   530  029C                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0219                     	;# 
   669  021A                     	;# 
   670  021B                     	;# 
   671  021C                     	;# 
   672  021D                     	;# 
   673  021E                     	;# 
   674  021F                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0294                     	;# 
   680  0295                     	;# 
   681  0295                     	;# 
   682  0296                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029B                     	;# 
   688  029C                     	;# 
   689  029C                     	;# 
   690  029D                     	;# 
   691  029E                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0415                     	;# 
   710  0416                     	;# 
   711  0417                     	;# 
   712  041C                     	;# 
   713  041D                     	;# 
   714  041E                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  001E                     	;# 
   754  001F                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0219                     	;# 
   827  021A                     	;# 
   828  021B                     	;# 
   829  021C                     	;# 
   830  021D                     	;# 
   831  021E                     	;# 
   832  021F                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0295                     	;# 
   840  0296                     	;# 
   841  0298                     	;# 
   842  0298                     	;# 
   843  0299                     	;# 
   844  029A                     	;# 
   845  029B                     	;# 
   846  029C                     	;# 
   847  029C                     	;# 
   848  029D                     	;# 
   849  029E                     	;# 
   850  029E                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0016                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001C                     	;# 
   911  001E                     	;# 
   912  001F                     	;# 
   913  008C                     	;# 
   914  008D                     	;# 
   915  0091                     	;# 
   916  0092                     	;# 
   917  0093                     	;# 
   918  0094                     	;# 
   919  0095                     	;# 
   920  0096                     	;# 
   921  0097                     	;# 
   922  0098                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  0111                     	;# 
   933  0112                     	;# 
   934  0113                     	;# 
   935  0114                     	;# 
   936  0115                     	;# 
   937  0116                     	;# 
   938  0117                     	;# 
   939  0118                     	;# 
   940  0119                     	;# 
   941  011A                     	;# 
   942  011B                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019C                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  0211                     	;# 
   970  0211                     	;# 
   971  0212                     	;# 
   972  0212                     	;# 
   973  0213                     	;# 
   974  0213                     	;# 
   975  0214                     	;# 
   976  0214                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0216                     	;# 
   981  0216                     	;# 
   982  0217                     	;# 
   983  0217                     	;# 
   984  0219                     	;# 
   985  021A                     	;# 
   986  021B                     	;# 
   987  021C                     	;# 
   988  021D                     	;# 
   989  021E                     	;# 
   990  021F                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  039A                     	;# 
  1021  039C                     	;# 
  1022  039D                     	;# 
  1023  039E                     	;# 
  1024  039F                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  041C                     	;# 
  1029  041D                     	;# 
  1030  041E                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011A                     	;# 
  1100  011B                     	;# 
  1101  011D                     	;# 
  1102  011E                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0219                     	;# 
  1143  021A                     	;# 
  1144  021B                     	;# 
  1145  021C                     	;# 
  1146  021D                     	;# 
  1147  021E                     	;# 
  1148  021F                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029C                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  029E                     	;# 
  1167  0311                     	;# 
  1168  0311                     	;# 
  1169  0312                     	;# 
  1170  0313                     	;# 
  1171  0318                     	;# 
  1172  0318                     	;# 
  1173  0319                     	;# 
  1174  031A                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  041C                     	;# 
  1187  041D                     	;# 
  1188  041E                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  0011                     	;# 
  1215  0012                     	;# 
  1216  0013                     	;# 
  1217  0014                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0016                     	;# 
  1221  0017                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  0111                     	;# 
  1249  0112                     	;# 
  1250  0113                     	;# 
  1251  0114                     	;# 
  1252  0115                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0118                     	;# 
  1256  0119                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011D                     	;# 
  1260  011E                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  0191                     	;# 
  1264  0191                     	;# 
  1265  0192                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019D                     	;# 
  1281  019E                     	;# 
  1282  019F                     	;# 
  1283  020C                     	;# 
  1284  020D                     	;# 
  1285  0211                     	;# 
  1286  0211                     	;# 
  1287  0212                     	;# 
  1288  0212                     	;# 
  1289  0213                     	;# 
  1290  0213                     	;# 
  1291  0214                     	;# 
  1292  0214                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  0219                     	;# 
  1301  021A                     	;# 
  1302  021B                     	;# 
  1303  021C                     	;# 
  1304  021D                     	;# 
  1305  021E                     	;# 
  1306  021F                     	;# 
  1307  0291                     	;# 
  1308  0291                     	;# 
  1309  0292                     	;# 
  1310  0293                     	;# 
  1311  0294                     	;# 
  1312  0295                     	;# 
  1313  0295                     	;# 
  1314  0296                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029B                     	;# 
  1320  029C                     	;# 
  1321  029C                     	;# 
  1322  029D                     	;# 
  1323  029E                     	;# 
  1324  029E                     	;# 
  1325  0311                     	;# 
  1326  0311                     	;# 
  1327  0312                     	;# 
  1328  0313                     	;# 
  1329  0318                     	;# 
  1330  0318                     	;# 
  1331  0319                     	;# 
  1332  031A                     	;# 
  1333  0394                     	;# 
  1334  0395                     	;# 
  1335  0396                     	;# 
  1336  039A                     	;# 
  1337  039C                     	;# 
  1338  039D                     	;# 
  1339  039E                     	;# 
  1340  039F                     	;# 
  1341  0415                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  041C                     	;# 
  1345  041D                     	;# 
  1346  041E                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0013                     	;# 
  1375  0014                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008D                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0094                     	;# 
  1393  0095                     	;# 
  1394  0096                     	;# 
  1395  0097                     	;# 
  1396  0098                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  0111                     	;# 
  1407  0112                     	;# 
  1408  0113                     	;# 
  1409  0114                     	;# 
  1410  0115                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  0118                     	;# 
  1414  0119                     	;# 
  1415  011A                     	;# 
  1416  011B                     	;# 
  1417  011D                     	;# 
  1418  011E                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0219                     	;# 
  1459  021A                     	;# 
  1460  021B                     	;# 
  1461  021C                     	;# 
  1462  021D                     	;# 
  1463  021E                     	;# 
  1464  021F                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0294                     	;# 
  1470  0295                     	;# 
  1471  0295                     	;# 
  1472  0296                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029B                     	;# 
  1478  029C                     	;# 
  1479  029C                     	;# 
  1480  029D                     	;# 
  1481  029E                     	;# 
  1482  029E                     	;# 
  1483  0311                     	;# 
  1484  0311                     	;# 
  1485  0312                     	;# 
  1486  0313                     	;# 
  1487  0318                     	;# 
  1488  0318                     	;# 
  1489  0319                     	;# 
  1490  031A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  039A                     	;# 
  1495  039C                     	;# 
  1496  039D                     	;# 
  1497  039E                     	;# 
  1498  039F                     	;# 
  1499  0415                     	;# 
  1500  0416                     	;# 
  1501  0417                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  0011                     	;# 
  1531  0012                     	;# 
  1532  0013                     	;# 
  1533  0014                     	;# 
  1534  0015                     	;# 
  1535  0016                     	;# 
  1536  0016                     	;# 
  1537  0017                     	;# 
  1538  0018                     	;# 
  1539  0019                     	;# 
  1540  001A                     	;# 
  1541  001B                     	;# 
  1542  001C                     	;# 
  1543  001E                     	;# 
  1544  001F                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0098                     	;# 
  1555  0099                     	;# 
  1556  009A                     	;# 
  1557  009B                     	;# 
  1558  009B                     	;# 
  1559  009C                     	;# 
  1560  009D                     	;# 
  1561  009E                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  0111                     	;# 
  1565  0112                     	;# 
  1566  0113                     	;# 
  1567  0114                     	;# 
  1568  0115                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  0118                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011B                     	;# 
  1575  011D                     	;# 
  1576  011E                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  0191                     	;# 
  1580  0191                     	;# 
  1581  0192                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0199                     	;# 
  1589  019A                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  020C                     	;# 
  1600  020D                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  0219                     	;# 
  1617  021A                     	;# 
  1618  021B                     	;# 
  1619  021C                     	;# 
  1620  021D                     	;# 
  1621  021E                     	;# 
  1622  021F                     	;# 
  1623  0291                     	;# 
  1624  0291                     	;# 
  1625  0292                     	;# 
  1626  0293                     	;# 
  1627  0294                     	;# 
  1628  0295                     	;# 
  1629  0295                     	;# 
  1630  0296                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  029B                     	;# 
  1636  029C                     	;# 
  1637  029C                     	;# 
  1638  029D                     	;# 
  1639  029E                     	;# 
  1640  029E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0318                     	;# 
  1646  0318                     	;# 
  1647  0319                     	;# 
  1648  031A                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  039A                     	;# 
  1653  039C                     	;# 
  1654  039D                     	;# 
  1655  039E                     	;# 
  1656  039F                     	;# 
  1657  0415                     	;# 
  1658  0416                     	;# 
  1659  0417                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  000D                     _PORTB	set	13
  1675  000C                     _PORTA	set	12
  1676  001C                     _T2CONbits	set	28
  1677  001B                     _PR2	set	27
  1678  000B                     _INTCONbits	set	11
  1679  009B                     _ADRESL	set	155
  1680  009C                     _ADRESH	set	156
  1681  009D                     _ADCON0bits	set	157
  1682  008D                     _TRISB	set	141
  1683  008C                     _TRISA	set	140
  1684  009E                     _ADCON1	set	158
  1685  009D                     _ADCON0	set	157
  1686  0095                     _OPTION_REG	set	149
  1687  0095                     _OPTION_REGbits	set	149
  1688  0091                     _PIE1bits	set	145
  1689  0099                     _OSCCONbits	set	153
  1690  010D                     _LATB	set	269
  1691  010C                     _LATA	set	268
  1692  011D                     _APFCON0bits	set	285
  1693  018D                     _ANSELB	set	397
  1694  018C                     _ANSELA	set	396
  1695  0293                     _CCP1CONbits	set	659
  1696  0296                     _PSTR1CONbits	set	662
  1697  0291                     _CCPR1L	set	657
  1698  0293                     _CCP1CON	set	659
  1699                           
  1700                           	psect	stringtext1
  1701  07FA                     __pstringtext1:
  1702  07FA                     STR_1:
  1703  07FA  3428               	retlw	40	;'('
  1704  07FB  3428               	retlw	40	;'('
  1705  07FC  3449               	retlw	73	;'I'
  1706  07FD  344E               	retlw	78	;'N'
  1707  07FE  3454               	retlw	84	;'T'
  1708  07FF  3443               	retlw	67	;'C'
  1709  0800  344F               	retlw	79	;'O'
  1710  0801  344E               	retlw	78	;'N'
  1711  0802  3429               	retlw	41	;')'
  1712  0803  3426               	retlw	38	;'&'
  1713  0804  3430               	retlw	48	;'0'
  1714  0805  3437               	retlw	55	;'7'
  1715  0806  3446               	retlw	70	;'F'
  1716  0807  3468               	retlw	104	;'h'
  1717  0808  3429               	retlw	41	;')'
  1718  0809  342C               	retlw	44	;','
  1719  080A  3432               	retlw	50	;'2'
  1720  080B  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext2
  1723  0000                     __pstringtext2:
  1724  07FA                     
  1725                           	psect	cinit
  1726  00A8                     start_initialization:	
  1727                           ; #config settings
  1728                           
  1729  00A8                     __initialization:
  1730                           
  1731                           ; Clear objects allocated to BANK0
  1732  00A8  305D               	movlw	low __pbssBANK0
  1733  00A9  0084               	movwf	4
  1734  00AA  3000               	movlw	high __pbssBANK0
  1735  00AB  0085               	movwf	5
  1736  00AC  3012               	movlw	18
  1737  00AD  318C  240E  3180   	fcall	clear_ram0
  1738                           
  1739                           ; Clear objects allocated to BANK1
  1740  00B0  30A0               	movlw	low __pbssBANK1
  1741  00B1  0084               	movwf	4
  1742  00B2  3000               	movlw	high __pbssBANK1
  1743  00B3  0085               	movwf	5
  1744  00B4  3042               	movlw	66
  1745  00B5  318C  240E  3180   	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK2
  1748  00B8  3020               	movlw	low __pbssBANK2
  1749  00B9  0084               	movwf	4
  1750  00BA  3001               	movlw	high __pbssBANK2
  1751  00BB  0085               	movwf	5
  1752  00BC  3042               	movlw	66
  1753  00BD  318C  240E  3180   	fcall	clear_ram0
  1754                           
  1755                           ; Clear objects allocated to BANK3
  1756  00C0  30A0               	movlw	low __pbssBANK3
  1757  00C1  0084               	movwf	4
  1758  00C2  3001               	movlw	high __pbssBANK3
  1759  00C3  0085               	movwf	5
  1760  00C4  3040               	movlw	64
  1761  00C5  318C  240E  3180   	fcall	clear_ram0
  1762                           
  1763                           ; Clear objects allocated to BANK4
  1764  00C8  3020               	movlw	low __pbssBANK4
  1765  00C9  0084               	movwf	4
  1766  00CA  3002               	movlw	high __pbssBANK4
  1767  00CB  0085               	movwf	5
  1768  00CC  3020               	movlw	32
  1769  00CD  318C  240E  3180   	fcall	clear_ram0
  1770  00D0                     end_of_initialization:	
  1771                           ;End of C runtime variable initialization code
  1772                           
  1773  00D0                     __end_of__initialization:
  1774  00D0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1775  00D1  0020               	movlb	0
  1776  00D2  318D  2D85         	ljmp	_main	;jump to C main() function
  1777                           
  1778                           	psect	bssBANK0
  1779  005D                     __pbssBANK0:
  1780  005D                     _filteredVout:
  1781  005D                     	ds	2
  1782  005F                     _filteredIL:
  1783  005F                     	ds	2
  1784  0061                     _latestIL:
  1785  0061                     	ds	2
  1786  0063                     _setDuty:
  1787  0063                     	ds	2
  1788  0065                     _slotTest:
  1789  0065                     	ds	1
  1790  0066                     _timerSlotQuarter:
  1791  0066                     	ds	1
  1792  0067                     _timerSlotHalf:
  1793  0067                     	ds	1
  1794  0068                     _potSetCount:
  1795  0068                     	ds	1
  1796  0069                     _tripIL:
  1797  0069                     	ds	1
  1798  006A                     _tripIDS:
  1799  006A                     	ds	1
  1800  006B                     _currentTripCount:
  1801  006B                     	ds	1
  1802  006C                     _currentState:
  1803  006C                     	ds	1
  1804  006D                     _prevPeriod:
  1805  006D                     	ds	1
  1806  006E                     _setPeriod:
  1807  006E                     	ds	1
  1808                           
  1809                           	psect	bssBANK1
  1810  00A0                     __pbssBANK1:
  1811  00A0                     _currentModeVariables:
  1812  00A0                     	ds	28
  1813  00BC                     _clockFrequency:
  1814  00BC                     	ds	4
  1815  00C0                     _filteredFreqPot:
  1816  00C0                     	ds	2
  1817  00C2                     _filteredIDS:
  1818  00C2                     	ds	2
  1819  00C4                     _prevDuty:
  1820  00C4                     	ds	2
  1821  00C6                     _voltageModeVariables:
  1822  00C6                     	ds	28
  1823                           
  1824                           	psect	bssBANK2
  1825  0120                     __pbssBANK2:
  1826  0120                     _currentILFIFO:
  1827  0120                     	ds	32
  1828  0140                     _currentIDSFIFO:
  1829  0140                     	ds	32
  1830  0160                     _filteredDutyPot:
  1831  0160                     	ds	2
  1832                           
  1833                           	psect	bssBANK3
  1834  01A0                     __pbssBANK3:
  1835  01A0                     _freqPotFIFO:
  1836  01A0                     	ds	32
  1837  01C0                     _voutFIFO:
  1838  01C0                     	ds	32
  1839                           
  1840                           	psect	bssBANK4
  1841  0220                     __pbssBANK4:
  1842  0220                     _dutyPotFIFO:
  1843  0220                     	ds	32
  1844                           
  1845                           	psect	clrtext
  1846  0C0E                     clear_ram0:	
  1847                           ;	Called with FSR0 containing the base address, and
  1848                           ;	WREG with the size to clear
  1849                           
  1850  0C0E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1851  0C0F                     clrloop0:
  1852  0C0F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1853  0C10  3101               	addfsr 0,1
  1854  0C11  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1855  0C12  2C0F               	goto	clrloop0	;have we reached the end yet?
  1856  0C13  3400               	retlw	0	;all done for this memory range, return
  1857                           
  1858                           	psect	cstackBANK1
  1859  00E2                     __pcstackBANK1:
  1860  00E2                     ?_writeGPIO:
  1861  00E2                     ??_setupInternalOscillator:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  00E2                     ??_setupTimer0Interrupt:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00E2                     ??_initialiseADCModule:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00E2                     ?_initialiseGPIO:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00E2                     ??_readGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00E2                     ??_transToVoltageModeControl:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00E2                     ??_transToCurrentModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00E2                     ??_transToPotControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00E2                     ??_initialiseADCPin:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00E2                     initialiseGPIO@direction:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00E2                     writeGPIO@writeValue:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894                           
  1895                           ; 1 bytes @ 0x0
  1896  00E2                     	ds	1
  1897  00E3                     ??_writeGPIO:
  1898  00E3                     ??_initialiseGPIO:	
  1899                           ; 1 bytes @ 0x1
  1900                           
  1901                           
  1902                           ; 1 bytes @ 0x1
  1903  00E3                     	ds	1
  1904  00E4                     setupInternalOscillator@selectedFreq:
  1905  00E4                     initialiseADCPin@gpioValid:	
  1906                           ; 1 bytes @ 0x2
  1907                           
  1908  00E4                     readGPIO@readA:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911                           
  1912                           ; 1 bytes @ 0x2
  1913  00E4                     	ds	1
  1914  00E5                     initialiseADCPin@portType:
  1915  00E5                     initialiseGPIO@portType:	
  1916                           ; 1 bytes @ 0x3
  1917                           
  1918  00E5                     writeGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00E5                     readGPIO@returnValueA:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924                           
  1925                           ; 1 bytes @ 0x3
  1926  00E5                     	ds	1
  1927  00E6                     initialiseADCPin@portNumber:
  1928  00E6                     initialiseGPIO@gpioNumber:	
  1929                           ; 1 bytes @ 0x4
  1930                           
  1931  00E6                     writeGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00E6                     readGPIO@readB:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937                           
  1938                           ; 1 bytes @ 0x4
  1939  00E6                     	ds	1
  1940  00E7                     initialiseADCPin@gpioNumber:
  1941  00E7                     initialiseGPIO@portNumber:	
  1942                           ; 1 bytes @ 0x5
  1943                           
  1944  00E7                     writeGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00E7                     readGPIO@returnValueB:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950                           
  1951                           ; 1 bytes @ 0x5
  1952  00E7                     	ds	1
  1953  00E8                     ??_currentTripReset:
  1954  00E8                     ??_setupPWM:	
  1955                           ; 1 bytes @ 0x6
  1956                           
  1957  00E8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00E8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00E8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00E8                     readGPIO@portNumber:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969                           
  1970                           ; 1 bytes @ 0x6
  1971  00E8                     	ds	1
  1972  00E9                     readGPIO@portType:
  1973                           
  1974                           ; 1 bytes @ 0x7
  1975  00E9                     	ds	1
  1976  00EA                     readGPIO@gpioNumber:
  1977                           
  1978                           ; 1 bytes @ 0x8
  1979  00EA                     	ds	1
  1980  00EB                     ?_main:
  1981  00EB                     main@argc:	
  1982                           ; 2 bytes @ 0x9
  1983                           
  1984                           
  1985                           ; 2 bytes @ 0x9
  1986  00EB                     	ds	2
  1987  00ED                     main@argv:
  1988                           
  1989                           ; 2 bytes @ 0xB
  1990  00ED                     	ds	2
  1991  00EF                     ??_main:
  1992                           
  1993                           	psect	cstackCOMMON
  1994  0070                     __pcstackCOMMON:	
  1995                           ; 1 bytes @ 0xD
  1996                           
  1997  0070                     ?_currentTripRead:
  1998  0070                     ?_transToOverCurrentFault:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ??_transToOverCurrentFault:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_currentTripReset:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_setPWMDutyandPeriod:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_controlRoutine:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_runPotScaling:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_setupInternalOscillator:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_setupPWM:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_setupTimer0Interrupt:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialiseADCModule:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_initialiseCurrentSensors:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_initialisePotentiometers:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_initialiseController:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_readGPIO:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_transToVoltageModeControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_transToCurrentModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_transToPotControl:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_runVoltageModeControl:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_runCurrentModeControl:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick980Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ??___omul:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?i1_writeGPIO:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_readGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ??i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ?i1_currentTripReset:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_readFilteredIL:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_abs:	
  2080                           ; 2 bytes @ 0x0
  2081                           
  2082  0070                     ?_readADCRaw:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?___wmul:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?___lmul:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     i1writeGPIO@writeValue:	
  2092                           ; 4 bytes @ 0x0
  2093                           
  2094  0070                     setPWMDutyandPeriod@dutyCycle:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ___wmul@multiplier:	
  2098                           ; 2 bytes @ 0x0
  2099                           
  2100  0070                     abs@a:	
  2101                           ; 2 bytes @ 0x0
  2102                           
  2103  0070                     ___lmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106                           
  2107                           ; 4 bytes @ 0x0
  2108  0070                     	ds	1
  2109  0071                     ??i1_writeGPIO:
  2110  0071                     ___omul@product:	
  2111                           ; 1 bytes @ 0x1
  2112                           
  2113                           
  2114                           ; 8 bytes @ 0x1
  2115  0071                     	ds	1
  2116  0072                     ??_readFilteredIL:
  2117  0072                     ??_abs:	
  2118                           ; 1 bytes @ 0x2
  2119                           
  2120  0072                     ??_readADCRaw:	
  2121                           ; 1 bytes @ 0x2
  2122                           
  2123  0072                     setPWMDutyandPeriod@period:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     i1readGPIO@readA:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     ___wmul@multiplicand:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132                           
  2133                           ; 2 bytes @ 0x2
  2134  0072                     	ds	1
  2135  0073                     ??_setPWMDutyandPeriod:
  2136  0073                     i1writeGPIO@portType:	
  2137                           ; 1 bytes @ 0x3
  2138                           
  2139  0073                     i1readGPIO@returnValueA:	
  2140                           ; 1 bytes @ 0x3
  2141                           
  2142                           
  2143                           ; 1 bytes @ 0x3
  2144  0073                     	ds	1
  2145  0074                     ??___wmul:
  2146  0074                     i1writeGPIO@gpioNumber:	
  2147                           ; 1 bytes @ 0x4
  2148                           
  2149  0074                     i1readGPIO@readB:	
  2150                           ; 1 bytes @ 0x4
  2151                           
  2152  0074                     readADCRaw@returnValue:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     ___wmul@product:	
  2156                           ; 2 bytes @ 0x4
  2157                           
  2158  0074                     ___lmul@multiplicand:	
  2159                           ; 2 bytes @ 0x4
  2160                           
  2161                           
  2162                           ; 4 bytes @ 0x4
  2163  0074                     	ds	1
  2164  0075                     i1writeGPIO@portNumber:
  2165  0075                     i1readGPIO@returnValueB:	
  2166                           ; 1 bytes @ 0x5
  2167                           
  2168                           
  2169                           ; 1 bytes @ 0x5
  2170  0075                     	ds	1
  2171  0076                     ??i1_currentTripReset:
  2172  0076                     ?_convertRawToMilliAmps:	
  2173                           ; 1 bytes @ 0x6
  2174                           
  2175  0076                     ?___lldiv:	
  2176                           ; 2 bytes @ 0x6
  2177                           
  2178  0076                     readADCRaw@channel:	
  2179                           ; 4 bytes @ 0x6
  2180                           
  2181  0076                     i1readGPIO@portNumber:	
  2182                           ; 1 bytes @ 0x6
  2183                           
  2184  0076                     convertRawToMilliAmps@rawValue:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187  0076                     readFilteredIL@sumOfSamples:	
  2188                           ; 2 bytes @ 0x6
  2189                           
  2190  0076                     ___lldiv@divisor:	
  2191                           ; 4 bytes @ 0x6
  2192                           
  2193                           
  2194                           ; 4 bytes @ 0x6
  2195  0076                     	ds	1
  2196  0077                     readADCRaw@gpioValid:
  2197  0077                     i1readGPIO@portType:	
  2198                           ; 1 bytes @ 0x7
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x7
  2202  0077                     	ds	1
  2203  0078                     ??_convertRawToMilliAmps:
  2204  0078                     ??___lmul:	
  2205                           ; 1 bytes @ 0x8
  2206                           
  2207  0078                     readADCRaw@i:	
  2208                           ; 1 bytes @ 0x8
  2209                           
  2210  0078                     i1readGPIO@gpioNumber:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213  0078                     convertRawToMilliAmps@offsetted:	
  2214                           ; 1 bytes @ 0x8
  2215                           
  2216  0078                     ___lmul@product:	
  2217                           ; 2 bytes @ 0x8
  2218                           
  2219                           
  2220                           ; 4 bytes @ 0x8
  2221  0078                     	ds	1
  2222  0079                     ??_currentTripRead:
  2223  0079                     readADCRaw@i_661:	
  2224                           ; 1 bytes @ 0x9
  2225                           
  2226                           
  2227                           ; 1 bytes @ 0x9
  2228  0079                     	ds	1
  2229  007A                     readADCRaw@i_663:
  2230  007A                     _currentTripRead$936:	
  2231                           ; 1 bytes @ 0xA
  2232                           
  2233  007A                     readFilteredIL@i_944:	
  2234                           ; 1 bytes @ 0xA
  2235                           
  2236  007A                     convertRawToMilliAmps@returnValuemA:	
  2237                           ; 1 bytes @ 0xA
  2238                           
  2239  007A                     ___lldiv@dividend:	
  2240                           ; 2 bytes @ 0xA
  2241                           
  2242                           
  2243                           ; 4 bytes @ 0xA
  2244  007A                     	ds	1
  2245  007B                     readADCRaw@gpioNumber:
  2246  007B                     readFilteredIL@i:	
  2247                           ; 1 bytes @ 0xB
  2248                           
  2249                           
  2250                           ; 1 bytes @ 0xB
  2251  007B                     	ds	1
  2252  007C                     ??_runCurrentModeControl:
  2253  007C                     ?_readFilteredVout:	
  2254                           ; 1 bytes @ 0xC
  2255                           
  2256  007C                     ?_readFilteredDutyPot:	
  2257                           ; 2 bytes @ 0xC
  2258                           
  2259  007C                     ?_readFilteredFreqPot:	
  2260                           ; 2 bytes @ 0xC
  2261                           
  2262  007C                     ?_convertRawToMilliVolts:	
  2263                           ; 2 bytes @ 0xC
  2264                           
  2265  007C                     convertRawToMilliVolts@rawValue:	
  2266                           ; 2 bytes @ 0xC
  2267                           
  2268                           
  2269                           ; 2 bytes @ 0xC
  2270  007C                     	ds	2
  2271                           
  2272                           	psect	cstackBANK0
  2273  0020                     __pcstackBANK0:
  2274  0020                     ??_readFilteredVout:
  2275  0020                     ??_readFilteredDutyPot:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0020                     ??_readFilteredFreqPot:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0020                     ??_convertRawToMilliVolts:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0020                     ??___lldiv:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0020                     ?___omul:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0020                     ___omul@multiplier:	
  2291                           ; 8 bytes @ 0x0
  2292                           
  2293                           
  2294                           ; 8 bytes @ 0x0
  2295  0020                     	ds	1
  2296  0021                     ___lldiv@quotient:
  2297                           
  2298                           ; 4 bytes @ 0x1
  2299  0021                     	ds	3
  2300  0024                     readFilteredDutyPot@sumOfSamples:
  2301  0024                     readFilteredFreqPot@sumOfSamples:	
  2302                           ; 4 bytes @ 0x4
  2303                           
  2304  0024                     readFilteredVout@sumOfSamples:	
  2305                           ; 4 bytes @ 0x4
  2306                           
  2307                           
  2308                           ; 4 bytes @ 0x4
  2309  0024                     	ds	1
  2310  0025                     ___lldiv@counter:
  2311  0025                     convertRawToMilliVolts@vsenseMult:	
  2312                           ; 1 bytes @ 0x5
  2313                           
  2314                           
  2315                           ; 4 bytes @ 0x5
  2316  0025                     	ds	1
  2317  0026                     ??_runPotScaling:
  2318                           
  2319                           ; 1 bytes @ 0x6
  2320  0026                     	ds	2
  2321  0028                     readFilteredDutyPot@i_764:
  2322  0028                     readFilteredFreqPot@i_768:	
  2323                           ; 1 bytes @ 0x8
  2324                           
  2325  0028                     readFilteredVout@i_861:	
  2326                           ; 1 bytes @ 0x8
  2327                           
  2328  0028                     ___omul@multiplicand:	
  2329                           ; 1 bytes @ 0x8
  2330                           
  2331                           
  2332                           ; 8 bytes @ 0x8
  2333  0028                     	ds	1
  2334  0029                     readFilteredDutyPot@i:
  2335  0029                     readFilteredFreqPot@i:	
  2336                           ; 1 bytes @ 0x9
  2337                           
  2338  0029                     readFilteredVout@i:	
  2339                           ; 1 bytes @ 0x9
  2340                           
  2341  0029                     convertRawToMilliVolts@offsetted:	
  2342                           ; 1 bytes @ 0x9
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x9
  2346  0029                     	ds	2
  2347  002B                     convertRawToMilliVolts@returnValuedV:
  2348                           
  2349                           ; 2 bytes @ 0xB
  2350  002B                     	ds	3
  2351  002E                     runPotScaling@maxDuty:
  2352                           
  2353                           ; 2 bytes @ 0xE
  2354  002E                     	ds	2
  2355  0030                     ??_runVoltageModeControl:
  2356  0030                     runPotScaling@minDuty:	
  2357                           ; 1 bytes @ 0x10
  2358                           
  2359                           
  2360                           ; 2 bytes @ 0x10
  2361  0030                     	ds	16
  2362  0040                     runVoltageModeControl@integralMult:
  2363                           
  2364                           ; 8 bytes @ 0x20
  2365  0040                     	ds	8
  2366  0048                     runVoltageModeControl@propMult:
  2367                           
  2368                           ; 8 bytes @ 0x28
  2369  0048                     	ds	8
  2370  0050                     runVoltageModeControl@newVoltage:
  2371                           
  2372                           ; 2 bytes @ 0x30
  2373  0050                     	ds	2
  2374  0052                     ??_controlRoutine:
  2375                           
  2376                           ; 1 bytes @ 0x32
  2377  0052                     	ds	6
  2378  0058                     controlRoutine@maxDuty:
  2379                           
  2380                           ; 2 bytes @ 0x38
  2381  0058                     	ds	2
  2382  005A                     controlRoutine@minDuty:
  2383                           
  2384                           ; 2 bytes @ 0x3A
  2385  005A                     	ds	2
  2386  005C                     ??_Tick980Hz:
  2387                           
  2388                           ; 1 bytes @ 0x3C
  2389  005C                     	ds	1
  2390                           
  2391                           	psect	maintext
  2392  0D85                     __pmaintext:	
  2393 ;;
  2394 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2395 ;;
  2396 ;; *************** function _main *****************
  2397 ;; Defined at:
  2398 ;;		line 120 in file "main.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  argc            2    9[BANK1 ] int 
  2401 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  2    9[BANK1 ] int 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : B1F/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2413 ;;      Params:         0       0       4       0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0
  2416 ;;      Totals:         0       0       4       0       0       0
  2417 ;;Total ram usage:        4 bytes
  2418 ;; Hardware stack levels required when called: 8
  2419 ;; This function calls:
  2420 ;;		_initialiseADCModule
  2421 ;;		_initialiseController
  2422 ;;		_initialiseCurrentSensors
  2423 ;;		_initialiseGPIO
  2424 ;;		_initialisePotentiometers
  2425 ;;		_readGPIO
  2426 ;;		_setupInternalOscillator
  2427 ;;		_setupPWM
  2428 ;;		_setupTimer0Interrupt
  2429 ;;		_transToCurrentModeControl
  2430 ;;		_transToPotControl
  2431 ;;		_transToVoltageModeControl
  2432 ;; This function is called by:
  2433 ;;		Startup code after reset
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437  0D85                     _main:	
  2438                           ;psect for function _main
  2439                           
  2440  0D85                     l2771:	
  2441                           ;incstack = 0
  2442                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2443                           
  2444                           
  2445                           ;main.c: 122:     setupInternalOscillator(freq32M);
  2446  0D85  300A               	movlw	10
  2447  0D86  3184  2491  318D   	fcall	_setupInternalOscillator
  2448  0D89                     l2773:
  2449                           
  2450                           ;main.c: 124:     setupPWM();
  2451  0D89  318C  249F  318D   	fcall	_setupPWM
  2452  0D8C                     l2775:
  2453                           
  2454                           ;main.c: 125:     setupTimer0Interrupt();
  2455  0D8C  318C  2422  318D   	fcall	_setupTimer0Interrupt
  2456  0D8F                     l2777:
  2457                           
  2458                           ;main.c: 126:     initialiseADCModule();
  2459  0D8F  318C  2408  318D   	fcall	_initialiseADCModule
  2460  0D92                     l2779:
  2461                           
  2462                           ;main.c: 127:     initialiseCurrentSensors();
  2463  0D92  318C  24DA  318D   	fcall	_initialiseCurrentSensors
  2464  0D95                     l2781:
  2465                           
  2466                           ;main.c: 128:     initialisePotentiometers();
  2467  0D95  318C  243C  318D   	fcall	_initialisePotentiometers
  2468  0D98                     l2783:
  2469                           
  2470                           ;main.c: 129:     initialiseController();
  2471  0D98  318C  2451  318D   	fcall	_initialiseController
  2472  0D9B                     l2785:
  2473                           
  2474                           ;main.c: 131:     initialiseGPIO(pinRB4, 0);
  2475  0D9B  0021               	movlb	1	; select bank1
  2476  0D9C  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2477  0D9D  300C               	movlw	12
  2478  0D9E  3185  2556  318D   	fcall	_initialiseGPIO
  2479  0DA1                     l2787:
  2480                           
  2481                           ;main.c: 132:     initialiseGPIO(pinRB5, 0);
  2482  0DA1  0021               	movlb	1	; select bank1
  2483  0DA2  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2484  0DA3  300D               	movlw	13
  2485  0DA4  3185  2556  318D   	fcall	_initialiseGPIO
  2486  0DA7                     l2789:
  2487  0DA7                     l2791:	
  2488                           ;main.c: 134:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2489                           
  2490                           
  2491                           ;main.c: 137:         if(1 == 1) transToVoltageModeControl();
  2492  0DA7  3008               	movlw	8
  2493  0DA8  318E  2601  318D   	fcall	_readGPIO
  2494  0DAB  3A01               	xorlw	1
  2495  0DAC  1903               	skipnz
  2496  0DAD  2DAF               	goto	u2551
  2497  0DAE  2DB0               	goto	u2550
  2498  0DAF                     u2551:
  2499  0DAF  2DB4               	goto	l2797
  2500  0DB0                     u2550:
  2501  0DB0                     l2793:
  2502  0DB0  318C  241B  318D   	fcall	_transToVoltageModeControl
  2503  0DB3  2DB7               	goto	l125
  2504  0DB4                     l2797:
  2505  0DB4  318C  2404  318D   	fcall	_transToPotControl
  2506  0DB7                     l125:	
  2507                           ;main.c: 142:     while(1){
  2508                           
  2509  0DB7  2DB7               	goto	l125
  2510  0DB8  3180  28A6         	ljmp	start
  2511  0DBA                     __end_of_main:
  2512                           
  2513                           	psect	text1
  2514  0C1B                     __ptext1:	
  2515 ;; *************** function _transToVoltageModeControl *****************
  2516 ;; Defined at:
  2517 ;;		line 27 in file "StateMachine.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;		None
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2531 ;;      Params:         0       0       0       0       0       0
  2532 ;;      Locals:         0       0       0       0       0       0
  2533 ;;      Temps:          0       0       1       0       0       0
  2534 ;;      Totals:         0       0       1       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used: 1
  2537 ;; Hardware stack levels required when called: 5
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545  0C1B                     _transToVoltageModeControl:	
  2546                           ;psect for function _transToVoltageModeControl
  2547                           
  2548  0C1B                     l2715:	
  2549                           ;incstack = 0
  2550                           ; Regs used in _transToVoltageModeControl: [wreg]
  2551                           
  2552                           
  2553                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2554  0C1B  3002               	movlw	2
  2555  0C1C  0021               	movlb	1	; select bank1
  2556  0C1D  00E2               	movwf	??_transToVoltageModeControl^(0+128)
  2557  0C1E  0862               	movf	??_transToVoltageModeControl^(0+128),w
  2558  0C1F  0020               	movlb	0	; select bank0
  2559  0C20  00EC               	movwf	_currentState
  2560  0C21                     l572:
  2561  0C21  0008               	return
  2562  0C22                     __end_of_transToVoltageModeControl:
  2563                           
  2564                           	psect	text2
  2565  0C04                     __ptext2:	
  2566 ;; *************** function _transToPotControl *****************
  2567 ;; Defined at:
  2568 ;;		line 18 in file "StateMachine.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;		None
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;		None
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		None
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2582 ;;      Params:         0       0       0       0       0       0
  2583 ;;      Locals:         0       0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0
  2585 ;;      Totals:         0       0       0       0       0       0
  2586 ;;Total ram usage:        0 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; Hardware stack levels required when called: 5
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596  0C04                     _transToPotControl:	
  2597                           ;psect for function _transToPotControl
  2598                           
  2599  0C04                     l2719:	
  2600                           ;incstack = 0
  2601                           ; Regs used in _transToPotControl: []
  2602                           
  2603                           
  2604                           ;StateMachine.c: 19:     currentState = potControl;
  2605  0C04  0020               	movlb	0	; select bank0
  2606  0C05  01EC               	clrf	_currentState
  2607  0C06  0AEC               	incf	_currentState,f
  2608  0C07                     l569:
  2609  0C07  0008               	return
  2610  0C08                     __end_of_transToPotControl:
  2611                           
  2612                           	psect	text3
  2613  0C14                     __ptext3:	
  2614 ;; *************** function _transToCurrentModeControl *****************
  2615 ;; Defined at:
  2616 ;;		line 36 in file "StateMachine.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2630 ;;      Params:         0       0       0       0       0       0
  2631 ;;      Locals:         0       0       0       0       0       0
  2632 ;;      Temps:          0       0       1       0       0       0
  2633 ;;      Totals:         0       0       1       0       0       0
  2634 ;;Total ram usage:        1 bytes
  2635 ;; Hardware stack levels used: 1
  2636 ;; Hardware stack levels required when called: 5
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644  0C14                     _transToCurrentModeControl:	
  2645                           ;psect for function _transToCurrentModeControl
  2646                           
  2647  0C14                     l2717:	
  2648                           ;incstack = 0
  2649                           ; Regs used in _transToCurrentModeControl: [wreg]
  2650                           
  2651                           
  2652                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2653  0C14  3003               	movlw	3
  2654  0C15  0021               	movlb	1	; select bank1
  2655  0C16  00E2               	movwf	??_transToCurrentModeControl^(0+128)
  2656  0C17  0862               	movf	??_transToCurrentModeControl^(0+128),w
  2657  0C18  0020               	movlb	0	; select bank0
  2658  0C19  00EC               	movwf	_currentState
  2659  0C1A                     l575:
  2660  0C1A  0008               	return
  2661  0C1B                     __end_of_transToCurrentModeControl:
  2662                           
  2663                           	psect	text4
  2664  0C22                     __ptext4:	
  2665 ;; *************** function _setupTimer0Interrupt *****************
  2666 ;; Defined at:
  2667 ;;		line 17 in file "Timer0.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2681 ;;      Params:         0       0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0
  2684 ;;      Totals:         0       0       0       0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 5
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695  0C22                     _setupTimer0Interrupt:	
  2696                           ;psect for function _setupTimer0Interrupt
  2697                           
  2698  0C22                     l2663:	
  2699                           ;incstack = 0
  2700                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2701                           
  2702                           
  2703                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2704  0C22  178B               	bsf	11,7	;volatile
  2705                           
  2706                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2707  0C23  168B               	bsf	11,5	;volatile
  2708                           
  2709                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2710  0C24  0021               	movlb	1	; select bank1
  2711  0C25  1295               	bcf	21,5	;volatile
  2712                           
  2713                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2714  0C26  1195               	bcf	21,3	;volatile
  2715  0C27                     l2665:
  2716                           
  2717                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2718  0C27  3005               	movlw	5
  2719  0C28  0095               	movwf	21	;volatile
  2720  0C29                     l210:
  2721  0C29  0008               	return
  2722  0C2A                     __end_of_setupTimer0Interrupt:
  2723                           
  2724                           	psect	text5
  2725  0C9F                     __ptext5:	
  2726 ;; *************** function _setupPWM *****************
  2727 ;; Defined at:
  2728 ;;		line 16 in file "PWM.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;		None
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, status,0, pclath, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2742 ;;      Params:         0       0       0       0       0       0
  2743 ;;      Locals:         0       0       0       0       0       0
  2744 ;;      Temps:          0       0       0       0       0       0
  2745 ;;      Totals:         0       0       0       0       0       0
  2746 ;;Total ram usage:        0 bytes
  2747 ;; Hardware stack levels used: 1
  2748 ;; Hardware stack levels required when called: 6
  2749 ;; This function calls:
  2750 ;;		_initialiseGPIO
  2751 ;; This function is called by:
  2752 ;;		_main
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756  0C9F                     _setupPWM:	
  2757                           ;psect for function _setupPWM
  2758                           
  2759  0C9F                     l2639:	
  2760                           ;incstack = 0
  2761                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2762                           
  2763                           
  2764                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2765  0C9F  300C               	movlw	12
  2766  0CA0  0025               	movlb	5	; select bank5
  2767  0CA1  0093               	movwf	19	;volatile
  2768  0CA2                     l2641:
  2769                           
  2770                           ;PWM.c: 20:     PR2 = 0;
  2771  0CA2  0020               	movlb	0	; select bank0
  2772  0CA3  019B               	clrf	27	;volatile
  2773  0CA4                     l2643:
  2774                           
  2775                           ;PWM.c: 21:     CCPR1L = 0;
  2776  0CA4  0025               	movlb	5	; select bank5
  2777  0CA5  0191               	clrf	17	;volatile
  2778  0CA6                     l2645:
  2779                           
  2780                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2781  0CA6  0022               	movlb	2	; select bank2
  2782  0CA7  151D               	bsf	29,2	;volatile
  2783  0CA8                     l2647:
  2784                           
  2785                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2786  0CA8  0025               	movlb	5	; select bank5
  2787  0CA9  1596               	bsf	22,3	;volatile
  2788  0CAA                     l2649:
  2789                           
  2790                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2791  0CAA  1016               	bcf	22,0	;volatile
  2792  0CAB                     l2651:
  2793                           
  2794                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2795  0CAB  30FC               	movlw	-4
  2796  0CAC  0020               	movlb	0	; select bank0
  2797  0CAD  059C               	andwf	28,f	;volatile
  2798  0CAE                     l2653:
  2799                           
  2800                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2801  0CAE  0021               	movlb	1	; select bank1
  2802  0CAF  1091               	bcf	17,1	;volatile
  2803  0CB0                     l2655:
  2804                           
  2805                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2806  0CB0  0020               	movlb	0	; select bank0
  2807  0CB1  151C               	bsf	28,2	;volatile
  2808  0CB2                     l2657:
  2809                           
  2810                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2811  0CB2  170B               	bsf	11,6	;volatile
  2812  0CB3                     l2659:
  2813                           
  2814                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2815  0CB3  0021               	movlb	1	; select bank1
  2816  0CB4  1511               	bsf	17,2	;volatile
  2817  0CB5                     l2661:
  2818                           
  2819                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2820  0CB5  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2821  0CB6  3006               	movlw	6
  2822  0CB7  3185  2556  318C   	fcall	_initialiseGPIO
  2823  0CBA                     l181:
  2824  0CBA  0008               	return
  2825  0CBB                     __end_of_setupPWM:
  2826                           
  2827                           	psect	text6
  2828  0491                     __ptext6:	
  2829 ;; *************** function _setupInternalOscillator *****************
  2830 ;; Defined at:
  2831 ;;		line 153 in file "main.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  selectedFreq    1    wreg     const enum E2845
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2845 ;;      Params:         0       0       0       0       0       0
  2846 ;;      Locals:         0       0       1       0       0       0
  2847 ;;      Temps:          0       0       2       0       0       0
  2848 ;;      Totals:         0       0       3       0       0       0
  2849 ;;Total ram usage:        3 bytes
  2850 ;; Hardware stack levels used: 1
  2851 ;; Hardware stack levels required when called: 5
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_main
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859  0491                     _setupInternalOscillator:	
  2860                           ;psect for function _setupInternalOscillator
  2861                           
  2862                           
  2863                           ;incstack = 0
  2864                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2865                           ;setupInternalOscillator@selectedFreq stored from wreg
  2866  0491  0021               	movlb	1	; select bank1
  2867  0492  00E4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2868  0493                     l2561:
  2869                           
  2870                           ;main.c: 157:     switch(selectedFreq){
  2871  0493  2D2A               	goto	l2631
  2872  0494                     l2563:
  2873  0494  3087               	movlw	-121
  2874  0495  0599               	andwf	25,f	;volatile
  2875  0496                     l2565:
  2876  0496  1399               	bcf	25,7	;volatile
  2877  0497                     l2567:
  2878  0497  3000               	movlw	0
  2879  0498  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2880  0499  3000               	movlw	0
  2881  049A  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2882  049B  3079               	movlw	121
  2883  049C  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2884  049D  3018               	movlw	24
  2885  049E  00BC               	movwf	_clockFrequency^(0+128)
  2886  049F  2D55               	goto	l144
  2887  04A0                     l2569:
  2888  04A0  0819               	movf	25,w	;volatile
  2889  04A1  3987               	andlw	-121
  2890  04A2  3820               	iorlw	32
  2891  04A3  0099               	movwf	25	;volatile
  2892  04A4                     l2571:
  2893  04A4  1399               	bcf	25,7	;volatile
  2894  04A5                     l2573:
  2895  04A5  3000               	movlw	0
  2896  04A6  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2897  04A7  3000               	movlw	0
  2898  04A8  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2899  04A9  30F4               	movlw	244
  2900  04AA  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2901  04AB  3024               	movlw	36
  2902  04AC  00BC               	movwf	_clockFrequency^(0+128)
  2903  04AD  2D55               	goto	l144
  2904  04AE                     l2575:
  2905  04AE  0819               	movf	25,w	;volatile
  2906  04AF  3987               	andlw	-121
  2907  04B0  3828               	iorlw	40
  2908  04B1  0099               	movwf	25	;volatile
  2909  04B2                     l2577:
  2910  04B2  1399               	bcf	25,7	;volatile
  2911  04B3                     l2579:
  2912  04B3  3000               	movlw	0
  2913  04B4  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2914  04B5  3001               	movlw	1
  2915  04B6  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2916  04B7  30E8               	movlw	232
  2917  04B8  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2918  04B9  3048               	movlw	72
  2919  04BA  00BC               	movwf	_clockFrequency^(0+128)
  2920  04BB  2D55               	goto	l144
  2921  04BC                     l2581:
  2922  04BC  0819               	movf	25,w	;volatile
  2923  04BD  3987               	andlw	-121
  2924  04BE  3830               	iorlw	48
  2925  04BF  0099               	movwf	25	;volatile
  2926  04C0                     l2583:
  2927  04C0  1399               	bcf	25,7	;volatile
  2928  04C1                     l2585:
  2929  04C1  3000               	movlw	0
  2930  04C2  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2931  04C3  3003               	movlw	3
  2932  04C4  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2933  04C5  30D0               	movlw	208
  2934  04C6  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2935  04C7  3090               	movlw	144
  2936  04C8  00BC               	movwf	_clockFrequency^(0+128)
  2937  04C9  2D55               	goto	l144
  2938  04CA                     l2587:
  2939  04CA  0819               	movf	25,w	;volatile
  2940  04CB  3987               	andlw	-121
  2941  04CC  3838               	iorlw	56
  2942  04CD  0099               	movwf	25	;volatile
  2943  04CE                     l2589:
  2944  04CE  1399               	bcf	25,7	;volatile
  2945  04CF                     l2591:
  2946  04CF  3000               	movlw	0
  2947  04D0  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2948  04D1  3007               	movlw	7
  2949  04D2  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2950  04D3  30A1               	movlw	161
  2951  04D4  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2952  04D5  3020               	movlw	32
  2953  04D6  00BC               	movwf	_clockFrequency^(0+128)
  2954  04D7  2D55               	goto	l144
  2955  04D8                     l2593:
  2956  04D8  0819               	movf	25,w	;volatile
  2957  04D9  3987               	andlw	-121
  2958  04DA  3858               	iorlw	88
  2959  04DB  0099               	movwf	25	;volatile
  2960  04DC                     l2595:
  2961  04DC  1399               	bcf	25,7	;volatile
  2962  04DD                     l2597:
  2963  04DD  3000               	movlw	0
  2964  04DE  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2965  04DF  300F               	movlw	15
  2966  04E0  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2967  04E1  3042               	movlw	66
  2968  04E2  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2969  04E3  3040               	movlw	64
  2970  04E4  00BC               	movwf	_clockFrequency^(0+128)
  2971  04E5  2D55               	goto	l144
  2972  04E6                     l2599:
  2973  04E6  0819               	movf	25,w	;volatile
  2974  04E7  3987               	andlw	-121
  2975  04E8  3860               	iorlw	96
  2976  04E9  0099               	movwf	25	;volatile
  2977  04EA                     l2601:
  2978  04EA  1399               	bcf	25,7	;volatile
  2979  04EB                     l2603:
  2980  04EB  3000               	movlw	0
  2981  04EC  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2982  04ED  301E               	movlw	30
  2983  04EE  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2984  04EF  3084               	movlw	132
  2985  04F0  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2986  04F1  3080               	movlw	128
  2987  04F2  00BC               	movwf	_clockFrequency^(0+128)
  2988  04F3  2D55               	goto	l144
  2989  04F4                     l2605:
  2990  04F4  0819               	movf	25,w	;volatile
  2991  04F5  3987               	andlw	-121
  2992  04F6  3868               	iorlw	104
  2993  04F7  0099               	movwf	25	;volatile
  2994  04F8                     l2607:
  2995  04F8  1399               	bcf	25,7	;volatile
  2996  04F9                     l2609:
  2997  04F9  3000               	movlw	0
  2998  04FA  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2999  04FB  303D               	movlw	61
  3000  04FC  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3001  04FD  3009               	movlw	9
  3002  04FE  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3003  04FF  3000               	movlw	0
  3004  0500  00BC               	movwf	_clockFrequency^(0+128)
  3005  0501  2D55               	goto	l144
  3006  0502                     l2611:
  3007  0502  0819               	movf	25,w	;volatile
  3008  0503  3987               	andlw	-121
  3009  0504  3870               	iorlw	112
  3010  0505  0099               	movwf	25	;volatile
  3011  0506                     l2613:
  3012  0506  1399               	bcf	25,7	;volatile
  3013  0507                     l2615:
  3014  0507  3000               	movlw	0
  3015  0508  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3016  0509  307A               	movlw	122
  3017  050A  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3018  050B  3012               	movlw	18
  3019  050C  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3020  050D  3000               	movlw	0
  3021  050E  00BC               	movwf	_clockFrequency^(0+128)
  3022  050F  2D55               	goto	l144
  3023  0510                     l2617:
  3024  0510  3078               	movlw	120
  3025  0511  0499               	iorwf	25,f	;volatile
  3026  0512                     l2619:
  3027  0512  1399               	bcf	25,7	;volatile
  3028  0513                     l2621:
  3029  0513  3000               	movlw	0
  3030  0514  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3031  0515  30F4               	movlw	244
  3032  0516  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3033  0517  3024               	movlw	36
  3034  0518  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3035  0519  3000               	movlw	0
  3036  051A  00BC               	movwf	_clockFrequency^(0+128)
  3037  051B  2D55               	goto	l144
  3038  051C                     l2623:
  3039  051C  0819               	movf	25,w	;volatile
  3040  051D  3987               	andlw	-121
  3041  051E  3870               	iorlw	112
  3042  051F  0099               	movwf	25	;volatile
  3043  0520                     l2625:
  3044  0520  1799               	bsf	25,7	;volatile
  3045  0521                     l2627:
  3046  0521  3001               	movlw	1
  3047  0522  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3048  0523  30E8               	movlw	232
  3049  0524  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3050  0525  3048               	movlw	72
  3051  0526  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3052  0527  3000               	movlw	0
  3053  0528  00BC               	movwf	_clockFrequency^(0+128)
  3054  0529  2D55               	goto	l144
  3055  052A                     l2631:
  3056  052A  0864               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3057  052B  00E2               	movwf	??_setupInternalOscillator^(0+128)
  3058  052C  01E3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3059                           
  3060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3061                           ; Switch size 1, requested type "simple"
  3062                           ; Number of cases is 1, Range of values is 0 to 0
  3063                           ; switch strategies available:
  3064                           ; Name         Instructions Cycles
  3065                           ; simple_byte            4     3 (average)
  3066                           ; direct_byte            8     6 (fixed)
  3067                           ; jumptable            260     6 (fixed)
  3068                           ;	Chosen strategy is simple_byte
  3069  052D  0863               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3070  052E  3A00               	xorlw	0	; case 0
  3071  052F  1903               	skipnz
  3072  0530  2D32               	goto	l2857
  3073  0531  2D55               	goto	l144
  3074  0532                     l2857:
  3075                           
  3076                           ; Switch size 1, requested type "simple"
  3077                           ; Number of cases is 11, Range of values is 0 to 10
  3078                           ; switch strategies available:
  3079                           ; Name         Instructions Cycles
  3080                           ; direct_byte           28     6 (fixed)
  3081                           ; simple_byte           34    18 (average)
  3082                           ; jumptable            260     6 (fixed)
  3083                           ;	Chosen strategy is simple_byte
  3084  0532  0862               	movf	??_setupInternalOscillator^(0+128),w
  3085  0533  3A00               	xorlw	0	; case 0
  3086  0534  1903               	skipnz
  3087  0535  2C94               	goto	l2563
  3088  0536  3A01               	xorlw	1	; case 1
  3089  0537  1903               	skipnz
  3090  0538  2CA0               	goto	l2569
  3091  0539  3A03               	xorlw	3	; case 2
  3092  053A  1903               	skipnz
  3093  053B  2CAE               	goto	l2575
  3094  053C  3A01               	xorlw	1	; case 3
  3095  053D  1903               	skipnz
  3096  053E  2CBC               	goto	l2581
  3097  053F  3A07               	xorlw	7	; case 4
  3098  0540  1903               	skipnz
  3099  0541  2CCA               	goto	l2587
  3100  0542  3A01               	xorlw	1	; case 5
  3101  0543  1903               	skipnz
  3102  0544  2CD8               	goto	l2593
  3103  0545  3A03               	xorlw	3	; case 6
  3104  0546  1903               	skipnz
  3105  0547  2CE6               	goto	l2599
  3106  0548  3A01               	xorlw	1	; case 7
  3107  0549  1903               	skipnz
  3108  054A  2CF4               	goto	l2605
  3109  054B  3A0F               	xorlw	15	; case 8
  3110  054C  1903               	skipnz
  3111  054D  2D02               	goto	l2611
  3112  054E  3A01               	xorlw	1	; case 9
  3113  054F  1903               	skipnz
  3114  0550  2D10               	goto	l2617
  3115  0551  3A03               	xorlw	3	; case 10
  3116  0552  1903               	skipnz
  3117  0553  2D1C               	goto	l2623
  3118  0554  2D55               	goto	l144
  3119  0555                     l144:
  3120  0555  0008               	return
  3121  0556                     __end_of_setupInternalOscillator:
  3122                           
  3123                           	psect	text7
  3124  0E01                     __ptext7:	
  3125 ;; *************** function _readGPIO *****************
  3126 ;; Defined at:
  3127 ;;		line 79 in file "GPIO.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  gpioNumber      1    wreg     const enum E2798
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3132 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3133 ;;  readB           1    4[BANK1 ] unsigned char 
  3134 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3135 ;;  readA           1    2[BANK1 ] unsigned char 
  3136 ;;  portType        1    7[BANK1 ] unsigned char 
  3137 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      _Bool 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3147 ;;      Params:         0       0       0       0       0       0
  3148 ;;      Locals:         0       0       7       0       0       0
  3149 ;;      Temps:          0       0       2       0       0       0
  3150 ;;      Totals:         0       0       9       0       0       0
  3151 ;;Total ram usage:        9 bytes
  3152 ;; Hardware stack levels used: 1
  3153 ;; Hardware stack levels required when called: 5
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161  0E01                     _readGPIO:	
  3162                           ;psect for function _readGPIO
  3163                           
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3167                           ;readGPIO@gpioNumber stored from wreg
  3168  0E01  0021               	movlb	1	; select bank1
  3169  0E02  00EA               	movwf	readGPIO@gpioNumber^(0+128)
  3170  0E03                     l2675:
  3171                           
  3172                           ;GPIO.c: 81:     uint8_t portType = 0;
  3173  0E03  01E9               	clrf	readGPIO@portType^(0+128)
  3174  0E04                     l2677:
  3175                           
  3176                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3177  0E04  3008               	movlw	8
  3178  0E05  026A               	subwf	readGPIO@gpioNumber^(0+128),w
  3179  0E06  1C03               	skipc
  3180  0E07  2E09               	goto	u2391
  3181  0E08  2E0A               	goto	u2390
  3182  0E09                     u2391:
  3183  0E09  2E12               	goto	l2683
  3184  0E0A                     u2390:
  3185  0E0A                     l2679:
  3186                           
  3187                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3188  0E0A  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3189  0E0B  3EF8               	addlw	248
  3190  0E0C  00E2               	movwf	??_readGPIO^(0+128)
  3191  0E0D  0862               	movf	??_readGPIO^(0+128),w
  3192  0E0E  00E8               	movwf	readGPIO@portNumber^(0+128)
  3193  0E0F                     l2681:
  3194                           
  3195                           ;GPIO.c: 84:         portType = 1;
  3196  0E0F  01E9               	clrf	readGPIO@portType^(0+128)
  3197  0E10  0AE9               	incf	readGPIO@portType^(0+128),f
  3198                           
  3199                           ;GPIO.c: 85:     }
  3200  0E11  2E17               	goto	l2687
  3201  0E12                     l2683:
  3202                           
  3203                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3204  0E12  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3205  0E13  00E2               	movwf	??_readGPIO^(0+128)
  3206  0E14  0862               	movf	??_readGPIO^(0+128),w
  3207  0E15  00E8               	movwf	readGPIO@portNumber^(0+128)
  3208  0E16                     l2685:
  3209                           
  3210                           ;GPIO.c: 88:         portType = 0;
  3211  0E16  01E9               	clrf	readGPIO@portType^(0+128)
  3212  0E17                     l2687:
  3213                           
  3214                           ;GPIO.c: 91:     if(portType == 0){
  3215  0E17  0869               	movf	readGPIO@portType^(0+128),w
  3216  0E18  1D03               	btfss	3,2
  3217  0E19  2E1B               	goto	u2401
  3218  0E1A  2E1C               	goto	u2400
  3219  0E1B                     u2401:
  3220  0E1B  2E30               	goto	l2699
  3221  0E1C                     u2400:
  3222  0E1C                     l2689:
  3223                           
  3224                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3225  0E1C  0020               	movlb	0	; select bank0
  3226  0E1D  080C               	movf	12,w	;volatile
  3227  0E1E  0021               	movlb	1	; select bank1
  3228  0E1F  00E2               	movwf	??_readGPIO^(0+128)
  3229  0E20  0862               	movf	??_readGPIO^(0+128),w
  3230  0E21  00E4               	movwf	readGPIO@readA^(0+128)
  3231  0E22                     l2691:
  3232                           
  3233                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3234  0E22  0864               	movf	readGPIO@readA^(0+128),w
  3235  0E23  00E2               	movwf	??_readGPIO^(0+128)
  3236  0E24  0A68               	incf	readGPIO@portNumber^(0+128),w
  3237  0E25  2E27               	goto	u2414
  3238  0E26                     u2415:
  3239  0E26  36E2               	lsrf	??_readGPIO^(0+128),f
  3240  0E27                     u2414:
  3241  0E27  0B89               	decfsz	9,f
  3242  0E28  2E26               	goto	u2415
  3243  0E29  0862               	movf	??_readGPIO^(0+128),w
  3244  0E2A  3901               	andlw	1
  3245  0E2B  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3246  0E2C  0863               	movf	(??_readGPIO+1)^(0+128),w
  3247  0E2D  00E5               	movwf	readGPIO@returnValueA^(0+128)
  3248  0E2E                     l2693:
  3249                           
  3250                           ;GPIO.c: 94:         return returnValueA;
  3251  0E2E  0865               	movf	readGPIO@returnValueA^(0+128),w
  3252  0E2F  2E4A               	goto	l343
  3253  0E30                     l2699:
  3254  0E30  0369               	decf	readGPIO@portType^(0+128),w
  3255  0E31  1D03               	btfss	3,2
  3256  0E32  2E34               	goto	u2421
  3257  0E33  2E35               	goto	u2420
  3258  0E34                     u2421:
  3259  0E34  2E49               	goto	l2711
  3260  0E35                     u2420:
  3261  0E35                     l2701:
  3262                           
  3263                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3264  0E35  0020               	movlb	0	; select bank0
  3265  0E36  080D               	movf	13,w	;volatile
  3266  0E37  0021               	movlb	1	; select bank1
  3267  0E38  00E2               	movwf	??_readGPIO^(0+128)
  3268  0E39  0862               	movf	??_readGPIO^(0+128),w
  3269  0E3A  00E6               	movwf	readGPIO@readB^(0+128)
  3270  0E3B                     l2703:
  3271                           
  3272                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3273  0E3B  0866               	movf	readGPIO@readB^(0+128),w
  3274  0E3C  00E2               	movwf	??_readGPIO^(0+128)
  3275  0E3D  0A68               	incf	readGPIO@portNumber^(0+128),w
  3276  0E3E  2E40               	goto	u2434
  3277  0E3F                     u2435:
  3278  0E3F  36E2               	lsrf	??_readGPIO^(0+128),f
  3279  0E40                     u2434:
  3280  0E40  0B89               	decfsz	9,f
  3281  0E41  2E3F               	goto	u2435
  3282  0E42  0862               	movf	??_readGPIO^(0+128),w
  3283  0E43  3901               	andlw	1
  3284  0E44  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3285  0E45  0863               	movf	(??_readGPIO+1)^(0+128),w
  3286  0E46  00E7               	movwf	readGPIO@returnValueB^(0+128)
  3287  0E47                     l2705:
  3288                           
  3289                           ;GPIO.c: 99:         return returnValueB;
  3290  0E47  0867               	movf	readGPIO@returnValueB^(0+128),w
  3291  0E48  2E4A               	goto	l343
  3292  0E49                     l2711:
  3293  0E49  3000               	movlw	0
  3294  0E4A                     l343:
  3295  0E4A  0008               	return
  3296  0E4B                     __end_of_readGPIO:
  3297                           
  3298                           	psect	text8
  3299  0C3C                     __ptext8:	
  3300 ;; *************** function _initialisePotentiometers *****************
  3301 ;; Defined at:
  3302 ;;		line 15 in file "Potentiometer.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0, pclath, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3316 ;;      Params:         0       0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used: 1
  3322 ;; Hardware stack levels required when called: 6
  3323 ;; This function calls:
  3324 ;;		_initialiseADCPin
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330  0C3C                     _initialisePotentiometers:	
  3331                           ;psect for function _initialisePotentiometers
  3332                           
  3333  0C3C                     l2671:	
  3334                           ;incstack = 0
  3335                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3336                           
  3337                           
  3338                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3339  0C3C  3009               	movlw	9
  3340  0C3D  3186  263D  318C   	fcall	_initialiseADCPin
  3341                           
  3342                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3343  0C40  300A               	movlw	10
  3344  0C41  3186  263D  318C   	fcall	_initialiseADCPin
  3345  0C44                     l377:
  3346  0C44  0008               	return
  3347  0C45                     __end_of_initialisePotentiometers:
  3348                           
  3349                           	psect	text9
  3350  0CDA                     __ptext9:	
  3351 ;; *************** function _initialiseCurrentSensors *****************
  3352 ;; Defined at:
  3353 ;;		line 17 in file "CurrentSensor.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3367 ;;      Params:         0       0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0
  3370 ;;      Totals:         0       0       0       0       0       0
  3371 ;;Total ram usage:        0 bytes
  3372 ;; Hardware stack levels used: 1
  3373 ;; Hardware stack levels required when called: 7
  3374 ;; This function calls:
  3375 ;;		_currentTripReset
  3376 ;;		_initialiseADCPin
  3377 ;;		_initialiseGPIO
  3378 ;; This function is called by:
  3379 ;;		_main
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383  0CDA                     _initialiseCurrentSensors:	
  3384                           ;psect for function _initialiseCurrentSensors
  3385                           
  3386  0CDA                     l2669:	
  3387                           ;incstack = 0
  3388                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3389                           
  3390                           
  3391                           ;CurrentSensor.c: 18:     initialiseGPIO(pinRA3, 1);
  3392  0CDA  0021               	movlb	1	; select bank1
  3393  0CDB  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3394  0CDC  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3395  0CDD  3003               	movlw	3
  3396  0CDE  3185  2556  318C   	fcall	_initialiseGPIO
  3397                           
  3398                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA1, 1);
  3399  0CE1  0021               	movlb	1	; select bank1
  3400  0CE2  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3401  0CE3  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3402  0CE4  3001               	movlw	1
  3403  0CE5  3185  2556  318C   	fcall	_initialiseGPIO
  3404                           
  3405                           ;CurrentSensor.c: 20:     initialiseADCPin(pinRA0);
  3406  0CE8  3000               	movlw	0
  3407  0CE9  3186  263D  318C   	fcall	_initialiseADCPin
  3408                           
  3409                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA2);
  3410  0CEC  3002               	movlw	2
  3411  0CED  3186  263D  318C   	fcall	_initialiseADCPin
  3412                           
  3413                           ;CurrentSensor.c: 22:     initialiseGPIO(pinRB3, 0);
  3414  0CF0  0021               	movlb	1	; select bank1
  3415  0CF1  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3416  0CF2  300B               	movlw	11
  3417  0CF3  3185  2556  318C   	fcall	_initialiseGPIO
  3418                           
  3419                           ;CurrentSensor.c: 23:     currentTripReset();
  3420  0CF6  318C  245D  318C   	fcall	_currentTripReset
  3421  0CF9                     l527:
  3422  0CF9  0008               	return
  3423  0CFA                     __end_of_initialiseCurrentSensors:
  3424                           
  3425                           	psect	text10
  3426  0C5D                     __ptext10:	
  3427 ;; *************** function _currentTripReset *****************
  3428 ;; Defined at:
  3429 ;;		line 70 in file "CurrentSensor.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0, pclath, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3443 ;;      Params:         0       0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0
  3446 ;;      Totals:         0       0       0       0       0       0
  3447 ;;Total ram usage:        0 bytes
  3448 ;; Hardware stack levels used: 1
  3449 ;; Hardware stack levels required when called: 6
  3450 ;; This function calls:
  3451 ;;		_writeGPIO
  3452 ;; This function is called by:
  3453 ;;		_initialiseCurrentSensors
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457  0C5D                     _currentTripReset:	
  3458                           ;psect for function _currentTripReset
  3459                           
  3460  0C5D                     l2159:	
  3461                           ;incstack = 0
  3462                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3463                           
  3464                           
  3465                           ;CurrentSensor.c: 71:     writeGPIO(pinRB3, 0);
  3466  0C5D  0021               	movlb	1	; select bank1
  3467  0C5E  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3468  0C5F  300B               	movlw	11
  3469  0C60  3186  26A3  318C   	fcall	_writeGPIO
  3470  0C63                     l2161:
  3471                           
  3472                           ;CurrentSensor.c: 72:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3473                           ;CurrentSensor.c: 73:     writeGPIO(pinRB3, 1);
  3474  0C63  0021               	movlb	1	; select bank1
  3475  0C64  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3476  0C65  0AE2               	incf	writeGPIO@writeValue^(0+128),f
  3477  0C66  300B               	movlw	11
  3478  0C67  3186  26A3  318C   	fcall	_writeGPIO
  3479  0C6A                     l549:
  3480  0C6A  0008               	return
  3481  0C6B                     __end_of_currentTripReset:
  3482                           
  3483                           	psect	text11
  3484  06A3                     __ptext11:	
  3485 ;; *************** function _writeGPIO *****************
  3486 ;; Defined at:
  3487 ;;		line 52 in file "GPIO.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  gpioNumber      1    wreg     const enum E2798
  3490 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3493 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3494 ;;  portType        1    3[BANK1 ] unsigned char 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3504 ;;      Params:         0       0       1       0       0       0
  3505 ;;      Locals:         0       0       3       0       0       0
  3506 ;;      Temps:          0       0       2       0       0       0
  3507 ;;      Totals:         0       0       6       0       0       0
  3508 ;;Total ram usage:        6 bytes
  3509 ;; Hardware stack levels used: 1
  3510 ;; Hardware stack levels required when called: 5
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_currentTripReset
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518  06A3                     _writeGPIO:	
  3519                           ;psect for function _writeGPIO
  3520                           
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3524                           ;writeGPIO@gpioNumber stored from wreg
  3525  06A3  0021               	movlb	1	; select bank1
  3526  06A4  00E6               	movwf	writeGPIO@gpioNumber^(0+128)
  3527  06A5                     l2059:
  3528                           
  3529                           ;GPIO.c: 54:     uint8_t portType = 0;
  3530  06A5  01E5               	clrf	writeGPIO@portType^(0+128)
  3531  06A6                     l2061:
  3532                           
  3533                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3534  06A6  3008               	movlw	8
  3535  06A7  0266               	subwf	writeGPIO@gpioNumber^(0+128),w
  3536  06A8  1C03               	skipc
  3537  06A9  2EAB               	goto	u1381
  3538  06AA  2EAC               	goto	u1380
  3539  06AB                     u1381:
  3540  06AB  2EB4               	goto	l2067
  3541  06AC                     u1380:
  3542  06AC                     l2063:
  3543                           
  3544                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3545  06AC  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3546  06AD  3EF8               	addlw	248
  3547  06AE  00E3               	movwf	??_writeGPIO^(0+128)
  3548  06AF  0863               	movf	??_writeGPIO^(0+128),w
  3549  06B0  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3550  06B1                     l2065:
  3551                           
  3552                           ;GPIO.c: 57:         portType = 1;
  3553  06B1  01E5               	clrf	writeGPIO@portType^(0+128)
  3554  06B2  0AE5               	incf	writeGPIO@portType^(0+128),f
  3555                           
  3556                           ;GPIO.c: 58:     }
  3557  06B3  2EB9               	goto	l2071
  3558  06B4                     l2067:
  3559                           
  3560                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3561  06B4  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3562  06B5  00E3               	movwf	??_writeGPIO^(0+128)
  3563  06B6  0863               	movf	??_writeGPIO^(0+128),w
  3564  06B7  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3565  06B8                     l2069:
  3566                           
  3567                           ;GPIO.c: 61:         portType = 0;
  3568  06B8  01E5               	clrf	writeGPIO@portType^(0+128)
  3569  06B9                     l2071:
  3570                           
  3571                           ;GPIO.c: 64:     if(portType == 0){
  3572  06B9  0865               	movf	writeGPIO@portType^(0+128),w
  3573  06BA  1D03               	btfss	3,2
  3574  06BB  2EBD               	goto	u1391
  3575  06BC  2EBE               	goto	u1390
  3576  06BD                     u1391:
  3577  06BD  2EDE               	goto	l2079
  3578  06BE                     u1390:
  3579  06BE                     l2073:
  3580                           
  3581                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3582  06BE  0862               	movf	writeGPIO@writeValue^(0+128),w
  3583  06BF  1903               	btfsc	3,2
  3584  06C0  2EC2               	goto	u1401
  3585  06C1  2EC3               	goto	u1400
  3586  06C2                     u1401:
  3587  06C2  2ED0               	goto	l2077
  3588  06C3                     u1400:
  3589  06C3                     l2075:
  3590  06C3  3001               	movlw	1
  3591  06C4  00E3               	movwf	??_writeGPIO^(0+128)
  3592  06C5  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3593  06C6  2EC8               	goto	u1414
  3594  06C7                     u1415:
  3595  06C7  35E3               	lslf	??_writeGPIO^(0+128),f
  3596  06C8                     u1414:
  3597  06C8  0B89               	decfsz	9,f
  3598  06C9  2EC7               	goto	u1415
  3599  06CA  0863               	movf	??_writeGPIO^(0+128),w
  3600  06CB  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3601  06CC  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3602  06CD  0022               	movlb	2	; select bank2
  3603  06CE  048C               	iorwf	12,f	;volatile
  3604  06CF  2F02               	goto	l337
  3605  06D0                     l2077:
  3606  06D0  3001               	movlw	1
  3607  06D1  00E3               	movwf	??_writeGPIO^(0+128)
  3608  06D2  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3609  06D3  2ED5               	goto	u1424
  3610  06D4                     u1425:
  3611  06D4  35E3               	lslf	??_writeGPIO^(0+128),f
  3612  06D5                     u1424:
  3613  06D5  0B89               	decfsz	9,f
  3614  06D6  2ED4               	goto	u1425
  3615  06D7  0863               	movf	??_writeGPIO^(0+128),w
  3616  06D8  3AFF               	xorlw	255
  3617  06D9  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3618  06DA  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3619  06DB  0022               	movlb	2	; select bank2
  3620  06DC  058C               	andwf	12,f	;volatile
  3621  06DD  2F02               	goto	l337
  3622  06DE                     l2079:
  3623  06DE  0365               	decf	writeGPIO@portType^(0+128),w
  3624  06DF  1D03               	btfss	3,2
  3625  06E0  2EE2               	goto	u1431
  3626  06E1  2EE3               	goto	u1430
  3627  06E2                     u1431:
  3628  06E2  2F02               	goto	l337
  3629  06E3                     u1430:
  3630  06E3                     l2081:
  3631                           
  3632                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3633  06E3  0862               	movf	writeGPIO@writeValue^(0+128),w
  3634  06E4  1903               	btfsc	3,2
  3635  06E5  2EE7               	goto	u1441
  3636  06E6  2EE8               	goto	u1440
  3637  06E7                     u1441:
  3638  06E7  2EF5               	goto	l2085
  3639  06E8                     u1440:
  3640  06E8                     l2083:
  3641  06E8  3001               	movlw	1
  3642  06E9  00E3               	movwf	??_writeGPIO^(0+128)
  3643  06EA  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3644  06EB  2EED               	goto	u1454
  3645  06EC                     u1455:
  3646  06EC  35E3               	lslf	??_writeGPIO^(0+128),f
  3647  06ED                     u1454:
  3648  06ED  0B89               	decfsz	9,f
  3649  06EE  2EEC               	goto	u1455
  3650  06EF  0863               	movf	??_writeGPIO^(0+128),w
  3651  06F0  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3652  06F1  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3653  06F2  0022               	movlb	2	; select bank2
  3654  06F3  048D               	iorwf	13,f	;volatile
  3655  06F4  2F02               	goto	l337
  3656  06F5                     l2085:
  3657  06F5  3001               	movlw	1
  3658  06F6  00E3               	movwf	??_writeGPIO^(0+128)
  3659  06F7  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3660  06F8  2EFA               	goto	u1464
  3661  06F9                     u1465:
  3662  06F9  35E3               	lslf	??_writeGPIO^(0+128),f
  3663  06FA                     u1464:
  3664  06FA  0B89               	decfsz	9,f
  3665  06FB  2EF9               	goto	u1465
  3666  06FC  0863               	movf	??_writeGPIO^(0+128),w
  3667  06FD  3AFF               	xorlw	255
  3668  06FE  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3669  06FF  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3670  0700  0022               	movlb	2	; select bank2
  3671  0701  058D               	andwf	13,f	;volatile
  3672  0702                     l337:
  3673  0702  0008               	return
  3674  0703                     __end_of_writeGPIO:
  3675                           
  3676                           	psect	text12
  3677  0C51                     __ptext12:	
  3678 ;; *************** function _initialiseController *****************
  3679 ;; Defined at:
  3680 ;;		line 23 in file "Controller.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3694 ;;      Params:         0       0       0       0       0       0
  3695 ;;      Locals:         0       0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0
  3697 ;;      Totals:         0       0       0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used: 1
  3700 ;; Hardware stack levels required when called: 6
  3701 ;; This function calls:
  3702 ;;		_initialiseADCPin
  3703 ;;		_initialiseGPIO
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709  0C51                     _initialiseController:	
  3710                           ;psect for function _initialiseController
  3711                           
  3712  0C51                     l2673:	
  3713                           ;incstack = 0
  3714                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3715                           
  3716                           
  3717                           ;Controller.c: 24:     initialiseGPIO(pinRA4, 1);
  3718  0C51  0021               	movlb	1	; select bank1
  3719  0C52  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3720  0C53  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3721  0C54  3004               	movlw	4
  3722  0C55  3185  2556  318C   	fcall	_initialiseGPIO
  3723                           
  3724                           ;Controller.c: 25:     initialiseADCPin(pinRA4);
  3725  0C58  3004               	movlw	4
  3726  0C59  3186  263D  318C   	fcall	_initialiseADCPin
  3727  0C5C                     l453:
  3728  0C5C  0008               	return
  3729  0C5D                     __end_of_initialiseController:
  3730                           
  3731                           	psect	text13
  3732  0556                     __ptext13:	
  3733 ;; *************** function _initialiseGPIO *****************
  3734 ;; Defined at:
  3735 ;;		line 18 in file "GPIO.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  gpioNumber      1    wreg     const enum E2798
  3738 ;;  direction       1    0[BANK1 ] unsigned char 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3741 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3742 ;;  portType        1    3[BANK1 ] unsigned char 
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2, status,0
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3752 ;;      Params:         0       0       1       0       0       0
  3753 ;;      Locals:         0       0       3       0       0       0
  3754 ;;      Temps:          0       0       2       0       0       0
  3755 ;;      Totals:         0       0       6       0       0       0
  3756 ;;Total ram usage:        6 bytes
  3757 ;; Hardware stack levels used: 1
  3758 ;; Hardware stack levels required when called: 5
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_main
  3763 ;;		_setupPWM
  3764 ;;		_initialiseController
  3765 ;;		_initialiseCurrentSensors
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769  0556                     _initialiseGPIO:	
  3770                           ;psect for function _initialiseGPIO
  3771                           
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3775                           ;initialiseGPIO@gpioNumber stored from wreg
  3776  0556  0021               	movlb	1	; select bank1
  3777  0557  00E6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3778  0558                     l2163:
  3779                           
  3780                           ;GPIO.c: 20:     uint8_t portType = 0;
  3781  0558  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3782  0559                     l2165:
  3783                           
  3784                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3785  0559  3008               	movlw	8
  3786  055A  0266               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3787  055B  1C03               	skipc
  3788  055C  2D5E               	goto	u1571
  3789  055D  2D5F               	goto	u1570
  3790  055E                     u1571:
  3791  055E  2D67               	goto	l2171
  3792  055F                     u1570:
  3793  055F                     l2167:
  3794                           
  3795                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3796  055F  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3797  0560  3EF8               	addlw	248
  3798  0561  00E3               	movwf	??_initialiseGPIO^(0+128)
  3799  0562  0863               	movf	??_initialiseGPIO^(0+128),w
  3800  0563  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3801  0564                     l2169:
  3802                           
  3803                           ;GPIO.c: 23:         portType = 1;
  3804  0564  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3805  0565  0AE5               	incf	initialiseGPIO@portType^(0+128),f
  3806                           
  3807                           ;GPIO.c: 24:     }
  3808  0566  2D6C               	goto	l2175
  3809  0567                     l2171:
  3810                           
  3811                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3812  0567  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3813  0568  00E3               	movwf	??_initialiseGPIO^(0+128)
  3814  0569  0863               	movf	??_initialiseGPIO^(0+128),w
  3815  056A  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3816  056B                     l2173:
  3817                           
  3818                           ;GPIO.c: 27:         portType = 0;
  3819  056B  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3820  056C                     l2175:
  3821                           
  3822                           ;GPIO.c: 30:     if(portType == 0){
  3823  056C  0865               	movf	initialiseGPIO@portType^(0+128),w
  3824  056D  1D03               	btfss	3,2
  3825  056E  2D70               	goto	u1581
  3826  056F  2D71               	goto	u1580
  3827  0570                     u1581:
  3828  0570  2D9C               	goto	l2183
  3829  0571                     u1580:
  3830  0571                     l2177:
  3831                           
  3832                           ;GPIO.c: 31:         if(direction){
  3833  0571  0862               	movf	initialiseGPIO@direction^(0+128),w
  3834  0572  1903               	btfsc	3,2
  3835  0573  2D75               	goto	u1591
  3836  0574  2D76               	goto	u1590
  3837  0575                     u1591:
  3838  0575  2D8F               	goto	l2181
  3839  0576                     u1590:
  3840  0576                     l2179:
  3841                           
  3842                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3843  0576  3001               	movlw	1
  3844  0577  00E3               	movwf	??_initialiseGPIO^(0+128)
  3845  0578  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3846  0579  2D7B               	goto	u1604
  3847  057A                     u1605:
  3848  057A  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3849  057B                     u1604:
  3850  057B  0B89               	decfsz	9,f
  3851  057C  2D7A               	goto	u1605
  3852  057D  0863               	movf	??_initialiseGPIO^(0+128),w
  3853  057E  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3854  057F  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3855  0580  048C               	iorwf	12,f	;volatile
  3856                           
  3857                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3858  0581  3001               	movlw	1
  3859  0582  00E3               	movwf	??_initialiseGPIO^(0+128)
  3860  0583  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3861  0584  2D86               	goto	u1614
  3862  0585                     u1615:
  3863  0585  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3864  0586                     u1614:
  3865  0586  0B89               	decfsz	9,f
  3866  0587  2D85               	goto	u1615
  3867  0588  0863               	movf	??_initialiseGPIO^(0+128),w
  3868  0589  3AFF               	xorlw	255
  3869  058A  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3870  058B  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3871  058C  0023               	movlb	3	; select bank3
  3872  058D  058C               	andwf	12,f	;volatile
  3873                           
  3874                           ;GPIO.c: 34:         }
  3875  058E  2DCB               	goto	l323
  3876  058F                     l2181:
  3877  058F  3001               	movlw	1
  3878  0590  00E3               	movwf	??_initialiseGPIO^(0+128)
  3879  0591  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3880  0592  2D94               	goto	u1624
  3881  0593                     u1625:
  3882  0593  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3883  0594                     u1624:
  3884  0594  0B89               	decfsz	9,f
  3885  0595  2D93               	goto	u1625
  3886  0596  0863               	movf	??_initialiseGPIO^(0+128),w
  3887  0597  3AFF               	xorlw	255
  3888  0598  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3889  0599  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3890  059A  058C               	andwf	12,f	;volatile
  3891  059B  2DCB               	goto	l323
  3892  059C                     l2183:
  3893  059C  0365               	decf	initialiseGPIO@portType^(0+128),w
  3894  059D  1D03               	btfss	3,2
  3895  059E  2DA0               	goto	u1631
  3896  059F  2DA1               	goto	u1630
  3897  05A0                     u1631:
  3898  05A0  2DCB               	goto	l323
  3899  05A1                     u1630:
  3900  05A1                     l2185:
  3901                           
  3902                           ;GPIO.c: 38:         if(direction){
  3903  05A1  0862               	movf	initialiseGPIO@direction^(0+128),w
  3904  05A2  1903               	btfsc	3,2
  3905  05A3  2DA5               	goto	u1641
  3906  05A4  2DA6               	goto	u1640
  3907  05A5                     u1641:
  3908  05A5  2DBF               	goto	l2189
  3909  05A6                     u1640:
  3910  05A6                     l2187:
  3911                           
  3912                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3913  05A6  3001               	movlw	1
  3914  05A7  00E3               	movwf	??_initialiseGPIO^(0+128)
  3915  05A8  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3916  05A9  2DAB               	goto	u1654
  3917  05AA                     u1655:
  3918  05AA  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3919  05AB                     u1654:
  3920  05AB  0B89               	decfsz	9,f
  3921  05AC  2DAA               	goto	u1655
  3922  05AD  0863               	movf	??_initialiseGPIO^(0+128),w
  3923  05AE  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3924  05AF  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3925  05B0  048D               	iorwf	13,f	;volatile
  3926                           
  3927                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3928  05B1  3001               	movlw	1
  3929  05B2  00E3               	movwf	??_initialiseGPIO^(0+128)
  3930  05B3  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3931  05B4  2DB6               	goto	u1664
  3932  05B5                     u1665:
  3933  05B5  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3934  05B6                     u1664:
  3935  05B6  0B89               	decfsz	9,f
  3936  05B7  2DB5               	goto	u1665
  3937  05B8  0863               	movf	??_initialiseGPIO^(0+128),w
  3938  05B9  3AFF               	xorlw	255
  3939  05BA  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3940  05BB  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3941  05BC  0023               	movlb	3	; select bank3
  3942  05BD  058D               	andwf	13,f	;volatile
  3943                           
  3944                           ;GPIO.c: 41:         }
  3945  05BE  2DCB               	goto	l323
  3946  05BF                     l2189:
  3947  05BF  3001               	movlw	1
  3948  05C0  00E3               	movwf	??_initialiseGPIO^(0+128)
  3949  05C1  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3950  05C2  2DC4               	goto	u1674
  3951  05C3                     u1675:
  3952  05C3  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3953  05C4                     u1674:
  3954  05C4  0B89               	decfsz	9,f
  3955  05C5  2DC3               	goto	u1675
  3956  05C6  0863               	movf	??_initialiseGPIO^(0+128),w
  3957  05C7  3AFF               	xorlw	255
  3958  05C8  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3959  05C9  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3960  05CA  058D               	andwf	13,f	;volatile
  3961  05CB                     l323:
  3962  05CB  0008               	return
  3963  05CC                     __end_of_initialiseGPIO:
  3964                           
  3965                           	psect	text14
  3966  063D                     __ptext14:	
  3967 ;; *************** function _initialiseADCPin *****************
  3968 ;; Defined at:
  3969 ;;		line 37 in file "ADC.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  gpioNumber      1    wreg     const enum E2798
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  3974 ;;  portNumber      1    4[BANK1 ] unsigned char 
  3975 ;;  portType        1    3[BANK1 ] unsigned char 
  3976 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, status,2, status,0
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3986 ;;      Params:         0       0       0       0       0       0
  3987 ;;      Locals:         0       0       4       0       0       0
  3988 ;;      Temps:          0       0       2       0       0       0
  3989 ;;      Totals:         0       0       6       0       0       0
  3990 ;;Total ram usage:        6 bytes
  3991 ;; Hardware stack levels used: 1
  3992 ;; Hardware stack levels required when called: 5
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_initialisePotentiometers
  3997 ;;		_initialiseController
  3998 ;;		_initialiseCurrentSensors
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002  063D                     _initialiseADCPin:	
  4003                           ;psect for function _initialiseADCPin
  4004                           
  4005                           
  4006                           ;incstack = 0
  4007                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4008                           ;initialiseADCPin@gpioNumber stored from wreg
  4009  063D  0021               	movlb	1	; select bank1
  4010  063E  00E7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4011  063F                     l2191:
  4012                           
  4013                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4014  063F  01E6               	clrf	initialiseADCPin@portNumber^(0+128)
  4015                           
  4016                           ;ADC.c: 40:     uint8_t portType = 0;
  4017  0640  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4018                           
  4019                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4020  0641  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4021  0642                     l2193:
  4022                           
  4023                           ;ADC.c: 43:     if(gpioNumber < 4){
  4024  0642  3004               	movlw	4
  4025  0643  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4026  0644  1803               	skipnc
  4027  0645  2E47               	goto	u1681
  4028  0646  2E48               	goto	u1680
  4029  0647                     u1681:
  4030  0647  2E4F               	goto	l2201
  4031  0648                     u1680:
  4032  0648                     l2195:
  4033                           
  4034                           ;ADC.c: 44:         portNumber = gpioNumber;
  4035  0648  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4036  0649  00E2               	movwf	??_initialiseADCPin^(0+128)
  4037  064A  0862               	movf	??_initialiseADCPin^(0+128),w
  4038  064B  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4039  064C                     l2197:
  4040                           
  4041                           ;ADC.c: 45:         portType = 0;
  4042  064C  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4043  064D                     l2199:
  4044                           
  4045                           ;ADC.c: 46:         gpioValid = 1;
  4046  064D  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4047  064E  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4048  064F                     l2201:
  4049                           
  4050                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4051  064F  3009               	movlw	9
  4052  0650  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4053  0651  1C03               	skipc
  4054  0652  2E54               	goto	u1691
  4055  0653  2E55               	goto	u1690
  4056  0654                     u1691:
  4057  0654  2E64               	goto	l249
  4058  0655                     u1690:
  4059  0655                     l2203:
  4060  0655  3010               	movlw	16
  4061  0656  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4062  0657  1803               	skipnc
  4063  0658  2E5A               	goto	u1701
  4064  0659  2E5B               	goto	u1700
  4065  065A                     u1701:
  4066  065A  2E64               	goto	l249
  4067  065B                     u1700:
  4068  065B                     l2205:
  4069                           
  4070                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4071  065B  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4072  065C  3EF8               	addlw	248
  4073  065D  00E2               	movwf	??_initialiseADCPin^(0+128)
  4074  065E  0862               	movf	??_initialiseADCPin^(0+128),w
  4075  065F  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4076  0660                     l2207:
  4077                           
  4078                           ;ADC.c: 51:         portType = 1;
  4079  0660  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4080  0661  0AE5               	incf	initialiseADCPin@portType^(0+128),f
  4081  0662                     l2209:
  4082                           
  4083                           ;ADC.c: 52:         gpioValid = 1;
  4084  0662  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4085  0663  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4086  0664                     l249:	
  4087                           ;ADC.c: 53:     }
  4088                           
  4089                           
  4090                           ;ADC.c: 55:     if(gpioValid){
  4091  0664  0864               	movf	initialiseADCPin@gpioValid^(0+128),w
  4092  0665  1903               	btfsc	3,2
  4093  0666  2E68               	goto	u1711
  4094  0667  2E69               	goto	u1710
  4095  0668                     u1711:
  4096  0668  2EA2               	goto	l254
  4097  0669                     u1710:
  4098  0669                     l2211:
  4099                           
  4100                           ;ADC.c: 56:         if(portType == 0){
  4101  0669  0865               	movf	initialiseADCPin@portType^(0+128),w
  4102  066A  1D03               	btfss	3,2
  4103  066B  2E6D               	goto	u1721
  4104  066C  2E6E               	goto	u1720
  4105  066D                     u1721:
  4106  066D  2E86               	goto	l2215
  4107  066E                     u1720:
  4108  066E                     l2213:
  4109                           
  4110                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4111  066E  3001               	movlw	1
  4112  066F  00E2               	movwf	??_initialiseADCPin^(0+128)
  4113  0670  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4114  0671  2E73               	goto	u1734
  4115  0672                     u1735:
  4116  0672  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4117  0673                     u1734:
  4118  0673  0B89               	decfsz	9,f
  4119  0674  2E72               	goto	u1735
  4120  0675  0862               	movf	??_initialiseADCPin^(0+128),w
  4121  0676  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4122  0677  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4123  0678  048C               	iorwf	12,f	;volatile
  4124                           
  4125                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4126  0679  3001               	movlw	1
  4127  067A  00E2               	movwf	??_initialiseADCPin^(0+128)
  4128  067B  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4129  067C  2E7E               	goto	u1744
  4130  067D                     u1745:
  4131  067D  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4132  067E                     u1744:
  4133  067E  0B89               	decfsz	9,f
  4134  067F  2E7D               	goto	u1745
  4135  0680  0862               	movf	??_initialiseADCPin^(0+128),w
  4136  0681  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4137  0682  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4138  0683  0023               	movlb	3	; select bank3
  4139  0684  048C               	iorwf	12,f	;volatile
  4140                           
  4141                           ;ADC.c: 59:         }
  4142  0685  2EA2               	goto	l254
  4143  0686                     l2215:
  4144  0686  0365               	decf	initialiseADCPin@portType^(0+128),w
  4145  0687  1D03               	btfss	3,2
  4146  0688  2E8A               	goto	u1751
  4147  0689  2E8B               	goto	u1750
  4148  068A                     u1751:
  4149  068A  2EA2               	goto	l254
  4150  068B                     u1750:
  4151  068B                     l2217:
  4152                           
  4153                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4154  068B  3001               	movlw	1
  4155  068C  00E2               	movwf	??_initialiseADCPin^(0+128)
  4156  068D  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4157  068E  2E90               	goto	u1764
  4158  068F                     u1765:
  4159  068F  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4160  0690                     u1764:
  4161  0690  0B89               	decfsz	9,f
  4162  0691  2E8F               	goto	u1765
  4163  0692  0862               	movf	??_initialiseADCPin^(0+128),w
  4164  0693  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4165  0694  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4166  0695  048D               	iorwf	13,f	;volatile
  4167                           
  4168                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4169  0696  3001               	movlw	1
  4170  0697  00E2               	movwf	??_initialiseADCPin^(0+128)
  4171  0698  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4172  0699  2E9B               	goto	u1774
  4173  069A                     u1775:
  4174  069A  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4175  069B                     u1774:
  4176  069B  0B89               	decfsz	9,f
  4177  069C  2E9A               	goto	u1775
  4178  069D  0862               	movf	??_initialiseADCPin^(0+128),w
  4179  069E  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4180  069F  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4181  06A0  0023               	movlb	3	; select bank3
  4182  06A1  048D               	iorwf	13,f	;volatile
  4183  06A2                     l254:
  4184  06A2  0008               	return
  4185  06A3                     __end_of_initialiseADCPin:
  4186                           
  4187                           	psect	text15
  4188  0C08                     __ptext15:	
  4189 ;; *************** function _initialiseADCModule *****************
  4190 ;; Defined at:
  4191 ;;		line 14 in file "ADC.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4205 ;;      Params:         0       0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0
  4208 ;;      Totals:         0       0       0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used: 1
  4211 ;; Hardware stack levels required when called: 5
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_main
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219  0C08                     _initialiseADCModule:	
  4220                           ;psect for function _initialiseADCModule
  4221                           
  4222  0C08                     l2667:	
  4223                           ;incstack = 0
  4224                           ; Regs used in _initialiseADCModule: [wreg]
  4225                           
  4226                           
  4227                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4228  0C08  3001               	movlw	1
  4229  0C09  0021               	movlb	1	; select bank1
  4230  0C0A  009D               	movwf	29	;volatile
  4231                           
  4232                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4233  0C0B  3090               	movlw	144
  4234  0C0C  009E               	movwf	30	;volatile
  4235  0C0D                     l245:
  4236  0C0D  0008               	return
  4237  0C0E                     __end_of_initialiseADCModule:
  4238                           
  4239                           	psect	intentry
  4240  0004                     __pintentry:	
  4241 ;; *************** function _Tick980Hz *****************
  4242 ;; Defined at:
  4243 ;;		line 42 in file "main.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4257 ;;      Params:         0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0
  4259 ;;      Temps:          0       1       0       0       0       0
  4260 ;;      Totals:         0       1       0       0       0       0
  4261 ;;Total ram usage:        1 bytes
  4262 ;; Hardware stack levels used: 1
  4263 ;; Hardware stack levels required when called: 4
  4264 ;; This function calls:
  4265 ;;		_controlRoutine
  4266 ;;		_currentTripRead
  4267 ;;		_readFilteredDutyPot
  4268 ;;		_readFilteredFreqPot
  4269 ;;		_readFilteredIL
  4270 ;;		_readFilteredVout
  4271 ;;		_runPotScaling
  4272 ;;		_setPWMDutyandPeriod
  4273 ;;		_transToOverCurrentFault
  4274 ;;		i1_currentTripReset
  4275 ;;		i1_writeGPIO
  4276 ;; This function is called by:
  4277 ;;		Interrupt level 1
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281  0004                     _Tick980Hz:
  4282                           
  4283                           ;incstack = 0
  4284  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4285                           
  4286                           ; Regs used in _Tick980Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4287  0005  3180               	pagesel	$
  4288  0006                     i1l2725:
  4289                           
  4290                           ;main.c: 46:     writeGPIO(pinRB4, 1);
  4291  0006  01F0               	clrf	i1writeGPIO@writeValue
  4292  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4293  0008  300C               	movlw	12
  4294  0009  3187  2703  3180   	fcall	i1_writeGPIO
  4295                           
  4296                           ;main.c: 55:         if(currentTripRead() == 1){
  4297  000C  318D  2525  3180   	fcall	_currentTripRead
  4298  000F  3A01               	xorlw	1
  4299  0010  1D03               	skipz
  4300  0011  2813               	goto	u244_21
  4301  0012  2814               	goto	u244_20
  4302  0013                     u244_21:
  4303  0013  2827               	goto	i1l2733
  4304  0014                     u244_20:
  4305  0014                     i1l2727:
  4306                           
  4307                           ;main.c: 56:             currentTripCount++;
  4308  0014  3001               	movlw	1
  4309  0015  0020               	movlb	0	; select bank0
  4310  0016  00DC               	movwf	??_Tick980Hz
  4311  0017  085C               	movf	??_Tick980Hz,w
  4312  0018  07EB               	addwf	_currentTripCount,f
  4313                           
  4314                           ;main.c: 57:             if(currentTripCount == 3){
  4315  0019  3003               	movlw	3
  4316  001A  066B               	xorwf	_currentTripCount,w
  4317  001B  1D03               	btfss	3,2
  4318  001C  281E               	goto	u245_21
  4319  001D  281F               	goto	u245_20
  4320  001E                     u245_21:
  4321  001E  2823               	goto	i1l2731
  4322  001F                     u245_20:
  4323  001F                     i1l2729:
  4324                           
  4325                           ;main.c: 58:                 transToOverCurrentFault();
  4326  001F  318C  2433  3180   	fcall	_transToOverCurrentFault
  4327                           
  4328                           ;main.c: 59:             }
  4329  0022  282F               	goto	i1l2737
  4330  0023                     i1l2731:
  4331                           
  4332                           ;main.c: 61:                 currentTripReset();
  4333  0023  318C  2445  3180   	fcall	i1_currentTripReset
  4334  0026  282F               	goto	i1l2737
  4335  0027                     i1l2733:
  4336                           
  4337                           ;main.c: 65:             if(currentTripCount > 0){
  4338  0027  0020               	movlb	0	; select bank0
  4339  0028  086B               	movf	_currentTripCount,w
  4340  0029  1903               	btfsc	3,2
  4341  002A  282C               	goto	u246_21
  4342  002B  282D               	goto	u246_20
  4343  002C                     u246_21:
  4344  002C  282F               	goto	i1l2737
  4345  002D                     u246_20:
  4346  002D                     i1l2735:
  4347                           
  4348                           ;main.c: 66:                 currentTripCount--;
  4349  002D  3001               	movlw	1
  4350  002E  02EB               	subwf	_currentTripCount,f
  4351  002F                     i1l2737:
  4352                           
  4353                           ;main.c: 69:         setPWMDutyandPeriod(setDuty, setPeriod);
  4354  002F  0020               	movlb	0	; select bank0
  4355  0030  0864               	movf	_setDuty+1,w
  4356  0031  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4357  0032  0863               	movf	_setDuty,w
  4358  0033  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4359  0034  086E               	movf	_setPeriod,w
  4360  0035  00DC               	movwf	??_Tick980Hz
  4361  0036  085C               	movf	??_Tick980Hz,w
  4362  0037  00F2               	movwf	setPWMDutyandPeriod@period
  4363  0038  318C  24FA  3180   	fcall	_setPWMDutyandPeriod
  4364  003B                     i1l2739:
  4365                           
  4366                           ;main.c: 72:         if(timerSlotHalf == 0){
  4367  003B  0020               	movlb	0	; select bank0
  4368  003C  0867               	movf	_timerSlotHalf,w	;volatile
  4369  003D  1D03               	btfss	3,2
  4370  003E  2840               	goto	u247_21
  4371  003F  2841               	goto	u247_20
  4372  0040                     u247_21:
  4373  0040  2849               	goto	i1l2745
  4374  0041                     u247_20:
  4375  0041                     i1l2741:
  4376                           
  4377                           ;main.c: 74:             controlRoutine();
  4378  0041  3182  22B8  3180   	fcall	_controlRoutine
  4379  0044                     i1l2743:
  4380                           
  4381                           ;main.c: 75:             writeGPIO(pinRB4, 0);
  4382  0044  01F0               	clrf	i1writeGPIO@writeValue
  4383  0045  300C               	movlw	12
  4384  0046  3187  2703  3180   	fcall	i1_writeGPIO
  4385  0049                     i1l2745:
  4386                           
  4387                           ;main.c: 78:         if(timerSlotHalf == 1){
  4388  0049  0020               	movlb	0	; select bank0
  4389  004A  0367               	decf	_timerSlotHalf,w	;volatile
  4390  004B  1D03               	btfss	3,2
  4391  004C  284E               	goto	u248_21
  4392  004D  284F               	goto	u248_20
  4393  004E                     u248_21:
  4394  004E  2898               	goto	i1l2767
  4395  004F                     u248_20:
  4396  004F                     i1l2747:
  4397                           
  4398                           ;main.c: 80:             writeGPIO(pinRB5, 1);
  4399  004F  01F0               	clrf	i1writeGPIO@writeValue
  4400  0050  0AF0               	incf	i1writeGPIO@writeValue,f
  4401  0051  300D               	movlw	13
  4402  0052  3187  2703  3180   	fcall	i1_writeGPIO
  4403  0055                     i1l2749:
  4404                           
  4405                           ;main.c: 81:             filteredIL = readFilteredIL();
  4406  0055  318E  2697  3180   	fcall	_readFilteredIL
  4407  0058  0871               	movf	?_readFilteredIL+1,w
  4408  0059  0020               	movlb	0	; select bank0
  4409  005A  00E0               	movwf	_filteredIL+1
  4410  005B  0870               	movf	?_readFilteredIL,w
  4411  005C  00DF               	movwf	_filteredIL
  4412  005D                     i1l2751:
  4413                           
  4414                           ;main.c: 83:             filteredVout = readFilteredVout();
  4415  005D  3187  2762  3180   	fcall	_readFilteredVout
  4416  0060  087D               	movf	?_readFilteredVout+1,w
  4417  0061  0020               	movlb	0	; select bank0
  4418  0062  00DE               	movwf	_filteredVout+1
  4419  0063  087C               	movf	?_readFilteredVout,w
  4420  0064  00DD               	movwf	_filteredVout
  4421  0065                     i1l2753:
  4422                           
  4423                           ;main.c: 86:             if(timerSlotQuarter == 0){
  4424  0065  0866               	movf	_timerSlotQuarter,w	;volatile
  4425  0066  1D03               	btfss	3,2
  4426  0067  2869               	goto	u249_21
  4427  0068  286A               	goto	u249_20
  4428  0069                     u249_21:
  4429  0069  286D               	goto	i1l2757
  4430  006A                     u249_20:
  4431  006A                     i1l2755:
  4432                           
  4433                           ;main.c: 88:                 runPotScaling();
  4434  006A  3183  23B2  3180   	fcall	_runPotScaling
  4435  006D                     i1l2757:
  4436                           
  4437                           ;main.c: 91:             if(timerSlotQuarter == 1){
  4438  006D  0020               	movlb	0	; select bank0
  4439  006E  0366               	decf	_timerSlotQuarter,w	;volatile
  4440  006F  1D03               	btfss	3,2
  4441  0070  2872               	goto	u250_21
  4442  0071  2873               	goto	u250_20
  4443  0072                     u250_21:
  4444  0072  2883               	goto	i1l2761
  4445  0073                     u250_20:
  4446  0073                     i1l2759:
  4447                           
  4448                           ;main.c: 93:                 filteredDutyPot = readFilteredDutyPot();
  4449  0073  318F  274A  3180   	fcall	_readFilteredDutyPot
  4450  0076  087D               	movf	?_readFilteredDutyPot+1,w
  4451  0077  0022               	movlb	2	; select bank2
  4452  0078  00E1               	movwf	(_filteredDutyPot+1)^(0+256)
  4453  0079  087C               	movf	?_readFilteredDutyPot,w
  4454  007A  00E0               	movwf	_filteredDutyPot^(0+256)
  4455                           
  4456                           ;main.c: 94:                 filteredFreqPot = readFilteredFreqPot();
  4457  007B  318F  27A5  3180   	fcall	_readFilteredFreqPot
  4458  007E  087D               	movf	?_readFilteredFreqPot+1,w
  4459  007F  0021               	movlb	1	; select bank1
  4460  0080  00C1               	movwf	(_filteredFreqPot+1)^(0+128)
  4461  0081  087C               	movf	?_readFilteredFreqPot,w
  4462  0082  00C0               	movwf	_filteredFreqPot^(0+128)
  4463  0083                     i1l2761:
  4464                           
  4465                           ;main.c: 97:             timerSlotQuarter = ~timerSlotQuarter;
  4466  0083  0020               	movlb	0	; select bank0
  4467  0084  0366               	decf	_timerSlotQuarter,w	;volatile
  4468  0085  1D03               	btfss	3,2
  4469  0086  2888               	goto	u251_21
  4470  0087  288A               	goto	u251_20
  4471  0088                     u251_21:
  4472  0088  3001               	movlw	1
  4473  0089  288B               	goto	u252_20
  4474  008A                     u251_20:
  4475  008A  3000               	movlw	0
  4476  008B                     u252_20:
  4477  008B  00DC               	movwf	??_Tick980Hz
  4478  008C  085C               	movf	??_Tick980Hz,w
  4479  008D  00E6               	movwf	_timerSlotQuarter	;volatile
  4480  008E                     i1l2763:
  4481                           
  4482                           ;main.c: 98:             writeGPIO(pinRB4, 0);
  4483  008E  01F0               	clrf	i1writeGPIO@writeValue
  4484  008F  300C               	movlw	12
  4485  0090  3187  2703  3180   	fcall	i1_writeGPIO
  4486  0093                     i1l2765:
  4487                           
  4488                           ;main.c: 99:             writeGPIO(pinRB5, 0);
  4489  0093  01F0               	clrf	i1writeGPIO@writeValue
  4490  0094  300D               	movlw	13
  4491  0095  3187  2703  3180   	fcall	i1_writeGPIO
  4492  0098                     i1l2767:
  4493                           
  4494                           ;main.c: 102:         timerSlotHalf = ~timerSlotHalf;
  4495  0098  0020               	movlb	0	; select bank0
  4496  0099  0367               	decf	_timerSlotHalf,w	;volatile
  4497  009A  1D03               	btfss	3,2
  4498  009B  289D               	goto	u253_21
  4499  009C  289F               	goto	u253_20
  4500  009D                     u253_21:
  4501  009D  3001               	movlw	1
  4502  009E  28A0               	goto	u254_20
  4503  009F                     u253_20:
  4504  009F  3000               	movlw	0
  4505  00A0                     u254_20:
  4506  00A0  00DC               	movwf	??_Tick980Hz
  4507  00A1  085C               	movf	??_Tick980Hz,w
  4508  00A2  00E7               	movwf	_timerSlotHalf	;volatile
  4509  00A3                     i1l2769:
  4510                           
  4511                           ;main.c: 103:         INTCONbits.TMR0IF = 0;
  4512  00A3  110B               	bcf	11,2	;volatile
  4513  00A4                     i1l115:
  4514  00A4  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4515  00A5  0009               	retfie
  4516  00A6                     __end_of_Tick980Hz:
  4517                           
  4518                           	psect	text17
  4519  0C45                     __ptext17:	
  4520 ;; *************** function i1_currentTripReset *****************
  4521 ;; Defined at:
  4522 ;;		line 70 in file "CurrentSensor.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, pclath, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4536 ;;      Params:         0       0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used: 1
  4542 ;; Hardware stack levels required when called: 1
  4543 ;; This function calls:
  4544 ;;		i1_writeGPIO
  4545 ;; This function is called by:
  4546 ;;		_Tick980Hz
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550  0C45                     i1_currentTripReset:	
  4551                           ;psect for function i1_currentTripReset
  4552                           
  4553  0C45                     i1l2721:	
  4554                           ;incstack = 0
  4555                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  4556                           
  4557                           
  4558                           ;CurrentSensor.c: 71:     writeGPIO(pinRB3, 0);
  4559  0C45  01F0               	clrf	i1writeGPIO@writeValue
  4560  0C46  300B               	movlw	11
  4561  0C47  3187  2703  318C   	fcall	i1_writeGPIO
  4562  0C4A                     i1l2723:
  4563                           
  4564                           ;CurrentSensor.c: 72:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  4565                           ;CurrentSensor.c: 73:     writeGPIO(pinRB3, 1);
  4566  0C4A  01F0               	clrf	i1writeGPIO@writeValue
  4567  0C4B  0AF0               	incf	i1writeGPIO@writeValue,f
  4568  0C4C  300B               	movlw	11
  4569  0C4D  3187  2703  318C   	fcall	i1_writeGPIO
  4570  0C50                     i1l549:
  4571  0C50  0008               	return
  4572  0C51                     __end_ofi1_currentTripReset:
  4573                           
  4574                           	psect	text18
  4575  0703                     __ptext18:	
  4576 ;; *************** function i1_writeGPIO *****************
  4577 ;; Defined at:
  4578 ;;		line 52 in file "GPIO.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  gpioNumber      1    wreg     const enum E2798
  4581 ;;  writeValue      1    0[COMMON] unsigned char 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  gpioNumber      1    4[COMMON] const enum E2798
  4584 ;;  portNumber      1    5[COMMON] unsigned char 
  4585 ;;  portType        1    3[COMMON] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4595 ;;      Params:         1       0       0       0       0       0
  4596 ;;      Locals:         3       0       0       0       0       0
  4597 ;;      Temps:          2       0       0       0       0       0
  4598 ;;      Totals:         6       0       0       0       0       0
  4599 ;;Total ram usage:        6 bytes
  4600 ;; Hardware stack levels used: 1
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_Tick980Hz
  4605 ;;		i1_currentTripReset
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609  0703                     i1_writeGPIO:	
  4610                           ;psect for function i1_writeGPIO
  4611                           
  4612                           
  4613                           ;incstack = 0
  4614                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  4615                           ;i1writeGPIO@gpioNumber stored from wreg
  4616  0703  00F4               	movwf	i1writeGPIO@gpioNumber
  4617  0704                     i1l2341:
  4618                           
  4619                           ;GPIO.c: 54:     uint8_t portType = 0;
  4620  0704  01F3               	clrf	i1writeGPIO@portType
  4621  0705                     i1l2343:
  4622                           
  4623                           ;GPIO.c: 55:     if(gpioNumber > 7){
  4624  0705  3008               	movlw	8
  4625  0706  0274               	subwf	i1writeGPIO@gpioNumber,w
  4626  0707  1C03               	skipc
  4627  0708  2F0A               	goto	u200_21
  4628  0709  2F0B               	goto	u200_20
  4629  070A                     u200_21:
  4630  070A  2F13               	goto	i1l2349
  4631  070B                     u200_20:
  4632  070B                     i1l2345:
  4633                           
  4634                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  4635  070B  0874               	movf	i1writeGPIO@gpioNumber,w
  4636  070C  3EF8               	addlw	248
  4637  070D  00F1               	movwf	??i1_writeGPIO
  4638  070E  0871               	movf	??i1_writeGPIO,w
  4639  070F  00F5               	movwf	i1writeGPIO@portNumber
  4640  0710                     i1l2347:
  4641                           
  4642                           ;GPIO.c: 57:         portType = 1;
  4643  0710  01F3               	clrf	i1writeGPIO@portType
  4644  0711  0AF3               	incf	i1writeGPIO@portType,f
  4645                           
  4646                           ;GPIO.c: 58:     }
  4647  0712  2F18               	goto	i1l2353
  4648  0713                     i1l2349:
  4649                           
  4650                           ;GPIO.c: 60:         portNumber = gpioNumber;
  4651  0713  0874               	movf	i1writeGPIO@gpioNumber,w
  4652  0714  00F1               	movwf	??i1_writeGPIO
  4653  0715  0871               	movf	??i1_writeGPIO,w
  4654  0716  00F5               	movwf	i1writeGPIO@portNumber
  4655  0717                     i1l2351:
  4656                           
  4657                           ;GPIO.c: 61:         portType = 0;
  4658  0717  01F3               	clrf	i1writeGPIO@portType
  4659  0718                     i1l2353:
  4660                           
  4661                           ;GPIO.c: 64:     if(portType == 0){
  4662  0718  0873               	movf	i1writeGPIO@portType,w
  4663  0719  1D03               	btfss	3,2
  4664  071A  2F1C               	goto	u201_21
  4665  071B  2F1D               	goto	u201_20
  4666  071C                     u201_21:
  4667  071C  2F3D               	goto	i1l2361
  4668  071D                     u201_20:
  4669  071D                     i1l2355:
  4670                           
  4671                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  4672  071D  0870               	movf	i1writeGPIO@writeValue,w
  4673  071E  1903               	btfsc	3,2
  4674  071F  2F21               	goto	u202_21
  4675  0720  2F22               	goto	u202_20
  4676  0721                     u202_21:
  4677  0721  2F2F               	goto	i1l2359
  4678  0722                     u202_20:
  4679  0722                     i1l2357:
  4680  0722  3001               	movlw	1
  4681  0723  00F1               	movwf	??i1_writeGPIO
  4682  0724  0A75               	incf	i1writeGPIO@portNumber,w
  4683  0725  2F27               	goto	u203_24
  4684  0726                     u203_25:
  4685  0726  35F1               	lslf	??i1_writeGPIO,f
  4686  0727                     u203_24:
  4687  0727  0B89               	decfsz	9,f
  4688  0728  2F26               	goto	u203_25
  4689  0729  0871               	movf	??i1_writeGPIO,w
  4690  072A  00F2               	movwf	??i1_writeGPIO+1
  4691  072B  0872               	movf	??i1_writeGPIO+1,w
  4692  072C  0022               	movlb	2	; select bank2
  4693  072D  048C               	iorwf	12,f	;volatile
  4694  072E  2F61               	goto	i1l337
  4695  072F                     i1l2359:
  4696  072F  3001               	movlw	1
  4697  0730  00F1               	movwf	??i1_writeGPIO
  4698  0731  0A75               	incf	i1writeGPIO@portNumber,w
  4699  0732  2F34               	goto	u204_24
  4700  0733                     u204_25:
  4701  0733  35F1               	lslf	??i1_writeGPIO,f
  4702  0734                     u204_24:
  4703  0734  0B89               	decfsz	9,f
  4704  0735  2F33               	goto	u204_25
  4705  0736  0871               	movf	??i1_writeGPIO,w
  4706  0737  3AFF               	xorlw	255
  4707  0738  00F2               	movwf	??i1_writeGPIO+1
  4708  0739  0872               	movf	??i1_writeGPIO+1,w
  4709  073A  0022               	movlb	2	; select bank2
  4710  073B  058C               	andwf	12,f	;volatile
  4711  073C  2F61               	goto	i1l337
  4712  073D                     i1l2361:
  4713  073D  0373               	decf	i1writeGPIO@portType,w
  4714  073E  1D03               	btfss	3,2
  4715  073F  2F41               	goto	u205_21
  4716  0740  2F42               	goto	u205_20
  4717  0741                     u205_21:
  4718  0741  2F61               	goto	i1l337
  4719  0742                     u205_20:
  4720  0742                     i1l2363:
  4721                           
  4722                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  4723  0742  0870               	movf	i1writeGPIO@writeValue,w
  4724  0743  1903               	btfsc	3,2
  4725  0744  2F46               	goto	u206_21
  4726  0745  2F47               	goto	u206_20
  4727  0746                     u206_21:
  4728  0746  2F54               	goto	i1l2367
  4729  0747                     u206_20:
  4730  0747                     i1l2365:
  4731  0747  3001               	movlw	1
  4732  0748  00F1               	movwf	??i1_writeGPIO
  4733  0749  0A75               	incf	i1writeGPIO@portNumber,w
  4734  074A  2F4C               	goto	u207_24
  4735  074B                     u207_25:
  4736  074B  35F1               	lslf	??i1_writeGPIO,f
  4737  074C                     u207_24:
  4738  074C  0B89               	decfsz	9,f
  4739  074D  2F4B               	goto	u207_25
  4740  074E  0871               	movf	??i1_writeGPIO,w
  4741  074F  00F2               	movwf	??i1_writeGPIO+1
  4742  0750  0872               	movf	??i1_writeGPIO+1,w
  4743  0751  0022               	movlb	2	; select bank2
  4744  0752  048D               	iorwf	13,f	;volatile
  4745  0753  2F61               	goto	i1l337
  4746  0754                     i1l2367:
  4747  0754  3001               	movlw	1
  4748  0755  00F1               	movwf	??i1_writeGPIO
  4749  0756  0A75               	incf	i1writeGPIO@portNumber,w
  4750  0757  2F59               	goto	u208_24
  4751  0758                     u208_25:
  4752  0758  35F1               	lslf	??i1_writeGPIO,f
  4753  0759                     u208_24:
  4754  0759  0B89               	decfsz	9,f
  4755  075A  2F58               	goto	u208_25
  4756  075B  0871               	movf	??i1_writeGPIO,w
  4757  075C  3AFF               	xorlw	255
  4758  075D  00F2               	movwf	??i1_writeGPIO+1
  4759  075E  0872               	movf	??i1_writeGPIO+1,w
  4760  075F  0022               	movlb	2	; select bank2
  4761  0760  058D               	andwf	13,f	;volatile
  4762  0761                     i1l337:
  4763  0761  0008               	return
  4764  0762                     __end_ofi1_writeGPIO:
  4765                           
  4766                           	psect	text19
  4767  0C33                     __ptext19:	
  4768 ;; *************** function _transToOverCurrentFault *****************
  4769 ;; Defined at:
  4770 ;;		line 45 in file "StateMachine.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4784 ;;      Params:         0       0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0       0
  4786 ;;      Temps:          1       0       0       0       0       0
  4787 ;;      Totals:         1       0       0       0       0       0
  4788 ;;Total ram usage:        1 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_Tick980Hz
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797  0C33                     _transToOverCurrentFault:	
  4798                           ;psect for function _transToOverCurrentFault
  4799                           
  4800  0C33                     i1l2383:	
  4801                           ;incstack = 0
  4802                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  4803                           
  4804                           
  4805                           ;StateMachine.c: 46:     setDuty = 0;
  4806  0C33  0020               	movlb	0	; select bank0
  4807  0C34  01E3               	clrf	_setDuty
  4808  0C35  01E4               	clrf	_setDuty+1
  4809                           
  4810                           ;StateMachine.c: 47:     setPeriod = 0;
  4811  0C36  01EE               	clrf	_setPeriod
  4812  0C37                     i1l2385:
  4813                           
  4814                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  4815  0C37  3004               	movlw	4
  4816  0C38  00F0               	movwf	??_transToOverCurrentFault
  4817  0C39  0870               	movf	??_transToOverCurrentFault,w
  4818  0C3A  00EC               	movwf	_currentState
  4819  0C3B                     i1l578:
  4820  0C3B  0008               	return
  4821  0C3C                     __end_of_transToOverCurrentFault:
  4822                           
  4823                           	psect	text20
  4824  0CFA                     __ptext20:	
  4825 ;; *************** function _setPWMDutyandPeriod *****************
  4826 ;; Defined at:
  4827 ;;		line 49 in file "PWM.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4830 ;;  period          1    2[COMMON] unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      void 
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4842 ;;      Params:         3       0       0       0       0       0
  4843 ;;      Locals:         0       0       0       0       0       0
  4844 ;;      Temps:          2       0       0       0       0       0
  4845 ;;      Totals:         5       0       0       0       0       0
  4846 ;;Total ram usage:        5 bytes
  4847 ;; Hardware stack levels used: 1
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_Tick980Hz
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855  0CFA                     _setPWMDutyandPeriod:	
  4856                           ;psect for function _setPWMDutyandPeriod
  4857                           
  4858  0CFA                     i1l2387:	
  4859                           ;incstack = 0
  4860                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4861                           
  4862                           
  4863                           ;PWM.c: 50:     PR2 = period;
  4864  0CFA  0872               	movf	setPWMDutyandPeriod@period,w
  4865  0CFB  0020               	movlb	0	; select bank0
  4866  0CFC  009B               	movwf	27	;volatile
  4867  0CFD                     i1l2389:
  4868                           
  4869                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4870  0CFD  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4871  0CFE  00F4               	movwf	??_setPWMDutyandPeriod+1
  4872  0CFF  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4873  0D00  00F3               	movwf	??_setPWMDutyandPeriod
  4874  0D01  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4875  0D02  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4876  0D03  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4877  0D04  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4878  0D05  0873               	movf	??_setPWMDutyandPeriod,w
  4879  0D06  0025               	movlb	5	; select bank5
  4880  0D07  0091               	movwf	17	;volatile
  4881  0D08                     i1l2391:
  4882                           
  4883                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4884  0D08  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4885  0D09  3901               	andlw	1
  4886  0D0A  00F3               	movwf	??_setPWMDutyandPeriod
  4887  0D0B  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4888  0D0C  0813               	movf	19,w	;volatile
  4889  0D0D  0673               	xorwf	??_setPWMDutyandPeriod,w
  4890  0D0E  39EF               	andlw	-17
  4891  0D0F  0673               	xorwf	??_setPWMDutyandPeriod,w
  4892  0D10  0093               	movwf	19	;volatile
  4893                           
  4894                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4895  0D11  3002               	movlw	2
  4896  0D12  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4897  0D13  00F3               	movwf	??_setPWMDutyandPeriod
  4898  0D14  3000               	movlw	0
  4899  0D15  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4900  0D16  00F4               	movwf	??_setPWMDutyandPeriod+1
  4901  0D17  3000               	movlw	0
  4902  0D18  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4903  0D19  3002               	movlw	2
  4904  0D1A  1903               	skipnz
  4905  0D1B  0273               	subwf	??_setPWMDutyandPeriod,w
  4906  0D1C  1803               	skipnc
  4907  0D1D  2D1F               	goto	u215_21
  4908  0D1E  2D22               	goto	u215_20
  4909  0D1F                     u215_21:
  4910  0D1F  0025               	movlb	5	; select bank5
  4911  0D20  1693               	bsf	19,5	;volatile
  4912  0D21  2D24               	goto	u216_24
  4913  0D22                     u215_20:
  4914  0D22  0025               	movlb	5	; select bank5
  4915  0D23  1293               	bcf	19,5	;volatile
  4916  0D24                     u216_24:
  4917  0D24                     i1l184:
  4918  0D24  0008               	return
  4919  0D25                     __end_of_setPWMDutyandPeriod:
  4920                           
  4921                           	psect	text21
  4922  03B2                     __ptext21:	
  4923 ;; *************** function _runPotScaling *****************
  4924 ;; Defined at:
  4925 ;;		line 55 in file "Potentiometer.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4930 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, pclath, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4940 ;;      Params:         0       0       0       0       0       0
  4941 ;;      Locals:         0       4       0       0       0       0
  4942 ;;      Temps:          0       8       0       0       0       0
  4943 ;;      Totals:         0      12       0       0       0       0
  4944 ;;Total ram usage:       12 bytes
  4945 ;; Hardware stack levels used: 1
  4946 ;; Hardware stack levels required when called: 1
  4947 ;; This function calls:
  4948 ;;		___lldiv
  4949 ;;		___lmul
  4950 ;;		___wmul
  4951 ;; This function is called by:
  4952 ;;		_Tick980Hz
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956  03B2                     _runPotScaling:	
  4957                           ;psect for function _runPotScaling
  4958                           
  4959  03B2                     i1l2483:	
  4960                           ;incstack = 0
  4961                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4962                           
  4963                           
  4964                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4965  03B2  0020               	movlb	0	; select bank0
  4966  03B3  036C               	decf	_currentState,w
  4967  03B4  1D03               	btfss	3,2
  4968  03B5  2BB7               	goto	u227_21
  4969  03B6  2BB8               	goto	u227_20
  4970  03B7                     u227_21:
  4971  03B7  2C90               	goto	i1l398
  4972  03B8                     u227_20:
  4973  03B8                     i1l2485:
  4974                           
  4975                           ;Potentiometer.c: 58:         potSetCount++;
  4976  03B8  3001               	movlw	1
  4977  03B9  00A6               	movwf	??_runPotScaling
  4978  03BA  0826               	movf	??_runPotScaling,w
  4979  03BB  07E8               	addwf	_potSetCount,f
  4980                           
  4981                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4982  03BC  3020               	movlw	32
  4983  03BD  0668               	xorwf	_potSetCount,w
  4984  03BE  1D03               	btfss	3,2
  4985  03BF  2BC1               	goto	u228_21
  4986  03C0  2BC2               	goto	u228_20
  4987  03C1                     u228_21:
  4988  03C1  2C90               	goto	i1l398
  4989  03C2                     u228_20:
  4990  03C2                     i1l2487:
  4991                           
  4992                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 45) * (uint
      +                          32_t)(159u - 15u)) >> 10 ) + 15u;
  4993  03C2  0021               	movlb	1	; select bank1
  4994  03C3  0840               	movf	_filteredFreqPot^(0+128),w
  4995  03C4  3ED3               	addlw	211
  4996  03C5  00F0               	movwf	___lmul@multiplier
  4997  03C6  30FF               	movlw	255
  4998  03C7  3D41               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4999  03C8  00F1               	movwf	___lmul@multiplier+1
  5000  03C9  01F2               	clrf	___lmul@multiplier+2
  5001  03CA  01F3               	clrf	___lmul@multiplier+3
  5002  03CB  3000               	movlw	0
  5003  03CC  00F7               	movwf	___lmul@multiplicand+3
  5004  03CD  3000               	movlw	0
  5005  03CE  00F6               	movwf	___lmul@multiplicand+2
  5006  03CF  3000               	movlw	0
  5007  03D0  00F5               	movwf	___lmul@multiplicand+1
  5008  03D1  3090               	movlw	144
  5009  03D2  00F4               	movwf	___lmul@multiplicand
  5010  03D3  318D  2552  3183   	fcall	___lmul
  5011  03D6  0870               	movf	?___lmul,w
  5012  03D7  0020               	movlb	0	; select bank0
  5013  03D8  00A6               	movwf	??_runPotScaling
  5014  03D9  0871               	movf	?___lmul+1,w
  5015  03DA  00A7               	movwf	??_runPotScaling+1
  5016  03DB  0872               	movf	?___lmul+2,w
  5017  03DC  00A8               	movwf	??_runPotScaling+2
  5018  03DD  0873               	movf	?___lmul+3,w
  5019  03DE  00A9               	movwf	??_runPotScaling+3
  5020  03DF  300A               	movlw	10
  5021  03E0                     u229_25:
  5022  03E0  36A9               	lsrf	??_runPotScaling+3,f
  5023  03E1  0CA8               	rrf	??_runPotScaling+2,f
  5024  03E2  0CA7               	rrf	??_runPotScaling+1,f
  5025  03E3  0CA6               	rrf	??_runPotScaling,f
  5026  03E4                     u229_20:
  5027  03E4  0B89               	decfsz	9,f
  5028  03E5  2BE0               	goto	u229_25
  5029  03E6  0826               	movf	??_runPotScaling,w
  5030  03E7  3E0F               	addlw	15
  5031  03E8  00AA               	movwf	??_runPotScaling+4
  5032  03E9  082A               	movf	??_runPotScaling+4,w
  5033  03EA  00EE               	movwf	_setPeriod
  5034                           
  5035                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-45) *
      +                           (uint32_t)setPeriod )) >> 8;
  5036  03EB  0022               	movlb	2	; select bank2
  5037  03EC  0860               	movf	_filteredDutyPot^(0+256),w
  5038  03ED  3ED3               	addlw	211
  5039  03EE  00F0               	movwf	___lmul@multiplier
  5040  03EF  30FF               	movlw	255
  5041  03F0  3D61               	addwfc	(_filteredDutyPot+1)^(0+256),w
  5042  03F1  00F1               	movwf	___lmul@multiplier+1
  5043  03F2  01F2               	clrf	___lmul@multiplier+2
  5044  03F3  01F3               	clrf	___lmul@multiplier+3
  5045  03F4  0020               	movlb	0	; select bank0
  5046  03F5  086E               	movf	_setPeriod,w
  5047  03F6  00A6               	movwf	??_runPotScaling
  5048  03F7  01A7               	clrf	??_runPotScaling+1
  5049  03F8  01A8               	clrf	??_runPotScaling+2
  5050  03F9  01A9               	clrf	??_runPotScaling+3
  5051  03FA  0829               	movf	??_runPotScaling+3,w
  5052  03FB  00F7               	movwf	___lmul@multiplicand+3
  5053  03FC  0828               	movf	??_runPotScaling+2,w
  5054  03FD  00F6               	movwf	___lmul@multiplicand+2
  5055  03FE  0827               	movf	??_runPotScaling+1,w
  5056  03FF  00F5               	movwf	___lmul@multiplicand+1
  5057  0400  0826               	movf	??_runPotScaling,w
  5058  0401  00F4               	movwf	___lmul@multiplicand
  5059  0402  318D  2552  3183   	fcall	___lmul
  5060  0405  0870               	movf	?___lmul,w
  5061  0406  0020               	movlb	0	; select bank0
  5062  0407  00AA               	movwf	??_runPotScaling+4
  5063  0408  0871               	movf	?___lmul+1,w
  5064  0409  00AB               	movwf	??_runPotScaling+5
  5065  040A  0872               	movf	?___lmul+2,w
  5066  040B  00AC               	movwf	??_runPotScaling+6
  5067  040C  0873               	movf	?___lmul+3,w
  5068  040D  00AD               	movwf	??_runPotScaling+7
  5069  040E  3008               	movlw	8
  5070  040F                     u230_25:
  5071  040F  36AD               	lsrf	??_runPotScaling+7,f
  5072  0410  0CAC               	rrf	??_runPotScaling+6,f
  5073  0411  0CAB               	rrf	??_runPotScaling+5,f
  5074  0412  0CAA               	rrf	??_runPotScaling+4,f
  5075  0413                     u230_20:
  5076  0413  0B89               	decfsz	9,f
  5077  0414  2C0F               	goto	u230_25
  5078  0415  082B               	movf	??_runPotScaling+5,w
  5079  0416  00E4               	movwf	_setDuty+1
  5080  0417  082A               	movf	??_runPotScaling+4,w
  5081  0418  00E3               	movwf	_setDuty
  5082                           
  5083                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  5084  0419  3000               	movlw	0
  5085  041A  00F9               	movwf	___lldiv@divisor+3
  5086  041B  3000               	movlw	0
  5087  041C  00F8               	movwf	___lldiv@divisor+2
  5088  041D  3000               	movlw	0
  5089  041E  00F7               	movwf	___lldiv@divisor+1
  5090  041F  3019               	movlw	25
  5091  0420  00F6               	movwf	___lldiv@divisor
  5092  0421  305A               	movlw	90
  5093  0422  00F2               	movwf	___wmul@multiplicand
  5094  0423  3000               	movlw	0
  5095  0424  00F3               	movwf	___wmul@multiplicand+1
  5096  0425  086E               	movf	_setPeriod,w
  5097  0426  00A6               	movwf	??_runPotScaling
  5098  0427  01A7               	clrf	??_runPotScaling+1
  5099  0428  0826               	movf	??_runPotScaling,w
  5100  0429  00F0               	movwf	___wmul@multiplier
  5101  042A  0827               	movf	??_runPotScaling+1,w
  5102  042B  00F1               	movwf	___wmul@multiplier+1
  5103  042C  318C  24BB  3183   	fcall	___wmul
  5104  042F  0870               	movf	?___wmul,w
  5105  0430  0020               	movlb	0	; select bank0
  5106  0431  00A8               	movwf	??_runPotScaling+2
  5107  0432  0871               	movf	?___wmul+1,w
  5108  0433  00A9               	movwf	??_runPotScaling+3
  5109  0434  01AA               	clrf	??_runPotScaling+4
  5110  0435  01AB               	clrf	??_runPotScaling+5
  5111  0436  082B               	movf	??_runPotScaling+5,w
  5112  0437  00FD               	movwf	___lldiv@dividend+3
  5113  0438  082A               	movf	??_runPotScaling+4,w
  5114  0439  00FC               	movwf	___lldiv@dividend+2
  5115  043A  0829               	movf	??_runPotScaling+3,w
  5116  043B  00FB               	movwf	___lldiv@dividend+1
  5117  043C  0828               	movf	??_runPotScaling+2,w
  5118  043D  00FA               	movwf	___lldiv@dividend
  5119  043E  318E  26EF  3183   	fcall	___lldiv
  5120  0441  0877               	movf	?___lldiv+1,w
  5121  0442  0020               	movlb	0	; select bank0
  5122  0443  00AF               	movwf	runPotScaling@maxDuty+1
  5123  0444  0876               	movf	?___lldiv,w
  5124  0445  00AE               	movwf	runPotScaling@maxDuty
  5125                           
  5126                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  5127  0446  3000               	movlw	0
  5128  0447  00F9               	movwf	___lldiv@divisor+3
  5129  0448  3000               	movlw	0
  5130  0449  00F8               	movwf	___lldiv@divisor+2
  5131  044A  3000               	movlw	0
  5132  044B  00F7               	movwf	___lldiv@divisor+1
  5133  044C  3019               	movlw	25
  5134  044D  00F6               	movwf	___lldiv@divisor
  5135  044E  300A               	movlw	10
  5136  044F  00F2               	movwf	___wmul@multiplicand
  5137  0450  3000               	movlw	0
  5138  0451  00F3               	movwf	___wmul@multiplicand+1
  5139  0452  086E               	movf	_setPeriod,w
  5140  0453  00A6               	movwf	??_runPotScaling
  5141  0454  01A7               	clrf	??_runPotScaling+1
  5142  0455  0826               	movf	??_runPotScaling,w
  5143  0456  00F0               	movwf	___wmul@multiplier
  5144  0457  0827               	movf	??_runPotScaling+1,w
  5145  0458  00F1               	movwf	___wmul@multiplier+1
  5146  0459  318C  24BB  3183   	fcall	___wmul
  5147  045C  0870               	movf	?___wmul,w
  5148  045D  0020               	movlb	0	; select bank0
  5149  045E  00A8               	movwf	??_runPotScaling+2
  5150  045F  0871               	movf	?___wmul+1,w
  5151  0460  00A9               	movwf	??_runPotScaling+3
  5152  0461  01AA               	clrf	??_runPotScaling+4
  5153  0462  01AB               	clrf	??_runPotScaling+5
  5154  0463  082B               	movf	??_runPotScaling+5,w
  5155  0464  00FD               	movwf	___lldiv@dividend+3
  5156  0465  082A               	movf	??_runPotScaling+4,w
  5157  0466  00FC               	movwf	___lldiv@dividend+2
  5158  0467  0829               	movf	??_runPotScaling+3,w
  5159  0468  00FB               	movwf	___lldiv@dividend+1
  5160  0469  0828               	movf	??_runPotScaling+2,w
  5161  046A  00FA               	movwf	___lldiv@dividend
  5162  046B  318E  26EF  3183   	fcall	___lldiv
  5163  046E  0877               	movf	?___lldiv+1,w
  5164  046F  0020               	movlb	0	; select bank0
  5165  0470  00B1               	movwf	runPotScaling@minDuty+1
  5166  0471  0876               	movf	?___lldiv,w
  5167  0472  00B0               	movwf	runPotScaling@minDuty
  5168  0473                     i1l2489:
  5169                           
  5170                           ;Potentiometer.c: 69:             if(setDuty > maxDuty) setDuty = maxDuty;
  5171  0473  0864               	movf	_setDuty+1,w
  5172  0474  022F               	subwf	runPotScaling@maxDuty+1,w
  5173  0475  1D03               	skipz
  5174  0476  2C79               	goto	u231_25
  5175  0477  0863               	movf	_setDuty,w
  5176  0478  022E               	subwf	runPotScaling@maxDuty,w
  5177  0479                     u231_25:
  5178  0479  1803               	skipnc
  5179  047A  2C7C               	goto	u231_21
  5180  047B  2C7D               	goto	u231_20
  5181  047C                     u231_21:
  5182  047C  2C81               	goto	i1l396
  5183  047D                     u231_20:
  5184  047D                     i1l2491:
  5185  047D  082F               	movf	runPotScaling@maxDuty+1,w
  5186  047E  00E4               	movwf	_setDuty+1
  5187  047F  082E               	movf	runPotScaling@maxDuty,w
  5188  0480  00E3               	movwf	_setDuty
  5189  0481                     i1l396:
  5190                           
  5191                           ;Potentiometer.c: 70:             if(setDuty < minDuty) setDuty = minDuty;
  5192  0481  0831               	movf	runPotScaling@minDuty+1,w
  5193  0482  0264               	subwf	_setDuty+1,w
  5194  0483  1D03               	skipz
  5195  0484  2C87               	goto	u232_25
  5196  0485  0830               	movf	runPotScaling@minDuty,w
  5197  0486  0263               	subwf	_setDuty,w
  5198  0487                     u232_25:
  5199  0487  1803               	skipnc
  5200  0488  2C8A               	goto	u232_21
  5201  0489  2C8B               	goto	u232_20
  5202  048A                     u232_21:
  5203  048A  2C8F               	goto	i1l2495
  5204  048B                     u232_20:
  5205  048B                     i1l2493:
  5206  048B  0831               	movf	runPotScaling@minDuty+1,w
  5207  048C  00E4               	movwf	_setDuty+1
  5208  048D  0830               	movf	runPotScaling@minDuty,w
  5209  048E  00E3               	movwf	_setDuty
  5210  048F                     i1l2495:
  5211                           
  5212                           ;Potentiometer.c: 72:             potSetCount = 0;
  5213  048F  01E8               	clrf	_potSetCount
  5214  0490                     i1l398:
  5215  0490  0008               	return
  5216  0491                     __end_of_runPotScaling:
  5217                           
  5218                           	psect	text22
  5219  0762                     __ptext22:	
  5220 ;; *************** function _readFilteredVout *****************
  5221 ;; Defined at:
  5222 ;;		line 33 in file "Controller.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  i               1    8[BANK0 ] unsigned char 
  5227 ;;  i               1    9[BANK0 ] unsigned char 
  5228 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2   12[COMMON] unsigned short 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5238 ;;      Params:         2       0       0       0       0       0
  5239 ;;      Locals:         0       6       0       0       0       0
  5240 ;;      Temps:          0       4       0       0       0       0
  5241 ;;      Totals:         2      10       0       0       0       0
  5242 ;;Total ram usage:       12 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 1
  5245 ;; This function calls:
  5246 ;;		_readADCRaw
  5247 ;; This function is called by:
  5248 ;;		_Tick980Hz
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252  0762                     _readFilteredVout:	
  5253                           ;psect for function _readFilteredVout
  5254                           
  5255  0762                     i1l2451:	
  5256                           ;incstack = 0
  5257                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5258                           
  5259                           
  5260                           ;Controller.c: 34:     for(uint8_t i=0; i<16 -1; i++) voutFIFO[i] = voutFIFO[i+1];
  5261  0762  0020               	movlb	0	; select bank0
  5262  0763  01A9               	clrf	readFilteredVout@i
  5263  0764                     i1l2457:
  5264  0764  3529               	lslf	readFilteredVout@i,w
  5265  0765  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  5266  0766  0086               	movwf	6
  5267  0767  3001               	movlw	1	; select bank3/4
  5268  0768  0087               	movwf	7
  5269  0769  3529               	lslf	readFilteredVout@i,w
  5270  076A  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5271  076B  0084               	movwf	4
  5272  076C  3001               	movlw	1	; select bank3/4
  5273  076D  0085               	movwf	5
  5274  076E  3F40               	moviw [0]fsr1
  5275  076F  3F80               	movwi [0]fsr0
  5276  0770  3F41               	moviw [1]fsr1
  5277  0771  3F81               	movwi [1]fsr0
  5278  0772                     i1l2459:
  5279  0772  3001               	movlw	1
  5280  0773  00A0               	movwf	??_readFilteredVout
  5281  0774  0820               	movf	??_readFilteredVout,w
  5282  0775  07A9               	addwf	readFilteredVout@i,f
  5283  0776                     i1l2461:
  5284  0776  300F               	movlw	15
  5285  0777  0229               	subwf	readFilteredVout@i,w
  5286  0778  1C03               	skipc
  5287  0779  2F7B               	goto	u224_21
  5288  077A  2F7C               	goto	u224_20
  5289  077B                     u224_21:
  5290  077B  2F64               	goto	i1l2457
  5291  077C                     u224_20:
  5292  077C                     i1l2463:
  5293                           
  5294                           ;Controller.c: 35:     voutFIFO[16 -1] = readADCRaw(pinRA4);
  5295  077C  3004               	movlw	4
  5296  077D  3185  25CC  3187   	fcall	_readADCRaw
  5297  0780  0871               	movf	?_readADCRaw+1,w
  5298  0781  0023               	movlb	3	; select bank3
  5299  0782  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5300  0783  0870               	movf	?_readADCRaw,w
  5301  0784  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5302  0785                     i1l2465:
  5303                           
  5304                           ;Controller.c: 36:     uint32_t sumOfSamples = 0;
  5305  0785  3000               	movlw	0
  5306  0786  0020               	movlb	0	; select bank0
  5307  0787  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5308  0788  3000               	movlw	0
  5309  0789  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5310  078A  3000               	movlw	0
  5311  078B  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5312  078C  3000               	movlw	0
  5313  078D  00A4               	movwf	readFilteredVout@sumOfSamples
  5314  078E                     i1l2467:
  5315                           
  5316                           ;Controller.c: 37:             for(uint8_t i=0; i<16; i++) sumOfSamples += voutFIFO[i];
  5317  078E  01A8               	clrf	readFilteredVout@i_861
  5318  078F                     i1l2473:
  5319  078F  3528               	lslf	readFilteredVout@i_861,w
  5320  0790  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5321  0791  0086               	movwf	6
  5322  0792  3001               	movlw	1	; select bank3/4
  5323  0793  0087               	movwf	7
  5324  0794  3F40               	moviw [0]fsr1
  5325  0795  00A0               	movwf	??_readFilteredVout
  5326  0796  3F41               	moviw [1]fsr1
  5327  0797  00A1               	movwf	??_readFilteredVout+1
  5328  0798  0820               	movf	??_readFilteredVout,w
  5329  0799  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5330  079A  0821               	movf	??_readFilteredVout+1,w
  5331  079B  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5332  079C  3000               	movlw	0
  5333  079D  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5334  079E  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5335  079F                     i1l2475:
  5336  079F  3001               	movlw	1
  5337  07A0  00A0               	movwf	??_readFilteredVout
  5338  07A1  0820               	movf	??_readFilteredVout,w
  5339  07A2  07A8               	addwf	readFilteredVout@i_861,f
  5340  07A3                     i1l2477:
  5341  07A3  3010               	movlw	16
  5342  07A4  0228               	subwf	readFilteredVout@i_861,w
  5343  07A5  1C03               	skipc
  5344  07A6  2FA8               	goto	u225_21
  5345  07A7  2FA9               	goto	u225_20
  5346  07A8                     u225_21:
  5347  07A8  2F8F               	goto	i1l2473
  5348  07A9                     u225_20:
  5349  07A9                     i1l2479:
  5350                           
  5351                           ;Controller.c: 39:     return (sumOfSamples >> 4);
  5352  07A9  0824               	movf	readFilteredVout@sumOfSamples,w
  5353  07AA  00A0               	movwf	??_readFilteredVout
  5354  07AB  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5355  07AC  00A1               	movwf	??_readFilteredVout+1
  5356  07AD  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5357  07AE  00A2               	movwf	??_readFilteredVout+2
  5358  07AF  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5359  07B0  00A3               	movwf	??_readFilteredVout+3
  5360  07B1  3004               	movlw	4
  5361  07B2                     u226_25:
  5362  07B2  36A3               	lsrf	??_readFilteredVout+3,f
  5363  07B3  0CA2               	rrf	??_readFilteredVout+2,f
  5364  07B4  0CA1               	rrf	??_readFilteredVout+1,f
  5365  07B5  0CA0               	rrf	??_readFilteredVout,f
  5366  07B6                     u226_20:
  5367  07B6  0B89               	decfsz	9,f
  5368  07B7  2FB2               	goto	u226_25
  5369  07B8  0821               	movf	??_readFilteredVout+1,w
  5370  07B9  00FD               	movwf	?_readFilteredVout+1
  5371  07BA  0820               	movf	??_readFilteredVout,w
  5372  07BB  00FC               	movwf	?_readFilteredVout
  5373  07BC                     i1l460:
  5374  07BC  0008               	return
  5375  07BD                     __end_of_readFilteredVout:
  5376                           
  5377                           	psect	text23
  5378  0E97                     __ptext23:	
  5379 ;; *************** function _readFilteredIL *****************
  5380 ;; Defined at:
  5381 ;;		line 55 in file "CurrentSensor.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  i               1   10[COMMON] unsigned char 
  5386 ;;  i               1   11[COMMON] unsigned char 
  5387 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  2    0[COMMON] unsigned short 
  5390 ;; Registers used:
  5391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/0
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5397 ;;      Params:         2       0       0       0       0       0
  5398 ;;      Locals:         6       0       0       0       0       0
  5399 ;;      Temps:          4       0       0       0       0       0
  5400 ;;      Totals:        12       0       0       0       0       0
  5401 ;;Total ram usage:       12 bytes
  5402 ;; Hardware stack levels used: 1
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_Tick980Hz
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410  0E97                     _readFilteredIL:	
  5411                           ;psect for function _readFilteredIL
  5412                           
  5413  0E97                     i1l2421:	
  5414                           ;incstack = 0
  5415                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5416                           
  5417                           
  5418                           ;CurrentSensor.c: 56:     for(uint8_t i=0; i<16 -1; i++) currentILFIFO[i] = currentILFIF
      +                          O[i+1];
  5419  0E97  01FB               	clrf	readFilteredIL@i
  5420  0E98                     i1l2427:
  5421  0E98  357B               	lslf	readFilteredIL@i,w
  5422  0E99  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5423  0E9A  0086               	movwf	6
  5424  0E9B  3001               	movlw	1	; select bank2/3
  5425  0E9C  0087               	movwf	7
  5426  0E9D  357B               	lslf	readFilteredIL@i,w
  5427  0E9E  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5428  0E9F  0084               	movwf	4
  5429  0EA0  3001               	movlw	1	; select bank2/3
  5430  0EA1  0085               	movwf	5
  5431  0EA2  3F40               	moviw [0]fsr1
  5432  0EA3  3F80               	movwi [0]fsr0
  5433  0EA4  3F41               	moviw [1]fsr1
  5434  0EA5  3F81               	movwi [1]fsr0
  5435  0EA6                     i1l2429:
  5436  0EA6  3001               	movlw	1
  5437  0EA7  00F2               	movwf	??_readFilteredIL
  5438  0EA8  0872               	movf	??_readFilteredIL,w
  5439  0EA9  07FB               	addwf	readFilteredIL@i,f
  5440  0EAA                     i1l2431:
  5441  0EAA  300F               	movlw	15
  5442  0EAB  027B               	subwf	readFilteredIL@i,w
  5443  0EAC  1C03               	skipc
  5444  0EAD  2EAF               	goto	u221_21
  5445  0EAE  2EB0               	goto	u221_20
  5446  0EAF                     u221_21:
  5447  0EAF  2E98               	goto	i1l2427
  5448  0EB0                     u221_20:
  5449  0EB0                     i1l2433:
  5450                           
  5451                           ;CurrentSensor.c: 57:     currentILFIFO[16 -1] = latestIL;
  5452  0EB0  0020               	movlb	0	; select bank0
  5453  0EB1  0862               	movf	_latestIL+1,w	;volatile
  5454  0EB2  0022               	movlb	2	; select bank2
  5455  0EB3  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5456  0EB4  0020               	movlb	0	; select bank0
  5457  0EB5  0861               	movf	_latestIL,w	;volatile
  5458  0EB6  0022               	movlb	2	; select bank2
  5459  0EB7  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5460                           
  5461                           ;CurrentSensor.c: 58:     uint32_t sumOfSamples = 0;
  5462  0EB8  3000               	movlw	0
  5463  0EB9  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5464  0EBA  3000               	movlw	0
  5465  0EBB  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5466  0EBC  3000               	movlw	0
  5467  0EBD  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5468  0EBE  3000               	movlw	0
  5469  0EBF  00F6               	movwf	readFilteredIL@sumOfSamples
  5470  0EC0                     i1l2435:
  5471                           
  5472                           ;CurrentSensor.c: 59:     for(uint8_t i=0; i<16; i++) sumOfSamples += currentILFIFO[i];
  5473  0EC0  01FA               	clrf	readFilteredIL@i_944
  5474  0EC1                     i1l2441:
  5475  0EC1  357A               	lslf	readFilteredIL@i_944,w
  5476  0EC2  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5477  0EC3  0086               	movwf	6
  5478  0EC4  3001               	movlw	1	; select bank2/3
  5479  0EC5  0087               	movwf	7
  5480  0EC6  3F40               	moviw [0]fsr1
  5481  0EC7  00F2               	movwf	??_readFilteredIL
  5482  0EC8  3F41               	moviw [1]fsr1
  5483  0EC9  00F3               	movwf	??_readFilteredIL+1
  5484  0ECA  0872               	movf	??_readFilteredIL,w
  5485  0ECB  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5486  0ECC  0873               	movf	??_readFilteredIL+1,w
  5487  0ECD  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5488  0ECE  3000               	movlw	0
  5489  0ECF  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5490  0ED0  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5491  0ED1                     i1l2443:
  5492  0ED1  3001               	movlw	1
  5493  0ED2  00F2               	movwf	??_readFilteredIL
  5494  0ED3  0872               	movf	??_readFilteredIL,w
  5495  0ED4  07FA               	addwf	readFilteredIL@i_944,f
  5496  0ED5                     i1l2445:
  5497  0ED5  3010               	movlw	16
  5498  0ED6  027A               	subwf	readFilteredIL@i_944,w
  5499  0ED7  1C03               	skipc
  5500  0ED8  2EDA               	goto	u222_21
  5501  0ED9  2EDB               	goto	u222_20
  5502  0EDA                     u222_21:
  5503  0EDA  2EC1               	goto	i1l2441
  5504  0EDB                     u222_20:
  5505  0EDB                     i1l2447:
  5506                           
  5507                           ;CurrentSensor.c: 61:     return (sumOfSamples >> 4);
  5508  0EDB  0876               	movf	readFilteredIL@sumOfSamples,w
  5509  0EDC  00F2               	movwf	??_readFilteredIL
  5510  0EDD  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5511  0EDE  00F3               	movwf	??_readFilteredIL+1
  5512  0EDF  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5513  0EE0  00F4               	movwf	??_readFilteredIL+2
  5514  0EE1  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5515  0EE2  00F5               	movwf	??_readFilteredIL+3
  5516  0EE3  3004               	movlw	4
  5517  0EE4                     u223_25:
  5518  0EE4  36F5               	lsrf	??_readFilteredIL+3,f
  5519  0EE5  0CF4               	rrf	??_readFilteredIL+2,f
  5520  0EE6  0CF3               	rrf	??_readFilteredIL+1,f
  5521  0EE7  0CF2               	rrf	??_readFilteredIL,f
  5522  0EE8                     u223_20:
  5523  0EE8  0B89               	decfsz	9,f
  5524  0EE9  2EE4               	goto	u223_25
  5525  0EEA  0873               	movf	??_readFilteredIL+1,w
  5526  0EEB  00F1               	movwf	?_readFilteredIL+1
  5527  0EEC  0872               	movf	??_readFilteredIL,w
  5528  0EED  00F0               	movwf	?_readFilteredIL
  5529  0EEE                     i1l546:
  5530  0EEE  0008               	return
  5531  0EEF                     __end_of_readFilteredIL:
  5532                           
  5533                           	psect	text24
  5534  0FA5                     __ptext24:	
  5535 ;; *************** function _readFilteredFreqPot *****************
  5536 ;; Defined at:
  5537 ;;		line 39 in file "Potentiometer.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  i               1    8[BANK0 ] unsigned char 
  5542 ;;  i               1    9[BANK0 ] unsigned char 
  5543 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  2   12[COMMON] unsigned short 
  5546 ;; Registers used:
  5547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5553 ;;      Params:         2       0       0       0       0       0
  5554 ;;      Locals:         0       6       0       0       0       0
  5555 ;;      Temps:          0       4       0       0       0       0
  5556 ;;      Totals:         2      10       0       0       0       0
  5557 ;;Total ram usage:       12 bytes
  5558 ;; Hardware stack levels used: 1
  5559 ;; Hardware stack levels required when called: 1
  5560 ;; This function calls:
  5561 ;;		_readADCRaw
  5562 ;; This function is called by:
  5563 ;;		_Tick980Hz
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567  0FA5                     _readFilteredFreqPot:	
  5568                           ;psect for function _readFilteredFreqPot
  5569                           
  5570  0FA5                     i1l2529:	
  5571                           ;incstack = 0
  5572                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5573                           
  5574                           
  5575                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5576  0FA5  0020               	movlb	0	; select bank0
  5577  0FA6  01A9               	clrf	readFilteredFreqPot@i
  5578  0FA7                     i1l2535:
  5579  0FA7  3529               	lslf	readFilteredFreqPot@i,w
  5580  0FA8  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5581  0FA9  0086               	movwf	6
  5582  0FAA  3001               	movlw	1	; select bank3/4
  5583  0FAB  0087               	movwf	7
  5584  0FAC  3529               	lslf	readFilteredFreqPot@i,w
  5585  0FAD  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5586  0FAE  0084               	movwf	4
  5587  0FAF  3001               	movlw	1	; select bank3/4
  5588  0FB0  0085               	movwf	5
  5589  0FB1  3F40               	moviw [0]fsr1
  5590  0FB2  3F80               	movwi [0]fsr0
  5591  0FB3  3F41               	moviw [1]fsr1
  5592  0FB4  3F81               	movwi [1]fsr0
  5593  0FB5                     i1l2537:
  5594  0FB5  3001               	movlw	1
  5595  0FB6  00A0               	movwf	??_readFilteredFreqPot
  5596  0FB7  0820               	movf	??_readFilteredFreqPot,w
  5597  0FB8  07A9               	addwf	readFilteredFreqPot@i,f
  5598  0FB9                     i1l2539:
  5599  0FB9  300F               	movlw	15
  5600  0FBA  0229               	subwf	readFilteredFreqPot@i,w
  5601  0FBB  1C03               	skipc
  5602  0FBC  2FBE               	goto	u236_21
  5603  0FBD  2FBF               	goto	u236_20
  5604  0FBE                     u236_21:
  5605  0FBE  2FA7               	goto	i1l2535
  5606  0FBF                     u236_20:
  5607  0FBF                     i1l2541:
  5608                           
  5609                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5610  0FBF  300A               	movlw	10
  5611  0FC0  3185  25CC  318F   	fcall	_readADCRaw
  5612  0FC3  0871               	movf	?_readADCRaw+1,w
  5613  0FC4  0023               	movlb	3	; select bank3
  5614  0FC5  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5615  0FC6  0870               	movf	?_readADCRaw,w
  5616  0FC7  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5617  0FC8                     i1l2543:
  5618                           
  5619                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5620  0FC8  3000               	movlw	0
  5621  0FC9  0020               	movlb	0	; select bank0
  5622  0FCA  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5623  0FCB  3000               	movlw	0
  5624  0FCC  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5625  0FCD  3000               	movlw	0
  5626  0FCE  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5627  0FCF  3000               	movlw	0
  5628  0FD0  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5629  0FD1                     i1l2545:
  5630                           
  5631                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5632  0FD1  01A8               	clrf	readFilteredFreqPot@i_768
  5633  0FD2                     i1l2551:
  5634  0FD2  3528               	lslf	readFilteredFreqPot@i_768,w
  5635  0FD3  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5636  0FD4  0086               	movwf	6
  5637  0FD5  3001               	movlw	1	; select bank3/4
  5638  0FD6  0087               	movwf	7
  5639  0FD7  3F40               	moviw [0]fsr1
  5640  0FD8  00A0               	movwf	??_readFilteredFreqPot
  5641  0FD9  3F41               	moviw [1]fsr1
  5642  0FDA  00A1               	movwf	??_readFilteredFreqPot+1
  5643  0FDB  0820               	movf	??_readFilteredFreqPot,w
  5644  0FDC  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5645  0FDD  0821               	movf	??_readFilteredFreqPot+1,w
  5646  0FDE  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5647  0FDF  3000               	movlw	0
  5648  0FE0  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5649  0FE1  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5650  0FE2                     i1l2553:
  5651  0FE2  3001               	movlw	1
  5652  0FE3  00A0               	movwf	??_readFilteredFreqPot
  5653  0FE4  0820               	movf	??_readFilteredFreqPot,w
  5654  0FE5  07A8               	addwf	readFilteredFreqPot@i_768,f
  5655  0FE6                     i1l2555:
  5656  0FE6  3010               	movlw	16
  5657  0FE7  0228               	subwf	readFilteredFreqPot@i_768,w
  5658  0FE8  1C03               	skipc
  5659  0FE9  2FEB               	goto	u237_21
  5660  0FEA  2FEC               	goto	u237_20
  5661  0FEB                     u237_21:
  5662  0FEB  2FD2               	goto	i1l2551
  5663  0FEC                     u237_20:
  5664  0FEC                     i1l2557:
  5665                           
  5666                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4);
  5667  0FEC  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5668  0FED  00A0               	movwf	??_readFilteredFreqPot
  5669  0FEE  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5670  0FEF  00A1               	movwf	??_readFilteredFreqPot+1
  5671  0FF0  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5672  0FF1  00A2               	movwf	??_readFilteredFreqPot+2
  5673  0FF2  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5674  0FF3  00A3               	movwf	??_readFilteredFreqPot+3
  5675  0FF4  3004               	movlw	4
  5676  0FF5                     u238_25:
  5677  0FF5  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5678  0FF6  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5679  0FF7  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5680  0FF8  0CA0               	rrf	??_readFilteredFreqPot,f
  5681  0FF9                     u238_20:
  5682  0FF9  0B89               	decfsz	9,f
  5683  0FFA  2FF5               	goto	u238_25
  5684  0FFB  0821               	movf	??_readFilteredFreqPot+1,w
  5685  0FFC  00FD               	movwf	?_readFilteredFreqPot+1
  5686  0FFD  0820               	movf	??_readFilteredFreqPot,w
  5687  0FFE  00FC               	movwf	?_readFilteredFreqPot
  5688  0FFF                     i1l391:
  5689  0FFF  0008               	return
  5690  1000                     __end_of_readFilteredFreqPot:
  5691                           
  5692                           	psect	text25
  5693  0F4A                     __ptext25:	
  5694 ;; *************** function _readFilteredDutyPot *****************
  5695 ;; Defined at:
  5696 ;;		line 25 in file "Potentiometer.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  i               1    8[BANK0 ] unsigned char 
  5701 ;;  i               1    9[BANK0 ] unsigned char 
  5702 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  2   12[COMMON] unsigned short 
  5705 ;; Registers used:
  5706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5712 ;;      Params:         2       0       0       0       0       0
  5713 ;;      Locals:         0       6       0       0       0       0
  5714 ;;      Temps:          0       4       0       0       0       0
  5715 ;;      Totals:         2      10       0       0       0       0
  5716 ;;Total ram usage:       12 bytes
  5717 ;; Hardware stack levels used: 1
  5718 ;; Hardware stack levels required when called: 1
  5719 ;; This function calls:
  5720 ;;		_readADCRaw
  5721 ;; This function is called by:
  5722 ;;		_Tick980Hz
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726  0F4A                     _readFilteredDutyPot:	
  5727                           ;psect for function _readFilteredDutyPot
  5728                           
  5729  0F4A                     i1l2497:	
  5730                           ;incstack = 0
  5731                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5732                           
  5733                           
  5734                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5735  0F4A  0020               	movlb	0	; select bank0
  5736  0F4B  01A9               	clrf	readFilteredDutyPot@i
  5737  0F4C                     i1l2503:
  5738  0F4C  3529               	lslf	readFilteredDutyPot@i,w
  5739  0F4D  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5740  0F4E  0086               	movwf	6
  5741  0F4F  3002               	movlw	2	; select bank4/5
  5742  0F50  0087               	movwf	7
  5743  0F51  3529               	lslf	readFilteredDutyPot@i,w
  5744  0F52  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5745  0F53  0084               	movwf	4
  5746  0F54  3002               	movlw	2	; select bank4/5
  5747  0F55  0085               	movwf	5
  5748  0F56  3F40               	moviw [0]fsr1
  5749  0F57  3F80               	movwi [0]fsr0
  5750  0F58  3F41               	moviw [1]fsr1
  5751  0F59  3F81               	movwi [1]fsr0
  5752  0F5A                     i1l2505:
  5753  0F5A  3001               	movlw	1
  5754  0F5B  00A0               	movwf	??_readFilteredDutyPot
  5755  0F5C  0820               	movf	??_readFilteredDutyPot,w
  5756  0F5D  07A9               	addwf	readFilteredDutyPot@i,f
  5757  0F5E                     i1l2507:
  5758  0F5E  300F               	movlw	15
  5759  0F5F  0229               	subwf	readFilteredDutyPot@i,w
  5760  0F60  1C03               	skipc
  5761  0F61  2F63               	goto	u233_21
  5762  0F62  2F64               	goto	u233_20
  5763  0F63                     u233_21:
  5764  0F63  2F4C               	goto	i1l2503
  5765  0F64                     u233_20:
  5766  0F64                     i1l2509:
  5767                           
  5768                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5769  0F64  3009               	movlw	9
  5770  0F65  3185  25CC  318F   	fcall	_readADCRaw
  5771  0F68  0871               	movf	?_readADCRaw+1,w
  5772  0F69  0024               	movlb	4	; select bank4
  5773  0F6A  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5774  0F6B  0870               	movf	?_readADCRaw,w
  5775  0F6C  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5776  0F6D                     i1l2511:
  5777                           
  5778                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5779  0F6D  3000               	movlw	0
  5780  0F6E  0020               	movlb	0	; select bank0
  5781  0F6F  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5782  0F70  3000               	movlw	0
  5783  0F71  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5784  0F72  3000               	movlw	0
  5785  0F73  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5786  0F74  3000               	movlw	0
  5787  0F75  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5788  0F76                     i1l2513:
  5789                           
  5790                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5791  0F76  01A8               	clrf	readFilteredDutyPot@i_764
  5792  0F77                     i1l2519:
  5793  0F77  3528               	lslf	readFilteredDutyPot@i_764,w
  5794  0F78  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5795  0F79  0086               	movwf	6
  5796  0F7A  3002               	movlw	2	; select bank4/5
  5797  0F7B  0087               	movwf	7
  5798  0F7C  3F40               	moviw [0]fsr1
  5799  0F7D  00A0               	movwf	??_readFilteredDutyPot
  5800  0F7E  3F41               	moviw [1]fsr1
  5801  0F7F  00A1               	movwf	??_readFilteredDutyPot+1
  5802  0F80  0820               	movf	??_readFilteredDutyPot,w
  5803  0F81  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5804  0F82  0821               	movf	??_readFilteredDutyPot+1,w
  5805  0F83  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5806  0F84  3000               	movlw	0
  5807  0F85  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5808  0F86  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5809  0F87                     i1l2521:
  5810  0F87  3001               	movlw	1
  5811  0F88  00A0               	movwf	??_readFilteredDutyPot
  5812  0F89  0820               	movf	??_readFilteredDutyPot,w
  5813  0F8A  07A8               	addwf	readFilteredDutyPot@i_764,f
  5814  0F8B                     i1l2523:
  5815  0F8B  3010               	movlw	16
  5816  0F8C  0228               	subwf	readFilteredDutyPot@i_764,w
  5817  0F8D  1C03               	skipc
  5818  0F8E  2F90               	goto	u234_21
  5819  0F8F  2F91               	goto	u234_20
  5820  0F90                     u234_21:
  5821  0F90  2F77               	goto	i1l2519
  5822  0F91                     u234_20:
  5823  0F91                     i1l2525:
  5824                           
  5825                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4);
  5826  0F91  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5827  0F92  00A0               	movwf	??_readFilteredDutyPot
  5828  0F93  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5829  0F94  00A1               	movwf	??_readFilteredDutyPot+1
  5830  0F95  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5831  0F96  00A2               	movwf	??_readFilteredDutyPot+2
  5832  0F97  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5833  0F98  00A3               	movwf	??_readFilteredDutyPot+3
  5834  0F99  3004               	movlw	4
  5835  0F9A                     u235_25:
  5836  0F9A  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5837  0F9B  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5838  0F9C  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5839  0F9D  0CA0               	rrf	??_readFilteredDutyPot,f
  5840  0F9E                     u235_20:
  5841  0F9E  0B89               	decfsz	9,f
  5842  0F9F  2F9A               	goto	u235_25
  5843  0FA0  0821               	movf	??_readFilteredDutyPot+1,w
  5844  0FA1  00FD               	movwf	?_readFilteredDutyPot+1
  5845  0FA2  0820               	movf	??_readFilteredDutyPot,w
  5846  0FA3  00FC               	movwf	?_readFilteredDutyPot
  5847  0FA4                     i1l384:
  5848  0FA4  0008               	return
  5849  0FA5                     __end_of_readFilteredDutyPot:
  5850                           
  5851                           	psect	text26
  5852  05CC                     __ptext26:	
  5853 ;; *************** function _readADCRaw *****************
  5854 ;; Defined at:
  5855 ;;		line 71 in file "ADC.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  gpioNumber      1    wreg     const enum E2798
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  gpioNumber      1   11[COMMON] const enum E2798
  5860 ;;  i               1   10[COMMON] unsigned char 
  5861 ;;  i               1    9[COMMON] unsigned char 
  5862 ;;  i               1    8[COMMON] unsigned char 
  5863 ;;  returnValue     2    4[COMMON] unsigned int 
  5864 ;;  gpioValid       1    7[COMMON] unsigned char 
  5865 ;;  channel         1    6[COMMON] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  2    0[COMMON] unsigned short 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5875 ;;      Params:         2       0       0       0       0       0
  5876 ;;      Locals:         8       0       0       0       0       0
  5877 ;;      Temps:          2       0       0       0       0       0
  5878 ;;      Totals:        12       0       0       0       0       0
  5879 ;;Total ram usage:       12 bytes
  5880 ;; Hardware stack levels used: 1
  5881 ;; This function calls:
  5882 ;;		Nothing
  5883 ;; This function is called by:
  5884 ;;		_readFilteredDutyPot
  5885 ;;		_readFilteredFreqPot
  5886 ;;		_readFilteredVout
  5887 ;;		_readFilteredIDS
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891  05CC                     _readADCRaw:	
  5892                           ;psect for function _readADCRaw
  5893                           
  5894                           
  5895                           ;incstack = 0
  5896                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5897                           ;readADCRaw@gpioNumber stored from wreg
  5898  05CC  00FB               	movwf	readADCRaw@gpioNumber
  5899  05CD                     i1l2219:
  5900                           
  5901                           ;ADC.c: 72:     uint8_t channel = 0;
  5902  05CD  01F6               	clrf	readADCRaw@channel
  5903                           
  5904                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5905  05CE  01F7               	clrf	readADCRaw@gpioValid
  5906  05CF                     i1l2221:
  5907                           
  5908                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5909  05CF  3005               	movlw	5
  5910  05D0  027B               	subwf	readADCRaw@gpioNumber,w
  5911  05D1  1803               	skipnc
  5912  05D2  2DD4               	goto	u178_21
  5913  05D3  2DD5               	goto	u178_20
  5914  05D4                     u178_21:
  5915  05D4  2DDB               	goto	i1l257
  5916  05D5                     u178_20:
  5917  05D5                     i1l2223:
  5918                           
  5919                           ;ADC.c: 76:         channel = gpioNumber;
  5920  05D5  087B               	movf	readADCRaw@gpioNumber,w
  5921  05D6  00F2               	movwf	??_readADCRaw
  5922  05D7  0872               	movf	??_readADCRaw,w
  5923  05D8  00F6               	movwf	readADCRaw@channel
  5924  05D9                     i1l2225:
  5925                           
  5926                           ;ADC.c: 77:         gpioValid = 1;
  5927  05D9  01F7               	clrf	readADCRaw@gpioValid
  5928  05DA  0AF7               	incf	readADCRaw@gpioValid,f
  5929  05DB                     i1l257:	
  5930                           ;ADC.c: 78:     }
  5931                           
  5932                           
  5933                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5934  05DB  3009               	movlw	9
  5935  05DC  027B               	subwf	readADCRaw@gpioNumber,w
  5936  05DD  1C03               	skipc
  5937  05DE  2DE0               	goto	u179_21
  5938  05DF  2DE1               	goto	u179_20
  5939  05E0                     u179_21:
  5940  05E0  2DEE               	goto	i1l258
  5941  05E1                     u179_20:
  5942  05E1                     i1l2227:
  5943  05E1  3010               	movlw	16
  5944  05E2  027B               	subwf	readADCRaw@gpioNumber,w
  5945  05E3  1803               	skipnc
  5946  05E4  2DE6               	goto	u180_21
  5947  05E5  2DE7               	goto	u180_20
  5948  05E6                     u180_21:
  5949  05E6  2DEE               	goto	i1l258
  5950  05E7                     u180_20:
  5951  05E7                     i1l2229:
  5952                           
  5953                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5954  05E7  087B               	movf	readADCRaw@gpioNumber,w
  5955  05E8  3C14               	sublw	20
  5956  05E9  00F2               	movwf	??_readADCRaw
  5957  05EA  0872               	movf	??_readADCRaw,w
  5958  05EB  00F6               	movwf	readADCRaw@channel
  5959  05EC                     i1l2231:
  5960                           
  5961                           ;ADC.c: 81:         gpioValid = 1;
  5962  05EC  01F7               	clrf	readADCRaw@gpioValid
  5963  05ED  0AF7               	incf	readADCRaw@gpioValid,f
  5964  05EE                     i1l258:	
  5965                           ;ADC.c: 82:     }
  5966                           
  5967                           
  5968                           ;ADC.c: 83:     if(gpioValid){
  5969  05EE  0877               	movf	readADCRaw@gpioValid,w
  5970  05EF  1903               	btfsc	3,2
  5971  05F0  2DF2               	goto	u181_21
  5972  05F1  2DF3               	goto	u181_20
  5973  05F2                     u181_21:
  5974  05F2  2E3A               	goto	i1l2279
  5975  05F3                     u181_20:
  5976  05F3                     i1l2233:
  5977                           
  5978                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5979  05F3  0021               	movlb	1	; select bank1
  5980  05F4  081D               	movf	29,w	;volatile
  5981  05F5                     i1l2235:
  5982                           
  5983                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5984  05F5  3083               	movlw	131
  5985  05F6  00F2               	movwf	??_readADCRaw
  5986  05F7  0872               	movf	??_readADCRaw,w
  5987  05F8  059D               	andwf	29,f	;volatile
  5988  05F9                     i1l2237:
  5989                           
  5990                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5991  05F9  0876               	movf	readADCRaw@channel,w	;volatile
  5992  05FA  00F2               	movwf	??_readADCRaw
  5993  05FB  3001               	movlw	1
  5994  05FC                     u182_25:
  5995  05FC  35F2               	lslf	??_readADCRaw,f
  5996  05FD  3EFF               	addlw	-1
  5997  05FE  1D03               	skipz
  5998  05FF  2DFC               	goto	u182_25
  5999  0600  3572               	lslf	??_readADCRaw,w
  6000  0601  00F3               	movwf	??_readADCRaw+1
  6001  0602  0873               	movf	??_readADCRaw+1,w
  6002  0603  049D               	iorwf	29,f	;volatile
  6003  0604                     i1l2239:
  6004                           
  6005                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  6006  0604  01F8               	clrf	readADCRaw@i
  6007  0605                     i1l2245:
  6008  0605  3001               	movlw	1
  6009  0606  00F2               	movwf	??_readADCRaw
  6010  0607  0872               	movf	??_readADCRaw,w
  6011  0608  07F8               	addwf	readADCRaw@i,f
  6012  0609                     i1l2247:
  6013  0609  3010               	movlw	16
  6014  060A  0278               	subwf	readADCRaw@i,w
  6015  060B  1C03               	skipc
  6016  060C  2E0E               	goto	u183_21
  6017  060D  2E0F               	goto	u183_20
  6018  060E                     u183_21:
  6019  060E  2E05               	goto	i1l2245
  6020  060F                     u183_20:
  6021  060F                     i1l262:
  6022                           
  6023                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  6024  060F  0021               	movlb	1	; select bank1
  6025  0610  149D               	bsf	29,1	;volatile
  6026  0611                     i1l263:	
  6027                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  6028                           
  6029  0611  189D               	btfsc	29,1	;volatile
  6030  0612  2E14               	goto	u184_21
  6031  0613  2E15               	goto	u184_20
  6032  0614                     u184_21:
  6033  0614  2E11               	goto	i1l263
  6034  0615                     u184_20:
  6035  0615                     i1l2249:
  6036                           
  6037                           ;ADC.c: 92:             for(uint8_t i = 0; i < 8; i++);
  6038  0615  01F9               	clrf	readADCRaw@i_661
  6039  0616                     i1l2255:
  6040  0616  3001               	movlw	1
  6041  0617  00F2               	movwf	??_readADCRaw
  6042  0618  0872               	movf	??_readADCRaw,w
  6043  0619  07F9               	addwf	readADCRaw@i_661,f
  6044  061A                     i1l2257:
  6045  061A  3008               	movlw	8
  6046  061B  0279               	subwf	readADCRaw@i_661,w
  6047  061C  1C03               	skipc
  6048  061D  2E1F               	goto	u185_21
  6049  061E  2E20               	goto	u185_20
  6050  061F                     u185_21:
  6051  061F  2E16               	goto	i1l2255
  6052  0620                     u185_20:
  6053  0620                     i1l2259:
  6054                           
  6055                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  6056  0620  0021               	movlb	1	; select bank1
  6057  0621  081C               	movf	28,w	;volatile
  6058  0622  00F5               	movwf	readADCRaw@returnValue+1
  6059  0623  081B               	movf	27,w	;volatile
  6060  0624  00F4               	movwf	readADCRaw@returnValue
  6061  0625                     i1l2261:
  6062                           
  6063                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  6064  0625  3083               	movlw	131
  6065  0626  00F2               	movwf	??_readADCRaw
  6066  0627  0872               	movf	??_readADCRaw,w
  6067  0628  059D               	andwf	29,f	;volatile
  6068  0629                     i1l2263:
  6069                           
  6070                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  6071  0629  159D               	bsf	29,3	;volatile
  6072  062A                     i1l2265:
  6073                           
  6074                           ;ADC.c: 96:             for(uint8_t i = 0; i < 8; i++);
  6075  062A  01FA               	clrf	readADCRaw@i_663
  6076  062B                     i1l2271:
  6077  062B  3001               	movlw	1
  6078  062C  00F2               	movwf	??_readADCRaw
  6079  062D  0872               	movf	??_readADCRaw,w
  6080  062E  07FA               	addwf	readADCRaw@i_663,f
  6081  062F                     i1l2273:
  6082  062F  3008               	movlw	8
  6083  0630  027A               	subwf	readADCRaw@i_663,w
  6084  0631  1C03               	skipc
  6085  0632  2E34               	goto	u186_21
  6086  0633  2E35               	goto	u186_20
  6087  0634                     u186_21:
  6088  0634  2E2B               	goto	i1l2271
  6089  0635                     u186_20:
  6090  0635                     i1l2275:
  6091                           
  6092                           ;ADC.c: 98:             return returnValue;
  6093  0635  0875               	movf	readADCRaw@returnValue+1,w
  6094  0636  00F1               	movwf	?_readADCRaw+1
  6095  0637  0874               	movf	readADCRaw@returnValue,w
  6096  0638  00F0               	movwf	?_readADCRaw
  6097  0639  2E3C               	goto	i1l270
  6098  063A                     i1l2279:
  6099  063A  01F0               	clrf	?_readADCRaw
  6100  063B  01F1               	clrf	?_readADCRaw+1
  6101  063C                     i1l270:
  6102  063C  0008               	return
  6103  063D                     __end_of_readADCRaw:
  6104                           
  6105                           	psect	text27
  6106  0D25                     __ptext27:	
  6107 ;; *************** function _currentTripRead *****************
  6108 ;; Defined at:
  6109 ;;		line 30 in file "CurrentSensor.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;		None
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      _Bool 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0, pclath, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6123 ;;      Params:         0       0       0       0       0       0
  6124 ;;      Locals:         1       0       0       0       0       0
  6125 ;;      Temps:          1       0       0       0       0       0
  6126 ;;      Totals:         2       0       0       0       0       0
  6127 ;;Total ram usage:        2 bytes
  6128 ;; Hardware stack levels used: 1
  6129 ;; Hardware stack levels required when called: 1
  6130 ;; This function calls:
  6131 ;;		i1_readGPIO
  6132 ;; This function is called by:
  6133 ;;		_Tick980Hz
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137  0D25                     _currentTripRead:	
  6138                           ;psect for function _currentTripRead
  6139                           
  6140  0D25                     i1l2369:	
  6141                           ;incstack = 0
  6142                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6143                           
  6144                           
  6145                           ;CurrentSensor.c: 31:     tripIDS = ~readGPIO(pinRA1);
  6146  0D25  3001               	movlw	1
  6147  0D26  318D  25BA  318D   	fcall	i1_readGPIO
  6148  0D29  3A01               	xorlw	1
  6149  0D2A  1D03               	skipz
  6150  0D2B  2D2D               	goto	u209_21
  6151  0D2C  2D2F               	goto	u209_20
  6152  0D2D                     u209_21:
  6153  0D2D  3001               	movlw	1
  6154  0D2E  2D30               	goto	u210_20
  6155  0D2F                     u209_20:
  6156  0D2F  3000               	movlw	0
  6157  0D30                     u210_20:
  6158  0D30  00F9               	movwf	??_currentTripRead
  6159  0D31  0879               	movf	??_currentTripRead,w
  6160  0D32  0020               	movlb	0	; select bank0
  6161  0D33  00EA               	movwf	_tripIDS
  6162                           
  6163                           ;CurrentSensor.c: 32:     tripIL = ~readGPIO(pinRA3);
  6164  0D34  3003               	movlw	3
  6165  0D35  318D  25BA  318D   	fcall	i1_readGPIO
  6166  0D38  3A01               	xorlw	1
  6167  0D39  1D03               	skipz
  6168  0D3A  2D3C               	goto	u211_21
  6169  0D3B  2D3E               	goto	u211_20
  6170  0D3C                     u211_21:
  6171  0D3C  3001               	movlw	1
  6172  0D3D  2D3F               	goto	u212_20
  6173  0D3E                     u211_20:
  6174  0D3E  3000               	movlw	0
  6175  0D3F                     u212_20:
  6176  0D3F  00F9               	movwf	??_currentTripRead
  6177  0D40  0879               	movf	??_currentTripRead,w
  6178  0D41  0020               	movlb	0	; select bank0
  6179  0D42  00E9               	movwf	_tripIL
  6180  0D43                     i1l2371:
  6181                           
  6182                           ;CurrentSensor.c: 33:     return (tripIL || tripIDS);
  6183  0D43  01FA               	clrf	_currentTripRead$936
  6184  0D44  0AFA               	incf	_currentTripRead$936,f
  6185  0D45                     i1l2373:
  6186  0D45  0869               	movf	_tripIL,w
  6187  0D46  1D03               	btfss	3,2
  6188  0D47  2D49               	goto	u213_21
  6189  0D48  2D4A               	goto	u213_20
  6190  0D49                     u213_21:
  6191  0D49  2D50               	goto	i1l2379
  6192  0D4A                     u213_20:
  6193  0D4A                     i1l2375:
  6194  0D4A  086A               	movf	_tripIDS,w
  6195  0D4B  1D03               	btfss	3,2
  6196  0D4C  2D4E               	goto	u214_21
  6197  0D4D  2D4F               	goto	u214_20
  6198  0D4E                     u214_21:
  6199  0D4E  2D50               	goto	i1l2379
  6200  0D4F                     u214_20:
  6201  0D4F                     i1l2377:
  6202  0D4F  01FA               	clrf	_currentTripRead$936
  6203  0D50                     i1l2379:
  6204  0D50  087A               	movf	_currentTripRead$936,w
  6205  0D51                     i1l532:
  6206  0D51  0008               	return
  6207  0D52                     __end_of_currentTripRead:
  6208                           
  6209                           	psect	text28
  6210  02B8                     __ptext28:	
  6211 ;; *************** function _controlRoutine *****************
  6212 ;; Defined at:
  6213 ;;		line 59 in file "Controller.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6218 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6228 ;;      Params:         0       0       0       0       0       0
  6229 ;;      Locals:         0       4       0       0       0       0
  6230 ;;      Temps:          0       6       0       0       0       0
  6231 ;;      Totals:         0      10       0       0       0       0
  6232 ;;Total ram usage:       10 bytes
  6233 ;; Hardware stack levels used: 1
  6234 ;; Hardware stack levels required when called: 3
  6235 ;; This function calls:
  6236 ;;		___lldiv
  6237 ;;		___wmul
  6238 ;;		_runCurrentModeControl
  6239 ;;		_runVoltageModeControl
  6240 ;; This function is called by:
  6241 ;;		_Tick980Hz
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245  02B8                     _controlRoutine:	
  6246                           ;psect for function _controlRoutine
  6247                           
  6248  02B8                     i1l2393:	
  6249                           ;incstack = 0
  6250                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6251                           
  6252                           
  6253                           ;Controller.c: 60:     if(currentState == voltageModeControl){
  6254  02B8  3002               	movlw	2
  6255  02B9  0020               	movlb	0	; select bank0
  6256  02BA  066C               	xorwf	_currentState,w
  6257  02BB  1D03               	btfss	3,2
  6258  02BC  2ABE               	goto	u217_21
  6259  02BD  2ABF               	goto	u217_20
  6260  02BE                     u217_21:
  6261  02BE  2AFA               	goto	i1l2401
  6262  02BF                     u217_20:
  6263  02BF                     i1l2395:
  6264                           
  6265                           ;Controller.c: 61:         runVoltageModeControl();
  6266  02BF  3180  20D4  3182   	fcall	_runVoltageModeControl
  6267  02C2                     i1l2397:
  6268                           
  6269                           ;Controller.c: 62:         setPeriod = 79u;
  6270  02C2  304F               	movlw	79
  6271  02C3  0020               	movlb	0	; select bank0
  6272  02C4  00D2               	movwf	??_controlRoutine
  6273  02C5  0852               	movf	??_controlRoutine,w
  6274  02C6  00EE               	movwf	_setPeriod
  6275  02C7                     i1l2399:
  6276                           
  6277                           ;Controller.c: 64:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + voltageModeVariables.sumOutput;
  6278  02C7  3016               	movlw	22
  6279  02C8  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6280  02C9  0086               	movwf	6
  6281  02CA  0187               	clrf	7
  6282  02CB  3000               	movlw	0
  6283  02CC  00F9               	movwf	___lldiv@divisor+3
  6284  02CD  3000               	movlw	0
  6285  02CE  00F8               	movwf	___lldiv@divisor+2
  6286  02CF  3000               	movlw	0
  6287  02D0  00F7               	movwf	___lldiv@divisor+1
  6288  02D1  3019               	movlw	25
  6289  02D2  00F6               	movwf	___lldiv@divisor
  6290  02D3  3032               	movlw	50
  6291  02D4  00F2               	movwf	___wmul@multiplicand
  6292  02D5  3000               	movlw	0
  6293  02D6  00F3               	movwf	___wmul@multiplicand+1
  6294  02D7  086E               	movf	_setPeriod,w
  6295  02D8  00D2               	movwf	??_controlRoutine
  6296  02D9  01D3               	clrf	??_controlRoutine+1
  6297  02DA  0852               	movf	??_controlRoutine,w
  6298  02DB  00F0               	movwf	___wmul@multiplier
  6299  02DC  0853               	movf	??_controlRoutine+1,w
  6300  02DD  00F1               	movwf	___wmul@multiplier+1
  6301  02DE  318C  24BB  3182   	fcall	___wmul
  6302  02E1  0870               	movf	?___wmul,w
  6303  02E2  0020               	movlb	0	; select bank0
  6304  02E3  00D4               	movwf	??_controlRoutine+2
  6305  02E4  0871               	movf	?___wmul+1,w
  6306  02E5  00D5               	movwf	??_controlRoutine+3
  6307  02E6  01D6               	clrf	??_controlRoutine+4
  6308  02E7  01D7               	clrf	??_controlRoutine+5
  6309  02E8  0857               	movf	??_controlRoutine+5,w
  6310  02E9  00FD               	movwf	___lldiv@dividend+3
  6311  02EA  0856               	movf	??_controlRoutine+4,w
  6312  02EB  00FC               	movwf	___lldiv@dividend+2
  6313  02EC  0855               	movf	??_controlRoutine+3,w
  6314  02ED  00FB               	movwf	___lldiv@dividend+1
  6315  02EE  0854               	movf	??_controlRoutine+2,w
  6316  02EF  00FA               	movwf	___lldiv@dividend
  6317  02F0  318E  26EF  3182   	fcall	___lldiv
  6318  02F3  3F40               	moviw [0]fsr1
  6319  02F4  0776               	addwf	?___lldiv,w
  6320  02F5  0020               	movlb	0	; select bank0
  6321  02F6  00E3               	movwf	_setDuty
  6322  02F7  3F41               	moviw [1]fsr1
  6323  02F8  3D77               	addwfc	?___lldiv+1,w
  6324  02F9  00E4               	movwf	_setDuty+1
  6325  02FA                     i1l2401:
  6326                           
  6327                           ;Controller.c: 66:     if(currentState == currentModeControl){
  6328  02FA  3003               	movlw	3
  6329  02FB  066C               	xorwf	_currentState,w
  6330  02FC  1D03               	btfss	3,2
  6331  02FD  2AFF               	goto	u218_21
  6332  02FE  2B00               	goto	u218_20
  6333  02FF                     u218_21:
  6334  02FF  2B3B               	goto	i1l2409
  6335  0300                     u218_20:
  6336  0300                     i1l2403:
  6337                           
  6338                           ;Controller.c: 67:         runCurrentModeControl();
  6339  0300  318C  242A  3182   	fcall	_runCurrentModeControl
  6340  0303                     i1l2405:
  6341                           
  6342                           ;Controller.c: 68:         setPeriod = 79u;
  6343  0303  304F               	movlw	79
  6344  0304  0020               	movlb	0	; select bank0
  6345  0305  00D2               	movwf	??_controlRoutine
  6346  0306  0852               	movf	??_controlRoutine,w
  6347  0307  00EE               	movwf	_setPeriod
  6348  0308                     i1l2407:
  6349                           
  6350                           ;Controller.c: 70:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + currentModeVariables.sumOutput;
  6351  0308  3016               	movlw	22
  6352  0309  3EA0               	addlw	(low (_currentModeVariables| 0))& (0+255)
  6353  030A  0086               	movwf	6
  6354  030B  0187               	clrf	7
  6355  030C  3000               	movlw	0
  6356  030D  00F9               	movwf	___lldiv@divisor+3
  6357  030E  3000               	movlw	0
  6358  030F  00F8               	movwf	___lldiv@divisor+2
  6359  0310  3000               	movlw	0
  6360  0311  00F7               	movwf	___lldiv@divisor+1
  6361  0312  3019               	movlw	25
  6362  0313  00F6               	movwf	___lldiv@divisor
  6363  0314  3032               	movlw	50
  6364  0315  00F2               	movwf	___wmul@multiplicand
  6365  0316  3000               	movlw	0
  6366  0317  00F3               	movwf	___wmul@multiplicand+1
  6367  0318  086E               	movf	_setPeriod,w
  6368  0319  00D2               	movwf	??_controlRoutine
  6369  031A  01D3               	clrf	??_controlRoutine+1
  6370  031B  0852               	movf	??_controlRoutine,w
  6371  031C  00F0               	movwf	___wmul@multiplier
  6372  031D  0853               	movf	??_controlRoutine+1,w
  6373  031E  00F1               	movwf	___wmul@multiplier+1
  6374  031F  318C  24BB  3182   	fcall	___wmul
  6375  0322  0870               	movf	?___wmul,w
  6376  0323  0020               	movlb	0	; select bank0
  6377  0324  00D4               	movwf	??_controlRoutine+2
  6378  0325  0871               	movf	?___wmul+1,w
  6379  0326  00D5               	movwf	??_controlRoutine+3
  6380  0327  01D6               	clrf	??_controlRoutine+4
  6381  0328  01D7               	clrf	??_controlRoutine+5
  6382  0329  0857               	movf	??_controlRoutine+5,w
  6383  032A  00FD               	movwf	___lldiv@dividend+3
  6384  032B  0856               	movf	??_controlRoutine+4,w
  6385  032C  00FC               	movwf	___lldiv@dividend+2
  6386  032D  0855               	movf	??_controlRoutine+3,w
  6387  032E  00FB               	movwf	___lldiv@dividend+1
  6388  032F  0854               	movf	??_controlRoutine+2,w
  6389  0330  00FA               	movwf	___lldiv@dividend
  6390  0331  318E  26EF  3182   	fcall	___lldiv
  6391  0334  3F40               	moviw [0]fsr1
  6392  0335  0776               	addwf	?___lldiv,w
  6393  0336  0020               	movlb	0	; select bank0
  6394  0337  00E3               	movwf	_setDuty
  6395  0338  3F41               	moviw [1]fsr1
  6396  0339  3D77               	addwfc	?___lldiv+1,w
  6397  033A  00E4               	movwf	_setDuty+1
  6398  033B                     i1l2409:
  6399                           
  6400                           ;Controller.c: 73:     uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * setP
      +                          eriod)) / 25);
  6401  033B  3000               	movlw	0
  6402  033C  00F9               	movwf	___lldiv@divisor+3
  6403  033D  3000               	movlw	0
  6404  033E  00F8               	movwf	___lldiv@divisor+2
  6405  033F  3000               	movlw	0
  6406  0340  00F7               	movwf	___lldiv@divisor+1
  6407  0341  3019               	movlw	25
  6408  0342  00F6               	movwf	___lldiv@divisor
  6409  0343  305A               	movlw	90
  6410  0344  00F2               	movwf	___wmul@multiplicand
  6411  0345  3000               	movlw	0
  6412  0346  00F3               	movwf	___wmul@multiplicand+1
  6413  0347  086E               	movf	_setPeriod,w
  6414  0348  00D2               	movwf	??_controlRoutine
  6415  0349  01D3               	clrf	??_controlRoutine+1
  6416  034A  0852               	movf	??_controlRoutine,w
  6417  034B  00F0               	movwf	___wmul@multiplier
  6418  034C  0853               	movf	??_controlRoutine+1,w
  6419  034D  00F1               	movwf	___wmul@multiplier+1
  6420  034E  318C  24BB  3182   	fcall	___wmul
  6421  0351  0870               	movf	?___wmul,w
  6422  0352  0020               	movlb	0	; select bank0
  6423  0353  00D4               	movwf	??_controlRoutine+2
  6424  0354  0871               	movf	?___wmul+1,w
  6425  0355  00D5               	movwf	??_controlRoutine+3
  6426  0356  01D6               	clrf	??_controlRoutine+4
  6427  0357  01D7               	clrf	??_controlRoutine+5
  6428  0358  0857               	movf	??_controlRoutine+5,w
  6429  0359  00FD               	movwf	___lldiv@dividend+3
  6430  035A  0856               	movf	??_controlRoutine+4,w
  6431  035B  00FC               	movwf	___lldiv@dividend+2
  6432  035C  0855               	movf	??_controlRoutine+3,w
  6433  035D  00FB               	movwf	___lldiv@dividend+1
  6434  035E  0854               	movf	??_controlRoutine+2,w
  6435  035F  00FA               	movwf	___lldiv@dividend
  6436  0360  318E  26EF  3182   	fcall	___lldiv
  6437  0363  0877               	movf	?___lldiv+1,w
  6438  0364  0020               	movlb	0	; select bank0
  6439  0365  00D9               	movwf	controlRoutine@maxDuty+1
  6440  0366  0876               	movf	?___lldiv,w
  6441  0367  00D8               	movwf	controlRoutine@maxDuty
  6442  0368                     i1l2411:
  6443                           
  6444                           ;Controller.c: 74:     uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * setP
      +                          eriod)) / 25);
  6445  0368  3000               	movlw	0
  6446  0369  00F9               	movwf	___lldiv@divisor+3
  6447  036A  3000               	movlw	0
  6448  036B  00F8               	movwf	___lldiv@divisor+2
  6449  036C  3000               	movlw	0
  6450  036D  00F7               	movwf	___lldiv@divisor+1
  6451  036E  3019               	movlw	25
  6452  036F  00F6               	movwf	___lldiv@divisor
  6453  0370  300A               	movlw	10
  6454  0371  00F2               	movwf	___wmul@multiplicand
  6455  0372  3000               	movlw	0
  6456  0373  00F3               	movwf	___wmul@multiplicand+1
  6457  0374  086E               	movf	_setPeriod,w
  6458  0375  00D2               	movwf	??_controlRoutine
  6459  0376  01D3               	clrf	??_controlRoutine+1
  6460  0377  0852               	movf	??_controlRoutine,w
  6461  0378  00F0               	movwf	___wmul@multiplier
  6462  0379  0853               	movf	??_controlRoutine+1,w
  6463  037A  00F1               	movwf	___wmul@multiplier+1
  6464  037B  318C  24BB  3182   	fcall	___wmul
  6465  037E  0870               	movf	?___wmul,w
  6466  037F  0020               	movlb	0	; select bank0
  6467  0380  00D4               	movwf	??_controlRoutine+2
  6468  0381  0871               	movf	?___wmul+1,w
  6469  0382  00D5               	movwf	??_controlRoutine+3
  6470  0383  01D6               	clrf	??_controlRoutine+4
  6471  0384  01D7               	clrf	??_controlRoutine+5
  6472  0385  0857               	movf	??_controlRoutine+5,w
  6473  0386  00FD               	movwf	___lldiv@dividend+3
  6474  0387  0856               	movf	??_controlRoutine+4,w
  6475  0388  00FC               	movwf	___lldiv@dividend+2
  6476  0389  0855               	movf	??_controlRoutine+3,w
  6477  038A  00FB               	movwf	___lldiv@dividend+1
  6478  038B  0854               	movf	??_controlRoutine+2,w
  6479  038C  00FA               	movwf	___lldiv@dividend
  6480  038D  318E  26EF  3182   	fcall	___lldiv
  6481  0390  0877               	movf	?___lldiv+1,w
  6482  0391  0020               	movlb	0	; select bank0
  6483  0392  00DB               	movwf	controlRoutine@minDuty+1
  6484  0393  0876               	movf	?___lldiv,w
  6485  0394  00DA               	movwf	controlRoutine@minDuty
  6486  0395                     i1l2413:
  6487                           
  6488                           ;Controller.c: 75:     if(setDuty > maxDuty) setDuty = maxDuty;
  6489  0395  0864               	movf	_setDuty+1,w
  6490  0396  0259               	subwf	controlRoutine@maxDuty+1,w
  6491  0397  1D03               	skipz
  6492  0398  2B9B               	goto	u219_25
  6493  0399  0863               	movf	_setDuty,w
  6494  039A  0258               	subwf	controlRoutine@maxDuty,w
  6495  039B                     u219_25:
  6496  039B  1803               	skipnc
  6497  039C  2B9E               	goto	u219_21
  6498  039D  2B9F               	goto	u219_20
  6499  039E                     u219_21:
  6500  039E  2BA3               	goto	i1l468
  6501  039F                     u219_20:
  6502  039F                     i1l2415:
  6503  039F  0859               	movf	controlRoutine@maxDuty+1,w
  6504  03A0  00E4               	movwf	_setDuty+1
  6505  03A1  0858               	movf	controlRoutine@maxDuty,w
  6506  03A2  00E3               	movwf	_setDuty
  6507  03A3                     i1l468:
  6508                           
  6509                           ;Controller.c: 76:     if(setDuty < minDuty) setDuty = minDuty;
  6510  03A3  085B               	movf	controlRoutine@minDuty+1,w
  6511  03A4  0264               	subwf	_setDuty+1,w
  6512  03A5  1D03               	skipz
  6513  03A6  2BA9               	goto	u220_25
  6514  03A7  085A               	movf	controlRoutine@minDuty,w
  6515  03A8  0263               	subwf	_setDuty,w
  6516  03A9                     u220_25:
  6517  03A9  1803               	skipnc
  6518  03AA  2BAC               	goto	u220_21
  6519  03AB  2BAD               	goto	u220_20
  6520  03AC                     u220_21:
  6521  03AC  2BB1               	goto	i1l471
  6522  03AD                     u220_20:
  6523  03AD                     i1l2417:
  6524  03AD  085B               	movf	controlRoutine@minDuty+1,w
  6525  03AE  00E4               	movwf	_setDuty+1
  6526  03AF  085A               	movf	controlRoutine@minDuty,w
  6527  03B0  00E3               	movwf	_setDuty
  6528  03B1                     i1l471:
  6529  03B1  0008               	return
  6530  03B2                     __end_of_controlRoutine:
  6531                           
  6532                           	psect	text29
  6533  00D4                     __ptext29:	
  6534 ;; *************** function _runVoltageModeControl *****************
  6535 ;; Defined at:
  6536 ;;		line 86 in file "Controller.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  propMult        8   40[BANK0 ] long long 
  6541 ;;  integralMult    8   32[BANK0 ] long long 
  6542 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6552 ;;      Params:         0       0       0       0       0       0
  6553 ;;      Locals:         0      18       0       0       0       0
  6554 ;;      Temps:          0      16       0       0       0       0
  6555 ;;      Totals:         0      34       0       0       0       0
  6556 ;;Total ram usage:       34 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 2
  6559 ;; This function calls:
  6560 ;;		___lmul
  6561 ;;		___omul
  6562 ;;		_abs
  6563 ;;		_convertRawToMilliVolts
  6564 ;;		i1_readGPIO
  6565 ;; This function is called by:
  6566 ;;		_controlRoutine
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570  00D4                     _runVoltageModeControl:	
  6571                           ;psect for function _runVoltageModeControl
  6572                           
  6573  00D4                     i1l2283:	
  6574                           ;incstack = 0
  6575                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6576                           
  6577                           
  6578                           ;Controller.c: 89:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6579  00D4  0020               	movlb	0	; select bank0
  6580  00D5  085E               	movf	_filteredVout+1,w
  6581  00D6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6582  00D7  085D               	movf	_filteredVout,w
  6583  00D8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6584  00D9  3187  27BD  3180   	fcall	_convertRawToMilliVolts
  6585  00DC  087D               	movf	?_convertRawToMilliVolts+1,w
  6586  00DD  0020               	movlb	0	; select bank0
  6587  00DE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6588  00DF  087C               	movf	?_convertRawToMilliVolts,w
  6589  00E0  00D0               	movwf	runVoltageModeControl@newVoltage
  6590                           
  6591                           ;Controller.c: 92:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVolt
      +                          age;
  6592  00E1  3008               	movlw	8
  6593  00E2  318D  25BA  3180   	fcall	i1_readGPIO
  6594  00E5  3A00               	xorlw	0
  6595  00E6  1903               	skipnz
  6596  00E7  28E9               	goto	u187_21
  6597  00E8  28EA               	goto	u187_20
  6598  00E9                     u187_21:
  6599  00E9  28F9               	goto	i1l2287
  6600  00EA                     u187_20:
  6601  00EA                     i1l2285:
  6602  00EA  3080               	movlw	128
  6603  00EB  0020               	movlb	0	; select bank0
  6604  00EC  00B0               	movwf	??_runVoltageModeControl
  6605  00ED  303E               	movlw	62
  6606  00EE  00B1               	movwf	??_runVoltageModeControl+1
  6607  00EF  0850               	movf	runVoltageModeControl@newVoltage,w
  6608  00F0  0230               	subwf	??_runVoltageModeControl,w
  6609  00F1  0021               	movlb	1	; select bank1
  6610  00F2  00C6               	movwf	_voltageModeVariables^(0+128)
  6611  00F3  0020               	movlb	0	; select bank0
  6612  00F4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6613  00F5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6614  00F6  0021               	movlb	1	; select bank1
  6615  00F7  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6616  00F8  2907               	goto	i1l2289
  6617  00F9                     i1l2287:
  6618  00F9  30E0               	movlw	224
  6619  00FA  0020               	movlb	0	; select bank0
  6620  00FB  00B0               	movwf	??_runVoltageModeControl
  6621  00FC  302E               	movlw	46
  6622  00FD  00B1               	movwf	??_runVoltageModeControl+1
  6623  00FE  0850               	movf	runVoltageModeControl@newVoltage,w
  6624  00FF  0230               	subwf	??_runVoltageModeControl,w
  6625  0100  0021               	movlb	1	; select bank1
  6626  0101  00C6               	movwf	_voltageModeVariables^(0+128)
  6627  0102  0020               	movlb	0	; select bank0
  6628  0103  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6629  0104  3B31               	subwfb	??_runVoltageModeControl+1,w
  6630  0105  0021               	movlb	1	; select bank1
  6631  0106  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6632  0107                     i1l2289:
  6633                           
  6634                           ;Controller.c: 96:    int64_t integralMult = ((int64_t) (5u * ((int64_t) voltageModeVari
      +                          ables.error) )) * 134u;
  6635  0107  0846               	movf	_voltageModeVariables^(0+128),w
  6636  0108  0020               	movlb	0	; select bank0
  6637  0109  00A0               	movwf	___omul@multiplier
  6638  010A  0021               	movlb	1	; select bank1
  6639  010B  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6640  010C  0020               	movlb	0	; select bank0
  6641  010D  00A1               	movwf	___omul@multiplier+1
  6642  010E  0D89               	rlf	9,f
  6643  010F  3B89               	subwfb	9,f
  6644  0110  0989               	comf	9,f
  6645  0111  00A2               	movwf	___omul@multiplier+2
  6646  0112  00A3               	movwf	___omul@multiplier+3
  6647  0113  00A4               	movwf	___omul@multiplier+4
  6648  0114  00A5               	movwf	___omul@multiplier+5
  6649  0115  00A6               	movwf	___omul@multiplier+6
  6650  0116  00A7               	movwf	___omul@multiplier+7
  6651  0117  3000               	movlw	0
  6652  0118  00AF               	movwf	___omul@multiplicand+7
  6653  0119  3000               	movlw	0
  6654  011A  00AE               	movwf	___omul@multiplicand+6
  6655  011B  3000               	movlw	0
  6656  011C  00AD               	movwf	___omul@multiplicand+5
  6657  011D  3000               	movlw	0
  6658  011E  00AC               	movwf	___omul@multiplicand+4
  6659  011F  3000               	movlw	0
  6660  0120  00AB               	movwf	___omul@multiplicand+3
  6661  0121  3000               	movlw	0
  6662  0122  00AA               	movwf	___omul@multiplicand+2
  6663  0123  3002               	movlw	2
  6664  0124  00A9               	movwf	___omul@multiplicand+1
  6665  0125  309E               	movlw	158
  6666  0126  00A8               	movwf	___omul@multiplicand
  6667  0127  318E  264B  3180   	fcall	___omul
  6668  012A  0020               	movlb	0	; select bank0
  6669  012B  0820               	movf	?___omul,w
  6670  012C  00C0               	movwf	runVoltageModeControl@integralMult
  6671  012D  0821               	movf	?___omul+1,w
  6672  012E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6673  012F  0822               	movf	?___omul+2,w
  6674  0130  00C2               	movwf	runVoltageModeControl@integralMult+2
  6675  0131  0823               	movf	?___omul+3,w
  6676  0132  00C3               	movwf	runVoltageModeControl@integralMult+3
  6677  0133  0824               	movf	?___omul+4,w
  6678  0134  00C4               	movwf	runVoltageModeControl@integralMult+4
  6679  0135  0825               	movf	?___omul+5,w
  6680  0136  00C5               	movwf	runVoltageModeControl@integralMult+5
  6681  0137  0826               	movf	?___omul+6,w
  6682  0138  00C6               	movwf	runVoltageModeControl@integralMult+6
  6683  0139  0827               	movf	?___omul+7,w
  6684  013A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6685  013B                     i1l2291:
  6686                           
  6687                           ;Controller.c: 98:    voltageModeVariables.integral = integralMult;
  6688  013B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6689  013C  0021               	movlb	1	; select bank1
  6690  013D  00CB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6691  013E  0020               	movlb	0	; select bank0
  6692  013F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6693  0140  0021               	movlb	1	; select bank1
  6694  0141  00CA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6695  0142  0020               	movlb	0	; select bank0
  6696  0143  0841               	movf	runVoltageModeControl@integralMult+1,w
  6697  0144  0021               	movlb	1	; select bank1
  6698  0145  00C9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6699  0146  0020               	movlb	0	; select bank0
  6700  0147  0840               	movf	runVoltageModeControl@integralMult,w
  6701  0148  0021               	movlb	1	; select bank1
  6702  0149  00C8               	movwf	(_voltageModeVariables^(0+128)+2)
  6703  014A                     i1l2293:
  6704                           
  6705                           ;Controller.c: 99:    voltageModeVariables.integralOutputScaled = (voltageModeVariables.
      +                          integralOutputScaled + voltageModeVariables.integral);
  6706  014A  300E               	movlw	14
  6707  014B  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6708  014C  0086               	movwf	6
  6709  014D  0187               	clrf	7
  6710  014E  3F40               	moviw [0]fsr1
  6711  014F  0020               	movlb	0	; select bank0
  6712  0150  00B0               	movwf	??_runVoltageModeControl
  6713  0151  3F41               	moviw [1]fsr1
  6714  0152  00B1               	movwf	??_runVoltageModeControl+1
  6715  0153  3F42               	moviw [2]fsr1
  6716  0154  00B2               	movwf	??_runVoltageModeControl+2
  6717  0155  3F43               	moviw [3]fsr1
  6718  0156  00B3               	movwf	??_runVoltageModeControl+3
  6719  0157  3F44               	moviw [4]fsr1
  6720  0158  00B4               	movwf	??_runVoltageModeControl+4
  6721  0159  3F45               	moviw [5]fsr1
  6722  015A  00B5               	movwf	??_runVoltageModeControl+5
  6723  015B  3F46               	moviw [6]fsr1
  6724  015C  00B6               	movwf	??_runVoltageModeControl+6
  6725  015D  3F47               	moviw [7]fsr1
  6726  015E  00B7               	movwf	??_runVoltageModeControl+7
  6727  015F  0021               	movlb	1	; select bank1
  6728  0160  0848               	movf	(_voltageModeVariables^(0+128)+2),w
  6729  0161  0020               	movlb	0	; select bank0
  6730  0162  00B8               	movwf	??_runVoltageModeControl+8
  6731  0163  0021               	movlb	1	; select bank1
  6732  0164  0849               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6733  0165  0020               	movlb	0	; select bank0
  6734  0166  00B9               	movwf	??_runVoltageModeControl+9
  6735  0167  0021               	movlb	1	; select bank1
  6736  0168  084A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6737  0169  0020               	movlb	0	; select bank0
  6738  016A  00BA               	movwf	??_runVoltageModeControl+10
  6739  016B  0021               	movlb	1	; select bank1
  6740  016C  084B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6741  016D  0020               	movlb	0	; select bank0
  6742  016E  00BB               	movwf	??_runVoltageModeControl+11
  6743  016F  3000               	movlw	0
  6744  0170  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6745  0171  30FF               	movlw	255
  6746  0172  00BC               	movwf	??_runVoltageModeControl+12
  6747  0173  00BD               	movwf	??_runVoltageModeControl+13
  6748  0174  00BE               	movwf	??_runVoltageModeControl+14
  6749  0175  00BF               	movwf	??_runVoltageModeControl+15
  6750  0176  0838               	movf	??_runVoltageModeControl+8,w
  6751  0177  07B0               	addwf	??_runVoltageModeControl,f
  6752  0178  0839               	movf	??_runVoltageModeControl+9,w
  6753  0179  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6754  017A  083A               	movf	??_runVoltageModeControl+10,w
  6755  017B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6756  017C  083B               	movf	??_runVoltageModeControl+11,w
  6757  017D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6758  017E  083C               	movf	??_runVoltageModeControl+12,w
  6759  017F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6760  0180  083D               	movf	??_runVoltageModeControl+13,w
  6761  0181  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6762  0182  083E               	movf	??_runVoltageModeControl+14,w
  6763  0183  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6764  0184  083F               	movf	??_runVoltageModeControl+15,w
  6765  0185  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6766  0186  0837               	movf	??_runVoltageModeControl+7,w
  6767  0187  0021               	movlb	1	; select bank1
  6768  0188  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6769  0189  0020               	movlb	0	; select bank0
  6770  018A  0836               	movf	??_runVoltageModeControl+6,w
  6771  018B  0021               	movlb	1	; select bank1
  6772  018C  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6773  018D  0020               	movlb	0	; select bank0
  6774  018E  0835               	movf	??_runVoltageModeControl+5,w
  6775  018F  0021               	movlb	1	; select bank1
  6776  0190  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6777  0191  0020               	movlb	0	; select bank0
  6778  0192  0834               	movf	??_runVoltageModeControl+4,w
  6779  0193  0021               	movlb	1	; select bank1
  6780  0194  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6781  0195  0020               	movlb	0	; select bank0
  6782  0196  0833               	movf	??_runVoltageModeControl+3,w
  6783  0197  0021               	movlb	1	; select bank1
  6784  0198  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6785  0199  0020               	movlb	0	; select bank0
  6786  019A  0832               	movf	??_runVoltageModeControl+2,w
  6787  019B  0021               	movlb	1	; select bank1
  6788  019C  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6789  019D  0020               	movlb	0	; select bank0
  6790  019E  0831               	movf	??_runVoltageModeControl+1,w
  6791  019F  0021               	movlb	1	; select bank1
  6792  01A0  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6793  01A1  0020               	movlb	0	; select bank0
  6794  01A2  0830               	movf	??_runVoltageModeControl,w
  6795  01A3  0021               	movlb	1	; select bank1
  6796  01A4  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6797  01A5                     i1l2295:
  6798                           
  6799                           ;Controller.c: 102:    if(voltageModeVariables.integralOutputScaled > (1073741824u)){
  6800  01A5  1BDB               	btfsc	((_voltageModeVariables+7)^(0+128)+14),7
  6801  01A6  29BE               	goto	u188_21
  6802  01A7  085B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6803  01A8  1D03               	btfss	3,2
  6804  01A9  29BF               	goto	u188_20
  6805  01AA  085A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6806  01AB  1D03               	btfss	3,2
  6807  01AC  29BF               	goto	u188_20
  6808  01AD  0859               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6809  01AE  1D03               	btfss	3,2
  6810  01AF  29BF               	goto	u188_20
  6811  01B0  0858               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6812  01B1  1D03               	btfss	3,2
  6813  01B2  29BF               	goto	u188_20
  6814  01B3  3001               	movlw	1
  6815  01B4  0254               	subwf	(_voltageModeVariables^(0+128)+14),w
  6816  01B5  3000               	movlw	0
  6817  01B6  3B55               	subwfb	((_voltageModeVariables+1)^(0+128)+14),w
  6818  01B7  3000               	movlw	0
  6819  01B8  3B56               	subwfb	((_voltageModeVariables+2)^(0+128)+14),w
  6820  01B9  3040               	movlw	64
  6821  01BA  3B57               	subwfb	((_voltageModeVariables+3)^(0+128)+14),w
  6822  01BB  1C03               	btfss	3,0
  6823  01BC  29BE               	goto	u188_21
  6824  01BD  29BF               	goto	u188_20
  6825  01BE                     u188_21:
  6826  01BE  29D0               	goto	i1l2299
  6827  01BF                     u188_20:
  6828  01BF                     i1l2297:
  6829                           
  6830                           ;Controller.c: 103:        voltageModeVariables.integralOutputScaled = (1073741824u);
  6831  01BF  3000               	movlw	0
  6832  01C0  0021               	movlb	1	; select bank1
  6833  01C1  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6834  01C2  3000               	movlw	0
  6835  01C3  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6836  01C4  3000               	movlw	0
  6837  01C5  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6838  01C6  3000               	movlw	0
  6839  01C7  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6840  01C8  3040               	movlw	64
  6841  01C9  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6842  01CA  3000               	movlw	0
  6843  01CB  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6844  01CC  3000               	movlw	0
  6845  01CD  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6846  01CE  3000               	movlw	0
  6847  01CF  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6848  01D0                     i1l2299:
  6849                           
  6850                           ;Controller.c: 106:    if(voltageModeVariables.integralOutputScaled < 0){
  6851  01D0  300E               	movlw	14
  6852  01D1  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6853  01D2  0086               	movwf	6
  6854  01D3  0187               	clrf	7
  6855  01D4  3F47               	moviw [7]fsr1
  6856  01D5  0020               	movlb	0	; select bank0
  6857  01D6  00B0               	movwf	??_runVoltageModeControl
  6858  01D7  1FB0               	btfss	??_runVoltageModeControl,7
  6859  01D8  29DA               	goto	u189_21
  6860  01D9  29DB               	goto	u189_20
  6861  01DA                     u189_21:
  6862  01DA  2A0A               	goto	i1l2305
  6863  01DB                     u189_20:
  6864  01DB                     i1l2301:
  6865                           
  6866                           ;Controller.c: 107:         if(abs(voltageModeVariables.integralOutputScaled) > (1073741
      +                          824u)){
  6867  01DB  0021               	movlb	1	; select bank1
  6868  01DC  0855               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6869  01DD  00F1               	movwf	abs@a+1
  6870  01DE  0854               	movf	(_voltageModeVariables^(0+128)+14),w
  6871  01DF  00F0               	movwf	abs@a
  6872  01E0  318C  2485  3180   	fcall	_abs
  6873  01E3  0870               	movf	?_abs,w
  6874  01E4  0020               	movlb	0	; select bank0
  6875  01E5  00B0               	movwf	??_runVoltageModeControl
  6876  01E6  0871               	movf	?_abs+1,w
  6877  01E7  00B1               	movwf	??_runVoltageModeControl+1
  6878  01E8  3000               	movlw	0
  6879  01E9  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6880  01EA  30FF               	movlw	255
  6881  01EB  00B2               	movwf	??_runVoltageModeControl+2
  6882  01EC  00B3               	movwf	??_runVoltageModeControl+3
  6883  01ED  3001               	movlw	1
  6884  01EE  0230               	subwf	??_runVoltageModeControl,w
  6885  01EF  3000               	movlw	0
  6886  01F0  3B31               	subwfb	??_runVoltageModeControl+1,w
  6887  01F1  3000               	movlw	0
  6888  01F2  3B32               	subwfb	??_runVoltageModeControl+2,w
  6889  01F3  3040               	movlw	64
  6890  01F4  3B33               	subwfb	??_runVoltageModeControl+3,w
  6891  01F5  1C03               	btfss	3,0
  6892  01F6  29F8               	goto	u190_21
  6893  01F7  29F9               	goto	u190_20
  6894  01F8                     u190_21:
  6895  01F8  2A0A               	goto	i1l2305
  6896  01F9                     u190_20:
  6897  01F9                     i1l2303:
  6898                           
  6899                           ;Controller.c: 108:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(1073741824u));
  6900  01F9  3000               	movlw	0
  6901  01FA  0021               	movlb	1	; select bank1
  6902  01FB  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6903  01FC  3000               	movlw	0
  6904  01FD  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6905  01FE  3000               	movlw	0
  6906  01FF  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6907  0200  3000               	movlw	0
  6908  0201  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6909  0202  30C0               	movlw	192
  6910  0203  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6911  0204  3000               	movlw	0
  6912  0205  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6913  0206  3000               	movlw	0
  6914  0207  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6915  0208  3000               	movlw	0
  6916  0209  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6917  020A                     i1l2305:
  6918                           
  6919                           ;Controller.c: 113:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 4u);
  6920  020A  300E               	movlw	14
  6921  020B  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6922  020C  0086               	movwf	6
  6923  020D  0187               	clrf	7
  6924  020E  3F40               	moviw [0]fsr1
  6925  020F  0020               	movlb	0	; select bank0
  6926  0210  00B0               	movwf	??_runVoltageModeControl
  6927  0211  3F41               	moviw [1]fsr1
  6928  0212  00B1               	movwf	??_runVoltageModeControl+1
  6929  0213  3F42               	moviw [2]fsr1
  6930  0214  00B2               	movwf	??_runVoltageModeControl+2
  6931  0215  3F43               	moviw [3]fsr1
  6932  0216  00B3               	movwf	??_runVoltageModeControl+3
  6933  0217  3F44               	moviw [4]fsr1
  6934  0218  00B4               	movwf	??_runVoltageModeControl+4
  6935  0219  3F45               	moviw [5]fsr1
  6936  021A  00B5               	movwf	??_runVoltageModeControl+5
  6937  021B  3F46               	moviw [6]fsr1
  6938  021C  00B6               	movwf	??_runVoltageModeControl+6
  6939  021D  3F47               	moviw [7]fsr1
  6940  021E  00B7               	movwf	??_runVoltageModeControl+7
  6941  021F  3014               	movlw	20
  6942  0220  00B8               	movwf	??_runVoltageModeControl+8
  6943  0221                     u191_25:
  6944  0221  0020               	movlb	0	; select bank0
  6945  0222  37B7               	asrf	??_runVoltageModeControl+7,f
  6946  0223  0CB6               	rrf	??_runVoltageModeControl+6,f
  6947  0224  0CB5               	rrf	??_runVoltageModeControl+5,f
  6948  0225  0CB4               	rrf	??_runVoltageModeControl+4,f
  6949  0226  0CB3               	rrf	??_runVoltageModeControl+3,f
  6950  0227  0CB2               	rrf	??_runVoltageModeControl+2,f
  6951  0228  0CB1               	rrf	??_runVoltageModeControl+1,f
  6952  0229  0CB0               	rrf	??_runVoltageModeControl,f
  6953  022A                     u191_20:
  6954  022A  0BB8               	decfsz	??_runVoltageModeControl+8,f
  6955  022B  2A21               	goto	u191_25
  6956  022C  0020               	movlb	0	; select bank0
  6957  022D  0833               	movf	??_runVoltageModeControl+3,w
  6958  022E  0021               	movlb	1	; select bank1
  6959  022F  00D3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  6960  0230  0020               	movlb	0	; select bank0
  6961  0231  0832               	movf	??_runVoltageModeControl+2,w
  6962  0232  0021               	movlb	1	; select bank1
  6963  0233  00D2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  6964  0234  0020               	movlb	0	; select bank0
  6965  0235  0831               	movf	??_runVoltageModeControl+1,w
  6966  0236  0021               	movlb	1	; select bank1
  6967  0237  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  6968  0238  0020               	movlb	0	; select bank0
  6969  0239  0830               	movf	??_runVoltageModeControl,w
  6970  023A  0021               	movlb	1	; select bank1
  6971  023B  00D0               	movwf	(_voltageModeVariables^(0+128)+10)
  6972  023C                     i1l2307:
  6973                           
  6974                           ;Controller.c: 116:    int64_t propMult = (int32_t) (18u * ((int32_t) voltageModeVariabl
      +                          es.error));
  6975  023C  0846               	movf	_voltageModeVariables^(0+128),w
  6976  023D  00F0               	movwf	___lmul@multiplier
  6977  023E  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6978  023F  00F1               	movwf	___lmul@multiplier+1
  6979  0240  0D89               	rlf	9,f
  6980  0241  3B89               	subwfb	9,f
  6981  0242  0989               	comf	9,f
  6982  0243  00F2               	movwf	___lmul@multiplier+2
  6983  0244  00F3               	movwf	___lmul@multiplier+3
  6984  0245  3000               	movlw	0
  6985  0246  00F7               	movwf	___lmul@multiplicand+3
  6986  0247  3000               	movlw	0
  6987  0248  00F6               	movwf	___lmul@multiplicand+2
  6988  0249  3000               	movlw	0
  6989  024A  00F5               	movwf	___lmul@multiplicand+1
  6990  024B  3012               	movlw	18
  6991  024C  00F4               	movwf	___lmul@multiplicand
  6992  024D  318D  2552  3180   	fcall	___lmul
  6993  0250  0870               	movf	?___lmul,w
  6994  0251  0020               	movlb	0	; select bank0
  6995  0252  00C8               	movwf	runVoltageModeControl@propMult
  6996  0253  0871               	movf	?___lmul+1,w
  6997  0254  00C9               	movwf	runVoltageModeControl@propMult+1
  6998  0255  0872               	movf	?___lmul+2,w
  6999  0256  00CA               	movwf	runVoltageModeControl@propMult+2
  7000  0257  0873               	movf	?___lmul+3,w
  7001  0258  00CB               	movwf	runVoltageModeControl@propMult+3
  7002  0259  3000               	movlw	0
  7003  025A  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7004  025B  30FF               	movlw	255
  7005  025C  00CC               	movwf	runVoltageModeControl@propMult+4
  7006  025D  00CD               	movwf	runVoltageModeControl@propMult+5
  7007  025E  00CE               	movwf	runVoltageModeControl@propMult+6
  7008  025F  00CF               	movwf	runVoltageModeControl@propMult+7
  7009  0260                     i1l2309:
  7010                           
  7011                           ;Controller.c: 117:    voltageModeVariables.proportionalOutput = propMult >> 10u;
  7012  0260  3048               	movlw	low runVoltageModeControl@propMult
  7013  0261  0086               	movwf	6
  7014  0262  3000               	movlw	high runVoltageModeControl@propMult
  7015  0263  0087               	movwf	7
  7016  0264  3F40               	moviw [0]fsr1
  7017  0265  00B0               	movwf	??_runVoltageModeControl
  7018  0266  3F41               	moviw [1]fsr1
  7019  0267  00B1               	movwf	??_runVoltageModeControl+1
  7020  0268  3F42               	moviw [2]fsr1
  7021  0269  00B2               	movwf	??_runVoltageModeControl+2
  7022  026A  3F43               	moviw [3]fsr1
  7023  026B  00B3               	movwf	??_runVoltageModeControl+3
  7024  026C  3F44               	moviw [4]fsr1
  7025  026D  00B4               	movwf	??_runVoltageModeControl+4
  7026  026E  3F45               	moviw [5]fsr1
  7027  026F  00B5               	movwf	??_runVoltageModeControl+5
  7028  0270  3F46               	moviw [6]fsr1
  7029  0271  00B6               	movwf	??_runVoltageModeControl+6
  7030  0272  3F47               	moviw [7]fsr1
  7031  0273  00B7               	movwf	??_runVoltageModeControl+7
  7032  0274  300A               	movlw	10
  7033  0275  00B8               	movwf	??_runVoltageModeControl+8
  7034  0276                     u192_25:
  7035  0276  0020               	movlb	0	; select bank0
  7036  0277  37B7               	asrf	??_runVoltageModeControl+7,f
  7037  0278  0CB6               	rrf	??_runVoltageModeControl+6,f
  7038  0279  0CB5               	rrf	??_runVoltageModeControl+5,f
  7039  027A  0CB4               	rrf	??_runVoltageModeControl+4,f
  7040  027B  0CB3               	rrf	??_runVoltageModeControl+3,f
  7041  027C  0CB2               	rrf	??_runVoltageModeControl+2,f
  7042  027D  0CB1               	rrf	??_runVoltageModeControl+1,f
  7043  027E  0CB0               	rrf	??_runVoltageModeControl,f
  7044  027F                     u192_20:
  7045  027F  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7046  0280  2A76               	goto	u192_25
  7047  0281  0020               	movlb	0	; select bank0
  7048  0282  0833               	movf	??_runVoltageModeControl+3,w
  7049  0283  0021               	movlb	1	; select bank1
  7050  0284  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7051  0285  0020               	movlb	0	; select bank0
  7052  0286  0832               	movf	??_runVoltageModeControl+2,w
  7053  0287  0021               	movlb	1	; select bank1
  7054  0288  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7055  0289  0020               	movlb	0	; select bank0
  7056  028A  0831               	movf	??_runVoltageModeControl+1,w
  7057  028B  0021               	movlb	1	; select bank1
  7058  028C  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7059  028D  0020               	movlb	0	; select bank0
  7060  028E  0830               	movf	??_runVoltageModeControl,w
  7061  028F  0021               	movlb	1	; select bank1
  7062  0290  00CC               	movwf	(_voltageModeVariables^(0+128)+6)
  7063  0291                     i1l2311:
  7064                           
  7065                           ;Controller.c: 119:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7066  0291  0850               	movf	(_voltageModeVariables^(0+128)+10),w
  7067  0292  074C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7068  0293  0020               	movlb	0	; select bank0
  7069  0294  00B0               	movwf	??_runVoltageModeControl
  7070  0295  0021               	movlb	1	; select bank1
  7071  0296  0851               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7072  0297  3D4D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7073  0298  0020               	movlb	0	; select bank0
  7074  0299  00B1               	movwf	??_runVoltageModeControl+1
  7075  029A  0021               	movlb	1	; select bank1
  7076  029B  0852               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7077  029C  3D4E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7078  029D  0020               	movlb	0	; select bank0
  7079  029E  00B2               	movwf	??_runVoltageModeControl+2
  7080  029F  0021               	movlb	1	; select bank1
  7081  02A0  0853               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7082  02A1  3D4F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7083  02A2  0020               	movlb	0	; select bank0
  7084  02A3  00B3               	movwf	??_runVoltageModeControl+3
  7085  02A4  0833               	movf	??_runVoltageModeControl+3,w
  7086  02A5  0021               	movlb	1	; select bank1
  7087  02A6  00DF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7088  02A7  0020               	movlb	0	; select bank0
  7089  02A8  0832               	movf	??_runVoltageModeControl+2,w
  7090  02A9  0021               	movlb	1	; select bank1
  7091  02AA  00DE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7092  02AB  0020               	movlb	0	; select bank0
  7093  02AC  0831               	movf	??_runVoltageModeControl+1,w
  7094  02AD  0021               	movlb	1	; select bank1
  7095  02AE  00DD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7096  02AF  0020               	movlb	0	; select bank0
  7097  02B0  0830               	movf	??_runVoltageModeControl,w
  7098  02B1  0021               	movlb	1	; select bank1
  7099  02B2  00DC               	movwf	(_voltageModeVariables^(0+128)+22)
  7100  02B3                     i1l2313:
  7101                           
  7102                           ;Controller.c: 120:    voltageModeVariables.previousError = voltageModeVariables.error;
  7103  02B3  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7104  02B4  00E1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7105  02B5  0846               	movf	_voltageModeVariables^(0+128),w
  7106  02B6  00E0               	movwf	(_voltageModeVariables^(0+128)+26)
  7107  02B7                     i1l479:
  7108  02B7  0008               	return
  7109  02B8                     __end_of_runVoltageModeControl:
  7110                           
  7111                           	psect	text30
  7112  0DBA                     __ptext30:	
  7113 ;; *************** function i1_readGPIO *****************
  7114 ;; Defined at:
  7115 ;;		line 79 in file "GPIO.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  gpioNumber      1    wreg     const enum E2798
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7120 ;;  portType        1    7[COMMON] unsigned char 
  7121 ;;  portNumber      1    6[COMMON] unsigned char 
  7122 ;;  returnValueB    1    5[COMMON] unsigned char 
  7123 ;;  readB           1    4[COMMON] unsigned char 
  7124 ;;  returnValueA    1    3[COMMON] unsigned char 
  7125 ;;  readA           1    2[COMMON] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      _Bool 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7135 ;;      Params:         0       0       0       0       0       0
  7136 ;;      Locals:         7       0       0       0       0       0
  7137 ;;      Temps:          2       0       0       0       0       0
  7138 ;;      Totals:         9       0       0       0       0       0
  7139 ;;Total ram usage:        9 bytes
  7140 ;; Hardware stack levels used: 1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_runVoltageModeControl
  7145 ;;		_currentTripRead
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149  0DBA                     i1_readGPIO:	
  7150                           ;psect for function i1_readGPIO
  7151                           
  7152                           
  7153                           ;incstack = 0
  7154                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7155                           ;i1readGPIO@gpioNumber stored from wreg
  7156  0DBA  00F8               	movwf	i1readGPIO@gpioNumber
  7157  0DBB                     i1l2119:
  7158                           
  7159                           ;GPIO.c: 81:     uint8_t portType = 0;
  7160  0DBB  01F7               	clrf	i1readGPIO@portType
  7161  0DBC                     i1l2121:
  7162                           
  7163                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7164  0DBC  3008               	movlw	8
  7165  0DBD  0278               	subwf	i1readGPIO@gpioNumber,w
  7166  0DBE  1C03               	skipc
  7167  0DBF  2DC1               	goto	u152_21
  7168  0DC0  2DC2               	goto	u152_20
  7169  0DC1                     u152_21:
  7170  0DC1  2DCA               	goto	i1l2127
  7171  0DC2                     u152_20:
  7172  0DC2                     i1l2123:
  7173                           
  7174                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7175  0DC2  0878               	movf	i1readGPIO@gpioNumber,w
  7176  0DC3  3EF8               	addlw	248
  7177  0DC4  00F0               	movwf	??i1_readGPIO
  7178  0DC5  0870               	movf	??i1_readGPIO,w
  7179  0DC6  00F6               	movwf	i1readGPIO@portNumber
  7180  0DC7                     i1l2125:
  7181                           
  7182                           ;GPIO.c: 84:         portType = 1;
  7183  0DC7  01F7               	clrf	i1readGPIO@portType
  7184  0DC8  0AF7               	incf	i1readGPIO@portType,f
  7185                           
  7186                           ;GPIO.c: 85:     }
  7187  0DC9  2DCF               	goto	i1l2131
  7188  0DCA                     i1l2127:
  7189                           
  7190                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7191  0DCA  0878               	movf	i1readGPIO@gpioNumber,w
  7192  0DCB  00F0               	movwf	??i1_readGPIO
  7193  0DCC  0870               	movf	??i1_readGPIO,w
  7194  0DCD  00F6               	movwf	i1readGPIO@portNumber
  7195  0DCE                     i1l2129:
  7196                           
  7197                           ;GPIO.c: 88:         portType = 0;
  7198  0DCE  01F7               	clrf	i1readGPIO@portType
  7199  0DCF                     i1l2131:
  7200                           
  7201                           ;GPIO.c: 91:     if(portType == 0){
  7202  0DCF  0877               	movf	i1readGPIO@portType,w
  7203  0DD0  1D03               	btfss	3,2
  7204  0DD1  2DD3               	goto	u153_21
  7205  0DD2  2DD4               	goto	u153_20
  7206  0DD3                     u153_21:
  7207  0DD3  2DE7               	goto	i1l2143
  7208  0DD4                     u153_20:
  7209  0DD4                     i1l2133:
  7210                           
  7211                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7212  0DD4  0020               	movlb	0	; select bank0
  7213  0DD5  080C               	movf	12,w	;volatile
  7214  0DD6  00F0               	movwf	??i1_readGPIO
  7215  0DD7  0870               	movf	??i1_readGPIO,w
  7216  0DD8  00F2               	movwf	i1readGPIO@readA
  7217  0DD9                     i1l2135:
  7218                           
  7219                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7220  0DD9  0872               	movf	i1readGPIO@readA,w
  7221  0DDA  00F0               	movwf	??i1_readGPIO
  7222  0DDB  0A76               	incf	i1readGPIO@portNumber,w
  7223  0DDC  2DDE               	goto	u154_24
  7224  0DDD                     u154_25:
  7225  0DDD  36F0               	lsrf	??i1_readGPIO,f
  7226  0DDE                     u154_24:
  7227  0DDE  0B89               	decfsz	9,f
  7228  0DDF  2DDD               	goto	u154_25
  7229  0DE0  0870               	movf	??i1_readGPIO,w
  7230  0DE1  3901               	andlw	1
  7231  0DE2  00F1               	movwf	??i1_readGPIO+1
  7232  0DE3  0871               	movf	??i1_readGPIO+1,w
  7233  0DE4  00F3               	movwf	i1readGPIO@returnValueA
  7234  0DE5                     i1l2137:
  7235                           
  7236                           ;GPIO.c: 94:         return returnValueA;
  7237  0DE5  0873               	movf	i1readGPIO@returnValueA,w
  7238  0DE6  2E00               	goto	i1l343
  7239  0DE7                     i1l2143:
  7240  0DE7  0377               	decf	i1readGPIO@portType,w
  7241  0DE8  1D03               	btfss	3,2
  7242  0DE9  2DEB               	goto	u155_21
  7243  0DEA  2DEC               	goto	u155_20
  7244  0DEB                     u155_21:
  7245  0DEB  2DFF               	goto	i1l2155
  7246  0DEC                     u155_20:
  7247  0DEC                     i1l2145:
  7248                           
  7249                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7250  0DEC  0020               	movlb	0	; select bank0
  7251  0DED  080D               	movf	13,w	;volatile
  7252  0DEE  00F0               	movwf	??i1_readGPIO
  7253  0DEF  0870               	movf	??i1_readGPIO,w
  7254  0DF0  00F4               	movwf	i1readGPIO@readB
  7255  0DF1                     i1l2147:
  7256                           
  7257                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7258  0DF1  0874               	movf	i1readGPIO@readB,w
  7259  0DF2  00F0               	movwf	??i1_readGPIO
  7260  0DF3  0A76               	incf	i1readGPIO@portNumber,w
  7261  0DF4  2DF6               	goto	u156_24
  7262  0DF5                     u156_25:
  7263  0DF5  36F0               	lsrf	??i1_readGPIO,f
  7264  0DF6                     u156_24:
  7265  0DF6  0B89               	decfsz	9,f
  7266  0DF7  2DF5               	goto	u156_25
  7267  0DF8  0870               	movf	??i1_readGPIO,w
  7268  0DF9  3901               	andlw	1
  7269  0DFA  00F1               	movwf	??i1_readGPIO+1
  7270  0DFB  0871               	movf	??i1_readGPIO+1,w
  7271  0DFC  00F5               	movwf	i1readGPIO@returnValueB
  7272  0DFD                     i1l2149:
  7273                           
  7274                           ;GPIO.c: 99:         return returnValueB;
  7275  0DFD  0875               	movf	i1readGPIO@returnValueB,w
  7276  0DFE  2E00               	goto	i1l343
  7277  0DFF                     i1l2155:
  7278  0DFF  3000               	movlw	0
  7279  0E00                     i1l343:
  7280  0E00  0008               	return
  7281  0E01                     __end_ofi1_readGPIO:
  7282                           
  7283                           	psect	text31
  7284  07BD                     __ptext31:	
  7285 ;; *************** function _convertRawToMilliVolts *****************
  7286 ;; Defined at:
  7287 ;;		line 47 in file "Controller.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  rawValue        2   12[COMMON] unsigned short 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  vsenseMult      4    5[BANK0 ] long 
  7292 ;;  returnValued    2   11[BANK0 ] short 
  7293 ;;  offsetted       2    9[BANK0 ] short 
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  2   12[COMMON] short 
  7296 ;; Registers used:
  7297 ;;		wreg, status,2, status,0, pclath, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7303 ;;      Params:         2       0       0       0       0       0
  7304 ;;      Locals:         0       8       0       0       0       0
  7305 ;;      Temps:          0       5       0       0       0       0
  7306 ;;      Totals:         2      13       0       0       0       0
  7307 ;;Total ram usage:       15 bytes
  7308 ;; Hardware stack levels used: 1
  7309 ;; Hardware stack levels required when called: 1
  7310 ;; This function calls:
  7311 ;;		___lmul
  7312 ;; This function is called by:
  7313 ;;		_runVoltageModeControl
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317  07BD                     _convertRawToMilliVolts:	
  7318                           ;psect for function _convertRawToMilliVolts
  7319                           
  7320  07BD                     i1l2087:	
  7321                           ;incstack = 0
  7322                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7323                           
  7324                           
  7325                           ;Controller.c: 48:     int16_t offsetted = (int16_t)(rawValue) - 10u;
  7326  07BD  087C               	movf	convertRawToMilliVolts@rawValue,w
  7327  07BE  3EF6               	addlw	246
  7328  07BF  0020               	movlb	0	; select bank0
  7329  07C0  00A9               	movwf	convertRawToMilliVolts@offsetted
  7330  07C1  30FF               	movlw	255
  7331  07C2  3D7D               	addwfc	convertRawToMilliVolts@rawValue+1,w
  7332  07C3  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7333  07C4                     i1l2089:
  7334                           
  7335                           ;Controller.c: 49:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7336  07C4  0829               	movf	convertRawToMilliVolts@offsetted,w
  7337  07C5  00F0               	movwf	___lmul@multiplier
  7338  07C6  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7339  07C7  00F1               	movwf	___lmul@multiplier+1
  7340  07C8  0D89               	rlf	9,f
  7341  07C9  3B89               	subwfb	9,f
  7342  07CA  0989               	comf	9,f
  7343  07CB  00F2               	movwf	___lmul@multiplier+2
  7344  07CC  00F3               	movwf	___lmul@multiplier+3
  7345  07CD  3000               	movlw	0
  7346  07CE  00F7               	movwf	___lmul@multiplicand+3
  7347  07CF  3000               	movlw	0
  7348  07D0  00F6               	movwf	___lmul@multiplicand+2
  7349  07D1  3017               	movlw	23
  7350  07D2  00F5               	movwf	___lmul@multiplicand+1
  7351  07D3  30D4               	movlw	212
  7352  07D4  00F4               	movwf	___lmul@multiplicand
  7353  07D5  318D  2552  3187   	fcall	___lmul
  7354  07D8  0873               	movf	?___lmul+3,w
  7355  07D9  0020               	movlb	0	; select bank0
  7356  07DA  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7357  07DB  0872               	movf	?___lmul+2,w
  7358  07DC  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7359  07DD  0871               	movf	?___lmul+1,w
  7360  07DE  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7361  07DF  0870               	movf	?___lmul,w
  7362  07E0  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7363  07E1                     i1l2091:
  7364                           
  7365                           ;Controller.c: 50:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7366  07E1  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7367  07E2  00A0               	movwf	??_convertRawToMilliVolts
  7368  07E3  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7369  07E4  00A1               	movwf	??_convertRawToMilliVolts+1
  7370  07E5  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7371  07E6  00A2               	movwf	??_convertRawToMilliVolts+2
  7372  07E7  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7373  07E8  00A3               	movwf	??_convertRawToMilliVolts+3
  7374  07E9  3008               	movlw	8
  7375  07EA  00A4               	movwf	??_convertRawToMilliVolts+4
  7376  07EB                     u147_25:
  7377  07EB  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7378  07EC  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7379  07ED  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7380  07EE  0CA0               	rrf	??_convertRawToMilliVolts,f
  7381  07EF                     u147_20:
  7382  07EF  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7383  07F0  2FEB               	goto	u147_25
  7384  07F1  0821               	movf	??_convertRawToMilliVolts+1,w
  7385  07F2  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7386  07F3  0820               	movf	??_convertRawToMilliVolts,w
  7387  07F4  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7388  07F5                     i1l2093:
  7389                           
  7390                           ;Controller.c: 51:     return returnValuedV;
  7391  07F5  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7392  07F6  00FD               	movwf	?_convertRawToMilliVolts+1
  7393  07F7  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7394  07F8  00FC               	movwf	?_convertRawToMilliVolts
  7395  07F9                     i1l463:
  7396  07F9  0008               	return
  7397  07FA                     __end_of_convertRawToMilliVolts:
  7398                           
  7399                           	psect	text32
  7400  0D52                     __ptext32:	
  7401 ;; *************** function ___lmul *****************
  7402 ;; Defined at:
  7403 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  multiplier      4    0[COMMON] unsigned long 
  7406 ;;  multiplicand    4    4[COMMON] unsigned long 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  product         4    8[COMMON] unsigned long 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  4    0[COMMON] unsigned long 
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7418 ;;      Params:         8       0       0       0       0       0
  7419 ;;      Locals:         4       0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0
  7421 ;;      Totals:        12       0       0       0       0       0
  7422 ;;Total ram usage:       12 bytes
  7423 ;; Hardware stack levels used: 1
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_runPotScaling
  7428 ;;		_convertRawToMilliVolts
  7429 ;;		_runVoltageModeControl
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433  0D52                     ___lmul:	
  7434                           ;psect for function ___lmul
  7435                           
  7436  0D52                     i1l2045:	
  7437                           ;incstack = 0
  7438                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7439                           
  7440  0D52  3000               	movlw	0
  7441  0D53  00FB               	movwf	___lmul@product+3
  7442  0D54  3000               	movlw	0
  7443  0D55  00FA               	movwf	___lmul@product+2
  7444  0D56  3000               	movlw	0
  7445  0D57  00F9               	movwf	___lmul@product+1
  7446  0D58  3000               	movlw	0
  7447  0D59  00F8               	movwf	___lmul@product
  7448  0D5A                     i1l2047:
  7449  0D5A  1C70               	btfss	___lmul@multiplier,0
  7450  0D5B  2D5D               	goto	u134_21
  7451  0D5C  2D5E               	goto	u134_20
  7452  0D5D                     u134_21:
  7453  0D5D  2D66               	goto	i1l2051
  7454  0D5E                     u134_20:
  7455  0D5E                     i1l2049:
  7456  0D5E  0874               	movf	___lmul@multiplicand,w
  7457  0D5F  07F8               	addwf	___lmul@product,f
  7458  0D60  0875               	movf	___lmul@multiplicand+1,w
  7459  0D61  3DF9               	addwfc	___lmul@product+1,f
  7460  0D62  0876               	movf	___lmul@multiplicand+2,w
  7461  0D63  3DFA               	addwfc	___lmul@product+2,f
  7462  0D64  0877               	movf	___lmul@multiplicand+3,w
  7463  0D65  3DFB               	addwfc	___lmul@product+3,f
  7464  0D66                     i1l2051:
  7465  0D66  3001               	movlw	1
  7466  0D67                     u135_25:
  7467  0D67  35F4               	lslf	___lmul@multiplicand,f
  7468  0D68  0DF5               	rlf	___lmul@multiplicand+1,f
  7469  0D69  0DF6               	rlf	___lmul@multiplicand+2,f
  7470  0D6A  0DF7               	rlf	___lmul@multiplicand+3,f
  7471  0D6B  0B89               	decfsz	9,f
  7472  0D6C  2D67               	goto	u135_25
  7473  0D6D                     i1l2053:
  7474  0D6D  3001               	movlw	1
  7475  0D6E                     u136_25:
  7476  0D6E  36F3               	lsrf	___lmul@multiplier+3,f
  7477  0D6F  0CF2               	rrf	___lmul@multiplier+2,f
  7478  0D70  0CF1               	rrf	___lmul@multiplier+1,f
  7479  0D71  0CF0               	rrf	___lmul@multiplier,f
  7480  0D72  0B89               	decfsz	9,f
  7481  0D73  2D6E               	goto	u136_25
  7482  0D74  0873               	movf	___lmul@multiplier+3,w
  7483  0D75  0472               	iorwf	___lmul@multiplier+2,w
  7484  0D76  0471               	iorwf	___lmul@multiplier+1,w
  7485  0D77  0470               	iorwf	___lmul@multiplier,w
  7486  0D78  1D03               	skipz
  7487  0D79  2D7B               	goto	u137_21
  7488  0D7A  2D7C               	goto	u137_20
  7489  0D7B                     u137_21:
  7490  0D7B  2D5A               	goto	i1l2047
  7491  0D7C                     u137_20:
  7492  0D7C                     i1l2055:
  7493  0D7C  087B               	movf	___lmul@product+3,w
  7494  0D7D  00F3               	movwf	?___lmul+3
  7495  0D7E  087A               	movf	___lmul@product+2,w
  7496  0D7F  00F2               	movwf	?___lmul+2
  7497  0D80  0879               	movf	___lmul@product+1,w
  7498  0D81  00F1               	movwf	?___lmul+1
  7499  0D82  0878               	movf	___lmul@product,w
  7500  0D83  00F0               	movwf	?___lmul
  7501  0D84                     i1l742:
  7502  0D84  0008               	return
  7503  0D85                     __end_of___lmul:
  7504                           
  7505                           	psect	text33
  7506  0C85                     __ptext33:	
  7507 ;; *************** function _abs *****************
  7508 ;; Defined at:
  7509 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  a               2    0[COMMON] int 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  2    0[COMMON] int 
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, status,0
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7523 ;;      Params:         2       0       0       0       0       0
  7524 ;;      Locals:         0       0       0       0       0       0
  7525 ;;      Temps:          2       0       0       0       0       0
  7526 ;;      Totals:         4       0       0       0       0       0
  7527 ;;Total ram usage:        4 bytes
  7528 ;; Hardware stack levels used: 1
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_runVoltageModeControl
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536  0C85                     _abs:	
  7537                           ;psect for function _abs
  7538                           
  7539  0C85                     i1l2097:	
  7540                           ;incstack = 0
  7541                           ; Regs used in _abs: [wreg+status,2+status,0]
  7542                           
  7543  0C85  0871               	movf	abs@a+1,w
  7544  0C86  3A80               	xorlw	128
  7545  0C87  00F2               	movwf	??_abs
  7546  0C88  3080               	movlw	128
  7547  0C89  0272               	subwf	??_abs,w
  7548  0C8A  1D03               	skipz
  7549  0C8B  2C8E               	goto	u148_25
  7550  0C8C  3001               	movlw	1
  7551  0C8D  0270               	subwf	abs@a,w
  7552  0C8E                     u148_25:
  7553  0C8E  1803               	skipnc
  7554  0C8F  2C91               	goto	u148_21
  7555  0C90  2C92               	goto	u148_20
  7556  0C91                     u148_21:
  7557  0C91  2C9E               	goto	i1l1188
  7558  0C92                     u148_20:
  7559  0C92                     i1l2099:
  7560  0C92  0970               	comf	abs@a,w
  7561  0C93  00F2               	movwf	??_abs
  7562  0C94  0971               	comf	abs@a+1,w
  7563  0C95  00F3               	movwf	??_abs+1
  7564  0C96  0AF2               	incf	??_abs,f
  7565  0C97  1903               	skipnz
  7566  0C98  0AF3               	incf	??_abs+1,f
  7567  0C99  0872               	movf	??_abs,w
  7568  0C9A  00F0               	movwf	?_abs
  7569  0C9B  0873               	movf	??_abs+1,w
  7570  0C9C  00F1               	movwf	?_abs+1
  7571  0C9D  2C9E               	goto	i1l1191
  7572  0C9E                     i1l1188:
  7573  0C9E                     i1l1191:
  7574  0C9E  0008               	return
  7575  0C9F                     __end_of_abs:
  7576                           
  7577                           	psect	text34
  7578  0E4B                     __ptext34:	
  7579 ;; *************** function ___omul *****************
  7580 ;; Defined at:
  7581 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7584 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  product         8    1[COMMON] unsigned long long 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  8    0[BANK0 ] unsigned long long 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7596 ;;      Params:         0      16       0       0       0       0
  7597 ;;      Locals:         8       0       0       0       0       0
  7598 ;;      Temps:          1       0       0       0       0       0
  7599 ;;      Totals:         9      16       0       0       0       0
  7600 ;;Total ram usage:       25 bytes
  7601 ;; Hardware stack levels used: 1
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_runVoltageModeControl
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609  0E4B                     ___omul:	
  7610                           ;psect for function ___omul
  7611                           
  7612  0E4B                     i1l2109:	
  7613                           ;incstack = 0
  7614                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7615                           
  7616  0E4B  3071               	movlw	low ___omul@product
  7617  0E4C  0086               	movwf	6
  7618  0E4D  3000               	movlw	high ___omul@product
  7619  0E4E  0087               	movwf	7
  7620  0E4F  3008               	movlw	8
  7621  0E50  00F0               	movwf	??___omul
  7622  0E51  3000               	movlw	0
  7623  0E52                     u149_20:
  7624  0E52  001E               	movwi fsr1++
  7625  0E53  0BF0               	decfsz	??___omul,f
  7626  0E54  2E52               	goto	u149_20
  7627  0E55                     i1l2111:
  7628  0E55  0020               	movlb	0	; select bank0
  7629  0E56  1C20               	btfss	___omul@multiplier,0
  7630  0E57  2E59               	goto	u150_21
  7631  0E58  2E5A               	goto	u150_20
  7632  0E59                     u150_21:
  7633  0E59  2E6A               	goto	i1l2115
  7634  0E5A                     u150_20:
  7635  0E5A                     i1l2113:
  7636  0E5A  0828               	movf	___omul@multiplicand,w
  7637  0E5B  07F1               	addwf	___omul@product,f
  7638  0E5C  0829               	movf	___omul@multiplicand+1,w
  7639  0E5D  3DF2               	addwfc	___omul@product+1,f
  7640  0E5E  082A               	movf	___omul@multiplicand+2,w
  7641  0E5F  3DF3               	addwfc	___omul@product+2,f
  7642  0E60  082B               	movf	___omul@multiplicand+3,w
  7643  0E61  3DF4               	addwfc	___omul@product+3,f
  7644  0E62  082C               	movf	___omul@multiplicand+4,w
  7645  0E63  3DF5               	addwfc	___omul@product+4,f
  7646  0E64  082D               	movf	___omul@multiplicand+5,w
  7647  0E65  3DF6               	addwfc	___omul@product+5,f
  7648  0E66  082E               	movf	___omul@multiplicand+6,w
  7649  0E67  3DF7               	addwfc	___omul@product+6,f
  7650  0E68  082F               	movf	___omul@multiplicand+7,w
  7651  0E69  3DF8               	addwfc	___omul@product+7,f
  7652  0E6A                     i1l2115:
  7653  0E6A  35A8               	lslf	___omul@multiplicand,f
  7654  0E6B  0DA9               	rlf	___omul@multiplicand+1,f
  7655  0E6C  0DAA               	rlf	___omul@multiplicand+2,f
  7656  0E6D  0DAB               	rlf	___omul@multiplicand+3,f
  7657  0E6E  0DAC               	rlf	___omul@multiplicand+4,f
  7658  0E6F  0DAD               	rlf	___omul@multiplicand+5,f
  7659  0E70  0DAE               	rlf	___omul@multiplicand+6,f
  7660  0E71  0DAF               	rlf	___omul@multiplicand+7,f
  7661  0E72                     i1l2117:
  7662  0E72  36A7               	lsrf	___omul@multiplier+7,f
  7663  0E73  0CA6               	rrf	___omul@multiplier+6,f
  7664  0E74  0CA5               	rrf	___omul@multiplier+5,f
  7665  0E75  0CA4               	rrf	___omul@multiplier+4,f
  7666  0E76  0CA3               	rrf	___omul@multiplier+3,f
  7667  0E77  0CA2               	rrf	___omul@multiplier+2,f
  7668  0E78  0CA1               	rrf	___omul@multiplier+1,f
  7669  0E79  0CA0               	rrf	___omul@multiplier,f
  7670  0E7A  0820               	movf	___omul@multiplier,w
  7671  0E7B  0421               	iorwf	___omul@multiplier+1,w
  7672  0E7C  0422               	iorwf	___omul@multiplier+2,w
  7673  0E7D  0423               	iorwf	___omul@multiplier+3,w
  7674  0E7E  0424               	iorwf	___omul@multiplier+4,w
  7675  0E7F  0425               	iorwf	___omul@multiplier+5,w
  7676  0E80  0426               	iorwf	___omul@multiplier+6,w
  7677  0E81  0427               	iorwf	___omul@multiplier+7,w
  7678  0E82  1D03               	skipz
  7679  0E83  2E85               	goto	u151_21
  7680  0E84  2E86               	goto	u151_20
  7681  0E85                     u151_21:
  7682  0E85  2E55               	goto	i1l2111
  7683  0E86                     u151_20:
  7684  0E86                     i1l747:
  7685  0E86  0871               	movf	___omul@product,w
  7686  0E87  00A0               	movwf	?___omul
  7687  0E88  0872               	movf	___omul@product+1,w
  7688  0E89  00A1               	movwf	?___omul+1
  7689  0E8A  0873               	movf	___omul@product+2,w
  7690  0E8B  00A2               	movwf	?___omul+2
  7691  0E8C  0874               	movf	___omul@product+3,w
  7692  0E8D  00A3               	movwf	?___omul+3
  7693  0E8E  0875               	movf	___omul@product+4,w
  7694  0E8F  00A4               	movwf	?___omul+4
  7695  0E90  0876               	movf	___omul@product+5,w
  7696  0E91  00A5               	movwf	?___omul+5
  7697  0E92  0877               	movf	___omul@product+6,w
  7698  0E93  00A6               	movwf	?___omul+6
  7699  0E94  0878               	movf	___omul@product+7,w
  7700  0E95  00A7               	movwf	?___omul+7
  7701  0E96                     i1l748:
  7702  0E96  0008               	return
  7703  0E97                     __end_of___omul:
  7704                           
  7705                           	psect	text35
  7706  0C2A                     __ptext35:	
  7707 ;; *************** function _runCurrentModeControl *****************
  7708 ;; Defined at:
  7709 ;;		line 128 in file "Controller.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;		None
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;  newCurrent      2    0        short 
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      void 
  7716 ;; Registers used:
  7717 ;;		wreg, status,2, status,0, pclath, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7723 ;;      Params:         0       0       0       0       0       0
  7724 ;;      Locals:         0       0       0       0       0       0
  7725 ;;      Temps:          0       0       0       0       0       0
  7726 ;;      Totals:         0       0       0       0       0       0
  7727 ;;Total ram usage:        0 bytes
  7728 ;; Hardware stack levels used: 1
  7729 ;; Hardware stack levels required when called: 2
  7730 ;; This function calls:
  7731 ;;		_convertRawToMilliAmps
  7732 ;; This function is called by:
  7733 ;;		_controlRoutine
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737  0C2A                     _runCurrentModeControl:	
  7738                           ;psect for function _runCurrentModeControl
  7739                           
  7740  0C2A                     i1l2315:	
  7741                           ;incstack = 0
  7742                           ; Regs used in _runCurrentModeControl: [wreg+status,2+status,0+pclath+cstack]
  7743                           
  7744  0C2A  0020               	movlb	0	; select bank0
  7745  0C2B  0860               	movf	_filteredIL+1,w
  7746  0C2C  00F7               	movwf	convertRawToMilliAmps@rawValue+1
  7747  0C2D  085F               	movf	_filteredIL,w
  7748  0C2E  00F6               	movwf	convertRawToMilliAmps@rawValue
  7749  0C2F  318C  246B  318C   	fcall	_convertRawToMilliAmps
  7750  0C32                     i1l482:
  7751  0C32  0008               	return
  7752  0C33                     __end_of_runCurrentModeControl:
  7753                           
  7754                           	psect	text36
  7755  0C6B                     __ptext36:	
  7756 ;; *************** function _convertRawToMilliAmps *****************
  7757 ;; Defined at:
  7758 ;;		line 81 in file "CurrentSensor.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  rawValue        2    6[COMMON] unsigned short 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  returnValuem    2   10[COMMON] short 
  7763 ;;  offsetted       2    8[COMMON] short 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  2    6[COMMON] short 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0, pclath, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7773 ;;      Params:         2       0       0       0       0       0
  7774 ;;      Locals:         4       0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0
  7776 ;;      Totals:         6       0       0       0       0       0
  7777 ;;Total ram usage:        6 bytes
  7778 ;; Hardware stack levels used: 1
  7779 ;; Hardware stack levels required when called: 1
  7780 ;; This function calls:
  7781 ;;		___wmul
  7782 ;; This function is called by:
  7783 ;;		_runCurrentModeControl
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787  0C6B                     _convertRawToMilliAmps:	
  7788                           ;psect for function _convertRawToMilliAmps
  7789                           
  7790  0C6B                     i1l2101:	
  7791                           ;incstack = 0
  7792                           ; Regs used in _convertRawToMilliAmps: [wreg+status,2+status,0+pclath+cstack]
  7793                           
  7794                           
  7795                           ;CurrentSensor.c: 82:     int16_t offsetted = (int16_t)(rawValue - 445);
  7796  0C6B  0876               	movf	convertRawToMilliAmps@rawValue,w
  7797  0C6C  3E43               	addlw	67
  7798  0C6D  00F8               	movwf	convertRawToMilliAmps@offsetted
  7799  0C6E  30FE               	movlw	254
  7800  0C6F  3D77               	addwfc	convertRawToMilliAmps@rawValue+1,w
  7801  0C70  00F9               	movwf	convertRawToMilliAmps@offsetted+1
  7802  0C71                     i1l2103:
  7803                           
  7804                           ;CurrentSensor.c: 83:     int16_t returnValuemA = (int32_t)(offsetted * 2857) >> 0;
  7805  0C71  0879               	movf	convertRawToMilliAmps@offsetted+1,w
  7806  0C72  00F1               	movwf	___wmul@multiplier+1
  7807  0C73  0878               	movf	convertRawToMilliAmps@offsetted,w
  7808  0C74  00F0               	movwf	___wmul@multiplier
  7809  0C75  3029               	movlw	41
  7810  0C76  00F2               	movwf	___wmul@multiplicand
  7811  0C77  300B               	movlw	11
  7812  0C78  00F3               	movwf	___wmul@multiplicand+1
  7813  0C79  318C  24BB  318C   	fcall	___wmul
  7814  0C7C  0871               	movf	?___wmul+1,w
  7815  0C7D  00FB               	movwf	convertRawToMilliAmps@returnValuemA+1
  7816  0C7E  0870               	movf	?___wmul,w
  7817  0C7F  00FA               	movwf	convertRawToMilliAmps@returnValuemA
  7818  0C80                     i1l2105:
  7819                           
  7820                           ;CurrentSensor.c: 84:     return returnValuemA;
  7821  0C80  087B               	movf	convertRawToMilliAmps@returnValuemA+1,w
  7822  0C81  00F7               	movwf	?_convertRawToMilliAmps+1
  7823  0C82  087A               	movf	convertRawToMilliAmps@returnValuemA,w
  7824  0C83  00F6               	movwf	?_convertRawToMilliAmps
  7825  0C84                     i1l552:
  7826  0C84  0008               	return
  7827  0C85                     __end_of_convertRawToMilliAmps:
  7828                           
  7829                           	psect	text37
  7830  0CBB                     __ptext37:	
  7831 ;; *************** function ___wmul *****************
  7832 ;; Defined at:
  7833 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  multiplier      2    0[COMMON] unsigned int 
  7836 ;;  multiplicand    2    2[COMMON] unsigned int 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  product         2    4[COMMON] unsigned int 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  2    0[COMMON] unsigned int 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7848 ;;      Params:         4       0       0       0       0       0
  7849 ;;      Locals:         2       0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0
  7851 ;;      Totals:         6       0       0       0       0       0
  7852 ;;Total ram usage:        6 bytes
  7853 ;; Hardware stack levels used: 1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_runPotScaling
  7858 ;;		_controlRoutine
  7859 ;;		_convertRawToMilliAmps
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863  0CBB                     ___wmul:	
  7864                           ;psect for function ___wmul
  7865                           
  7866  0CBB                     i1l2031:	
  7867                           ;incstack = 0
  7868                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7869                           
  7870  0CBB  01F4               	clrf	___wmul@product
  7871  0CBC  01F5               	clrf	___wmul@product+1
  7872  0CBD                     i1l2033:
  7873  0CBD  1C70               	btfss	___wmul@multiplier,0
  7874  0CBE  2CC0               	goto	u130_21
  7875  0CBF  2CC1               	goto	u130_20
  7876  0CC0                     u130_21:
  7877  0CC0  2CC5               	goto	i1l728
  7878  0CC1                     u130_20:
  7879  0CC1                     i1l2035:
  7880  0CC1  0872               	movf	___wmul@multiplicand,w
  7881  0CC2  07F4               	addwf	___wmul@product,f
  7882  0CC3  0873               	movf	___wmul@multiplicand+1,w
  7883  0CC4  3DF5               	addwfc	___wmul@product+1,f
  7884  0CC5                     i1l728:
  7885  0CC5  3001               	movlw	1
  7886  0CC6                     u131_25:
  7887  0CC6  35F2               	lslf	___wmul@multiplicand,f
  7888  0CC7  0DF3               	rlf	___wmul@multiplicand+1,f
  7889  0CC8  0B89               	decfsz	9,f
  7890  0CC9  2CC6               	goto	u131_25
  7891  0CCA                     i1l2037:
  7892  0CCA  3001               	movlw	1
  7893  0CCB                     u132_25:
  7894  0CCB  36F1               	lsrf	___wmul@multiplier+1,f
  7895  0CCC  0CF0               	rrf	___wmul@multiplier,f
  7896  0CCD  0B89               	decfsz	9,f
  7897  0CCE  2CCB               	goto	u132_25
  7898  0CCF                     i1l2039:
  7899  0CCF  0870               	movf	___wmul@multiplier,w
  7900  0CD0  0471               	iorwf	___wmul@multiplier+1,w
  7901  0CD1  1D03               	btfss	3,2
  7902  0CD2  2CD4               	goto	u133_21
  7903  0CD3  2CD5               	goto	u133_20
  7904  0CD4                     u133_21:
  7905  0CD4  2CBD               	goto	i1l2033
  7906  0CD5                     u133_20:
  7907  0CD5                     i1l2041:
  7908  0CD5  0875               	movf	___wmul@product+1,w
  7909  0CD6  00F1               	movwf	?___wmul+1
  7910  0CD7  0874               	movf	___wmul@product,w
  7911  0CD8  00F0               	movwf	?___wmul
  7912  0CD9                     i1l730:
  7913  0CD9  0008               	return
  7914  0CDA                     __end_of___wmul:
  7915                           
  7916                           	psect	text38
  7917  0EEF                     __ptext38:	
  7918 ;; *************** function ___lldiv *****************
  7919 ;; Defined at:
  7920 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;  divisor         4    6[COMMON] unsigned long 
  7923 ;;  dividend        4   10[COMMON] unsigned long 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  quotient        4    1[BANK0 ] unsigned long 
  7926 ;;  counter         1    5[BANK0 ] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  4    6[COMMON] unsigned long 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7936 ;;      Params:         8       0       0       0       0       0
  7937 ;;      Locals:         0       5       0       0       0       0
  7938 ;;      Temps:          0       1       0       0       0       0
  7939 ;;      Totals:         8       6       0       0       0       0
  7940 ;;Total ram usage:       14 bytes
  7941 ;; Hardware stack levels used: 1
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_runPotScaling
  7946 ;;		_controlRoutine
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950  0EEF                     ___lldiv:	
  7951                           ;psect for function ___lldiv
  7952                           
  7953  0EEF                     i1l2317:	
  7954                           ;incstack = 0
  7955                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7956                           
  7957  0EEF  3000               	movlw	0
  7958  0EF0  0020               	movlb	0	; select bank0
  7959  0EF1  00A4               	movwf	___lldiv@quotient+3
  7960  0EF2  3000               	movlw	0
  7961  0EF3  00A3               	movwf	___lldiv@quotient+2
  7962  0EF4  3000               	movlw	0
  7963  0EF5  00A2               	movwf	___lldiv@quotient+1
  7964  0EF6  3000               	movlw	0
  7965  0EF7  00A1               	movwf	___lldiv@quotient
  7966  0EF8  0879               	movf	___lldiv@divisor+3,w
  7967  0EF9  0478               	iorwf	___lldiv@divisor+2,w
  7968  0EFA  0477               	iorwf	___lldiv@divisor+1,w
  7969  0EFB  0476               	iorwf	___lldiv@divisor,w
  7970  0EFC  1903               	skipnz
  7971  0EFD  2EFF               	goto	u193_21
  7972  0EFE  2F00               	goto	u193_20
  7973  0EFF                     u193_21:
  7974  0EFF  2F41               	goto	i1l2337
  7975  0F00                     u193_20:
  7976  0F00                     i1l2319:
  7977  0F00  01A5               	clrf	___lldiv@counter
  7978  0F01  0AA5               	incf	___lldiv@counter,f
  7979  0F02  2F0E               	goto	i1l2323
  7980  0F03                     i1l2321:
  7981  0F03  3001               	movlw	1
  7982  0F04                     u194_25:
  7983  0F04  35F6               	lslf	___lldiv@divisor,f
  7984  0F05  0DF7               	rlf	___lldiv@divisor+1,f
  7985  0F06  0DF8               	rlf	___lldiv@divisor+2,f
  7986  0F07  0DF9               	rlf	___lldiv@divisor+3,f
  7987  0F08  0B89               	decfsz	9,f
  7988  0F09  2F04               	goto	u194_25
  7989  0F0A  3001               	movlw	1
  7990  0F0B  00A0               	movwf	??___lldiv
  7991  0F0C  0820               	movf	??___lldiv,w
  7992  0F0D  07A5               	addwf	___lldiv@counter,f
  7993  0F0E                     i1l2323:
  7994  0F0E  1FF9               	btfss	___lldiv@divisor+3,7
  7995  0F0F  2F11               	goto	u195_21
  7996  0F10  2F12               	goto	u195_20
  7997  0F11                     u195_21:
  7998  0F11  2F03               	goto	i1l2321
  7999  0F12                     u195_20:
  8000  0F12                     i1l2325:
  8001  0F12  3001               	movlw	1
  8002  0F13                     u196_25:
  8003  0F13  35A1               	lslf	___lldiv@quotient,f
  8004  0F14  0DA2               	rlf	___lldiv@quotient+1,f
  8005  0F15  0DA3               	rlf	___lldiv@quotient+2,f
  8006  0F16  0DA4               	rlf	___lldiv@quotient+3,f
  8007  0F17  0B89               	decfsz	9,f
  8008  0F18  2F13               	goto	u196_25
  8009  0F19                     i1l2327:
  8010  0F19  0879               	movf	___lldiv@divisor+3,w
  8011  0F1A  027D               	subwf	___lldiv@dividend+3,w
  8012  0F1B  1D03               	skipz
  8013  0F1C  2F27               	goto	u197_25
  8014  0F1D  0878               	movf	___lldiv@divisor+2,w
  8015  0F1E  027C               	subwf	___lldiv@dividend+2,w
  8016  0F1F  1D03               	skipz
  8017  0F20  2F27               	goto	u197_25
  8018  0F21  0877               	movf	___lldiv@divisor+1,w
  8019  0F22  027B               	subwf	___lldiv@dividend+1,w
  8020  0F23  1D03               	skipz
  8021  0F24  2F27               	goto	u197_25
  8022  0F25  0876               	movf	___lldiv@divisor,w
  8023  0F26  027A               	subwf	___lldiv@dividend,w
  8024  0F27                     u197_25:
  8025  0F27  1C03               	skipc
  8026  0F28  2F2A               	goto	u197_21
  8027  0F29  2F2B               	goto	u197_20
  8028  0F2A                     u197_21:
  8029  0F2A  2F34               	goto	i1l2333
  8030  0F2B                     u197_20:
  8031  0F2B                     i1l2329:
  8032  0F2B  0876               	movf	___lldiv@divisor,w
  8033  0F2C  02FA               	subwf	___lldiv@dividend,f
  8034  0F2D  0877               	movf	___lldiv@divisor+1,w
  8035  0F2E  3BFB               	subwfb	___lldiv@dividend+1,f
  8036  0F2F  0878               	movf	___lldiv@divisor+2,w
  8037  0F30  3BFC               	subwfb	___lldiv@dividend+2,f
  8038  0F31  0879               	movf	___lldiv@divisor+3,w
  8039  0F32  3BFD               	subwfb	___lldiv@dividend+3,f
  8040  0F33                     i1l2331:
  8041  0F33  1421               	bsf	___lldiv@quotient,0
  8042  0F34                     i1l2333:
  8043  0F34  3001               	movlw	1
  8044  0F35                     u198_25:
  8045  0F35  36F9               	lsrf	___lldiv@divisor+3,f
  8046  0F36  0CF8               	rrf	___lldiv@divisor+2,f
  8047  0F37  0CF7               	rrf	___lldiv@divisor+1,f
  8048  0F38  0CF6               	rrf	___lldiv@divisor,f
  8049  0F39  0B89               	decfsz	9,f
  8050  0F3A  2F35               	goto	u198_25
  8051  0F3B                     i1l2335:
  8052  0F3B  3001               	movlw	1
  8053  0F3C  02A5               	subwf	___lldiv@counter,f
  8054  0F3D  1D03               	btfss	3,2
  8055  0F3E  2F40               	goto	u199_21
  8056  0F3F  2F41               	goto	u199_20
  8057  0F40                     u199_21:
  8058  0F40  2F12               	goto	i1l2325
  8059  0F41                     u199_20:
  8060  0F41                     i1l2337:
  8061  0F41  0824               	movf	___lldiv@quotient+3,w
  8062  0F42  00F9               	movwf	?___lldiv+3
  8063  0F43  0823               	movf	___lldiv@quotient+2,w
  8064  0F44  00F8               	movwf	?___lldiv+2
  8065  0F45  0822               	movf	___lldiv@quotient+1,w
  8066  0F46  00F7               	movwf	?___lldiv+1
  8067  0F47  0821               	movf	___lldiv@quotient,w
  8068  0F48  00F6               	movwf	?___lldiv
  8069  0F49                     i1l764:
  8070  0F49  0008               	return
  8071  0F4A                     __end_of___lldiv:
  8072  007E                     btemp	set	126	;btemp
  8073  007E                     int$flags	set	126
  8074  007E                     wtemp0	set	126
  8075                           
  8076                           	psect	idloc
  8077                           
  8078                           ;Config register IDLOC0 @ 0x8000
  8079                           ;	unspecified, using default values
  8080  8000                     	org	32768
  8081  8000  3FFF               	dw	16383
  8082                           
  8083                           ;Config register IDLOC1 @ 0x8001
  8084                           ;	unspecified, using default values
  8085  8001                     	org	32769
  8086  8001  3FFF               	dw	16383
  8087                           
  8088                           ;Config register IDLOC2 @ 0x8002
  8089                           ;	unspecified, using default values
  8090  8002                     	org	32770
  8091  8002  3FFF               	dw	16383
  8092                           
  8093                           ;Config register IDLOC3 @ 0x8003
  8094                           ;	unspecified, using default values
  8095  8003                     	org	32771
  8096  8003  3FFF               	dw	16383
  8097                           
  8098                           	psect	config
  8099                           
  8100                           ;Config register CONFIG1 @ 0x8007
  8101                           ;	Oscillator Selection
  8102                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8103                           ;	Watchdog Timer Enable
  8104                           ;	WDTE = OFF, WDT disabled
  8105                           ;	Power-up Timer Enable
  8106                           ;	PWRTE = OFF, PWRT disabled
  8107                           ;	MCLR Pin Function Select
  8108                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8109                           ;	Flash Program Memory Code Protection
  8110                           ;	CP = OFF, Program memory code protection is disabled
  8111                           ;	Data Memory Code Protection
  8112                           ;	CPD = OFF, Data memory code protection is disabled
  8113                           ;	Brown-out Reset Enable
  8114                           ;	BOREN = ON, Brown-out Reset enabled
  8115                           ;	Clock Out Enable
  8116                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8117                           ;	Internal/External Switchover
  8118                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8119                           ;	Fail-Safe Clock Monitor Enable
  8120                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8121  8007                     	org	32775
  8122  8007  0FA4               	dw	4004
  8123                           
  8124                           ;Config register CONFIG2 @ 0x8008
  8125                           ;	Flash Memory Self-Write Protection
  8126                           ;	WRT = OFF, Write protection off
  8127                           ;	PLL Enable
  8128                           ;	PLLEN = OFF, 4x PLL disabled
  8129                           ;	Stack Overflow/Underflow Reset Enable
  8130                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8131                           ;	Brown-out Reset Voltage Selection
  8132                           ;	BORV = 0x1, unprogrammed default
  8133                           ;	Low-Voltage Programming Enable
  8134                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8135  8008                     	org	32776
  8136  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         246
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      79
    BANK1            80     13      79
    BANK2            80      0      66
    BANK3            80      0      64
    BANK4            32      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick980Hz in COMMON

    _Tick980Hz->_readFilteredDutyPot
    _Tick980Hz->_readFilteredFreqPot
    _Tick980Hz->_readFilteredVout
    i1_currentTripReset->i1_writeGPIO
    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    _runCurrentModeControl->_convertRawToMilliAmps
    _convertRawToMilliAmps->___wmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick980Hz in BANK0

    _Tick980Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick980Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick980Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick980Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick980Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick980Hz                                            1     1      0   12026
                                             60 BANK0      1     1      0
                     _controlRoutine
                    _currentTripRead
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
            _transToOverCurrentFault
                 i1_currentTripReset
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (5) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    3020
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     503
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     503
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     503
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          12    10      2     321
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      10    10      0    5939
                                             50 BANK0     10    10      0
                            ___lldiv
                             ___wmul
              _runCurrentModeControl
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    2296
                                             16 BANK0     34    34      0
                             ___lmul
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (6) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _runCurrentModeControl                                2     2      0    1301
              _convertRawToMilliAmps
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliAmps                                6     4      2    1300
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1074
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick980Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runCurrentModeControl
       _convertRawToMilliAmps
         ___wmul
     _runVoltageModeControl
       ___lmul
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripRead
     i1_readGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   _transToOverCurrentFault
   i1_currentTripReset
     i1_writeGPIO
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     14E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      42      10       82.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0      20      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     14E      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Aug 07 13:43:48 2023

                ___wmul@multiplicand 0072                                  l210 0C29  
                                l125 0DB7                                  l144 0555  
                                l323 05CB                                  l245 0C0D  
                                l181 0CBA                                  l254 06A2  
                                l343 0E4A                                  l249 0664  
                                l337 0702                                  l453 0C5C  
                                l527 0CF9                                  l377 0C44  
                                l572 0C21                                  l549 0C6A  
                                l575 0C1A                                  l569 0C07  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C85                                  wreg 0009  
                __end_ofi1_writeGPIO 0762                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00E3                           i1_readGPIO 0DBA  
                               ?_abs 0070                                 l2201 064F  
                               l2211 0669                                 l2203 0655  
                               l2213 066E                                 l2205 065B  
                               l2061 06A6                                 l2215 0686  
                               l2207 0660                                 l2071 06B9  
                               l2063 06AC                                 l2217 068B  
                               l2209 0662                                 l2081 06E3  
                               l2073 06BE                                 l2065 06B1  
                               l2161 0C63                                 l2171 0567  
                               l2163 0558                                 l2083 06E8  
                               l2075 06C3                                 l2067 06B4  
                               l2059 06A5                                 l2181 058F  
                               l2173 056B                                 l2165 0559  
                               l2085 06F5                                 l2077 06D0  
                               l2069 06B8                                 l2191 063F  
                               l2183 059C                                 l2175 056C  
                               l2167 055F                                 l2079 06DE  
                               l2159 0C5D                                 l2193 0642  
                               l2185 05A1                                 l2177 0571  
                               l2169 0564                                 l2601 04EA  
                               l2195 0648                                 l2187 05A6  
                               l2179 0576                                 l2611 0502  
                               l2603 04EB                                 l2197 064C  
                               l2189 05BF                                 l2701 0E35  
                               l2621 0513                                 l2613 0506  
                               l2605 04F4                                 l2199 064D  
                               l2703 0E3B                                 l2711 0E49  
                               l2623 051C                                 l2615 0507  
                               l2607 04F8                                 l2631 052A  
                               l2705 0E47                                 l2625 0520  
                               l2617 0510                                 l2609 04F9  
                               l2561 0493                                 l2641 0CA2  
                               l2627 0521                                 l2619 0512  
                               l2571 04A4                                 l2563 0494  
                               l2651 0CAB                                 l2643 0CA4  
                               l2715 0C1B                                 l2581 04BC  
                               l2573 04A5                                 l2565 0496  
                               l2661 0CB5                                 l2653 0CAE  
                               l2645 0CA6                                 l2717 0C14  
                               l2671 0C3C                                 l2591 04CF  
                               l2583 04C0                                 l2575 04AE  
                               l2567 0497                                 l2655 0CB0  
                               l2647 0CA8                                 l2639 0C9F  
                               l2663 0C22                                 l2719 0C04  
                               l2673 0C51                                 l2681 0E0F  
                               l2593 04D8                                 l2585 04C1  
                               l2577 04B2                                 l2569 04A0  
                               l2657 0CB2                                 l2649 0CAA  
                               l2665 0C27                                 l2667 0C08  
                               l2691 0E22                                 l2683 0E12  
                               l2675 0E03                                 l2595 04DC  
                               l2587 04CA                                 l2579 04B3  
                               l2659 0CB3                                 l2771 0D85  
                               l2669 0CDA                                 l2693 0E2E  
                               l2685 0E16                                 l2677 0E04  
                               l2597 04DD                                 l2589 04CE  
                               l2781 0D95                                 l2773 0D89  
                               l2687 0E17                                 l2679 0E0A  
                               l2599 04E6                                 l2791 0DA7  
                               l2783 0D98                                 l2775 0D8C  
                               l2689 0E1C                                 l2857 0532  
                               l2793 0DB0                                 l2785 0D9B  
                               l2777 0D8F                                 l2699 0E30  
                               l2787 0DA1                                 l2779 0D92  
                               l2797 0DB4                                 l2789 0DA7  
                               STR_1 07FA                                 u1400 06C3  
                               u1401 06C2                                 _LATA 010C  
                               u1430 06E3                                 u1414 06C8  
                               _LATB 010D                                 u1431 06E2  
                               u1415 06C7                                 u1440 06E8  
                               u1424 06D5                                 u2400 0E1C  
                               u1441 06E7                                 u1425 06D4  
                               u2401 0E1B                                 u1700 065B  
                               u1604 057B                                 u1380 06AC  
                               u2420 0E35                                 u1701 065A  
                               u1605 057A                                 u1381 06AB  
                               u2421 0E34                                 u1710 0669  
                               u1630 05A1                                 u1614 0586  
                               u1454 06ED                                 u1390 06BE  
                               u2414 0E27                                 u1711 0668  
                               u1631 05A0                                 u1615 0585  
                               u1455 06EC                                 u1391 06BD  
                               u2415 0E26                                 u1720 066E  
                               u1640 05A6                                 u1624 0594  
                               u1464 06FA                                 u1721 066D  
                               u1641 05A5                                 u1625 0593  
                               u1465 06F9                                 u1570 055F  
                               u2434 0E40                                 u1571 055E  
                               u2435 0E3F                                 u1580 0571  
                               u1581 0570                                 u1750 068B  
                               u1734 0673                                 u1654 05AB  
                               u1590 0576                                 u2390 0E0A  
                               u2550 0DB0                                 u1751 068A  
                               u1735 0672                                 u1655 05AA  
                               u1591 0575                                 u2391 0E09  
                               u2551 0DAF                                 u1744 067E  
                               u1680 0648                                 u1664 05B6  
                               u1745 067D                                 u1681 0647  
                               u1665 05B5                                 u1690 0655  
                               u1674 05C4                                 u1691 0654  
                               u1675 05C3                                 u1764 0690  
                               u1765 068F                                 u1774 069B  
                               u1775 069A            _transToVoltageModeControl 0C1B  
                    _filteredFreqPot 00C0                      _filteredDutyPot 0160  
                               abs@a 0070                                 _main 0D85  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               fsr1l 0006                                 btemp 007E  
                     ?_runPotScaling 0070        convertRawToMilliAmps@rawValue 0076  
                               start 00A6            ??_setupInternalOscillator 00E2  
                              ??_abs 0072                                ?_main 00EB  
                    __end_of___lldiv 0F4A                                i1l115 00A4  
                              i1l270 063C                                i1l262 060F  
                              i1l343 0E00                                i1l263 0611  
                              i1l184 0D24                                i1l257 05DB  
                              i1l337 0761                                i1l258 05EE  
                              i1l532 0D51                                i1l460 07BC  
                              i1l463 07F9                                i1l471 03B1  
                              i1l391 0FFF                                i1l552 0C84  
                              i1l384 0FA4                                i1l730 0CD9  
                              i1l482 0C32                                i1l546 0EEE  
                              i1l468 03A3                                i1l396 0481  
                              i1l549 0C50                                i1l742 0D84  
                              i1l398 0490                                i1l479 02B7  
                              i1l728 0CC5                                i1l578 0C3B  
                              i1l747 0E86                                i1l764 0F49  
                              i1l748 0E96                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078       convertRawToMilliAmps@offsetted 0078  
               readFilteredFreqPot@i 0029             readFilteredDutyPot@i_764 0028  
                              status 0003                                wtemp0 007E  
             initialiseGPIO@portType 00E5                  _initialiseADCModule 0C08  
               readFilteredDutyPot@i 0029           initialiseADCPin@gpioNumber 00E7  
                    __initialization 00A8                         __end_of_main 0DBA  
                  ?_initialiseADCPin 0070                          i1_writeGPIO 0703  
                             ??_main 00EF                   ??_initialiseADCPin 00E2  
           __end_of_readFilteredVout 07BD                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00E8      __end_of_setupInternalOscillator 0556  
setupInternalOscillator@selectedFreq 00E4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2101 0C6B  
                             i1l2031 0CBB                               i1l2103 0C71  
                             i1l2111 0E55                               i1l2041 0CD5  
                             i1l2033 0CBD                               i1l2105 0C80  
                             i1l2113 0E5A                               i1l2121 0DBC  
                             i1l2035 0CC1                               i1l2115 0E6A  
                             i1l2051 0D66                               i1l2131 0DCF  
                             i1l2123 0DC2                               i1l2037 0CCA  
                             i1l2117 0E72                               i1l2109 0E4B  
                             i1l2053 0D6D                               i1l2045 0D52  
                             i1l2133 0DD4                               i1l2125 0DC7  
                             i1l2301 01DB                               i1l2221 05CF  
                             i1l2039 0CCF                               i1l1191 0C9E  
                             i1l2055 0D7C                               i1l2047 0D5A  
                             i1l2135 0DD9                               i1l2143 0DE7  
                             i1l2127 0DCA                               i1l2119 0DBB  
                             i1l2311 0291                               i1l2303 01F9  
                             i1l2231 05EC                               i1l2223 05D5  
                             u200_20 070B                               i1l2321 0F03  
                             i1l2049 0D5E                               i1l2145 0DEC  
                             i1l2137 0DE5                               i1l2129 0DCE  
                             i1l2313 02B3                               i1l2305 020A  
                             i1l2401 02FA                               i1l2233 05F3  
                             i1l2225 05D9                               u200_21 070A  
                             i1l2331 0F33                               i1l2323 0F0E  
                             i1l2315 0C2A                               i1l2091 07E1  
                             i1l2147 0DF1                               i1l2155 0DFF  
                             i1l2307 023C                               i1l2411 0368  
                             i1l2403 0300                               i1l2235 05F5  
                             i1l2227 05E1                               i1l2219 05CD  
                             i1l1188 0C9E                               i1l2333 0F34  
                             i1l2325 0F12                               i1l2317 0EEF  
                             i1l2093 07F5                               i1l2149 0DFD  
                             i1l2309 0260                               i1l2413 0395  
                             i1l2405 0303                               i1l2261 0625  
                             i1l2245 0605                               i1l2237 05F9  
                             i1l2229 05E7                               i1l2421 0E97  
                             i1l2341 0704                               i1l2335 0F3B  
                             i1l2327 0F19                               i1l2319 0F00  
                             i1l2087 07BD                               i1l2415 039F  
                             i1l2407 0308                               i1l2271 062B  
                             i1l2263 0629                               i1l2255 0616  
                             i1l2247 0609                               i1l2239 0604  
                             i1l2511 0F6D                               i1l2503 0F4C  
                             i1l2431 0EAA                               i1l2351 0717  
                             i1l2343 0705                               u201_20 071D  
                             i1l2329 0F2B                               i1l2337 0F41  
                             i1l2097 0C85                               i1l2089 07C4  
                             i1l2417 03AD                               i1l2409 033B  
                             i1l2273 062F                               i1l2265 062A  
                             i1l2257 061A                               i1l2249 0615  
                             i1l2521 0F87                               i1l2513 0F76  
                             i1l2505 0F5A                               i1l2441 0EC1  
                             i1l2433 0EB0                               i1l2361 073D  
                             u201_21 071C                               i1l2353 0718  
                             i1l2345 070B                               i1l2099 0C92  
                             i1l2291 013B                               i1l2283 00D4  
                             i1l2371 0D43                               i1l2275 0635  
                             i1l2259 0620                               i1l2523 0F8B  
                             i1l2507 0F5E                               i1l2443 0ED1  
                             i1l2435 0EC0                               i1l2427 0E98  
                             i1l2451 0762                               i1l2363 0742  
                             i1l2355 071D                               i1l2347 0710  
                             i1l2293 014A                               i1l2285 00EA  
                             i1l2373 0D45                               i1l2525 0F91  
                             i1l2509 0F64                               i1l2541 0FBF  
                             i1l2445 0ED5                               i1l2429 0EA6  
                             i1l2461 0776                               i1l2365 0747  
                             i1l2357 0722                               i1l2349 0713  
                             i1l2295 01A5                               i1l2287 00F9  
                             i1l2375 0D4A                               i1l2279 063A  
                             i1l2519 0F77                               i1l2551 0FD2  
                             i1l2543 0FC8                               i1l2535 0FA7  
                             i1l2447 0EDB                               i1l2463 077C  
                             i1l2391 0D08                               i1l2383 0C33  
                             i1l2367 0754                               i1l2359 072F  
                             u130_20 0CC1                               u210_20 0D30  
                             u202_20 0722                               u130_21 0CC0  
                             i1l2297 01BF                               i1l2289 0107  
                             i1l2393 02B8                               i1l2377 0D4F  
                             i1l2369 0D25                               i1l2553 0FE2  
                             i1l2545 0FD1                               i1l2537 0FB5  
                             i1l2529 0FA5                               i1l2473 078F  
                             i1l2465 0785                               i1l2457 0764  
                             i1l2385 0C37                               u202_21 0721  
                             i1l2721 0C45                               i1l2299 01D0  
                             i1l2395 02BF                               i1l2379 0D50  
                             i1l2555 0FE6                               i1l2539 0FB9  
                             i1l2475 079F                               i1l2467 078E  
                             i1l2459 0772                               i1l2491 047D  
                             i1l2483 03B2                               i1l2387 0CFA  
                             i1l2723 0C4A                               i1l2731 0023  
                             i1l2397 02C2                               i1l2557 0FEC  
                             i1l2477 07A3                               i1l2493 048B  
                             i1l2485 03B8                               i1l2389 0CFD  
                             i1l2741 0041                               i1l2733 0027  
                             i1l2725 0006                               i1l2399 02C7  
                             i1l2479 07A9                               i1l2495 048F  
                             i1l2487 03C2                               i1l2751 005D  
                             i1l2743 0044                               i1l2735 002D  
                             i1l2727 0014                               u211_20 0D3E  
                             u211_21 0D3C                               i1l2497 0F4A  
                             i1l2489 0473                               i1l2761 0083  
                             i1l2753 0065                               i1l2745 0049  
                             i1l2737 002F                               i1l2729 001F  
                             i1l2763 008E                               i1l2755 006A  
                             i1l2747 004F                               i1l2739 003B  
                             u203_24 0727                               u131_25 0CC6  
                             u203_25 0726                               i1l2765 0093  
                             i1l2757 006D                               i1l2749 0055  
                             i1l2759 0073                               i1l2767 0098  
                             u220_20 03AD                               u212_20 0D3F  
                             u220_21 03AC                               i1l2769 00A3  
                             u204_24 0734                               u132_25 0CCB  
                             u220_25 03A9                               u204_25 0733  
                             u133_20 0CD5                               u213_20 0D4A  
                             u221_20 0EB0                               u205_20 0742  
                             u133_21 0CD4                               u213_21 0D49  
                             u221_21 0EAF                               u205_21 0741  
                             u150_20 0E5A                               u134_20 0D5E  
                             u214_20 0D4F                               u222_20 0EDB  
                             u230_20 0413                               u206_20 0747  
                             u150_21 0E59                               u134_21 0D5D  
                             u214_21 0D4E                               u222_21 0EDA  
                             u206_21 0746                               u230_25 040F  
                             u151_20 0E86                               u223_20 0EE8  
                             u231_20 047D                               u215_20 0D22  
                             u151_21 0E85                               u231_21 047C  
                             u215_21 0D1F                               u207_24 074C  
                             u135_25 0D67                               u223_25 0EE4  
                             u231_25 0479                               u207_25 074B  
                             u152_20 0DC2                               u224_20 077C  
                             u232_20 048B                               u152_21 0DC1  
                             u224_21 077B                               u232_21 048A  
                             u216_24 0D24                               u208_24 0759  
                             u136_25 0D6E                               u232_25 0487  
                             u208_25 0758                               u137_20 0D7C  
                             u153_20 0DD4                               u217_20 02BF  
                             u209_20 0D2F                               u233_20 0F64  
                             u225_20 07A9                               u137_21 0D7B  
                             u153_21 0DD3                               u217_21 02BE  
                             u209_21 0D2D                               u233_21 0F63  
                             u225_21 07A8                               u218_20 0300  
                             u234_20 0F91                               u226_20 07B6  
                             u250_20 0073                               u218_21 02FF  
                             u234_21 0F90                               u250_21 0072  
                             u154_24 0DDE                               u154_25 0DDD  
                             u226_25 07B2                               u147_20 07EF  
                             u155_20 0DEC                               u219_20 039F  
                             u235_20 0F9E                               u227_20 03B8  
                             u251_20 008A                               u155_21 0DEB  
                             u219_21 039E                               u227_21 03B7  
                             u251_21 0088                               u147_25 07EB  
                             u219_25 039B                               u235_25 0F9A  
                             u148_20 0C92                               u180_20 05E7  
                             u236_20 0FBF                               u228_20 03C2  
                             u252_20 008B                               u244_20 0014  
                             u148_21 0C91                               u180_21 05E6  
                             u236_21 0FBE                               u228_21 03C1  
                             u244_21 0013                               u156_24 0DF6  
                             u148_25 0C8E                               u156_25 0DF5  
                             u149_20 0E52                               u181_20 05F3  
                             u237_20 0FEC                               u229_20 03E4  
                             u253_20 009F                               u245_20 001F  
                             u181_21 05F2                               u237_21 0FEB  
                             u253_21 009D                               u245_21 001E  
                             u229_25 03E0                               u190_20 01F9  
                             u238_20 0FF9                               u254_20 00A0  
                             u246_20 002D                               u190_21 01F8  
                             u246_21 002C                               u182_25 05FC  
                             u238_25 0FF5                               u191_20 022A  
                             u183_20 060F                               u247_20 0041  
                             u183_21 060E                               u247_21 0040  
                             u191_25 0221                               u192_20 027F  
                             u184_20 0615                               u248_20 004F  
                             u184_21 0614                               u248_21 004E  
                             u192_25 0276                               u193_20 0F00  
                             u185_20 0620                               u249_20 006A  
                             u193_21 0EFF                               u185_21 061F  
                             u249_21 0069                               u186_20 0635  
                             u178_20 05D5                               u186_21 0634  
                             u178_21 05D4                               u194_25 0F04  
                             u195_20 0F12                               u187_20 00EA  
                             u179_20 05E1                               u195_21 0F11  
                             u187_21 00E9                               u179_21 05E0  
                             u188_20 01BF                               u188_21 01BE  
                    ??_runPotScaling 0026                               u196_25 0F13  
                             u197_20 0F2B                               u189_20 01DB  
                             u197_21 0F2A                               u189_21 01DA  
                             u197_25 0F27                               u198_25 0F35  
                             u199_20 0F41                               u199_21 0F40  
            initialiseGPIO@direction 00E2                     readGPIO@portType 00E9  
                readADCRaw@gpioValid 0077                               ___lmul 0D52  
                             ___omul 0E4B                               ___wmul 0CBB  
                          ??___lldiv 0020                     __end_of_readGPIO 0E4B  
                     _controlRoutine 02B8                               _tripIL 0069  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00E2             _initialisePotentiometers 0C3C  
         initialiseADCPin@portNumber 00E6                     __end_of_setupPWM 0CBB  
                    _currentTripRead 0D25           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00D0              ??_runCurrentModeControl 007C  
             __end_of_controlRoutine 03B2                       __pcstackCOMMON 0070  
          initialiseADCPin@gpioValid 00E4                i1writeGPIO@gpioNumber 0074  
              _convertRawToMilliAmps 0C6B                        _currentILFIFO 0120  
                     _OPTION_REGbits 0095                    __end_of_Tick980Hz 00A6  
              _runVoltageModeControl 00D4                           __pbssBANK0 005D  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pmaintext 0D85                      ?_controlRoutine 0070  
                            ?___lmul 0070                              ?___omul 0020  
                            ?___wmul 0070    __end_of_transToVoltageModeControl 0C22  
           ??_convertRawToMilliVolts 0020                           __pintentry 0004  
                            _CCP1CON 0293                  ___omul@multiplicand 0028  
                     ___lmul@product 0078              __end_of_currentTripRead 0D52  
        __end_of_setPWMDutyandPeriod 0D25     __end_of_initialiseCurrentSensors 0CFA  
         __end_ofi1_currentTripReset 0C51             initialiseADCPin@portType 00E5  
            _transToOverCurrentFault 0C33                   i1readGPIO@portType 0077  
              readFilteredVout@i_861 0028                i1writeGPIO@portNumber 0075  
                         _filteredIL 005F                            ?_readGPIO 0070  
                         _readADCRaw 05CC                  _readFilteredFreqPot 0FA5  
               i1readGPIO@gpioNumber 0078                  _readFilteredDutyPot 0F4A  
 convertRawToMilliAmps@returnValuemA 007A                            ?_setupPWM 0070  
               readADCRaw@gpioNumber 007B             initialiseGPIO@gpioNumber 00E6  
                            ___lldiv 0EEF               ?_convertRawToMilliAmps 0076  
                       ?i1_writeGPIO 0070                 ?_readFilteredFreqPot 007C  
                            __ptext1 0C1B                              __ptext2 0C04  
                            __ptext3 0C14                              __ptext4 0C22  
                            __ptext5 0C9F                              __ptext6 0491  
                            __ptext7 0E01                              __ptext8 0C3C  
                            __ptext9 0CDA                 ?_readFilteredDutyPot 007C  
       __end_of_initialiseController 0C5D                            _T2CONbits 001C  
                  ?_readFilteredVout 007C                              _setDuty 0063  
              i1writeGPIO@writeValue 0070               ?_runVoltageModeControl 0070  
                            _tripIDS 006A                   ??_readFilteredVout 0020  
                       ??i1_readGPIO 0070                              clrloop0 0C0F  
               end_of_initialization 00D0      convertRawToMilliVolts@offsetted 0029  
                         ??_readGPIO 00E2                       ___omul@product 0071  
           ?_setupInternalOscillator 0070                      ___lldiv@divisor 0076  
                    ___lldiv@counter 0025                     _currentTripCount 006B  
                         ??_setupPWM 00E8                     _currentTripReset 0C5D  
         ??_initialisePotentiometers 00E8                           _prevPeriod 006D  
                  writeGPIO@portType 00E5                       _readFilteredIL 0E97  
                 __end_ofi1_readGPIO 0E01                ??_readFilteredFreqPot 0020  
              ??_readFilteredDutyPot 0020                 i1readGPIO@portNumber 0076  
                   ?_currentTripRead 0070                    __end_of_writeGPIO 0703  
          ??_transToOverCurrentFault 0070             initialiseGPIO@portNumber 00E7  
                       _filteredVout 005D          ??_transToCurrentModeControl 00E2  
                        ?_readADCRaw 0070                    _transToPotControl 0C04  
                        _CCP1CONbits 0293                        readGPIO@readA 00E4  
                      readGPIO@readB 00E6                __end_of_runPotScaling 0491  
                 ?_transToPotControl 0070            ?_initialiseCurrentSensors 0070  
      __end_of_runCurrentModeControl 0C33                 _voltageModeVariables 00C6  
             __end_of_readFilteredIL 0EEF                  ??_transToPotControl 00E2  
                     __end_of___lmul 0D85          __end_of_initialiseADCModule 0C0E  
                     __end_of___omul 0E97                controlRoutine@maxDuty 0058  
                     __end_of___wmul 0CDA                controlRoutine@minDuty 005A  
                     _clockFrequency 00BC                  start_initialization 00A8  
       __end_of_setupTimer0Interrupt 0C2A                       _currentIDSFIFO 0140  
                        __end_of_abs 0C9F                            _Tick980Hz 0004  
             _convertRawToMilliVolts 07BD            __end_of_transToPotControl 0C08  
   convertRawToMilliVolts@vsenseMult 0025                     ??_controlRoutine 0052  
                  ___omul@multiplier 0020      __end_of_transToOverCurrentFault 0C3C  
               _initialiseController 0C51                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0C14                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00E2  
                         ?_Tick980Hz 0070                     _initialiseADCPin 063D  
                       _currentState 006C                   i1_currentTripReset 0C45  
                 readGPIO@gpioNumber 00EA                ?_initialiseController 0070  
                     _initialiseGPIO 0556              ??_convertRawToMilliAmps 0078  
                    i1readGPIO@readA 0072                      i1readGPIO@readB 0074  
   __end_of_initialisePotentiometers 0C45                  ?i1_currentTripReset 0070  
                           ?___lldiv 0076           ?_transToVoltageModeControl 0070  
    runVoltageModeControl@newVoltage 0050        runVoltageModeControl@propMult 0048  
            ??_runVoltageModeControl 0030                      readADCRaw@i_661 0079  
                    readADCRaw@i_663 007A                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0C6B      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 05CC  
                          clear_ram0 0C0E                            _setPeriod 006E  
                           _PIE1bits 0091         setPWMDutyandPeriod@dutyCycle 0070  
               _setupTimer0Interrupt 0C22    runVoltageModeControl@integralMult 0040  
                _currentTripRead$936 007A                          _filteredIDS 00C2  
                         _ADCON0bits 009D                    ___wmul@multiplier 0070  
                 readGPIO@portNumber 00E8                          _freqPotFIFO 01A0  
                          _writeGPIO 06A3                          ??_Tick980Hz 005C  
                  ___lmul@multiplier 0070                         ??_readADCRaw 0072  
             ??_initialiseController 00E8                      ?_initialiseGPIO 00E2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
               _currentModeVariables 00A0                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 1000          __end_of_readFilteredDutyPot 0FA5  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
                writeGPIO@gpioNumber 00E6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 063D             readFilteredFreqPot@i_768 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00E2  
                           __ptext10 0C5D                             __ptext11 06A3  
                           __ptext20 0CFA                             __ptext12 0C51  
                           __ptext21 03B2                             __ptext13 0556  
                           __ptext30 0DBA                             __ptext22 0762  
                           __ptext14 063D                             __ptext31 07BD  
                           __ptext23 0E97                             __ptext15 0C08  
                           __ptext32 0D52                             __ptext24 0FA5  
                           __ptext33 0C85                             __ptext25 0F4A  
                           __ptext17 0C45                             __ptext34 0E4B  
                           __ptext26 05CC                             __ptext18 0703  
                           __ptext35 0C2A                             __ptext27 0D25  
                           __ptext19 0C33                             __ptext36 0C6B  
                           __ptext28 02B8                             __ptext37 0CBB  
                           __ptext29 00D4                             __ptext38 0EEF  
          ?_initialisePotentiometers 0070                          _dutyPotFIFO 0220  
                i1writeGPIO@portType 0073           readFilteredIL@sumOfSamples 0076  
                           _readGPIO 0E01                             _latestIL 0061  
                   ??_readFilteredIL 0072                        _timerSlotHalf 0067  
                       _PSTR1CONbits 0296                             _prevDuty 00C4  
                           _setupPWM 0C9F                _runCurrentModeControl 0C2A  
                           int$flags 007E                             _slotTest 0065  
           __end_of_initialiseADCPin 06A3                             main@argc 00EB  
           ?_transToOverCurrentFault 0070                             main@argv 00ED  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                   _timerSlotQuarter 0066       __end_of_convertRawToMilliVolts 07FA  
                         _INTCONbits 000B    __end_of_transToCurrentModeControl 0C1B  
                writeGPIO@portNumber 00E7                             intlevel1 0000  
           _initialiseCurrentSensors 0CDA                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 0762               ??_setupTimer0Interrupt 00E2  
                         _OSCCONbits 0099                          _potSetCount 0068  
                _setPWMDutyandPeriod 0CFA        __end_of_convertRawToMilliAmps 0C85  
            _setupInternalOscillator 0491          ??_transToVoltageModeControl 00E2  
                      ??i1_writeGPIO 0071                        __pstringtext1 07FA  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 02B8  
                writeGPIO@writeValue 00E2                          ??_writeGPIO 00E3  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00E8                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 03B2  
               readGPIO@returnValueA 00E5                 readGPIO@returnValueB 00E7  
                readFilteredIL@i_944 007A               ?_runCurrentModeControl 0070  
                    readFilteredIL@i 007B  
