

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Aug 08 11:28:46 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC16F1827 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0097                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  0111                     	;# 
   144  0112                     	;# 
   145  0113                     	;# 
   146  0114                     	;# 
   147  0115                     	;# 
   148  0116                     	;# 
   149  0117                     	;# 
   150  0118                     	;# 
   151  0119                     	;# 
   152  011A                     	;# 
   153  011B                     	;# 
   154  011D                     	;# 
   155  011E                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  019F                     	;# 
   178  020C                     	;# 
   179  020D                     	;# 
   180  0211                     	;# 
   181  0211                     	;# 
   182  0212                     	;# 
   183  0212                     	;# 
   184  0213                     	;# 
   185  0213                     	;# 
   186  0214                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0216                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0217                     	;# 
   195  0219                     	;# 
   196  021A                     	;# 
   197  021B                     	;# 
   198  021C                     	;# 
   199  021D                     	;# 
   200  021E                     	;# 
   201  021F                     	;# 
   202  0291                     	;# 
   203  0291                     	;# 
   204  0292                     	;# 
   205  0293                     	;# 
   206  0294                     	;# 
   207  0295                     	;# 
   208  0295                     	;# 
   209  0296                     	;# 
   210  0298                     	;# 
   211  0298                     	;# 
   212  0299                     	;# 
   213  029A                     	;# 
   214  029B                     	;# 
   215  029C                     	;# 
   216  029C                     	;# 
   217  029D                     	;# 
   218  029E                     	;# 
   219  029E                     	;# 
   220  0311                     	;# 
   221  0311                     	;# 
   222  0312                     	;# 
   223  0313                     	;# 
   224  0318                     	;# 
   225  0318                     	;# 
   226  0319                     	;# 
   227  031A                     	;# 
   228  0394                     	;# 
   229  0395                     	;# 
   230  0396                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0415                     	;# 
   237  0416                     	;# 
   238  0417                     	;# 
   239  041C                     	;# 
   240  041D                     	;# 
   241  041E                     	;# 
   242  0FE4                     	;# 
   243  0FE5                     	;# 
   244  0FE6                     	;# 
   245  0FE7                     	;# 
   246  0FE8                     	;# 
   247  0FE9                     	;# 
   248  0FEA                     	;# 
   249  0FEB                     	;# 
   250  0FED                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0014                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001C                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  0091                     	;# 
   285  0092                     	;# 
   286  0093                     	;# 
   287  0094                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  0111                     	;# 
   302  0112                     	;# 
   303  0113                     	;# 
   304  0114                     	;# 
   305  0115                     	;# 
   306  0116                     	;# 
   307  0117                     	;# 
   308  0118                     	;# 
   309  0119                     	;# 
   310  011A                     	;# 
   311  011B                     	;# 
   312  011D                     	;# 
   313  011E                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020C                     	;# 
   337  020D                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0219                     	;# 
   354  021A                     	;# 
   355  021B                     	;# 
   356  021C                     	;# 
   357  021D                     	;# 
   358  021E                     	;# 
   359  021F                     	;# 
   360  0291                     	;# 
   361  0291                     	;# 
   362  0292                     	;# 
   363  0293                     	;# 
   364  0294                     	;# 
   365  0295                     	;# 
   366  0295                     	;# 
   367  0296                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  029B                     	;# 
   373  029C                     	;# 
   374  029C                     	;# 
   375  029D                     	;# 
   376  029E                     	;# 
   377  029E                     	;# 
   378  0311                     	;# 
   379  0311                     	;# 
   380  0312                     	;# 
   381  0313                     	;# 
   382  0318                     	;# 
   383  0318                     	;# 
   384  0319                     	;# 
   385  031A                     	;# 
   386  0394                     	;# 
   387  0395                     	;# 
   388  0396                     	;# 
   389  039A                     	;# 
   390  039C                     	;# 
   391  039D                     	;# 
   392  039E                     	;# 
   393  039F                     	;# 
   394  0415                     	;# 
   395  0416                     	;# 
   396  0417                     	;# 
   397  041C                     	;# 
   398  041D                     	;# 
   399  041E                     	;# 
   400  0FE4                     	;# 
   401  0FE5                     	;# 
   402  0FE6                     	;# 
   403  0FE7                     	;# 
   404  0FE8                     	;# 
   405  0FE9                     	;# 
   406  0FEA                     	;# 
   407  0FEB                     	;# 
   408  0FED                     	;# 
   409  0FEE                     	;# 
   410  0FEF                     	;# 
   411  0000                     	;# 
   412  0001                     	;# 
   413  0002                     	;# 
   414  0003                     	;# 
   415  0004                     	;# 
   416  0005                     	;# 
   417  0006                     	;# 
   418  0007                     	;# 
   419  0008                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000D                     	;# 
   425  0011                     	;# 
   426  0012                     	;# 
   427  0013                     	;# 
   428  0014                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0094                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  0111                     	;# 
   460  0112                     	;# 
   461  0113                     	;# 
   462  0114                     	;# 
   463  0115                     	;# 
   464  0116                     	;# 
   465  0117                     	;# 
   466  0118                     	;# 
   467  0119                     	;# 
   468  011A                     	;# 
   469  011B                     	;# 
   470  011D                     	;# 
   471  011E                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  0191                     	;# 
   475  0191                     	;# 
   476  0192                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0199                     	;# 
   484  019A                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019C                     	;# 
   491  019D                     	;# 
   492  019E                     	;# 
   493  019F                     	;# 
   494  020C                     	;# 
   495  020D                     	;# 
   496  0211                     	;# 
   497  0211                     	;# 
   498  0212                     	;# 
   499  0212                     	;# 
   500  0213                     	;# 
   501  0213                     	;# 
   502  0214                     	;# 
   503  0214                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0216                     	;# 
   508  0216                     	;# 
   509  0217                     	;# 
   510  0217                     	;# 
   511  0219                     	;# 
   512  021A                     	;# 
   513  021B                     	;# 
   514  021C                     	;# 
   515  021D                     	;# 
   516  021E                     	;# 
   517  021F                     	;# 
   518  0291                     	;# 
   519  0291                     	;# 
   520  0292                     	;# 
   521  0293                     	;# 
   522  0294                     	;# 
   523  0295                     	;# 
   524  0295                     	;# 
   525  0296                     	;# 
   526  0298                     	;# 
   527  0298                     	;# 
   528  0299                     	;# 
   529  029A                     	;# 
   530  029B                     	;# 
   531  029C                     	;# 
   532  029C                     	;# 
   533  029D                     	;# 
   534  029E                     	;# 
   535  029E                     	;# 
   536  0311                     	;# 
   537  0311                     	;# 
   538  0312                     	;# 
   539  0313                     	;# 
   540  0318                     	;# 
   541  0318                     	;# 
   542  0319                     	;# 
   543  031A                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0415                     	;# 
   553  0416                     	;# 
   554  0417                     	;# 
   555  041C                     	;# 
   556  041D                     	;# 
   557  041E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  0111                     	;# 
   618  0112                     	;# 
   619  0113                     	;# 
   620  0114                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  0118                     	;# 
   625  0119                     	;# 
   626  011A                     	;# 
   627  011B                     	;# 
   628  011D                     	;# 
   629  011E                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0219                     	;# 
   670  021A                     	;# 
   671  021B                     	;# 
   672  021C                     	;# 
   673  021D                     	;# 
   674  021E                     	;# 
   675  021F                     	;# 
   676  0291                     	;# 
   677  0291                     	;# 
   678  0292                     	;# 
   679  0293                     	;# 
   680  0294                     	;# 
   681  0295                     	;# 
   682  0295                     	;# 
   683  0296                     	;# 
   684  0298                     	;# 
   685  0298                     	;# 
   686  0299                     	;# 
   687  029A                     	;# 
   688  029B                     	;# 
   689  029C                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  029E                     	;# 
   694  0311                     	;# 
   695  0311                     	;# 
   696  0312                     	;# 
   697  0313                     	;# 
   698  0318                     	;# 
   699  0318                     	;# 
   700  0319                     	;# 
   701  031A                     	;# 
   702  0394                     	;# 
   703  0395                     	;# 
   704  0396                     	;# 
   705  039A                     	;# 
   706  039C                     	;# 
   707  039D                     	;# 
   708  039E                     	;# 
   709  039F                     	;# 
   710  0415                     	;# 
   711  0416                     	;# 
   712  0417                     	;# 
   713  041C                     	;# 
   714  041D                     	;# 
   715  041E                     	;# 
   716  0FE4                     	;# 
   717  0FE5                     	;# 
   718  0FE6                     	;# 
   719  0FE7                     	;# 
   720  0FE8                     	;# 
   721  0FE9                     	;# 
   722  0FEA                     	;# 
   723  0FEB                     	;# 
   724  0FED                     	;# 
   725  0FEE                     	;# 
   726  0FEF                     	;# 
   727  0000                     	;# 
   728  0001                     	;# 
   729  0002                     	;# 
   730  0003                     	;# 
   731  0004                     	;# 
   732  0005                     	;# 
   733  0006                     	;# 
   734  0007                     	;# 
   735  0008                     	;# 
   736  0009                     	;# 
   737  000A                     	;# 
   738  000B                     	;# 
   739  000C                     	;# 
   740  000D                     	;# 
   741  0011                     	;# 
   742  0012                     	;# 
   743  0013                     	;# 
   744  0014                     	;# 
   745  0015                     	;# 
   746  0016                     	;# 
   747  0016                     	;# 
   748  0017                     	;# 
   749  0018                     	;# 
   750  0019                     	;# 
   751  001A                     	;# 
   752  001B                     	;# 
   753  001C                     	;# 
   754  001E                     	;# 
   755  001F                     	;# 
   756  008C                     	;# 
   757  008D                     	;# 
   758  0091                     	;# 
   759  0092                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  0111                     	;# 
   776  0112                     	;# 
   777  0113                     	;# 
   778  0114                     	;# 
   779  0115                     	;# 
   780  0116                     	;# 
   781  0117                     	;# 
   782  0118                     	;# 
   783  0119                     	;# 
   784  011A                     	;# 
   785  011B                     	;# 
   786  011D                     	;# 
   787  011E                     	;# 
   788  018C                     	;# 
   789  018D                     	;# 
   790  0191                     	;# 
   791  0191                     	;# 
   792  0192                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0194                     	;# 
   797  0195                     	;# 
   798  0196                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020D                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0219                     	;# 
   828  021A                     	;# 
   829  021B                     	;# 
   830  021C                     	;# 
   831  021D                     	;# 
   832  021E                     	;# 
   833  021F                     	;# 
   834  0291                     	;# 
   835  0291                     	;# 
   836  0292                     	;# 
   837  0293                     	;# 
   838  0294                     	;# 
   839  0295                     	;# 
   840  0295                     	;# 
   841  0296                     	;# 
   842  0298                     	;# 
   843  0298                     	;# 
   844  0299                     	;# 
   845  029A                     	;# 
   846  029B                     	;# 
   847  029C                     	;# 
   848  029C                     	;# 
   849  029D                     	;# 
   850  029E                     	;# 
   851  029E                     	;# 
   852  0311                     	;# 
   853  0311                     	;# 
   854  0312                     	;# 
   855  0313                     	;# 
   856  0318                     	;# 
   857  0318                     	;# 
   858  0319                     	;# 
   859  031A                     	;# 
   860  0394                     	;# 
   861  0395                     	;# 
   862  0396                     	;# 
   863  039A                     	;# 
   864  039C                     	;# 
   865  039D                     	;# 
   866  039E                     	;# 
   867  039F                     	;# 
   868  0415                     	;# 
   869  0416                     	;# 
   870  0417                     	;# 
   871  041C                     	;# 
   872  041D                     	;# 
   873  041E                     	;# 
   874  0FE4                     	;# 
   875  0FE5                     	;# 
   876  0FE6                     	;# 
   877  0FE7                     	;# 
   878  0FE8                     	;# 
   879  0FE9                     	;# 
   880  0FEA                     	;# 
   881  0FEB                     	;# 
   882  0FED                     	;# 
   883  0FEE                     	;# 
   884  0FEF                     	;# 
   885  0000                     	;# 
   886  0001                     	;# 
   887  0002                     	;# 
   888  0003                     	;# 
   889  0004                     	;# 
   890  0005                     	;# 
   891  0006                     	;# 
   892  0007                     	;# 
   893  0008                     	;# 
   894  0009                     	;# 
   895  000A                     	;# 
   896  000B                     	;# 
   897  000C                     	;# 
   898  000D                     	;# 
   899  0011                     	;# 
   900  0012                     	;# 
   901  0013                     	;# 
   902  0014                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0016                     	;# 
   906  0017                     	;# 
   907  0018                     	;# 
   908  0019                     	;# 
   909  001A                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001E                     	;# 
   913  001F                     	;# 
   914  008C                     	;# 
   915  008D                     	;# 
   916  0091                     	;# 
   917  0092                     	;# 
   918  0093                     	;# 
   919  0094                     	;# 
   920  0095                     	;# 
   921  0096                     	;# 
   922  0097                     	;# 
   923  0098                     	;# 
   924  0099                     	;# 
   925  009A                     	;# 
   926  009B                     	;# 
   927  009B                     	;# 
   928  009C                     	;# 
   929  009D                     	;# 
   930  009E                     	;# 
   931  010C                     	;# 
   932  010D                     	;# 
   933  0111                     	;# 
   934  0112                     	;# 
   935  0113                     	;# 
   936  0114                     	;# 
   937  0115                     	;# 
   938  0116                     	;# 
   939  0117                     	;# 
   940  0118                     	;# 
   941  0119                     	;# 
   942  011A                     	;# 
   943  011B                     	;# 
   944  011D                     	;# 
   945  011E                     	;# 
   946  018C                     	;# 
   947  018D                     	;# 
   948  0191                     	;# 
   949  0191                     	;# 
   950  0192                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0193                     	;# 
   954  0194                     	;# 
   955  0195                     	;# 
   956  0196                     	;# 
   957  0199                     	;# 
   958  019A                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019C                     	;# 
   964  019C                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  020C                     	;# 
   969  020D                     	;# 
   970  0211                     	;# 
   971  0211                     	;# 
   972  0212                     	;# 
   973  0212                     	;# 
   974  0213                     	;# 
   975  0213                     	;# 
   976  0214                     	;# 
   977  0214                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0216                     	;# 
   982  0216                     	;# 
   983  0217                     	;# 
   984  0217                     	;# 
   985  0219                     	;# 
   986  021A                     	;# 
   987  021B                     	;# 
   988  021C                     	;# 
   989  021D                     	;# 
   990  021E                     	;# 
   991  021F                     	;# 
   992  0291                     	;# 
   993  0291                     	;# 
   994  0292                     	;# 
   995  0293                     	;# 
   996  0294                     	;# 
   997  0295                     	;# 
   998  0295                     	;# 
   999  0296                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029B                     	;# 
  1005  029C                     	;# 
  1006  029C                     	;# 
  1007  029D                     	;# 
  1008  029E                     	;# 
  1009  029E                     	;# 
  1010  0311                     	;# 
  1011  0311                     	;# 
  1012  0312                     	;# 
  1013  0313                     	;# 
  1014  0318                     	;# 
  1015  0318                     	;# 
  1016  0319                     	;# 
  1017  031A                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  039A                     	;# 
  1022  039C                     	;# 
  1023  039D                     	;# 
  1024  039E                     	;# 
  1025  039F                     	;# 
  1026  0415                     	;# 
  1027  0416                     	;# 
  1028  0417                     	;# 
  1029  041C                     	;# 
  1030  041D                     	;# 
  1031  041E                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0013                     	;# 
  1060  0014                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  001E                     	;# 
  1071  001F                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0094                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0098                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  0111                     	;# 
  1092  0112                     	;# 
  1093  0113                     	;# 
  1094  0114                     	;# 
  1095  0115                     	;# 
  1096  0116                     	;# 
  1097  0117                     	;# 
  1098  0118                     	;# 
  1099  0119                     	;# 
  1100  011A                     	;# 
  1101  011B                     	;# 
  1102  011D                     	;# 
  1103  011E                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020C                     	;# 
  1127  020D                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0219                     	;# 
  1144  021A                     	;# 
  1145  021B                     	;# 
  1146  021C                     	;# 
  1147  021D                     	;# 
  1148  021E                     	;# 
  1149  021F                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0294                     	;# 
  1155  0295                     	;# 
  1156  0295                     	;# 
  1157  0296                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  029B                     	;# 
  1163  029C                     	;# 
  1164  029C                     	;# 
  1165  029D                     	;# 
  1166  029E                     	;# 
  1167  029E                     	;# 
  1168  0311                     	;# 
  1169  0311                     	;# 
  1170  0312                     	;# 
  1171  0313                     	;# 
  1172  0318                     	;# 
  1173  0318                     	;# 
  1174  0319                     	;# 
  1175  031A                     	;# 
  1176  0394                     	;# 
  1177  0395                     	;# 
  1178  0396                     	;# 
  1179  039A                     	;# 
  1180  039C                     	;# 
  1181  039D                     	;# 
  1182  039E                     	;# 
  1183  039F                     	;# 
  1184  0415                     	;# 
  1185  0416                     	;# 
  1186  0417                     	;# 
  1187  041C                     	;# 
  1188  041D                     	;# 
  1189  041E                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  0011                     	;# 
  1216  0012                     	;# 
  1217  0013                     	;# 
  1218  0014                     	;# 
  1219  0015                     	;# 
  1220  0016                     	;# 
  1221  0016                     	;# 
  1222  0017                     	;# 
  1223  0018                     	;# 
  1224  0019                     	;# 
  1225  001A                     	;# 
  1226  001B                     	;# 
  1227  001C                     	;# 
  1228  001E                     	;# 
  1229  001F                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  0091                     	;# 
  1233  0092                     	;# 
  1234  0093                     	;# 
  1235  0094                     	;# 
  1236  0095                     	;# 
  1237  0096                     	;# 
  1238  0097                     	;# 
  1239  0098                     	;# 
  1240  0099                     	;# 
  1241  009A                     	;# 
  1242  009B                     	;# 
  1243  009B                     	;# 
  1244  009C                     	;# 
  1245  009D                     	;# 
  1246  009E                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  0111                     	;# 
  1250  0112                     	;# 
  1251  0113                     	;# 
  1252  0114                     	;# 
  1253  0115                     	;# 
  1254  0116                     	;# 
  1255  0117                     	;# 
  1256  0118                     	;# 
  1257  0119                     	;# 
  1258  011A                     	;# 
  1259  011B                     	;# 
  1260  011D                     	;# 
  1261  011E                     	;# 
  1262  018C                     	;# 
  1263  018D                     	;# 
  1264  0191                     	;# 
  1265  0191                     	;# 
  1266  0192                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0199                     	;# 
  1274  019A                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019C                     	;# 
  1280  019C                     	;# 
  1281  019D                     	;# 
  1282  019E                     	;# 
  1283  019F                     	;# 
  1284  020C                     	;# 
  1285  020D                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  0212                     	;# 
  1289  0212                     	;# 
  1290  0213                     	;# 
  1291  0213                     	;# 
  1292  0214                     	;# 
  1293  0214                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0215                     	;# 
  1297  0216                     	;# 
  1298  0216                     	;# 
  1299  0217                     	;# 
  1300  0217                     	;# 
  1301  0219                     	;# 
  1302  021A                     	;# 
  1303  021B                     	;# 
  1304  021C                     	;# 
  1305  021D                     	;# 
  1306  021E                     	;# 
  1307  021F                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0298                     	;# 
  1317  0298                     	;# 
  1318  0299                     	;# 
  1319  029A                     	;# 
  1320  029B                     	;# 
  1321  029C                     	;# 
  1322  029C                     	;# 
  1323  029D                     	;# 
  1324  029E                     	;# 
  1325  029E                     	;# 
  1326  0311                     	;# 
  1327  0311                     	;# 
  1328  0312                     	;# 
  1329  0313                     	;# 
  1330  0318                     	;# 
  1331  0318                     	;# 
  1332  0319                     	;# 
  1333  031A                     	;# 
  1334  0394                     	;# 
  1335  0395                     	;# 
  1336  0396                     	;# 
  1337  039A                     	;# 
  1338  039C                     	;# 
  1339  039D                     	;# 
  1340  039E                     	;# 
  1341  039F                     	;# 
  1342  0415                     	;# 
  1343  0416                     	;# 
  1344  0417                     	;# 
  1345  041C                     	;# 
  1346  041D                     	;# 
  1347  041E                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0013                     	;# 
  1376  0014                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  001E                     	;# 
  1387  001F                     	;# 
  1388  008C                     	;# 
  1389  008D                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0093                     	;# 
  1393  0094                     	;# 
  1394  0095                     	;# 
  1395  0096                     	;# 
  1396  0097                     	;# 
  1397  0098                     	;# 
  1398  0099                     	;# 
  1399  009A                     	;# 
  1400  009B                     	;# 
  1401  009B                     	;# 
  1402  009C                     	;# 
  1403  009D                     	;# 
  1404  009E                     	;# 
  1405  010C                     	;# 
  1406  010D                     	;# 
  1407  0111                     	;# 
  1408  0112                     	;# 
  1409  0113                     	;# 
  1410  0114                     	;# 
  1411  0115                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  0118                     	;# 
  1415  0119                     	;# 
  1416  011A                     	;# 
  1417  011B                     	;# 
  1418  011D                     	;# 
  1419  011E                     	;# 
  1420  018C                     	;# 
  1421  018D                     	;# 
  1422  0191                     	;# 
  1423  0191                     	;# 
  1424  0192                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0193                     	;# 
  1428  0194                     	;# 
  1429  0195                     	;# 
  1430  0196                     	;# 
  1431  0199                     	;# 
  1432  019A                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019C                     	;# 
  1438  019C                     	;# 
  1439  019D                     	;# 
  1440  019E                     	;# 
  1441  019F                     	;# 
  1442  020C                     	;# 
  1443  020D                     	;# 
  1444  0211                     	;# 
  1445  0211                     	;# 
  1446  0212                     	;# 
  1447  0212                     	;# 
  1448  0213                     	;# 
  1449  0213                     	;# 
  1450  0214                     	;# 
  1451  0214                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0216                     	;# 
  1456  0216                     	;# 
  1457  0217                     	;# 
  1458  0217                     	;# 
  1459  0219                     	;# 
  1460  021A                     	;# 
  1461  021B                     	;# 
  1462  021C                     	;# 
  1463  021D                     	;# 
  1464  021E                     	;# 
  1465  021F                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0294                     	;# 
  1471  0295                     	;# 
  1472  0295                     	;# 
  1473  0296                     	;# 
  1474  0298                     	;# 
  1475  0298                     	;# 
  1476  0299                     	;# 
  1477  029A                     	;# 
  1478  029B                     	;# 
  1479  029C                     	;# 
  1480  029C                     	;# 
  1481  029D                     	;# 
  1482  029E                     	;# 
  1483  029E                     	;# 
  1484  0311                     	;# 
  1485  0311                     	;# 
  1486  0312                     	;# 
  1487  0313                     	;# 
  1488  0318                     	;# 
  1489  0318                     	;# 
  1490  0319                     	;# 
  1491  031A                     	;# 
  1492  0394                     	;# 
  1493  0395                     	;# 
  1494  0396                     	;# 
  1495  039A                     	;# 
  1496  039C                     	;# 
  1497  039D                     	;# 
  1498  039E                     	;# 
  1499  039F                     	;# 
  1500  0415                     	;# 
  1501  0416                     	;# 
  1502  0417                     	;# 
  1503  041C                     	;# 
  1504  041D                     	;# 
  1505  041E                     	;# 
  1506  0FE4                     	;# 
  1507  0FE5                     	;# 
  1508  0FE6                     	;# 
  1509  0FE7                     	;# 
  1510  0FE8                     	;# 
  1511  0FE9                     	;# 
  1512  0FEA                     	;# 
  1513  0FEB                     	;# 
  1514  0FED                     	;# 
  1515  0FEE                     	;# 
  1516  0FEF                     	;# 
  1517  0000                     	;# 
  1518  0001                     	;# 
  1519  0002                     	;# 
  1520  0003                     	;# 
  1521  0004                     	;# 
  1522  0005                     	;# 
  1523  0006                     	;# 
  1524  0007                     	;# 
  1525  0008                     	;# 
  1526  0009                     	;# 
  1527  000A                     	;# 
  1528  000B                     	;# 
  1529  000C                     	;# 
  1530  000D                     	;# 
  1531  0011                     	;# 
  1532  0012                     	;# 
  1533  0013                     	;# 
  1534  0014                     	;# 
  1535  0015                     	;# 
  1536  0016                     	;# 
  1537  0016                     	;# 
  1538  0017                     	;# 
  1539  0018                     	;# 
  1540  0019                     	;# 
  1541  001A                     	;# 
  1542  001B                     	;# 
  1543  001C                     	;# 
  1544  001E                     	;# 
  1545  001F                     	;# 
  1546  008C                     	;# 
  1547  008D                     	;# 
  1548  0091                     	;# 
  1549  0092                     	;# 
  1550  0093                     	;# 
  1551  0094                     	;# 
  1552  0095                     	;# 
  1553  0096                     	;# 
  1554  0097                     	;# 
  1555  0098                     	;# 
  1556  0099                     	;# 
  1557  009A                     	;# 
  1558  009B                     	;# 
  1559  009B                     	;# 
  1560  009C                     	;# 
  1561  009D                     	;# 
  1562  009E                     	;# 
  1563  010C                     	;# 
  1564  010D                     	;# 
  1565  0111                     	;# 
  1566  0112                     	;# 
  1567  0113                     	;# 
  1568  0114                     	;# 
  1569  0115                     	;# 
  1570  0116                     	;# 
  1571  0117                     	;# 
  1572  0118                     	;# 
  1573  0119                     	;# 
  1574  011A                     	;# 
  1575  011B                     	;# 
  1576  011D                     	;# 
  1577  011E                     	;# 
  1578  018C                     	;# 
  1579  018D                     	;# 
  1580  0191                     	;# 
  1581  0191                     	;# 
  1582  0192                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0193                     	;# 
  1586  0194                     	;# 
  1587  0195                     	;# 
  1588  0196                     	;# 
  1589  0199                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019C                     	;# 
  1596  019C                     	;# 
  1597  019D                     	;# 
  1598  019E                     	;# 
  1599  019F                     	;# 
  1600  020C                     	;# 
  1601  020D                     	;# 
  1602  0211                     	;# 
  1603  0211                     	;# 
  1604  0212                     	;# 
  1605  0212                     	;# 
  1606  0213                     	;# 
  1607  0213                     	;# 
  1608  0214                     	;# 
  1609  0214                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0216                     	;# 
  1614  0216                     	;# 
  1615  0217                     	;# 
  1616  0217                     	;# 
  1617  0219                     	;# 
  1618  021A                     	;# 
  1619  021B                     	;# 
  1620  021C                     	;# 
  1621  021D                     	;# 
  1622  021E                     	;# 
  1623  021F                     	;# 
  1624  0291                     	;# 
  1625  0291                     	;# 
  1626  0292                     	;# 
  1627  0293                     	;# 
  1628  0294                     	;# 
  1629  0295                     	;# 
  1630  0295                     	;# 
  1631  0296                     	;# 
  1632  0298                     	;# 
  1633  0298                     	;# 
  1634  0299                     	;# 
  1635  029A                     	;# 
  1636  029B                     	;# 
  1637  029C                     	;# 
  1638  029C                     	;# 
  1639  029D                     	;# 
  1640  029E                     	;# 
  1641  029E                     	;# 
  1642  0311                     	;# 
  1643  0311                     	;# 
  1644  0312                     	;# 
  1645  0313                     	;# 
  1646  0318                     	;# 
  1647  0318                     	;# 
  1648  0319                     	;# 
  1649  031A                     	;# 
  1650  0394                     	;# 
  1651  0395                     	;# 
  1652  0396                     	;# 
  1653  039A                     	;# 
  1654  039C                     	;# 
  1655  039D                     	;# 
  1656  039E                     	;# 
  1657  039F                     	;# 
  1658  0415                     	;# 
  1659  0416                     	;# 
  1660  0417                     	;# 
  1661  041C                     	;# 
  1662  041D                     	;# 
  1663  041E                     	;# 
  1664  0FE4                     	;# 
  1665  0FE5                     	;# 
  1666  0FE6                     	;# 
  1667  0FE7                     	;# 
  1668  0FE8                     	;# 
  1669  0FE9                     	;# 
  1670  0FEA                     	;# 
  1671  0FEB                     	;# 
  1672  0FED                     	;# 
  1673  0FEE                     	;# 
  1674  0FEF                     	;# 
  1675  000D                     _PORTB	set	13
  1676  000C                     _PORTA	set	12
  1677  001C                     _T2CONbits	set	28
  1678  001B                     _PR2	set	27
  1679  000B                     _INTCONbits	set	11
  1680  009B                     _ADRESL	set	155
  1681  009C                     _ADRESH	set	156
  1682  009D                     _ADCON0bits	set	157
  1683  008D                     _TRISB	set	141
  1684  008C                     _TRISA	set	140
  1685  009E                     _ADCON1	set	158
  1686  009D                     _ADCON0	set	157
  1687  0095                     _OPTION_REG	set	149
  1688  0095                     _OPTION_REGbits	set	149
  1689  0091                     _PIE1bits	set	145
  1690  0099                     _OSCCONbits	set	153
  1691  010D                     _LATB	set	269
  1692  010C                     _LATA	set	268
  1693  011D                     _APFCON0bits	set	285
  1694  018D                     _ANSELB	set	397
  1695  018C                     _ANSELA	set	396
  1696  0293                     _CCP1CONbits	set	659
  1697  0296                     _PSTR1CONbits	set	662
  1698  0291                     _CCPR1L	set	657
  1699  0293                     _CCP1CON	set	659
  1700                           
  1701                           	psect	stringtext1
  1702  0800                     __pstringtext1:
  1703  0800                     STR_1:
  1704  0800  3428               	retlw	40	;'('
  1705  0801  3428               	retlw	40	;'('
  1706  0802  3449               	retlw	73	;'I'
  1707  0803  344E               	retlw	78	;'N'
  1708  0804  3454               	retlw	84	;'T'
  1709  0805  3443               	retlw	67	;'C'
  1710  0806  344F               	retlw	79	;'O'
  1711  0807  344E               	retlw	78	;'N'
  1712  0808  3429               	retlw	41	;')'
  1713  0809  3426               	retlw	38	;'&'
  1714  080A  3430               	retlw	48	;'0'
  1715  080B  3437               	retlw	55	;'7'
  1716  080C  3446               	retlw	70	;'F'
  1717  080D  3468               	retlw	104	;'h'
  1718  080E  3429               	retlw	41	;')'
  1719  080F  342C               	retlw	44	;','
  1720  0810  3432               	retlw	50	;'2'
  1721  0811  3400               	retlw	0
  1722                           
  1723                           	psect	stringtext2
  1724  0000                     __pstringtext2:
  1725  0800                     
  1726                           	psect	cinit
  1727  0088                     start_initialization:	
  1728                           ; #config settings
  1729                           
  1730  0088                     __initialization:
  1731                           
  1732                           ; Clear objects allocated to BANK0
  1733  0088  305D               	movlw	low __pbssBANK0
  1734  0089  0084               	movwf	4
  1735  008A  3000               	movlw	high __pbssBANK0
  1736  008B  0085               	movwf	5
  1737  008C  3012               	movlw	18
  1738  008D  318B  2390  3180   	fcall	clear_ram0
  1739                           
  1740                           ; Clear objects allocated to BANK1
  1741  0090  30A0               	movlw	low __pbssBANK1
  1742  0091  0084               	movwf	4
  1743  0092  3000               	movlw	high __pbssBANK1
  1744  0093  0085               	movwf	5
  1745  0094  3042               	movlw	66
  1746  0095  318B  2390  3180   	fcall	clear_ram0
  1747                           
  1748                           ; Clear objects allocated to BANK2
  1749  0098  3020               	movlw	low __pbssBANK2
  1750  0099  0084               	movwf	4
  1751  009A  3001               	movlw	high __pbssBANK2
  1752  009B  0085               	movwf	5
  1753  009C  304A               	movlw	74
  1754  009D  318B  2390  3180   	fcall	clear_ram0
  1755                           
  1756                           ; Clear objects allocated to BANK3
  1757  00A0  30A0               	movlw	low __pbssBANK3
  1758  00A1  0084               	movwf	4
  1759  00A2  3001               	movlw	high __pbssBANK3
  1760  00A3  0085               	movwf	5
  1761  00A4  3040               	movlw	64
  1762  00A5  318B  2390  3180   	fcall	clear_ram0
  1763                           
  1764                           ; Clear objects allocated to BANK4
  1765  00A8  3020               	movlw	low __pbssBANK4
  1766  00A9  0084               	movwf	4
  1767  00AA  3002               	movlw	high __pbssBANK4
  1768  00AB  0085               	movwf	5
  1769  00AC  3020               	movlw	32
  1770  00AD  318B  2390  3180   	fcall	clear_ram0
  1771  00B0                     end_of_initialization:	
  1772                           ;End of C runtime variable initialization code
  1773                           
  1774  00B0                     __end_of__initialization:
  1775  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1776  00B1  0020               	movlb	0
  1777  00B2  318D  2D3C         	ljmp	_main	;jump to C main() function
  1778                           
  1779                           	psect	bssBANK0
  1780  005D                     __pbssBANK0:
  1781  005D                     _filteredVout:
  1782  005D                     	ds	2
  1783  005F                     _filteredIL:
  1784  005F                     	ds	2
  1785  0061                     _latestIL:
  1786  0061                     	ds	2
  1787  0063                     _setDuty:
  1788  0063                     	ds	2
  1789  0065                     _slotTest:
  1790  0065                     	ds	1
  1791  0066                     _timerSlotQuarter:
  1792  0066                     	ds	1
  1793  0067                     _timerSlotHalf:
  1794  0067                     	ds	1
  1795  0068                     _potSetCount:
  1796  0068                     	ds	1
  1797  0069                     _currentTripCount:
  1798  0069                     	ds	1
  1799  006A                     _tripIL:
  1800  006A                     	ds	1
  1801  006B                     _tripIDS:
  1802  006B                     	ds	1
  1803  006C                     _currentState:
  1804  006C                     	ds	1
  1805  006D                     _prevPeriod:
  1806  006D                     	ds	1
  1807  006E                     _setPeriod:
  1808  006E                     	ds	1
  1809                           
  1810                           	psect	bssBANK1
  1811  00A0                     __pbssBANK1:
  1812  00A0                     _currentModeVariables:
  1813  00A0                     	ds	28
  1814  00BC                     _integratorScaledLimit:
  1815  00BC                     	ds	8
  1816  00C4                     _prevDuty:
  1817  00C4                     	ds	2
  1818  00C6                     _voltageModeVariables:
  1819  00C6                     	ds	28
  1820                           
  1821                           	psect	bssBANK2
  1822  0120                     __pbssBANK2:
  1823  0120                     _currentILFIFO:
  1824  0120                     	ds	32
  1825  0140                     _currentIDSFIFO:
  1826  0140                     	ds	32
  1827  0160                     _clockFrequency:
  1828  0160                     	ds	4
  1829  0164                     _filteredDutyPot:
  1830  0164                     	ds	2
  1831  0166                     _filteredFreqPot:
  1832  0166                     	ds	2
  1833  0168                     _filteredIDS:
  1834  0168                     	ds	2
  1835                           
  1836                           	psect	bssBANK3
  1837  01A0                     __pbssBANK3:
  1838  01A0                     _freqPotFIFO:
  1839  01A0                     	ds	32
  1840  01C0                     _voutFIFO:
  1841  01C0                     	ds	32
  1842                           
  1843                           	psect	bssBANK4
  1844  0220                     __pbssBANK4:
  1845  0220                     _dutyPotFIFO:
  1846  0220                     	ds	32
  1847                           
  1848                           	psect	clrtext
  1849  0B90                     clear_ram0:	
  1850                           ;	Called with FSR0 containing the base address, and
  1851                           ;	WREG with the size to clear
  1852                           
  1853  0B90  0064               	clrwdt	;clear the watchdog before getting into this loop
  1854  0B91                     clrloop0:
  1855  0B91  0180               	clrf	0	;clear RAM location pointed to by FSR
  1856  0B92  3101               	addfsr 0,1
  1857  0B93  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1858  0B94  2B91               	goto	clrloop0	;have we reached the end yet?
  1859  0B95  3400               	retlw	0	;all done for this memory range, return
  1860                           
  1861                           	psect	cstackBANK1
  1862  00E2                     __pcstackBANK1:
  1863  00E2                     ?_writeGPIO:
  1864  00E2                     ??_setupInternalOscillator:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00E2                     ??_setupTimer0Interrupt:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00E2                     ??_initialiseADCModule:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00E2                     ?_initialiseGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00E2                     ??_readGPIO:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00E2                     ??_transToVoltageModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00E2                     ??_transToCurrentModeControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00E2                     ??_transToPotControl:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00E2                     ??_initialiseADCPin:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00E2                     initialiseGPIO@direction:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00E2                     writeGPIO@writeValue:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x0
  1899  00E2                     	ds	1
  1900  00E3                     ??_writeGPIO:
  1901  00E3                     ??_initialiseGPIO:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1
  1906  00E3                     	ds	1
  1907  00E4                     setupInternalOscillator@selectedFreq:
  1908  00E4                     initialiseADCPin@gpioValid:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911  00E4                     readGPIO@readA:	
  1912                           ; 1 bytes @ 0x2
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x2
  1916  00E4                     	ds	1
  1917  00E5                     initialiseADCPin@portType:
  1918  00E5                     initialiseGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00E5                     writeGPIO@portType:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924  00E5                     readGPIO@returnValueA:	
  1925                           ; 1 bytes @ 0x3
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x3
  1929  00E5                     	ds	1
  1930  00E6                     initialiseADCPin@portNumber:
  1931  00E6                     initialiseGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00E6                     writeGPIO@gpioNumber:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937  00E6                     readGPIO@readB:	
  1938                           ; 1 bytes @ 0x4
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x4
  1942  00E6                     	ds	1
  1943  00E7                     initialiseADCPin@gpioNumber:
  1944  00E7                     initialiseGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00E7                     writeGPIO@portNumber:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  00E7                     readGPIO@returnValueB:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  00E7                     	ds	1
  1956  00E8                     ??_setupPWM:
  1957  00E8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00E8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00E8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00E8                     ??_currentTripReset:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969  00E8                     readGPIO@portNumber:	
  1970                           ; 1 bytes @ 0x6
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x6
  1974  00E8                     	ds	1
  1975  00E9                     readGPIO@portType:
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  00E9                     	ds	1
  1979  00EA                     readGPIO@gpioNumber:
  1980                           
  1981                           ; 1 bytes @ 0x8
  1982  00EA                     	ds	1
  1983  00EB                     ?_main:
  1984  00EB                     main@argc:	
  1985                           ; 2 bytes @ 0x9
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00EB                     	ds	2
  1990  00ED                     main@argv:
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  00ED                     	ds	2
  1994  00EF                     ??_main:
  1995                           
  1996                           	psect	cstackCOMMON
  1997  0070                     __pcstackCOMMON:	
  1998                           ; 1 bytes @ 0xD
  1999                           
  2000  0070                     ?_setPWMDutyandPeriod:
  2001  0070                     ?_controlRoutine:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_runPotScaling:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_setupInternalOscillator:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_setupPWM:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_setupTimer0Interrupt:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_initialiseADCModule:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_initialiseCurrentSensors:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_initialisePotentiometers:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialiseController:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_readGPIO:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_transToVoltageModeControl:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_transToCurrentModeControl:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_transToPotControl:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_runVoltageModeControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_runCurrentModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_currentTripReset:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_transToOverCurrentFault:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_transToOverCurrentFault:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick490Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_currentTripRead:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ??___omul:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_writeGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_readGPIO:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1_currentTripReset:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_currentTripMonitor:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_readFilteredIL:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?_abs:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?_readADCRaw:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?___wmul:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?___lmul:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097  0070                     i1writeGPIO@writeValue:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     setPWMDutyandPeriod@dutyCycle:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___wmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     abs@a:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ___lmul@multiplier:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112                           
  2113                           ; 4 bytes @ 0x0
  2114  0070                     	ds	1
  2115  0071                     ??i1_writeGPIO:
  2116  0071                     ___omul@product:	
  2117                           ; 1 bytes @ 0x1
  2118                           
  2119                           
  2120                           ; 8 bytes @ 0x1
  2121  0071                     	ds	1
  2122  0072                     ??_readFilteredIL:
  2123  0072                     ??_abs:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     ??_readADCRaw:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     setPWMDutyandPeriod@period:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132  0072                     i1readGPIO@readA:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     ___wmul@multiplicand:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x2
  2140  0072                     	ds	1
  2141  0073                     ??_setPWMDutyandPeriod:
  2142  0073                     i1writeGPIO@portType:	
  2143                           ; 1 bytes @ 0x3
  2144                           
  2145  0073                     i1readGPIO@returnValueA:	
  2146                           ; 1 bytes @ 0x3
  2147                           
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  0073                     	ds	1
  2151  0074                     ??___wmul:
  2152  0074                     i1writeGPIO@gpioNumber:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     i1readGPIO@readB:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     readADCRaw@returnValue:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161  0074                     ___wmul@product:	
  2162                           ; 2 bytes @ 0x4
  2163                           
  2164  0074                     ___lmul@multiplicand:	
  2165                           ; 2 bytes @ 0x4
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1writeGPIO@portNumber:
  2171  0075                     i1readGPIO@returnValueB:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174                           
  2175                           ; 1 bytes @ 0x5
  2176  0075                     	ds	1
  2177  0076                     ??i1_currentTripReset:
  2178  0076                     ?_convertRawToMilliAmps:	
  2179                           ; 1 bytes @ 0x6
  2180                           
  2181  0076                     ?___lldiv:	
  2182                           ; 2 bytes @ 0x6
  2183                           
  2184  0076                     readADCRaw@channel:	
  2185                           ; 4 bytes @ 0x6
  2186                           
  2187  0076                     i1readGPIO@portNumber:	
  2188                           ; 1 bytes @ 0x6
  2189                           
  2190  0076                     convertRawToMilliAmps@rawValue:	
  2191                           ; 1 bytes @ 0x6
  2192                           
  2193  0076                     readFilteredIL@sumOfSamples:	
  2194                           ; 2 bytes @ 0x6
  2195                           
  2196  0076                     ___lldiv@divisor:	
  2197                           ; 4 bytes @ 0x6
  2198                           
  2199                           
  2200                           ; 4 bytes @ 0x6
  2201  0076                     	ds	1
  2202  0077                     readADCRaw@gpioValid:
  2203  0077                     i1readGPIO@portType:	
  2204                           ; 1 bytes @ 0x7
  2205                           
  2206                           
  2207                           ; 1 bytes @ 0x7
  2208  0077                     	ds	1
  2209  0078                     ??_convertRawToMilliAmps:
  2210  0078                     ??___lmul:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213  0078                     readADCRaw@i:	
  2214                           ; 1 bytes @ 0x8
  2215                           
  2216  0078                     i1readGPIO@gpioNumber:	
  2217                           ; 1 bytes @ 0x8
  2218                           
  2219  0078                     convertRawToMilliAmps@offsetted:	
  2220                           ; 1 bytes @ 0x8
  2221                           
  2222  0078                     ___lmul@product:	
  2223                           ; 2 bytes @ 0x8
  2224                           
  2225                           
  2226                           ; 4 bytes @ 0x8
  2227  0078                     	ds	1
  2228  0079                     ??_currentTripRead:
  2229  0079                     readADCRaw@gpioNumber:	
  2230                           ; 1 bytes @ 0x9
  2231                           
  2232                           
  2233                           ; 1 bytes @ 0x9
  2234  0079                     	ds	1
  2235  007A                     ?_readFilteredVout:
  2236  007A                     ?_readFilteredDutyPot:	
  2237                           ; 2 bytes @ 0xA
  2238                           
  2239  007A                     ?_readFilteredFreqPot:	
  2240                           ; 2 bytes @ 0xA
  2241                           
  2242  007A                     _currentTripRead$930:	
  2243                           ; 2 bytes @ 0xA
  2244                           
  2245  007A                     readFilteredIL@i_938:	
  2246                           ; 1 bytes @ 0xA
  2247                           
  2248  007A                     convertRawToMilliAmps@returnValuemA:	
  2249                           ; 1 bytes @ 0xA
  2250                           
  2251  007A                     ___lldiv@dividend:	
  2252                           ; 2 bytes @ 0xA
  2253                           
  2254                           
  2255                           ; 4 bytes @ 0xA
  2256  007A                     	ds	1
  2257  007B                     ??_currentTripMonitor:
  2258  007B                     readFilteredIL@i:	
  2259                           ; 1 bytes @ 0xB
  2260                           
  2261                           
  2262                           ; 1 bytes @ 0xB
  2263  007B                     	ds	1
  2264  007C                     ??_runCurrentModeControl:
  2265  007C                     ?_convertRawToMilliVolts:	
  2266                           ; 1 bytes @ 0xC
  2267                           
  2268  007C                     convertRawToMilliVolts@rawValue:	
  2269                           ; 2 bytes @ 0xC
  2270                           
  2271                           
  2272                           ; 2 bytes @ 0xC
  2273  007C                     	ds	2
  2274                           
  2275                           	psect	cstackBANK0
  2276  0020                     __pcstackBANK0:
  2277  0020                     ??_readFilteredVout:
  2278  0020                     ??_readFilteredDutyPot:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0020                     ??_readFilteredFreqPot:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0020                     ??_convertRawToMilliVolts:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0020                     ??___lldiv:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0020                     ?___omul:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0020                     ___omul@multiplier:	
  2294                           ; 8 bytes @ 0x0
  2295                           
  2296                           
  2297                           ; 8 bytes @ 0x0
  2298  0020                     	ds	1
  2299  0021                     ___lldiv@quotient:
  2300                           
  2301                           ; 4 bytes @ 0x1
  2302  0021                     	ds	3
  2303  0024                     readFilteredDutyPot@sumOfSamples:
  2304  0024                     readFilteredFreqPot@sumOfSamples:	
  2305                           ; 4 bytes @ 0x4
  2306                           
  2307  0024                     readFilteredVout@sumOfSamples:	
  2308                           ; 4 bytes @ 0x4
  2309                           
  2310                           
  2311                           ; 4 bytes @ 0x4
  2312  0024                     	ds	1
  2313  0025                     ___lldiv@counter:
  2314  0025                     convertRawToMilliVolts@vsenseMult:	
  2315                           ; 1 bytes @ 0x5
  2316                           
  2317                           
  2318                           ; 4 bytes @ 0x5
  2319  0025                     	ds	1
  2320  0026                     ??_runPotScaling:
  2321                           
  2322                           ; 1 bytes @ 0x6
  2323  0026                     	ds	2
  2324  0028                     readFilteredDutyPot@i_750:
  2325  0028                     readFilteredFreqPot@i_754:	
  2326                           ; 1 bytes @ 0x8
  2327                           
  2328  0028                     readFilteredVout@i_848:	
  2329                           ; 1 bytes @ 0x8
  2330                           
  2331  0028                     ___omul@multiplicand:	
  2332                           ; 1 bytes @ 0x8
  2333                           
  2334                           
  2335                           ; 8 bytes @ 0x8
  2336  0028                     	ds	1
  2337  0029                     readFilteredDutyPot@i:
  2338  0029                     readFilteredFreqPot@i:	
  2339                           ; 1 bytes @ 0x9
  2340                           
  2341  0029                     readFilteredVout@i:	
  2342                           ; 1 bytes @ 0x9
  2343                           
  2344  0029                     convertRawToMilliVolts@offsetted:	
  2345                           ; 1 bytes @ 0x9
  2346                           
  2347                           
  2348                           ; 2 bytes @ 0x9
  2349  0029                     	ds	2
  2350  002B                     convertRawToMilliVolts@returnValuedV:
  2351                           
  2352                           ; 2 bytes @ 0xB
  2353  002B                     	ds	3
  2354  002E                     runPotScaling@maxDuty:
  2355                           
  2356                           ; 2 bytes @ 0xE
  2357  002E                     	ds	2
  2358  0030                     ??_runVoltageModeControl:
  2359  0030                     runPotScaling@minDuty:	
  2360                           ; 1 bytes @ 0x10
  2361                           
  2362                           
  2363                           ; 2 bytes @ 0x10
  2364  0030                     	ds	16
  2365  0040                     runVoltageModeControl@integralMult:
  2366                           
  2367                           ; 8 bytes @ 0x20
  2368  0040                     	ds	8
  2369  0048                     runVoltageModeControl@propMult:
  2370                           
  2371                           ; 8 bytes @ 0x28
  2372  0048                     	ds	8
  2373  0050                     runVoltageModeControl@newVoltage:
  2374                           
  2375                           ; 2 bytes @ 0x30
  2376  0050                     	ds	2
  2377  0052                     ??_controlRoutine:
  2378                           
  2379                           ; 1 bytes @ 0x32
  2380  0052                     	ds	6
  2381  0058                     controlRoutine@maxDuty:
  2382                           
  2383                           ; 2 bytes @ 0x38
  2384  0058                     	ds	2
  2385  005A                     controlRoutine@minDuty:
  2386                           
  2387                           ; 2 bytes @ 0x3A
  2388  005A                     	ds	2
  2389  005C                     ??_Tick490Hz:
  2390                           
  2391                           ; 1 bytes @ 0x3C
  2392  005C                     	ds	1
  2393                           
  2394                           	psect	maintext
  2395  0D3C                     __pmaintext:	
  2396 ;;
  2397 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2398 ;;
  2399 ;; *************** function _main *****************
  2400 ;; Defined at:
  2401 ;;		line 106 in file "main.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  argc            2    9[BANK1 ] int 
  2404 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  2    9[BANK1 ] int 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : B1F/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2416 ;;      Params:         0       0       4       0       0       0
  2417 ;;      Locals:         0       0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0
  2419 ;;      Totals:         0       0       4       0       0       0
  2420 ;;Total ram usage:        4 bytes
  2421 ;; Hardware stack levels required when called: 8
  2422 ;; This function calls:
  2423 ;;		_initialiseADCModule
  2424 ;;		_initialiseController
  2425 ;;		_initialiseCurrentSensors
  2426 ;;		_initialiseGPIO
  2427 ;;		_initialisePotentiometers
  2428 ;;		_readGPIO
  2429 ;;		_setupInternalOscillator
  2430 ;;		_setupPWM
  2431 ;;		_setupTimer0Interrupt
  2432 ;;		_transToCurrentModeControl
  2433 ;;		_transToPotControl
  2434 ;;		_transToVoltageModeControl
  2435 ;; This function is called by:
  2436 ;;		Startup code after reset
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440  0D3C                     _main:	
  2441                           ;psect for function _main
  2442                           
  2443  0D3C                     l2724:	
  2444                           ;incstack = 0
  2445                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2446                           
  2447                           
  2448                           ;main.c: 108:     setupInternalOscillator(freq32M);
  2449  0D3C  300A               	movlw	10
  2450  0D3D  3184  24EE  318D   	fcall	_setupInternalOscillator
  2451  0D40                     l2726:
  2452                           
  2453                           ;main.c: 110:     setupPWM();
  2454  0D40  318C  2415  318D   	fcall	_setupPWM
  2455  0D43                     l2728:
  2456                           
  2457                           ;main.c: 111:     setupTimer0Interrupt();
  2458  0D43  318B  23A4  318D   	fcall	_setupTimer0Interrupt
  2459  0D46                     l2730:
  2460                           
  2461                           ;main.c: 112:     initialiseADCModule();
  2462  0D46  318B  238A  318D   	fcall	_initialiseADCModule
  2463  0D49                     l2732:
  2464                           
  2465                           ;main.c: 113:     initialiseCurrentSensors();
  2466  0D49  318C  246D  318D   	fcall	_initialiseCurrentSensors
  2467  0D4C                     l2734:
  2468                           
  2469                           ;main.c: 114:     initialisePotentiometers();
  2470  0D4C  318B  23BE  318D   	fcall	_initialisePotentiometers
  2471  0D4F                     l2736:
  2472                           
  2473                           ;main.c: 115:     initialiseController();
  2474  0D4F  318C  2431  318D   	fcall	_initialiseController
  2475  0D52                     l2738:
  2476                           
  2477                           ;main.c: 117:     initialiseGPIO(pinRB4, 0);
  2478  0D52  0021               	movlb	1	; select bank1
  2479  0D53  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2480  0D54  300C               	movlw	12
  2481  0D55  3185  25BE  318D   	fcall	_initialiseGPIO
  2482  0D58                     l2740:
  2483                           
  2484                           ;main.c: 118:     initialiseGPIO(pinRB5, 0);
  2485  0D58  0021               	movlb	1	; select bank1
  2486  0D59  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2487  0D5A  300D               	movlw	13
  2488  0D5B  3185  25BE  318D   	fcall	_initialiseGPIO
  2489  0D5E                     l2742:
  2490  0D5E                     l2744:	
  2491                           ;main.c: 120:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2492                           
  2493                           
  2494                           ;main.c: 123:         if(1 == 1) transToVoltageModeControl();
  2495  0D5E  3008               	movlw	8
  2496  0D5F  318D  25F3  318D   	fcall	_readGPIO
  2497  0D62  3A01               	xorlw	1
  2498  0D63  1903               	skipnz
  2499  0D64  2D66               	goto	u2511
  2500  0D65  2D67               	goto	u2510
  2501  0D66                     u2511:
  2502  0D66  2D6B               	goto	l2750
  2503  0D67                     u2510:
  2504  0D67                     l2746:
  2505  0D67  318B  239D  318D   	fcall	_transToVoltageModeControl
  2506  0D6A  2D6E               	goto	l118
  2507  0D6B                     l2750:
  2508  0D6B  318B  2386  318D   	fcall	_transToPotControl
  2509  0D6E                     l118:	
  2510                           ;main.c: 128:     while(1){
  2511                           
  2512  0D6E  2D6E               	goto	l118
  2513  0D6F  3180  2886         	ljmp	start
  2514  0D71                     __end_of_main:
  2515                           
  2516                           	psect	text1
  2517  0B9D                     __ptext1:	
  2518 ;; *************** function _transToVoltageModeControl *****************
  2519 ;; Defined at:
  2520 ;;		line 27 in file "StateMachine.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2534 ;;      Params:         0       0       0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0
  2536 ;;      Temps:          0       0       1       0       0       0
  2537 ;;      Totals:         0       0       1       0       0       0
  2538 ;;Total ram usage:        1 bytes
  2539 ;; Hardware stack levels used: 1
  2540 ;; Hardware stack levels required when called: 5
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548  0B9D                     _transToVoltageModeControl:	
  2549                           ;psect for function _transToVoltageModeControl
  2550                           
  2551  0B9D                     l2684:	
  2552                           ;incstack = 0
  2553                           ; Regs used in _transToVoltageModeControl: [wreg]
  2554                           
  2555                           
  2556                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2557  0B9D  3002               	movlw	2
  2558  0B9E  0021               	movlb	1	; select bank1
  2559  0B9F  00E2               	movwf	??_transToVoltageModeControl^(0+128)
  2560  0BA0  0862               	movf	??_transToVoltageModeControl^(0+128),w
  2561  0BA1  0020               	movlb	0	; select bank0
  2562  0BA2  00EC               	movwf	_currentState
  2563  0BA3                     l561:
  2564  0BA3  0008               	return
  2565  0BA4                     __end_of_transToVoltageModeControl:
  2566                           
  2567                           	psect	text2
  2568  0B86                     __ptext2:	
  2569 ;; *************** function _transToPotControl *****************
  2570 ;; Defined at:
  2571 ;;		line 18 in file "StateMachine.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		None
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2585 ;;      Params:         0       0       0       0       0       0
  2586 ;;      Locals:         0       0       0       0       0       0
  2587 ;;      Temps:          0       0       0       0       0       0
  2588 ;;      Totals:         0       0       0       0       0       0
  2589 ;;Total ram usage:        0 bytes
  2590 ;; Hardware stack levels used: 1
  2591 ;; Hardware stack levels required when called: 5
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599  0B86                     _transToPotControl:	
  2600                           ;psect for function _transToPotControl
  2601                           
  2602  0B86                     l2688:	
  2603                           ;incstack = 0
  2604                           ; Regs used in _transToPotControl: []
  2605                           
  2606                           
  2607                           ;StateMachine.c: 19:     currentState = potControl;
  2608  0B86  0020               	movlb	0	; select bank0
  2609  0B87  01EC               	clrf	_currentState
  2610  0B88  0AEC               	incf	_currentState,f
  2611  0B89                     l558:
  2612  0B89  0008               	return
  2613  0B8A                     __end_of_transToPotControl:
  2614                           
  2615                           	psect	text3
  2616  0B96                     __ptext3:	
  2617 ;; *************** function _transToCurrentModeControl *****************
  2618 ;; Defined at:
  2619 ;;		line 36 in file "StateMachine.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2633 ;;      Params:         0       0       0       0       0       0
  2634 ;;      Locals:         0       0       0       0       0       0
  2635 ;;      Temps:          0       0       1       0       0       0
  2636 ;;      Totals:         0       0       1       0       0       0
  2637 ;;Total ram usage:        1 bytes
  2638 ;; Hardware stack levels used: 1
  2639 ;; Hardware stack levels required when called: 5
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647  0B96                     _transToCurrentModeControl:	
  2648                           ;psect for function _transToCurrentModeControl
  2649                           
  2650  0B96                     l2686:	
  2651                           ;incstack = 0
  2652                           ; Regs used in _transToCurrentModeControl: [wreg]
  2653                           
  2654                           
  2655                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2656  0B96  3003               	movlw	3
  2657  0B97  0021               	movlb	1	; select bank1
  2658  0B98  00E2               	movwf	??_transToCurrentModeControl^(0+128)
  2659  0B99  0862               	movf	??_transToCurrentModeControl^(0+128),w
  2660  0B9A  0020               	movlb	0	; select bank0
  2661  0B9B  00EC               	movwf	_currentState
  2662  0B9C                     l564:
  2663  0B9C  0008               	return
  2664  0B9D                     __end_of_transToCurrentModeControl:
  2665                           
  2666                           	psect	text4
  2667  0BA4                     __ptext4:	
  2668 ;; *************** function _setupTimer0Interrupt *****************
  2669 ;; Defined at:
  2670 ;;		line 17 in file "Timer0.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2684 ;;      Params:         0       0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0       0
  2686 ;;      Temps:          0       0       0       0       0       0
  2687 ;;      Totals:         0       0       0       0       0       0
  2688 ;;Total ram usage:        0 bytes
  2689 ;; Hardware stack levels used: 1
  2690 ;; Hardware stack levels required when called: 5
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698  0BA4                     _setupTimer0Interrupt:	
  2699                           ;psect for function _setupTimer0Interrupt
  2700                           
  2701  0BA4                     l2630:	
  2702                           ;incstack = 0
  2703                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2704                           
  2705                           
  2706                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2707  0BA4  178B               	bsf	11,7	;volatile
  2708                           
  2709                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2710  0BA5  168B               	bsf	11,5	;volatile
  2711                           
  2712                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2713  0BA6  0021               	movlb	1	; select bank1
  2714  0BA7  1295               	bcf	21,5	;volatile
  2715                           
  2716                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2717  0BA8  1195               	bcf	21,3	;volatile
  2718  0BA9                     l2632:
  2719                           
  2720                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2721  0BA9  3005               	movlw	5
  2722  0BAA  0095               	movwf	21	;volatile
  2723  0BAB                     l199:
  2724  0BAB  0008               	return
  2725  0BAC                     __end_of_setupTimer0Interrupt:
  2726                           
  2727                           	psect	text5
  2728  0C15                     __ptext5:	
  2729 ;; *************** function _setupPWM *****************
  2730 ;; Defined at:
  2731 ;;		line 16 in file "PWM.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2745 ;;      Params:         0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 6
  2752 ;; This function calls:
  2753 ;;		_initialiseGPIO
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759  0C15                     _setupPWM:	
  2760                           ;psect for function _setupPWM
  2761                           
  2762  0C15                     l2606:	
  2763                           ;incstack = 0
  2764                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2765                           
  2766                           
  2767                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2768  0C15  300C               	movlw	12
  2769  0C16  0025               	movlb	5	; select bank5
  2770  0C17  0093               	movwf	19	;volatile
  2771  0C18                     l2608:
  2772                           
  2773                           ;PWM.c: 20:     PR2 = 0;
  2774  0C18  0020               	movlb	0	; select bank0
  2775  0C19  019B               	clrf	27	;volatile
  2776  0C1A                     l2610:
  2777                           
  2778                           ;PWM.c: 21:     CCPR1L = 0;
  2779  0C1A  0025               	movlb	5	; select bank5
  2780  0C1B  0191               	clrf	17	;volatile
  2781  0C1C                     l2612:
  2782                           
  2783                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2784  0C1C  0022               	movlb	2	; select bank2
  2785  0C1D  151D               	bsf	29,2	;volatile
  2786  0C1E                     l2614:
  2787                           
  2788                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2789  0C1E  0025               	movlb	5	; select bank5
  2790  0C1F  1596               	bsf	22,3	;volatile
  2791  0C20                     l2616:
  2792                           
  2793                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2794  0C20  1016               	bcf	22,0	;volatile
  2795  0C21                     l2618:
  2796                           
  2797                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2798  0C21  30FC               	movlw	-4
  2799  0C22  0020               	movlb	0	; select bank0
  2800  0C23  059C               	andwf	28,f	;volatile
  2801  0C24                     l2620:
  2802                           
  2803                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2804  0C24  0021               	movlb	1	; select bank1
  2805  0C25  1091               	bcf	17,1	;volatile
  2806  0C26                     l2622:
  2807                           
  2808                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2809  0C26  0020               	movlb	0	; select bank0
  2810  0C27  151C               	bsf	28,2	;volatile
  2811  0C28                     l2624:
  2812                           
  2813                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2814  0C28  170B               	bsf	11,6	;volatile
  2815  0C29                     l2626:
  2816                           
  2817                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2818  0C29  0021               	movlb	1	; select bank1
  2819  0C2A  1511               	bsf	17,2	;volatile
  2820  0C2B                     l2628:
  2821                           
  2822                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2823  0C2B  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2824  0C2C  3006               	movlw	6
  2825  0C2D  3185  25BE  318C   	fcall	_initialiseGPIO
  2826  0C30                     l172:
  2827  0C30  0008               	return
  2828  0C31                     __end_of_setupPWM:
  2829                           
  2830                           	psect	text6
  2831  04EE                     __ptext6:	
  2832 ;; *************** function _setupInternalOscillator *****************
  2833 ;; Defined at:
  2834 ;;		line 139 in file "main.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  selectedFreq    1    wreg     const enum E2845
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2848 ;;      Params:         0       0       0       0       0       0
  2849 ;;      Locals:         0       0       1       0       0       0
  2850 ;;      Temps:          0       0       2       0       0       0
  2851 ;;      Totals:         0       0       3       0       0       0
  2852 ;;Total ram usage:        3 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 5
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_main
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862  04EE                     _setupInternalOscillator:	
  2863                           ;psect for function _setupInternalOscillator
  2864                           
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2868                           ;setupInternalOscillator@selectedFreq stored from wreg
  2869  04EE  0021               	movlb	1	; select bank1
  2870  04EF  00E4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2871  04F0                     l2528:
  2872                           
  2873                           ;main.c: 143:     switch(selectedFreq){
  2874  04F0  2D92               	goto	l2598
  2875  04F1                     l2530:
  2876  04F1  3087               	movlw	-121
  2877  04F2  0599               	andwf	25,f	;volatile
  2878  04F3                     l2532:
  2879  04F3  1399               	bcf	25,7	;volatile
  2880  04F4                     l2534:
  2881  04F4  3000               	movlw	0
  2882  04F5  0022               	movlb	2	; select bank2
  2883  04F6  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2884  04F7  3000               	movlw	0
  2885  04F8  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2886  04F9  3079               	movlw	121
  2887  04FA  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2888  04FB  3018               	movlw	24
  2889  04FC  00E0               	movwf	_clockFrequency^(0+256)
  2890  04FD  2DBD               	goto	l137
  2891  04FE                     l2536:
  2892  04FE  0819               	movf	25,w	;volatile
  2893  04FF  3987               	andlw	-121
  2894  0500  3820               	iorlw	32
  2895  0501  0099               	movwf	25	;volatile
  2896  0502                     l2538:
  2897  0502  1399               	bcf	25,7	;volatile
  2898  0503                     l2540:
  2899  0503  3000               	movlw	0
  2900  0504  0022               	movlb	2	; select bank2
  2901  0505  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2902  0506  3000               	movlw	0
  2903  0507  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2904  0508  30F4               	movlw	244
  2905  0509  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2906  050A  3024               	movlw	36
  2907  050B  00E0               	movwf	_clockFrequency^(0+256)
  2908  050C  2DBD               	goto	l137
  2909  050D                     l2542:
  2910  050D  0819               	movf	25,w	;volatile
  2911  050E  3987               	andlw	-121
  2912  050F  3828               	iorlw	40
  2913  0510  0099               	movwf	25	;volatile
  2914  0511                     l2544:
  2915  0511  1399               	bcf	25,7	;volatile
  2916  0512                     l2546:
  2917  0512  3000               	movlw	0
  2918  0513  0022               	movlb	2	; select bank2
  2919  0514  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2920  0515  3001               	movlw	1
  2921  0516  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2922  0517  30E8               	movlw	232
  2923  0518  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2924  0519  3048               	movlw	72
  2925  051A  00E0               	movwf	_clockFrequency^(0+256)
  2926  051B  2DBD               	goto	l137
  2927  051C                     l2548:
  2928  051C  0819               	movf	25,w	;volatile
  2929  051D  3987               	andlw	-121
  2930  051E  3830               	iorlw	48
  2931  051F  0099               	movwf	25	;volatile
  2932  0520                     l2550:
  2933  0520  1399               	bcf	25,7	;volatile
  2934  0521                     l2552:
  2935  0521  3000               	movlw	0
  2936  0522  0022               	movlb	2	; select bank2
  2937  0523  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2938  0524  3003               	movlw	3
  2939  0525  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2940  0526  30D0               	movlw	208
  2941  0527  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2942  0528  3090               	movlw	144
  2943  0529  00E0               	movwf	_clockFrequency^(0+256)
  2944  052A  2DBD               	goto	l137
  2945  052B                     l2554:
  2946  052B  0819               	movf	25,w	;volatile
  2947  052C  3987               	andlw	-121
  2948  052D  3838               	iorlw	56
  2949  052E  0099               	movwf	25	;volatile
  2950  052F                     l2556:
  2951  052F  1399               	bcf	25,7	;volatile
  2952  0530                     l2558:
  2953  0530  3000               	movlw	0
  2954  0531  0022               	movlb	2	; select bank2
  2955  0532  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2956  0533  3007               	movlw	7
  2957  0534  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2958  0535  30A1               	movlw	161
  2959  0536  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2960  0537  3020               	movlw	32
  2961  0538  00E0               	movwf	_clockFrequency^(0+256)
  2962  0539  2DBD               	goto	l137
  2963  053A                     l2560:
  2964  053A  0819               	movf	25,w	;volatile
  2965  053B  3987               	andlw	-121
  2966  053C  3858               	iorlw	88
  2967  053D  0099               	movwf	25	;volatile
  2968  053E                     l2562:
  2969  053E  1399               	bcf	25,7	;volatile
  2970  053F                     l2564:
  2971  053F  3000               	movlw	0
  2972  0540  0022               	movlb	2	; select bank2
  2973  0541  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2974  0542  300F               	movlw	15
  2975  0543  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2976  0544  3042               	movlw	66
  2977  0545  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2978  0546  3040               	movlw	64
  2979  0547  00E0               	movwf	_clockFrequency^(0+256)
  2980  0548  2DBD               	goto	l137
  2981  0549                     l2566:
  2982  0549  0819               	movf	25,w	;volatile
  2983  054A  3987               	andlw	-121
  2984  054B  3860               	iorlw	96
  2985  054C  0099               	movwf	25	;volatile
  2986  054D                     l2568:
  2987  054D  1399               	bcf	25,7	;volatile
  2988  054E                     l2570:
  2989  054E  3000               	movlw	0
  2990  054F  0022               	movlb	2	; select bank2
  2991  0550  00E3               	movwf	(_clockFrequency+3)^(0+256)
  2992  0551  301E               	movlw	30
  2993  0552  00E2               	movwf	(_clockFrequency+2)^(0+256)
  2994  0553  3084               	movlw	132
  2995  0554  00E1               	movwf	(_clockFrequency+1)^(0+256)
  2996  0555  3080               	movlw	128
  2997  0556  00E0               	movwf	_clockFrequency^(0+256)
  2998  0557  2DBD               	goto	l137
  2999  0558                     l2572:
  3000  0558  0819               	movf	25,w	;volatile
  3001  0559  3987               	andlw	-121
  3002  055A  3868               	iorlw	104
  3003  055B  0099               	movwf	25	;volatile
  3004  055C                     l2574:
  3005  055C  1399               	bcf	25,7	;volatile
  3006  055D                     l2576:
  3007  055D  3000               	movlw	0
  3008  055E  0022               	movlb	2	; select bank2
  3009  055F  00E3               	movwf	(_clockFrequency+3)^(0+256)
  3010  0560  303D               	movlw	61
  3011  0561  00E2               	movwf	(_clockFrequency+2)^(0+256)
  3012  0562  3009               	movlw	9
  3013  0563  00E1               	movwf	(_clockFrequency+1)^(0+256)
  3014  0564  3000               	movlw	0
  3015  0565  00E0               	movwf	_clockFrequency^(0+256)
  3016  0566  2DBD               	goto	l137
  3017  0567                     l2578:
  3018  0567  0819               	movf	25,w	;volatile
  3019  0568  3987               	andlw	-121
  3020  0569  3870               	iorlw	112
  3021  056A  0099               	movwf	25	;volatile
  3022  056B                     l2580:
  3023  056B  1399               	bcf	25,7	;volatile
  3024  056C                     l2582:
  3025  056C  3000               	movlw	0
  3026  056D  0022               	movlb	2	; select bank2
  3027  056E  00E3               	movwf	(_clockFrequency+3)^(0+256)
  3028  056F  307A               	movlw	122
  3029  0570  00E2               	movwf	(_clockFrequency+2)^(0+256)
  3030  0571  3012               	movlw	18
  3031  0572  00E1               	movwf	(_clockFrequency+1)^(0+256)
  3032  0573  3000               	movlw	0
  3033  0574  00E0               	movwf	_clockFrequency^(0+256)
  3034  0575  2DBD               	goto	l137
  3035  0576                     l2584:
  3036  0576  3078               	movlw	120
  3037  0577  0499               	iorwf	25,f	;volatile
  3038  0578                     l2586:
  3039  0578  1399               	bcf	25,7	;volatile
  3040  0579                     l2588:
  3041  0579  3000               	movlw	0
  3042  057A  0022               	movlb	2	; select bank2
  3043  057B  00E3               	movwf	(_clockFrequency+3)^(0+256)
  3044  057C  30F4               	movlw	244
  3045  057D  00E2               	movwf	(_clockFrequency+2)^(0+256)
  3046  057E  3024               	movlw	36
  3047  057F  00E1               	movwf	(_clockFrequency+1)^(0+256)
  3048  0580  3000               	movlw	0
  3049  0581  00E0               	movwf	_clockFrequency^(0+256)
  3050  0582  2DBD               	goto	l137
  3051  0583                     l2590:
  3052  0583  0819               	movf	25,w	;volatile
  3053  0584  3987               	andlw	-121
  3054  0585  3870               	iorlw	112
  3055  0586  0099               	movwf	25	;volatile
  3056  0587                     l2592:
  3057  0587  1799               	bsf	25,7	;volatile
  3058  0588                     l2594:
  3059  0588  3001               	movlw	1
  3060  0589  0022               	movlb	2	; select bank2
  3061  058A  00E3               	movwf	(_clockFrequency+3)^(0+256)
  3062  058B  30E8               	movlw	232
  3063  058C  00E2               	movwf	(_clockFrequency+2)^(0+256)
  3064  058D  3048               	movlw	72
  3065  058E  00E1               	movwf	(_clockFrequency+1)^(0+256)
  3066  058F  3000               	movlw	0
  3067  0590  00E0               	movwf	_clockFrequency^(0+256)
  3068  0591  2DBD               	goto	l137
  3069  0592                     l2598:
  3070  0592  0864               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3071  0593  00E2               	movwf	??_setupInternalOscillator^(0+128)
  3072  0594  01E3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3073                           
  3074                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3075                           ; Switch size 1, requested type "simple"
  3076                           ; Number of cases is 1, Range of values is 0 to 0
  3077                           ; switch strategies available:
  3078                           ; Name         Instructions Cycles
  3079                           ; simple_byte            4     3 (average)
  3080                           ; direct_byte            8     6 (fixed)
  3081                           ; jumptable            260     6 (fixed)
  3082                           ;	Chosen strategy is simple_byte
  3083  0595  0863               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3084  0596  3A00               	xorlw	0	; case 0
  3085  0597  1903               	skipnz
  3086  0598  2D9A               	goto	l2810
  3087  0599  2DBD               	goto	l137
  3088  059A                     l2810:
  3089                           
  3090                           ; Switch size 1, requested type "simple"
  3091                           ; Number of cases is 11, Range of values is 0 to 10
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; direct_byte           28     6 (fixed)
  3095                           ; simple_byte           34    18 (average)
  3096                           ; jumptable            260     6 (fixed)
  3097                           ;	Chosen strategy is simple_byte
  3098  059A  0862               	movf	??_setupInternalOscillator^(0+128),w
  3099  059B  3A00               	xorlw	0	; case 0
  3100  059C  1903               	skipnz
  3101  059D  2CF1               	goto	l2530
  3102  059E  3A01               	xorlw	1	; case 1
  3103  059F  1903               	skipnz
  3104  05A0  2CFE               	goto	l2536
  3105  05A1  3A03               	xorlw	3	; case 2
  3106  05A2  1903               	skipnz
  3107  05A3  2D0D               	goto	l2542
  3108  05A4  3A01               	xorlw	1	; case 3
  3109  05A5  1903               	skipnz
  3110  05A6  2D1C               	goto	l2548
  3111  05A7  3A07               	xorlw	7	; case 4
  3112  05A8  1903               	skipnz
  3113  05A9  2D2B               	goto	l2554
  3114  05AA  3A01               	xorlw	1	; case 5
  3115  05AB  1903               	skipnz
  3116  05AC  2D3A               	goto	l2560
  3117  05AD  3A03               	xorlw	3	; case 6
  3118  05AE  1903               	skipnz
  3119  05AF  2D49               	goto	l2566
  3120  05B0  3A01               	xorlw	1	; case 7
  3121  05B1  1903               	skipnz
  3122  05B2  2D58               	goto	l2572
  3123  05B3  3A0F               	xorlw	15	; case 8
  3124  05B4  1903               	skipnz
  3125  05B5  2D67               	goto	l2578
  3126  05B6  3A01               	xorlw	1	; case 9
  3127  05B7  1903               	skipnz
  3128  05B8  2D76               	goto	l2584
  3129  05B9  3A03               	xorlw	3	; case 10
  3130  05BA  1903               	skipnz
  3131  05BB  2D83               	goto	l2590
  3132  05BC  2DBD               	goto	l137
  3133  05BD                     l137:
  3134  05BD  0008               	return
  3135  05BE                     __end_of_setupInternalOscillator:
  3136                           
  3137                           	psect	text7
  3138  0DF3                     __ptext7:	
  3139 ;; *************** function _readGPIO *****************
  3140 ;; Defined at:
  3141 ;;		line 79 in file "GPIO.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  gpioNumber      1    wreg     const enum E2798
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3146 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3147 ;;  readB           1    4[BANK1 ] unsigned char 
  3148 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3149 ;;  readA           1    2[BANK1 ] unsigned char 
  3150 ;;  portType        1    7[BANK1 ] unsigned char 
  3151 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      _Bool 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3161 ;;      Params:         0       0       0       0       0       0
  3162 ;;      Locals:         0       0       7       0       0       0
  3163 ;;      Temps:          0       0       2       0       0       0
  3164 ;;      Totals:         0       0       9       0       0       0
  3165 ;;Total ram usage:        9 bytes
  3166 ;; Hardware stack levels used: 1
  3167 ;; Hardware stack levels required when called: 5
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_main
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175  0DF3                     _readGPIO:	
  3176                           ;psect for function _readGPIO
  3177                           
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3181                           ;readGPIO@gpioNumber stored from wreg
  3182  0DF3  0021               	movlb	1	; select bank1
  3183  0DF4  00EA               	movwf	readGPIO@gpioNumber^(0+128)
  3184  0DF5                     l2644:
  3185                           
  3186                           ;GPIO.c: 81:     uint8_t portType = 0;
  3187  0DF5  01E9               	clrf	readGPIO@portType^(0+128)
  3188  0DF6                     l2646:
  3189                           
  3190                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3191  0DF6  3008               	movlw	8
  3192  0DF7  026A               	subwf	readGPIO@gpioNumber^(0+128),w
  3193  0DF8  1C03               	skipc
  3194  0DF9  2DFB               	goto	u2381
  3195  0DFA  2DFC               	goto	u2380
  3196  0DFB                     u2381:
  3197  0DFB  2E04               	goto	l2652
  3198  0DFC                     u2380:
  3199  0DFC                     l2648:
  3200                           
  3201                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3202  0DFC  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3203  0DFD  3EF8               	addlw	248
  3204  0DFE  00E2               	movwf	??_readGPIO^(0+128)
  3205  0DFF  0862               	movf	??_readGPIO^(0+128),w
  3206  0E00  00E8               	movwf	readGPIO@portNumber^(0+128)
  3207  0E01                     l2650:
  3208                           
  3209                           ;GPIO.c: 84:         portType = 1;
  3210  0E01  01E9               	clrf	readGPIO@portType^(0+128)
  3211  0E02  0AE9               	incf	readGPIO@portType^(0+128),f
  3212                           
  3213                           ;GPIO.c: 85:     }
  3214  0E03  2E09               	goto	l2656
  3215  0E04                     l2652:
  3216                           
  3217                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3218  0E04  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3219  0E05  00E2               	movwf	??_readGPIO^(0+128)
  3220  0E06  0862               	movf	??_readGPIO^(0+128),w
  3221  0E07  00E8               	movwf	readGPIO@portNumber^(0+128)
  3222  0E08                     l2654:
  3223                           
  3224                           ;GPIO.c: 88:         portType = 0;
  3225  0E08  01E9               	clrf	readGPIO@portType^(0+128)
  3226  0E09                     l2656:
  3227                           
  3228                           ;GPIO.c: 91:     if(portType == 0){
  3229  0E09  0869               	movf	readGPIO@portType^(0+128),w
  3230  0E0A  1D03               	btfss	3,2
  3231  0E0B  2E0D               	goto	u2391
  3232  0E0C  2E0E               	goto	u2390
  3233  0E0D                     u2391:
  3234  0E0D  2E22               	goto	l2668
  3235  0E0E                     u2390:
  3236  0E0E                     l2658:
  3237                           
  3238                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3239  0E0E  0020               	movlb	0	; select bank0
  3240  0E0F  080C               	movf	12,w	;volatile
  3241  0E10  0021               	movlb	1	; select bank1
  3242  0E11  00E2               	movwf	??_readGPIO^(0+128)
  3243  0E12  0862               	movf	??_readGPIO^(0+128),w
  3244  0E13  00E4               	movwf	readGPIO@readA^(0+128)
  3245  0E14                     l2660:
  3246                           
  3247                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3248  0E14  0864               	movf	readGPIO@readA^(0+128),w
  3249  0E15  00E2               	movwf	??_readGPIO^(0+128)
  3250  0E16  0A68               	incf	readGPIO@portNumber^(0+128),w
  3251  0E17  2E19               	goto	u2404
  3252  0E18                     u2405:
  3253  0E18  36E2               	lsrf	??_readGPIO^(0+128),f
  3254  0E19                     u2404:
  3255  0E19  0B89               	decfsz	9,f
  3256  0E1A  2E18               	goto	u2405
  3257  0E1B  0862               	movf	??_readGPIO^(0+128),w
  3258  0E1C  3901               	andlw	1
  3259  0E1D  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3260  0E1E  0863               	movf	(??_readGPIO+1)^(0+128),w
  3261  0E1F  00E5               	movwf	readGPIO@returnValueA^(0+128)
  3262  0E20                     l2662:
  3263                           
  3264                           ;GPIO.c: 94:         return returnValueA;
  3265  0E20  0865               	movf	readGPIO@returnValueA^(0+128),w
  3266  0E21  2E3C               	goto	l324
  3267  0E22                     l2668:
  3268  0E22  0369               	decf	readGPIO@portType^(0+128),w
  3269  0E23  1D03               	btfss	3,2
  3270  0E24  2E26               	goto	u2411
  3271  0E25  2E27               	goto	u2410
  3272  0E26                     u2411:
  3273  0E26  2E3B               	goto	l2680
  3274  0E27                     u2410:
  3275  0E27                     l2670:
  3276                           
  3277                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3278  0E27  0020               	movlb	0	; select bank0
  3279  0E28  080D               	movf	13,w	;volatile
  3280  0E29  0021               	movlb	1	; select bank1
  3281  0E2A  00E2               	movwf	??_readGPIO^(0+128)
  3282  0E2B  0862               	movf	??_readGPIO^(0+128),w
  3283  0E2C  00E6               	movwf	readGPIO@readB^(0+128)
  3284  0E2D                     l2672:
  3285                           
  3286                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3287  0E2D  0866               	movf	readGPIO@readB^(0+128),w
  3288  0E2E  00E2               	movwf	??_readGPIO^(0+128)
  3289  0E2F  0A68               	incf	readGPIO@portNumber^(0+128),w
  3290  0E30  2E32               	goto	u2424
  3291  0E31                     u2425:
  3292  0E31  36E2               	lsrf	??_readGPIO^(0+128),f
  3293  0E32                     u2424:
  3294  0E32  0B89               	decfsz	9,f
  3295  0E33  2E31               	goto	u2425
  3296  0E34  0862               	movf	??_readGPIO^(0+128),w
  3297  0E35  3901               	andlw	1
  3298  0E36  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3299  0E37  0863               	movf	(??_readGPIO+1)^(0+128),w
  3300  0E38  00E7               	movwf	readGPIO@returnValueB^(0+128)
  3301  0E39                     l2674:
  3302                           
  3303                           ;GPIO.c: 99:         return returnValueB;
  3304  0E39  0867               	movf	readGPIO@returnValueB^(0+128),w
  3305  0E3A  2E3C               	goto	l324
  3306  0E3B                     l2680:
  3307  0E3B  3000               	movlw	0
  3308  0E3C                     l324:
  3309  0E3C  0008               	return
  3310  0E3D                     __end_of_readGPIO:
  3311                           
  3312                           	psect	text8
  3313  0BBE                     __ptext8:	
  3314 ;; *************** function _initialisePotentiometers *****************
  3315 ;; Defined at:
  3316 ;;		line 15 in file "Potentiometer.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;		None
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0, pclath, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3330 ;;      Params:         0       0       0       0       0       0
  3331 ;;      Locals:         0       0       0       0       0       0
  3332 ;;      Temps:          0       0       0       0       0       0
  3333 ;;      Totals:         0       0       0       0       0       0
  3334 ;;Total ram usage:        0 bytes
  3335 ;; Hardware stack levels used: 1
  3336 ;; Hardware stack levels required when called: 6
  3337 ;; This function calls:
  3338 ;;		_initialiseADCPin
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344  0BBE                     _initialisePotentiometers:	
  3345                           ;psect for function _initialisePotentiometers
  3346                           
  3347  0BBE                     l2638:	
  3348                           ;incstack = 0
  3349                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3350                           
  3351                           
  3352                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3353  0BBE  3009               	movlw	9
  3354  0BBF  3186  2634  318B   	fcall	_initialiseADCPin
  3355                           
  3356                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3357  0BC2  300A               	movlw	10
  3358  0BC3  3186  2634  318B   	fcall	_initialiseADCPin
  3359  0BC6                     l356:
  3360  0BC6  0008               	return
  3361  0BC7                     __end_of_initialisePotentiometers:
  3362                           
  3363                           	psect	text9
  3364  0C6D                     __ptext9:	
  3365 ;; *************** function _initialiseCurrentSensors *****************
  3366 ;; Defined at:
  3367 ;;		line 18 in file "CurrentSensor.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0, pclath, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3381 ;;      Params:         0       0       0       0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0
  3384 ;;      Totals:         0       0       0       0       0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used: 1
  3387 ;; Hardware stack levels required when called: 7
  3388 ;; This function calls:
  3389 ;;		_currentTripReset
  3390 ;;		_initialiseADCPin
  3391 ;;		_initialiseGPIO
  3392 ;; This function is called by:
  3393 ;;		_main
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397  0C6D                     _initialiseCurrentSensors:	
  3398                           ;psect for function _initialiseCurrentSensors
  3399                           
  3400  0C6D                     l2636:	
  3401                           ;incstack = 0
  3402                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3403                           
  3404                           
  3405                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3406  0C6D  0021               	movlb	1	; select bank1
  3407  0C6E  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3408  0C6F  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3409  0C70  3003               	movlw	3
  3410  0C71  3185  25BE  318C   	fcall	_initialiseGPIO
  3411                           
  3412                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3413  0C74  0021               	movlb	1	; select bank1
  3414  0C75  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3415  0C76  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3416  0C77  3001               	movlw	1
  3417  0C78  3185  25BE  318C   	fcall	_initialiseGPIO
  3418                           
  3419                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3420  0C7B  3000               	movlw	0
  3421  0C7C  3186  2634  318C   	fcall	_initialiseADCPin
  3422                           
  3423                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3424  0C7F  3002               	movlw	2
  3425  0C80  3186  2634  318C   	fcall	_initialiseADCPin
  3426                           
  3427                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3428  0C83  0021               	movlb	1	; select bank1
  3429  0C84  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3430  0C85  300B               	movlw	11
  3431  0C86  3185  25BE  318C   	fcall	_initialiseGPIO
  3432                           
  3433                           ;CurrentSensor.c: 24:     currentTripReset();
  3434  0C89  318B  23D3  318C   	fcall	_currentTripReset
  3435  0C8C                     l510:
  3436  0C8C  0008               	return
  3437  0C8D                     __end_of_initialiseCurrentSensors:
  3438                           
  3439                           	psect	text10
  3440  0BD3                     __ptext10:	
  3441 ;; *************** function _currentTripReset *****************
  3442 ;; Defined at:
  3443 ;;		line 71 in file "CurrentSensor.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;		None
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;		None
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0, pclath, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3457 ;;      Params:         0       0       0       0       0       0
  3458 ;;      Locals:         0       0       0       0       0       0
  3459 ;;      Temps:          0       0       0       0       0       0
  3460 ;;      Totals:         0       0       0       0       0       0
  3461 ;;Total ram usage:        0 bytes
  3462 ;; Hardware stack levels used: 1
  3463 ;; Hardware stack levels required when called: 6
  3464 ;; This function calls:
  3465 ;;		_writeGPIO
  3466 ;; This function is called by:
  3467 ;;		_initialiseCurrentSensors
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471  0BD3                     _currentTripReset:	
  3472                           ;psect for function _currentTripReset
  3473                           
  3474  0BD3                     l2292:	
  3475                           ;incstack = 0
  3476                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3477                           
  3478                           
  3479                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3480  0BD3  0021               	movlb	1	; select bank1
  3481  0BD4  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3482  0BD5  300B               	movlw	11
  3483  0BD6  3186  269A  318B   	fcall	_writeGPIO
  3484  0BD9                     l2294:
  3485                           
  3486                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3487                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3488  0BD9  0021               	movlb	1	; select bank1
  3489  0BDA  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3490  0BDB  0AE2               	incf	writeGPIO@writeValue^(0+128),f
  3491  0BDC  300B               	movlw	11
  3492  0BDD  3186  269A  318B   	fcall	_writeGPIO
  3493  0BE0                     l532:
  3494  0BE0  0008               	return
  3495  0BE1                     __end_of_currentTripReset:
  3496                           
  3497                           	psect	text11
  3498  069A                     __ptext11:	
  3499 ;; *************** function _writeGPIO *****************
  3500 ;; Defined at:
  3501 ;;		line 52 in file "GPIO.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  gpioNumber      1    wreg     const enum E2798
  3504 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3507 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3508 ;;  portType        1    3[BANK1 ] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3518 ;;      Params:         0       0       1       0       0       0
  3519 ;;      Locals:         0       0       3       0       0       0
  3520 ;;      Temps:          0       0       2       0       0       0
  3521 ;;      Totals:         0       0       6       0       0       0
  3522 ;;Total ram usage:        6 bytes
  3523 ;; Hardware stack levels used: 1
  3524 ;; Hardware stack levels required when called: 5
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_currentTripReset
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532  069A                     _writeGPIO:	
  3533                           ;psect for function _writeGPIO
  3534                           
  3535                           
  3536                           ;incstack = 0
  3537                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3538                           ;writeGPIO@gpioNumber stored from wreg
  3539  069A  0021               	movlb	1	; select bank1
  3540  069B  00E6               	movwf	writeGPIO@gpioNumber^(0+128)
  3541  069C                     l2030:
  3542                           
  3543                           ;GPIO.c: 54:     uint8_t portType = 0;
  3544  069C  01E5               	clrf	writeGPIO@portType^(0+128)
  3545  069D                     l2032:
  3546                           
  3547                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3548  069D  3008               	movlw	8
  3549  069E  0266               	subwf	writeGPIO@gpioNumber^(0+128),w
  3550  069F  1C03               	skipc
  3551  06A0  2EA2               	goto	u1361
  3552  06A1  2EA3               	goto	u1360
  3553  06A2                     u1361:
  3554  06A2  2EAB               	goto	l2038
  3555  06A3                     u1360:
  3556  06A3                     l2034:
  3557                           
  3558                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3559  06A3  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3560  06A4  3EF8               	addlw	248
  3561  06A5  00E3               	movwf	??_writeGPIO^(0+128)
  3562  06A6  0863               	movf	??_writeGPIO^(0+128),w
  3563  06A7  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3564  06A8                     l2036:
  3565                           
  3566                           ;GPIO.c: 57:         portType = 1;
  3567  06A8  01E5               	clrf	writeGPIO@portType^(0+128)
  3568  06A9  0AE5               	incf	writeGPIO@portType^(0+128),f
  3569                           
  3570                           ;GPIO.c: 58:     }
  3571  06AA  2EB0               	goto	l2042
  3572  06AB                     l2038:
  3573                           
  3574                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3575  06AB  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3576  06AC  00E3               	movwf	??_writeGPIO^(0+128)
  3577  06AD  0863               	movf	??_writeGPIO^(0+128),w
  3578  06AE  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3579  06AF                     l2040:
  3580                           
  3581                           ;GPIO.c: 61:         portType = 0;
  3582  06AF  01E5               	clrf	writeGPIO@portType^(0+128)
  3583  06B0                     l2042:
  3584                           
  3585                           ;GPIO.c: 64:     if(portType == 0){
  3586  06B0  0865               	movf	writeGPIO@portType^(0+128),w
  3587  06B1  1D03               	btfss	3,2
  3588  06B2  2EB4               	goto	u1371
  3589  06B3  2EB5               	goto	u1370
  3590  06B4                     u1371:
  3591  06B4  2ED5               	goto	l2050
  3592  06B5                     u1370:
  3593  06B5                     l2044:
  3594                           
  3595                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3596  06B5  0862               	movf	writeGPIO@writeValue^(0+128),w
  3597  06B6  1903               	btfsc	3,2
  3598  06B7  2EB9               	goto	u1381
  3599  06B8  2EBA               	goto	u1380
  3600  06B9                     u1381:
  3601  06B9  2EC7               	goto	l2048
  3602  06BA                     u1380:
  3603  06BA                     l2046:
  3604  06BA  3001               	movlw	1
  3605  06BB  00E3               	movwf	??_writeGPIO^(0+128)
  3606  06BC  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3607  06BD  2EBF               	goto	u1394
  3608  06BE                     u1395:
  3609  06BE  35E3               	lslf	??_writeGPIO^(0+128),f
  3610  06BF                     u1394:
  3611  06BF  0B89               	decfsz	9,f
  3612  06C0  2EBE               	goto	u1395
  3613  06C1  0863               	movf	??_writeGPIO^(0+128),w
  3614  06C2  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3615  06C3  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3616  06C4  0022               	movlb	2	; select bank2
  3617  06C5  048C               	iorwf	12,f	;volatile
  3618  06C6  2EF9               	goto	l318
  3619  06C7                     l2048:
  3620  06C7  3001               	movlw	1
  3621  06C8  00E3               	movwf	??_writeGPIO^(0+128)
  3622  06C9  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3623  06CA  2ECC               	goto	u1404
  3624  06CB                     u1405:
  3625  06CB  35E3               	lslf	??_writeGPIO^(0+128),f
  3626  06CC                     u1404:
  3627  06CC  0B89               	decfsz	9,f
  3628  06CD  2ECB               	goto	u1405
  3629  06CE  0863               	movf	??_writeGPIO^(0+128),w
  3630  06CF  3AFF               	xorlw	255
  3631  06D0  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3632  06D1  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3633  06D2  0022               	movlb	2	; select bank2
  3634  06D3  058C               	andwf	12,f	;volatile
  3635  06D4  2EF9               	goto	l318
  3636  06D5                     l2050:
  3637  06D5  0365               	decf	writeGPIO@portType^(0+128),w
  3638  06D6  1D03               	btfss	3,2
  3639  06D7  2ED9               	goto	u1411
  3640  06D8  2EDA               	goto	u1410
  3641  06D9                     u1411:
  3642  06D9  2EF9               	goto	l318
  3643  06DA                     u1410:
  3644  06DA                     l2052:
  3645                           
  3646                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3647  06DA  0862               	movf	writeGPIO@writeValue^(0+128),w
  3648  06DB  1903               	btfsc	3,2
  3649  06DC  2EDE               	goto	u1421
  3650  06DD  2EDF               	goto	u1420
  3651  06DE                     u1421:
  3652  06DE  2EEC               	goto	l2056
  3653  06DF                     u1420:
  3654  06DF                     l2054:
  3655  06DF  3001               	movlw	1
  3656  06E0  00E3               	movwf	??_writeGPIO^(0+128)
  3657  06E1  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3658  06E2  2EE4               	goto	u1434
  3659  06E3                     u1435:
  3660  06E3  35E3               	lslf	??_writeGPIO^(0+128),f
  3661  06E4                     u1434:
  3662  06E4  0B89               	decfsz	9,f
  3663  06E5  2EE3               	goto	u1435
  3664  06E6  0863               	movf	??_writeGPIO^(0+128),w
  3665  06E7  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3666  06E8  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3667  06E9  0022               	movlb	2	; select bank2
  3668  06EA  048D               	iorwf	13,f	;volatile
  3669  06EB  2EF9               	goto	l318
  3670  06EC                     l2056:
  3671  06EC  3001               	movlw	1
  3672  06ED  00E3               	movwf	??_writeGPIO^(0+128)
  3673  06EE  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3674  06EF  2EF1               	goto	u1444
  3675  06F0                     u1445:
  3676  06F0  35E3               	lslf	??_writeGPIO^(0+128),f
  3677  06F1                     u1444:
  3678  06F1  0B89               	decfsz	9,f
  3679  06F2  2EF0               	goto	u1445
  3680  06F3  0863               	movf	??_writeGPIO^(0+128),w
  3681  06F4  3AFF               	xorlw	255
  3682  06F5  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3683  06F6  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3684  06F7  0022               	movlb	2	; select bank2
  3685  06F8  058D               	andwf	13,f	;volatile
  3686  06F9                     l318:
  3687  06F9  0008               	return
  3688  06FA                     __end_of_writeGPIO:
  3689                           
  3690                           	psect	text12
  3691  0C31                     __ptext12:	
  3692 ;; *************** function _initialiseController *****************
  3693 ;; Defined at:
  3694 ;;		line 23 in file "Controller.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3708 ;;      Params:         0       0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0
  3711 ;;      Totals:         0       0       0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used: 1
  3714 ;; Hardware stack levels required when called: 6
  3715 ;; This function calls:
  3716 ;;		_initialiseADCPin
  3717 ;;		_initialiseGPIO
  3718 ;; This function is called by:
  3719 ;;		_main
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723  0C31                     _initialiseController:	
  3724                           ;psect for function _initialiseController
  3725                           
  3726  0C31                     l2640:	
  3727                           ;incstack = 0
  3728                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3729                           
  3730                           
  3731                           ;Controller.c: 24:     initialiseGPIO(pinRA4, 1);
  3732  0C31  0021               	movlb	1	; select bank1
  3733  0C32  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3734  0C33  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3735  0C34  3004               	movlw	4
  3736  0C35  3185  25BE  318C   	fcall	_initialiseGPIO
  3737                           
  3738                           ;Controller.c: 25:     initialiseADCPin(pinRA4);
  3739  0C38  3004               	movlw	4
  3740  0C39  3186  2634  318C   	fcall	_initialiseADCPin
  3741  0C3C                     l2642:
  3742                           
  3743                           ;Controller.c: 26:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (6u + 16u)
      +                          );
  3744  0C3C  3000               	movlw	0
  3745  0C3D  0021               	movlb	1	; select bank1
  3746  0C3E  00C3               	movwf	(_integratorScaledLimit+7)^(0+128)
  3747  0C3F  3000               	movlw	0
  3748  0C40  00C2               	movwf	(_integratorScaledLimit+6)^(0+128)
  3749  0C41  3000               	movlw	0
  3750  0C42  00C1               	movwf	(_integratorScaledLimit+5)^(0+128)
  3751  0C43  3000               	movlw	0
  3752  0C44  00C0               	movwf	(_integratorScaledLimit+4)^(0+128)
  3753  0C45  3080               	movlw	128
  3754  0C46  00BF               	movwf	(_integratorScaledLimit+3)^(0+128)
  3755  0C47  3000               	movlw	0
  3756  0C48  00BE               	movwf	(_integratorScaledLimit+2)^(0+128)
  3757  0C49  3000               	movlw	0
  3758  0C4A  00BD               	movwf	(_integratorScaledLimit+1)^(0+128)
  3759  0C4B  3000               	movlw	0
  3760  0C4C  00BC               	movwf	_integratorScaledLimit^(0+128)
  3761  0C4D                     l434:
  3762  0C4D  0008               	return
  3763  0C4E                     __end_of_initialiseController:
  3764                           
  3765                           	psect	text13
  3766  05BE                     __ptext13:	
  3767 ;; *************** function _initialiseGPIO *****************
  3768 ;; Defined at:
  3769 ;;		line 18 in file "GPIO.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  gpioNumber      1    wreg     const enum E2798
  3772 ;;  direction       1    0[BANK1 ] unsigned char 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3775 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3776 ;;  portType        1    3[BANK1 ] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3786 ;;      Params:         0       0       1       0       0       0
  3787 ;;      Locals:         0       0       3       0       0       0
  3788 ;;      Temps:          0       0       2       0       0       0
  3789 ;;      Totals:         0       0       6       0       0       0
  3790 ;;Total ram usage:        6 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 5
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;;		_setupPWM
  3798 ;;		_initialiseController
  3799 ;;		_initialiseCurrentSensors
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803  05BE                     _initialiseGPIO:	
  3804                           ;psect for function _initialiseGPIO
  3805                           
  3806                           
  3807                           ;incstack = 0
  3808                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3809                           ;initialiseGPIO@gpioNumber stored from wreg
  3810  05BE  0021               	movlb	1	; select bank1
  3811  05BF  00E6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3812  05C0                     l2158:
  3813                           
  3814                           ;GPIO.c: 20:     uint8_t portType = 0;
  3815  05C0  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3816  05C1                     l2160:
  3817                           
  3818                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3819  05C1  3008               	movlw	8
  3820  05C2  0266               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3821  05C3  1C03               	skipc
  3822  05C4  2DC6               	goto	u1641
  3823  05C5  2DC7               	goto	u1640
  3824  05C6                     u1641:
  3825  05C6  2DCF               	goto	l2166
  3826  05C7                     u1640:
  3827  05C7                     l2162:
  3828                           
  3829                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3830  05C7  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3831  05C8  3EF8               	addlw	248
  3832  05C9  00E3               	movwf	??_initialiseGPIO^(0+128)
  3833  05CA  0863               	movf	??_initialiseGPIO^(0+128),w
  3834  05CB  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3835  05CC                     l2164:
  3836                           
  3837                           ;GPIO.c: 23:         portType = 1;
  3838  05CC  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3839  05CD  0AE5               	incf	initialiseGPIO@portType^(0+128),f
  3840                           
  3841                           ;GPIO.c: 24:     }
  3842  05CE  2DD4               	goto	l2170
  3843  05CF                     l2166:
  3844                           
  3845                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3846  05CF  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3847  05D0  00E3               	movwf	??_initialiseGPIO^(0+128)
  3848  05D1  0863               	movf	??_initialiseGPIO^(0+128),w
  3849  05D2  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3850  05D3                     l2168:
  3851                           
  3852                           ;GPIO.c: 27:         portType = 0;
  3853  05D3  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3854  05D4                     l2170:
  3855                           
  3856                           ;GPIO.c: 30:     if(portType == 0){
  3857  05D4  0865               	movf	initialiseGPIO@portType^(0+128),w
  3858  05D5  1D03               	btfss	3,2
  3859  05D6  2DD8               	goto	u1651
  3860  05D7  2DD9               	goto	u1650
  3861  05D8                     u1651:
  3862  05D8  2E04               	goto	l2178
  3863  05D9                     u1650:
  3864  05D9                     l2172:
  3865                           
  3866                           ;GPIO.c: 31:         if(direction){
  3867  05D9  0862               	movf	initialiseGPIO@direction^(0+128),w
  3868  05DA  1903               	btfsc	3,2
  3869  05DB  2DDD               	goto	u1661
  3870  05DC  2DDE               	goto	u1660
  3871  05DD                     u1661:
  3872  05DD  2DF7               	goto	l2176
  3873  05DE                     u1660:
  3874  05DE                     l2174:
  3875                           
  3876                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3877  05DE  3001               	movlw	1
  3878  05DF  00E3               	movwf	??_initialiseGPIO^(0+128)
  3879  05E0  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3880  05E1  2DE3               	goto	u1674
  3881  05E2                     u1675:
  3882  05E2  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3883  05E3                     u1674:
  3884  05E3  0B89               	decfsz	9,f
  3885  05E4  2DE2               	goto	u1675
  3886  05E5  0863               	movf	??_initialiseGPIO^(0+128),w
  3887  05E6  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3888  05E7  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3889  05E8  048C               	iorwf	12,f	;volatile
  3890                           
  3891                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3892  05E9  3001               	movlw	1
  3893  05EA  00E3               	movwf	??_initialiseGPIO^(0+128)
  3894  05EB  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3895  05EC  2DEE               	goto	u1684
  3896  05ED                     u1685:
  3897  05ED  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3898  05EE                     u1684:
  3899  05EE  0B89               	decfsz	9,f
  3900  05EF  2DED               	goto	u1685
  3901  05F0  0863               	movf	??_initialiseGPIO^(0+128),w
  3902  05F1  3AFF               	xorlw	255
  3903  05F2  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3904  05F3  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3905  05F4  0023               	movlb	3	; select bank3
  3906  05F5  058C               	andwf	12,f	;volatile
  3907                           
  3908                           ;GPIO.c: 34:         }
  3909  05F6  2E33               	goto	l304
  3910  05F7                     l2176:
  3911  05F7  3001               	movlw	1
  3912  05F8  00E3               	movwf	??_initialiseGPIO^(0+128)
  3913  05F9  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3914  05FA  2DFC               	goto	u1694
  3915  05FB                     u1695:
  3916  05FB  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3917  05FC                     u1694:
  3918  05FC  0B89               	decfsz	9,f
  3919  05FD  2DFB               	goto	u1695
  3920  05FE  0863               	movf	??_initialiseGPIO^(0+128),w
  3921  05FF  3AFF               	xorlw	255
  3922  0600  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3923  0601  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3924  0602  058C               	andwf	12,f	;volatile
  3925  0603  2E33               	goto	l304
  3926  0604                     l2178:
  3927  0604  0365               	decf	initialiseGPIO@portType^(0+128),w
  3928  0605  1D03               	btfss	3,2
  3929  0606  2E08               	goto	u1701
  3930  0607  2E09               	goto	u1700
  3931  0608                     u1701:
  3932  0608  2E33               	goto	l304
  3933  0609                     u1700:
  3934  0609                     l2180:
  3935                           
  3936                           ;GPIO.c: 38:         if(direction){
  3937  0609  0862               	movf	initialiseGPIO@direction^(0+128),w
  3938  060A  1903               	btfsc	3,2
  3939  060B  2E0D               	goto	u1711
  3940  060C  2E0E               	goto	u1710
  3941  060D                     u1711:
  3942  060D  2E27               	goto	l2184
  3943  060E                     u1710:
  3944  060E                     l2182:
  3945                           
  3946                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3947  060E  3001               	movlw	1
  3948  060F  00E3               	movwf	??_initialiseGPIO^(0+128)
  3949  0610  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3950  0611  2E13               	goto	u1724
  3951  0612                     u1725:
  3952  0612  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3953  0613                     u1724:
  3954  0613  0B89               	decfsz	9,f
  3955  0614  2E12               	goto	u1725
  3956  0615  0863               	movf	??_initialiseGPIO^(0+128),w
  3957  0616  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3958  0617  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3959  0618  048D               	iorwf	13,f	;volatile
  3960                           
  3961                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3962  0619  3001               	movlw	1
  3963  061A  00E3               	movwf	??_initialiseGPIO^(0+128)
  3964  061B  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3965  061C  2E1E               	goto	u1734
  3966  061D                     u1735:
  3967  061D  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3968  061E                     u1734:
  3969  061E  0B89               	decfsz	9,f
  3970  061F  2E1D               	goto	u1735
  3971  0620  0863               	movf	??_initialiseGPIO^(0+128),w
  3972  0621  3AFF               	xorlw	255
  3973  0622  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3974  0623  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3975  0624  0023               	movlb	3	; select bank3
  3976  0625  058D               	andwf	13,f	;volatile
  3977                           
  3978                           ;GPIO.c: 41:         }
  3979  0626  2E33               	goto	l304
  3980  0627                     l2184:
  3981  0627  3001               	movlw	1
  3982  0628  00E3               	movwf	??_initialiseGPIO^(0+128)
  3983  0629  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3984  062A  2E2C               	goto	u1744
  3985  062B                     u1745:
  3986  062B  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3987  062C                     u1744:
  3988  062C  0B89               	decfsz	9,f
  3989  062D  2E2B               	goto	u1745
  3990  062E  0863               	movf	??_initialiseGPIO^(0+128),w
  3991  062F  3AFF               	xorlw	255
  3992  0630  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3993  0631  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3994  0632  058D               	andwf	13,f	;volatile
  3995  0633                     l304:
  3996  0633  0008               	return
  3997  0634                     __end_of_initialiseGPIO:
  3998                           
  3999                           	psect	text14
  4000  0634                     __ptext14:	
  4001 ;; *************** function _initialiseADCPin *****************
  4002 ;; Defined at:
  4003 ;;		line 37 in file "ADC.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  gpioNumber      1    wreg     const enum E2798
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  4008 ;;  portNumber      1    4[BANK1 ] unsigned char 
  4009 ;;  portType        1    3[BANK1 ] unsigned char 
  4010 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4020 ;;      Params:         0       0       0       0       0       0
  4021 ;;      Locals:         0       0       4       0       0       0
  4022 ;;      Temps:          0       0       2       0       0       0
  4023 ;;      Totals:         0       0       6       0       0       0
  4024 ;;Total ram usage:        6 bytes
  4025 ;; Hardware stack levels used: 1
  4026 ;; Hardware stack levels required when called: 5
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_initialisePotentiometers
  4031 ;;		_initialiseController
  4032 ;;		_initialiseCurrentSensors
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036  0634                     _initialiseADCPin:	
  4037                           ;psect for function _initialiseADCPin
  4038                           
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4042                           ;initialiseADCPin@gpioNumber stored from wreg
  4043  0634  0021               	movlb	1	; select bank1
  4044  0635  00E7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4045  0636                     l2186:
  4046                           
  4047                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4048  0636  01E6               	clrf	initialiseADCPin@portNumber^(0+128)
  4049                           
  4050                           ;ADC.c: 40:     uint8_t portType = 0;
  4051  0637  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4052                           
  4053                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4054  0638  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4055  0639                     l2188:
  4056                           
  4057                           ;ADC.c: 43:     if(gpioNumber < 4){
  4058  0639  3004               	movlw	4
  4059  063A  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4060  063B  1803               	skipnc
  4061  063C  2E3E               	goto	u1751
  4062  063D  2E3F               	goto	u1750
  4063  063E                     u1751:
  4064  063E  2E46               	goto	l2196
  4065  063F                     u1750:
  4066  063F                     l2190:
  4067                           
  4068                           ;ADC.c: 44:         portNumber = gpioNumber;
  4069  063F  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4070  0640  00E2               	movwf	??_initialiseADCPin^(0+128)
  4071  0641  0862               	movf	??_initialiseADCPin^(0+128),w
  4072  0642  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4073  0643                     l2192:
  4074                           
  4075                           ;ADC.c: 45:         portType = 0;
  4076  0643  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4077  0644                     l2194:
  4078                           
  4079                           ;ADC.c: 46:         gpioValid = 1;
  4080  0644  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4081  0645  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4082  0646                     l2196:
  4083                           
  4084                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4085  0646  3009               	movlw	9
  4086  0647  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4087  0648  1C03               	skipc
  4088  0649  2E4B               	goto	u1761
  4089  064A  2E4C               	goto	u1760
  4090  064B                     u1761:
  4091  064B  2E5B               	goto	l236
  4092  064C                     u1760:
  4093  064C                     l2198:
  4094  064C  3010               	movlw	16
  4095  064D  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4096  064E  1803               	skipnc
  4097  064F  2E51               	goto	u1771
  4098  0650  2E52               	goto	u1770
  4099  0651                     u1771:
  4100  0651  2E5B               	goto	l236
  4101  0652                     u1770:
  4102  0652                     l2200:
  4103                           
  4104                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4105  0652  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4106  0653  3EF8               	addlw	248
  4107  0654  00E2               	movwf	??_initialiseADCPin^(0+128)
  4108  0655  0862               	movf	??_initialiseADCPin^(0+128),w
  4109  0656  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4110  0657                     l2202:
  4111                           
  4112                           ;ADC.c: 51:         portType = 1;
  4113  0657  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4114  0658  0AE5               	incf	initialiseADCPin@portType^(0+128),f
  4115  0659                     l2204:
  4116                           
  4117                           ;ADC.c: 52:         gpioValid = 1;
  4118  0659  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4119  065A  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4120  065B                     l236:	
  4121                           ;ADC.c: 53:     }
  4122                           
  4123                           
  4124                           ;ADC.c: 55:     if(gpioValid){
  4125  065B  0864               	movf	initialiseADCPin@gpioValid^(0+128),w
  4126  065C  1903               	btfsc	3,2
  4127  065D  2E5F               	goto	u1781
  4128  065E  2E60               	goto	u1780
  4129  065F                     u1781:
  4130  065F  2E99               	goto	l241
  4131  0660                     u1780:
  4132  0660                     l2206:
  4133                           
  4134                           ;ADC.c: 56:         if(portType == 0){
  4135  0660  0865               	movf	initialiseADCPin@portType^(0+128),w
  4136  0661  1D03               	btfss	3,2
  4137  0662  2E64               	goto	u1791
  4138  0663  2E65               	goto	u1790
  4139  0664                     u1791:
  4140  0664  2E7D               	goto	l2210
  4141  0665                     u1790:
  4142  0665                     l2208:
  4143                           
  4144                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4145  0665  3001               	movlw	1
  4146  0666  00E2               	movwf	??_initialiseADCPin^(0+128)
  4147  0667  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4148  0668  2E6A               	goto	u1804
  4149  0669                     u1805:
  4150  0669  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4151  066A                     u1804:
  4152  066A  0B89               	decfsz	9,f
  4153  066B  2E69               	goto	u1805
  4154  066C  0862               	movf	??_initialiseADCPin^(0+128),w
  4155  066D  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4156  066E  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4157  066F  048C               	iorwf	12,f	;volatile
  4158                           
  4159                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4160  0670  3001               	movlw	1
  4161  0671  00E2               	movwf	??_initialiseADCPin^(0+128)
  4162  0672  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4163  0673  2E75               	goto	u1814
  4164  0674                     u1815:
  4165  0674  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4166  0675                     u1814:
  4167  0675  0B89               	decfsz	9,f
  4168  0676  2E74               	goto	u1815
  4169  0677  0862               	movf	??_initialiseADCPin^(0+128),w
  4170  0678  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4171  0679  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4172  067A  0023               	movlb	3	; select bank3
  4173  067B  048C               	iorwf	12,f	;volatile
  4174                           
  4175                           ;ADC.c: 59:         }
  4176  067C  2E99               	goto	l241
  4177  067D                     l2210:
  4178  067D  0365               	decf	initialiseADCPin@portType^(0+128),w
  4179  067E  1D03               	btfss	3,2
  4180  067F  2E81               	goto	u1821
  4181  0680  2E82               	goto	u1820
  4182  0681                     u1821:
  4183  0681  2E99               	goto	l241
  4184  0682                     u1820:
  4185  0682                     l2212:
  4186                           
  4187                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4188  0682  3001               	movlw	1
  4189  0683  00E2               	movwf	??_initialiseADCPin^(0+128)
  4190  0684  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4191  0685  2E87               	goto	u1834
  4192  0686                     u1835:
  4193  0686  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4194  0687                     u1834:
  4195  0687  0B89               	decfsz	9,f
  4196  0688  2E86               	goto	u1835
  4197  0689  0862               	movf	??_initialiseADCPin^(0+128),w
  4198  068A  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4199  068B  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4200  068C  048D               	iorwf	13,f	;volatile
  4201                           
  4202                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4203  068D  3001               	movlw	1
  4204  068E  00E2               	movwf	??_initialiseADCPin^(0+128)
  4205  068F  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4206  0690  2E92               	goto	u1844
  4207  0691                     u1845:
  4208  0691  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4209  0692                     u1844:
  4210  0692  0B89               	decfsz	9,f
  4211  0693  2E91               	goto	u1845
  4212  0694  0862               	movf	??_initialiseADCPin^(0+128),w
  4213  0695  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4214  0696  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4215  0697  0023               	movlb	3	; select bank3
  4216  0698  048D               	iorwf	13,f	;volatile
  4217  0699                     l241:
  4218  0699  0008               	return
  4219  069A                     __end_of_initialiseADCPin:
  4220                           
  4221                           	psect	text15
  4222  0B8A                     __ptext15:	
  4223 ;; *************** function _initialiseADCModule *****************
  4224 ;; Defined at:
  4225 ;;		line 14 in file "ADC.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4239 ;;      Params:         0       0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used: 1
  4245 ;; Hardware stack levels required when called: 5
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_main
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253  0B8A                     _initialiseADCModule:	
  4254                           ;psect for function _initialiseADCModule
  4255                           
  4256  0B8A                     l2634:	
  4257                           ;incstack = 0
  4258                           ; Regs used in _initialiseADCModule: [wreg]
  4259                           
  4260                           
  4261                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4262  0B8A  3001               	movlw	1
  4263  0B8B  0021               	movlb	1	; select bank1
  4264  0B8C  009D               	movwf	29	;volatile
  4265                           
  4266                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4267  0B8D  3090               	movlw	144
  4268  0B8E  009E               	movwf	30	;volatile
  4269  0B8F                     l232:
  4270  0B8F  0008               	return
  4271  0B90                     __end_of_initialiseADCModule:
  4272                           
  4273                           	psect	intentry
  4274  0004                     __pintentry:	
  4275 ;; *************** function _Tick490Hz *****************
  4276 ;; Defined at:
  4277 ;;		line 42 in file "main.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4291 ;;      Params:         0       0       0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0       0
  4293 ;;      Temps:          0       1       0       0       0       0
  4294 ;;      Totals:         0       1       0       0       0       0
  4295 ;;Total ram usage:        1 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 4
  4298 ;; This function calls:
  4299 ;;		_controlRoutine
  4300 ;;		_currentTripMonitor
  4301 ;;		_readFilteredDutyPot
  4302 ;;		_readFilteredFreqPot
  4303 ;;		_readFilteredIL
  4304 ;;		_readFilteredVout
  4305 ;;		_runPotScaling
  4306 ;;		_setPWMDutyandPeriod
  4307 ;;		i1_writeGPIO
  4308 ;; This function is called by:
  4309 ;;		Interrupt level 1
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313  0004                     _Tick490Hz:
  4314                           
  4315                           ;incstack = 0
  4316  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4317                           
  4318                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4319  0005  3180               	pagesel	$
  4320  0006                     i1l2690:
  4321                           
  4322                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4323  0006  01F0               	clrf	i1writeGPIO@writeValue
  4324  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4325  0008  300C               	movlw	12
  4326  0009  3186  26FA  3180   	fcall	i1_writeGPIO
  4327                           
  4328                           ;main.c: 54:         currentTripMonitor();
  4329  000C  318C  248D  3180   	fcall	_currentTripMonitor
  4330                           
  4331                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4332  000F  0020               	movlb	0	; select bank0
  4333  0010  0864               	movf	_setDuty+1,w
  4334  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4335  0012  0863               	movf	_setDuty,w
  4336  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4337  0014  086E               	movf	_setPeriod,w
  4338  0015  00DC               	movwf	??_Tick490Hz
  4339  0016  085C               	movf	??_Tick490Hz,w
  4340  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4341  0018  318C  24B1  3180   	fcall	_setPWMDutyandPeriod
  4342  001B                     i1l2692:
  4343                           
  4344                           ;main.c: 58:         if(timerSlotHalf == 0){
  4345  001B  0020               	movlb	0	; select bank0
  4346  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4347  001D  1D03               	btfss	3,2
  4348  001E  2820               	goto	u243_21
  4349  001F  2821               	goto	u243_20
  4350  0020                     u243_21:
  4351  0020  2829               	goto	i1l2698
  4352  0021                     u243_20:
  4353  0021                     i1l2694:
  4354                           
  4355                           ;main.c: 60:             controlRoutine();
  4356  0021  3183  2315  3180   	fcall	_controlRoutine
  4357  0024                     i1l2696:
  4358                           
  4359                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4360  0024  01F0               	clrf	i1writeGPIO@writeValue
  4361  0025  300C               	movlw	12
  4362  0026  3186  26FA  3180   	fcall	i1_writeGPIO
  4363  0029                     i1l2698:
  4364                           
  4365                           ;main.c: 64:         if(timerSlotHalf == 1){
  4366  0029  0020               	movlb	0	; select bank0
  4367  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4368  002B  1D03               	btfss	3,2
  4369  002C  282E               	goto	u244_21
  4370  002D  282F               	goto	u244_20
  4371  002E                     u244_21:
  4372  002E  2878               	goto	i1l2720
  4373  002F                     u244_20:
  4374  002F                     i1l2700:
  4375                           
  4376                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4377  002F  01F0               	clrf	i1writeGPIO@writeValue
  4378  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4379  0031  300D               	movlw	13
  4380  0032  3186  26FA  3180   	fcall	i1_writeGPIO
  4381  0035                     i1l2702:
  4382                           
  4383                           ;main.c: 67:             filteredIL = readFilteredIL();
  4384  0035  318E  263D  3180   	fcall	_readFilteredIL
  4385  0038  0871               	movf	?_readFilteredIL+1,w
  4386  0039  0020               	movlb	0	; select bank0
  4387  003A  00E0               	movwf	_filteredIL+1
  4388  003B  0870               	movf	?_readFilteredIL,w
  4389  003C  00DF               	movwf	_filteredIL
  4390  003D                     i1l2704:
  4391                           
  4392                           ;main.c: 69:             filteredVout = readFilteredVout();
  4393  003D  3187  2759  3180   	fcall	_readFilteredVout
  4394  0040  087B               	movf	?_readFilteredVout+1,w
  4395  0041  0020               	movlb	0	; select bank0
  4396  0042  00DE               	movwf	_filteredVout+1
  4397  0043  087A               	movf	?_readFilteredVout,w
  4398  0044  00DD               	movwf	_filteredVout
  4399  0045                     i1l2706:
  4400                           
  4401                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4402  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4403  0046  1D03               	btfss	3,2
  4404  0047  2849               	goto	u245_21
  4405  0048  284A               	goto	u245_20
  4406  0049                     u245_21:
  4407  0049  284D               	goto	i1l2710
  4408  004A                     u245_20:
  4409  004A                     i1l2708:
  4410                           
  4411                           ;main.c: 74:                 runPotScaling();
  4412  004A  3184  240F  3180   	fcall	_runPotScaling
  4413  004D                     i1l2710:
  4414                           
  4415                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4416  004D  0020               	movlb	0	; select bank0
  4417  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4418  004F  1D03               	btfss	3,2
  4419  0050  2852               	goto	u246_21
  4420  0051  2853               	goto	u246_20
  4421  0052                     u246_21:
  4422  0052  2863               	goto	i1l2714
  4423  0053                     u246_20:
  4424  0053                     i1l2712:
  4425                           
  4426                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4427  0053  318F  274A  3180   	fcall	_readFilteredDutyPot
  4428  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4429  0057  0022               	movlb	2	; select bank2
  4430  0058  00E5               	movwf	(_filteredDutyPot+1)^(0+256)
  4431  0059  087A               	movf	?_readFilteredDutyPot,w
  4432  005A  00E4               	movwf	_filteredDutyPot^(0+256)
  4433                           
  4434                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4435  005B  318F  27A5  3180   	fcall	_readFilteredFreqPot
  4436  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4437  005F  0022               	movlb	2	; select bank2
  4438  0060  00E7               	movwf	(_filteredFreqPot+1)^(0+256)
  4439  0061  087A               	movf	?_readFilteredFreqPot,w
  4440  0062  00E6               	movwf	_filteredFreqPot^(0+256)
  4441  0063                     i1l2714:
  4442                           
  4443                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4444  0063  0020               	movlb	0	; select bank0
  4445  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4446  0065  1D03               	btfss	3,2
  4447  0066  2868               	goto	u247_21
  4448  0067  286A               	goto	u247_20
  4449  0068                     u247_21:
  4450  0068  3001               	movlw	1
  4451  0069  286B               	goto	u248_20
  4452  006A                     u247_20:
  4453  006A  3000               	movlw	0
  4454  006B                     u248_20:
  4455  006B  00DC               	movwf	??_Tick490Hz
  4456  006C  085C               	movf	??_Tick490Hz,w
  4457  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4458  006E                     i1l2716:
  4459                           
  4460                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4461  006E  01F0               	clrf	i1writeGPIO@writeValue
  4462  006F  300C               	movlw	12
  4463  0070  3186  26FA  3180   	fcall	i1_writeGPIO
  4464  0073                     i1l2718:
  4465                           
  4466                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4467  0073  01F0               	clrf	i1writeGPIO@writeValue
  4468  0074  300D               	movlw	13
  4469  0075  3186  26FA  3180   	fcall	i1_writeGPIO
  4470  0078                     i1l2720:
  4471                           
  4472                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4473  0078  0020               	movlb	0	; select bank0
  4474  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4475  007A  1D03               	btfss	3,2
  4476  007B  287D               	goto	u249_21
  4477  007C  287F               	goto	u249_20
  4478  007D                     u249_21:
  4479  007D  3001               	movlw	1
  4480  007E  2880               	goto	u250_20
  4481  007F                     u249_20:
  4482  007F  3000               	movlw	0
  4483  0080                     u250_20:
  4484  0080  00DC               	movwf	??_Tick490Hz
  4485  0081  085C               	movf	??_Tick490Hz,w
  4486  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4487  0083                     i1l2722:
  4488                           
  4489                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4490  0083  110B               	bcf	11,2	;volatile
  4491  0084                     i1l108:
  4492  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4493  0085  0009               	retfie
  4494  0086                     __end_of_Tick490Hz:
  4495                           
  4496                           	psect	text17
  4497  0CB1                     __ptext17:	
  4498 ;; *************** function _setPWMDutyandPeriod *****************
  4499 ;; Defined at:
  4500 ;;		line 49 in file "PWM.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4503 ;;  period          1    2[COMMON] unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4515 ;;      Params:         3       0       0       0       0       0
  4516 ;;      Locals:         0       0       0       0       0       0
  4517 ;;      Temps:          2       0       0       0       0       0
  4518 ;;      Totals:         5       0       0       0       0       0
  4519 ;;Total ram usage:        5 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_Tick490Hz
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528  0CB1                     _setPWMDutyandPeriod:	
  4529                           ;psect for function _setPWMDutyandPeriod
  4530                           
  4531  0CB1                     i1l2354:	
  4532                           ;incstack = 0
  4533                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4534                           
  4535                           
  4536                           ;PWM.c: 50:     PR2 = period;
  4537  0CB1  0872               	movf	setPWMDutyandPeriod@period,w
  4538  0CB2  0020               	movlb	0	; select bank0
  4539  0CB3  009B               	movwf	27	;volatile
  4540  0CB4                     i1l2356:
  4541                           
  4542                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4543  0CB4  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4544  0CB5  00F4               	movwf	??_setPWMDutyandPeriod+1
  4545  0CB6  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4546  0CB7  00F3               	movwf	??_setPWMDutyandPeriod
  4547  0CB8  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4548  0CB9  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4549  0CBA  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4550  0CBB  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4551  0CBC  0873               	movf	??_setPWMDutyandPeriod,w
  4552  0CBD  0025               	movlb	5	; select bank5
  4553  0CBE  0091               	movwf	17	;volatile
  4554  0CBF                     i1l2358:
  4555                           
  4556                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4557  0CBF  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4558  0CC0  3901               	andlw	1
  4559  0CC1  00F3               	movwf	??_setPWMDutyandPeriod
  4560  0CC2  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4561  0CC3  0813               	movf	19,w	;volatile
  4562  0CC4  0673               	xorwf	??_setPWMDutyandPeriod,w
  4563  0CC5  39EF               	andlw	-17
  4564  0CC6  0673               	xorwf	??_setPWMDutyandPeriod,w
  4565  0CC7  0093               	movwf	19	;volatile
  4566                           
  4567                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4568  0CC8  3002               	movlw	2
  4569  0CC9  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4570  0CCA  00F3               	movwf	??_setPWMDutyandPeriod
  4571  0CCB  3000               	movlw	0
  4572  0CCC  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4573  0CCD  00F4               	movwf	??_setPWMDutyandPeriod+1
  4574  0CCE  3000               	movlw	0
  4575  0CCF  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4576  0CD0  3002               	movlw	2
  4577  0CD1  1903               	skipnz
  4578  0CD2  0273               	subwf	??_setPWMDutyandPeriod,w
  4579  0CD3  1803               	skipnc
  4580  0CD4  2CD6               	goto	u214_21
  4581  0CD5  2CD9               	goto	u214_20
  4582  0CD6                     u214_21:
  4583  0CD6  0025               	movlb	5	; select bank5
  4584  0CD7  1693               	bsf	19,5	;volatile
  4585  0CD8  2CDB               	goto	u215_24
  4586  0CD9                     u214_20:
  4587  0CD9  0025               	movlb	5	; select bank5
  4588  0CDA  1293               	bcf	19,5	;volatile
  4589  0CDB                     u215_24:
  4590  0CDB                     i1l175:
  4591  0CDB  0008               	return
  4592  0CDC                     __end_of_setPWMDutyandPeriod:
  4593                           
  4594                           	psect	text18
  4595  040F                     __ptext18:	
  4596 ;; *************** function _runPotScaling *****************
  4597 ;; Defined at:
  4598 ;;		line 55 in file "Potentiometer.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4603 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      void 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2, status,0, pclath, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4613 ;;      Params:         0       0       0       0       0       0
  4614 ;;      Locals:         0       4       0       0       0       0
  4615 ;;      Temps:          0       8       0       0       0       0
  4616 ;;      Totals:         0      12       0       0       0       0
  4617 ;;Total ram usage:       12 bytes
  4618 ;; Hardware stack levels used: 1
  4619 ;; Hardware stack levels required when called: 1
  4620 ;; This function calls:
  4621 ;;		___lldiv
  4622 ;;		___lmul
  4623 ;;		___wmul
  4624 ;; This function is called by:
  4625 ;;		_Tick490Hz
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629  040F                     _runPotScaling:	
  4630                           ;psect for function _runPotScaling
  4631                           
  4632  040F                     i1l2450:	
  4633                           ;incstack = 0
  4634                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4635                           
  4636                           
  4637                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4638  040F  0020               	movlb	0	; select bank0
  4639  0410  036C               	decf	_currentState,w
  4640  0411  1D03               	btfss	3,2
  4641  0412  2C14               	goto	u226_21
  4642  0413  2C15               	goto	u226_20
  4643  0414                     u226_21:
  4644  0414  2CED               	goto	i1l377
  4645  0415                     u226_20:
  4646  0415                     i1l2452:
  4647                           
  4648                           ;Potentiometer.c: 58:         potSetCount++;
  4649  0415  3001               	movlw	1
  4650  0416  00A6               	movwf	??_runPotScaling
  4651  0417  0826               	movf	??_runPotScaling,w
  4652  0418  07E8               	addwf	_potSetCount,f
  4653                           
  4654                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4655  0419  3020               	movlw	32
  4656  041A  0668               	xorwf	_potSetCount,w
  4657  041B  1D03               	btfss	3,2
  4658  041C  2C1E               	goto	u227_21
  4659  041D  2C1F               	goto	u227_20
  4660  041E                     u227_21:
  4661  041E  2CED               	goto	i1l377
  4662  041F                     u227_20:
  4663  041F                     i1l2454:
  4664                           
  4665                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 45) * (uint
      +                          32_t)(159u - 15u)) >> 10 ) + 15u;
  4666  041F  0022               	movlb	2	; select bank2
  4667  0420  0866               	movf	_filteredFreqPot^(0+256),w
  4668  0421  3ED3               	addlw	211
  4669  0422  00F0               	movwf	___lmul@multiplier
  4670  0423  30FF               	movlw	255
  4671  0424  3D67               	addwfc	(_filteredFreqPot+1)^(0+256),w
  4672  0425  00F1               	movwf	___lmul@multiplier+1
  4673  0426  01F2               	clrf	___lmul@multiplier+2
  4674  0427  01F3               	clrf	___lmul@multiplier+3
  4675  0428  3000               	movlw	0
  4676  0429  00F7               	movwf	___lmul@multiplicand+3
  4677  042A  3000               	movlw	0
  4678  042B  00F6               	movwf	___lmul@multiplicand+2
  4679  042C  3000               	movlw	0
  4680  042D  00F5               	movwf	___lmul@multiplicand+1
  4681  042E  3090               	movlw	144
  4682  042F  00F4               	movwf	___lmul@multiplicand
  4683  0430  318D  2509  3184   	fcall	___lmul
  4684  0433  0870               	movf	?___lmul,w
  4685  0434  0020               	movlb	0	; select bank0
  4686  0435  00A6               	movwf	??_runPotScaling
  4687  0436  0871               	movf	?___lmul+1,w
  4688  0437  00A7               	movwf	??_runPotScaling+1
  4689  0438  0872               	movf	?___lmul+2,w
  4690  0439  00A8               	movwf	??_runPotScaling+2
  4691  043A  0873               	movf	?___lmul+3,w
  4692  043B  00A9               	movwf	??_runPotScaling+3
  4693  043C  300A               	movlw	10
  4694  043D                     u228_25:
  4695  043D  36A9               	lsrf	??_runPotScaling+3,f
  4696  043E  0CA8               	rrf	??_runPotScaling+2,f
  4697  043F  0CA7               	rrf	??_runPotScaling+1,f
  4698  0440  0CA6               	rrf	??_runPotScaling,f
  4699  0441                     u228_20:
  4700  0441  0B89               	decfsz	9,f
  4701  0442  2C3D               	goto	u228_25
  4702  0443  0826               	movf	??_runPotScaling,w
  4703  0444  3E0F               	addlw	15
  4704  0445  00AA               	movwf	??_runPotScaling+4
  4705  0446  082A               	movf	??_runPotScaling+4,w
  4706  0447  00EE               	movwf	_setPeriod
  4707                           
  4708                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-45) *
      +                           (uint32_t)setPeriod )) >> 8;
  4709  0448  0022               	movlb	2	; select bank2
  4710  0449  0864               	movf	_filteredDutyPot^(0+256),w
  4711  044A  3ED3               	addlw	211
  4712  044B  00F0               	movwf	___lmul@multiplier
  4713  044C  30FF               	movlw	255
  4714  044D  3D65               	addwfc	(_filteredDutyPot+1)^(0+256),w
  4715  044E  00F1               	movwf	___lmul@multiplier+1
  4716  044F  01F2               	clrf	___lmul@multiplier+2
  4717  0450  01F3               	clrf	___lmul@multiplier+3
  4718  0451  0020               	movlb	0	; select bank0
  4719  0452  086E               	movf	_setPeriod,w
  4720  0453  00A6               	movwf	??_runPotScaling
  4721  0454  01A7               	clrf	??_runPotScaling+1
  4722  0455  01A8               	clrf	??_runPotScaling+2
  4723  0456  01A9               	clrf	??_runPotScaling+3
  4724  0457  0829               	movf	??_runPotScaling+3,w
  4725  0458  00F7               	movwf	___lmul@multiplicand+3
  4726  0459  0828               	movf	??_runPotScaling+2,w
  4727  045A  00F6               	movwf	___lmul@multiplicand+2
  4728  045B  0827               	movf	??_runPotScaling+1,w
  4729  045C  00F5               	movwf	___lmul@multiplicand+1
  4730  045D  0826               	movf	??_runPotScaling,w
  4731  045E  00F4               	movwf	___lmul@multiplicand
  4732  045F  318D  2509  3184   	fcall	___lmul
  4733  0462  0870               	movf	?___lmul,w
  4734  0463  0020               	movlb	0	; select bank0
  4735  0464  00AA               	movwf	??_runPotScaling+4
  4736  0465  0871               	movf	?___lmul+1,w
  4737  0466  00AB               	movwf	??_runPotScaling+5
  4738  0467  0872               	movf	?___lmul+2,w
  4739  0468  00AC               	movwf	??_runPotScaling+6
  4740  0469  0873               	movf	?___lmul+3,w
  4741  046A  00AD               	movwf	??_runPotScaling+7
  4742  046B  3008               	movlw	8
  4743  046C                     u229_25:
  4744  046C  36AD               	lsrf	??_runPotScaling+7,f
  4745  046D  0CAC               	rrf	??_runPotScaling+6,f
  4746  046E  0CAB               	rrf	??_runPotScaling+5,f
  4747  046F  0CAA               	rrf	??_runPotScaling+4,f
  4748  0470                     u229_20:
  4749  0470  0B89               	decfsz	9,f
  4750  0471  2C6C               	goto	u229_25
  4751  0472  082B               	movf	??_runPotScaling+5,w
  4752  0473  00E4               	movwf	_setDuty+1
  4753  0474  082A               	movf	??_runPotScaling+4,w
  4754  0475  00E3               	movwf	_setDuty
  4755                           
  4756                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4757  0476  3000               	movlw	0
  4758  0477  00F9               	movwf	___lldiv@divisor+3
  4759  0478  3000               	movlw	0
  4760  0479  00F8               	movwf	___lldiv@divisor+2
  4761  047A  3000               	movlw	0
  4762  047B  00F7               	movwf	___lldiv@divisor+1
  4763  047C  3019               	movlw	25
  4764  047D  00F6               	movwf	___lldiv@divisor
  4765  047E  305A               	movlw	90
  4766  047F  00F2               	movwf	___wmul@multiplicand
  4767  0480  3000               	movlw	0
  4768  0481  00F3               	movwf	___wmul@multiplicand+1
  4769  0482  086E               	movf	_setPeriod,w
  4770  0483  00A6               	movwf	??_runPotScaling
  4771  0484  01A7               	clrf	??_runPotScaling+1
  4772  0485  0826               	movf	??_runPotScaling,w
  4773  0486  00F0               	movwf	___wmul@multiplier
  4774  0487  0827               	movf	??_runPotScaling+1,w
  4775  0488  00F1               	movwf	___wmul@multiplier+1
  4776  0489  318C  244E  3184   	fcall	___wmul
  4777  048C  0870               	movf	?___wmul,w
  4778  048D  0020               	movlb	0	; select bank0
  4779  048E  00A8               	movwf	??_runPotScaling+2
  4780  048F  0871               	movf	?___wmul+1,w
  4781  0490  00A9               	movwf	??_runPotScaling+3
  4782  0491  01AA               	clrf	??_runPotScaling+4
  4783  0492  01AB               	clrf	??_runPotScaling+5
  4784  0493  082B               	movf	??_runPotScaling+5,w
  4785  0494  00FD               	movwf	___lldiv@dividend+3
  4786  0495  082A               	movf	??_runPotScaling+4,w
  4787  0496  00FC               	movwf	___lldiv@dividend+2
  4788  0497  0829               	movf	??_runPotScaling+3,w
  4789  0498  00FB               	movwf	___lldiv@dividend+1
  4790  0499  0828               	movf	??_runPotScaling+2,w
  4791  049A  00FA               	movwf	___lldiv@dividend
  4792  049B  318E  26EF  3184   	fcall	___lldiv
  4793  049E  0877               	movf	?___lldiv+1,w
  4794  049F  0020               	movlb	0	; select bank0
  4795  04A0  00AF               	movwf	runPotScaling@maxDuty+1
  4796  04A1  0876               	movf	?___lldiv,w
  4797  04A2  00AE               	movwf	runPotScaling@maxDuty
  4798                           
  4799                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4800  04A3  3000               	movlw	0
  4801  04A4  00F9               	movwf	___lldiv@divisor+3
  4802  04A5  3000               	movlw	0
  4803  04A6  00F8               	movwf	___lldiv@divisor+2
  4804  04A7  3000               	movlw	0
  4805  04A8  00F7               	movwf	___lldiv@divisor+1
  4806  04A9  3019               	movlw	25
  4807  04AA  00F6               	movwf	___lldiv@divisor
  4808  04AB  300A               	movlw	10
  4809  04AC  00F2               	movwf	___wmul@multiplicand
  4810  04AD  3000               	movlw	0
  4811  04AE  00F3               	movwf	___wmul@multiplicand+1
  4812  04AF  086E               	movf	_setPeriod,w
  4813  04B0  00A6               	movwf	??_runPotScaling
  4814  04B1  01A7               	clrf	??_runPotScaling+1
  4815  04B2  0826               	movf	??_runPotScaling,w
  4816  04B3  00F0               	movwf	___wmul@multiplier
  4817  04B4  0827               	movf	??_runPotScaling+1,w
  4818  04B5  00F1               	movwf	___wmul@multiplier+1
  4819  04B6  318C  244E  3184   	fcall	___wmul
  4820  04B9  0870               	movf	?___wmul,w
  4821  04BA  0020               	movlb	0	; select bank0
  4822  04BB  00A8               	movwf	??_runPotScaling+2
  4823  04BC  0871               	movf	?___wmul+1,w
  4824  04BD  00A9               	movwf	??_runPotScaling+3
  4825  04BE  01AA               	clrf	??_runPotScaling+4
  4826  04BF  01AB               	clrf	??_runPotScaling+5
  4827  04C0  082B               	movf	??_runPotScaling+5,w
  4828  04C1  00FD               	movwf	___lldiv@dividend+3
  4829  04C2  082A               	movf	??_runPotScaling+4,w
  4830  04C3  00FC               	movwf	___lldiv@dividend+2
  4831  04C4  0829               	movf	??_runPotScaling+3,w
  4832  04C5  00FB               	movwf	___lldiv@dividend+1
  4833  04C6  0828               	movf	??_runPotScaling+2,w
  4834  04C7  00FA               	movwf	___lldiv@dividend
  4835  04C8  318E  26EF  3184   	fcall	___lldiv
  4836  04CB  0877               	movf	?___lldiv+1,w
  4837  04CC  0020               	movlb	0	; select bank0
  4838  04CD  00B1               	movwf	runPotScaling@minDuty+1
  4839  04CE  0876               	movf	?___lldiv,w
  4840  04CF  00B0               	movwf	runPotScaling@minDuty
  4841  04D0                     i1l2456:
  4842                           
  4843                           ;Potentiometer.c: 69:             if(setDuty > maxDuty) setDuty = maxDuty;
  4844  04D0  0864               	movf	_setDuty+1,w
  4845  04D1  022F               	subwf	runPotScaling@maxDuty+1,w
  4846  04D2  1D03               	skipz
  4847  04D3  2CD6               	goto	u230_25
  4848  04D4  0863               	movf	_setDuty,w
  4849  04D5  022E               	subwf	runPotScaling@maxDuty,w
  4850  04D6                     u230_25:
  4851  04D6  1803               	skipnc
  4852  04D7  2CD9               	goto	u230_21
  4853  04D8  2CDA               	goto	u230_20
  4854  04D9                     u230_21:
  4855  04D9  2CDE               	goto	i1l375
  4856  04DA                     u230_20:
  4857  04DA                     i1l2458:
  4858  04DA  082F               	movf	runPotScaling@maxDuty+1,w
  4859  04DB  00E4               	movwf	_setDuty+1
  4860  04DC  082E               	movf	runPotScaling@maxDuty,w
  4861  04DD  00E3               	movwf	_setDuty
  4862  04DE                     i1l375:
  4863                           
  4864                           ;Potentiometer.c: 70:             if(setDuty < minDuty) setDuty = minDuty;
  4865  04DE  0831               	movf	runPotScaling@minDuty+1,w
  4866  04DF  0264               	subwf	_setDuty+1,w
  4867  04E0  1D03               	skipz
  4868  04E1  2CE4               	goto	u231_25
  4869  04E2  0830               	movf	runPotScaling@minDuty,w
  4870  04E3  0263               	subwf	_setDuty,w
  4871  04E4                     u231_25:
  4872  04E4  1803               	skipnc
  4873  04E5  2CE7               	goto	u231_21
  4874  04E6  2CE8               	goto	u231_20
  4875  04E7                     u231_21:
  4876  04E7  2CEC               	goto	i1l2462
  4877  04E8                     u231_20:
  4878  04E8                     i1l2460:
  4879  04E8  0831               	movf	runPotScaling@minDuty+1,w
  4880  04E9  00E4               	movwf	_setDuty+1
  4881  04EA  0830               	movf	runPotScaling@minDuty,w
  4882  04EB  00E3               	movwf	_setDuty
  4883  04EC                     i1l2462:
  4884                           
  4885                           ;Potentiometer.c: 72:             potSetCount = 0;
  4886  04EC  01E8               	clrf	_potSetCount
  4887  04ED                     i1l377:
  4888  04ED  0008               	return
  4889  04EE                     __end_of_runPotScaling:
  4890                           
  4891                           	psect	text19
  4892  0759                     __ptext19:	
  4893 ;; *************** function _readFilteredVout *****************
  4894 ;; Defined at:
  4895 ;;		line 34 in file "Controller.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  i               1    8[BANK0 ] unsigned char 
  4900 ;;  i               1    9[BANK0 ] unsigned char 
  4901 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  2   10[COMMON] unsigned short 
  4904 ;; Registers used:
  4905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4911 ;;      Params:         2       0       0       0       0       0
  4912 ;;      Locals:         0       6       0       0       0       0
  4913 ;;      Temps:          0       4       0       0       0       0
  4914 ;;      Totals:         2      10       0       0       0       0
  4915 ;;Total ram usage:       12 bytes
  4916 ;; Hardware stack levels used: 1
  4917 ;; Hardware stack levels required when called: 1
  4918 ;; This function calls:
  4919 ;;		_readADCRaw
  4920 ;; This function is called by:
  4921 ;;		_Tick490Hz
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925  0759                     _readFilteredVout:	
  4926                           ;psect for function _readFilteredVout
  4927                           
  4928  0759                     i1l2418:	
  4929                           ;incstack = 0
  4930                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4931                           
  4932                           
  4933                           ;Controller.c: 35:     for(uint8_t i=0; i<16 -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4934  0759  0020               	movlb	0	; select bank0
  4935  075A  01A9               	clrf	readFilteredVout@i
  4936  075B                     i1l2424:
  4937  075B  3529               	lslf	readFilteredVout@i,w
  4938  075C  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4939  075D  0086               	movwf	6
  4940  075E  3001               	movlw	1	; select bank3/4
  4941  075F  0087               	movwf	7
  4942  0760  3529               	lslf	readFilteredVout@i,w
  4943  0761  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4944  0762  0084               	movwf	4
  4945  0763  3001               	movlw	1	; select bank3/4
  4946  0764  0085               	movwf	5
  4947  0765  3F40               	moviw [0]fsr1
  4948  0766  3F80               	movwi [0]fsr0
  4949  0767  3F41               	moviw [1]fsr1
  4950  0768  3F81               	movwi [1]fsr0
  4951  0769                     i1l2426:
  4952  0769  3001               	movlw	1
  4953  076A  00A0               	movwf	??_readFilteredVout
  4954  076B  0820               	movf	??_readFilteredVout,w
  4955  076C  07A9               	addwf	readFilteredVout@i,f
  4956  076D                     i1l2428:
  4957  076D  300F               	movlw	15
  4958  076E  0229               	subwf	readFilteredVout@i,w
  4959  076F  1C03               	skipc
  4960  0770  2F72               	goto	u223_21
  4961  0771  2F73               	goto	u223_20
  4962  0772                     u223_21:
  4963  0772  2F5B               	goto	i1l2424
  4964  0773                     u223_20:
  4965  0773                     i1l2430:
  4966                           
  4967                           ;Controller.c: 36:     voutFIFO[16 -1] = readADCRaw(pinRA4);
  4968  0773  3004               	movlw	4
  4969  0774  318E  2695  3187   	fcall	_readADCRaw
  4970  0777  0871               	movf	?_readADCRaw+1,w
  4971  0778  0023               	movlb	3	; select bank3
  4972  0779  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  4973  077A  0870               	movf	?_readADCRaw,w
  4974  077B  00DE               	movwf	(_voutFIFO^(0+384)+30)
  4975  077C                     i1l2432:
  4976                           
  4977                           ;Controller.c: 37:     uint32_t sumOfSamples = 0;
  4978  077C  3000               	movlw	0
  4979  077D  0020               	movlb	0	; select bank0
  4980  077E  00A7               	movwf	readFilteredVout@sumOfSamples+3
  4981  077F  3000               	movlw	0
  4982  0780  00A6               	movwf	readFilteredVout@sumOfSamples+2
  4983  0781  3000               	movlw	0
  4984  0782  00A5               	movwf	readFilteredVout@sumOfSamples+1
  4985  0783  3000               	movlw	0
  4986  0784  00A4               	movwf	readFilteredVout@sumOfSamples
  4987  0785                     i1l2434:
  4988                           
  4989                           ;Controller.c: 38:             for(uint8_t i=0; i<16; i++) sumOfSamples += voutFIFO[i];
  4990  0785  01A8               	clrf	readFilteredVout@i_848
  4991  0786                     i1l2440:
  4992  0786  3528               	lslf	readFilteredVout@i_848,w
  4993  0787  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4994  0788  0086               	movwf	6
  4995  0789  3001               	movlw	1	; select bank3/4
  4996  078A  0087               	movwf	7
  4997  078B  3F40               	moviw [0]fsr1
  4998  078C  00A0               	movwf	??_readFilteredVout
  4999  078D  3F41               	moviw [1]fsr1
  5000  078E  00A1               	movwf	??_readFilteredVout+1
  5001  078F  0820               	movf	??_readFilteredVout,w
  5002  0790  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5003  0791  0821               	movf	??_readFilteredVout+1,w
  5004  0792  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5005  0793  3000               	movlw	0
  5006  0794  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5007  0795  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5008  0796                     i1l2442:
  5009  0796  3001               	movlw	1
  5010  0797  00A0               	movwf	??_readFilteredVout
  5011  0798  0820               	movf	??_readFilteredVout,w
  5012  0799  07A8               	addwf	readFilteredVout@i_848,f
  5013  079A                     i1l2444:
  5014  079A  3010               	movlw	16
  5015  079B  0228               	subwf	readFilteredVout@i_848,w
  5016  079C  1C03               	skipc
  5017  079D  2F9F               	goto	u224_21
  5018  079E  2FA0               	goto	u224_20
  5019  079F                     u224_21:
  5020  079F  2F86               	goto	i1l2440
  5021  07A0                     u224_20:
  5022  07A0                     i1l2446:
  5023                           
  5024                           ;Controller.c: 40:     return (sumOfSamples >> 4);
  5025  07A0  0824               	movf	readFilteredVout@sumOfSamples,w
  5026  07A1  00A0               	movwf	??_readFilteredVout
  5027  07A2  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5028  07A3  00A1               	movwf	??_readFilteredVout+1
  5029  07A4  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5030  07A5  00A2               	movwf	??_readFilteredVout+2
  5031  07A6  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5032  07A7  00A3               	movwf	??_readFilteredVout+3
  5033  07A8  3004               	movlw	4
  5034  07A9                     u225_25:
  5035  07A9  36A3               	lsrf	??_readFilteredVout+3,f
  5036  07AA  0CA2               	rrf	??_readFilteredVout+2,f
  5037  07AB  0CA1               	rrf	??_readFilteredVout+1,f
  5038  07AC  0CA0               	rrf	??_readFilteredVout,f
  5039  07AD                     u225_20:
  5040  07AD  0B89               	decfsz	9,f
  5041  07AE  2FA9               	goto	u225_25
  5042  07AF  0821               	movf	??_readFilteredVout+1,w
  5043  07B0  00FB               	movwf	?_readFilteredVout+1
  5044  07B1  0820               	movf	??_readFilteredVout,w
  5045  07B2  00FA               	movwf	?_readFilteredVout
  5046  07B3                     i1l441:
  5047  07B3  0008               	return
  5048  07B4                     __end_of_readFilteredVout:
  5049                           
  5050                           	psect	text20
  5051  0E3D                     __ptext20:	
  5052 ;; *************** function _readFilteredIL *****************
  5053 ;; Defined at:
  5054 ;;		line 56 in file "CurrentSensor.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  i               1   10[COMMON] unsigned char 
  5059 ;;  i               1   11[COMMON] unsigned char 
  5060 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  2    0[COMMON] unsigned short 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5070 ;;      Params:         2       0       0       0       0       0
  5071 ;;      Locals:         6       0       0       0       0       0
  5072 ;;      Temps:          4       0       0       0       0       0
  5073 ;;      Totals:        12       0       0       0       0       0
  5074 ;;Total ram usage:       12 bytes
  5075 ;; Hardware stack levels used: 1
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_Tick490Hz
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083  0E3D                     _readFilteredIL:	
  5084                           ;psect for function _readFilteredIL
  5085                           
  5086  0E3D                     i1l2388:	
  5087                           ;incstack = 0
  5088                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5089                           
  5090                           
  5091                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16 -1; i++) currentILFIFO[i] = currentILFIF
      +                          O[i+1];
  5092  0E3D  01FB               	clrf	readFilteredIL@i
  5093  0E3E                     i1l2394:
  5094  0E3E  357B               	lslf	readFilteredIL@i,w
  5095  0E3F  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5096  0E40  0086               	movwf	6
  5097  0E41  3001               	movlw	1	; select bank2/3
  5098  0E42  0087               	movwf	7
  5099  0E43  357B               	lslf	readFilteredIL@i,w
  5100  0E44  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5101  0E45  0084               	movwf	4
  5102  0E46  3001               	movlw	1	; select bank2/3
  5103  0E47  0085               	movwf	5
  5104  0E48  3F40               	moviw [0]fsr1
  5105  0E49  3F80               	movwi [0]fsr0
  5106  0E4A  3F41               	moviw [1]fsr1
  5107  0E4B  3F81               	movwi [1]fsr0
  5108  0E4C                     i1l2396:
  5109  0E4C  3001               	movlw	1
  5110  0E4D  00F2               	movwf	??_readFilteredIL
  5111  0E4E  0872               	movf	??_readFilteredIL,w
  5112  0E4F  07FB               	addwf	readFilteredIL@i,f
  5113  0E50                     i1l2398:
  5114  0E50  300F               	movlw	15
  5115  0E51  027B               	subwf	readFilteredIL@i,w
  5116  0E52  1C03               	skipc
  5117  0E53  2E55               	goto	u220_21
  5118  0E54  2E56               	goto	u220_20
  5119  0E55                     u220_21:
  5120  0E55  2E3E               	goto	i1l2394
  5121  0E56                     u220_20:
  5122  0E56                     i1l2400:
  5123                           
  5124                           ;CurrentSensor.c: 58:     currentILFIFO[16 -1] = latestIL;
  5125  0E56  0020               	movlb	0	; select bank0
  5126  0E57  0862               	movf	_latestIL+1,w	;volatile
  5127  0E58  0022               	movlb	2	; select bank2
  5128  0E59  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5129  0E5A  0020               	movlb	0	; select bank0
  5130  0E5B  0861               	movf	_latestIL,w	;volatile
  5131  0E5C  0022               	movlb	2	; select bank2
  5132  0E5D  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5133                           
  5134                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5135  0E5E  3000               	movlw	0
  5136  0E5F  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5137  0E60  3000               	movlw	0
  5138  0E61  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5139  0E62  3000               	movlw	0
  5140  0E63  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5141  0E64  3000               	movlw	0
  5142  0E65  00F6               	movwf	readFilteredIL@sumOfSamples
  5143  0E66                     i1l2402:
  5144                           
  5145                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16; i++) sumOfSamples += currentILFIFO[i];
  5146  0E66  01FA               	clrf	readFilteredIL@i_938
  5147  0E67                     i1l2408:
  5148  0E67  357A               	lslf	readFilteredIL@i_938,w
  5149  0E68  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5150  0E69  0086               	movwf	6
  5151  0E6A  3001               	movlw	1	; select bank2/3
  5152  0E6B  0087               	movwf	7
  5153  0E6C  3F40               	moviw [0]fsr1
  5154  0E6D  00F2               	movwf	??_readFilteredIL
  5155  0E6E  3F41               	moviw [1]fsr1
  5156  0E6F  00F3               	movwf	??_readFilteredIL+1
  5157  0E70  0872               	movf	??_readFilteredIL,w
  5158  0E71  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5159  0E72  0873               	movf	??_readFilteredIL+1,w
  5160  0E73  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5161  0E74  3000               	movlw	0
  5162  0E75  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5163  0E76  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5164  0E77                     i1l2410:
  5165  0E77  3001               	movlw	1
  5166  0E78  00F2               	movwf	??_readFilteredIL
  5167  0E79  0872               	movf	??_readFilteredIL,w
  5168  0E7A  07FA               	addwf	readFilteredIL@i_938,f
  5169  0E7B                     i1l2412:
  5170  0E7B  3010               	movlw	16
  5171  0E7C  027A               	subwf	readFilteredIL@i_938,w
  5172  0E7D  1C03               	skipc
  5173  0E7E  2E80               	goto	u221_21
  5174  0E7F  2E81               	goto	u221_20
  5175  0E80                     u221_21:
  5176  0E80  2E67               	goto	i1l2408
  5177  0E81                     u221_20:
  5178  0E81                     i1l2414:
  5179                           
  5180                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4);
  5181  0E81  0876               	movf	readFilteredIL@sumOfSamples,w
  5182  0E82  00F2               	movwf	??_readFilteredIL
  5183  0E83  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5184  0E84  00F3               	movwf	??_readFilteredIL+1
  5185  0E85  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5186  0E86  00F4               	movwf	??_readFilteredIL+2
  5187  0E87  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5188  0E88  00F5               	movwf	??_readFilteredIL+3
  5189  0E89  3004               	movlw	4
  5190  0E8A                     u222_25:
  5191  0E8A  36F5               	lsrf	??_readFilteredIL+3,f
  5192  0E8B  0CF4               	rrf	??_readFilteredIL+2,f
  5193  0E8C  0CF3               	rrf	??_readFilteredIL+1,f
  5194  0E8D  0CF2               	rrf	??_readFilteredIL,f
  5195  0E8E                     u222_20:
  5196  0E8E  0B89               	decfsz	9,f
  5197  0E8F  2E8A               	goto	u222_25
  5198  0E90  0873               	movf	??_readFilteredIL+1,w
  5199  0E91  00F1               	movwf	?_readFilteredIL+1
  5200  0E92  0872               	movf	??_readFilteredIL,w
  5201  0E93  00F0               	movwf	?_readFilteredIL
  5202  0E94                     i1l529:
  5203  0E94  0008               	return
  5204  0E95                     __end_of_readFilteredIL:
  5205                           
  5206                           	psect	text21
  5207  0FA5                     __ptext21:	
  5208 ;; *************** function _readFilteredFreqPot *****************
  5209 ;; Defined at:
  5210 ;;		line 39 in file "Potentiometer.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  i               1    8[BANK0 ] unsigned char 
  5215 ;;  i               1    9[BANK0 ] unsigned char 
  5216 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  2   10[COMMON] unsigned short 
  5219 ;; Registers used:
  5220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5226 ;;      Params:         2       0       0       0       0       0
  5227 ;;      Locals:         0       6       0       0       0       0
  5228 ;;      Temps:          0       4       0       0       0       0
  5229 ;;      Totals:         2      10       0       0       0       0
  5230 ;;Total ram usage:       12 bytes
  5231 ;; Hardware stack levels used: 1
  5232 ;; Hardware stack levels required when called: 1
  5233 ;; This function calls:
  5234 ;;		_readADCRaw
  5235 ;; This function is called by:
  5236 ;;		_Tick490Hz
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240  0FA5                     _readFilteredFreqPot:	
  5241                           ;psect for function _readFilteredFreqPot
  5242                           
  5243  0FA5                     i1l2496:	
  5244                           ;incstack = 0
  5245                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5246                           
  5247                           
  5248                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5249  0FA5  0020               	movlb	0	; select bank0
  5250  0FA6  01A9               	clrf	readFilteredFreqPot@i
  5251  0FA7                     i1l2502:
  5252  0FA7  3529               	lslf	readFilteredFreqPot@i,w
  5253  0FA8  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5254  0FA9  0086               	movwf	6
  5255  0FAA  3001               	movlw	1	; select bank3/4
  5256  0FAB  0087               	movwf	7
  5257  0FAC  3529               	lslf	readFilteredFreqPot@i,w
  5258  0FAD  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5259  0FAE  0084               	movwf	4
  5260  0FAF  3001               	movlw	1	; select bank3/4
  5261  0FB0  0085               	movwf	5
  5262  0FB1  3F40               	moviw [0]fsr1
  5263  0FB2  3F80               	movwi [0]fsr0
  5264  0FB3  3F41               	moviw [1]fsr1
  5265  0FB4  3F81               	movwi [1]fsr0
  5266  0FB5                     i1l2504:
  5267  0FB5  3001               	movlw	1
  5268  0FB6  00A0               	movwf	??_readFilteredFreqPot
  5269  0FB7  0820               	movf	??_readFilteredFreqPot,w
  5270  0FB8  07A9               	addwf	readFilteredFreqPot@i,f
  5271  0FB9                     i1l2506:
  5272  0FB9  300F               	movlw	15
  5273  0FBA  0229               	subwf	readFilteredFreqPot@i,w
  5274  0FBB  1C03               	skipc
  5275  0FBC  2FBE               	goto	u235_21
  5276  0FBD  2FBF               	goto	u235_20
  5277  0FBE                     u235_21:
  5278  0FBE  2FA7               	goto	i1l2502
  5279  0FBF                     u235_20:
  5280  0FBF                     i1l2508:
  5281                           
  5282                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5283  0FBF  300A               	movlw	10
  5284  0FC0  318E  2695  318F   	fcall	_readADCRaw
  5285  0FC3  0871               	movf	?_readADCRaw+1,w
  5286  0FC4  0023               	movlb	3	; select bank3
  5287  0FC5  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5288  0FC6  0870               	movf	?_readADCRaw,w
  5289  0FC7  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5290  0FC8                     i1l2510:
  5291                           
  5292                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5293  0FC8  3000               	movlw	0
  5294  0FC9  0020               	movlb	0	; select bank0
  5295  0FCA  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5296  0FCB  3000               	movlw	0
  5297  0FCC  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5298  0FCD  3000               	movlw	0
  5299  0FCE  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5300  0FCF  3000               	movlw	0
  5301  0FD0  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5302  0FD1                     i1l2512:
  5303                           
  5304                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5305  0FD1  01A8               	clrf	readFilteredFreqPot@i_754
  5306  0FD2                     i1l2518:
  5307  0FD2  3528               	lslf	readFilteredFreqPot@i_754,w
  5308  0FD3  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5309  0FD4  0086               	movwf	6
  5310  0FD5  3001               	movlw	1	; select bank3/4
  5311  0FD6  0087               	movwf	7
  5312  0FD7  3F40               	moviw [0]fsr1
  5313  0FD8  00A0               	movwf	??_readFilteredFreqPot
  5314  0FD9  3F41               	moviw [1]fsr1
  5315  0FDA  00A1               	movwf	??_readFilteredFreqPot+1
  5316  0FDB  0820               	movf	??_readFilteredFreqPot,w
  5317  0FDC  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5318  0FDD  0821               	movf	??_readFilteredFreqPot+1,w
  5319  0FDE  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5320  0FDF  3000               	movlw	0
  5321  0FE0  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5322  0FE1  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5323  0FE2                     i1l2520:
  5324  0FE2  3001               	movlw	1
  5325  0FE3  00A0               	movwf	??_readFilteredFreqPot
  5326  0FE4  0820               	movf	??_readFilteredFreqPot,w
  5327  0FE5  07A8               	addwf	readFilteredFreqPot@i_754,f
  5328  0FE6                     i1l2522:
  5329  0FE6  3010               	movlw	16
  5330  0FE7  0228               	subwf	readFilteredFreqPot@i_754,w
  5331  0FE8  1C03               	skipc
  5332  0FE9  2FEB               	goto	u236_21
  5333  0FEA  2FEC               	goto	u236_20
  5334  0FEB                     u236_21:
  5335  0FEB  2FD2               	goto	i1l2518
  5336  0FEC                     u236_20:
  5337  0FEC                     i1l2524:
  5338                           
  5339                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4);
  5340  0FEC  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5341  0FED  00A0               	movwf	??_readFilteredFreqPot
  5342  0FEE  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5343  0FEF  00A1               	movwf	??_readFilteredFreqPot+1
  5344  0FF0  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5345  0FF1  00A2               	movwf	??_readFilteredFreqPot+2
  5346  0FF2  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5347  0FF3  00A3               	movwf	??_readFilteredFreqPot+3
  5348  0FF4  3004               	movlw	4
  5349  0FF5                     u237_25:
  5350  0FF5  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5351  0FF6  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5352  0FF7  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5353  0FF8  0CA0               	rrf	??_readFilteredFreqPot,f
  5354  0FF9                     u237_20:
  5355  0FF9  0B89               	decfsz	9,f
  5356  0FFA  2FF5               	goto	u237_25
  5357  0FFB  0821               	movf	??_readFilteredFreqPot+1,w
  5358  0FFC  00FB               	movwf	?_readFilteredFreqPot+1
  5359  0FFD  0820               	movf	??_readFilteredFreqPot,w
  5360  0FFE  00FA               	movwf	?_readFilteredFreqPot
  5361  0FFF                     i1l370:
  5362  0FFF  0008               	return
  5363  1000                     __end_of_readFilteredFreqPot:
  5364                           
  5365                           	psect	text22
  5366  0F4A                     __ptext22:	
  5367 ;; *************** function _readFilteredDutyPot *****************
  5368 ;; Defined at:
  5369 ;;		line 25 in file "Potentiometer.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;  i               1    8[BANK0 ] unsigned char 
  5374 ;;  i               1    9[BANK0 ] unsigned char 
  5375 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  2   10[COMMON] unsigned short 
  5378 ;; Registers used:
  5379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5385 ;;      Params:         2       0       0       0       0       0
  5386 ;;      Locals:         0       6       0       0       0       0
  5387 ;;      Temps:          0       4       0       0       0       0
  5388 ;;      Totals:         2      10       0       0       0       0
  5389 ;;Total ram usage:       12 bytes
  5390 ;; Hardware stack levels used: 1
  5391 ;; Hardware stack levels required when called: 1
  5392 ;; This function calls:
  5393 ;;		_readADCRaw
  5394 ;; This function is called by:
  5395 ;;		_Tick490Hz
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399  0F4A                     _readFilteredDutyPot:	
  5400                           ;psect for function _readFilteredDutyPot
  5401                           
  5402  0F4A                     i1l2464:	
  5403                           ;incstack = 0
  5404                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5405                           
  5406                           
  5407                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5408  0F4A  0020               	movlb	0	; select bank0
  5409  0F4B  01A9               	clrf	readFilteredDutyPot@i
  5410  0F4C                     i1l2470:
  5411  0F4C  3529               	lslf	readFilteredDutyPot@i,w
  5412  0F4D  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5413  0F4E  0086               	movwf	6
  5414  0F4F  3002               	movlw	2	; select bank4/5
  5415  0F50  0087               	movwf	7
  5416  0F51  3529               	lslf	readFilteredDutyPot@i,w
  5417  0F52  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5418  0F53  0084               	movwf	4
  5419  0F54  3002               	movlw	2	; select bank4/5
  5420  0F55  0085               	movwf	5
  5421  0F56  3F40               	moviw [0]fsr1
  5422  0F57  3F80               	movwi [0]fsr0
  5423  0F58  3F41               	moviw [1]fsr1
  5424  0F59  3F81               	movwi [1]fsr0
  5425  0F5A                     i1l2472:
  5426  0F5A  3001               	movlw	1
  5427  0F5B  00A0               	movwf	??_readFilteredDutyPot
  5428  0F5C  0820               	movf	??_readFilteredDutyPot,w
  5429  0F5D  07A9               	addwf	readFilteredDutyPot@i,f
  5430  0F5E                     i1l2474:
  5431  0F5E  300F               	movlw	15
  5432  0F5F  0229               	subwf	readFilteredDutyPot@i,w
  5433  0F60  1C03               	skipc
  5434  0F61  2F63               	goto	u232_21
  5435  0F62  2F64               	goto	u232_20
  5436  0F63                     u232_21:
  5437  0F63  2F4C               	goto	i1l2470
  5438  0F64                     u232_20:
  5439  0F64                     i1l2476:
  5440                           
  5441                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5442  0F64  3009               	movlw	9
  5443  0F65  318E  2695  318F   	fcall	_readADCRaw
  5444  0F68  0871               	movf	?_readADCRaw+1,w
  5445  0F69  0024               	movlb	4	; select bank4
  5446  0F6A  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5447  0F6B  0870               	movf	?_readADCRaw,w
  5448  0F6C  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5449  0F6D                     i1l2478:
  5450                           
  5451                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5452  0F6D  3000               	movlw	0
  5453  0F6E  0020               	movlb	0	; select bank0
  5454  0F6F  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5455  0F70  3000               	movlw	0
  5456  0F71  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5457  0F72  3000               	movlw	0
  5458  0F73  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5459  0F74  3000               	movlw	0
  5460  0F75  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5461  0F76                     i1l2480:
  5462                           
  5463                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5464  0F76  01A8               	clrf	readFilteredDutyPot@i_750
  5465  0F77                     i1l2486:
  5466  0F77  3528               	lslf	readFilteredDutyPot@i_750,w
  5467  0F78  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5468  0F79  0086               	movwf	6
  5469  0F7A  3002               	movlw	2	; select bank4/5
  5470  0F7B  0087               	movwf	7
  5471  0F7C  3F40               	moviw [0]fsr1
  5472  0F7D  00A0               	movwf	??_readFilteredDutyPot
  5473  0F7E  3F41               	moviw [1]fsr1
  5474  0F7F  00A1               	movwf	??_readFilteredDutyPot+1
  5475  0F80  0820               	movf	??_readFilteredDutyPot,w
  5476  0F81  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5477  0F82  0821               	movf	??_readFilteredDutyPot+1,w
  5478  0F83  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5479  0F84  3000               	movlw	0
  5480  0F85  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5481  0F86  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5482  0F87                     i1l2488:
  5483  0F87  3001               	movlw	1
  5484  0F88  00A0               	movwf	??_readFilteredDutyPot
  5485  0F89  0820               	movf	??_readFilteredDutyPot,w
  5486  0F8A  07A8               	addwf	readFilteredDutyPot@i_750,f
  5487  0F8B                     i1l2490:
  5488  0F8B  3010               	movlw	16
  5489  0F8C  0228               	subwf	readFilteredDutyPot@i_750,w
  5490  0F8D  1C03               	skipc
  5491  0F8E  2F90               	goto	u233_21
  5492  0F8F  2F91               	goto	u233_20
  5493  0F90                     u233_21:
  5494  0F90  2F77               	goto	i1l2486
  5495  0F91                     u233_20:
  5496  0F91                     i1l2492:
  5497                           
  5498                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4);
  5499  0F91  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5500  0F92  00A0               	movwf	??_readFilteredDutyPot
  5501  0F93  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5502  0F94  00A1               	movwf	??_readFilteredDutyPot+1
  5503  0F95  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5504  0F96  00A2               	movwf	??_readFilteredDutyPot+2
  5505  0F97  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5506  0F98  00A3               	movwf	??_readFilteredDutyPot+3
  5507  0F99  3004               	movlw	4
  5508  0F9A                     u234_25:
  5509  0F9A  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5510  0F9B  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5511  0F9C  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5512  0F9D  0CA0               	rrf	??_readFilteredDutyPot,f
  5513  0F9E                     u234_20:
  5514  0F9E  0B89               	decfsz	9,f
  5515  0F9F  2F9A               	goto	u234_25
  5516  0FA0  0821               	movf	??_readFilteredDutyPot+1,w
  5517  0FA1  00FB               	movwf	?_readFilteredDutyPot+1
  5518  0FA2  0820               	movf	??_readFilteredDutyPot,w
  5519  0FA3  00FA               	movwf	?_readFilteredDutyPot
  5520  0FA4                     i1l363:
  5521  0FA4  0008               	return
  5522  0FA5                     __end_of_readFilteredDutyPot:
  5523                           
  5524                           	psect	text23
  5525  0E95                     __ptext23:	
  5526 ;; *************** function _readADCRaw *****************
  5527 ;; Defined at:
  5528 ;;		line 71 in file "ADC.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  gpioNumber      1    wreg     const enum E2798
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5533 ;;  i               1    8[COMMON] unsigned char 
  5534 ;;  returnValue     2    4[COMMON] unsigned int 
  5535 ;;  gpioValid       1    7[COMMON] unsigned char 
  5536 ;;  channel         1    6[COMMON] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  2    0[COMMON] unsigned short 
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5546 ;;      Params:         2       0       0       0       0       0
  5547 ;;      Locals:         6       0       0       0       0       0
  5548 ;;      Temps:          2       0       0       0       0       0
  5549 ;;      Totals:        10       0       0       0       0       0
  5550 ;;Total ram usage:       10 bytes
  5551 ;; Hardware stack levels used: 1
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_readFilteredDutyPot
  5556 ;;		_readFilteredFreqPot
  5557 ;;		_readFilteredVout
  5558 ;;		_readFilteredIDS
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562  0E95                     _readADCRaw:	
  5563                           ;psect for function _readADCRaw
  5564                           
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5568                           ;readADCRaw@gpioNumber stored from wreg
  5569  0E95  00F9               	movwf	readADCRaw@gpioNumber
  5570  0E96                     i1l2214:
  5571                           
  5572                           ;ADC.c: 72:     uint8_t channel = 0;
  5573  0E96  01F6               	clrf	readADCRaw@channel
  5574                           
  5575                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5576  0E97  01F7               	clrf	readADCRaw@gpioValid
  5577  0E98                     i1l2216:
  5578                           
  5579                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5580  0E98  3005               	movlw	5
  5581  0E99  0279               	subwf	readADCRaw@gpioNumber,w
  5582  0E9A  1803               	skipnc
  5583  0E9B  2E9D               	goto	u185_21
  5584  0E9C  2E9E               	goto	u185_20
  5585  0E9D                     u185_21:
  5586  0E9D  2EA4               	goto	i1l244
  5587  0E9E                     u185_20:
  5588  0E9E                     i1l2218:
  5589                           
  5590                           ;ADC.c: 76:         channel = gpioNumber;
  5591  0E9E  0879               	movf	readADCRaw@gpioNumber,w
  5592  0E9F  00F2               	movwf	??_readADCRaw
  5593  0EA0  0872               	movf	??_readADCRaw,w
  5594  0EA1  00F6               	movwf	readADCRaw@channel
  5595  0EA2                     i1l2220:
  5596                           
  5597                           ;ADC.c: 77:         gpioValid = 1;
  5598  0EA2  01F7               	clrf	readADCRaw@gpioValid
  5599  0EA3  0AF7               	incf	readADCRaw@gpioValid,f
  5600  0EA4                     i1l244:	
  5601                           ;ADC.c: 78:     }
  5602                           
  5603                           
  5604                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5605  0EA4  3009               	movlw	9
  5606  0EA5  0279               	subwf	readADCRaw@gpioNumber,w
  5607  0EA6  1C03               	skipc
  5608  0EA7  2EA9               	goto	u186_21
  5609  0EA8  2EAA               	goto	u186_20
  5610  0EA9                     u186_21:
  5611  0EA9  2EB7               	goto	i1l245
  5612  0EAA                     u186_20:
  5613  0EAA                     i1l2222:
  5614  0EAA  3010               	movlw	16
  5615  0EAB  0279               	subwf	readADCRaw@gpioNumber,w
  5616  0EAC  1803               	skipnc
  5617  0EAD  2EAF               	goto	u187_21
  5618  0EAE  2EB0               	goto	u187_20
  5619  0EAF                     u187_21:
  5620  0EAF  2EB7               	goto	i1l245
  5621  0EB0                     u187_20:
  5622  0EB0                     i1l2224:
  5623                           
  5624                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5625  0EB0  0879               	movf	readADCRaw@gpioNumber,w
  5626  0EB1  3C14               	sublw	20
  5627  0EB2  00F2               	movwf	??_readADCRaw
  5628  0EB3  0872               	movf	??_readADCRaw,w
  5629  0EB4  00F6               	movwf	readADCRaw@channel
  5630  0EB5                     i1l2226:
  5631                           
  5632                           ;ADC.c: 81:         gpioValid = 1;
  5633  0EB5  01F7               	clrf	readADCRaw@gpioValid
  5634  0EB6  0AF7               	incf	readADCRaw@gpioValid,f
  5635  0EB7                     i1l245:	
  5636                           ;ADC.c: 82:     }
  5637                           
  5638                           
  5639                           ;ADC.c: 83:     if(gpioValid){
  5640  0EB7  0877               	movf	readADCRaw@gpioValid,w
  5641  0EB8  1903               	btfsc	3,2
  5642  0EB9  2EBB               	goto	u188_21
  5643  0EBA  2EBC               	goto	u188_20
  5644  0EBB                     u188_21:
  5645  0EBB  2EEC               	goto	i1l2254
  5646  0EBC                     u188_20:
  5647  0EBC                     i1l2228:
  5648                           
  5649                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5650  0EBC  0021               	movlb	1	; select bank1
  5651  0EBD  081D               	movf	29,w	;volatile
  5652  0EBE                     i1l2230:
  5653                           
  5654                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5655  0EBE  3083               	movlw	131
  5656  0EBF  00F2               	movwf	??_readADCRaw
  5657  0EC0  0872               	movf	??_readADCRaw,w
  5658  0EC1  059D               	andwf	29,f	;volatile
  5659  0EC2                     i1l2232:
  5660                           
  5661                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5662  0EC2  0876               	movf	readADCRaw@channel,w	;volatile
  5663  0EC3  00F2               	movwf	??_readADCRaw
  5664  0EC4  3001               	movlw	1
  5665  0EC5                     u189_25:
  5666  0EC5  35F2               	lslf	??_readADCRaw,f
  5667  0EC6  3EFF               	addlw	-1
  5668  0EC7  1D03               	skipz
  5669  0EC8  2EC5               	goto	u189_25
  5670  0EC9  3572               	lslf	??_readADCRaw,w
  5671  0ECA  00F3               	movwf	??_readADCRaw+1
  5672  0ECB  0873               	movf	??_readADCRaw+1,w
  5673  0ECC  049D               	iorwf	29,f	;volatile
  5674  0ECD                     i1l2234:
  5675                           
  5676                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5677  0ECD  01F8               	clrf	readADCRaw@i
  5678  0ECE                     i1l2240:
  5679  0ECE  3001               	movlw	1
  5680  0ECF  00F2               	movwf	??_readADCRaw
  5681  0ED0  0872               	movf	??_readADCRaw,w
  5682  0ED1  07F8               	addwf	readADCRaw@i,f
  5683  0ED2                     i1l2242:
  5684  0ED2  3010               	movlw	16
  5685  0ED3  0278               	subwf	readADCRaw@i,w
  5686  0ED4  1C03               	skipc
  5687  0ED5  2ED7               	goto	u190_21
  5688  0ED6  2ED8               	goto	u190_20
  5689  0ED7                     u190_21:
  5690  0ED7  2ECE               	goto	i1l2240
  5691  0ED8                     u190_20:
  5692  0ED8                     i1l249:
  5693                           
  5694                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5695  0ED8  0021               	movlb	1	; select bank1
  5696  0ED9  149D               	bsf	29,1	;volatile
  5697  0EDA                     i1l250:	
  5698                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5699                           
  5700  0EDA  189D               	btfsc	29,1	;volatile
  5701  0EDB  2EDD               	goto	u191_21
  5702  0EDC  2EDE               	goto	u191_20
  5703  0EDD                     u191_21:
  5704  0EDD  2EDA               	goto	i1l250
  5705  0EDE                     u191_20:
  5706  0EDE                     i1l2244:
  5707                           
  5708                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5709  0EDE  081C               	movf	28,w	;volatile
  5710  0EDF  00F5               	movwf	readADCRaw@returnValue+1
  5711  0EE0  081B               	movf	27,w	;volatile
  5712  0EE1  00F4               	movwf	readADCRaw@returnValue
  5713  0EE2                     i1l2246:
  5714                           
  5715                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5716  0EE2  3083               	movlw	131
  5717  0EE3  00F2               	movwf	??_readADCRaw
  5718  0EE4  0872               	movf	??_readADCRaw,w
  5719  0EE5  059D               	andwf	29,f	;volatile
  5720  0EE6                     i1l2248:
  5721                           
  5722                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5723  0EE6  159D               	bsf	29,3	;volatile
  5724  0EE7                     i1l2250:
  5725                           
  5726                           ;ADC.c: 98:             return returnValue;
  5727  0EE7  0875               	movf	readADCRaw@returnValue+1,w
  5728  0EE8  00F1               	movwf	?_readADCRaw+1
  5729  0EE9  0874               	movf	readADCRaw@returnValue,w
  5730  0EEA  00F0               	movwf	?_readADCRaw
  5731  0EEB  2EEE               	goto	i1l253
  5732  0EEC                     i1l2254:
  5733  0EEC  01F0               	clrf	?_readADCRaw
  5734  0EED  01F1               	clrf	?_readADCRaw+1
  5735  0EEE                     i1l253:
  5736  0EEE  0008               	return
  5737  0EEF                     __end_of_readADCRaw:
  5738                           
  5739                           	psect	text24
  5740  0C8D                     __ptext24:	
  5741 ;; *************** function _currentTripMonitor *****************
  5742 ;; Defined at:
  5743 ;;		line 94 in file "CurrentSensor.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  2    4[None  ] int 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, pclath, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5757 ;;      Params:         0       0       0       0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0
  5759 ;;      Temps:          1       0       0       0       0       0
  5760 ;;      Totals:         1       0       0       0       0       0
  5761 ;;Total ram usage:        1 bytes
  5762 ;; Hardware stack levels used: 1
  5763 ;; Hardware stack levels required when called: 2
  5764 ;; This function calls:
  5765 ;;		_currentTripRead
  5766 ;;		_transToOverCurrentFault
  5767 ;;		i1_currentTripReset
  5768 ;; This function is called by:
  5769 ;;		_Tick490Hz
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773  0C8D                     _currentTripMonitor:	
  5774                           ;psect for function _currentTripMonitor
  5775                           
  5776  0C8D                     i1l2342:	
  5777                           ;incstack = 0
  5778                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5779                           
  5780                           
  5781                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5782  0C8D  318C  24DC  318C   	fcall	_currentTripRead
  5783  0C90  3A01               	xorlw	1
  5784  0C91  1D03               	skipz
  5785  0C92  2C94               	goto	u211_21
  5786  0C93  2C95               	goto	u211_20
  5787  0C94                     u211_21:
  5788  0C94  2CA8               	goto	i1l2350
  5789  0C95                     u211_20:
  5790  0C95                     i1l2344:
  5791                           
  5792                           ;CurrentSensor.c: 97:         currentTripCount++;
  5793  0C95  3001               	movlw	1
  5794  0C96  00FB               	movwf	??_currentTripMonitor
  5795  0C97  087B               	movf	??_currentTripMonitor,w
  5796  0C98  0020               	movlb	0	; select bank0
  5797  0C99  07E9               	addwf	_currentTripCount,f
  5798                           
  5799                           ;CurrentSensor.c: 98:         if(currentTripCount == 3){
  5800  0C9A  3003               	movlw	3
  5801  0C9B  0669               	xorwf	_currentTripCount,w
  5802  0C9C  1D03               	btfss	3,2
  5803  0C9D  2C9F               	goto	u212_21
  5804  0C9E  2CA0               	goto	u212_20
  5805  0C9F                     u212_21:
  5806  0C9F  2CA4               	goto	i1l2348
  5807  0CA0                     u212_20:
  5808  0CA0                     i1l2346:
  5809                           
  5810                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5811  0CA0  318B  23B5  318C   	fcall	_transToOverCurrentFault
  5812                           
  5813                           ;CurrentSensor.c: 100:         }
  5814  0CA3  2CB0               	goto	i1l543
  5815  0CA4                     i1l2348:
  5816                           
  5817                           ;CurrentSensor.c: 102:             currentTripReset();
  5818  0CA4  318B  23C7  318C   	fcall	i1_currentTripReset
  5819  0CA7  2CB0               	goto	i1l543
  5820  0CA8                     i1l2350:
  5821                           
  5822                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5823  0CA8  0020               	movlb	0	; select bank0
  5824  0CA9  0869               	movf	_currentTripCount,w
  5825  0CAA  1903               	btfsc	3,2
  5826  0CAB  2CAD               	goto	u213_21
  5827  0CAC  2CAE               	goto	u213_20
  5828  0CAD                     u213_21:
  5829  0CAD  2CB0               	goto	i1l543
  5830  0CAE                     u213_20:
  5831  0CAE                     i1l2352:
  5832                           
  5833                           ;CurrentSensor.c: 107:             currentTripCount--;
  5834  0CAE  3001               	movlw	1
  5835  0CAF  02E9               	subwf	_currentTripCount,f
  5836  0CB0                     i1l543:
  5837  0CB0  0008               	return
  5838  0CB1                     __end_of_currentTripMonitor:
  5839                           
  5840                           	psect	text25
  5841  0BC7                     __ptext25:	
  5842 ;; *************** function i1_currentTripReset *****************
  5843 ;; Defined at:
  5844 ;;		line 71 in file "CurrentSensor.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5858 ;;      Params:         0       0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0
  5860 ;;      Temps:          0       0       0       0       0       0
  5861 ;;      Totals:         0       0       0       0       0       0
  5862 ;;Total ram usage:        0 bytes
  5863 ;; Hardware stack levels used: 1
  5864 ;; Hardware stack levels required when called: 1
  5865 ;; This function calls:
  5866 ;;		i1_writeGPIO
  5867 ;; This function is called by:
  5868 ;;		_currentTripMonitor
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872  0BC7                     i1_currentTripReset:	
  5873                           ;psect for function i1_currentTripReset
  5874                           
  5875  0BC7                     i1l2338:	
  5876                           ;incstack = 0
  5877                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5878                           
  5879                           
  5880                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5881  0BC7  01F0               	clrf	i1writeGPIO@writeValue
  5882  0BC8  300B               	movlw	11
  5883  0BC9  3186  26FA  318B   	fcall	i1_writeGPIO
  5884  0BCC                     i1l2340:
  5885                           
  5886                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5887                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5888  0BCC  01F0               	clrf	i1writeGPIO@writeValue
  5889  0BCD  0AF0               	incf	i1writeGPIO@writeValue,f
  5890  0BCE  300B               	movlw	11
  5891  0BCF  3186  26FA  318B   	fcall	i1_writeGPIO
  5892  0BD2                     i1l532:
  5893  0BD2  0008               	return
  5894  0BD3                     __end_ofi1_currentTripReset:
  5895                           
  5896                           	psect	text26
  5897  06FA                     __ptext26:	
  5898 ;; *************** function i1_writeGPIO *****************
  5899 ;; Defined at:
  5900 ;;		line 52 in file "GPIO.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  gpioNumber      1    wreg     const enum E2798
  5903 ;;  writeValue      1    0[COMMON] unsigned char 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5906 ;;  portNumber      1    5[COMMON] unsigned char 
  5907 ;;  portType        1    3[COMMON] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5917 ;;      Params:         1       0       0       0       0       0
  5918 ;;      Locals:         3       0       0       0       0       0
  5919 ;;      Temps:          2       0       0       0       0       0
  5920 ;;      Totals:         6       0       0       0       0       0
  5921 ;;Total ram usage:        6 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_Tick490Hz
  5927 ;;		i1_currentTripReset
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931  06FA                     i1_writeGPIO:	
  5932                           ;psect for function i1_writeGPIO
  5933                           
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5937                           ;i1writeGPIO@gpioNumber stored from wreg
  5938  06FA  00F4               	movwf	i1writeGPIO@gpioNumber
  5939  06FB                     i1l2090:
  5940                           
  5941                           ;GPIO.c: 54:     uint8_t portType = 0;
  5942  06FB  01F3               	clrf	i1writeGPIO@portType
  5943  06FC                     i1l2092:
  5944                           
  5945                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5946  06FC  3008               	movlw	8
  5947  06FD  0274               	subwf	i1writeGPIO@gpioNumber,w
  5948  06FE  1C03               	skipc
  5949  06FF  2F01               	goto	u150_21
  5950  0700  2F02               	goto	u150_20
  5951  0701                     u150_21:
  5952  0701  2F0A               	goto	i1l2098
  5953  0702                     u150_20:
  5954  0702                     i1l2094:
  5955                           
  5956                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  5957  0702  0874               	movf	i1writeGPIO@gpioNumber,w
  5958  0703  3EF8               	addlw	248
  5959  0704  00F1               	movwf	??i1_writeGPIO
  5960  0705  0871               	movf	??i1_writeGPIO,w
  5961  0706  00F5               	movwf	i1writeGPIO@portNumber
  5962  0707                     i1l2096:
  5963                           
  5964                           ;GPIO.c: 57:         portType = 1;
  5965  0707  01F3               	clrf	i1writeGPIO@portType
  5966  0708  0AF3               	incf	i1writeGPIO@portType,f
  5967                           
  5968                           ;GPIO.c: 58:     }
  5969  0709  2F0F               	goto	i1l2102
  5970  070A                     i1l2098:
  5971                           
  5972                           ;GPIO.c: 60:         portNumber = gpioNumber;
  5973  070A  0874               	movf	i1writeGPIO@gpioNumber,w
  5974  070B  00F1               	movwf	??i1_writeGPIO
  5975  070C  0871               	movf	??i1_writeGPIO,w
  5976  070D  00F5               	movwf	i1writeGPIO@portNumber
  5977  070E                     i1l2100:
  5978                           
  5979                           ;GPIO.c: 61:         portType = 0;
  5980  070E  01F3               	clrf	i1writeGPIO@portType
  5981  070F                     i1l2102:
  5982                           
  5983                           ;GPIO.c: 64:     if(portType == 0){
  5984  070F  0873               	movf	i1writeGPIO@portType,w
  5985  0710  1D03               	btfss	3,2
  5986  0711  2F13               	goto	u151_21
  5987  0712  2F14               	goto	u151_20
  5988  0713                     u151_21:
  5989  0713  2F34               	goto	i1l2110
  5990  0714                     u151_20:
  5991  0714                     i1l2104:
  5992                           
  5993                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  5994  0714  0870               	movf	i1writeGPIO@writeValue,w
  5995  0715  1903               	btfsc	3,2
  5996  0716  2F18               	goto	u152_21
  5997  0717  2F19               	goto	u152_20
  5998  0718                     u152_21:
  5999  0718  2F26               	goto	i1l2108
  6000  0719                     u152_20:
  6001  0719                     i1l2106:
  6002  0719  3001               	movlw	1
  6003  071A  00F1               	movwf	??i1_writeGPIO
  6004  071B  0A75               	incf	i1writeGPIO@portNumber,w
  6005  071C  2F1E               	goto	u153_24
  6006  071D                     u153_25:
  6007  071D  35F1               	lslf	??i1_writeGPIO,f
  6008  071E                     u153_24:
  6009  071E  0B89               	decfsz	9,f
  6010  071F  2F1D               	goto	u153_25
  6011  0720  0871               	movf	??i1_writeGPIO,w
  6012  0721  00F2               	movwf	??i1_writeGPIO+1
  6013  0722  0872               	movf	??i1_writeGPIO+1,w
  6014  0723  0022               	movlb	2	; select bank2
  6015  0724  048C               	iorwf	12,f	;volatile
  6016  0725  2F58               	goto	i1l318
  6017  0726                     i1l2108:
  6018  0726  3001               	movlw	1
  6019  0727  00F1               	movwf	??i1_writeGPIO
  6020  0728  0A75               	incf	i1writeGPIO@portNumber,w
  6021  0729  2F2B               	goto	u154_24
  6022  072A                     u154_25:
  6023  072A  35F1               	lslf	??i1_writeGPIO,f
  6024  072B                     u154_24:
  6025  072B  0B89               	decfsz	9,f
  6026  072C  2F2A               	goto	u154_25
  6027  072D  0871               	movf	??i1_writeGPIO,w
  6028  072E  3AFF               	xorlw	255
  6029  072F  00F2               	movwf	??i1_writeGPIO+1
  6030  0730  0872               	movf	??i1_writeGPIO+1,w
  6031  0731  0022               	movlb	2	; select bank2
  6032  0732  058C               	andwf	12,f	;volatile
  6033  0733  2F58               	goto	i1l318
  6034  0734                     i1l2110:
  6035  0734  0373               	decf	i1writeGPIO@portType,w
  6036  0735  1D03               	btfss	3,2
  6037  0736  2F38               	goto	u155_21
  6038  0737  2F39               	goto	u155_20
  6039  0738                     u155_21:
  6040  0738  2F58               	goto	i1l318
  6041  0739                     u155_20:
  6042  0739                     i1l2112:
  6043                           
  6044                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6045  0739  0870               	movf	i1writeGPIO@writeValue,w
  6046  073A  1903               	btfsc	3,2
  6047  073B  2F3D               	goto	u156_21
  6048  073C  2F3E               	goto	u156_20
  6049  073D                     u156_21:
  6050  073D  2F4B               	goto	i1l2116
  6051  073E                     u156_20:
  6052  073E                     i1l2114:
  6053  073E  3001               	movlw	1
  6054  073F  00F1               	movwf	??i1_writeGPIO
  6055  0740  0A75               	incf	i1writeGPIO@portNumber,w
  6056  0741  2F43               	goto	u157_24
  6057  0742                     u157_25:
  6058  0742  35F1               	lslf	??i1_writeGPIO,f
  6059  0743                     u157_24:
  6060  0743  0B89               	decfsz	9,f
  6061  0744  2F42               	goto	u157_25
  6062  0745  0871               	movf	??i1_writeGPIO,w
  6063  0746  00F2               	movwf	??i1_writeGPIO+1
  6064  0747  0872               	movf	??i1_writeGPIO+1,w
  6065  0748  0022               	movlb	2	; select bank2
  6066  0749  048D               	iorwf	13,f	;volatile
  6067  074A  2F58               	goto	i1l318
  6068  074B                     i1l2116:
  6069  074B  3001               	movlw	1
  6070  074C  00F1               	movwf	??i1_writeGPIO
  6071  074D  0A75               	incf	i1writeGPIO@portNumber,w
  6072  074E  2F50               	goto	u158_24
  6073  074F                     u158_25:
  6074  074F  35F1               	lslf	??i1_writeGPIO,f
  6075  0750                     u158_24:
  6076  0750  0B89               	decfsz	9,f
  6077  0751  2F4F               	goto	u158_25
  6078  0752  0871               	movf	??i1_writeGPIO,w
  6079  0753  3AFF               	xorlw	255
  6080  0754  00F2               	movwf	??i1_writeGPIO+1
  6081  0755  0872               	movf	??i1_writeGPIO+1,w
  6082  0756  0022               	movlb	2	; select bank2
  6083  0757  058D               	andwf	13,f	;volatile
  6084  0758                     i1l318:
  6085  0758  0008               	return
  6086  0759                     __end_ofi1_writeGPIO:
  6087                           
  6088                           	psect	text27
  6089  0BB5                     __ptext27:	
  6090 ;; *************** function _transToOverCurrentFault *****************
  6091 ;; Defined at:
  6092 ;;		line 45 in file "StateMachine.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6106 ;;      Params:         0       0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0
  6108 ;;      Temps:          1       0       0       0       0       0
  6109 ;;      Totals:         1       0       0       0       0       0
  6110 ;;Total ram usage:        1 bytes
  6111 ;; Hardware stack levels used: 1
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_currentTripMonitor
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119  0BB5                     _transToOverCurrentFault:	
  6120                           ;psect for function _transToOverCurrentFault
  6121                           
  6122  0BB5                     i1l2310:	
  6123                           ;incstack = 0
  6124                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6125                           
  6126                           
  6127                           ;StateMachine.c: 46:     setDuty = 0;
  6128  0BB5  0020               	movlb	0	; select bank0
  6129  0BB6  01E3               	clrf	_setDuty
  6130  0BB7  01E4               	clrf	_setDuty+1
  6131                           
  6132                           ;StateMachine.c: 47:     setPeriod = 0;
  6133  0BB8  01EE               	clrf	_setPeriod
  6134  0BB9                     i1l2312:
  6135                           
  6136                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  6137  0BB9  3004               	movlw	4
  6138  0BBA  00F0               	movwf	??_transToOverCurrentFault
  6139  0BBB  0870               	movf	??_transToOverCurrentFault,w
  6140  0BBC  00EC               	movwf	_currentState
  6141  0BBD                     i1l567:
  6142  0BBD  0008               	return
  6143  0BBE                     __end_of_transToOverCurrentFault:
  6144                           
  6145                           	psect	text28
  6146  0CDC                     __ptext28:	
  6147 ;; *************** function _currentTripRead *****************
  6148 ;; Defined at:
  6149 ;;		line 31 in file "CurrentSensor.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;		None
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      _Bool 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0, pclath, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6163 ;;      Params:         0       0       0       0       0       0
  6164 ;;      Locals:         1       0       0       0       0       0
  6165 ;;      Temps:          1       0       0       0       0       0
  6166 ;;      Totals:         2       0       0       0       0       0
  6167 ;;Total ram usage:        2 bytes
  6168 ;; Hardware stack levels used: 1
  6169 ;; Hardware stack levels required when called: 1
  6170 ;; This function calls:
  6171 ;;		i1_readGPIO
  6172 ;; This function is called by:
  6173 ;;		_currentTripMonitor
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177  0CDC                     _currentTripRead:	
  6178                           ;psect for function _currentTripRead
  6179                           
  6180  0CDC                     i1l2296:	
  6181                           ;incstack = 0
  6182                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6183                           
  6184                           
  6185                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6186  0CDC  3001               	movlw	1
  6187  0CDD  318D  25AC  318C   	fcall	i1_readGPIO
  6188  0CE0  3A01               	xorlw	1
  6189  0CE1  1D03               	skipz
  6190  0CE2  2CE4               	goto	u198_21
  6191  0CE3  2CE6               	goto	u198_20
  6192  0CE4                     u198_21:
  6193  0CE4  3001               	movlw	1
  6194  0CE5  2CE7               	goto	u199_20
  6195  0CE6                     u198_20:
  6196  0CE6  3000               	movlw	0
  6197  0CE7                     u199_20:
  6198  0CE7  00F9               	movwf	??_currentTripRead
  6199  0CE8  0879               	movf	??_currentTripRead,w
  6200  0CE9  0020               	movlb	0	; select bank0
  6201  0CEA  00EB               	movwf	_tripIDS
  6202                           
  6203                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6204  0CEB  3003               	movlw	3
  6205  0CEC  318D  25AC  318C   	fcall	i1_readGPIO
  6206  0CEF  3A01               	xorlw	1
  6207  0CF0  1D03               	skipz
  6208  0CF1  2CF3               	goto	u200_21
  6209  0CF2  2CF5               	goto	u200_20
  6210  0CF3                     u200_21:
  6211  0CF3  3001               	movlw	1
  6212  0CF4  2CF6               	goto	u201_20
  6213  0CF5                     u200_20:
  6214  0CF5  3000               	movlw	0
  6215  0CF6                     u201_20:
  6216  0CF6  00F9               	movwf	??_currentTripRead
  6217  0CF7  0879               	movf	??_currentTripRead,w
  6218  0CF8  0020               	movlb	0	; select bank0
  6219  0CF9  00EA               	movwf	_tripIL
  6220  0CFA                     i1l2298:
  6221                           
  6222                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6223  0CFA  01FA               	clrf	_currentTripRead$930
  6224  0CFB  0AFA               	incf	_currentTripRead$930,f
  6225  0CFC                     i1l2300:
  6226  0CFC  086A               	movf	_tripIL,w
  6227  0CFD  1D03               	btfss	3,2
  6228  0CFE  2D00               	goto	u202_21
  6229  0CFF  2D01               	goto	u202_20
  6230  0D00                     u202_21:
  6231  0D00  2D07               	goto	i1l2306
  6232  0D01                     u202_20:
  6233  0D01                     i1l2302:
  6234  0D01  086B               	movf	_tripIDS,w
  6235  0D02  1D03               	btfss	3,2
  6236  0D03  2D05               	goto	u203_21
  6237  0D04  2D06               	goto	u203_20
  6238  0D05                     u203_21:
  6239  0D05  2D07               	goto	i1l2306
  6240  0D06                     u203_20:
  6241  0D06                     i1l2304:
  6242  0D06  01FA               	clrf	_currentTripRead$930
  6243  0D07                     i1l2306:
  6244  0D07  087A               	movf	_currentTripRead$930,w
  6245  0D08                     i1l515:
  6246  0D08  0008               	return
  6247  0D09                     __end_of_currentTripRead:
  6248                           
  6249                           	psect	text29
  6250  0315                     __ptext29:	
  6251 ;; *************** function _controlRoutine *****************
  6252 ;; Defined at:
  6253 ;;		line 60 in file "Controller.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6258 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6268 ;;      Params:         0       0       0       0       0       0
  6269 ;;      Locals:         0       4       0       0       0       0
  6270 ;;      Temps:          0       6       0       0       0       0
  6271 ;;      Totals:         0      10       0       0       0       0
  6272 ;;Total ram usage:       10 bytes
  6273 ;; Hardware stack levels used: 1
  6274 ;; Hardware stack levels required when called: 3
  6275 ;; This function calls:
  6276 ;;		___lldiv
  6277 ;;		___wmul
  6278 ;;		_runCurrentModeControl
  6279 ;;		_runVoltageModeControl
  6280 ;; This function is called by:
  6281 ;;		_Tick490Hz
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285  0315                     _controlRoutine:	
  6286                           ;psect for function _controlRoutine
  6287                           
  6288  0315                     i1l2360:	
  6289                           ;incstack = 0
  6290                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6291                           
  6292                           
  6293                           ;Controller.c: 61:     if(currentState == voltageModeControl){
  6294  0315  3002               	movlw	2
  6295  0316  0020               	movlb	0	; select bank0
  6296  0317  066C               	xorwf	_currentState,w
  6297  0318  1D03               	btfss	3,2
  6298  0319  2B1B               	goto	u216_21
  6299  031A  2B1C               	goto	u216_20
  6300  031B                     u216_21:
  6301  031B  2B57               	goto	i1l2368
  6302  031C                     u216_20:
  6303  031C                     i1l2362:
  6304                           
  6305                           ;Controller.c: 62:         runVoltageModeControl();
  6306  031C  3180  20B4  3183   	fcall	_runVoltageModeControl
  6307  031F                     i1l2364:
  6308                           
  6309                           ;Controller.c: 63:         setPeriod = 79u;
  6310  031F  304F               	movlw	79
  6311  0320  0020               	movlb	0	; select bank0
  6312  0321  00D2               	movwf	??_controlRoutine
  6313  0322  0852               	movf	??_controlRoutine,w
  6314  0323  00EE               	movwf	_setPeriod
  6315  0324                     i1l2366:
  6316                           
  6317                           ;Controller.c: 65:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + voltageModeVariables.sumOutput;
  6318  0324  3016               	movlw	22
  6319  0325  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6320  0326  0086               	movwf	6
  6321  0327  0187               	clrf	7
  6322  0328  3000               	movlw	0
  6323  0329  00F9               	movwf	___lldiv@divisor+3
  6324  032A  3000               	movlw	0
  6325  032B  00F8               	movwf	___lldiv@divisor+2
  6326  032C  3000               	movlw	0
  6327  032D  00F7               	movwf	___lldiv@divisor+1
  6328  032E  3019               	movlw	25
  6329  032F  00F6               	movwf	___lldiv@divisor
  6330  0330  3032               	movlw	50
  6331  0331  00F2               	movwf	___wmul@multiplicand
  6332  0332  3000               	movlw	0
  6333  0333  00F3               	movwf	___wmul@multiplicand+1
  6334  0334  086E               	movf	_setPeriod,w
  6335  0335  00D2               	movwf	??_controlRoutine
  6336  0336  01D3               	clrf	??_controlRoutine+1
  6337  0337  0852               	movf	??_controlRoutine,w
  6338  0338  00F0               	movwf	___wmul@multiplier
  6339  0339  0853               	movf	??_controlRoutine+1,w
  6340  033A  00F1               	movwf	___wmul@multiplier+1
  6341  033B  318C  244E  3183   	fcall	___wmul
  6342  033E  0870               	movf	?___wmul,w
  6343  033F  0020               	movlb	0	; select bank0
  6344  0340  00D4               	movwf	??_controlRoutine+2
  6345  0341  0871               	movf	?___wmul+1,w
  6346  0342  00D5               	movwf	??_controlRoutine+3
  6347  0343  01D6               	clrf	??_controlRoutine+4
  6348  0344  01D7               	clrf	??_controlRoutine+5
  6349  0345  0857               	movf	??_controlRoutine+5,w
  6350  0346  00FD               	movwf	___lldiv@dividend+3
  6351  0347  0856               	movf	??_controlRoutine+4,w
  6352  0348  00FC               	movwf	___lldiv@dividend+2
  6353  0349  0855               	movf	??_controlRoutine+3,w
  6354  034A  00FB               	movwf	___lldiv@dividend+1
  6355  034B  0854               	movf	??_controlRoutine+2,w
  6356  034C  00FA               	movwf	___lldiv@dividend
  6357  034D  318E  26EF  3183   	fcall	___lldiv
  6358  0350  3F40               	moviw [0]fsr1
  6359  0351  0776               	addwf	?___lldiv,w
  6360  0352  0020               	movlb	0	; select bank0
  6361  0353  00E3               	movwf	_setDuty
  6362  0354  3F41               	moviw [1]fsr1
  6363  0355  3D77               	addwfc	?___lldiv+1,w
  6364  0356  00E4               	movwf	_setDuty+1
  6365  0357                     i1l2368:
  6366                           
  6367                           ;Controller.c: 67:     if(currentState == currentModeControl){
  6368  0357  3003               	movlw	3
  6369  0358  066C               	xorwf	_currentState,w
  6370  0359  1D03               	btfss	3,2
  6371  035A  2B5C               	goto	u217_21
  6372  035B  2B5D               	goto	u217_20
  6373  035C                     u217_21:
  6374  035C  2B98               	goto	i1l2376
  6375  035D                     u217_20:
  6376  035D                     i1l2370:
  6377                           
  6378                           ;Controller.c: 68:         runCurrentModeControl();
  6379  035D  318B  23AC  3183   	fcall	_runCurrentModeControl
  6380  0360                     i1l2372:
  6381                           
  6382                           ;Controller.c: 69:         setPeriod = 79u;
  6383  0360  304F               	movlw	79
  6384  0361  0020               	movlb	0	; select bank0
  6385  0362  00D2               	movwf	??_controlRoutine
  6386  0363  0852               	movf	??_controlRoutine,w
  6387  0364  00EE               	movwf	_setPeriod
  6388  0365                     i1l2374:
  6389                           
  6390                           ;Controller.c: 71:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + currentModeVariables.sumOutput;
  6391  0365  3016               	movlw	22
  6392  0366  3EA0               	addlw	(low (_currentModeVariables| 0))& (0+255)
  6393  0367  0086               	movwf	6
  6394  0368  0187               	clrf	7
  6395  0369  3000               	movlw	0
  6396  036A  00F9               	movwf	___lldiv@divisor+3
  6397  036B  3000               	movlw	0
  6398  036C  00F8               	movwf	___lldiv@divisor+2
  6399  036D  3000               	movlw	0
  6400  036E  00F7               	movwf	___lldiv@divisor+1
  6401  036F  3019               	movlw	25
  6402  0370  00F6               	movwf	___lldiv@divisor
  6403  0371  3032               	movlw	50
  6404  0372  00F2               	movwf	___wmul@multiplicand
  6405  0373  3000               	movlw	0
  6406  0374  00F3               	movwf	___wmul@multiplicand+1
  6407  0375  086E               	movf	_setPeriod,w
  6408  0376  00D2               	movwf	??_controlRoutine
  6409  0377  01D3               	clrf	??_controlRoutine+1
  6410  0378  0852               	movf	??_controlRoutine,w
  6411  0379  00F0               	movwf	___wmul@multiplier
  6412  037A  0853               	movf	??_controlRoutine+1,w
  6413  037B  00F1               	movwf	___wmul@multiplier+1
  6414  037C  318C  244E  3183   	fcall	___wmul
  6415  037F  0870               	movf	?___wmul,w
  6416  0380  0020               	movlb	0	; select bank0
  6417  0381  00D4               	movwf	??_controlRoutine+2
  6418  0382  0871               	movf	?___wmul+1,w
  6419  0383  00D5               	movwf	??_controlRoutine+3
  6420  0384  01D6               	clrf	??_controlRoutine+4
  6421  0385  01D7               	clrf	??_controlRoutine+5
  6422  0386  0857               	movf	??_controlRoutine+5,w
  6423  0387  00FD               	movwf	___lldiv@dividend+3
  6424  0388  0856               	movf	??_controlRoutine+4,w
  6425  0389  00FC               	movwf	___lldiv@dividend+2
  6426  038A  0855               	movf	??_controlRoutine+3,w
  6427  038B  00FB               	movwf	___lldiv@dividend+1
  6428  038C  0854               	movf	??_controlRoutine+2,w
  6429  038D  00FA               	movwf	___lldiv@dividend
  6430  038E  318E  26EF  3183   	fcall	___lldiv
  6431  0391  3F40               	moviw [0]fsr1
  6432  0392  0776               	addwf	?___lldiv,w
  6433  0393  0020               	movlb	0	; select bank0
  6434  0394  00E3               	movwf	_setDuty
  6435  0395  3F41               	moviw [1]fsr1
  6436  0396  3D77               	addwfc	?___lldiv+1,w
  6437  0397  00E4               	movwf	_setDuty+1
  6438  0398                     i1l2376:
  6439                           
  6440                           ;Controller.c: 74:     uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * setP
      +                          eriod)) / 25);
  6441  0398  3000               	movlw	0
  6442  0399  00F9               	movwf	___lldiv@divisor+3
  6443  039A  3000               	movlw	0
  6444  039B  00F8               	movwf	___lldiv@divisor+2
  6445  039C  3000               	movlw	0
  6446  039D  00F7               	movwf	___lldiv@divisor+1
  6447  039E  3019               	movlw	25
  6448  039F  00F6               	movwf	___lldiv@divisor
  6449  03A0  305A               	movlw	90
  6450  03A1  00F2               	movwf	___wmul@multiplicand
  6451  03A2  3000               	movlw	0
  6452  03A3  00F3               	movwf	___wmul@multiplicand+1
  6453  03A4  086E               	movf	_setPeriod,w
  6454  03A5  00D2               	movwf	??_controlRoutine
  6455  03A6  01D3               	clrf	??_controlRoutine+1
  6456  03A7  0852               	movf	??_controlRoutine,w
  6457  03A8  00F0               	movwf	___wmul@multiplier
  6458  03A9  0853               	movf	??_controlRoutine+1,w
  6459  03AA  00F1               	movwf	___wmul@multiplier+1
  6460  03AB  318C  244E  3183   	fcall	___wmul
  6461  03AE  0870               	movf	?___wmul,w
  6462  03AF  0020               	movlb	0	; select bank0
  6463  03B0  00D4               	movwf	??_controlRoutine+2
  6464  03B1  0871               	movf	?___wmul+1,w
  6465  03B2  00D5               	movwf	??_controlRoutine+3
  6466  03B3  01D6               	clrf	??_controlRoutine+4
  6467  03B4  01D7               	clrf	??_controlRoutine+5
  6468  03B5  0857               	movf	??_controlRoutine+5,w
  6469  03B6  00FD               	movwf	___lldiv@dividend+3
  6470  03B7  0856               	movf	??_controlRoutine+4,w
  6471  03B8  00FC               	movwf	___lldiv@dividend+2
  6472  03B9  0855               	movf	??_controlRoutine+3,w
  6473  03BA  00FB               	movwf	___lldiv@dividend+1
  6474  03BB  0854               	movf	??_controlRoutine+2,w
  6475  03BC  00FA               	movwf	___lldiv@dividend
  6476  03BD  318E  26EF  3183   	fcall	___lldiv
  6477  03C0  0877               	movf	?___lldiv+1,w
  6478  03C1  0020               	movlb	0	; select bank0
  6479  03C2  00D9               	movwf	controlRoutine@maxDuty+1
  6480  03C3  0876               	movf	?___lldiv,w
  6481  03C4  00D8               	movwf	controlRoutine@maxDuty
  6482  03C5                     i1l2378:
  6483                           
  6484                           ;Controller.c: 75:     uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * setP
      +                          eriod)) / 25);
  6485  03C5  3000               	movlw	0
  6486  03C6  00F9               	movwf	___lldiv@divisor+3
  6487  03C7  3000               	movlw	0
  6488  03C8  00F8               	movwf	___lldiv@divisor+2
  6489  03C9  3000               	movlw	0
  6490  03CA  00F7               	movwf	___lldiv@divisor+1
  6491  03CB  3019               	movlw	25
  6492  03CC  00F6               	movwf	___lldiv@divisor
  6493  03CD  300A               	movlw	10
  6494  03CE  00F2               	movwf	___wmul@multiplicand
  6495  03CF  3000               	movlw	0
  6496  03D0  00F3               	movwf	___wmul@multiplicand+1
  6497  03D1  086E               	movf	_setPeriod,w
  6498  03D2  00D2               	movwf	??_controlRoutine
  6499  03D3  01D3               	clrf	??_controlRoutine+1
  6500  03D4  0852               	movf	??_controlRoutine,w
  6501  03D5  00F0               	movwf	___wmul@multiplier
  6502  03D6  0853               	movf	??_controlRoutine+1,w
  6503  03D7  00F1               	movwf	___wmul@multiplier+1
  6504  03D8  318C  244E  3183   	fcall	___wmul
  6505  03DB  0870               	movf	?___wmul,w
  6506  03DC  0020               	movlb	0	; select bank0
  6507  03DD  00D4               	movwf	??_controlRoutine+2
  6508  03DE  0871               	movf	?___wmul+1,w
  6509  03DF  00D5               	movwf	??_controlRoutine+3
  6510  03E0  01D6               	clrf	??_controlRoutine+4
  6511  03E1  01D7               	clrf	??_controlRoutine+5
  6512  03E2  0857               	movf	??_controlRoutine+5,w
  6513  03E3  00FD               	movwf	___lldiv@dividend+3
  6514  03E4  0856               	movf	??_controlRoutine+4,w
  6515  03E5  00FC               	movwf	___lldiv@dividend+2
  6516  03E6  0855               	movf	??_controlRoutine+3,w
  6517  03E7  00FB               	movwf	___lldiv@dividend+1
  6518  03E8  0854               	movf	??_controlRoutine+2,w
  6519  03E9  00FA               	movwf	___lldiv@dividend
  6520  03EA  318E  26EF  3183   	fcall	___lldiv
  6521  03ED  0877               	movf	?___lldiv+1,w
  6522  03EE  0020               	movlb	0	; select bank0
  6523  03EF  00DB               	movwf	controlRoutine@minDuty+1
  6524  03F0  0876               	movf	?___lldiv,w
  6525  03F1  00DA               	movwf	controlRoutine@minDuty
  6526  03F2                     i1l2380:
  6527                           
  6528                           ;Controller.c: 76:     if(setDuty > maxDuty) setDuty = maxDuty;
  6529  03F2  0864               	movf	_setDuty+1,w
  6530  03F3  0259               	subwf	controlRoutine@maxDuty+1,w
  6531  03F4  1D03               	skipz
  6532  03F5  2BF8               	goto	u218_25
  6533  03F6  0863               	movf	_setDuty,w
  6534  03F7  0258               	subwf	controlRoutine@maxDuty,w
  6535  03F8                     u218_25:
  6536  03F8  1803               	skipnc
  6537  03F9  2BFB               	goto	u218_21
  6538  03FA  2BFC               	goto	u218_20
  6539  03FB                     u218_21:
  6540  03FB  2C00               	goto	i1l449
  6541  03FC                     u218_20:
  6542  03FC                     i1l2382:
  6543  03FC  0859               	movf	controlRoutine@maxDuty+1,w
  6544  03FD  00E4               	movwf	_setDuty+1
  6545  03FE  0858               	movf	controlRoutine@maxDuty,w
  6546  03FF  00E3               	movwf	_setDuty
  6547  0400                     i1l449:
  6548                           
  6549                           ;Controller.c: 77:     if(setDuty < minDuty) setDuty = minDuty;
  6550  0400  085B               	movf	controlRoutine@minDuty+1,w
  6551  0401  0264               	subwf	_setDuty+1,w
  6552  0402  1D03               	skipz
  6553  0403  2C06               	goto	u219_25
  6554  0404  085A               	movf	controlRoutine@minDuty,w
  6555  0405  0263               	subwf	_setDuty,w
  6556  0406                     u219_25:
  6557  0406  1803               	skipnc
  6558  0407  2C09               	goto	u219_21
  6559  0408  2C0A               	goto	u219_20
  6560  0409                     u219_21:
  6561  0409  2C0E               	goto	i1l452
  6562  040A                     u219_20:
  6563  040A                     i1l2384:
  6564  040A  085B               	movf	controlRoutine@minDuty+1,w
  6565  040B  00E4               	movwf	_setDuty+1
  6566  040C  085A               	movf	controlRoutine@minDuty,w
  6567  040D  00E3               	movwf	_setDuty
  6568  040E                     i1l452:
  6569  040E  0008               	return
  6570  040F                     __end_of_controlRoutine:
  6571                           
  6572                           	psect	text30
  6573  00B4                     __ptext30:	
  6574 ;; *************** function _runVoltageModeControl *****************
  6575 ;; Defined at:
  6576 ;;		line 87 in file "Controller.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  propMult        8   40[BANK0 ] long long 
  6581 ;;  integralMult    8   32[BANK0 ] long long 
  6582 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      void 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6592 ;;      Params:         0       0       0       0       0       0
  6593 ;;      Locals:         0      18       0       0       0       0
  6594 ;;      Temps:          0      16       0       0       0       0
  6595 ;;      Totals:         0      34       0       0       0       0
  6596 ;;Total ram usage:       34 bytes
  6597 ;; Hardware stack levels used: 1
  6598 ;; Hardware stack levels required when called: 2
  6599 ;; This function calls:
  6600 ;;		___lmul
  6601 ;;		___omul
  6602 ;;		_abs
  6603 ;;		_convertRawToMilliVolts
  6604 ;;		i1_readGPIO
  6605 ;; This function is called by:
  6606 ;;		_controlRoutine
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610  00B4                     _runVoltageModeControl:	
  6611                           ;psect for function _runVoltageModeControl
  6612                           
  6613  00B4                     i1l2258:	
  6614                           ;incstack = 0
  6615                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6616                           
  6617                           
  6618                           ;Controller.c: 90:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6619  00B4  0020               	movlb	0	; select bank0
  6620  00B5  085E               	movf	_filteredVout+1,w
  6621  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6622  00B7  085D               	movf	_filteredVout,w
  6623  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6624  00B9  318D  2571  3180   	fcall	_convertRawToMilliVolts
  6625  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6626  00BD  0020               	movlb	0	; select bank0
  6627  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6628  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6629  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6630                           
  6631                           ;Controller.c: 93:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVolt
      +                          age;
  6632  00C1  3008               	movlw	8
  6633  00C2  318D  25AC  3180   	fcall	i1_readGPIO
  6634  00C5  3A00               	xorlw	0
  6635  00C6  1903               	skipnz
  6636  00C7  28C9               	goto	u192_21
  6637  00C8  28CA               	goto	u192_20
  6638  00C9                     u192_21:
  6639  00C9  28D9               	goto	i1l2262
  6640  00CA                     u192_20:
  6641  00CA                     i1l2260:
  6642  00CA  3080               	movlw	128
  6643  00CB  0020               	movlb	0	; select bank0
  6644  00CC  00B0               	movwf	??_runVoltageModeControl
  6645  00CD  303E               	movlw	62
  6646  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6647  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6648  00D0  0230               	subwf	??_runVoltageModeControl,w
  6649  00D1  0021               	movlb	1	; select bank1
  6650  00D2  00C6               	movwf	_voltageModeVariables^(0+128)
  6651  00D3  0020               	movlb	0	; select bank0
  6652  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6653  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6654  00D6  0021               	movlb	1	; select bank1
  6655  00D7  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6656  00D8  28E7               	goto	i1l2264
  6657  00D9                     i1l2262:
  6658  00D9  30E0               	movlw	224
  6659  00DA  0020               	movlb	0	; select bank0
  6660  00DB  00B0               	movwf	??_runVoltageModeControl
  6661  00DC  302E               	movlw	46
  6662  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6663  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6664  00DF  0230               	subwf	??_runVoltageModeControl,w
  6665  00E0  0021               	movlb	1	; select bank1
  6666  00E1  00C6               	movwf	_voltageModeVariables^(0+128)
  6667  00E2  0020               	movlb	0	; select bank0
  6668  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6669  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6670  00E5  0021               	movlb	1	; select bank1
  6671  00E6  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6672  00E7                     i1l2264:
  6673                           
  6674                           ;Controller.c: 97:    int64_t integralMult = ((int64_t) (15u * ((int64_t) voltageModeVar
      +                          iables.error) )) * 267u;
  6675  00E7  0846               	movf	_voltageModeVariables^(0+128),w
  6676  00E8  0020               	movlb	0	; select bank0
  6677  00E9  00A0               	movwf	___omul@multiplier
  6678  00EA  0021               	movlb	1	; select bank1
  6679  00EB  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6680  00EC  0020               	movlb	0	; select bank0
  6681  00ED  00A1               	movwf	___omul@multiplier+1
  6682  00EE  0D89               	rlf	9,f
  6683  00EF  3B89               	subwfb	9,f
  6684  00F0  0989               	comf	9,f
  6685  00F1  00A2               	movwf	___omul@multiplier+2
  6686  00F2  00A3               	movwf	___omul@multiplier+3
  6687  00F3  00A4               	movwf	___omul@multiplier+4
  6688  00F4  00A5               	movwf	___omul@multiplier+5
  6689  00F5  00A6               	movwf	___omul@multiplier+6
  6690  00F6  00A7               	movwf	___omul@multiplier+7
  6691  00F7  3000               	movlw	0
  6692  00F8  00AF               	movwf	___omul@multiplicand+7
  6693  00F9  3000               	movlw	0
  6694  00FA  00AE               	movwf	___omul@multiplicand+6
  6695  00FB  3000               	movlw	0
  6696  00FC  00AD               	movwf	___omul@multiplicand+5
  6697  00FD  3000               	movlw	0
  6698  00FE  00AC               	movwf	___omul@multiplicand+4
  6699  00FF  3000               	movlw	0
  6700  0100  00AB               	movwf	___omul@multiplicand+3
  6701  0101  3000               	movlw	0
  6702  0102  00AA               	movwf	___omul@multiplicand+2
  6703  0103  300F               	movlw	15
  6704  0104  00A9               	movwf	___omul@multiplicand+1
  6705  0105  30A5               	movlw	165
  6706  0106  00A8               	movwf	___omul@multiplicand
  6707  0107  3187  27B4  3180   	fcall	___omul
  6708  010A  0020               	movlb	0	; select bank0
  6709  010B  0820               	movf	?___omul,w
  6710  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6711  010D  0821               	movf	?___omul+1,w
  6712  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6713  010F  0822               	movf	?___omul+2,w
  6714  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6715  0111  0823               	movf	?___omul+3,w
  6716  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6717  0113  0824               	movf	?___omul+4,w
  6718  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6719  0115  0825               	movf	?___omul+5,w
  6720  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6721  0117  0826               	movf	?___omul+6,w
  6722  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6723  0119  0827               	movf	?___omul+7,w
  6724  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6725  011B                     i1l2266:
  6726                           
  6727                           ;Controller.c: 99:    voltageModeVariables.integral = integralMult;
  6728  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6729  011C  0021               	movlb	1	; select bank1
  6730  011D  00CB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6731  011E  0020               	movlb	0	; select bank0
  6732  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6733  0120  0021               	movlb	1	; select bank1
  6734  0121  00CA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6735  0122  0020               	movlb	0	; select bank0
  6736  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6737  0124  0021               	movlb	1	; select bank1
  6738  0125  00C9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6739  0126  0020               	movlb	0	; select bank0
  6740  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6741  0128  0021               	movlb	1	; select bank1
  6742  0129  00C8               	movwf	(_voltageModeVariables^(0+128)+2)
  6743  012A                     i1l2268:
  6744                           
  6745                           ;Controller.c: 100:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6746  012A  300E               	movlw	14
  6747  012B  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6748  012C  0086               	movwf	6
  6749  012D  0187               	clrf	7
  6750  012E  3F40               	moviw [0]fsr1
  6751  012F  0020               	movlb	0	; select bank0
  6752  0130  00B0               	movwf	??_runVoltageModeControl
  6753  0131  3F41               	moviw [1]fsr1
  6754  0132  00B1               	movwf	??_runVoltageModeControl+1
  6755  0133  3F42               	moviw [2]fsr1
  6756  0134  00B2               	movwf	??_runVoltageModeControl+2
  6757  0135  3F43               	moviw [3]fsr1
  6758  0136  00B3               	movwf	??_runVoltageModeControl+3
  6759  0137  3F44               	moviw [4]fsr1
  6760  0138  00B4               	movwf	??_runVoltageModeControl+4
  6761  0139  3F45               	moviw [5]fsr1
  6762  013A  00B5               	movwf	??_runVoltageModeControl+5
  6763  013B  3F46               	moviw [6]fsr1
  6764  013C  00B6               	movwf	??_runVoltageModeControl+6
  6765  013D  3F47               	moviw [7]fsr1
  6766  013E  00B7               	movwf	??_runVoltageModeControl+7
  6767  013F  0021               	movlb	1	; select bank1
  6768  0140  0848               	movf	(_voltageModeVariables^(0+128)+2),w
  6769  0141  0020               	movlb	0	; select bank0
  6770  0142  00B8               	movwf	??_runVoltageModeControl+8
  6771  0143  0021               	movlb	1	; select bank1
  6772  0144  0849               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6773  0145  0020               	movlb	0	; select bank0
  6774  0146  00B9               	movwf	??_runVoltageModeControl+9
  6775  0147  0021               	movlb	1	; select bank1
  6776  0148  084A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6777  0149  0020               	movlb	0	; select bank0
  6778  014A  00BA               	movwf	??_runVoltageModeControl+10
  6779  014B  0021               	movlb	1	; select bank1
  6780  014C  084B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6781  014D  0020               	movlb	0	; select bank0
  6782  014E  00BB               	movwf	??_runVoltageModeControl+11
  6783  014F  3000               	movlw	0
  6784  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6785  0151  30FF               	movlw	255
  6786  0152  00BC               	movwf	??_runVoltageModeControl+12
  6787  0153  00BD               	movwf	??_runVoltageModeControl+13
  6788  0154  00BE               	movwf	??_runVoltageModeControl+14
  6789  0155  00BF               	movwf	??_runVoltageModeControl+15
  6790  0156  0838               	movf	??_runVoltageModeControl+8,w
  6791  0157  07B0               	addwf	??_runVoltageModeControl,f
  6792  0158  0839               	movf	??_runVoltageModeControl+9,w
  6793  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6794  015A  083A               	movf	??_runVoltageModeControl+10,w
  6795  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6796  015C  083B               	movf	??_runVoltageModeControl+11,w
  6797  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6798  015E  083C               	movf	??_runVoltageModeControl+12,w
  6799  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6800  0160  083D               	movf	??_runVoltageModeControl+13,w
  6801  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6802  0162  083E               	movf	??_runVoltageModeControl+14,w
  6803  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6804  0164  083F               	movf	??_runVoltageModeControl+15,w
  6805  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6806  0166  0837               	movf	??_runVoltageModeControl+7,w
  6807  0167  0021               	movlb	1	; select bank1
  6808  0168  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6809  0169  0020               	movlb	0	; select bank0
  6810  016A  0836               	movf	??_runVoltageModeControl+6,w
  6811  016B  0021               	movlb	1	; select bank1
  6812  016C  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6813  016D  0020               	movlb	0	; select bank0
  6814  016E  0835               	movf	??_runVoltageModeControl+5,w
  6815  016F  0021               	movlb	1	; select bank1
  6816  0170  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6817  0171  0020               	movlb	0	; select bank0
  6818  0172  0834               	movf	??_runVoltageModeControl+4,w
  6819  0173  0021               	movlb	1	; select bank1
  6820  0174  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6821  0175  0020               	movlb	0	; select bank0
  6822  0176  0833               	movf	??_runVoltageModeControl+3,w
  6823  0177  0021               	movlb	1	; select bank1
  6824  0178  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6825  0179  0020               	movlb	0	; select bank0
  6826  017A  0832               	movf	??_runVoltageModeControl+2,w
  6827  017B  0021               	movlb	1	; select bank1
  6828  017C  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6829  017D  0020               	movlb	0	; select bank0
  6830  017E  0831               	movf	??_runVoltageModeControl+1,w
  6831  017F  0021               	movlb	1	; select bank1
  6832  0180  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6833  0181  0020               	movlb	0	; select bank0
  6834  0182  0830               	movf	??_runVoltageModeControl,w
  6835  0183  0021               	movlb	1	; select bank1
  6836  0184  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6837  0185                     i1l2270:
  6838                           
  6839                           ;Controller.c: 103:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6840  0185  0843               	movf	(_integratorScaledLimit+7)^(0+128),w
  6841  0186  3A80               	xorlw	128
  6842  0187  0020               	movlb	0	; select bank0
  6843  0188  00B0               	movwf	??_runVoltageModeControl
  6844  0189  0021               	movlb	1	; select bank1
  6845  018A  085B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6846  018B  3A80               	xorlw	128
  6847  018C  0020               	movlb	0	; select bank0
  6848  018D  0230               	subwf	??_runVoltageModeControl,w
  6849  018E  0021               	movlb	1	; select bank1
  6850  018F  1D03               	skipz
  6851  0190  29AB               	goto	u193_23
  6852  0191  085A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6853  0192  0242               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6854  0193  1D03               	skipz
  6855  0194  29AB               	goto	u193_23
  6856  0195  0859               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6857  0196  0241               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6858  0197  1D03               	skipz
  6859  0198  29AB               	goto	u193_23
  6860  0199  0858               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6861  019A  0240               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6862  019B  1D03               	skipz
  6863  019C  29AB               	goto	u193_23
  6864  019D  0857               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6865  019E  023F               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6866  019F  1D03               	skipz
  6867  01A0  29AB               	goto	u193_23
  6868  01A1  0856               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6869  01A2  023E               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6870  01A3  1D03               	skipz
  6871  01A4  29AB               	goto	u193_23
  6872  01A5  0855               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6873  01A6  023D               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6874  01A7  1D03               	skipz
  6875  01A8  29AB               	goto	u193_23
  6876  01A9  0854               	movf	(_voltageModeVariables^(0+128)+14),w
  6877  01AA  023C               	subwf	_integratorScaledLimit^(0+128),w
  6878  01AB                     u193_23:
  6879  01AB  1803               	skipnc
  6880  01AC  29AE               	goto	u193_21
  6881  01AD  29AF               	goto	u193_20
  6882  01AE                     u193_21:
  6883  01AE  29BF               	goto	i1l2274
  6884  01AF                     u193_20:
  6885  01AF                     i1l2272:
  6886                           
  6887                           ;Controller.c: 104:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6888  01AF  083C               	movf	_integratorScaledLimit^(0+128),w
  6889  01B0  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6890  01B1  083D               	movf	(_integratorScaledLimit+1)^(0+128),w
  6891  01B2  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6892  01B3  083E               	movf	(_integratorScaledLimit+2)^(0+128),w
  6893  01B4  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6894  01B5  083F               	movf	(_integratorScaledLimit+3)^(0+128),w
  6895  01B6  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6896  01B7  0840               	movf	(_integratorScaledLimit+4)^(0+128),w
  6897  01B8  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6898  01B9  0841               	movf	(_integratorScaledLimit+5)^(0+128),w
  6899  01BA  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6900  01BB  0842               	movf	(_integratorScaledLimit+6)^(0+128),w
  6901  01BC  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6902  01BD  0843               	movf	(_integratorScaledLimit+7)^(0+128),w
  6903  01BE  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6904  01BF                     i1l2274:
  6905                           
  6906                           ;Controller.c: 107:    if(voltageModeVariables.integralOutputScaled < 0){
  6907  01BF  300E               	movlw	14
  6908  01C0  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6909  01C1  0086               	movwf	6
  6910  01C2  0187               	clrf	7
  6911  01C3  3F47               	moviw [7]fsr1
  6912  01C4  0020               	movlb	0	; select bank0
  6913  01C5  00B0               	movwf	??_runVoltageModeControl
  6914  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  6915  01C7  29C9               	goto	u194_21
  6916  01C8  29CA               	goto	u194_20
  6917  01C9                     u194_21:
  6918  01C9  2A67               	goto	i1l2280
  6919  01CA                     u194_20:
  6920  01CA                     i1l2276:
  6921                           
  6922                           ;Controller.c: 108:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  6923  01CA  0021               	movlb	1	; select bank1
  6924  01CB  0855               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6925  01CC  00F1               	movwf	abs@a+1
  6926  01CD  0854               	movf	(_voltageModeVariables^(0+128)+14),w
  6927  01CE  00F0               	movwf	abs@a
  6928  01CF  318B  23FB  3180   	fcall	_abs
  6929  01D2  0870               	movf	?_abs,w
  6930  01D3  0020               	movlb	0	; select bank0
  6931  01D4  00B0               	movwf	??_runVoltageModeControl
  6932  01D5  0871               	movf	?_abs+1,w
  6933  01D6  00B1               	movwf	??_runVoltageModeControl+1
  6934  01D7  3000               	movlw	0
  6935  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6936  01D9  30FF               	movlw	255
  6937  01DA  00B2               	movwf	??_runVoltageModeControl+2
  6938  01DB  00B3               	movwf	??_runVoltageModeControl+3
  6939  01DC  00B4               	movwf	??_runVoltageModeControl+4
  6940  01DD  00B5               	movwf	??_runVoltageModeControl+5
  6941  01DE  00B6               	movwf	??_runVoltageModeControl+6
  6942  01DF  00B7               	movwf	??_runVoltageModeControl+7
  6943  01E0  0021               	movlb	1	; select bank1
  6944  01E1  0843               	movf	(_integratorScaledLimit+7)^(0+128),w
  6945  01E2  3A80               	xorlw	128
  6946  01E3  0020               	movlb	0	; select bank0
  6947  01E4  00B8               	movwf	??_runVoltageModeControl+8
  6948  01E5  0837               	movf	??_runVoltageModeControl+7,w
  6949  01E6  3A80               	xorlw	128
  6950  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  6951  01E8  0021               	movlb	1	; select bank1
  6952  01E9  1D03               	skipz
  6953  01EA  2A13               	goto	u195_23
  6954  01EB  0020               	movlb	0	; select bank0
  6955  01EC  0836               	movf	??_runVoltageModeControl+6,w
  6956  01ED  0021               	movlb	1	; select bank1
  6957  01EE  0242               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6958  01EF  1D03               	skipz
  6959  01F0  2A13               	goto	u195_23
  6960  01F1  0020               	movlb	0	; select bank0
  6961  01F2  0835               	movf	??_runVoltageModeControl+5,w
  6962  01F3  0021               	movlb	1	; select bank1
  6963  01F4  0241               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6964  01F5  1D03               	skipz
  6965  01F6  2A13               	goto	u195_23
  6966  01F7  0020               	movlb	0	; select bank0
  6967  01F8  0834               	movf	??_runVoltageModeControl+4,w
  6968  01F9  0021               	movlb	1	; select bank1
  6969  01FA  0240               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6970  01FB  1D03               	skipz
  6971  01FC  2A13               	goto	u195_23
  6972  01FD  0020               	movlb	0	; select bank0
  6973  01FE  0833               	movf	??_runVoltageModeControl+3,w
  6974  01FF  0021               	movlb	1	; select bank1
  6975  0200  023F               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6976  0201  1D03               	skipz
  6977  0202  2A13               	goto	u195_23
  6978  0203  0020               	movlb	0	; select bank0
  6979  0204  0832               	movf	??_runVoltageModeControl+2,w
  6980  0205  0021               	movlb	1	; select bank1
  6981  0206  023E               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6982  0207  1D03               	skipz
  6983  0208  2A13               	goto	u195_23
  6984  0209  0020               	movlb	0	; select bank0
  6985  020A  0831               	movf	??_runVoltageModeControl+1,w
  6986  020B  0021               	movlb	1	; select bank1
  6987  020C  023D               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6988  020D  1D03               	skipz
  6989  020E  2A13               	goto	u195_23
  6990  020F  0020               	movlb	0	; select bank0
  6991  0210  0830               	movf	??_runVoltageModeControl,w
  6992  0211  0021               	movlb	1	; select bank1
  6993  0212  023C               	subwf	_integratorScaledLimit^(0+128),w
  6994  0213                     u195_23:
  6995  0213  1803               	skipnc
  6996  0214  2A16               	goto	u195_21
  6997  0215  2A17               	goto	u195_20
  6998  0216                     u195_21:
  6999  0216  2A67               	goto	i1l2280
  7000  0217                     u195_20:
  7001  0217                     i1l2278:
  7002                           
  7003                           ;Controller.c: 109:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  7004  0217  3000               	movlw	0
  7005  0218  0020               	movlb	0	; select bank0
  7006  0219  00B0               	movwf	??_runVoltageModeControl
  7007  021A  3000               	movlw	0
  7008  021B  00B1               	movwf	??_runVoltageModeControl+1
  7009  021C  3000               	movlw	0
  7010  021D  00B2               	movwf	??_runVoltageModeControl+2
  7011  021E  3000               	movlw	0
  7012  021F  00B3               	movwf	??_runVoltageModeControl+3
  7013  0220  3000               	movlw	0
  7014  0221  00B4               	movwf	??_runVoltageModeControl+4
  7015  0222  3000               	movlw	0
  7016  0223  00B5               	movwf	??_runVoltageModeControl+5
  7017  0224  3000               	movlw	0
  7018  0225  00B6               	movwf	??_runVoltageModeControl+6
  7019  0226  3000               	movlw	0
  7020  0227  00B7               	movwf	??_runVoltageModeControl+7
  7021  0228  0021               	movlb	1	; select bank1
  7022  0229  083C               	movf	_integratorScaledLimit^(0+128),w
  7023  022A  0020               	movlb	0	; select bank0
  7024  022B  02B0               	subwf	??_runVoltageModeControl,f
  7025  022C  0021               	movlb	1	; select bank1
  7026  022D  083D               	movf	(_integratorScaledLimit+1)^(0+128),w
  7027  022E  0020               	movlb	0	; select bank0
  7028  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  7029  0230  0021               	movlb	1	; select bank1
  7030  0231  083E               	movf	(_integratorScaledLimit+2)^(0+128),w
  7031  0232  0020               	movlb	0	; select bank0
  7032  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  7033  0234  0021               	movlb	1	; select bank1
  7034  0235  083F               	movf	(_integratorScaledLimit+3)^(0+128),w
  7035  0236  0020               	movlb	0	; select bank0
  7036  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7037  0238  0021               	movlb	1	; select bank1
  7038  0239  0840               	movf	(_integratorScaledLimit+4)^(0+128),w
  7039  023A  0020               	movlb	0	; select bank0
  7040  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7041  023C  0021               	movlb	1	; select bank1
  7042  023D  0841               	movf	(_integratorScaledLimit+5)^(0+128),w
  7043  023E  0020               	movlb	0	; select bank0
  7044  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7045  0240  0021               	movlb	1	; select bank1
  7046  0241  0842               	movf	(_integratorScaledLimit+6)^(0+128),w
  7047  0242  0020               	movlb	0	; select bank0
  7048  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7049  0244  0021               	movlb	1	; select bank1
  7050  0245  0843               	movf	(_integratorScaledLimit+7)^(0+128),w
  7051  0246  0020               	movlb	0	; select bank0
  7052  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7053  0248  0837               	movf	??_runVoltageModeControl+7,w
  7054  0249  0021               	movlb	1	; select bank1
  7055  024A  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7056  024B  0020               	movlb	0	; select bank0
  7057  024C  0836               	movf	??_runVoltageModeControl+6,w
  7058  024D  0021               	movlb	1	; select bank1
  7059  024E  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7060  024F  0020               	movlb	0	; select bank0
  7061  0250  0835               	movf	??_runVoltageModeControl+5,w
  7062  0251  0021               	movlb	1	; select bank1
  7063  0252  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7064  0253  0020               	movlb	0	; select bank0
  7065  0254  0834               	movf	??_runVoltageModeControl+4,w
  7066  0255  0021               	movlb	1	; select bank1
  7067  0256  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7068  0257  0020               	movlb	0	; select bank0
  7069  0258  0833               	movf	??_runVoltageModeControl+3,w
  7070  0259  0021               	movlb	1	; select bank1
  7071  025A  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7072  025B  0020               	movlb	0	; select bank0
  7073  025C  0832               	movf	??_runVoltageModeControl+2,w
  7074  025D  0021               	movlb	1	; select bank1
  7075  025E  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7076  025F  0020               	movlb	0	; select bank0
  7077  0260  0831               	movf	??_runVoltageModeControl+1,w
  7078  0261  0021               	movlb	1	; select bank1
  7079  0262  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7080  0263  0020               	movlb	0	; select bank0
  7081  0264  0830               	movf	??_runVoltageModeControl,w
  7082  0265  0021               	movlb	1	; select bank1
  7083  0266  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  7084  0267                     i1l2280:
  7085                           
  7086                           ;Controller.c: 114:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 6u);
  7087  0267  300E               	movlw	14
  7088  0268  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7089  0269  0086               	movwf	6
  7090  026A  0187               	clrf	7
  7091  026B  3F40               	moviw [0]fsr1
  7092  026C  0020               	movlb	0	; select bank0
  7093  026D  00B0               	movwf	??_runVoltageModeControl
  7094  026E  3F41               	moviw [1]fsr1
  7095  026F  00B1               	movwf	??_runVoltageModeControl+1
  7096  0270  3F42               	moviw [2]fsr1
  7097  0271  00B2               	movwf	??_runVoltageModeControl+2
  7098  0272  3F43               	moviw [3]fsr1
  7099  0273  00B3               	movwf	??_runVoltageModeControl+3
  7100  0274  3F44               	moviw [4]fsr1
  7101  0275  00B4               	movwf	??_runVoltageModeControl+4
  7102  0276  3F45               	moviw [5]fsr1
  7103  0277  00B5               	movwf	??_runVoltageModeControl+5
  7104  0278  3F46               	moviw [6]fsr1
  7105  0279  00B6               	movwf	??_runVoltageModeControl+6
  7106  027A  3F47               	moviw [7]fsr1
  7107  027B  00B7               	movwf	??_runVoltageModeControl+7
  7108  027C  3016               	movlw	22
  7109  027D  00B8               	movwf	??_runVoltageModeControl+8
  7110  027E                     u196_25:
  7111  027E  0020               	movlb	0	; select bank0
  7112  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7113  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7114  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7115  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7116  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7117  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7118  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7119  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7120  0287                     u196_20:
  7121  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7122  0288  2A7E               	goto	u196_25
  7123  0289  0020               	movlb	0	; select bank0
  7124  028A  0833               	movf	??_runVoltageModeControl+3,w
  7125  028B  0021               	movlb	1	; select bank1
  7126  028C  00D3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7127  028D  0020               	movlb	0	; select bank0
  7128  028E  0832               	movf	??_runVoltageModeControl+2,w
  7129  028F  0021               	movlb	1	; select bank1
  7130  0290  00D2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7131  0291  0020               	movlb	0	; select bank0
  7132  0292  0831               	movf	??_runVoltageModeControl+1,w
  7133  0293  0021               	movlb	1	; select bank1
  7134  0294  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7135  0295  0020               	movlb	0	; select bank0
  7136  0296  0830               	movf	??_runVoltageModeControl,w
  7137  0297  0021               	movlb	1	; select bank1
  7138  0298  00D0               	movwf	(_voltageModeVariables^(0+128)+10)
  7139  0299                     i1l2282:
  7140                           
  7141                           ;Controller.c: 117:    int64_t propMult = (int32_t) (18u * ((int32_t) voltageModeVariabl
      +                          es.error));
  7142  0299  0846               	movf	_voltageModeVariables^(0+128),w
  7143  029A  00F0               	movwf	___lmul@multiplier
  7144  029B  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7145  029C  00F1               	movwf	___lmul@multiplier+1
  7146  029D  0D89               	rlf	9,f
  7147  029E  3B89               	subwfb	9,f
  7148  029F  0989               	comf	9,f
  7149  02A0  00F2               	movwf	___lmul@multiplier+2
  7150  02A1  00F3               	movwf	___lmul@multiplier+3
  7151  02A2  3000               	movlw	0
  7152  02A3  00F7               	movwf	___lmul@multiplicand+3
  7153  02A4  3000               	movlw	0
  7154  02A5  00F6               	movwf	___lmul@multiplicand+2
  7155  02A6  3000               	movlw	0
  7156  02A7  00F5               	movwf	___lmul@multiplicand+1
  7157  02A8  3012               	movlw	18
  7158  02A9  00F4               	movwf	___lmul@multiplicand
  7159  02AA  318D  2509  3180   	fcall	___lmul
  7160  02AD  0870               	movf	?___lmul,w
  7161  02AE  0020               	movlb	0	; select bank0
  7162  02AF  00C8               	movwf	runVoltageModeControl@propMult
  7163  02B0  0871               	movf	?___lmul+1,w
  7164  02B1  00C9               	movwf	runVoltageModeControl@propMult+1
  7165  02B2  0872               	movf	?___lmul+2,w
  7166  02B3  00CA               	movwf	runVoltageModeControl@propMult+2
  7167  02B4  0873               	movf	?___lmul+3,w
  7168  02B5  00CB               	movwf	runVoltageModeControl@propMult+3
  7169  02B6  3000               	movlw	0
  7170  02B7  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7171  02B8  30FF               	movlw	255
  7172  02B9  00CC               	movwf	runVoltageModeControl@propMult+4
  7173  02BA  00CD               	movwf	runVoltageModeControl@propMult+5
  7174  02BB  00CE               	movwf	runVoltageModeControl@propMult+6
  7175  02BC  00CF               	movwf	runVoltageModeControl@propMult+7
  7176  02BD                     i1l2284:
  7177                           
  7178                           ;Controller.c: 118:    voltageModeVariables.proportionalOutput = propMult >> 10u;
  7179  02BD  3048               	movlw	low runVoltageModeControl@propMult
  7180  02BE  0086               	movwf	6
  7181  02BF  3000               	movlw	high runVoltageModeControl@propMult
  7182  02C0  0087               	movwf	7
  7183  02C1  3F40               	moviw [0]fsr1
  7184  02C2  00B0               	movwf	??_runVoltageModeControl
  7185  02C3  3F41               	moviw [1]fsr1
  7186  02C4  00B1               	movwf	??_runVoltageModeControl+1
  7187  02C5  3F42               	moviw [2]fsr1
  7188  02C6  00B2               	movwf	??_runVoltageModeControl+2
  7189  02C7  3F43               	moviw [3]fsr1
  7190  02C8  00B3               	movwf	??_runVoltageModeControl+3
  7191  02C9  3F44               	moviw [4]fsr1
  7192  02CA  00B4               	movwf	??_runVoltageModeControl+4
  7193  02CB  3F45               	moviw [5]fsr1
  7194  02CC  00B5               	movwf	??_runVoltageModeControl+5
  7195  02CD  3F46               	moviw [6]fsr1
  7196  02CE  00B6               	movwf	??_runVoltageModeControl+6
  7197  02CF  3F47               	moviw [7]fsr1
  7198  02D0  00B7               	movwf	??_runVoltageModeControl+7
  7199  02D1  300A               	movlw	10
  7200  02D2  00B8               	movwf	??_runVoltageModeControl+8
  7201  02D3                     u197_25:
  7202  02D3  0020               	movlb	0	; select bank0
  7203  02D4  37B7               	asrf	??_runVoltageModeControl+7,f
  7204  02D5  0CB6               	rrf	??_runVoltageModeControl+6,f
  7205  02D6  0CB5               	rrf	??_runVoltageModeControl+5,f
  7206  02D7  0CB4               	rrf	??_runVoltageModeControl+4,f
  7207  02D8  0CB3               	rrf	??_runVoltageModeControl+3,f
  7208  02D9  0CB2               	rrf	??_runVoltageModeControl+2,f
  7209  02DA  0CB1               	rrf	??_runVoltageModeControl+1,f
  7210  02DB  0CB0               	rrf	??_runVoltageModeControl,f
  7211  02DC                     u197_20:
  7212  02DC  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7213  02DD  2AD3               	goto	u197_25
  7214  02DE  0020               	movlb	0	; select bank0
  7215  02DF  0833               	movf	??_runVoltageModeControl+3,w
  7216  02E0  0021               	movlb	1	; select bank1
  7217  02E1  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7218  02E2  0020               	movlb	0	; select bank0
  7219  02E3  0832               	movf	??_runVoltageModeControl+2,w
  7220  02E4  0021               	movlb	1	; select bank1
  7221  02E5  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7222  02E6  0020               	movlb	0	; select bank0
  7223  02E7  0831               	movf	??_runVoltageModeControl+1,w
  7224  02E8  0021               	movlb	1	; select bank1
  7225  02E9  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7226  02EA  0020               	movlb	0	; select bank0
  7227  02EB  0830               	movf	??_runVoltageModeControl,w
  7228  02EC  0021               	movlb	1	; select bank1
  7229  02ED  00CC               	movwf	(_voltageModeVariables^(0+128)+6)
  7230  02EE                     i1l2286:
  7231                           
  7232                           ;Controller.c: 120:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7233  02EE  0850               	movf	(_voltageModeVariables^(0+128)+10),w
  7234  02EF  074C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7235  02F0  0020               	movlb	0	; select bank0
  7236  02F1  00B0               	movwf	??_runVoltageModeControl
  7237  02F2  0021               	movlb	1	; select bank1
  7238  02F3  0851               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7239  02F4  3D4D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7240  02F5  0020               	movlb	0	; select bank0
  7241  02F6  00B1               	movwf	??_runVoltageModeControl+1
  7242  02F7  0021               	movlb	1	; select bank1
  7243  02F8  0852               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7244  02F9  3D4E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7245  02FA  0020               	movlb	0	; select bank0
  7246  02FB  00B2               	movwf	??_runVoltageModeControl+2
  7247  02FC  0021               	movlb	1	; select bank1
  7248  02FD  0853               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7249  02FE  3D4F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7250  02FF  0020               	movlb	0	; select bank0
  7251  0300  00B3               	movwf	??_runVoltageModeControl+3
  7252  0301  0833               	movf	??_runVoltageModeControl+3,w
  7253  0302  0021               	movlb	1	; select bank1
  7254  0303  00DF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7255  0304  0020               	movlb	0	; select bank0
  7256  0305  0832               	movf	??_runVoltageModeControl+2,w
  7257  0306  0021               	movlb	1	; select bank1
  7258  0307  00DE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7259  0308  0020               	movlb	0	; select bank0
  7260  0309  0831               	movf	??_runVoltageModeControl+1,w
  7261  030A  0021               	movlb	1	; select bank1
  7262  030B  00DD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7263  030C  0020               	movlb	0	; select bank0
  7264  030D  0830               	movf	??_runVoltageModeControl,w
  7265  030E  0021               	movlb	1	; select bank1
  7266  030F  00DC               	movwf	(_voltageModeVariables^(0+128)+22)
  7267  0310                     i1l2288:
  7268                           
  7269                           ;Controller.c: 121:    voltageModeVariables.previousError = voltageModeVariables.error;
  7270  0310  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7271  0311  00E1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7272  0312  0846               	movf	_voltageModeVariables^(0+128),w
  7273  0313  00E0               	movwf	(_voltageModeVariables^(0+128)+26)
  7274  0314                     i1l460:
  7275  0314  0008               	return
  7276  0315                     __end_of_runVoltageModeControl:
  7277                           
  7278                           	psect	text31
  7279  0DAC                     __ptext31:	
  7280 ;; *************** function i1_readGPIO *****************
  7281 ;; Defined at:
  7282 ;;		line 79 in file "GPIO.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  gpioNumber      1    wreg     const enum E2798
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7287 ;;  portType        1    7[COMMON] unsigned char 
  7288 ;;  portNumber      1    6[COMMON] unsigned char 
  7289 ;;  returnValueB    1    5[COMMON] unsigned char 
  7290 ;;  readB           1    4[COMMON] unsigned char 
  7291 ;;  returnValueA    1    3[COMMON] unsigned char 
  7292 ;;  readA           1    2[COMMON] unsigned char 
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      _Bool 
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7302 ;;      Params:         0       0       0       0       0       0
  7303 ;;      Locals:         7       0       0       0       0       0
  7304 ;;      Temps:          2       0       0       0       0       0
  7305 ;;      Totals:         9       0       0       0       0       0
  7306 ;;Total ram usage:        9 bytes
  7307 ;; Hardware stack levels used: 1
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_runVoltageModeControl
  7312 ;;		_currentTripRead
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316  0DAC                     i1_readGPIO:	
  7317                           ;psect for function i1_readGPIO
  7318                           
  7319                           
  7320                           ;incstack = 0
  7321                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7322                           ;i1readGPIO@gpioNumber stored from wreg
  7323  0DAC  00F8               	movwf	i1readGPIO@gpioNumber
  7324  0DAD                     i1l2118:
  7325                           
  7326                           ;GPIO.c: 81:     uint8_t portType = 0;
  7327  0DAD  01F7               	clrf	i1readGPIO@portType
  7328  0DAE                     i1l2120:
  7329                           
  7330                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7331  0DAE  3008               	movlw	8
  7332  0DAF  0278               	subwf	i1readGPIO@gpioNumber,w
  7333  0DB0  1C03               	skipc
  7334  0DB1  2DB3               	goto	u159_21
  7335  0DB2  2DB4               	goto	u159_20
  7336  0DB3                     u159_21:
  7337  0DB3  2DBC               	goto	i1l2126
  7338  0DB4                     u159_20:
  7339  0DB4                     i1l2122:
  7340                           
  7341                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7342  0DB4  0878               	movf	i1readGPIO@gpioNumber,w
  7343  0DB5  3EF8               	addlw	248
  7344  0DB6  00F0               	movwf	??i1_readGPIO
  7345  0DB7  0870               	movf	??i1_readGPIO,w
  7346  0DB8  00F6               	movwf	i1readGPIO@portNumber
  7347  0DB9                     i1l2124:
  7348                           
  7349                           ;GPIO.c: 84:         portType = 1;
  7350  0DB9  01F7               	clrf	i1readGPIO@portType
  7351  0DBA  0AF7               	incf	i1readGPIO@portType,f
  7352                           
  7353                           ;GPIO.c: 85:     }
  7354  0DBB  2DC1               	goto	i1l2130
  7355  0DBC                     i1l2126:
  7356                           
  7357                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7358  0DBC  0878               	movf	i1readGPIO@gpioNumber,w
  7359  0DBD  00F0               	movwf	??i1_readGPIO
  7360  0DBE  0870               	movf	??i1_readGPIO,w
  7361  0DBF  00F6               	movwf	i1readGPIO@portNumber
  7362  0DC0                     i1l2128:
  7363                           
  7364                           ;GPIO.c: 88:         portType = 0;
  7365  0DC0  01F7               	clrf	i1readGPIO@portType
  7366  0DC1                     i1l2130:
  7367                           
  7368                           ;GPIO.c: 91:     if(portType == 0){
  7369  0DC1  0877               	movf	i1readGPIO@portType,w
  7370  0DC2  1D03               	btfss	3,2
  7371  0DC3  2DC5               	goto	u160_21
  7372  0DC4  2DC6               	goto	u160_20
  7373  0DC5                     u160_21:
  7374  0DC5  2DD9               	goto	i1l2142
  7375  0DC6                     u160_20:
  7376  0DC6                     i1l2132:
  7377                           
  7378                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7379  0DC6  0020               	movlb	0	; select bank0
  7380  0DC7  080C               	movf	12,w	;volatile
  7381  0DC8  00F0               	movwf	??i1_readGPIO
  7382  0DC9  0870               	movf	??i1_readGPIO,w
  7383  0DCA  00F2               	movwf	i1readGPIO@readA
  7384  0DCB                     i1l2134:
  7385                           
  7386                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7387  0DCB  0872               	movf	i1readGPIO@readA,w
  7388  0DCC  00F0               	movwf	??i1_readGPIO
  7389  0DCD  0A76               	incf	i1readGPIO@portNumber,w
  7390  0DCE  2DD0               	goto	u161_24
  7391  0DCF                     u161_25:
  7392  0DCF  36F0               	lsrf	??i1_readGPIO,f
  7393  0DD0                     u161_24:
  7394  0DD0  0B89               	decfsz	9,f
  7395  0DD1  2DCF               	goto	u161_25
  7396  0DD2  0870               	movf	??i1_readGPIO,w
  7397  0DD3  3901               	andlw	1
  7398  0DD4  00F1               	movwf	??i1_readGPIO+1
  7399  0DD5  0871               	movf	??i1_readGPIO+1,w
  7400  0DD6  00F3               	movwf	i1readGPIO@returnValueA
  7401  0DD7                     i1l2136:
  7402                           
  7403                           ;GPIO.c: 94:         return returnValueA;
  7404  0DD7  0873               	movf	i1readGPIO@returnValueA,w
  7405  0DD8  2DF2               	goto	i1l324
  7406  0DD9                     i1l2142:
  7407  0DD9  0377               	decf	i1readGPIO@portType,w
  7408  0DDA  1D03               	btfss	3,2
  7409  0DDB  2DDD               	goto	u162_21
  7410  0DDC  2DDE               	goto	u162_20
  7411  0DDD                     u162_21:
  7412  0DDD  2DF1               	goto	i1l2154
  7413  0DDE                     u162_20:
  7414  0DDE                     i1l2144:
  7415                           
  7416                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7417  0DDE  0020               	movlb	0	; select bank0
  7418  0DDF  080D               	movf	13,w	;volatile
  7419  0DE0  00F0               	movwf	??i1_readGPIO
  7420  0DE1  0870               	movf	??i1_readGPIO,w
  7421  0DE2  00F4               	movwf	i1readGPIO@readB
  7422  0DE3                     i1l2146:
  7423                           
  7424                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7425  0DE3  0874               	movf	i1readGPIO@readB,w
  7426  0DE4  00F0               	movwf	??i1_readGPIO
  7427  0DE5  0A76               	incf	i1readGPIO@portNumber,w
  7428  0DE6  2DE8               	goto	u163_24
  7429  0DE7                     u163_25:
  7430  0DE7  36F0               	lsrf	??i1_readGPIO,f
  7431  0DE8                     u163_24:
  7432  0DE8  0B89               	decfsz	9,f
  7433  0DE9  2DE7               	goto	u163_25
  7434  0DEA  0870               	movf	??i1_readGPIO,w
  7435  0DEB  3901               	andlw	1
  7436  0DEC  00F1               	movwf	??i1_readGPIO+1
  7437  0DED  0871               	movf	??i1_readGPIO+1,w
  7438  0DEE  00F5               	movwf	i1readGPIO@returnValueB
  7439  0DEF                     i1l2148:
  7440                           
  7441                           ;GPIO.c: 99:         return returnValueB;
  7442  0DEF  0875               	movf	i1readGPIO@returnValueB,w
  7443  0DF0  2DF2               	goto	i1l324
  7444  0DF1                     i1l2154:
  7445  0DF1  3000               	movlw	0
  7446  0DF2                     i1l324:
  7447  0DF2  0008               	return
  7448  0DF3                     __end_ofi1_readGPIO:
  7449                           
  7450                           	psect	text32
  7451  0D71                     __ptext32:	
  7452 ;; *************** function _convertRawToMilliVolts *****************
  7453 ;; Defined at:
  7454 ;;		line 48 in file "Controller.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  rawValue        2   12[COMMON] unsigned short 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  vsenseMult      4    5[BANK0 ] long 
  7459 ;;  returnValued    2   11[BANK0 ] short 
  7460 ;;  offsetted       2    9[BANK0 ] short 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  2   12[COMMON] short 
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0, pclath, cstack
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7470 ;;      Params:         2       0       0       0       0       0
  7471 ;;      Locals:         0       8       0       0       0       0
  7472 ;;      Temps:          0       5       0       0       0       0
  7473 ;;      Totals:         2      13       0       0       0       0
  7474 ;;Total ram usage:       15 bytes
  7475 ;; Hardware stack levels used: 1
  7476 ;; Hardware stack levels required when called: 1
  7477 ;; This function calls:
  7478 ;;		___lmul
  7479 ;; This function is called by:
  7480 ;;		_runVoltageModeControl
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484  0D71                     _convertRawToMilliVolts:	
  7485                           ;psect for function _convertRawToMilliVolts
  7486                           
  7487  0D71                     i1l2058:	
  7488                           ;incstack = 0
  7489                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7490                           
  7491                           
  7492                           ;Controller.c: 49:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7493  0D71  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7494  0D72  0020               	movlb	0	; select bank0
  7495  0D73  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7496  0D74  087C               	movf	convertRawToMilliVolts@rawValue,w
  7497  0D75  00A9               	movwf	convertRawToMilliVolts@offsetted
  7498  0D76                     i1l2060:
  7499                           
  7500                           ;Controller.c: 50:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7501  0D76  0829               	movf	convertRawToMilliVolts@offsetted,w
  7502  0D77  00F0               	movwf	___lmul@multiplier
  7503  0D78  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7504  0D79  00F1               	movwf	___lmul@multiplier+1
  7505  0D7A  0D89               	rlf	9,f
  7506  0D7B  3B89               	subwfb	9,f
  7507  0D7C  0989               	comf	9,f
  7508  0D7D  00F2               	movwf	___lmul@multiplier+2
  7509  0D7E  00F3               	movwf	___lmul@multiplier+3
  7510  0D7F  3000               	movlw	0
  7511  0D80  00F7               	movwf	___lmul@multiplicand+3
  7512  0D81  3000               	movlw	0
  7513  0D82  00F6               	movwf	___lmul@multiplicand+2
  7514  0D83  3017               	movlw	23
  7515  0D84  00F5               	movwf	___lmul@multiplicand+1
  7516  0D85  30D4               	movlw	212
  7517  0D86  00F4               	movwf	___lmul@multiplicand
  7518  0D87  318D  2509  318D   	fcall	___lmul
  7519  0D8A  0873               	movf	?___lmul+3,w
  7520  0D8B  0020               	movlb	0	; select bank0
  7521  0D8C  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7522  0D8D  0872               	movf	?___lmul+2,w
  7523  0D8E  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7524  0D8F  0871               	movf	?___lmul+1,w
  7525  0D90  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7526  0D91  0870               	movf	?___lmul,w
  7527  0D92  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7528  0D93                     i1l2062:
  7529                           
  7530                           ;Controller.c: 51:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7531  0D93  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7532  0D94  00A0               	movwf	??_convertRawToMilliVolts
  7533  0D95  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7534  0D96  00A1               	movwf	??_convertRawToMilliVolts+1
  7535  0D97  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7536  0D98  00A2               	movwf	??_convertRawToMilliVolts+2
  7537  0D99  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7538  0D9A  00A3               	movwf	??_convertRawToMilliVolts+3
  7539  0D9B  3008               	movlw	8
  7540  0D9C  00A4               	movwf	??_convertRawToMilliVolts+4
  7541  0D9D                     u145_25:
  7542  0D9D  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7543  0D9E  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7544  0D9F  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7545  0DA0  0CA0               	rrf	??_convertRawToMilliVolts,f
  7546  0DA1                     u145_20:
  7547  0DA1  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7548  0DA2  2D9D               	goto	u145_25
  7549  0DA3  0821               	movf	??_convertRawToMilliVolts+1,w
  7550  0DA4  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7551  0DA5  0820               	movf	??_convertRawToMilliVolts,w
  7552  0DA6  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7553  0DA7                     i1l2064:
  7554                           
  7555                           ;Controller.c: 52:     return returnValuedV;
  7556  0DA7  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7557  0DA8  00FD               	movwf	?_convertRawToMilliVolts+1
  7558  0DA9  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7559  0DAA  00FC               	movwf	?_convertRawToMilliVolts
  7560  0DAB                     i1l444:
  7561  0DAB  0008               	return
  7562  0DAC                     __end_of_convertRawToMilliVolts:
  7563                           
  7564                           	psect	text33
  7565  0D09                     __ptext33:	
  7566 ;; *************** function ___lmul *****************
  7567 ;; Defined at:
  7568 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  multiplier      4    0[COMMON] unsigned long 
  7571 ;;  multiplicand    4    4[COMMON] unsigned long 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  product         4    8[COMMON] unsigned long 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  4    0[COMMON] unsigned long 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7583 ;;      Params:         8       0       0       0       0       0
  7584 ;;      Locals:         4       0       0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0
  7586 ;;      Totals:        12       0       0       0       0       0
  7587 ;;Total ram usage:       12 bytes
  7588 ;; Hardware stack levels used: 1
  7589 ;; This function calls:
  7590 ;;		Nothing
  7591 ;; This function is called by:
  7592 ;;		_runPotScaling
  7593 ;;		_convertRawToMilliVolts
  7594 ;;		_runVoltageModeControl
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598  0D09                     ___lmul:	
  7599                           ;psect for function ___lmul
  7600                           
  7601  0D09                     i1l2016:	
  7602                           ;incstack = 0
  7603                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7604                           
  7605  0D09  3000               	movlw	0
  7606  0D0A  00FB               	movwf	___lmul@product+3
  7607  0D0B  3000               	movlw	0
  7608  0D0C  00FA               	movwf	___lmul@product+2
  7609  0D0D  3000               	movlw	0
  7610  0D0E  00F9               	movwf	___lmul@product+1
  7611  0D0F  3000               	movlw	0
  7612  0D10  00F8               	movwf	___lmul@product
  7613  0D11                     i1l2018:
  7614  0D11  1C70               	btfss	___lmul@multiplier,0
  7615  0D12  2D14               	goto	u132_21
  7616  0D13  2D15               	goto	u132_20
  7617  0D14                     u132_21:
  7618  0D14  2D1D               	goto	i1l2022
  7619  0D15                     u132_20:
  7620  0D15                     i1l2020:
  7621  0D15  0874               	movf	___lmul@multiplicand,w
  7622  0D16  07F8               	addwf	___lmul@product,f
  7623  0D17  0875               	movf	___lmul@multiplicand+1,w
  7624  0D18  3DF9               	addwfc	___lmul@product+1,f
  7625  0D19  0876               	movf	___lmul@multiplicand+2,w
  7626  0D1A  3DFA               	addwfc	___lmul@product+2,f
  7627  0D1B  0877               	movf	___lmul@multiplicand+3,w
  7628  0D1C  3DFB               	addwfc	___lmul@product+3,f
  7629  0D1D                     i1l2022:
  7630  0D1D  3001               	movlw	1
  7631  0D1E                     u133_25:
  7632  0D1E  35F4               	lslf	___lmul@multiplicand,f
  7633  0D1F  0DF5               	rlf	___lmul@multiplicand+1,f
  7634  0D20  0DF6               	rlf	___lmul@multiplicand+2,f
  7635  0D21  0DF7               	rlf	___lmul@multiplicand+3,f
  7636  0D22  0B89               	decfsz	9,f
  7637  0D23  2D1E               	goto	u133_25
  7638  0D24                     i1l2024:
  7639  0D24  3001               	movlw	1
  7640  0D25                     u134_25:
  7641  0D25  36F3               	lsrf	___lmul@multiplier+3,f
  7642  0D26  0CF2               	rrf	___lmul@multiplier+2,f
  7643  0D27  0CF1               	rrf	___lmul@multiplier+1,f
  7644  0D28  0CF0               	rrf	___lmul@multiplier,f
  7645  0D29  0B89               	decfsz	9,f
  7646  0D2A  2D25               	goto	u134_25
  7647  0D2B  0873               	movf	___lmul@multiplier+3,w
  7648  0D2C  0472               	iorwf	___lmul@multiplier+2,w
  7649  0D2D  0471               	iorwf	___lmul@multiplier+1,w
  7650  0D2E  0470               	iorwf	___lmul@multiplier,w
  7651  0D2F  1D03               	skipz
  7652  0D30  2D32               	goto	u135_21
  7653  0D31  2D33               	goto	u135_20
  7654  0D32                     u135_21:
  7655  0D32  2D11               	goto	i1l2018
  7656  0D33                     u135_20:
  7657  0D33                     i1l2026:
  7658  0D33  087B               	movf	___lmul@product+3,w
  7659  0D34  00F3               	movwf	?___lmul+3
  7660  0D35  087A               	movf	___lmul@product+2,w
  7661  0D36  00F2               	movwf	?___lmul+2
  7662  0D37  0879               	movf	___lmul@product+1,w
  7663  0D38  00F1               	movwf	?___lmul+1
  7664  0D39  0878               	movf	___lmul@product,w
  7665  0D3A  00F0               	movwf	?___lmul
  7666  0D3B                     i1l731:
  7667  0D3B  0008               	return
  7668  0D3C                     __end_of___lmul:
  7669                           
  7670                           	psect	text34
  7671  0BFB                     __ptext34:	
  7672 ;; *************** function _abs *****************
  7673 ;; Defined at:
  7674 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  a               2    0[COMMON] int 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;		None
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  2    0[COMMON] int 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7688 ;;      Params:         2       0       0       0       0       0
  7689 ;;      Locals:         0       0       0       0       0       0
  7690 ;;      Temps:          2       0       0       0       0       0
  7691 ;;      Totals:         4       0       0       0       0       0
  7692 ;;Total ram usage:        4 bytes
  7693 ;; Hardware stack levels used: 1
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_runVoltageModeControl
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701  0BFB                     _abs:	
  7702                           ;psect for function _abs
  7703                           
  7704  0BFB                     i1l2068:	
  7705                           ;incstack = 0
  7706                           ; Regs used in _abs: [wreg+status,2+status,0]
  7707                           
  7708  0BFB  0871               	movf	abs@a+1,w
  7709  0BFC  3A80               	xorlw	128
  7710  0BFD  00F2               	movwf	??_abs
  7711  0BFE  3080               	movlw	128
  7712  0BFF  0272               	subwf	??_abs,w
  7713  0C00  1D03               	skipz
  7714  0C01  2C04               	goto	u146_25
  7715  0C02  3001               	movlw	1
  7716  0C03  0270               	subwf	abs@a,w
  7717  0C04                     u146_25:
  7718  0C04  1803               	skipnc
  7719  0C05  2C07               	goto	u146_21
  7720  0C06  2C08               	goto	u146_20
  7721  0C07                     u146_21:
  7722  0C07  2C14               	goto	i1l1177
  7723  0C08                     u146_20:
  7724  0C08                     i1l2070:
  7725  0C08  0970               	comf	abs@a,w
  7726  0C09  00F2               	movwf	??_abs
  7727  0C0A  0971               	comf	abs@a+1,w
  7728  0C0B  00F3               	movwf	??_abs+1
  7729  0C0C  0AF2               	incf	??_abs,f
  7730  0C0D  1903               	skipnz
  7731  0C0E  0AF3               	incf	??_abs+1,f
  7732  0C0F  0872               	movf	??_abs,w
  7733  0C10  00F0               	movwf	?_abs
  7734  0C11  0873               	movf	??_abs+1,w
  7735  0C12  00F1               	movwf	?_abs+1
  7736  0C13  2C14               	goto	i1l1180
  7737  0C14                     i1l1177:
  7738  0C14                     i1l1180:
  7739  0C14  0008               	return
  7740  0C15                     __end_of_abs:
  7741                           
  7742                           	psect	text35
  7743  07B4                     __ptext35:	
  7744 ;; *************** function ___omul *****************
  7745 ;; Defined at:
  7746 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7749 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  product         8    1[COMMON] unsigned long long 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  8    0[BANK0 ] unsigned long long 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7761 ;;      Params:         0      16       0       0       0       0
  7762 ;;      Locals:         8       0       0       0       0       0
  7763 ;;      Temps:          1       0       0       0       0       0
  7764 ;;      Totals:         9      16       0       0       0       0
  7765 ;;Total ram usage:       25 bytes
  7766 ;; Hardware stack levels used: 1
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_runVoltageModeControl
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774  07B4                     ___omul:	
  7775                           ;psect for function ___omul
  7776                           
  7777  07B4                     i1l2080:	
  7778                           ;incstack = 0
  7779                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7780                           
  7781  07B4  3071               	movlw	low ___omul@product
  7782  07B5  0086               	movwf	6
  7783  07B6  3000               	movlw	high ___omul@product
  7784  07B7  0087               	movwf	7
  7785  07B8  3008               	movlw	8
  7786  07B9  00F0               	movwf	??___omul
  7787  07BA  3000               	movlw	0
  7788  07BB                     u147_20:
  7789  07BB  001E               	movwi fsr1++
  7790  07BC  0BF0               	decfsz	??___omul,f
  7791  07BD  2FBB               	goto	u147_20
  7792  07BE                     i1l2082:
  7793  07BE  0020               	movlb	0	; select bank0
  7794  07BF  1C20               	btfss	___omul@multiplier,0
  7795  07C0  2FC2               	goto	u148_21
  7796  07C1  2FC3               	goto	u148_20
  7797  07C2                     u148_21:
  7798  07C2  2FD3               	goto	i1l2086
  7799  07C3                     u148_20:
  7800  07C3                     i1l2084:
  7801  07C3  0828               	movf	___omul@multiplicand,w
  7802  07C4  07F1               	addwf	___omul@product,f
  7803  07C5  0829               	movf	___omul@multiplicand+1,w
  7804  07C6  3DF2               	addwfc	___omul@product+1,f
  7805  07C7  082A               	movf	___omul@multiplicand+2,w
  7806  07C8  3DF3               	addwfc	___omul@product+2,f
  7807  07C9  082B               	movf	___omul@multiplicand+3,w
  7808  07CA  3DF4               	addwfc	___omul@product+3,f
  7809  07CB  082C               	movf	___omul@multiplicand+4,w
  7810  07CC  3DF5               	addwfc	___omul@product+4,f
  7811  07CD  082D               	movf	___omul@multiplicand+5,w
  7812  07CE  3DF6               	addwfc	___omul@product+5,f
  7813  07CF  082E               	movf	___omul@multiplicand+6,w
  7814  07D0  3DF7               	addwfc	___omul@product+6,f
  7815  07D1  082F               	movf	___omul@multiplicand+7,w
  7816  07D2  3DF8               	addwfc	___omul@product+7,f
  7817  07D3                     i1l2086:
  7818  07D3  35A8               	lslf	___omul@multiplicand,f
  7819  07D4  0DA9               	rlf	___omul@multiplicand+1,f
  7820  07D5  0DAA               	rlf	___omul@multiplicand+2,f
  7821  07D6  0DAB               	rlf	___omul@multiplicand+3,f
  7822  07D7  0DAC               	rlf	___omul@multiplicand+4,f
  7823  07D8  0DAD               	rlf	___omul@multiplicand+5,f
  7824  07D9  0DAE               	rlf	___omul@multiplicand+6,f
  7825  07DA  0DAF               	rlf	___omul@multiplicand+7,f
  7826  07DB                     i1l2088:
  7827  07DB  36A7               	lsrf	___omul@multiplier+7,f
  7828  07DC  0CA6               	rrf	___omul@multiplier+6,f
  7829  07DD  0CA5               	rrf	___omul@multiplier+5,f
  7830  07DE  0CA4               	rrf	___omul@multiplier+4,f
  7831  07DF  0CA3               	rrf	___omul@multiplier+3,f
  7832  07E0  0CA2               	rrf	___omul@multiplier+2,f
  7833  07E1  0CA1               	rrf	___omul@multiplier+1,f
  7834  07E2  0CA0               	rrf	___omul@multiplier,f
  7835  07E3  0820               	movf	___omul@multiplier,w
  7836  07E4  0421               	iorwf	___omul@multiplier+1,w
  7837  07E5  0422               	iorwf	___omul@multiplier+2,w
  7838  07E6  0423               	iorwf	___omul@multiplier+3,w
  7839  07E7  0424               	iorwf	___omul@multiplier+4,w
  7840  07E8  0425               	iorwf	___omul@multiplier+5,w
  7841  07E9  0426               	iorwf	___omul@multiplier+6,w
  7842  07EA  0427               	iorwf	___omul@multiplier+7,w
  7843  07EB  1D03               	skipz
  7844  07EC  2FEE               	goto	u149_21
  7845  07ED  2FEF               	goto	u149_20
  7846  07EE                     u149_21:
  7847  07EE  2FBE               	goto	i1l2082
  7848  07EF                     u149_20:
  7849  07EF                     i1l736:
  7850  07EF  0871               	movf	___omul@product,w
  7851  07F0  00A0               	movwf	?___omul
  7852  07F1  0872               	movf	___omul@product+1,w
  7853  07F2  00A1               	movwf	?___omul+1
  7854  07F3  0873               	movf	___omul@product+2,w
  7855  07F4  00A2               	movwf	?___omul+2
  7856  07F5  0874               	movf	___omul@product+3,w
  7857  07F6  00A3               	movwf	?___omul+3
  7858  07F7  0875               	movf	___omul@product+4,w
  7859  07F8  00A4               	movwf	?___omul+4
  7860  07F9  0876               	movf	___omul@product+5,w
  7861  07FA  00A5               	movwf	?___omul+5
  7862  07FB  0877               	movf	___omul@product+6,w
  7863  07FC  00A6               	movwf	?___omul+6
  7864  07FD  0878               	movf	___omul@product+7,w
  7865  07FE  00A7               	movwf	?___omul+7
  7866  07FF                     i1l737:
  7867  07FF  0008               	return
  7868  0800                     __end_of___omul:
  7869                           
  7870                           	psect	text36
  7871  0BAC                     __ptext36:	
  7872 ;; *************** function _runCurrentModeControl *****************
  7873 ;; Defined at:
  7874 ;;		line 129 in file "Controller.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;		None
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  newCurrent      2    0        short 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, status,2, status,0, pclath, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7888 ;;      Params:         0       0       0       0       0       0
  7889 ;;      Locals:         0       0       0       0       0       0
  7890 ;;      Temps:          0       0       0       0       0       0
  7891 ;;      Totals:         0       0       0       0       0       0
  7892 ;;Total ram usage:        0 bytes
  7893 ;; Hardware stack levels used: 1
  7894 ;; Hardware stack levels required when called: 2
  7895 ;; This function calls:
  7896 ;;		_convertRawToMilliAmps
  7897 ;; This function is called by:
  7898 ;;		_controlRoutine
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902  0BAC                     _runCurrentModeControl:	
  7903                           ;psect for function _runCurrentModeControl
  7904                           
  7905  0BAC                     i1l2290:	
  7906                           ;incstack = 0
  7907                           ; Regs used in _runCurrentModeControl: [wreg+status,2+status,0+pclath+cstack]
  7908                           
  7909  0BAC  0020               	movlb	0	; select bank0
  7910  0BAD  0860               	movf	_filteredIL+1,w
  7911  0BAE  00F7               	movwf	convertRawToMilliAmps@rawValue+1
  7912  0BAF  085F               	movf	_filteredIL,w
  7913  0BB0  00F6               	movwf	convertRawToMilliAmps@rawValue
  7914  0BB1  318B  23E1  318B   	fcall	_convertRawToMilliAmps
  7915  0BB4                     i1l463:
  7916  0BB4  0008               	return
  7917  0BB5                     __end_of_runCurrentModeControl:
  7918                           
  7919                           	psect	text37
  7920  0BE1                     __ptext37:	
  7921 ;; *************** function _convertRawToMilliAmps *****************
  7922 ;; Defined at:
  7923 ;;		line 82 in file "CurrentSensor.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  rawValue        2    6[COMMON] unsigned short 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  returnValuem    2   10[COMMON] short 
  7928 ;;  offsetted       2    8[COMMON] short 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  2    6[COMMON] short 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0, pclath, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7938 ;;      Params:         2       0       0       0       0       0
  7939 ;;      Locals:         4       0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0
  7941 ;;      Totals:         6       0       0       0       0       0
  7942 ;;Total ram usage:        6 bytes
  7943 ;; Hardware stack levels used: 1
  7944 ;; Hardware stack levels required when called: 1
  7945 ;; This function calls:
  7946 ;;		___wmul
  7947 ;; This function is called by:
  7948 ;;		_runCurrentModeControl
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952  0BE1                     _convertRawToMilliAmps:	
  7953                           ;psect for function _convertRawToMilliAmps
  7954                           
  7955  0BE1                     i1l2072:	
  7956                           ;incstack = 0
  7957                           ; Regs used in _convertRawToMilliAmps: [wreg+status,2+status,0+pclath+cstack]
  7958                           
  7959                           
  7960                           ;CurrentSensor.c: 83:     int16_t offsetted = (int16_t)(rawValue - 445);
  7961  0BE1  0876               	movf	convertRawToMilliAmps@rawValue,w
  7962  0BE2  3E43               	addlw	67
  7963  0BE3  00F8               	movwf	convertRawToMilliAmps@offsetted
  7964  0BE4  30FE               	movlw	254
  7965  0BE5  3D77               	addwfc	convertRawToMilliAmps@rawValue+1,w
  7966  0BE6  00F9               	movwf	convertRawToMilliAmps@offsetted+1
  7967  0BE7                     i1l2074:
  7968                           
  7969                           ;CurrentSensor.c: 84:     int16_t returnValuemA = (int32_t)(offsetted * 2857) >> 0;
  7970  0BE7  0879               	movf	convertRawToMilliAmps@offsetted+1,w
  7971  0BE8  00F1               	movwf	___wmul@multiplier+1
  7972  0BE9  0878               	movf	convertRawToMilliAmps@offsetted,w
  7973  0BEA  00F0               	movwf	___wmul@multiplier
  7974  0BEB  3029               	movlw	41
  7975  0BEC  00F2               	movwf	___wmul@multiplicand
  7976  0BED  300B               	movlw	11
  7977  0BEE  00F3               	movwf	___wmul@multiplicand+1
  7978  0BEF  318C  244E  318B   	fcall	___wmul
  7979  0BF2  0871               	movf	?___wmul+1,w
  7980  0BF3  00FB               	movwf	convertRawToMilliAmps@returnValuemA+1
  7981  0BF4  0870               	movf	?___wmul,w
  7982  0BF5  00FA               	movwf	convertRawToMilliAmps@returnValuemA
  7983  0BF6                     i1l2076:
  7984                           
  7985                           ;CurrentSensor.c: 85:     return returnValuemA;
  7986  0BF6  087B               	movf	convertRawToMilliAmps@returnValuemA+1,w
  7987  0BF7  00F7               	movwf	?_convertRawToMilliAmps+1
  7988  0BF8  087A               	movf	convertRawToMilliAmps@returnValuemA,w
  7989  0BF9  00F6               	movwf	?_convertRawToMilliAmps
  7990  0BFA                     i1l535:
  7991  0BFA  0008               	return
  7992  0BFB                     __end_of_convertRawToMilliAmps:
  7993                           
  7994                           	psect	text38
  7995  0C4E                     __ptext38:	
  7996 ;; *************** function ___wmul *****************
  7997 ;; Defined at:
  7998 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  multiplier      2    0[COMMON] unsigned int 
  8001 ;;  multiplicand    2    2[COMMON] unsigned int 
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  product         2    4[COMMON] unsigned int 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  2    0[COMMON] unsigned int 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8013 ;;      Params:         4       0       0       0       0       0
  8014 ;;      Locals:         2       0       0       0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0
  8016 ;;      Totals:         6       0       0       0       0       0
  8017 ;;Total ram usage:        6 bytes
  8018 ;; Hardware stack levels used: 1
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_runPotScaling
  8023 ;;		_controlRoutine
  8024 ;;		_convertRawToMilliAmps
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028  0C4E                     ___wmul:	
  8029                           ;psect for function ___wmul
  8030                           
  8031  0C4E                     i1l2002:	
  8032                           ;incstack = 0
  8033                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8034                           
  8035  0C4E  01F4               	clrf	___wmul@product
  8036  0C4F  01F5               	clrf	___wmul@product+1
  8037  0C50                     i1l2004:
  8038  0C50  1C70               	btfss	___wmul@multiplier,0
  8039  0C51  2C53               	goto	u128_21
  8040  0C52  2C54               	goto	u128_20
  8041  0C53                     u128_21:
  8042  0C53  2C58               	goto	i1l717
  8043  0C54                     u128_20:
  8044  0C54                     i1l2006:
  8045  0C54  0872               	movf	___wmul@multiplicand,w
  8046  0C55  07F4               	addwf	___wmul@product,f
  8047  0C56  0873               	movf	___wmul@multiplicand+1,w
  8048  0C57  3DF5               	addwfc	___wmul@product+1,f
  8049  0C58                     i1l717:
  8050  0C58  3001               	movlw	1
  8051  0C59                     u129_25:
  8052  0C59  35F2               	lslf	___wmul@multiplicand,f
  8053  0C5A  0DF3               	rlf	___wmul@multiplicand+1,f
  8054  0C5B  0B89               	decfsz	9,f
  8055  0C5C  2C59               	goto	u129_25
  8056  0C5D                     i1l2008:
  8057  0C5D  3001               	movlw	1
  8058  0C5E                     u130_25:
  8059  0C5E  36F1               	lsrf	___wmul@multiplier+1,f
  8060  0C5F  0CF0               	rrf	___wmul@multiplier,f
  8061  0C60  0B89               	decfsz	9,f
  8062  0C61  2C5E               	goto	u130_25
  8063  0C62                     i1l2010:
  8064  0C62  0870               	movf	___wmul@multiplier,w
  8065  0C63  0471               	iorwf	___wmul@multiplier+1,w
  8066  0C64  1D03               	btfss	3,2
  8067  0C65  2C67               	goto	u131_21
  8068  0C66  2C68               	goto	u131_20
  8069  0C67                     u131_21:
  8070  0C67  2C50               	goto	i1l2004
  8071  0C68                     u131_20:
  8072  0C68                     i1l2012:
  8073  0C68  0875               	movf	___wmul@product+1,w
  8074  0C69  00F1               	movwf	?___wmul+1
  8075  0C6A  0874               	movf	___wmul@product,w
  8076  0C6B  00F0               	movwf	?___wmul
  8077  0C6C                     i1l719:
  8078  0C6C  0008               	return
  8079  0C6D                     __end_of___wmul:
  8080                           
  8081                           	psect	text39
  8082  0EEF                     __ptext39:	
  8083 ;; *************** function ___lldiv *****************
  8084 ;; Defined at:
  8085 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  divisor         4    6[COMMON] unsigned long 
  8088 ;;  dividend        4   10[COMMON] unsigned long 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  quotient        4    1[BANK0 ] unsigned long 
  8091 ;;  counter         1    5[BANK0 ] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  4    6[COMMON] unsigned long 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8101 ;;      Params:         8       0       0       0       0       0
  8102 ;;      Locals:         0       5       0       0       0       0
  8103 ;;      Temps:          0       1       0       0       0       0
  8104 ;;      Totals:         8       6       0       0       0       0
  8105 ;;Total ram usage:       14 bytes
  8106 ;; Hardware stack levels used: 1
  8107 ;; This function calls:
  8108 ;;		Nothing
  8109 ;; This function is called by:
  8110 ;;		_runPotScaling
  8111 ;;		_controlRoutine
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115  0EEF                     ___lldiv:	
  8116                           ;psect for function ___lldiv
  8117                           
  8118  0EEF                     i1l2314:	
  8119                           ;incstack = 0
  8120                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8121                           
  8122  0EEF  3000               	movlw	0
  8123  0EF0  0020               	movlb	0	; select bank0
  8124  0EF1  00A4               	movwf	___lldiv@quotient+3
  8125  0EF2  3000               	movlw	0
  8126  0EF3  00A3               	movwf	___lldiv@quotient+2
  8127  0EF4  3000               	movlw	0
  8128  0EF5  00A2               	movwf	___lldiv@quotient+1
  8129  0EF6  3000               	movlw	0
  8130  0EF7  00A1               	movwf	___lldiv@quotient
  8131  0EF8  0879               	movf	___lldiv@divisor+3,w
  8132  0EF9  0478               	iorwf	___lldiv@divisor+2,w
  8133  0EFA  0477               	iorwf	___lldiv@divisor+1,w
  8134  0EFB  0476               	iorwf	___lldiv@divisor,w
  8135  0EFC  1903               	skipnz
  8136  0EFD  2EFF               	goto	u204_21
  8137  0EFE  2F00               	goto	u204_20
  8138  0EFF                     u204_21:
  8139  0EFF  2F41               	goto	i1l2334
  8140  0F00                     u204_20:
  8141  0F00                     i1l2316:
  8142  0F00  01A5               	clrf	___lldiv@counter
  8143  0F01  0AA5               	incf	___lldiv@counter,f
  8144  0F02  2F0E               	goto	i1l2320
  8145  0F03                     i1l2318:
  8146  0F03  3001               	movlw	1
  8147  0F04                     u205_25:
  8148  0F04  35F6               	lslf	___lldiv@divisor,f
  8149  0F05  0DF7               	rlf	___lldiv@divisor+1,f
  8150  0F06  0DF8               	rlf	___lldiv@divisor+2,f
  8151  0F07  0DF9               	rlf	___lldiv@divisor+3,f
  8152  0F08  0B89               	decfsz	9,f
  8153  0F09  2F04               	goto	u205_25
  8154  0F0A  3001               	movlw	1
  8155  0F0B  00A0               	movwf	??___lldiv
  8156  0F0C  0820               	movf	??___lldiv,w
  8157  0F0D  07A5               	addwf	___lldiv@counter,f
  8158  0F0E                     i1l2320:
  8159  0F0E  1FF9               	btfss	___lldiv@divisor+3,7
  8160  0F0F  2F11               	goto	u206_21
  8161  0F10  2F12               	goto	u206_20
  8162  0F11                     u206_21:
  8163  0F11  2F03               	goto	i1l2318
  8164  0F12                     u206_20:
  8165  0F12                     i1l2322:
  8166  0F12  3001               	movlw	1
  8167  0F13                     u207_25:
  8168  0F13  35A1               	lslf	___lldiv@quotient,f
  8169  0F14  0DA2               	rlf	___lldiv@quotient+1,f
  8170  0F15  0DA3               	rlf	___lldiv@quotient+2,f
  8171  0F16  0DA4               	rlf	___lldiv@quotient+3,f
  8172  0F17  0B89               	decfsz	9,f
  8173  0F18  2F13               	goto	u207_25
  8174  0F19                     i1l2324:
  8175  0F19  0879               	movf	___lldiv@divisor+3,w
  8176  0F1A  027D               	subwf	___lldiv@dividend+3,w
  8177  0F1B  1D03               	skipz
  8178  0F1C  2F27               	goto	u208_25
  8179  0F1D  0878               	movf	___lldiv@divisor+2,w
  8180  0F1E  027C               	subwf	___lldiv@dividend+2,w
  8181  0F1F  1D03               	skipz
  8182  0F20  2F27               	goto	u208_25
  8183  0F21  0877               	movf	___lldiv@divisor+1,w
  8184  0F22  027B               	subwf	___lldiv@dividend+1,w
  8185  0F23  1D03               	skipz
  8186  0F24  2F27               	goto	u208_25
  8187  0F25  0876               	movf	___lldiv@divisor,w
  8188  0F26  027A               	subwf	___lldiv@dividend,w
  8189  0F27                     u208_25:
  8190  0F27  1C03               	skipc
  8191  0F28  2F2A               	goto	u208_21
  8192  0F29  2F2B               	goto	u208_20
  8193  0F2A                     u208_21:
  8194  0F2A  2F34               	goto	i1l2330
  8195  0F2B                     u208_20:
  8196  0F2B                     i1l2326:
  8197  0F2B  0876               	movf	___lldiv@divisor,w
  8198  0F2C  02FA               	subwf	___lldiv@dividend,f
  8199  0F2D  0877               	movf	___lldiv@divisor+1,w
  8200  0F2E  3BFB               	subwfb	___lldiv@dividend+1,f
  8201  0F2F  0878               	movf	___lldiv@divisor+2,w
  8202  0F30  3BFC               	subwfb	___lldiv@dividend+2,f
  8203  0F31  0879               	movf	___lldiv@divisor+3,w
  8204  0F32  3BFD               	subwfb	___lldiv@dividend+3,f
  8205  0F33                     i1l2328:
  8206  0F33  1421               	bsf	___lldiv@quotient,0
  8207  0F34                     i1l2330:
  8208  0F34  3001               	movlw	1
  8209  0F35                     u209_25:
  8210  0F35  36F9               	lsrf	___lldiv@divisor+3,f
  8211  0F36  0CF8               	rrf	___lldiv@divisor+2,f
  8212  0F37  0CF7               	rrf	___lldiv@divisor+1,f
  8213  0F38  0CF6               	rrf	___lldiv@divisor,f
  8214  0F39  0B89               	decfsz	9,f
  8215  0F3A  2F35               	goto	u209_25
  8216  0F3B                     i1l2332:
  8217  0F3B  3001               	movlw	1
  8218  0F3C  02A5               	subwf	___lldiv@counter,f
  8219  0F3D  1D03               	btfss	3,2
  8220  0F3E  2F40               	goto	u210_21
  8221  0F3F  2F41               	goto	u210_20
  8222  0F40                     u210_21:
  8223  0F40  2F12               	goto	i1l2322
  8224  0F41                     u210_20:
  8225  0F41                     i1l2334:
  8226  0F41  0824               	movf	___lldiv@quotient+3,w
  8227  0F42  00F9               	movwf	?___lldiv+3
  8228  0F43  0823               	movf	___lldiv@quotient+2,w
  8229  0F44  00F8               	movwf	?___lldiv+2
  8230  0F45  0822               	movf	___lldiv@quotient+1,w
  8231  0F46  00F7               	movwf	?___lldiv+1
  8232  0F47  0821               	movf	___lldiv@quotient,w
  8233  0F48  00F6               	movwf	?___lldiv
  8234  0F49                     i1l753:
  8235  0F49  0008               	return
  8236  0F4A                     __end_of___lldiv:
  8237  007E                     btemp	set	126	;btemp
  8238  007E                     int$flags	set	126
  8239  007E                     wtemp0	set	126
  8240                           
  8241                           	psect	idloc
  8242                           
  8243                           ;Config register IDLOC0 @ 0x8000
  8244                           ;	unspecified, using default values
  8245  8000                     	org	32768
  8246  8000  3FFF               	dw	16383
  8247                           
  8248                           ;Config register IDLOC1 @ 0x8001
  8249                           ;	unspecified, using default values
  8250  8001                     	org	32769
  8251  8001  3FFF               	dw	16383
  8252                           
  8253                           ;Config register IDLOC2 @ 0x8002
  8254                           ;	unspecified, using default values
  8255  8002                     	org	32770
  8256  8002  3FFF               	dw	16383
  8257                           
  8258                           ;Config register IDLOC3 @ 0x8003
  8259                           ;	unspecified, using default values
  8260  8003                     	org	32771
  8261  8003  3FFF               	dw	16383
  8262                           
  8263                           	psect	config
  8264                           
  8265                           ;Config register CONFIG1 @ 0x8007
  8266                           ;	Oscillator Selection
  8267                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8268                           ;	Watchdog Timer Enable
  8269                           ;	WDTE = OFF, WDT disabled
  8270                           ;	Power-up Timer Enable
  8271                           ;	PWRTE = OFF, PWRT disabled
  8272                           ;	MCLR Pin Function Select
  8273                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8274                           ;	Flash Program Memory Code Protection
  8275                           ;	CP = OFF, Program memory code protection is disabled
  8276                           ;	Data Memory Code Protection
  8277                           ;	CPD = OFF, Data memory code protection is disabled
  8278                           ;	Brown-out Reset Enable
  8279                           ;	BOREN = ON, Brown-out Reset enabled
  8280                           ;	Clock Out Enable
  8281                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8282                           ;	Internal/External Switchover
  8283                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8284                           ;	Fail-Safe Clock Monitor Enable
  8285                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8286  8007                     	org	32775
  8287  8007  0FA4               	dw	4004
  8288                           
  8289                           ;Config register CONFIG2 @ 0x8008
  8290                           ;	Flash Memory Self-Write Protection
  8291                           ;	WRT = OFF, Write protection off
  8292                           ;	PLL Enable
  8293                           ;	PLLEN = OFF, 4x PLL disabled
  8294                           ;	Stack Overflow/Underflow Reset Enable
  8295                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8296                           ;	Brown-out Reset Voltage Selection
  8297                           ;	BORV = 0x1, unprogrammed default
  8298                           ;	Low-Voltage Programming Enable
  8299                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8300  8008                     	org	32776
  8301  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         254
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      79
    BANK1            80     13      79
    BANK2            80      0      74
    BANK3            80      0      64
    BANK4            32      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    _runCurrentModeControl->_convertRawToMilliAmps
    _convertRawToMilliAmps->___wmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0   11750
                                             60 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    3020
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      10    10      0    5939
                                             50 BANK0     10    10      0
                            ___lldiv
                             ___wmul
              _runCurrentModeControl
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    2296
                                             16 BANK0     34    34      0
                             ___lmul
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _runCurrentModeControl                                2     2      0    1301
              _convertRawToMilliAmps
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliAmps                                6     4      2    1300
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1074
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runCurrentModeControl
       _convertRawToMilliAmps
         ___wmul
     _runVoltageModeControl
       ___lmul
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     156       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4A      10       92.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0      20      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     156      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Aug 08 11:28:46 2023

                ___wmul@multiplicand 0072                                  l118 0D6E  
                                l232 0B8F                                  l304 0633  
                                l241 0699                                  l137 05BD  
                                l236 065B                                  l324 0E3C  
                                l172 0C30                                  l318 06F9  
                                l510 0C8C                                  l434 0C4D  
                                l532 0BE0                                  l356 0BC6  
                                l199 0BAB                                  l561 0BA3  
                                l564 0B9C                                  l558 0B89  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0BFB                                  wreg 0009  
                __end_ofi1_writeGPIO 0759                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00E3                           i1_readGPIO 0DAC  
                               ?_abs 0070                                 l2030 069C  
                               l2200 0652                                 l2040 06AF  
                               l2032 069D                                 l2210 067D  
                               l2202 0657                                 l2050 06D5  
                               l2042 06B0                                 l2034 06A3  
                               l2212 0682                                 l2204 0659  
                               l2052 06DA                                 l2044 06B5  
                               l2036 06A8                                 l2206 0660  
                               l2054 06DF                                 l2046 06BA  
                               l2038 06AB                                 l2208 0665  
                               l2160 05C1                                 l2056 06EC  
                               l2048 06C7                                 l2170 05D4  
                               l2162 05C7                                 l2180 0609  
                               l2172 05D9                                 l2164 05CC  
                               l2190 063F                                 l2182 060E  
                               l2174 05DE                                 l2166 05CF  
                               l2158 05C0                                 l2192 0643  
                               l2184 0627                                 l2176 05F7  
                               l2168 05D3                                 l2194 0644  
                               l2186 0636                                 l2178 0604  
                               l2530 04F1                                 l2610 0C1A  
                               l2196 0646                                 l2188 0639  
                               l2292 0BD3                                 l2540 0503  
                               l2532 04F3                                 l2620 0C24  
                               l2612 0C1C                                 l2198 064C  
                               l2294 0BD9                                 l2550 0520  
                               l2542 050D                                 l2534 04F4  
                               l2622 0C26                                 l2614 0C1E  
                               l2606 0C15                                 l2630 0BA4  
                               l2640 0C31                                 l2560 053A  
                               l2552 0521                                 l2544 0511  
                               l2536 04FE                                 l2528 04F0  
                               l2624 0C28                                 l2616 0C20  
                               l2608 0C18                                 l2632 0BA9  
                               l2634 0B8A                                 l2642 0C3C  
                               l2650 0E01                                 l2810 059A  
                               l2570 054E                                 l2562 053E  
                               l2554 052B                                 l2546 0512  
                               l2538 0502                                 l2626 0C29  
                               l2618 0C21                                 l2730 0D46  
                               l2636 0C6D                                 l2660 0E14  
                               l2652 0E04                                 l2644 0DF5  
                               l2580 056B                                 l2572 0558  
                               l2564 053F                                 l2556 052F  
                               l2548 051C                                 l2628 0C2B  
                               l2740 0D58                                 l2732 0D49  
                               l2724 0D3C                                 l2638 0BBE  
                               l2670 0E27                                 l2662 0E20  
                               l2654 0E08                                 l2646 0DF6  
                               l2590 0583                                 l2582 056C  
                               l2574 055C                                 l2566 0549  
                               l2558 0530                                 l2750 0D6B  
                               l2742 0D5E                                 l2734 0D4C  
                               l2726 0D40                                 l2672 0E2D  
                               l2680 0E3B                                 l2656 0E09  
                               l2648 0DFC                                 l2592 0587  
                               l2584 0576                                 l2576 055D  
                               l2568 054D                                 l2744 0D5E  
                               l2736 0D4F                                 l2728 0D43  
                               l2674 0E39                                 l2658 0E0E  
                               l2594 0588                                 l2586 0578  
                               l2578 0567                                 l2746 0D67  
                               l2738 0D52                                 l2668 0E22  
                               l2588 0579                                 l2684 0B9D  
                               l2598 0592                                 l2686 0B96  
                               l2688 0B86                                 STR_1 0800  
                               u1410 06DA                                 u1411 06D9  
                               u1420 06DF                                 u1404 06CC  
                               u1421 06DE                                 u1405 06CB  
                               _LATA 010C                                 _LATB 010D  
                               u1360 06A3                                 u1361 06A2  
                               u1434 06E4                                 u1370 06B5  
                               u2410 0E27                                 u1435 06E3  
                               u1371 06B4                                 u2411 0E26  
                               u1700 0609                                 u1444 06F1  
                               u1380 06BA                                 u2404 0E19  
                               u1701 0608                                 u1445 06F0  
                               u1381 06B9                                 u2405 0E18  
                               u1710 060E                                 u2510 0D67  
                               u1711 060D                                 u2511 0D66  
                               u1640 05C7                                 u2424 0E32  
                               u1641 05C6                                 u2425 0E31  
                               u1650 05D9                                 u1394 06BF  
                               u1651 05D8                                 u1395 06BE  
                               u1820 0682                                 u1804 066A  
                               u1724 0613                                 u1660 05DE  
                               u2380 0DFC                                 u1821 0681  
                               u1805 0669                                 u1725 0612  
                               u1661 05DD                                 u2381 0DFB  
                               u1814 0675                                 u1750 063F  
                               u1734 061E                                 u2390 0E0E  
                               u1815 0674                                 u1751 063E  
                               u1735 061D                                 u2391 0E0D  
                               u1760 064C                                 u1744 062C  
                               u1761 064B                                 u1745 062B  
                               u1834 0687                                 u1770 0652  
                               u1674 05E3                                 u1835 0686  
                               u1771 0651                                 u1675 05E2  
                               u1844 0692                                 u1780 0660  
                               u1684 05EE                                 u1845 0691  
                               u1781 065F                                 u1685 05ED  
                               u1790 0665                                 u1694 05FC  
                               u1791 0664                                 u1695 05FB  
          _transToVoltageModeControl 0B9D                      _filteredFreqPot 0166  
                    _filteredDutyPot 0164                                 abs@a 0070  
                               _main 0D3C                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
      convertRawToMilliAmps@rawValue 0076                                 start 0086  
          ??_setupInternalOscillator 00E2                                ??_abs 0072  
                              ?_main 00EB                      __end_of___lldiv 0F4A  
                              i1l108 0084                                i1l250 0EDA  
                              i1l324 0DF2                                i1l244 0EA4  
                              i1l253 0EEE                                i1l245 0EB7  
                              i1l318 0758                                i1l175 0CDB  
                              i1l249 0ED8                                i1l441 07B3  
                              i1l370 0FFF                                i1l515 0D08  
                              i1l363 0FA4                                i1l444 0DAB  
                              i1l460 0314                                i1l452 040E  
                              i1l532 0BD2                                i1l535 0BFA  
                              i1l463 0BB4                                i1l543 0CB0  
                              i1l375 04DE                                i1l449 0400  
                              i1l529 0E94                                i1l377 04ED  
                              i1l731 0D3B                                i1l717 0C58  
                              i1l719 0C6C                                i1l567 0BBD  
                              i1l736 07EF                                i1l753 0F49  
                              i1l737 07FF                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078       convertRawToMilliAmps@offsetted 0078  
               readFilteredFreqPot@i 0029             readFilteredDutyPot@i_750 0028  
                              status 0003                                wtemp0 007E  
             initialiseGPIO@portType 00E5                  _initialiseADCModule 0B8A  
               readFilteredDutyPot@i 0029           initialiseADCPin@gpioNumber 00E7  
                    __initialization 0088                         __end_of_main 0D71  
                  ?_initialiseADCPin 0070                _integratorScaledLimit 00BC  
                        i1_writeGPIO 06FA                               ??_main 00EF  
                 ??_initialiseADCPin 00E2             __end_of_readFilteredVout 07B4  
               ?_initialiseADCModule 0070           ??_initialiseCurrentSensors 00E8  
    __end_of_setupInternalOscillator 05BE  setupInternalOscillator@selectedFreq 00E4  
                             _ADCON0 009D                               _ADCON1 009E  
                        ?i1_readGPIO 0070                               _ADRESH 009C  
                             _ADRESL 009B                               _CCPR1L 0291  
                             _ANSELA 018C                               _ANSELB 018D  
                             i1l2010 0C62                               i1l2002 0C4E  
                             i1l2012 0C68                               i1l2004 0C50  
                             i1l2020 0D15                               i1l2100 070E  
                             i1l2006 0C54                               i1l2022 0D1D  
                             i1l2110 0734                               i1l2102 070F  
                             i1l2008 0C5D                               i1l2024 0D24  
                             i1l2016 0D09                               i1l2120 0DAE  
                             i1l2112 0739                               i1l2104 0714  
                             i1l2026 0D33                               i1l2018 0D11  
                             i1l2130 0DC1                               i1l2122 0DB4  
                             i1l2114 073E                               i1l2106 0719  
                             i1l1180 0C14                               i1l2060 0D76  
                             i1l2132 0DC6                               i1l2124 0DB9  
                             i1l2300 0CFC                               i1l2116 074B  
                             i1l2108 0726                               i1l2220 0EA2  
                             i1l2070 0C08                               i1l2062 0D93  
                             i1l2134 0DCB                               i1l2142 0DD9  
                             i1l2126 0DBC                               i1l2118 0DAD  
                             i1l2302 0D01                               i1l2310 0BB5  
                             i1l2230 0EBE                               i1l2222 0EAA  
                             i1l2214 0E96                               i1l2320 0F0E  
                             i1l2072 0BE1                               i1l2080 07B4  
                             i1l2064 0DA7                               i1l2144 0DDE  
                             i1l2136 0DD7                               i1l2128 0DC0  
                             i1l2304 0D06                               u200_20 0CF5  
                             i1l2312 0BB9                               i1l2240 0ECE  
                             i1l2232 0EC2                               i1l2224 0EB0  
                             i1l2216 0E98                               i1l2400 0E56  
                             i1l1177 0C14                               u200_21 0CF3  
                             i1l2330 0F34                               i1l2322 0F12  
                             i1l2314 0EEF                               i1l2074 0BE7  
                             i1l2082 07BE                               i1l2058 0D71  
                             i1l2146 0DE3                               i1l2154 0DF1  
                             i1l2306 0D07                               i1l2090 06FB  
                             i1l2250 0EE7                               i1l2242 0ED2  
                             i1l2234 0ECD                               i1l2226 0EB5  
                             i1l2218 0E9E                               i1l2410 0E77  
                             i1l2402 0E66                               i1l2332 0F3B  
                             i1l2324 0F19                               i1l2316 0F00  
                             i1l2076 0BF6                               i1l2084 07C3  
                             i1l2068 0BFB                               i1l2148 0DEF  
                             i1l2260 00CA                               i1l2092 06FC  
                             i1l2340 0BCC                               i1l2244 0EDE  
                             i1l2228 0EBC                               i1l2412 0E7B  
                             i1l2326 0F2B                               i1l2318 0F03  
                             i1l2334 0F41                               i1l2086 07D3  
                             i1l2270 0185                               i1l2262 00D9  
                             i1l2094 0702                               i1l2350 0CA8  
                             i1l2342 0C8D                               i1l2246 0EE2  
                             i1l2254 0EEC                               i1l2510 0FC8  
                             i1l2502 0FA7                               i1l2414 0E81  
                             i1l2430 0773                               i1l2328 0F33  
                             i1l2088 07DB                               i1l2280 0267  
                             i1l2272 01AF                               i1l2264 00E7  
                             i1l2360 0315                               u201_20 0CF6  
                             i1l2096 0707                               i1l2352 0CAE  
                             i1l2344 0C95                               i1l2248 0EE6  
                             i1l2520 0FE2                               i1l2512 0FD1  
                             i1l2504 0FB5                               i1l2408 0E67  
                             i1l2440 0786                               i1l2432 077C  
                             i1l2424 075B                               i1l2290 0BAC  
                             i1l2282 0299                               i1l2274 01BF  
                             i1l2266 011B                               i1l2258 00B4  
                             i1l2370 035D                               i1l2362 031C  
                             i1l2098 070A                               i1l2338 0BC7  
                             i1l2346 0CA0                               i1l2522 0FE6  
                             i1l2506 0FB9                               i1l2442 0796  
                             i1l2434 0785                               i1l2426 0769  
                             i1l2418 0759                               i1l2450 040F  
                             i1l2354 0CB1                               i1l2284 02BD  
                             i1l2276 01CA                               i1l2268 012A  
                             i1l2380 03F2                               i1l2372 0360  
                             i1l2364 031F                               i1l2348 0CA4  
                             i1l2524 0FEC                               i1l2508 0FBF  
                             i1l2444 079A                               i1l2428 076D  
                             i1l2460 04E8                               i1l2452 0415  
                             i1l2356 0CB4                               i1l2700 002F  
                             i1l2286 02EE                               i1l2278 0217  
                             i1l2382 03FC                               i1l2374 0365  
                             i1l2366 0324                               i1l2470 0F4C  
                             i1l2518 0FD2                               i1l2446 07A0  
                             i1l2462 04EC                               i1l2454 041F  
                             i1l2358 0CBF                               i1l2710 004D  
                             i1l2702 0035                               u210_20 0F41  
                             i1l2288 0310                               i1l2384 040A  
                             i1l2376 0398                               i1l2368 0357  
                             u202_20 0D01                               i1l2296 0CDC  
                             i1l2480 0F76                               i1l2472 0F5A  
                             i1l2464 0F4A                               i1l2456 04D0  
                             i1l2712 0053                               i1l2704 003D  
                             i1l2720 0078                               u210_21 0F40  
                             u202_21 0D00                               i1l2378 03C5  
                             i1l2298 0CFA                               i1l2490 0F8B  
                             i1l2474 0F5E                               i1l2394 0E3E  
                             i1l2458 04DA                               i1l2722 0083  
                             i1l2714 0063                               i1l2706 0045  
                             i1l2492 0F91                               i1l2476 0F64  
                             i1l2396 0E4C                               i1l2388 0E3D  
                             i1l2716 006E                               i1l2708 004A  
                             u130_25 0C5E                               i1l2486 0F77  
                             i1l2478 0F6D                               i1l2398 0E50  
                             i1l2718 0073                               u131_20 0C68  
                             u203_20 0D06                               u211_20 0C95  
                             i1l2488 0F87                               i1l2496 0FA5  
                             u131_21 0C67                               u203_21 0D05  
                             u211_21 0C94                               i1l2690 0006  
                             i1l2692 001B                               i1l2694 0021  
                             u204_20 0F00                               u132_20 0D15  
                             u212_20 0CA0                               u220_20 0E56  
                             i1l2696 0024                               u204_21 0EFF  
                             u132_21 0D14                               u212_21 0C9F  
                             u220_21 0E55                               i1l2698 0029  
                             u213_20 0CAE                               u221_20 0E81  
                             u213_21 0CAD                               u221_21 0E80  
                             u205_25 0F04                               u133_25 0D1E  
                             u206_20 0F12                               u150_20 0702  
                             u222_20 0E8E                               u230_20 04DA  
                             u214_20 0CD9                               u206_21 0F11  
                             u150_21 0701                               u230_21 04D9  
                             u214_21 0CD6                               u134_25 0D25  
                             u222_25 0E8A                               u230_25 04D6  
                             u135_20 0D33                               u151_20 0714  
                             u223_20 0773                               u231_20 04E8  
                             u135_21 0D32                               u151_21 0713  
                             u223_21 0772                               u231_21 04E7  
                             u215_24 0CDB                               u207_25 0F13  
                             u231_25 04E4                               u208_20 0F2B  
                             u128_20 0C54                               u160_20 0DC6  
                             u216_20 031C                               u152_20 0719  
                             u232_20 0F64                               u224_20 07A0  
                             u208_21 0F2A                               u128_21 0C53  
                             u160_21 0DC5                               u216_21 031B  
                             u152_21 0718                               u232_21 0F63  
                             u224_21 079F                               u208_25 0F27  
                             u145_20 0DA1                               u217_20 035D  
                             u233_20 0F91                               u225_20 07AD  
                             u217_21 035C                               u233_21 0F90  
                             u161_24 0DD0                               u153_24 071E  
                             u209_25 0F35                               u129_25 0C59  
                             u145_25 0D9D                               u161_25 0DCF  
                             u153_25 071D                               u225_25 07A9  
                             u146_20 0C08                               u162_20 0DDE  
                             u218_20 03FC                               u234_20 0F9E  
                             u226_20 0415                               u250_20 0080  
                             u146_21 0C07                               u162_21 0DDD  
                             u218_21 03FB                               u226_21 0414  
                             u154_24 072B                               u146_25 0C04  
                             u218_25 03F8                               u154_25 072A  
                             u234_25 0F9A                               u147_20 07BB  
                             u219_20 040A                               u155_20 0739  
                             u235_20 0FBF                               u227_20 041F  
                             u243_20 0021                               u219_21 0409  
                             u155_21 0738                               u235_21 0FBE  
                             u227_21 041E                               u243_21 0020  
                             u163_24 0DE8                               u163_25 0DE7  
                             u219_25 0406                               u148_20 07C3  
                             u156_20 073E                               u236_20 0FEC  
                             u228_20 0441                               u244_20 002F  
                             u148_21 07C2                               u156_21 073D  
                             u236_21 0FEB                               u244_21 002E  
                             u228_25 043D                               u149_20 07EF  
                             u237_20 0FF9                               u229_20 0470  
                             u245_20 004A                               u149_21 07EE  
                             u245_21 0049                               u157_24 0743  
                             u157_25 0742                               u237_25 0FF5  
                             u229_25 046C                               u190_20 0ED8  
                             u246_20 0053                               u190_21 0ED7  
                             u246_21 0052                               u158_24 0750  
                             u158_25 074F                               u159_20 0DB4  
                             u191_20 0EDE                               u247_20 006A  
                             u159_21 0DB3                               u191_21 0EDD  
                             u247_21 0068                               u192_20 00CA  
                             u248_20 006B                               u192_21 00C9  
                             u193_20 01AF                               u185_20 0E9E  
                             u249_20 007F                               u193_21 01AE  
                             u185_21 0E9D                               u249_21 007D  
                             u193_23 01AB                               u194_20 01CA  
                             u186_20 0EAA                               u194_21 01C9  
                             u186_21 0EA9                               u195_20 0217  
                             u187_20 0EB0                               u195_21 0216  
                             u187_21 0EAF                               u195_23 0213  
                             u196_20 0287                               u188_20 0EBC  
                             u188_21 0EBB                      ??_runPotScaling 0026  
                             u196_25 027E                               u197_20 02DC  
                             u197_25 02D3                               u189_25 0EC5  
                             u198_20 0CE6                               u198_21 0CE4  
                             u199_20 0CE7              initialiseGPIO@direction 00E2  
                   readGPIO@portType 00E9                  readADCRaw@gpioValid 0077  
                             ___lmul 0D09                               ___omul 07B4  
                             ___wmul 0C4E                            ??___lldiv 0020  
                   __end_of_readGPIO 0E3D                       _controlRoutine 0315  
                             _tripIL 006A       convertRawToMilliVolts@rawValue 007C  
          setPWMDutyandPeriod@period 0072                ??_initialiseADCModule 00E2  
           _initialisePotentiometers 0BBE           initialiseADCPin@portNumber 00E6  
                   __end_of_setupPWM 0C31                      _currentTripRead 0CDC  
         ?_transToCurrentModeControl 0070              __end_of__initialization 00B0  
            ??_runCurrentModeControl 007C               __end_of_controlRoutine 040F  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00E4  
              i1writeGPIO@gpioNumber 0074                _convertRawToMilliAmps 0BE1  
                      _currentILFIFO 0120                       _OPTION_REGbits 0095  
                  __end_of_Tick490Hz 0086                _runVoltageModeControl 00B4  
                         __pbssBANK0 005D                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pmaintext 0D3C  
                    ?_controlRoutine 0070                              ?___lmul 0070  
                            ?___omul 0020                              ?___wmul 0070  
  __end_of_transToVoltageModeControl 0BA4             ??_convertRawToMilliVolts 0020  
                         __pintentry 0004                              _CCP1CON 0293  
                ___omul@multiplicand 0028                       ___lmul@product 0078  
            __end_of_currentTripRead 0D09          __end_of_setPWMDutyandPeriod 0CDC  
   __end_of_initialiseCurrentSensors 0C8D           __end_ofi1_currentTripReset 0BD3  
           initialiseADCPin@portType 00E5              _transToOverCurrentFault 0BB5  
                 i1readGPIO@portType 0077                readFilteredVout@i_848 0028  
              i1writeGPIO@portNumber 0075                           _filteredIL 005F  
                          ?_readGPIO 0070                           _readADCRaw 0E95  
                _readFilteredFreqPot 0FA5                 i1readGPIO@gpioNumber 0078  
                _readFilteredDutyPot 0F4A   convertRawToMilliAmps@returnValuemA 007A  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00E6                              ___lldiv 0EEF  
             ?_convertRawToMilliAmps 0076                         ?i1_writeGPIO 0070  
               ?_readFilteredFreqPot 007A                              __ptext1 0B9D  
                            __ptext2 0B86                              __ptext3 0B96  
                            __ptext4 0BA4                              __ptext5 0C15  
                            __ptext6 04EE                              __ptext7 0DF3  
                            __ptext8 0BBE                              __ptext9 0C6D  
               ?_readFilteredDutyPot 007A         __end_of_initialiseController 0C4E  
                          _T2CONbits 001C                    ?_readFilteredVout 007A  
                            _setDuty 0063                i1writeGPIO@writeValue 0070  
             ?_runVoltageModeControl 0070                              _tripIDS 006B  
                 ??_readFilteredVout 0020                         ??i1_readGPIO 0070  
                            clrloop0 0B91                 end_of_initialization 00B0  
    convertRawToMilliVolts@offsetted 0029                           ??_readGPIO 00E2  
                     ___omul@product 0071             ?_setupInternalOscillator 0070  
                    ___lldiv@divisor 0076                      ___lldiv@counter 0025  
                   _currentTripCount 0069                           ??_setupPWM 00E8  
                   _currentTripReset 0BD3           ??_initialisePotentiometers 00E8  
                         _prevPeriod 006D                    writeGPIO@portType 00E5  
                     _readFilteredIL 0E3D                   __end_ofi1_readGPIO 0DF3  
              ??_readFilteredFreqPot 0020                ??_readFilteredDutyPot 0020  
               i1readGPIO@portNumber 0076                     ?_currentTripRead 0070  
                  __end_of_writeGPIO 06FA            ??_transToOverCurrentFault 0070  
           initialiseGPIO@portNumber 00E7                         _filteredVout 005D  
        ??_transToCurrentModeControl 00E2                          ?_readADCRaw 0070  
                  _transToPotControl 0B86                          _CCP1CONbits 0293  
                      readGPIO@readA 00E4                        readGPIO@readB 00E6  
              __end_of_runPotScaling 04EE                   ?_transToPotControl 0070  
          ?_initialiseCurrentSensors 0070        __end_of_runCurrentModeControl 0BB5  
               _voltageModeVariables 00C6               __end_of_readFilteredIL 0E95  
                ??_transToPotControl 00E2                       __end_of___lmul 0D3C  
        __end_of_initialiseADCModule 0B90                       __end_of___omul 0800  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0C6D  
              controlRoutine@minDuty 005A                       _clockFrequency 0160  
                start_initialization 0088         __end_of_setupTimer0Interrupt 0BAC  
                     _currentIDSFIFO 0140                          __end_of_abs 0C15  
                          _Tick490Hz 0004               _convertRawToMilliVolts 0D71  
          __end_of_transToPotControl 0B8A     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0BBE           __end_of_currentTripMonitor 0CB1  
               _initialiseController 0C31                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0B96                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00E2  
                         ?_Tick490Hz 0070                     _initialiseADCPin 0634  
                       _currentState 006C                   i1_currentTripReset 0BC7  
                 readGPIO@gpioNumber 00EA                ?_initialiseController 0070  
                     _initialiseGPIO 05BE              ??_convertRawToMilliAmps 0078  
                    i1readGPIO@readA 0072                      i1readGPIO@readB 0074  
   __end_of_initialisePotentiometers 0BC7                  ?i1_currentTripReset 0070  
                           ?___lldiv 0076           ?_transToVoltageModeControl 0070  
    runVoltageModeControl@newVoltage 0050        runVoltageModeControl@propMult 0048  
            ??_runVoltageModeControl 0030                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0BE1      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 0634  
                          clear_ram0 0B90                            _setPeriod 006E  
                           _PIE1bits 0091         setPWMDutyandPeriod@dutyCycle 0070  
               _setupTimer0Interrupt 0BA4    runVoltageModeControl@integralMult 0040  
                _currentTripRead$930 007A                          _filteredIDS 0168  
                         _ADCON0bits 009D                    ___wmul@multiplier 0070  
                 readGPIO@portNumber 00E8                          _freqPotFIFO 01A0  
                          _writeGPIO 069A                          ??_Tick490Hz 005C  
                  ___lmul@multiplier 0070                         ??_readADCRaw 0072  
             ??_initialiseController 00E8                      ?_initialiseGPIO 00E2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
               _currentModeVariables 00A0                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 1000          __end_of_readFilteredDutyPot 0FA5  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
                writeGPIO@gpioNumber 00E6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0EEF             readFilteredFreqPot@i_754 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00E2  
                           __ptext10 0BD3                             __ptext11 069A  
                           __ptext20 0E3D                             __ptext12 0C31  
                           __ptext21 0FA5                             __ptext13 05BE  
                           __ptext30 00B4                             __ptext22 0F4A  
                           __ptext14 0634                             __ptext31 0DAC  
                           __ptext23 0E95                             __ptext15 0B8A  
                           __ptext32 0D71                             __ptext24 0C8D  
                           __ptext33 0D09                             __ptext25 0BC7  
                           __ptext17 0CB1                             __ptext34 0BFB  
                           __ptext26 06FA                             __ptext18 040F  
                           __ptext35 07B4                             __ptext27 0BB5  
                           __ptext19 0759                             __ptext36 0BAC  
                           __ptext28 0CDC                             __ptext37 0BE1  
                           __ptext29 0315                             __ptext38 0C4E  
                           __ptext39 0EEF            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0DF3  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00C4                             _setupPWM 0C15  
              _runCurrentModeControl 0BAC                             int$flags 007E  
                           _slotTest 0065             __end_of_initialiseADCPin 069A  
                           main@argc 00EB             ?_transToOverCurrentFault 0070  
                           main@argv 00ED                             _voutFIFO 01C0  
    readFilteredFreqPot@sumOfSamples 0024                   _currentTripMonitor 0C8D  
                   _timerSlotQuarter 0066       __end_of_convertRawToMilliVolts 0DAC  
                         _INTCONbits 000B                  ?_currentTripMonitor 0070  
  __end_of_transToCurrentModeControl 0B9D                  writeGPIO@portNumber 00E7  
                           intlevel1 0000             _initialiseCurrentSensors 0C6D  
                   ___lldiv@dividend 007A               i1readGPIO@returnValueA 0073  
             i1readGPIO@returnValueB 0075                     _readFilteredVout 0759  
             ??_setupTimer0Interrupt 00E2                           _OSCCONbits 0099  
               ??_currentTripMonitor 007B                          _potSetCount 0068  
                _setPWMDutyandPeriod 0CB1        __end_of_convertRawToMilliAmps 0BFB  
            _setupInternalOscillator 04EE          ??_transToVoltageModeControl 00E2  
                      ??i1_writeGPIO 0071                        __pstringtext1 0800  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 0315  
                writeGPIO@writeValue 00E2                          ??_writeGPIO 00E3  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00E8                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 040F  
               readGPIO@returnValueA 00E5                 readGPIO@returnValueB 00E7  
                readFilteredIL@i_938 007A               ?_runCurrentModeControl 0070  
                    readFilteredIL@i 007B  
