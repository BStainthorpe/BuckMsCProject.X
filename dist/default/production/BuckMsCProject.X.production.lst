

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Aug 07 17:37:19 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC16F1827 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0097                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  0111                     	;# 
   144  0112                     	;# 
   145  0113                     	;# 
   146  0114                     	;# 
   147  0115                     	;# 
   148  0116                     	;# 
   149  0117                     	;# 
   150  0118                     	;# 
   151  0119                     	;# 
   152  011A                     	;# 
   153  011B                     	;# 
   154  011D                     	;# 
   155  011E                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  019F                     	;# 
   178  020C                     	;# 
   179  020D                     	;# 
   180  0211                     	;# 
   181  0211                     	;# 
   182  0212                     	;# 
   183  0212                     	;# 
   184  0213                     	;# 
   185  0213                     	;# 
   186  0214                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0216                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0217                     	;# 
   195  0219                     	;# 
   196  021A                     	;# 
   197  021B                     	;# 
   198  021C                     	;# 
   199  021D                     	;# 
   200  021E                     	;# 
   201  021F                     	;# 
   202  0291                     	;# 
   203  0291                     	;# 
   204  0292                     	;# 
   205  0293                     	;# 
   206  0294                     	;# 
   207  0295                     	;# 
   208  0295                     	;# 
   209  0296                     	;# 
   210  0298                     	;# 
   211  0298                     	;# 
   212  0299                     	;# 
   213  029A                     	;# 
   214  029B                     	;# 
   215  029C                     	;# 
   216  029C                     	;# 
   217  029D                     	;# 
   218  029E                     	;# 
   219  029E                     	;# 
   220  0311                     	;# 
   221  0311                     	;# 
   222  0312                     	;# 
   223  0313                     	;# 
   224  0318                     	;# 
   225  0318                     	;# 
   226  0319                     	;# 
   227  031A                     	;# 
   228  0394                     	;# 
   229  0395                     	;# 
   230  0396                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0415                     	;# 
   237  0416                     	;# 
   238  0417                     	;# 
   239  041C                     	;# 
   240  041D                     	;# 
   241  041E                     	;# 
   242  0FE4                     	;# 
   243  0FE5                     	;# 
   244  0FE6                     	;# 
   245  0FE7                     	;# 
   246  0FE8                     	;# 
   247  0FE9                     	;# 
   248  0FEA                     	;# 
   249  0FEB                     	;# 
   250  0FED                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0014                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001C                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  0091                     	;# 
   285  0092                     	;# 
   286  0093                     	;# 
   287  0094                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  0111                     	;# 
   302  0112                     	;# 
   303  0113                     	;# 
   304  0114                     	;# 
   305  0115                     	;# 
   306  0116                     	;# 
   307  0117                     	;# 
   308  0118                     	;# 
   309  0119                     	;# 
   310  011A                     	;# 
   311  011B                     	;# 
   312  011D                     	;# 
   313  011E                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020C                     	;# 
   337  020D                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0219                     	;# 
   354  021A                     	;# 
   355  021B                     	;# 
   356  021C                     	;# 
   357  021D                     	;# 
   358  021E                     	;# 
   359  021F                     	;# 
   360  0291                     	;# 
   361  0291                     	;# 
   362  0292                     	;# 
   363  0293                     	;# 
   364  0294                     	;# 
   365  0295                     	;# 
   366  0295                     	;# 
   367  0296                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  029B                     	;# 
   373  029C                     	;# 
   374  029C                     	;# 
   375  029D                     	;# 
   376  029E                     	;# 
   377  029E                     	;# 
   378  0311                     	;# 
   379  0311                     	;# 
   380  0312                     	;# 
   381  0313                     	;# 
   382  0318                     	;# 
   383  0318                     	;# 
   384  0319                     	;# 
   385  031A                     	;# 
   386  0394                     	;# 
   387  0395                     	;# 
   388  0396                     	;# 
   389  039A                     	;# 
   390  039C                     	;# 
   391  039D                     	;# 
   392  039E                     	;# 
   393  039F                     	;# 
   394  0415                     	;# 
   395  0416                     	;# 
   396  0417                     	;# 
   397  041C                     	;# 
   398  041D                     	;# 
   399  041E                     	;# 
   400  0FE4                     	;# 
   401  0FE5                     	;# 
   402  0FE6                     	;# 
   403  0FE7                     	;# 
   404  0FE8                     	;# 
   405  0FE9                     	;# 
   406  0FEA                     	;# 
   407  0FEB                     	;# 
   408  0FED                     	;# 
   409  0FEE                     	;# 
   410  0FEF                     	;# 
   411  0000                     	;# 
   412  0001                     	;# 
   413  0002                     	;# 
   414  0003                     	;# 
   415  0004                     	;# 
   416  0005                     	;# 
   417  0006                     	;# 
   418  0007                     	;# 
   419  0008                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000D                     	;# 
   425  0011                     	;# 
   426  0012                     	;# 
   427  0013                     	;# 
   428  0014                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0094                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  0111                     	;# 
   460  0112                     	;# 
   461  0113                     	;# 
   462  0114                     	;# 
   463  0115                     	;# 
   464  0116                     	;# 
   465  0117                     	;# 
   466  0118                     	;# 
   467  0119                     	;# 
   468  011A                     	;# 
   469  011B                     	;# 
   470  011D                     	;# 
   471  011E                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  0191                     	;# 
   475  0191                     	;# 
   476  0192                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0199                     	;# 
   484  019A                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019C                     	;# 
   491  019D                     	;# 
   492  019E                     	;# 
   493  019F                     	;# 
   494  020C                     	;# 
   495  020D                     	;# 
   496  0211                     	;# 
   497  0211                     	;# 
   498  0212                     	;# 
   499  0212                     	;# 
   500  0213                     	;# 
   501  0213                     	;# 
   502  0214                     	;# 
   503  0214                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0216                     	;# 
   508  0216                     	;# 
   509  0217                     	;# 
   510  0217                     	;# 
   511  0219                     	;# 
   512  021A                     	;# 
   513  021B                     	;# 
   514  021C                     	;# 
   515  021D                     	;# 
   516  021E                     	;# 
   517  021F                     	;# 
   518  0291                     	;# 
   519  0291                     	;# 
   520  0292                     	;# 
   521  0293                     	;# 
   522  0294                     	;# 
   523  0295                     	;# 
   524  0295                     	;# 
   525  0296                     	;# 
   526  0298                     	;# 
   527  0298                     	;# 
   528  0299                     	;# 
   529  029A                     	;# 
   530  029B                     	;# 
   531  029C                     	;# 
   532  029C                     	;# 
   533  029D                     	;# 
   534  029E                     	;# 
   535  029E                     	;# 
   536  0311                     	;# 
   537  0311                     	;# 
   538  0312                     	;# 
   539  0313                     	;# 
   540  0318                     	;# 
   541  0318                     	;# 
   542  0319                     	;# 
   543  031A                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0415                     	;# 
   553  0416                     	;# 
   554  0417                     	;# 
   555  041C                     	;# 
   556  041D                     	;# 
   557  041E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  0111                     	;# 
   618  0112                     	;# 
   619  0113                     	;# 
   620  0114                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  0118                     	;# 
   625  0119                     	;# 
   626  011A                     	;# 
   627  011B                     	;# 
   628  011D                     	;# 
   629  011E                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0219                     	;# 
   670  021A                     	;# 
   671  021B                     	;# 
   672  021C                     	;# 
   673  021D                     	;# 
   674  021E                     	;# 
   675  021F                     	;# 
   676  0291                     	;# 
   677  0291                     	;# 
   678  0292                     	;# 
   679  0293                     	;# 
   680  0294                     	;# 
   681  0295                     	;# 
   682  0295                     	;# 
   683  0296                     	;# 
   684  0298                     	;# 
   685  0298                     	;# 
   686  0299                     	;# 
   687  029A                     	;# 
   688  029B                     	;# 
   689  029C                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  029E                     	;# 
   694  0311                     	;# 
   695  0311                     	;# 
   696  0312                     	;# 
   697  0313                     	;# 
   698  0318                     	;# 
   699  0318                     	;# 
   700  0319                     	;# 
   701  031A                     	;# 
   702  0394                     	;# 
   703  0395                     	;# 
   704  0396                     	;# 
   705  039A                     	;# 
   706  039C                     	;# 
   707  039D                     	;# 
   708  039E                     	;# 
   709  039F                     	;# 
   710  0415                     	;# 
   711  0416                     	;# 
   712  0417                     	;# 
   713  041C                     	;# 
   714  041D                     	;# 
   715  041E                     	;# 
   716  0FE4                     	;# 
   717  0FE5                     	;# 
   718  0FE6                     	;# 
   719  0FE7                     	;# 
   720  0FE8                     	;# 
   721  0FE9                     	;# 
   722  0FEA                     	;# 
   723  0FEB                     	;# 
   724  0FED                     	;# 
   725  0FEE                     	;# 
   726  0FEF                     	;# 
   727  0000                     	;# 
   728  0001                     	;# 
   729  0002                     	;# 
   730  0003                     	;# 
   731  0004                     	;# 
   732  0005                     	;# 
   733  0006                     	;# 
   734  0007                     	;# 
   735  0008                     	;# 
   736  0009                     	;# 
   737  000A                     	;# 
   738  000B                     	;# 
   739  000C                     	;# 
   740  000D                     	;# 
   741  0011                     	;# 
   742  0012                     	;# 
   743  0013                     	;# 
   744  0014                     	;# 
   745  0015                     	;# 
   746  0016                     	;# 
   747  0016                     	;# 
   748  0017                     	;# 
   749  0018                     	;# 
   750  0019                     	;# 
   751  001A                     	;# 
   752  001B                     	;# 
   753  001C                     	;# 
   754  001E                     	;# 
   755  001F                     	;# 
   756  008C                     	;# 
   757  008D                     	;# 
   758  0091                     	;# 
   759  0092                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  0111                     	;# 
   776  0112                     	;# 
   777  0113                     	;# 
   778  0114                     	;# 
   779  0115                     	;# 
   780  0116                     	;# 
   781  0117                     	;# 
   782  0118                     	;# 
   783  0119                     	;# 
   784  011A                     	;# 
   785  011B                     	;# 
   786  011D                     	;# 
   787  011E                     	;# 
   788  018C                     	;# 
   789  018D                     	;# 
   790  0191                     	;# 
   791  0191                     	;# 
   792  0192                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0194                     	;# 
   797  0195                     	;# 
   798  0196                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020D                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0219                     	;# 
   828  021A                     	;# 
   829  021B                     	;# 
   830  021C                     	;# 
   831  021D                     	;# 
   832  021E                     	;# 
   833  021F                     	;# 
   834  0291                     	;# 
   835  0291                     	;# 
   836  0292                     	;# 
   837  0293                     	;# 
   838  0294                     	;# 
   839  0295                     	;# 
   840  0295                     	;# 
   841  0296                     	;# 
   842  0298                     	;# 
   843  0298                     	;# 
   844  0299                     	;# 
   845  029A                     	;# 
   846  029B                     	;# 
   847  029C                     	;# 
   848  029C                     	;# 
   849  029D                     	;# 
   850  029E                     	;# 
   851  029E                     	;# 
   852  0311                     	;# 
   853  0311                     	;# 
   854  0312                     	;# 
   855  0313                     	;# 
   856  0318                     	;# 
   857  0318                     	;# 
   858  0319                     	;# 
   859  031A                     	;# 
   860  0394                     	;# 
   861  0395                     	;# 
   862  0396                     	;# 
   863  039A                     	;# 
   864  039C                     	;# 
   865  039D                     	;# 
   866  039E                     	;# 
   867  039F                     	;# 
   868  0415                     	;# 
   869  0416                     	;# 
   870  0417                     	;# 
   871  041C                     	;# 
   872  041D                     	;# 
   873  041E                     	;# 
   874  0FE4                     	;# 
   875  0FE5                     	;# 
   876  0FE6                     	;# 
   877  0FE7                     	;# 
   878  0FE8                     	;# 
   879  0FE9                     	;# 
   880  0FEA                     	;# 
   881  0FEB                     	;# 
   882  0FED                     	;# 
   883  0FEE                     	;# 
   884  0FEF                     	;# 
   885  0000                     	;# 
   886  0001                     	;# 
   887  0002                     	;# 
   888  0003                     	;# 
   889  0004                     	;# 
   890  0005                     	;# 
   891  0006                     	;# 
   892  0007                     	;# 
   893  0008                     	;# 
   894  0009                     	;# 
   895  000A                     	;# 
   896  000B                     	;# 
   897  000C                     	;# 
   898  000D                     	;# 
   899  0011                     	;# 
   900  0012                     	;# 
   901  0013                     	;# 
   902  0014                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0016                     	;# 
   906  0017                     	;# 
   907  0018                     	;# 
   908  0019                     	;# 
   909  001A                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001E                     	;# 
   913  001F                     	;# 
   914  008C                     	;# 
   915  008D                     	;# 
   916  0091                     	;# 
   917  0092                     	;# 
   918  0093                     	;# 
   919  0094                     	;# 
   920  0095                     	;# 
   921  0096                     	;# 
   922  0097                     	;# 
   923  0098                     	;# 
   924  0099                     	;# 
   925  009A                     	;# 
   926  009B                     	;# 
   927  009B                     	;# 
   928  009C                     	;# 
   929  009D                     	;# 
   930  009E                     	;# 
   931  010C                     	;# 
   932  010D                     	;# 
   933  0111                     	;# 
   934  0112                     	;# 
   935  0113                     	;# 
   936  0114                     	;# 
   937  0115                     	;# 
   938  0116                     	;# 
   939  0117                     	;# 
   940  0118                     	;# 
   941  0119                     	;# 
   942  011A                     	;# 
   943  011B                     	;# 
   944  011D                     	;# 
   945  011E                     	;# 
   946  018C                     	;# 
   947  018D                     	;# 
   948  0191                     	;# 
   949  0191                     	;# 
   950  0192                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0193                     	;# 
   954  0194                     	;# 
   955  0195                     	;# 
   956  0196                     	;# 
   957  0199                     	;# 
   958  019A                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019C                     	;# 
   964  019C                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  020C                     	;# 
   969  020D                     	;# 
   970  0211                     	;# 
   971  0211                     	;# 
   972  0212                     	;# 
   973  0212                     	;# 
   974  0213                     	;# 
   975  0213                     	;# 
   976  0214                     	;# 
   977  0214                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0216                     	;# 
   982  0216                     	;# 
   983  0217                     	;# 
   984  0217                     	;# 
   985  0219                     	;# 
   986  021A                     	;# 
   987  021B                     	;# 
   988  021C                     	;# 
   989  021D                     	;# 
   990  021E                     	;# 
   991  021F                     	;# 
   992  0291                     	;# 
   993  0291                     	;# 
   994  0292                     	;# 
   995  0293                     	;# 
   996  0294                     	;# 
   997  0295                     	;# 
   998  0295                     	;# 
   999  0296                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029B                     	;# 
  1005  029C                     	;# 
  1006  029C                     	;# 
  1007  029D                     	;# 
  1008  029E                     	;# 
  1009  029E                     	;# 
  1010  0311                     	;# 
  1011  0311                     	;# 
  1012  0312                     	;# 
  1013  0313                     	;# 
  1014  0318                     	;# 
  1015  0318                     	;# 
  1016  0319                     	;# 
  1017  031A                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  039A                     	;# 
  1022  039C                     	;# 
  1023  039D                     	;# 
  1024  039E                     	;# 
  1025  039F                     	;# 
  1026  0415                     	;# 
  1027  0416                     	;# 
  1028  0417                     	;# 
  1029  041C                     	;# 
  1030  041D                     	;# 
  1031  041E                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0013                     	;# 
  1060  0014                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  001E                     	;# 
  1071  001F                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0094                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0098                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  0111                     	;# 
  1092  0112                     	;# 
  1093  0113                     	;# 
  1094  0114                     	;# 
  1095  0115                     	;# 
  1096  0116                     	;# 
  1097  0117                     	;# 
  1098  0118                     	;# 
  1099  0119                     	;# 
  1100  011A                     	;# 
  1101  011B                     	;# 
  1102  011D                     	;# 
  1103  011E                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020C                     	;# 
  1127  020D                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0219                     	;# 
  1144  021A                     	;# 
  1145  021B                     	;# 
  1146  021C                     	;# 
  1147  021D                     	;# 
  1148  021E                     	;# 
  1149  021F                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0294                     	;# 
  1155  0295                     	;# 
  1156  0295                     	;# 
  1157  0296                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  029B                     	;# 
  1163  029C                     	;# 
  1164  029C                     	;# 
  1165  029D                     	;# 
  1166  029E                     	;# 
  1167  029E                     	;# 
  1168  0311                     	;# 
  1169  0311                     	;# 
  1170  0312                     	;# 
  1171  0313                     	;# 
  1172  0318                     	;# 
  1173  0318                     	;# 
  1174  0319                     	;# 
  1175  031A                     	;# 
  1176  0394                     	;# 
  1177  0395                     	;# 
  1178  0396                     	;# 
  1179  039A                     	;# 
  1180  039C                     	;# 
  1181  039D                     	;# 
  1182  039E                     	;# 
  1183  039F                     	;# 
  1184  0415                     	;# 
  1185  0416                     	;# 
  1186  0417                     	;# 
  1187  041C                     	;# 
  1188  041D                     	;# 
  1189  041E                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  0011                     	;# 
  1216  0012                     	;# 
  1217  0013                     	;# 
  1218  0014                     	;# 
  1219  0015                     	;# 
  1220  0016                     	;# 
  1221  0016                     	;# 
  1222  0017                     	;# 
  1223  0018                     	;# 
  1224  0019                     	;# 
  1225  001A                     	;# 
  1226  001B                     	;# 
  1227  001C                     	;# 
  1228  001E                     	;# 
  1229  001F                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  0091                     	;# 
  1233  0092                     	;# 
  1234  0093                     	;# 
  1235  0094                     	;# 
  1236  0095                     	;# 
  1237  0096                     	;# 
  1238  0097                     	;# 
  1239  0098                     	;# 
  1240  0099                     	;# 
  1241  009A                     	;# 
  1242  009B                     	;# 
  1243  009B                     	;# 
  1244  009C                     	;# 
  1245  009D                     	;# 
  1246  009E                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  0111                     	;# 
  1250  0112                     	;# 
  1251  0113                     	;# 
  1252  0114                     	;# 
  1253  0115                     	;# 
  1254  0116                     	;# 
  1255  0117                     	;# 
  1256  0118                     	;# 
  1257  0119                     	;# 
  1258  011A                     	;# 
  1259  011B                     	;# 
  1260  011D                     	;# 
  1261  011E                     	;# 
  1262  018C                     	;# 
  1263  018D                     	;# 
  1264  0191                     	;# 
  1265  0191                     	;# 
  1266  0192                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0199                     	;# 
  1274  019A                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019C                     	;# 
  1280  019C                     	;# 
  1281  019D                     	;# 
  1282  019E                     	;# 
  1283  019F                     	;# 
  1284  020C                     	;# 
  1285  020D                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  0212                     	;# 
  1289  0212                     	;# 
  1290  0213                     	;# 
  1291  0213                     	;# 
  1292  0214                     	;# 
  1293  0214                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0215                     	;# 
  1297  0216                     	;# 
  1298  0216                     	;# 
  1299  0217                     	;# 
  1300  0217                     	;# 
  1301  0219                     	;# 
  1302  021A                     	;# 
  1303  021B                     	;# 
  1304  021C                     	;# 
  1305  021D                     	;# 
  1306  021E                     	;# 
  1307  021F                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0298                     	;# 
  1317  0298                     	;# 
  1318  0299                     	;# 
  1319  029A                     	;# 
  1320  029B                     	;# 
  1321  029C                     	;# 
  1322  029C                     	;# 
  1323  029D                     	;# 
  1324  029E                     	;# 
  1325  029E                     	;# 
  1326  0311                     	;# 
  1327  0311                     	;# 
  1328  0312                     	;# 
  1329  0313                     	;# 
  1330  0318                     	;# 
  1331  0318                     	;# 
  1332  0319                     	;# 
  1333  031A                     	;# 
  1334  0394                     	;# 
  1335  0395                     	;# 
  1336  0396                     	;# 
  1337  039A                     	;# 
  1338  039C                     	;# 
  1339  039D                     	;# 
  1340  039E                     	;# 
  1341  039F                     	;# 
  1342  0415                     	;# 
  1343  0416                     	;# 
  1344  0417                     	;# 
  1345  041C                     	;# 
  1346  041D                     	;# 
  1347  041E                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0013                     	;# 
  1376  0014                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  001E                     	;# 
  1387  001F                     	;# 
  1388  008C                     	;# 
  1389  008D                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0093                     	;# 
  1393  0094                     	;# 
  1394  0095                     	;# 
  1395  0096                     	;# 
  1396  0097                     	;# 
  1397  0098                     	;# 
  1398  0099                     	;# 
  1399  009A                     	;# 
  1400  009B                     	;# 
  1401  009B                     	;# 
  1402  009C                     	;# 
  1403  009D                     	;# 
  1404  009E                     	;# 
  1405  010C                     	;# 
  1406  010D                     	;# 
  1407  0111                     	;# 
  1408  0112                     	;# 
  1409  0113                     	;# 
  1410  0114                     	;# 
  1411  0115                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  0118                     	;# 
  1415  0119                     	;# 
  1416  011A                     	;# 
  1417  011B                     	;# 
  1418  011D                     	;# 
  1419  011E                     	;# 
  1420  018C                     	;# 
  1421  018D                     	;# 
  1422  0191                     	;# 
  1423  0191                     	;# 
  1424  0192                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0193                     	;# 
  1428  0194                     	;# 
  1429  0195                     	;# 
  1430  0196                     	;# 
  1431  0199                     	;# 
  1432  019A                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019C                     	;# 
  1438  019C                     	;# 
  1439  019D                     	;# 
  1440  019E                     	;# 
  1441  019F                     	;# 
  1442  020C                     	;# 
  1443  020D                     	;# 
  1444  0211                     	;# 
  1445  0211                     	;# 
  1446  0212                     	;# 
  1447  0212                     	;# 
  1448  0213                     	;# 
  1449  0213                     	;# 
  1450  0214                     	;# 
  1451  0214                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0216                     	;# 
  1456  0216                     	;# 
  1457  0217                     	;# 
  1458  0217                     	;# 
  1459  0219                     	;# 
  1460  021A                     	;# 
  1461  021B                     	;# 
  1462  021C                     	;# 
  1463  021D                     	;# 
  1464  021E                     	;# 
  1465  021F                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0294                     	;# 
  1471  0295                     	;# 
  1472  0295                     	;# 
  1473  0296                     	;# 
  1474  0298                     	;# 
  1475  0298                     	;# 
  1476  0299                     	;# 
  1477  029A                     	;# 
  1478  029B                     	;# 
  1479  029C                     	;# 
  1480  029C                     	;# 
  1481  029D                     	;# 
  1482  029E                     	;# 
  1483  029E                     	;# 
  1484  0311                     	;# 
  1485  0311                     	;# 
  1486  0312                     	;# 
  1487  0313                     	;# 
  1488  0318                     	;# 
  1489  0318                     	;# 
  1490  0319                     	;# 
  1491  031A                     	;# 
  1492  0394                     	;# 
  1493  0395                     	;# 
  1494  0396                     	;# 
  1495  039A                     	;# 
  1496  039C                     	;# 
  1497  039D                     	;# 
  1498  039E                     	;# 
  1499  039F                     	;# 
  1500  0415                     	;# 
  1501  0416                     	;# 
  1502  0417                     	;# 
  1503  041C                     	;# 
  1504  041D                     	;# 
  1505  041E                     	;# 
  1506  0FE4                     	;# 
  1507  0FE5                     	;# 
  1508  0FE6                     	;# 
  1509  0FE7                     	;# 
  1510  0FE8                     	;# 
  1511  0FE9                     	;# 
  1512  0FEA                     	;# 
  1513  0FEB                     	;# 
  1514  0FED                     	;# 
  1515  0FEE                     	;# 
  1516  0FEF                     	;# 
  1517  0000                     	;# 
  1518  0001                     	;# 
  1519  0002                     	;# 
  1520  0003                     	;# 
  1521  0004                     	;# 
  1522  0005                     	;# 
  1523  0006                     	;# 
  1524  0007                     	;# 
  1525  0008                     	;# 
  1526  0009                     	;# 
  1527  000A                     	;# 
  1528  000B                     	;# 
  1529  000C                     	;# 
  1530  000D                     	;# 
  1531  0011                     	;# 
  1532  0012                     	;# 
  1533  0013                     	;# 
  1534  0014                     	;# 
  1535  0015                     	;# 
  1536  0016                     	;# 
  1537  0016                     	;# 
  1538  0017                     	;# 
  1539  0018                     	;# 
  1540  0019                     	;# 
  1541  001A                     	;# 
  1542  001B                     	;# 
  1543  001C                     	;# 
  1544  001E                     	;# 
  1545  001F                     	;# 
  1546  008C                     	;# 
  1547  008D                     	;# 
  1548  0091                     	;# 
  1549  0092                     	;# 
  1550  0093                     	;# 
  1551  0094                     	;# 
  1552  0095                     	;# 
  1553  0096                     	;# 
  1554  0097                     	;# 
  1555  0098                     	;# 
  1556  0099                     	;# 
  1557  009A                     	;# 
  1558  009B                     	;# 
  1559  009B                     	;# 
  1560  009C                     	;# 
  1561  009D                     	;# 
  1562  009E                     	;# 
  1563  010C                     	;# 
  1564  010D                     	;# 
  1565  0111                     	;# 
  1566  0112                     	;# 
  1567  0113                     	;# 
  1568  0114                     	;# 
  1569  0115                     	;# 
  1570  0116                     	;# 
  1571  0117                     	;# 
  1572  0118                     	;# 
  1573  0119                     	;# 
  1574  011A                     	;# 
  1575  011B                     	;# 
  1576  011D                     	;# 
  1577  011E                     	;# 
  1578  018C                     	;# 
  1579  018D                     	;# 
  1580  0191                     	;# 
  1581  0191                     	;# 
  1582  0192                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0193                     	;# 
  1586  0194                     	;# 
  1587  0195                     	;# 
  1588  0196                     	;# 
  1589  0199                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019C                     	;# 
  1596  019C                     	;# 
  1597  019D                     	;# 
  1598  019E                     	;# 
  1599  019F                     	;# 
  1600  020C                     	;# 
  1601  020D                     	;# 
  1602  0211                     	;# 
  1603  0211                     	;# 
  1604  0212                     	;# 
  1605  0212                     	;# 
  1606  0213                     	;# 
  1607  0213                     	;# 
  1608  0214                     	;# 
  1609  0214                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0216                     	;# 
  1614  0216                     	;# 
  1615  0217                     	;# 
  1616  0217                     	;# 
  1617  0219                     	;# 
  1618  021A                     	;# 
  1619  021B                     	;# 
  1620  021C                     	;# 
  1621  021D                     	;# 
  1622  021E                     	;# 
  1623  021F                     	;# 
  1624  0291                     	;# 
  1625  0291                     	;# 
  1626  0292                     	;# 
  1627  0293                     	;# 
  1628  0294                     	;# 
  1629  0295                     	;# 
  1630  0295                     	;# 
  1631  0296                     	;# 
  1632  0298                     	;# 
  1633  0298                     	;# 
  1634  0299                     	;# 
  1635  029A                     	;# 
  1636  029B                     	;# 
  1637  029C                     	;# 
  1638  029C                     	;# 
  1639  029D                     	;# 
  1640  029E                     	;# 
  1641  029E                     	;# 
  1642  0311                     	;# 
  1643  0311                     	;# 
  1644  0312                     	;# 
  1645  0313                     	;# 
  1646  0318                     	;# 
  1647  0318                     	;# 
  1648  0319                     	;# 
  1649  031A                     	;# 
  1650  0394                     	;# 
  1651  0395                     	;# 
  1652  0396                     	;# 
  1653  039A                     	;# 
  1654  039C                     	;# 
  1655  039D                     	;# 
  1656  039E                     	;# 
  1657  039F                     	;# 
  1658  0415                     	;# 
  1659  0416                     	;# 
  1660  0417                     	;# 
  1661  041C                     	;# 
  1662  041D                     	;# 
  1663  041E                     	;# 
  1664  0FE4                     	;# 
  1665  0FE5                     	;# 
  1666  0FE6                     	;# 
  1667  0FE7                     	;# 
  1668  0FE8                     	;# 
  1669  0FE9                     	;# 
  1670  0FEA                     	;# 
  1671  0FEB                     	;# 
  1672  0FED                     	;# 
  1673  0FEE                     	;# 
  1674  0FEF                     	;# 
  1675  000D                     _PORTB	set	13
  1676  000C                     _PORTA	set	12
  1677  001C                     _T2CONbits	set	28
  1678  001B                     _PR2	set	27
  1679  000B                     _INTCONbits	set	11
  1680  009B                     _ADRESL	set	155
  1681  009C                     _ADRESH	set	156
  1682  009D                     _ADCON0bits	set	157
  1683  008D                     _TRISB	set	141
  1684  008C                     _TRISA	set	140
  1685  009E                     _ADCON1	set	158
  1686  009D                     _ADCON0	set	157
  1687  0095                     _OPTION_REG	set	149
  1688  0095                     _OPTION_REGbits	set	149
  1689  0091                     _PIE1bits	set	145
  1690  0099                     _OSCCONbits	set	153
  1691  010D                     _LATB	set	269
  1692  010C                     _LATA	set	268
  1693  011D                     _APFCON0bits	set	285
  1694  018D                     _ANSELB	set	397
  1695  018C                     _ANSELA	set	396
  1696  0293                     _CCP1CONbits	set	659
  1697  0296                     _PSTR1CONbits	set	662
  1698  0291                     _CCPR1L	set	657
  1699  0293                     _CCP1CON	set	659
  1700                           
  1701                           	psect	stringtext1
  1702  07FE                     __pstringtext1:
  1703  07FE                     STR_1:
  1704  07FE  3428               	retlw	40	;'('
  1705  07FF  3428               	retlw	40	;'('
  1706  0800  3449               	retlw	73	;'I'
  1707  0801  344E               	retlw	78	;'N'
  1708  0802  3454               	retlw	84	;'T'
  1709  0803  3443               	retlw	67	;'C'
  1710  0804  344F               	retlw	79	;'O'
  1711  0805  344E               	retlw	78	;'N'
  1712  0806  3429               	retlw	41	;')'
  1713  0807  3426               	retlw	38	;'&'
  1714  0808  3430               	retlw	48	;'0'
  1715  0809  3437               	retlw	55	;'7'
  1716  080A  3446               	retlw	70	;'F'
  1717  080B  3468               	retlw	104	;'h'
  1718  080C  3429               	retlw	41	;')'
  1719  080D  342C               	retlw	44	;','
  1720  080E  3432               	retlw	50	;'2'
  1721  080F  3400               	retlw	0
  1722                           
  1723                           	psect	stringtext2
  1724  0000                     __pstringtext2:
  1725  07FE                     
  1726                           	psect	cinit
  1727  0088                     start_initialization:	
  1728                           ; #config settings
  1729                           
  1730  0088                     __initialization:
  1731                           
  1732                           ; Clear objects allocated to BANK0
  1733  0088  305D               	movlw	low __pbssBANK0
  1734  0089  0084               	movwf	4
  1735  008A  3000               	movlw	high __pbssBANK0
  1736  008B  0085               	movwf	5
  1737  008C  3012               	movlw	18
  1738  008D  318C  2427  3180   	fcall	clear_ram0
  1739                           
  1740                           ; Clear objects allocated to BANK1
  1741  0090  30A0               	movlw	low __pbssBANK1
  1742  0091  0084               	movwf	4
  1743  0092  3000               	movlw	high __pbssBANK1
  1744  0093  0085               	movwf	5
  1745  0094  3042               	movlw	66
  1746  0095  318C  2427  3180   	fcall	clear_ram0
  1747                           
  1748                           ; Clear objects allocated to BANK2
  1749  0098  3020               	movlw	low __pbssBANK2
  1750  0099  0084               	movwf	4
  1751  009A  3001               	movlw	high __pbssBANK2
  1752  009B  0085               	movwf	5
  1753  009C  3042               	movlw	66
  1754  009D  318C  2427  3180   	fcall	clear_ram0
  1755                           
  1756                           ; Clear objects allocated to BANK3
  1757  00A0  30A0               	movlw	low __pbssBANK3
  1758  00A1  0084               	movwf	4
  1759  00A2  3001               	movlw	high __pbssBANK3
  1760  00A3  0085               	movwf	5
  1761  00A4  3040               	movlw	64
  1762  00A5  318C  2427  3180   	fcall	clear_ram0
  1763                           
  1764                           ; Clear objects allocated to BANK4
  1765  00A8  3020               	movlw	low __pbssBANK4
  1766  00A9  0084               	movwf	4
  1767  00AA  3002               	movlw	high __pbssBANK4
  1768  00AB  0085               	movwf	5
  1769  00AC  3020               	movlw	32
  1770  00AD  318C  2427  3180   	fcall	clear_ram0
  1771  00B0                     end_of_initialization:	
  1772                           ;End of C runtime variable initialization code
  1773                           
  1774  00B0                     __end_of__initialization:
  1775  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1776  00B1  0020               	movlb	0
  1777  00B2  318D  2DA6         	ljmp	_main	;jump to C main() function
  1778                           
  1779                           	psect	bssBANK0
  1780  005D                     __pbssBANK0:
  1781  005D                     _filteredVout:
  1782  005D                     	ds	2
  1783  005F                     _filteredIL:
  1784  005F                     	ds	2
  1785  0061                     _latestIL:
  1786  0061                     	ds	2
  1787  0063                     _setDuty:
  1788  0063                     	ds	2
  1789  0065                     _slotTest:
  1790  0065                     	ds	1
  1791  0066                     _timerSlotQuarter:
  1792  0066                     	ds	1
  1793  0067                     _timerSlotHalf:
  1794  0067                     	ds	1
  1795  0068                     _potSetCount:
  1796  0068                     	ds	1
  1797  0069                     _currentTripCount:
  1798  0069                     	ds	1
  1799  006A                     _tripIL:
  1800  006A                     	ds	1
  1801  006B                     _tripIDS:
  1802  006B                     	ds	1
  1803  006C                     _currentState:
  1804  006C                     	ds	1
  1805  006D                     _prevPeriod:
  1806  006D                     	ds	1
  1807  006E                     _setPeriod:
  1808  006E                     	ds	1
  1809                           
  1810                           	psect	bssBANK1
  1811  00A0                     __pbssBANK1:
  1812  00A0                     _currentModeVariables:
  1813  00A0                     	ds	28
  1814  00BC                     _clockFrequency:
  1815  00BC                     	ds	4
  1816  00C0                     _filteredFreqPot:
  1817  00C0                     	ds	2
  1818  00C2                     _filteredIDS:
  1819  00C2                     	ds	2
  1820  00C4                     _prevDuty:
  1821  00C4                     	ds	2
  1822  00C6                     _voltageModeVariables:
  1823  00C6                     	ds	28
  1824                           
  1825                           	psect	bssBANK2
  1826  0120                     __pbssBANK2:
  1827  0120                     _currentILFIFO:
  1828  0120                     	ds	32
  1829  0140                     _currentIDSFIFO:
  1830  0140                     	ds	32
  1831  0160                     _filteredDutyPot:
  1832  0160                     	ds	2
  1833                           
  1834                           	psect	bssBANK3
  1835  01A0                     __pbssBANK3:
  1836  01A0                     _freqPotFIFO:
  1837  01A0                     	ds	32
  1838  01C0                     _voutFIFO:
  1839  01C0                     	ds	32
  1840                           
  1841                           	psect	bssBANK4
  1842  0220                     __pbssBANK4:
  1843  0220                     _dutyPotFIFO:
  1844  0220                     	ds	32
  1845                           
  1846                           	psect	clrtext
  1847  0C27                     clear_ram0:	
  1848                           ;	Called with FSR0 containing the base address, and
  1849                           ;	WREG with the size to clear
  1850                           
  1851  0C27  0064               	clrwdt	;clear the watchdog before getting into this loop
  1852  0C28                     clrloop0:
  1853  0C28  0180               	clrf	0	;clear RAM location pointed to by FSR
  1854  0C29  3101               	addfsr 0,1
  1855  0C2A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1856  0C2B  2C28               	goto	clrloop0	;have we reached the end yet?
  1857  0C2C  3400               	retlw	0	;all done for this memory range, return
  1858                           
  1859                           	psect	cstackBANK1
  1860  00E2                     __pcstackBANK1:
  1861  00E2                     ?_writeGPIO:
  1862  00E2                     ??_setupInternalOscillator:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865  00E2                     ??_setupTimer0Interrupt:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868  00E2                     ??_initialiseADCModule:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  00E2                     ?_initialiseGPIO:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  00E2                     ??_readGPIO:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  00E2                     ??_transToVoltageModeControl:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  00E2                     ??_transToCurrentModeControl:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  00E2                     ??_transToPotControl:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  00E2                     ??_initialiseADCPin:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  00E2                     initialiseGPIO@direction:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  00E2                     writeGPIO@writeValue:	
  1893                           ; 1 bytes @ 0x0
  1894                           
  1895                           
  1896                           ; 1 bytes @ 0x0
  1897  00E2                     	ds	1
  1898  00E3                     ??_writeGPIO:
  1899  00E3                     ??_initialiseGPIO:	
  1900                           ; 1 bytes @ 0x1
  1901                           
  1902                           
  1903                           ; 1 bytes @ 0x1
  1904  00E3                     	ds	1
  1905  00E4                     setupInternalOscillator@selectedFreq:
  1906  00E4                     initialiseADCPin@gpioValid:	
  1907                           ; 1 bytes @ 0x2
  1908                           
  1909  00E4                     readGPIO@readA:	
  1910                           ; 1 bytes @ 0x2
  1911                           
  1912                           
  1913                           ; 1 bytes @ 0x2
  1914  00E4                     	ds	1
  1915  00E5                     initialiseADCPin@portType:
  1916  00E5                     initialiseGPIO@portType:	
  1917                           ; 1 bytes @ 0x3
  1918                           
  1919  00E5                     writeGPIO@portType:	
  1920                           ; 1 bytes @ 0x3
  1921                           
  1922  00E5                     readGPIO@returnValueA:	
  1923                           ; 1 bytes @ 0x3
  1924                           
  1925                           
  1926                           ; 1 bytes @ 0x3
  1927  00E5                     	ds	1
  1928  00E6                     initialiseADCPin@portNumber:
  1929  00E6                     initialiseGPIO@gpioNumber:	
  1930                           ; 1 bytes @ 0x4
  1931                           
  1932  00E6                     writeGPIO@gpioNumber:	
  1933                           ; 1 bytes @ 0x4
  1934                           
  1935  00E6                     readGPIO@readB:	
  1936                           ; 1 bytes @ 0x4
  1937                           
  1938                           
  1939                           ; 1 bytes @ 0x4
  1940  00E6                     	ds	1
  1941  00E7                     initialiseADCPin@gpioNumber:
  1942  00E7                     initialiseGPIO@portNumber:	
  1943                           ; 1 bytes @ 0x5
  1944                           
  1945  00E7                     writeGPIO@portNumber:	
  1946                           ; 1 bytes @ 0x5
  1947                           
  1948  00E7                     readGPIO@returnValueB:	
  1949                           ; 1 bytes @ 0x5
  1950                           
  1951                           
  1952                           ; 1 bytes @ 0x5
  1953  00E7                     	ds	1
  1954  00E8                     ??_setupPWM:
  1955  00E8                     ??_initialiseCurrentSensors:	
  1956                           ; 1 bytes @ 0x6
  1957                           
  1958  00E8                     ??_initialisePotentiometers:	
  1959                           ; 1 bytes @ 0x6
  1960                           
  1961  00E8                     ??_initialiseController:	
  1962                           ; 1 bytes @ 0x6
  1963                           
  1964  00E8                     ??_currentTripReset:	
  1965                           ; 1 bytes @ 0x6
  1966                           
  1967  00E8                     readGPIO@portNumber:	
  1968                           ; 1 bytes @ 0x6
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x6
  1972  00E8                     	ds	1
  1973  00E9                     readGPIO@portType:
  1974                           
  1975                           ; 1 bytes @ 0x7
  1976  00E9                     	ds	1
  1977  00EA                     readGPIO@gpioNumber:
  1978                           
  1979                           ; 1 bytes @ 0x8
  1980  00EA                     	ds	1
  1981  00EB                     ?_main:
  1982  00EB                     main@argc:	
  1983                           ; 2 bytes @ 0x9
  1984                           
  1985                           
  1986                           ; 2 bytes @ 0x9
  1987  00EB                     	ds	2
  1988  00ED                     main@argv:
  1989                           
  1990                           ; 2 bytes @ 0xB
  1991  00ED                     	ds	2
  1992  00EF                     ??_main:
  1993                           
  1994                           	psect	cstackCOMMON
  1995  0070                     __pcstackCOMMON:	
  1996                           ; 1 bytes @ 0xD
  1997                           
  1998  0070                     ?_setPWMDutyandPeriod:
  1999  0070                     ?_controlRoutine:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ?_runPotScaling:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_setupInternalOscillator:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ?_setupPWM:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_setupTimer0Interrupt:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ?_initialiseADCModule:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_initialiseCurrentSensors:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_initialisePotentiometers:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ?_initialiseController:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_readGPIO:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ?_transToVoltageModeControl:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ?_transToCurrentModeControl:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     ?_transToPotControl:	
  2036                           ; 1 bytes @ 0x0
  2037                           
  2038  0070                     ?_runVoltageModeControl:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ?_runCurrentModeControl:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ?_currentTripReset:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047  0070                     ?_transToOverCurrentFault:	
  2048                           ; 1 bytes @ 0x0
  2049                           
  2050  0070                     ??_transToOverCurrentFault:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     ?_Tick490Hz:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ?_initialiseADCPin:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ?_currentTripRead:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ??___omul:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?i1_writeGPIO:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ?i1_readGPIO:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ??i1_readGPIO:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?i1_currentTripReset:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_currentTripMonitor:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_readFilteredIL:	
  2081                           ; 2 bytes @ 0x0
  2082                           
  2083  0070                     ?_abs:	
  2084                           ; 2 bytes @ 0x0
  2085                           
  2086  0070                     ?_readADCRaw:	
  2087                           ; 2 bytes @ 0x0
  2088                           
  2089  0070                     ?___wmul:	
  2090                           ; 2 bytes @ 0x0
  2091                           
  2092  0070                     ?___lmul:	
  2093                           ; 2 bytes @ 0x0
  2094                           
  2095  0070                     i1writeGPIO@writeValue:	
  2096                           ; 4 bytes @ 0x0
  2097                           
  2098  0070                     setPWMDutyandPeriod@dutyCycle:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ___wmul@multiplier:	
  2102                           ; 2 bytes @ 0x0
  2103                           
  2104  0070                     abs@a:	
  2105                           ; 2 bytes @ 0x0
  2106                           
  2107  0070                     ___lmul@multiplier:	
  2108                           ; 2 bytes @ 0x0
  2109                           
  2110                           
  2111                           ; 4 bytes @ 0x0
  2112  0070                     	ds	1
  2113  0071                     ??i1_writeGPIO:
  2114  0071                     ___omul@product:	
  2115                           ; 1 bytes @ 0x1
  2116                           
  2117                           
  2118                           ; 8 bytes @ 0x1
  2119  0071                     	ds	1
  2120  0072                     ??_readFilteredIL:
  2121  0072                     ??_abs:	
  2122                           ; 1 bytes @ 0x2
  2123                           
  2124  0072                     ??_readADCRaw:	
  2125                           ; 1 bytes @ 0x2
  2126                           
  2127  0072                     setPWMDutyandPeriod@period:	
  2128                           ; 1 bytes @ 0x2
  2129                           
  2130  0072                     i1readGPIO@readA:	
  2131                           ; 1 bytes @ 0x2
  2132                           
  2133  0072                     ___wmul@multiplicand:	
  2134                           ; 1 bytes @ 0x2
  2135                           
  2136                           
  2137                           ; 2 bytes @ 0x2
  2138  0072                     	ds	1
  2139  0073                     ??_setPWMDutyandPeriod:
  2140  0073                     i1writeGPIO@portType:	
  2141                           ; 1 bytes @ 0x3
  2142                           
  2143  0073                     i1readGPIO@returnValueA:	
  2144                           ; 1 bytes @ 0x3
  2145                           
  2146                           
  2147                           ; 1 bytes @ 0x3
  2148  0073                     	ds	1
  2149  0074                     ??___wmul:
  2150  0074                     i1writeGPIO@gpioNumber:	
  2151                           ; 1 bytes @ 0x4
  2152                           
  2153  0074                     i1readGPIO@readB:	
  2154                           ; 1 bytes @ 0x4
  2155                           
  2156  0074                     readADCRaw@returnValue:	
  2157                           ; 1 bytes @ 0x4
  2158                           
  2159  0074                     ___wmul@product:	
  2160                           ; 2 bytes @ 0x4
  2161                           
  2162  0074                     ___lmul@multiplicand:	
  2163                           ; 2 bytes @ 0x4
  2164                           
  2165                           
  2166                           ; 4 bytes @ 0x4
  2167  0074                     	ds	1
  2168  0075                     i1writeGPIO@portNumber:
  2169  0075                     i1readGPIO@returnValueB:	
  2170                           ; 1 bytes @ 0x5
  2171                           
  2172                           
  2173                           ; 1 bytes @ 0x5
  2174  0075                     	ds	1
  2175  0076                     ??i1_currentTripReset:
  2176  0076                     ?_convertRawToMilliAmps:	
  2177                           ; 1 bytes @ 0x6
  2178                           
  2179  0076                     ?___lldiv:	
  2180                           ; 2 bytes @ 0x6
  2181                           
  2182  0076                     readADCRaw@channel:	
  2183                           ; 4 bytes @ 0x6
  2184                           
  2185  0076                     i1readGPIO@portNumber:	
  2186                           ; 1 bytes @ 0x6
  2187                           
  2188  0076                     convertRawToMilliAmps@rawValue:	
  2189                           ; 1 bytes @ 0x6
  2190                           
  2191  0076                     readFilteredIL@sumOfSamples:	
  2192                           ; 2 bytes @ 0x6
  2193                           
  2194  0076                     ___lldiv@divisor:	
  2195                           ; 4 bytes @ 0x6
  2196                           
  2197                           
  2198                           ; 4 bytes @ 0x6
  2199  0076                     	ds	1
  2200  0077                     readADCRaw@gpioValid:
  2201  0077                     i1readGPIO@portType:	
  2202                           ; 1 bytes @ 0x7
  2203                           
  2204                           
  2205                           ; 1 bytes @ 0x7
  2206  0077                     	ds	1
  2207  0078                     ??_convertRawToMilliAmps:
  2208  0078                     ??___lmul:	
  2209                           ; 1 bytes @ 0x8
  2210                           
  2211  0078                     readADCRaw@i:	
  2212                           ; 1 bytes @ 0x8
  2213                           
  2214  0078                     i1readGPIO@gpioNumber:	
  2215                           ; 1 bytes @ 0x8
  2216                           
  2217  0078                     convertRawToMilliAmps@offsetted:	
  2218                           ; 1 bytes @ 0x8
  2219                           
  2220  0078                     ___lmul@product:	
  2221                           ; 2 bytes @ 0x8
  2222                           
  2223                           
  2224                           ; 4 bytes @ 0x8
  2225  0078                     	ds	1
  2226  0079                     ??_currentTripRead:
  2227  0079                     readADCRaw@gpioNumber:	
  2228                           ; 1 bytes @ 0x9
  2229                           
  2230                           
  2231                           ; 1 bytes @ 0x9
  2232  0079                     	ds	1
  2233  007A                     ?_readFilteredVout:
  2234  007A                     ?_readFilteredDutyPot:	
  2235                           ; 2 bytes @ 0xA
  2236                           
  2237  007A                     ?_readFilteredFreqPot:	
  2238                           ; 2 bytes @ 0xA
  2239                           
  2240  007A                     _currentTripRead$928:	
  2241                           ; 2 bytes @ 0xA
  2242                           
  2243  007A                     readFilteredIL@i_936:	
  2244                           ; 1 bytes @ 0xA
  2245                           
  2246  007A                     convertRawToMilliAmps@returnValuemA:	
  2247                           ; 1 bytes @ 0xA
  2248                           
  2249  007A                     ___lldiv@dividend:	
  2250                           ; 2 bytes @ 0xA
  2251                           
  2252                           
  2253                           ; 4 bytes @ 0xA
  2254  007A                     	ds	1
  2255  007B                     ??_currentTripMonitor:
  2256  007B                     readFilteredIL@i:	
  2257                           ; 1 bytes @ 0xB
  2258                           
  2259                           
  2260                           ; 1 bytes @ 0xB
  2261  007B                     	ds	1
  2262  007C                     ??_runCurrentModeControl:
  2263  007C                     ?_convertRawToMilliVolts:	
  2264                           ; 1 bytes @ 0xC
  2265                           
  2266  007C                     convertRawToMilliVolts@rawValue:	
  2267                           ; 2 bytes @ 0xC
  2268                           
  2269                           
  2270                           ; 2 bytes @ 0xC
  2271  007C                     	ds	2
  2272                           
  2273                           	psect	cstackBANK0
  2274  0020                     __pcstackBANK0:
  2275  0020                     ??_readFilteredVout:
  2276  0020                     ??_readFilteredDutyPot:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0020                     ??_readFilteredFreqPot:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0020                     ??_convertRawToMilliVolts:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0020                     ??___lldiv:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0020                     ?___omul:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0020                     ___omul@multiplier:	
  2292                           ; 8 bytes @ 0x0
  2293                           
  2294                           
  2295                           ; 8 bytes @ 0x0
  2296  0020                     	ds	1
  2297  0021                     ___lldiv@quotient:
  2298                           
  2299                           ; 4 bytes @ 0x1
  2300  0021                     	ds	3
  2301  0024                     readFilteredDutyPot@sumOfSamples:
  2302  0024                     readFilteredFreqPot@sumOfSamples:	
  2303                           ; 4 bytes @ 0x4
  2304                           
  2305  0024                     readFilteredVout@sumOfSamples:	
  2306                           ; 4 bytes @ 0x4
  2307                           
  2308                           
  2309                           ; 4 bytes @ 0x4
  2310  0024                     	ds	1
  2311  0025                     ___lldiv@counter:
  2312  0025                     convertRawToMilliVolts@vsenseMult:	
  2313                           ; 1 bytes @ 0x5
  2314                           
  2315                           
  2316                           ; 4 bytes @ 0x5
  2317  0025                     	ds	1
  2318  0026                     ??_runPotScaling:
  2319                           
  2320                           ; 1 bytes @ 0x6
  2321  0026                     	ds	2
  2322  0028                     readFilteredDutyPot@i_749:
  2323  0028                     readFilteredFreqPot@i_753:	
  2324                           ; 1 bytes @ 0x8
  2325                           
  2326  0028                     readFilteredVout@i_846:	
  2327                           ; 1 bytes @ 0x8
  2328                           
  2329  0028                     ___omul@multiplicand:	
  2330                           ; 1 bytes @ 0x8
  2331                           
  2332                           
  2333                           ; 8 bytes @ 0x8
  2334  0028                     	ds	1
  2335  0029                     readFilteredDutyPot@i:
  2336  0029                     readFilteredFreqPot@i:	
  2337                           ; 1 bytes @ 0x9
  2338                           
  2339  0029                     readFilteredVout@i:	
  2340                           ; 1 bytes @ 0x9
  2341                           
  2342  0029                     convertRawToMilliVolts@offsetted:	
  2343                           ; 1 bytes @ 0x9
  2344                           
  2345                           
  2346                           ; 2 bytes @ 0x9
  2347  0029                     	ds	2
  2348  002B                     convertRawToMilliVolts@returnValuedV:
  2349                           
  2350                           ; 2 bytes @ 0xB
  2351  002B                     	ds	3
  2352  002E                     runPotScaling@maxDuty:
  2353                           
  2354                           ; 2 bytes @ 0xE
  2355  002E                     	ds	2
  2356  0030                     ??_runVoltageModeControl:
  2357  0030                     runPotScaling@minDuty:	
  2358                           ; 1 bytes @ 0x10
  2359                           
  2360                           
  2361                           ; 2 bytes @ 0x10
  2362  0030                     	ds	16
  2363  0040                     runVoltageModeControl@integralMult:
  2364                           
  2365                           ; 8 bytes @ 0x20
  2366  0040                     	ds	8
  2367  0048                     runVoltageModeControl@propMult:
  2368                           
  2369                           ; 8 bytes @ 0x28
  2370  0048                     	ds	8
  2371  0050                     runVoltageModeControl@newVoltage:
  2372                           
  2373                           ; 2 bytes @ 0x30
  2374  0050                     	ds	2
  2375  0052                     ??_controlRoutine:
  2376                           
  2377                           ; 1 bytes @ 0x32
  2378  0052                     	ds	6
  2379  0058                     controlRoutine@maxDuty:
  2380                           
  2381                           ; 2 bytes @ 0x38
  2382  0058                     	ds	2
  2383  005A                     controlRoutine@minDuty:
  2384                           
  2385                           ; 2 bytes @ 0x3A
  2386  005A                     	ds	2
  2387  005C                     ??_Tick490Hz:
  2388                           
  2389                           ; 1 bytes @ 0x3C
  2390  005C                     	ds	1
  2391                           
  2392                           	psect	maintext
  2393  0DA6                     __pmaintext:	
  2394 ;;
  2395 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2396 ;;
  2397 ;; *************** function _main *****************
  2398 ;; Defined at:
  2399 ;;		line 106 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  argc            2    9[BANK1 ] int 
  2402 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  2    9[BANK1 ] int 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : B1F/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2414 ;;      Params:         0       0       4       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0
  2417 ;;      Totals:         0       0       4       0       0       0
  2418 ;;Total ram usage:        4 bytes
  2419 ;; Hardware stack levels required when called: 8
  2420 ;; This function calls:
  2421 ;;		_initialiseADCModule
  2422 ;;		_initialiseController
  2423 ;;		_initialiseCurrentSensors
  2424 ;;		_initialiseGPIO
  2425 ;;		_initialisePotentiometers
  2426 ;;		_readGPIO
  2427 ;;		_setupInternalOscillator
  2428 ;;		_setupPWM
  2429 ;;		_setupTimer0Interrupt
  2430 ;;		_transToCurrentModeControl
  2431 ;;		_transToPotControl
  2432 ;;		_transToVoltageModeControl
  2433 ;; This function is called by:
  2434 ;;		Startup code after reset
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438  0DA6                     _main:	
  2439                           ;psect for function _main
  2440                           
  2441  0DA6                     l2716:	
  2442                           ;incstack = 0
  2443                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2444                           
  2445                           
  2446                           ;main.c: 108:     setupInternalOscillator(freq32M);
  2447  0DA6  300A               	movlw	10
  2448  0DA7  3184  2471  318D   	fcall	_setupInternalOscillator
  2449  0DAA                     l2718:
  2450                           
  2451                           ;main.c: 110:     setupPWM();
  2452  0DAA  3187  27E2  318D   	fcall	_setupPWM
  2453  0DAD                     l2720:
  2454                           
  2455                           ;main.c: 111:     setupTimer0Interrupt();
  2456  0DAD  318C  243B  318D   	fcall	_setupTimer0Interrupt
  2457  0DB0                     l2722:
  2458                           
  2459                           ;main.c: 112:     initialiseADCModule();
  2460  0DB0  318C  2421  318D   	fcall	_initialiseADCModule
  2461  0DB3                     l2724:
  2462                           
  2463                           ;main.c: 113:     initialiseCurrentSensors();
  2464  0DB3  318C  24D7  318D   	fcall	_initialiseCurrentSensors
  2465  0DB6                     l2726:
  2466                           
  2467                           ;main.c: 114:     initialisePotentiometers();
  2468  0DB6  318C  2455  318D   	fcall	_initialisePotentiometers
  2469  0DB9                     l2728:
  2470                           
  2471                           ;main.c: 115:     initialiseController();
  2472  0DB9  318C  246A  318D   	fcall	_initialiseController
  2473  0DBC                     l2730:
  2474                           
  2475                           ;main.c: 117:     initialiseGPIO(pinRB4, 0);
  2476  0DBC  0021               	movlb	1	; select bank1
  2477  0DBD  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2478  0DBE  300C               	movlw	12
  2479  0DBF  3185  2536  318D   	fcall	_initialiseGPIO
  2480  0DC2                     l2732:
  2481                           
  2482                           ;main.c: 118:     initialiseGPIO(pinRB5, 0);
  2483  0DC2  0021               	movlb	1	; select bank1
  2484  0DC3  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2485  0DC4  300D               	movlw	13
  2486  0DC5  3185  2536  318D   	fcall	_initialiseGPIO
  2487  0DC8                     l2734:
  2488  0DC8                     l2736:	
  2489                           ;main.c: 120:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2490                           
  2491                           
  2492                           ;main.c: 123:         if(1 == 1) transToVoltageModeControl();
  2493  0DC8  3008               	movlw	8
  2494  0DC9  318E  265D  318D   	fcall	_readGPIO
  2495  0DCC  3A01               	xorlw	1
  2496  0DCD  1903               	skipnz
  2497  0DCE  2DD0               	goto	u2511
  2498  0DCF  2DD1               	goto	u2510
  2499  0DD0                     u2511:
  2500  0DD0  2DD5               	goto	l2742
  2501  0DD1                     u2510:
  2502  0DD1                     l2738:
  2503  0DD1  318C  2434  318D   	fcall	_transToVoltageModeControl
  2504  0DD4  2DD8               	goto	l116
  2505  0DD5                     l2742:
  2506  0DD5  318C  241D  318D   	fcall	_transToPotControl
  2507  0DD8                     l116:	
  2508                           ;main.c: 128:     while(1){
  2509                           
  2510  0DD8  2DD8               	goto	l116
  2511  0DD9  3180  2886         	ljmp	start
  2512  0DDB                     __end_of_main:
  2513                           
  2514                           	psect	text1
  2515  0C34                     __ptext1:	
  2516 ;; *************** function _transToVoltageModeControl *****************
  2517 ;; Defined at:
  2518 ;;		line 27 in file "StateMachine.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2532 ;;      Params:         0       0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0
  2534 ;;      Temps:          0       0       1       0       0       0
  2535 ;;      Totals:         0       0       1       0       0       0
  2536 ;;Total ram usage:        1 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 5
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546  0C34                     _transToVoltageModeControl:	
  2547                           ;psect for function _transToVoltageModeControl
  2548                           
  2549  0C34                     l2676:	
  2550                           ;incstack = 0
  2551                           ; Regs used in _transToVoltageModeControl: [wreg]
  2552                           
  2553                           
  2554                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2555  0C34  3002               	movlw	2
  2556  0C35  0021               	movlb	1	; select bank1
  2557  0C36  00E2               	movwf	??_transToVoltageModeControl^(0+128)
  2558  0C37  0862               	movf	??_transToVoltageModeControl^(0+128),w
  2559  0C38  0020               	movlb	0	; select bank0
  2560  0C39  00EC               	movwf	_currentState
  2561  0C3A                     l557:
  2562  0C3A  0008               	return
  2563  0C3B                     __end_of_transToVoltageModeControl:
  2564                           
  2565                           	psect	text2
  2566  0C1D                     __ptext2:	
  2567 ;; *************** function _transToPotControl *****************
  2568 ;; Defined at:
  2569 ;;		line 18 in file "StateMachine.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		None
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2583 ;;      Params:         0       0       0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 5
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_main
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597  0C1D                     _transToPotControl:	
  2598                           ;psect for function _transToPotControl
  2599                           
  2600  0C1D                     l2680:	
  2601                           ;incstack = 0
  2602                           ; Regs used in _transToPotControl: []
  2603                           
  2604                           
  2605                           ;StateMachine.c: 19:     currentState = potControl;
  2606  0C1D  0020               	movlb	0	; select bank0
  2607  0C1E  01EC               	clrf	_currentState
  2608  0C1F  0AEC               	incf	_currentState,f
  2609  0C20                     l554:
  2610  0C20  0008               	return
  2611  0C21                     __end_of_transToPotControl:
  2612                           
  2613                           	psect	text3
  2614  0C2D                     __ptext3:	
  2615 ;; *************** function _transToCurrentModeControl *****************
  2616 ;; Defined at:
  2617 ;;		line 36 in file "StateMachine.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2631 ;;      Params:         0       0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0
  2633 ;;      Temps:          0       0       1       0       0       0
  2634 ;;      Totals:         0       0       1       0       0       0
  2635 ;;Total ram usage:        1 bytes
  2636 ;; Hardware stack levels used: 1
  2637 ;; Hardware stack levels required when called: 5
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645  0C2D                     _transToCurrentModeControl:	
  2646                           ;psect for function _transToCurrentModeControl
  2647                           
  2648  0C2D                     l2678:	
  2649                           ;incstack = 0
  2650                           ; Regs used in _transToCurrentModeControl: [wreg]
  2651                           
  2652                           
  2653                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2654  0C2D  3003               	movlw	3
  2655  0C2E  0021               	movlb	1	; select bank1
  2656  0C2F  00E2               	movwf	??_transToCurrentModeControl^(0+128)
  2657  0C30  0862               	movf	??_transToCurrentModeControl^(0+128),w
  2658  0C31  0020               	movlb	0	; select bank0
  2659  0C32  00EC               	movwf	_currentState
  2660  0C33                     l560:
  2661  0C33  0008               	return
  2662  0C34                     __end_of_transToCurrentModeControl:
  2663                           
  2664                           	psect	text4
  2665  0C3B                     __ptext4:	
  2666 ;; *************** function _setupTimer0Interrupt *****************
  2667 ;; Defined at:
  2668 ;;		line 17 in file "Timer0.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2682 ;;      Params:         0       0       0       0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0
  2685 ;;      Totals:         0       0       0       0       0       0
  2686 ;;Total ram usage:        0 bytes
  2687 ;; Hardware stack levels used: 1
  2688 ;; Hardware stack levels required when called: 5
  2689 ;; This function calls:
  2690 ;;		Nothing
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696  0C3B                     _setupTimer0Interrupt:	
  2697                           ;psect for function _setupTimer0Interrupt
  2698                           
  2699  0C3B                     l2624:	
  2700                           ;incstack = 0
  2701                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2702                           
  2703                           
  2704                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2705  0C3B  178B               	bsf	11,7	;volatile
  2706                           
  2707                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2708  0C3C  168B               	bsf	11,5	;volatile
  2709                           
  2710                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2711  0C3D  0021               	movlb	1	; select bank1
  2712  0C3E  1295               	bcf	21,5	;volatile
  2713                           
  2714                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2715  0C3F  1195               	bcf	21,3	;volatile
  2716  0C40                     l2626:
  2717                           
  2718                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2719  0C40  3005               	movlw	5
  2720  0C41  0095               	movwf	21	;volatile
  2721  0C42                     l197:
  2722  0C42  0008               	return
  2723  0C43                     __end_of_setupTimer0Interrupt:
  2724                           
  2725                           	psect	text5
  2726  07E2                     __ptext5:	
  2727 ;; *************** function _setupPWM *****************
  2728 ;; Defined at:
  2729 ;;		line 16 in file "PWM.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, pclath, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2743 ;;      Params:         0       0       0       0       0       0
  2744 ;;      Locals:         0       0       0       0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0
  2746 ;;      Totals:         0       0       0       0       0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; Hardware stack levels required when called: 6
  2750 ;; This function calls:
  2751 ;;		_initialiseGPIO
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757  07E2                     _setupPWM:	
  2758                           ;psect for function _setupPWM
  2759                           
  2760  07E2                     l2600:	
  2761                           ;incstack = 0
  2762                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2763                           
  2764                           
  2765                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2766  07E2  300C               	movlw	12
  2767  07E3  0025               	movlb	5	; select bank5
  2768  07E4  0093               	movwf	19	;volatile
  2769  07E5                     l2602:
  2770                           
  2771                           ;PWM.c: 20:     PR2 = 0;
  2772  07E5  0020               	movlb	0	; select bank0
  2773  07E6  019B               	clrf	27	;volatile
  2774  07E7                     l2604:
  2775                           
  2776                           ;PWM.c: 21:     CCPR1L = 0;
  2777  07E7  0025               	movlb	5	; select bank5
  2778  07E8  0191               	clrf	17	;volatile
  2779  07E9                     l2606:
  2780                           
  2781                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2782  07E9  0022               	movlb	2	; select bank2
  2783  07EA  151D               	bsf	29,2	;volatile
  2784  07EB                     l2608:
  2785                           
  2786                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2787  07EB  0025               	movlb	5	; select bank5
  2788  07EC  1596               	bsf	22,3	;volatile
  2789  07ED                     l2610:
  2790                           
  2791                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2792  07ED  1016               	bcf	22,0	;volatile
  2793  07EE                     l2612:
  2794                           
  2795                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2796  07EE  30FC               	movlw	-4
  2797  07EF  0020               	movlb	0	; select bank0
  2798  07F0  059C               	andwf	28,f	;volatile
  2799  07F1                     l2614:
  2800                           
  2801                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2802  07F1  0021               	movlb	1	; select bank1
  2803  07F2  1091               	bcf	17,1	;volatile
  2804  07F3                     l2616:
  2805                           
  2806                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2807  07F3  0020               	movlb	0	; select bank0
  2808  07F4  151C               	bsf	28,2	;volatile
  2809  07F5                     l2618:
  2810                           
  2811                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2812  07F5  170B               	bsf	11,6	;volatile
  2813  07F6                     l2620:
  2814                           
  2815                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2816  07F6  0021               	movlb	1	; select bank1
  2817  07F7  1511               	bsf	17,2	;volatile
  2818  07F8                     l2622:
  2819                           
  2820                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2821  07F8  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2822  07F9  3006               	movlw	6
  2823  07FA  3185  2536  3187   	fcall	_initialiseGPIO
  2824  07FD                     l170:
  2825  07FD  0008               	return
  2826  07FE                     __end_of_setupPWM:
  2827                           
  2828                           	psect	text6
  2829  0471                     __ptext6:	
  2830 ;; *************** function _setupInternalOscillator *****************
  2831 ;; Defined at:
  2832 ;;		line 139 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  selectedFreq    1    wreg     const enum E2845
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2846 ;;      Params:         0       0       0       0       0       0
  2847 ;;      Locals:         0       0       1       0       0       0
  2848 ;;      Temps:          0       0       2       0       0       0
  2849 ;;      Totals:         0       0       3       0       0       0
  2850 ;;Total ram usage:        3 bytes
  2851 ;; Hardware stack levels used: 1
  2852 ;; Hardware stack levels required when called: 5
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860  0471                     _setupInternalOscillator:	
  2861                           ;psect for function _setupInternalOscillator
  2862                           
  2863                           
  2864                           ;incstack = 0
  2865                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2866                           ;setupInternalOscillator@selectedFreq stored from wreg
  2867  0471  0021               	movlb	1	; select bank1
  2868  0472  00E4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2869  0473                     l2522:
  2870                           
  2871                           ;main.c: 143:     switch(selectedFreq){
  2872  0473  2D0A               	goto	l2592
  2873  0474                     l2524:
  2874  0474  3087               	movlw	-121
  2875  0475  0599               	andwf	25,f	;volatile
  2876  0476                     l2526:
  2877  0476  1399               	bcf	25,7	;volatile
  2878  0477                     l2528:
  2879  0477  3000               	movlw	0
  2880  0478  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2881  0479  3000               	movlw	0
  2882  047A  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2883  047B  3079               	movlw	121
  2884  047C  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2885  047D  3018               	movlw	24
  2886  047E  00BC               	movwf	_clockFrequency^(0+128)
  2887  047F  2D35               	goto	l135
  2888  0480                     l2530:
  2889  0480  0819               	movf	25,w	;volatile
  2890  0481  3987               	andlw	-121
  2891  0482  3820               	iorlw	32
  2892  0483  0099               	movwf	25	;volatile
  2893  0484                     l2532:
  2894  0484  1399               	bcf	25,7	;volatile
  2895  0485                     l2534:
  2896  0485  3000               	movlw	0
  2897  0486  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2898  0487  3000               	movlw	0
  2899  0488  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2900  0489  30F4               	movlw	244
  2901  048A  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2902  048B  3024               	movlw	36
  2903  048C  00BC               	movwf	_clockFrequency^(0+128)
  2904  048D  2D35               	goto	l135
  2905  048E                     l2536:
  2906  048E  0819               	movf	25,w	;volatile
  2907  048F  3987               	andlw	-121
  2908  0490  3828               	iorlw	40
  2909  0491  0099               	movwf	25	;volatile
  2910  0492                     l2538:
  2911  0492  1399               	bcf	25,7	;volatile
  2912  0493                     l2540:
  2913  0493  3000               	movlw	0
  2914  0494  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2915  0495  3001               	movlw	1
  2916  0496  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2917  0497  30E8               	movlw	232
  2918  0498  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2919  0499  3048               	movlw	72
  2920  049A  00BC               	movwf	_clockFrequency^(0+128)
  2921  049B  2D35               	goto	l135
  2922  049C                     l2542:
  2923  049C  0819               	movf	25,w	;volatile
  2924  049D  3987               	andlw	-121
  2925  049E  3830               	iorlw	48
  2926  049F  0099               	movwf	25	;volatile
  2927  04A0                     l2544:
  2928  04A0  1399               	bcf	25,7	;volatile
  2929  04A1                     l2546:
  2930  04A1  3000               	movlw	0
  2931  04A2  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2932  04A3  3003               	movlw	3
  2933  04A4  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2934  04A5  30D0               	movlw	208
  2935  04A6  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2936  04A7  3090               	movlw	144
  2937  04A8  00BC               	movwf	_clockFrequency^(0+128)
  2938  04A9  2D35               	goto	l135
  2939  04AA                     l2548:
  2940  04AA  0819               	movf	25,w	;volatile
  2941  04AB  3987               	andlw	-121
  2942  04AC  3838               	iorlw	56
  2943  04AD  0099               	movwf	25	;volatile
  2944  04AE                     l2550:
  2945  04AE  1399               	bcf	25,7	;volatile
  2946  04AF                     l2552:
  2947  04AF  3000               	movlw	0
  2948  04B0  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2949  04B1  3007               	movlw	7
  2950  04B2  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2951  04B3  30A1               	movlw	161
  2952  04B4  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2953  04B5  3020               	movlw	32
  2954  04B6  00BC               	movwf	_clockFrequency^(0+128)
  2955  04B7  2D35               	goto	l135
  2956  04B8                     l2554:
  2957  04B8  0819               	movf	25,w	;volatile
  2958  04B9  3987               	andlw	-121
  2959  04BA  3858               	iorlw	88
  2960  04BB  0099               	movwf	25	;volatile
  2961  04BC                     l2556:
  2962  04BC  1399               	bcf	25,7	;volatile
  2963  04BD                     l2558:
  2964  04BD  3000               	movlw	0
  2965  04BE  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2966  04BF  300F               	movlw	15
  2967  04C0  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2968  04C1  3042               	movlw	66
  2969  04C2  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2970  04C3  3040               	movlw	64
  2971  04C4  00BC               	movwf	_clockFrequency^(0+128)
  2972  04C5  2D35               	goto	l135
  2973  04C6                     l2560:
  2974  04C6  0819               	movf	25,w	;volatile
  2975  04C7  3987               	andlw	-121
  2976  04C8  3860               	iorlw	96
  2977  04C9  0099               	movwf	25	;volatile
  2978  04CA                     l2562:
  2979  04CA  1399               	bcf	25,7	;volatile
  2980  04CB                     l2564:
  2981  04CB  3000               	movlw	0
  2982  04CC  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2983  04CD  301E               	movlw	30
  2984  04CE  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2985  04CF  3084               	movlw	132
  2986  04D0  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2987  04D1  3080               	movlw	128
  2988  04D2  00BC               	movwf	_clockFrequency^(0+128)
  2989  04D3  2D35               	goto	l135
  2990  04D4                     l2566:
  2991  04D4  0819               	movf	25,w	;volatile
  2992  04D5  3987               	andlw	-121
  2993  04D6  3868               	iorlw	104
  2994  04D7  0099               	movwf	25	;volatile
  2995  04D8                     l2568:
  2996  04D8  1399               	bcf	25,7	;volatile
  2997  04D9                     l2570:
  2998  04D9  3000               	movlw	0
  2999  04DA  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3000  04DB  303D               	movlw	61
  3001  04DC  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3002  04DD  3009               	movlw	9
  3003  04DE  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3004  04DF  3000               	movlw	0
  3005  04E0  00BC               	movwf	_clockFrequency^(0+128)
  3006  04E1  2D35               	goto	l135
  3007  04E2                     l2572:
  3008  04E2  0819               	movf	25,w	;volatile
  3009  04E3  3987               	andlw	-121
  3010  04E4  3870               	iorlw	112
  3011  04E5  0099               	movwf	25	;volatile
  3012  04E6                     l2574:
  3013  04E6  1399               	bcf	25,7	;volatile
  3014  04E7                     l2576:
  3015  04E7  3000               	movlw	0
  3016  04E8  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3017  04E9  307A               	movlw	122
  3018  04EA  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3019  04EB  3012               	movlw	18
  3020  04EC  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3021  04ED  3000               	movlw	0
  3022  04EE  00BC               	movwf	_clockFrequency^(0+128)
  3023  04EF  2D35               	goto	l135
  3024  04F0                     l2578:
  3025  04F0  3078               	movlw	120
  3026  04F1  0499               	iorwf	25,f	;volatile
  3027  04F2                     l2580:
  3028  04F2  1399               	bcf	25,7	;volatile
  3029  04F3                     l2582:
  3030  04F3  3000               	movlw	0
  3031  04F4  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3032  04F5  30F4               	movlw	244
  3033  04F6  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3034  04F7  3024               	movlw	36
  3035  04F8  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3036  04F9  3000               	movlw	0
  3037  04FA  00BC               	movwf	_clockFrequency^(0+128)
  3038  04FB  2D35               	goto	l135
  3039  04FC                     l2584:
  3040  04FC  0819               	movf	25,w	;volatile
  3041  04FD  3987               	andlw	-121
  3042  04FE  3870               	iorlw	112
  3043  04FF  0099               	movwf	25	;volatile
  3044  0500                     l2586:
  3045  0500  1799               	bsf	25,7	;volatile
  3046  0501                     l2588:
  3047  0501  3001               	movlw	1
  3048  0502  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3049  0503  30E8               	movlw	232
  3050  0504  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3051  0505  3048               	movlw	72
  3052  0506  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3053  0507  3000               	movlw	0
  3054  0508  00BC               	movwf	_clockFrequency^(0+128)
  3055  0509  2D35               	goto	l135
  3056  050A                     l2592:
  3057  050A  0864               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3058  050B  00E2               	movwf	??_setupInternalOscillator^(0+128)
  3059  050C  01E3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3060                           
  3061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3062                           ; Switch size 1, requested type "simple"
  3063                           ; Number of cases is 1, Range of values is 0 to 0
  3064                           ; switch strategies available:
  3065                           ; Name         Instructions Cycles
  3066                           ; simple_byte            4     3 (average)
  3067                           ; direct_byte            8     6 (fixed)
  3068                           ; jumptable            260     6 (fixed)
  3069                           ;	Chosen strategy is simple_byte
  3070  050D  0863               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3071  050E  3A00               	xorlw	0	; case 0
  3072  050F  1903               	skipnz
  3073  0510  2D12               	goto	l2802
  3074  0511  2D35               	goto	l135
  3075  0512                     l2802:
  3076                           
  3077                           ; Switch size 1, requested type "simple"
  3078                           ; Number of cases is 11, Range of values is 0 to 10
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; direct_byte           28     6 (fixed)
  3082                           ; simple_byte           34    18 (average)
  3083                           ; jumptable            260     6 (fixed)
  3084                           ;	Chosen strategy is simple_byte
  3085  0512  0862               	movf	??_setupInternalOscillator^(0+128),w
  3086  0513  3A00               	xorlw	0	; case 0
  3087  0514  1903               	skipnz
  3088  0515  2C74               	goto	l2524
  3089  0516  3A01               	xorlw	1	; case 1
  3090  0517  1903               	skipnz
  3091  0518  2C80               	goto	l2530
  3092  0519  3A03               	xorlw	3	; case 2
  3093  051A  1903               	skipnz
  3094  051B  2C8E               	goto	l2536
  3095  051C  3A01               	xorlw	1	; case 3
  3096  051D  1903               	skipnz
  3097  051E  2C9C               	goto	l2542
  3098  051F  3A07               	xorlw	7	; case 4
  3099  0520  1903               	skipnz
  3100  0521  2CAA               	goto	l2548
  3101  0522  3A01               	xorlw	1	; case 5
  3102  0523  1903               	skipnz
  3103  0524  2CB8               	goto	l2554
  3104  0525  3A03               	xorlw	3	; case 6
  3105  0526  1903               	skipnz
  3106  0527  2CC6               	goto	l2560
  3107  0528  3A01               	xorlw	1	; case 7
  3108  0529  1903               	skipnz
  3109  052A  2CD4               	goto	l2566
  3110  052B  3A0F               	xorlw	15	; case 8
  3111  052C  1903               	skipnz
  3112  052D  2CE2               	goto	l2572
  3113  052E  3A01               	xorlw	1	; case 9
  3114  052F  1903               	skipnz
  3115  0530  2CF0               	goto	l2578
  3116  0531  3A03               	xorlw	3	; case 10
  3117  0532  1903               	skipnz
  3118  0533  2CFC               	goto	l2584
  3119  0534  2D35               	goto	l135
  3120  0535                     l135:
  3121  0535  0008               	return
  3122  0536                     __end_of_setupInternalOscillator:
  3123                           
  3124                           	psect	text7
  3125  0E5D                     __ptext7:	
  3126 ;; *************** function _readGPIO *****************
  3127 ;; Defined at:
  3128 ;;		line 79 in file "GPIO.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  gpioNumber      1    wreg     const enum E2798
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3133 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3134 ;;  readB           1    4[BANK1 ] unsigned char 
  3135 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3136 ;;  readA           1    2[BANK1 ] unsigned char 
  3137 ;;  portType        1    7[BANK1 ] unsigned char 
  3138 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      _Bool 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3148 ;;      Params:         0       0       0       0       0       0
  3149 ;;      Locals:         0       0       7       0       0       0
  3150 ;;      Temps:          0       0       2       0       0       0
  3151 ;;      Totals:         0       0       9       0       0       0
  3152 ;;Total ram usage:        9 bytes
  3153 ;; Hardware stack levels used: 1
  3154 ;; Hardware stack levels required when called: 5
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162  0E5D                     _readGPIO:	
  3163                           ;psect for function _readGPIO
  3164                           
  3165                           
  3166                           ;incstack = 0
  3167                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3168                           ;readGPIO@gpioNumber stored from wreg
  3169  0E5D  0021               	movlb	1	; select bank1
  3170  0E5E  00EA               	movwf	readGPIO@gpioNumber^(0+128)
  3171  0E5F                     l2636:
  3172                           
  3173                           ;GPIO.c: 81:     uint8_t portType = 0;
  3174  0E5F  01E9               	clrf	readGPIO@portType^(0+128)
  3175  0E60                     l2638:
  3176                           
  3177                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3178  0E60  3008               	movlw	8
  3179  0E61  026A               	subwf	readGPIO@gpioNumber^(0+128),w
  3180  0E62  1C03               	skipc
  3181  0E63  2E65               	goto	u2381
  3182  0E64  2E66               	goto	u2380
  3183  0E65                     u2381:
  3184  0E65  2E6E               	goto	l2644
  3185  0E66                     u2380:
  3186  0E66                     l2640:
  3187                           
  3188                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3189  0E66  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3190  0E67  3EF8               	addlw	248
  3191  0E68  00E2               	movwf	??_readGPIO^(0+128)
  3192  0E69  0862               	movf	??_readGPIO^(0+128),w
  3193  0E6A  00E8               	movwf	readGPIO@portNumber^(0+128)
  3194  0E6B                     l2642:
  3195                           
  3196                           ;GPIO.c: 84:         portType = 1;
  3197  0E6B  01E9               	clrf	readGPIO@portType^(0+128)
  3198  0E6C  0AE9               	incf	readGPIO@portType^(0+128),f
  3199                           
  3200                           ;GPIO.c: 85:     }
  3201  0E6D  2E73               	goto	l2648
  3202  0E6E                     l2644:
  3203                           
  3204                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3205  0E6E  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3206  0E6F  00E2               	movwf	??_readGPIO^(0+128)
  3207  0E70  0862               	movf	??_readGPIO^(0+128),w
  3208  0E71  00E8               	movwf	readGPIO@portNumber^(0+128)
  3209  0E72                     l2646:
  3210                           
  3211                           ;GPIO.c: 88:         portType = 0;
  3212  0E72  01E9               	clrf	readGPIO@portType^(0+128)
  3213  0E73                     l2648:
  3214                           
  3215                           ;GPIO.c: 91:     if(portType == 0){
  3216  0E73  0869               	movf	readGPIO@portType^(0+128),w
  3217  0E74  1D03               	btfss	3,2
  3218  0E75  2E77               	goto	u2391
  3219  0E76  2E78               	goto	u2390
  3220  0E77                     u2391:
  3221  0E77  2E8C               	goto	l2660
  3222  0E78                     u2390:
  3223  0E78                     l2650:
  3224                           
  3225                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3226  0E78  0020               	movlb	0	; select bank0
  3227  0E79  080C               	movf	12,w	;volatile
  3228  0E7A  0021               	movlb	1	; select bank1
  3229  0E7B  00E2               	movwf	??_readGPIO^(0+128)
  3230  0E7C  0862               	movf	??_readGPIO^(0+128),w
  3231  0E7D  00E4               	movwf	readGPIO@readA^(0+128)
  3232  0E7E                     l2652:
  3233                           
  3234                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3235  0E7E  0864               	movf	readGPIO@readA^(0+128),w
  3236  0E7F  00E2               	movwf	??_readGPIO^(0+128)
  3237  0E80  0A68               	incf	readGPIO@portNumber^(0+128),w
  3238  0E81  2E83               	goto	u2404
  3239  0E82                     u2405:
  3240  0E82  36E2               	lsrf	??_readGPIO^(0+128),f
  3241  0E83                     u2404:
  3242  0E83  0B89               	decfsz	9,f
  3243  0E84  2E82               	goto	u2405
  3244  0E85  0862               	movf	??_readGPIO^(0+128),w
  3245  0E86  3901               	andlw	1
  3246  0E87  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3247  0E88  0863               	movf	(??_readGPIO+1)^(0+128),w
  3248  0E89  00E5               	movwf	readGPIO@returnValueA^(0+128)
  3249  0E8A                     l2654:
  3250                           
  3251                           ;GPIO.c: 94:         return returnValueA;
  3252  0E8A  0865               	movf	readGPIO@returnValueA^(0+128),w
  3253  0E8B  2EA6               	goto	l322
  3254  0E8C                     l2660:
  3255  0E8C  0369               	decf	readGPIO@portType^(0+128),w
  3256  0E8D  1D03               	btfss	3,2
  3257  0E8E  2E90               	goto	u2411
  3258  0E8F  2E91               	goto	u2410
  3259  0E90                     u2411:
  3260  0E90  2EA5               	goto	l2672
  3261  0E91                     u2410:
  3262  0E91                     l2662:
  3263                           
  3264                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3265  0E91  0020               	movlb	0	; select bank0
  3266  0E92  080D               	movf	13,w	;volatile
  3267  0E93  0021               	movlb	1	; select bank1
  3268  0E94  00E2               	movwf	??_readGPIO^(0+128)
  3269  0E95  0862               	movf	??_readGPIO^(0+128),w
  3270  0E96  00E6               	movwf	readGPIO@readB^(0+128)
  3271  0E97                     l2664:
  3272                           
  3273                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3274  0E97  0866               	movf	readGPIO@readB^(0+128),w
  3275  0E98  00E2               	movwf	??_readGPIO^(0+128)
  3276  0E99  0A68               	incf	readGPIO@portNumber^(0+128),w
  3277  0E9A  2E9C               	goto	u2424
  3278  0E9B                     u2425:
  3279  0E9B  36E2               	lsrf	??_readGPIO^(0+128),f
  3280  0E9C                     u2424:
  3281  0E9C  0B89               	decfsz	9,f
  3282  0E9D  2E9B               	goto	u2425
  3283  0E9E  0862               	movf	??_readGPIO^(0+128),w
  3284  0E9F  3901               	andlw	1
  3285  0EA0  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3286  0EA1  0863               	movf	(??_readGPIO+1)^(0+128),w
  3287  0EA2  00E7               	movwf	readGPIO@returnValueB^(0+128)
  3288  0EA3                     l2666:
  3289                           
  3290                           ;GPIO.c: 99:         return returnValueB;
  3291  0EA3  0867               	movf	readGPIO@returnValueB^(0+128),w
  3292  0EA4  2EA6               	goto	l322
  3293  0EA5                     l2672:
  3294  0EA5  3000               	movlw	0
  3295  0EA6                     l322:
  3296  0EA6  0008               	return
  3297  0EA7                     __end_of_readGPIO:
  3298                           
  3299                           	psect	text8
  3300  0C55                     __ptext8:	
  3301 ;; *************** function _initialisePotentiometers *****************
  3302 ;; Defined at:
  3303 ;;		line 15 in file "Potentiometer.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      void 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3317 ;;      Params:         0       0       0       0       0       0
  3318 ;;      Locals:         0       0       0       0       0       0
  3319 ;;      Temps:          0       0       0       0       0       0
  3320 ;;      Totals:         0       0       0       0       0       0
  3321 ;;Total ram usage:        0 bytes
  3322 ;; Hardware stack levels used: 1
  3323 ;; Hardware stack levels required when called: 6
  3324 ;; This function calls:
  3325 ;;		_initialiseADCPin
  3326 ;; This function is called by:
  3327 ;;		_main
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331  0C55                     _initialisePotentiometers:	
  3332                           ;psect for function _initialisePotentiometers
  3333                           
  3334  0C55                     l2632:	
  3335                           ;incstack = 0
  3336                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3337                           
  3338                           
  3339                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3340  0C55  3009               	movlw	9
  3341  0C56  3185  25AC  318C   	fcall	_initialiseADCPin
  3342                           
  3343                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3344  0C59  300A               	movlw	10
  3345  0C5A  3185  25AC  318C   	fcall	_initialiseADCPin
  3346  0C5D                     l354:
  3347  0C5D  0008               	return
  3348  0C5E                     __end_of_initialisePotentiometers:
  3349                           
  3350                           	psect	text9
  3351  0CD7                     __ptext9:	
  3352 ;; *************** function _initialiseCurrentSensors *****************
  3353 ;; Defined at:
  3354 ;;		line 18 in file "CurrentSensor.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0, pclath, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3368 ;;      Params:         0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used: 1
  3374 ;; Hardware stack levels required when called: 7
  3375 ;; This function calls:
  3376 ;;		_currentTripReset
  3377 ;;		_initialiseADCPin
  3378 ;;		_initialiseGPIO
  3379 ;; This function is called by:
  3380 ;;		_main
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384  0CD7                     _initialiseCurrentSensors:	
  3385                           ;psect for function _initialiseCurrentSensors
  3386                           
  3387  0CD7                     l2630:	
  3388                           ;incstack = 0
  3389                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3390                           
  3391                           
  3392                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3393  0CD7  0021               	movlb	1	; select bank1
  3394  0CD8  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3395  0CD9  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3396  0CDA  3003               	movlw	3
  3397  0CDB  3185  2536  318C   	fcall	_initialiseGPIO
  3398                           
  3399                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3400  0CDE  0021               	movlb	1	; select bank1
  3401  0CDF  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3402  0CE0  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3403  0CE1  3001               	movlw	1
  3404  0CE2  3185  2536  318C   	fcall	_initialiseGPIO
  3405                           
  3406                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3407  0CE5  3000               	movlw	0
  3408  0CE6  3185  25AC  318C   	fcall	_initialiseADCPin
  3409                           
  3410                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3411  0CE9  3002               	movlw	2
  3412  0CEA  3185  25AC  318C   	fcall	_initialiseADCPin
  3413                           
  3414                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3415  0CED  0021               	movlb	1	; select bank1
  3416  0CEE  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3417  0CEF  300B               	movlw	11
  3418  0CF0  3185  2536  318C   	fcall	_initialiseGPIO
  3419                           
  3420                           ;CurrentSensor.c: 24:     currentTripReset();
  3421  0CF3  318C  2476  318C   	fcall	_currentTripReset
  3422  0CF6                     l506:
  3423  0CF6  0008               	return
  3424  0CF7                     __end_of_initialiseCurrentSensors:
  3425                           
  3426                           	psect	text10
  3427  0C76                     __ptext10:	
  3428 ;; *************** function _currentTripReset *****************
  3429 ;; Defined at:
  3430 ;;		line 71 in file "CurrentSensor.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, pclath, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3444 ;;      Params:         0       0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0
  3447 ;;      Totals:         0       0       0       0       0       0
  3448 ;;Total ram usage:        0 bytes
  3449 ;; Hardware stack levels used: 1
  3450 ;; Hardware stack levels required when called: 6
  3451 ;; This function calls:
  3452 ;;		_writeGPIO
  3453 ;; This function is called by:
  3454 ;;		_initialiseCurrentSensors
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458  0C76                     _currentTripReset:	
  3459                           ;psect for function _currentTripReset
  3460                           
  3461  0C76                     l2286:	
  3462                           ;incstack = 0
  3463                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3464                           
  3465                           
  3466                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3467  0C76  0021               	movlb	1	; select bank1
  3468  0C77  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3469  0C78  300B               	movlw	11
  3470  0C79  3186  2612  318C   	fcall	_writeGPIO
  3471  0C7C                     l2288:
  3472                           
  3473                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3474                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3475  0C7C  0021               	movlb	1	; select bank1
  3476  0C7D  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3477  0C7E  0AE2               	incf	writeGPIO@writeValue^(0+128),f
  3478  0C7F  300B               	movlw	11
  3479  0C80  3186  2612  318C   	fcall	_writeGPIO
  3480  0C83                     l528:
  3481  0C83  0008               	return
  3482  0C84                     __end_of_currentTripReset:
  3483                           
  3484                           	psect	text11
  3485  0612                     __ptext11:	
  3486 ;; *************** function _writeGPIO *****************
  3487 ;; Defined at:
  3488 ;;		line 52 in file "GPIO.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  gpioNumber      1    wreg     const enum E2798
  3491 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3494 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3495 ;;  portType        1    3[BANK1 ] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3505 ;;      Params:         0       0       1       0       0       0
  3506 ;;      Locals:         0       0       3       0       0       0
  3507 ;;      Temps:          0       0       2       0       0       0
  3508 ;;      Totals:         0       0       6       0       0       0
  3509 ;;Total ram usage:        6 bytes
  3510 ;; Hardware stack levels used: 1
  3511 ;; Hardware stack levels required when called: 5
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_currentTripReset
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519  0612                     _writeGPIO:	
  3520                           ;psect for function _writeGPIO
  3521                           
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3525                           ;writeGPIO@gpioNumber stored from wreg
  3526  0612  0021               	movlb	1	; select bank1
  3527  0613  00E6               	movwf	writeGPIO@gpioNumber^(0+128)
  3528  0614                     l2024:
  3529                           
  3530                           ;GPIO.c: 54:     uint8_t portType = 0;
  3531  0614  01E5               	clrf	writeGPIO@portType^(0+128)
  3532  0615                     l2026:
  3533                           
  3534                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3535  0615  3008               	movlw	8
  3536  0616  0266               	subwf	writeGPIO@gpioNumber^(0+128),w
  3537  0617  1C03               	skipc
  3538  0618  2E1A               	goto	u1361
  3539  0619  2E1B               	goto	u1360
  3540  061A                     u1361:
  3541  061A  2E23               	goto	l2032
  3542  061B                     u1360:
  3543  061B                     l2028:
  3544                           
  3545                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3546  061B  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3547  061C  3EF8               	addlw	248
  3548  061D  00E3               	movwf	??_writeGPIO^(0+128)
  3549  061E  0863               	movf	??_writeGPIO^(0+128),w
  3550  061F  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3551  0620                     l2030:
  3552                           
  3553                           ;GPIO.c: 57:         portType = 1;
  3554  0620  01E5               	clrf	writeGPIO@portType^(0+128)
  3555  0621  0AE5               	incf	writeGPIO@portType^(0+128),f
  3556                           
  3557                           ;GPIO.c: 58:     }
  3558  0622  2E28               	goto	l2036
  3559  0623                     l2032:
  3560                           
  3561                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3562  0623  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3563  0624  00E3               	movwf	??_writeGPIO^(0+128)
  3564  0625  0863               	movf	??_writeGPIO^(0+128),w
  3565  0626  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3566  0627                     l2034:
  3567                           
  3568                           ;GPIO.c: 61:         portType = 0;
  3569  0627  01E5               	clrf	writeGPIO@portType^(0+128)
  3570  0628                     l2036:
  3571                           
  3572                           ;GPIO.c: 64:     if(portType == 0){
  3573  0628  0865               	movf	writeGPIO@portType^(0+128),w
  3574  0629  1D03               	btfss	3,2
  3575  062A  2E2C               	goto	u1371
  3576  062B  2E2D               	goto	u1370
  3577  062C                     u1371:
  3578  062C  2E4D               	goto	l2044
  3579  062D                     u1370:
  3580  062D                     l2038:
  3581                           
  3582                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3583  062D  0862               	movf	writeGPIO@writeValue^(0+128),w
  3584  062E  1903               	btfsc	3,2
  3585  062F  2E31               	goto	u1381
  3586  0630  2E32               	goto	u1380
  3587  0631                     u1381:
  3588  0631  2E3F               	goto	l2042
  3589  0632                     u1380:
  3590  0632                     l2040:
  3591  0632  3001               	movlw	1
  3592  0633  00E3               	movwf	??_writeGPIO^(0+128)
  3593  0634  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3594  0635  2E37               	goto	u1394
  3595  0636                     u1395:
  3596  0636  35E3               	lslf	??_writeGPIO^(0+128),f
  3597  0637                     u1394:
  3598  0637  0B89               	decfsz	9,f
  3599  0638  2E36               	goto	u1395
  3600  0639  0863               	movf	??_writeGPIO^(0+128),w
  3601  063A  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3602  063B  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3603  063C  0022               	movlb	2	; select bank2
  3604  063D  048C               	iorwf	12,f	;volatile
  3605  063E  2E71               	goto	l316
  3606  063F                     l2042:
  3607  063F  3001               	movlw	1
  3608  0640  00E3               	movwf	??_writeGPIO^(0+128)
  3609  0641  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3610  0642  2E44               	goto	u1404
  3611  0643                     u1405:
  3612  0643  35E3               	lslf	??_writeGPIO^(0+128),f
  3613  0644                     u1404:
  3614  0644  0B89               	decfsz	9,f
  3615  0645  2E43               	goto	u1405
  3616  0646  0863               	movf	??_writeGPIO^(0+128),w
  3617  0647  3AFF               	xorlw	255
  3618  0648  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3619  0649  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3620  064A  0022               	movlb	2	; select bank2
  3621  064B  058C               	andwf	12,f	;volatile
  3622  064C  2E71               	goto	l316
  3623  064D                     l2044:
  3624  064D  0365               	decf	writeGPIO@portType^(0+128),w
  3625  064E  1D03               	btfss	3,2
  3626  064F  2E51               	goto	u1411
  3627  0650  2E52               	goto	u1410
  3628  0651                     u1411:
  3629  0651  2E71               	goto	l316
  3630  0652                     u1410:
  3631  0652                     l2046:
  3632                           
  3633                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3634  0652  0862               	movf	writeGPIO@writeValue^(0+128),w
  3635  0653  1903               	btfsc	3,2
  3636  0654  2E56               	goto	u1421
  3637  0655  2E57               	goto	u1420
  3638  0656                     u1421:
  3639  0656  2E64               	goto	l2050
  3640  0657                     u1420:
  3641  0657                     l2048:
  3642  0657  3001               	movlw	1
  3643  0658  00E3               	movwf	??_writeGPIO^(0+128)
  3644  0659  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3645  065A  2E5C               	goto	u1434
  3646  065B                     u1435:
  3647  065B  35E3               	lslf	??_writeGPIO^(0+128),f
  3648  065C                     u1434:
  3649  065C  0B89               	decfsz	9,f
  3650  065D  2E5B               	goto	u1435
  3651  065E  0863               	movf	??_writeGPIO^(0+128),w
  3652  065F  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3653  0660  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3654  0661  0022               	movlb	2	; select bank2
  3655  0662  048D               	iorwf	13,f	;volatile
  3656  0663  2E71               	goto	l316
  3657  0664                     l2050:
  3658  0664  3001               	movlw	1
  3659  0665  00E3               	movwf	??_writeGPIO^(0+128)
  3660  0666  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3661  0667  2E69               	goto	u1444
  3662  0668                     u1445:
  3663  0668  35E3               	lslf	??_writeGPIO^(0+128),f
  3664  0669                     u1444:
  3665  0669  0B89               	decfsz	9,f
  3666  066A  2E68               	goto	u1445
  3667  066B  0863               	movf	??_writeGPIO^(0+128),w
  3668  066C  3AFF               	xorlw	255
  3669  066D  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3670  066E  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3671  066F  0022               	movlb	2	; select bank2
  3672  0670  058D               	andwf	13,f	;volatile
  3673  0671                     l316:
  3674  0671  0008               	return
  3675  0672                     __end_of_writeGPIO:
  3676                           
  3677                           	psect	text12
  3678  0C6A                     __ptext12:	
  3679 ;; *************** function _initialiseController *****************
  3680 ;; Defined at:
  3681 ;;		line 23 in file "Controller.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3695 ;;      Params:         0       0       0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0
  3698 ;;      Totals:         0       0       0       0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used: 1
  3701 ;; Hardware stack levels required when called: 6
  3702 ;; This function calls:
  3703 ;;		_initialiseADCPin
  3704 ;;		_initialiseGPIO
  3705 ;; This function is called by:
  3706 ;;		_main
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710  0C6A                     _initialiseController:	
  3711                           ;psect for function _initialiseController
  3712                           
  3713  0C6A                     l2634:	
  3714                           ;incstack = 0
  3715                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3716                           
  3717                           
  3718                           ;Controller.c: 24:     initialiseGPIO(pinRA4, 1);
  3719  0C6A  0021               	movlb	1	; select bank1
  3720  0C6B  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3721  0C6C  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3722  0C6D  3004               	movlw	4
  3723  0C6E  3185  2536  318C   	fcall	_initialiseGPIO
  3724                           
  3725                           ;Controller.c: 25:     initialiseADCPin(pinRA4);
  3726  0C71  3004               	movlw	4
  3727  0C72  3185  25AC  318C   	fcall	_initialiseADCPin
  3728  0C75                     l430:
  3729  0C75  0008               	return
  3730  0C76                     __end_of_initialiseController:
  3731                           
  3732                           	psect	text13
  3733  0536                     __ptext13:	
  3734 ;; *************** function _initialiseGPIO *****************
  3735 ;; Defined at:
  3736 ;;		line 18 in file "GPIO.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  gpioNumber      1    wreg     const enum E2798
  3739 ;;  direction       1    0[BANK1 ] unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3742 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3743 ;;  portType        1    3[BANK1 ] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3753 ;;      Params:         0       0       1       0       0       0
  3754 ;;      Locals:         0       0       3       0       0       0
  3755 ;;      Temps:          0       0       2       0       0       0
  3756 ;;      Totals:         0       0       6       0       0       0
  3757 ;;Total ram usage:        6 bytes
  3758 ;; Hardware stack levels used: 1
  3759 ;; Hardware stack levels required when called: 5
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;;		_setupPWM
  3765 ;;		_initialiseController
  3766 ;;		_initialiseCurrentSensors
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770  0536                     _initialiseGPIO:	
  3771                           ;psect for function _initialiseGPIO
  3772                           
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3776                           ;initialiseGPIO@gpioNumber stored from wreg
  3777  0536  0021               	movlb	1	; select bank1
  3778  0537  00E6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3779  0538                     l2152:
  3780                           
  3781                           ;GPIO.c: 20:     uint8_t portType = 0;
  3782  0538  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3783  0539                     l2154:
  3784                           
  3785                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3786  0539  3008               	movlw	8
  3787  053A  0266               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3788  053B  1C03               	skipc
  3789  053C  2D3E               	goto	u1641
  3790  053D  2D3F               	goto	u1640
  3791  053E                     u1641:
  3792  053E  2D47               	goto	l2160
  3793  053F                     u1640:
  3794  053F                     l2156:
  3795                           
  3796                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3797  053F  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3798  0540  3EF8               	addlw	248
  3799  0541  00E3               	movwf	??_initialiseGPIO^(0+128)
  3800  0542  0863               	movf	??_initialiseGPIO^(0+128),w
  3801  0543  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3802  0544                     l2158:
  3803                           
  3804                           ;GPIO.c: 23:         portType = 1;
  3805  0544  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3806  0545  0AE5               	incf	initialiseGPIO@portType^(0+128),f
  3807                           
  3808                           ;GPIO.c: 24:     }
  3809  0546  2D4C               	goto	l2164
  3810  0547                     l2160:
  3811                           
  3812                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3813  0547  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3814  0548  00E3               	movwf	??_initialiseGPIO^(0+128)
  3815  0549  0863               	movf	??_initialiseGPIO^(0+128),w
  3816  054A  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3817  054B                     l2162:
  3818                           
  3819                           ;GPIO.c: 27:         portType = 0;
  3820  054B  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3821  054C                     l2164:
  3822                           
  3823                           ;GPIO.c: 30:     if(portType == 0){
  3824  054C  0865               	movf	initialiseGPIO@portType^(0+128),w
  3825  054D  1D03               	btfss	3,2
  3826  054E  2D50               	goto	u1651
  3827  054F  2D51               	goto	u1650
  3828  0550                     u1651:
  3829  0550  2D7C               	goto	l2172
  3830  0551                     u1650:
  3831  0551                     l2166:
  3832                           
  3833                           ;GPIO.c: 31:         if(direction){
  3834  0551  0862               	movf	initialiseGPIO@direction^(0+128),w
  3835  0552  1903               	btfsc	3,2
  3836  0553  2D55               	goto	u1661
  3837  0554  2D56               	goto	u1660
  3838  0555                     u1661:
  3839  0555  2D6F               	goto	l2170
  3840  0556                     u1660:
  3841  0556                     l2168:
  3842                           
  3843                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3844  0556  3001               	movlw	1
  3845  0557  00E3               	movwf	??_initialiseGPIO^(0+128)
  3846  0558  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3847  0559  2D5B               	goto	u1674
  3848  055A                     u1675:
  3849  055A  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3850  055B                     u1674:
  3851  055B  0B89               	decfsz	9,f
  3852  055C  2D5A               	goto	u1675
  3853  055D  0863               	movf	??_initialiseGPIO^(0+128),w
  3854  055E  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3855  055F  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3856  0560  048C               	iorwf	12,f	;volatile
  3857                           
  3858                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3859  0561  3001               	movlw	1
  3860  0562  00E3               	movwf	??_initialiseGPIO^(0+128)
  3861  0563  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3862  0564  2D66               	goto	u1684
  3863  0565                     u1685:
  3864  0565  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3865  0566                     u1684:
  3866  0566  0B89               	decfsz	9,f
  3867  0567  2D65               	goto	u1685
  3868  0568  0863               	movf	??_initialiseGPIO^(0+128),w
  3869  0569  3AFF               	xorlw	255
  3870  056A  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3871  056B  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3872  056C  0023               	movlb	3	; select bank3
  3873  056D  058C               	andwf	12,f	;volatile
  3874                           
  3875                           ;GPIO.c: 34:         }
  3876  056E  2DAB               	goto	l302
  3877  056F                     l2170:
  3878  056F  3001               	movlw	1
  3879  0570  00E3               	movwf	??_initialiseGPIO^(0+128)
  3880  0571  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3881  0572  2D74               	goto	u1694
  3882  0573                     u1695:
  3883  0573  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3884  0574                     u1694:
  3885  0574  0B89               	decfsz	9,f
  3886  0575  2D73               	goto	u1695
  3887  0576  0863               	movf	??_initialiseGPIO^(0+128),w
  3888  0577  3AFF               	xorlw	255
  3889  0578  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3890  0579  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3891  057A  058C               	andwf	12,f	;volatile
  3892  057B  2DAB               	goto	l302
  3893  057C                     l2172:
  3894  057C  0365               	decf	initialiseGPIO@portType^(0+128),w
  3895  057D  1D03               	btfss	3,2
  3896  057E  2D80               	goto	u1701
  3897  057F  2D81               	goto	u1700
  3898  0580                     u1701:
  3899  0580  2DAB               	goto	l302
  3900  0581                     u1700:
  3901  0581                     l2174:
  3902                           
  3903                           ;GPIO.c: 38:         if(direction){
  3904  0581  0862               	movf	initialiseGPIO@direction^(0+128),w
  3905  0582  1903               	btfsc	3,2
  3906  0583  2D85               	goto	u1711
  3907  0584  2D86               	goto	u1710
  3908  0585                     u1711:
  3909  0585  2D9F               	goto	l2178
  3910  0586                     u1710:
  3911  0586                     l2176:
  3912                           
  3913                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3914  0586  3001               	movlw	1
  3915  0587  00E3               	movwf	??_initialiseGPIO^(0+128)
  3916  0588  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3917  0589  2D8B               	goto	u1724
  3918  058A                     u1725:
  3919  058A  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3920  058B                     u1724:
  3921  058B  0B89               	decfsz	9,f
  3922  058C  2D8A               	goto	u1725
  3923  058D  0863               	movf	??_initialiseGPIO^(0+128),w
  3924  058E  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3925  058F  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3926  0590  048D               	iorwf	13,f	;volatile
  3927                           
  3928                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3929  0591  3001               	movlw	1
  3930  0592  00E3               	movwf	??_initialiseGPIO^(0+128)
  3931  0593  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3932  0594  2D96               	goto	u1734
  3933  0595                     u1735:
  3934  0595  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3935  0596                     u1734:
  3936  0596  0B89               	decfsz	9,f
  3937  0597  2D95               	goto	u1735
  3938  0598  0863               	movf	??_initialiseGPIO^(0+128),w
  3939  0599  3AFF               	xorlw	255
  3940  059A  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3941  059B  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3942  059C  0023               	movlb	3	; select bank3
  3943  059D  058D               	andwf	13,f	;volatile
  3944                           
  3945                           ;GPIO.c: 41:         }
  3946  059E  2DAB               	goto	l302
  3947  059F                     l2178:
  3948  059F  3001               	movlw	1
  3949  05A0  00E3               	movwf	??_initialiseGPIO^(0+128)
  3950  05A1  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3951  05A2  2DA4               	goto	u1744
  3952  05A3                     u1745:
  3953  05A3  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3954  05A4                     u1744:
  3955  05A4  0B89               	decfsz	9,f
  3956  05A5  2DA3               	goto	u1745
  3957  05A6  0863               	movf	??_initialiseGPIO^(0+128),w
  3958  05A7  3AFF               	xorlw	255
  3959  05A8  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3960  05A9  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3961  05AA  058D               	andwf	13,f	;volatile
  3962  05AB                     l302:
  3963  05AB  0008               	return
  3964  05AC                     __end_of_initialiseGPIO:
  3965                           
  3966                           	psect	text14
  3967  05AC                     __ptext14:	
  3968 ;; *************** function _initialiseADCPin *****************
  3969 ;; Defined at:
  3970 ;;		line 37 in file "ADC.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  gpioNumber      1    wreg     const enum E2798
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  3975 ;;  portNumber      1    4[BANK1 ] unsigned char 
  3976 ;;  portType        1    3[BANK1 ] unsigned char 
  3977 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3987 ;;      Params:         0       0       0       0       0       0
  3988 ;;      Locals:         0       0       4       0       0       0
  3989 ;;      Temps:          0       0       2       0       0       0
  3990 ;;      Totals:         0       0       6       0       0       0
  3991 ;;Total ram usage:        6 bytes
  3992 ;; Hardware stack levels used: 1
  3993 ;; Hardware stack levels required when called: 5
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_initialisePotentiometers
  3998 ;;		_initialiseController
  3999 ;;		_initialiseCurrentSensors
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003  05AC                     _initialiseADCPin:	
  4004                           ;psect for function _initialiseADCPin
  4005                           
  4006                           
  4007                           ;incstack = 0
  4008                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4009                           ;initialiseADCPin@gpioNumber stored from wreg
  4010  05AC  0021               	movlb	1	; select bank1
  4011  05AD  00E7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4012  05AE                     l2180:
  4013                           
  4014                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4015  05AE  01E6               	clrf	initialiseADCPin@portNumber^(0+128)
  4016                           
  4017                           ;ADC.c: 40:     uint8_t portType = 0;
  4018  05AF  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4019                           
  4020                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4021  05B0  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4022  05B1                     l2182:
  4023                           
  4024                           ;ADC.c: 43:     if(gpioNumber < 4){
  4025  05B1  3004               	movlw	4
  4026  05B2  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4027  05B3  1803               	skipnc
  4028  05B4  2DB6               	goto	u1751
  4029  05B5  2DB7               	goto	u1750
  4030  05B6                     u1751:
  4031  05B6  2DBE               	goto	l2190
  4032  05B7                     u1750:
  4033  05B7                     l2184:
  4034                           
  4035                           ;ADC.c: 44:         portNumber = gpioNumber;
  4036  05B7  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4037  05B8  00E2               	movwf	??_initialiseADCPin^(0+128)
  4038  05B9  0862               	movf	??_initialiseADCPin^(0+128),w
  4039  05BA  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4040  05BB                     l2186:
  4041                           
  4042                           ;ADC.c: 45:         portType = 0;
  4043  05BB  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4044  05BC                     l2188:
  4045                           
  4046                           ;ADC.c: 46:         gpioValid = 1;
  4047  05BC  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4048  05BD  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4049  05BE                     l2190:
  4050                           
  4051                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4052  05BE  3009               	movlw	9
  4053  05BF  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4054  05C0  1C03               	skipc
  4055  05C1  2DC3               	goto	u1761
  4056  05C2  2DC4               	goto	u1760
  4057  05C3                     u1761:
  4058  05C3  2DD3               	goto	l234
  4059  05C4                     u1760:
  4060  05C4                     l2192:
  4061  05C4  3010               	movlw	16
  4062  05C5  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4063  05C6  1803               	skipnc
  4064  05C7  2DC9               	goto	u1771
  4065  05C8  2DCA               	goto	u1770
  4066  05C9                     u1771:
  4067  05C9  2DD3               	goto	l234
  4068  05CA                     u1770:
  4069  05CA                     l2194:
  4070                           
  4071                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4072  05CA  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4073  05CB  3EF8               	addlw	248
  4074  05CC  00E2               	movwf	??_initialiseADCPin^(0+128)
  4075  05CD  0862               	movf	??_initialiseADCPin^(0+128),w
  4076  05CE  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4077  05CF                     l2196:
  4078                           
  4079                           ;ADC.c: 51:         portType = 1;
  4080  05CF  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4081  05D0  0AE5               	incf	initialiseADCPin@portType^(0+128),f
  4082  05D1                     l2198:
  4083                           
  4084                           ;ADC.c: 52:         gpioValid = 1;
  4085  05D1  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4086  05D2  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4087  05D3                     l234:	
  4088                           ;ADC.c: 53:     }
  4089                           
  4090                           
  4091                           ;ADC.c: 55:     if(gpioValid){
  4092  05D3  0864               	movf	initialiseADCPin@gpioValid^(0+128),w
  4093  05D4  1903               	btfsc	3,2
  4094  05D5  2DD7               	goto	u1781
  4095  05D6  2DD8               	goto	u1780
  4096  05D7                     u1781:
  4097  05D7  2E11               	goto	l239
  4098  05D8                     u1780:
  4099  05D8                     l2200:
  4100                           
  4101                           ;ADC.c: 56:         if(portType == 0){
  4102  05D8  0865               	movf	initialiseADCPin@portType^(0+128),w
  4103  05D9  1D03               	btfss	3,2
  4104  05DA  2DDC               	goto	u1791
  4105  05DB  2DDD               	goto	u1790
  4106  05DC                     u1791:
  4107  05DC  2DF5               	goto	l2204
  4108  05DD                     u1790:
  4109  05DD                     l2202:
  4110                           
  4111                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4112  05DD  3001               	movlw	1
  4113  05DE  00E2               	movwf	??_initialiseADCPin^(0+128)
  4114  05DF  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4115  05E0  2DE2               	goto	u1804
  4116  05E1                     u1805:
  4117  05E1  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4118  05E2                     u1804:
  4119  05E2  0B89               	decfsz	9,f
  4120  05E3  2DE1               	goto	u1805
  4121  05E4  0862               	movf	??_initialiseADCPin^(0+128),w
  4122  05E5  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4123  05E6  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4124  05E7  048C               	iorwf	12,f	;volatile
  4125                           
  4126                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4127  05E8  3001               	movlw	1
  4128  05E9  00E2               	movwf	??_initialiseADCPin^(0+128)
  4129  05EA  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4130  05EB  2DED               	goto	u1814
  4131  05EC                     u1815:
  4132  05EC  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4133  05ED                     u1814:
  4134  05ED  0B89               	decfsz	9,f
  4135  05EE  2DEC               	goto	u1815
  4136  05EF  0862               	movf	??_initialiseADCPin^(0+128),w
  4137  05F0  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4138  05F1  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4139  05F2  0023               	movlb	3	; select bank3
  4140  05F3  048C               	iorwf	12,f	;volatile
  4141                           
  4142                           ;ADC.c: 59:         }
  4143  05F4  2E11               	goto	l239
  4144  05F5                     l2204:
  4145  05F5  0365               	decf	initialiseADCPin@portType^(0+128),w
  4146  05F6  1D03               	btfss	3,2
  4147  05F7  2DF9               	goto	u1821
  4148  05F8  2DFA               	goto	u1820
  4149  05F9                     u1821:
  4150  05F9  2E11               	goto	l239
  4151  05FA                     u1820:
  4152  05FA                     l2206:
  4153                           
  4154                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4155  05FA  3001               	movlw	1
  4156  05FB  00E2               	movwf	??_initialiseADCPin^(0+128)
  4157  05FC  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4158  05FD  2DFF               	goto	u1834
  4159  05FE                     u1835:
  4160  05FE  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4161  05FF                     u1834:
  4162  05FF  0B89               	decfsz	9,f
  4163  0600  2DFE               	goto	u1835
  4164  0601  0862               	movf	??_initialiseADCPin^(0+128),w
  4165  0602  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4166  0603  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4167  0604  048D               	iorwf	13,f	;volatile
  4168                           
  4169                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4170  0605  3001               	movlw	1
  4171  0606  00E2               	movwf	??_initialiseADCPin^(0+128)
  4172  0607  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4173  0608  2E0A               	goto	u1844
  4174  0609                     u1845:
  4175  0609  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4176  060A                     u1844:
  4177  060A  0B89               	decfsz	9,f
  4178  060B  2E09               	goto	u1845
  4179  060C  0862               	movf	??_initialiseADCPin^(0+128),w
  4180  060D  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4181  060E  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4182  060F  0023               	movlb	3	; select bank3
  4183  0610  048D               	iorwf	13,f	;volatile
  4184  0611                     l239:
  4185  0611  0008               	return
  4186  0612                     __end_of_initialiseADCPin:
  4187                           
  4188                           	psect	text15
  4189  0C21                     __ptext15:	
  4190 ;; *************** function _initialiseADCModule *****************
  4191 ;; Defined at:
  4192 ;;		line 14 in file "ADC.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4206 ;;      Params:         0       0       0       0       0       0
  4207 ;;      Locals:         0       0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0
  4209 ;;      Totals:         0       0       0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used: 1
  4212 ;; Hardware stack levels required when called: 5
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220  0C21                     _initialiseADCModule:	
  4221                           ;psect for function _initialiseADCModule
  4222                           
  4223  0C21                     l2628:	
  4224                           ;incstack = 0
  4225                           ; Regs used in _initialiseADCModule: [wreg]
  4226                           
  4227                           
  4228                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4229  0C21  3001               	movlw	1
  4230  0C22  0021               	movlb	1	; select bank1
  4231  0C23  009D               	movwf	29	;volatile
  4232                           
  4233                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4234  0C24  3090               	movlw	144
  4235  0C25  009E               	movwf	30	;volatile
  4236  0C26                     l230:
  4237  0C26  0008               	return
  4238  0C27                     __end_of_initialiseADCModule:
  4239                           
  4240                           	psect	intentry
  4241  0004                     __pintentry:	
  4242 ;; *************** function _Tick490Hz *****************
  4243 ;; Defined at:
  4244 ;;		line 42 in file "main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4258 ;;      Params:         0       0       0       0       0       0
  4259 ;;      Locals:         0       0       0       0       0       0
  4260 ;;      Temps:          0       1       0       0       0       0
  4261 ;;      Totals:         0       1       0       0       0       0
  4262 ;;Total ram usage:        1 bytes
  4263 ;; Hardware stack levels used: 1
  4264 ;; Hardware stack levels required when called: 4
  4265 ;; This function calls:
  4266 ;;		_controlRoutine
  4267 ;;		_currentTripMonitor
  4268 ;;		_readFilteredDutyPot
  4269 ;;		_readFilteredFreqPot
  4270 ;;		_readFilteredIL
  4271 ;;		_readFilteredVout
  4272 ;;		_runPotScaling
  4273 ;;		_setPWMDutyandPeriod
  4274 ;;		i1_writeGPIO
  4275 ;; This function is called by:
  4276 ;;		Interrupt level 1
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280  0004                     _Tick490Hz:
  4281                           
  4282                           ;incstack = 0
  4283  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4284                           
  4285                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4286  0005  3180               	pagesel	$
  4287  0006                     i1l2682:
  4288                           
  4289                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4290  0006  01F0               	clrf	i1writeGPIO@writeValue
  4291  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4292  0008  300C               	movlw	12
  4293  0009  3186  2672  3180   	fcall	i1_writeGPIO
  4294                           
  4295                           ;main.c: 54:         currentTripMonitor();
  4296  000C  318C  24F7  3180   	fcall	_currentTripMonitor
  4297                           
  4298                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4299  000F  0020               	movlb	0	; select bank0
  4300  0010  0864               	movf	_setDuty+1,w
  4301  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4302  0012  0863               	movf	_setDuty,w
  4303  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4304  0014  086E               	movf	_setPeriod,w
  4305  0015  00DC               	movwf	??_Tick490Hz
  4306  0016  085C               	movf	??_Tick490Hz,w
  4307  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4308  0018  318D  251B  3180   	fcall	_setPWMDutyandPeriod
  4309  001B                     i1l2684:
  4310                           
  4311                           ;main.c: 58:         if(timerSlotHalf == 0){
  4312  001B  0020               	movlb	0	; select bank0
  4313  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4314  001D  1D03               	btfss	3,2
  4315  001E  2820               	goto	u243_21
  4316  001F  2821               	goto	u243_20
  4317  0020                     u243_21:
  4318  0020  2829               	goto	i1l2690
  4319  0021                     u243_20:
  4320  0021                     i1l2686:
  4321                           
  4322                           ;main.c: 60:             controlRoutine();
  4323  0021  3182  2298  3180   	fcall	_controlRoutine
  4324  0024                     i1l2688:
  4325                           
  4326                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4327  0024  01F0               	clrf	i1writeGPIO@writeValue
  4328  0025  300C               	movlw	12
  4329  0026  3186  2672  3180   	fcall	i1_writeGPIO
  4330  0029                     i1l2690:
  4331                           
  4332                           ;main.c: 64:         if(timerSlotHalf == 1){
  4333  0029  0020               	movlb	0	; select bank0
  4334  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4335  002B  1D03               	btfss	3,2
  4336  002C  282E               	goto	u244_21
  4337  002D  282F               	goto	u244_20
  4338  002E                     u244_21:
  4339  002E  2878               	goto	i1l2712
  4340  002F                     u244_20:
  4341  002F                     i1l2692:
  4342                           
  4343                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4344  002F  01F0               	clrf	i1writeGPIO@writeValue
  4345  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4346  0031  300D               	movlw	13
  4347  0032  3186  2672  3180   	fcall	i1_writeGPIO
  4348  0035                     i1l2694:
  4349                           
  4350                           ;main.c: 67:             filteredIL = readFilteredIL();
  4351  0035  318E  26F3  3180   	fcall	_readFilteredIL
  4352  0038  0871               	movf	?_readFilteredIL+1,w
  4353  0039  0020               	movlb	0	; select bank0
  4354  003A  00E0               	movwf	_filteredIL+1
  4355  003B  0870               	movf	?_readFilteredIL,w
  4356  003C  00DF               	movwf	_filteredIL
  4357  003D                     i1l2696:
  4358                           
  4359                           ;main.c: 69:             filteredVout = readFilteredVout();
  4360  003D  3186  26D1  3180   	fcall	_readFilteredVout
  4361  0040  087B               	movf	?_readFilteredVout+1,w
  4362  0041  0020               	movlb	0	; select bank0
  4363  0042  00DE               	movwf	_filteredVout+1
  4364  0043  087A               	movf	?_readFilteredVout,w
  4365  0044  00DD               	movwf	_filteredVout
  4366  0045                     i1l2698:
  4367                           
  4368                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4369  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4370  0046  1D03               	btfss	3,2
  4371  0047  2849               	goto	u245_21
  4372  0048  284A               	goto	u245_20
  4373  0049                     u245_21:
  4374  0049  284D               	goto	i1l2702
  4375  004A                     u245_20:
  4376  004A                     i1l2700:
  4377                           
  4378                           ;main.c: 74:                 runPotScaling();
  4379  004A  3183  2392  3180   	fcall	_runPotScaling
  4380  004D                     i1l2702:
  4381                           
  4382                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4383  004D  0020               	movlb	0	; select bank0
  4384  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4385  004F  1D03               	btfss	3,2
  4386  0050  2852               	goto	u246_21
  4387  0051  2853               	goto	u246_20
  4388  0052                     u246_21:
  4389  0052  2863               	goto	i1l2706
  4390  0053                     u246_20:
  4391  0053                     i1l2704:
  4392                           
  4393                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4394  0053  3187  2787  3180   	fcall	_readFilteredDutyPot
  4395  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4396  0057  0022               	movlb	2	; select bank2
  4397  0058  00E1               	movwf	(_filteredDutyPot+1)^(0+256)
  4398  0059  087A               	movf	?_readFilteredDutyPot,w
  4399  005A  00E0               	movwf	_filteredDutyPot^(0+256)
  4400                           
  4401                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4402  005B  3187  272C  3180   	fcall	_readFilteredFreqPot
  4403  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4404  005F  0021               	movlb	1	; select bank1
  4405  0060  00C1               	movwf	(_filteredFreqPot+1)^(0+128)
  4406  0061  087A               	movf	?_readFilteredFreqPot,w
  4407  0062  00C0               	movwf	_filteredFreqPot^(0+128)
  4408  0063                     i1l2706:
  4409                           
  4410                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4411  0063  0020               	movlb	0	; select bank0
  4412  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4413  0065  1D03               	btfss	3,2
  4414  0066  2868               	goto	u247_21
  4415  0067  286A               	goto	u247_20
  4416  0068                     u247_21:
  4417  0068  3001               	movlw	1
  4418  0069  286B               	goto	u248_20
  4419  006A                     u247_20:
  4420  006A  3000               	movlw	0
  4421  006B                     u248_20:
  4422  006B  00DC               	movwf	??_Tick490Hz
  4423  006C  085C               	movf	??_Tick490Hz,w
  4424  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4425  006E                     i1l2708:
  4426                           
  4427                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4428  006E  01F0               	clrf	i1writeGPIO@writeValue
  4429  006F  300C               	movlw	12
  4430  0070  3186  2672  3180   	fcall	i1_writeGPIO
  4431  0073                     i1l2710:
  4432                           
  4433                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4434  0073  01F0               	clrf	i1writeGPIO@writeValue
  4435  0074  300D               	movlw	13
  4436  0075  3186  2672  3180   	fcall	i1_writeGPIO
  4437  0078                     i1l2712:
  4438                           
  4439                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4440  0078  0020               	movlb	0	; select bank0
  4441  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4442  007A  1D03               	btfss	3,2
  4443  007B  287D               	goto	u249_21
  4444  007C  287F               	goto	u249_20
  4445  007D                     u249_21:
  4446  007D  3001               	movlw	1
  4447  007E  2880               	goto	u250_20
  4448  007F                     u249_20:
  4449  007F  3000               	movlw	0
  4450  0080                     u250_20:
  4451  0080  00DC               	movwf	??_Tick490Hz
  4452  0081  085C               	movf	??_Tick490Hz,w
  4453  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4454  0083                     i1l2714:
  4455                           
  4456                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4457  0083  110B               	bcf	11,2	;volatile
  4458  0084                     i1l106:
  4459  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4460  0085  0009               	retfie
  4461  0086                     __end_of_Tick490Hz:
  4462                           
  4463                           	psect	text17
  4464  0D1B                     __ptext17:	
  4465 ;; *************** function _setPWMDutyandPeriod *****************
  4466 ;; Defined at:
  4467 ;;		line 49 in file "PWM.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4470 ;;  period          1    2[COMMON] unsigned char 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4482 ;;      Params:         3       0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0       0
  4484 ;;      Temps:          2       0       0       0       0       0
  4485 ;;      Totals:         5       0       0       0       0       0
  4486 ;;Total ram usage:        5 bytes
  4487 ;; Hardware stack levels used: 1
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_Tick490Hz
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495  0D1B                     _setPWMDutyandPeriod:	
  4496                           ;psect for function _setPWMDutyandPeriod
  4497                           
  4498  0D1B                     i1l2348:	
  4499                           ;incstack = 0
  4500                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4501                           
  4502                           
  4503                           ;PWM.c: 50:     PR2 = period;
  4504  0D1B  0872               	movf	setPWMDutyandPeriod@period,w
  4505  0D1C  0020               	movlb	0	; select bank0
  4506  0D1D  009B               	movwf	27	;volatile
  4507  0D1E                     i1l2350:
  4508                           
  4509                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4510  0D1E  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4511  0D1F  00F4               	movwf	??_setPWMDutyandPeriod+1
  4512  0D20  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4513  0D21  00F3               	movwf	??_setPWMDutyandPeriod
  4514  0D22  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4515  0D23  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4516  0D24  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4517  0D25  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4518  0D26  0873               	movf	??_setPWMDutyandPeriod,w
  4519  0D27  0025               	movlb	5	; select bank5
  4520  0D28  0091               	movwf	17	;volatile
  4521  0D29                     i1l2352:
  4522                           
  4523                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4524  0D29  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4525  0D2A  3901               	andlw	1
  4526  0D2B  00F3               	movwf	??_setPWMDutyandPeriod
  4527  0D2C  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4528  0D2D  0813               	movf	19,w	;volatile
  4529  0D2E  0673               	xorwf	??_setPWMDutyandPeriod,w
  4530  0D2F  39EF               	andlw	-17
  4531  0D30  0673               	xorwf	??_setPWMDutyandPeriod,w
  4532  0D31  0093               	movwf	19	;volatile
  4533                           
  4534                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4535  0D32  3002               	movlw	2
  4536  0D33  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4537  0D34  00F3               	movwf	??_setPWMDutyandPeriod
  4538  0D35  3000               	movlw	0
  4539  0D36  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4540  0D37  00F4               	movwf	??_setPWMDutyandPeriod+1
  4541  0D38  3000               	movlw	0
  4542  0D39  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4543  0D3A  3002               	movlw	2
  4544  0D3B  1903               	skipnz
  4545  0D3C  0273               	subwf	??_setPWMDutyandPeriod,w
  4546  0D3D  1803               	skipnc
  4547  0D3E  2D40               	goto	u214_21
  4548  0D3F  2D43               	goto	u214_20
  4549  0D40                     u214_21:
  4550  0D40  0025               	movlb	5	; select bank5
  4551  0D41  1693               	bsf	19,5	;volatile
  4552  0D42  2D45               	goto	u215_24
  4553  0D43                     u214_20:
  4554  0D43  0025               	movlb	5	; select bank5
  4555  0D44  1293               	bcf	19,5	;volatile
  4556  0D45                     u215_24:
  4557  0D45                     i1l173:
  4558  0D45  0008               	return
  4559  0D46                     __end_of_setPWMDutyandPeriod:
  4560                           
  4561                           	psect	text18
  4562  0392                     __ptext18:	
  4563 ;; *************** function _runPotScaling *****************
  4564 ;; Defined at:
  4565 ;;		line 55 in file "Potentiometer.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;		None
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4570 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4580 ;;      Params:         0       0       0       0       0       0
  4581 ;;      Locals:         0       4       0       0       0       0
  4582 ;;      Temps:          0       8       0       0       0       0
  4583 ;;      Totals:         0      12       0       0       0       0
  4584 ;;Total ram usage:       12 bytes
  4585 ;; Hardware stack levels used: 1
  4586 ;; Hardware stack levels required when called: 1
  4587 ;; This function calls:
  4588 ;;		___lldiv
  4589 ;;		___lmul
  4590 ;;		___wmul
  4591 ;; This function is called by:
  4592 ;;		_Tick490Hz
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596  0392                     _runPotScaling:	
  4597                           ;psect for function _runPotScaling
  4598                           
  4599  0392                     i1l2444:	
  4600                           ;incstack = 0
  4601                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4602                           
  4603                           
  4604                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4605  0392  0020               	movlb	0	; select bank0
  4606  0393  036C               	decf	_currentState,w
  4607  0394  1D03               	btfss	3,2
  4608  0395  2B97               	goto	u226_21
  4609  0396  2B98               	goto	u226_20
  4610  0397                     u226_21:
  4611  0397  2C70               	goto	i1l375
  4612  0398                     u226_20:
  4613  0398                     i1l2446:
  4614                           
  4615                           ;Potentiometer.c: 58:         potSetCount++;
  4616  0398  3001               	movlw	1
  4617  0399  00A6               	movwf	??_runPotScaling
  4618  039A  0826               	movf	??_runPotScaling,w
  4619  039B  07E8               	addwf	_potSetCount,f
  4620                           
  4621                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4622  039C  3020               	movlw	32
  4623  039D  0668               	xorwf	_potSetCount,w
  4624  039E  1D03               	btfss	3,2
  4625  039F  2BA1               	goto	u227_21
  4626  03A0  2BA2               	goto	u227_20
  4627  03A1                     u227_21:
  4628  03A1  2C70               	goto	i1l375
  4629  03A2                     u227_20:
  4630  03A2                     i1l2448:
  4631                           
  4632                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 45) * (uint
      +                          32_t)(159u - 15u)) >> 10 ) + 15u;
  4633  03A2  0021               	movlb	1	; select bank1
  4634  03A3  0840               	movf	_filteredFreqPot^(0+128),w
  4635  03A4  3ED3               	addlw	211
  4636  03A5  00F0               	movwf	___lmul@multiplier
  4637  03A6  30FF               	movlw	255
  4638  03A7  3D41               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4639  03A8  00F1               	movwf	___lmul@multiplier+1
  4640  03A9  01F2               	clrf	___lmul@multiplier+2
  4641  03AA  01F3               	clrf	___lmul@multiplier+3
  4642  03AB  3000               	movlw	0
  4643  03AC  00F7               	movwf	___lmul@multiplicand+3
  4644  03AD  3000               	movlw	0
  4645  03AE  00F6               	movwf	___lmul@multiplicand+2
  4646  03AF  3000               	movlw	0
  4647  03B0  00F5               	movwf	___lmul@multiplicand+1
  4648  03B1  3090               	movlw	144
  4649  03B2  00F4               	movwf	___lmul@multiplicand
  4650  03B3  318D  2573  3183   	fcall	___lmul
  4651  03B6  0870               	movf	?___lmul,w
  4652  03B7  0020               	movlb	0	; select bank0
  4653  03B8  00A6               	movwf	??_runPotScaling
  4654  03B9  0871               	movf	?___lmul+1,w
  4655  03BA  00A7               	movwf	??_runPotScaling+1
  4656  03BB  0872               	movf	?___lmul+2,w
  4657  03BC  00A8               	movwf	??_runPotScaling+2
  4658  03BD  0873               	movf	?___lmul+3,w
  4659  03BE  00A9               	movwf	??_runPotScaling+3
  4660  03BF  300A               	movlw	10
  4661  03C0                     u228_25:
  4662  03C0  36A9               	lsrf	??_runPotScaling+3,f
  4663  03C1  0CA8               	rrf	??_runPotScaling+2,f
  4664  03C2  0CA7               	rrf	??_runPotScaling+1,f
  4665  03C3  0CA6               	rrf	??_runPotScaling,f
  4666  03C4                     u228_20:
  4667  03C4  0B89               	decfsz	9,f
  4668  03C5  2BC0               	goto	u228_25
  4669  03C6  0826               	movf	??_runPotScaling,w
  4670  03C7  3E0F               	addlw	15
  4671  03C8  00AA               	movwf	??_runPotScaling+4
  4672  03C9  082A               	movf	??_runPotScaling+4,w
  4673  03CA  00EE               	movwf	_setPeriod
  4674                           
  4675                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-45) *
      +                           (uint32_t)setPeriod )) >> 8;
  4676  03CB  0022               	movlb	2	; select bank2
  4677  03CC  0860               	movf	_filteredDutyPot^(0+256),w
  4678  03CD  3ED3               	addlw	211
  4679  03CE  00F0               	movwf	___lmul@multiplier
  4680  03CF  30FF               	movlw	255
  4681  03D0  3D61               	addwfc	(_filteredDutyPot+1)^(0+256),w
  4682  03D1  00F1               	movwf	___lmul@multiplier+1
  4683  03D2  01F2               	clrf	___lmul@multiplier+2
  4684  03D3  01F3               	clrf	___lmul@multiplier+3
  4685  03D4  0020               	movlb	0	; select bank0
  4686  03D5  086E               	movf	_setPeriod,w
  4687  03D6  00A6               	movwf	??_runPotScaling
  4688  03D7  01A7               	clrf	??_runPotScaling+1
  4689  03D8  01A8               	clrf	??_runPotScaling+2
  4690  03D9  01A9               	clrf	??_runPotScaling+3
  4691  03DA  0829               	movf	??_runPotScaling+3,w
  4692  03DB  00F7               	movwf	___lmul@multiplicand+3
  4693  03DC  0828               	movf	??_runPotScaling+2,w
  4694  03DD  00F6               	movwf	___lmul@multiplicand+2
  4695  03DE  0827               	movf	??_runPotScaling+1,w
  4696  03DF  00F5               	movwf	___lmul@multiplicand+1
  4697  03E0  0826               	movf	??_runPotScaling,w
  4698  03E1  00F4               	movwf	___lmul@multiplicand
  4699  03E2  318D  2573  3183   	fcall	___lmul
  4700  03E5  0870               	movf	?___lmul,w
  4701  03E6  0020               	movlb	0	; select bank0
  4702  03E7  00AA               	movwf	??_runPotScaling+4
  4703  03E8  0871               	movf	?___lmul+1,w
  4704  03E9  00AB               	movwf	??_runPotScaling+5
  4705  03EA  0872               	movf	?___lmul+2,w
  4706  03EB  00AC               	movwf	??_runPotScaling+6
  4707  03EC  0873               	movf	?___lmul+3,w
  4708  03ED  00AD               	movwf	??_runPotScaling+7
  4709  03EE  3008               	movlw	8
  4710  03EF                     u229_25:
  4711  03EF  36AD               	lsrf	??_runPotScaling+7,f
  4712  03F0  0CAC               	rrf	??_runPotScaling+6,f
  4713  03F1  0CAB               	rrf	??_runPotScaling+5,f
  4714  03F2  0CAA               	rrf	??_runPotScaling+4,f
  4715  03F3                     u229_20:
  4716  03F3  0B89               	decfsz	9,f
  4717  03F4  2BEF               	goto	u229_25
  4718  03F5  082B               	movf	??_runPotScaling+5,w
  4719  03F6  00E4               	movwf	_setDuty+1
  4720  03F7  082A               	movf	??_runPotScaling+4,w
  4721  03F8  00E3               	movwf	_setDuty
  4722                           
  4723                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4724  03F9  3000               	movlw	0
  4725  03FA  00F9               	movwf	___lldiv@divisor+3
  4726  03FB  3000               	movlw	0
  4727  03FC  00F8               	movwf	___lldiv@divisor+2
  4728  03FD  3000               	movlw	0
  4729  03FE  00F7               	movwf	___lldiv@divisor+1
  4730  03FF  3019               	movlw	25
  4731  0400  00F6               	movwf	___lldiv@divisor
  4732  0401  305A               	movlw	90
  4733  0402  00F2               	movwf	___wmul@multiplicand
  4734  0403  3000               	movlw	0
  4735  0404  00F3               	movwf	___wmul@multiplicand+1
  4736  0405  086E               	movf	_setPeriod,w
  4737  0406  00A6               	movwf	??_runPotScaling
  4738  0407  01A7               	clrf	??_runPotScaling+1
  4739  0408  0826               	movf	??_runPotScaling,w
  4740  0409  00F0               	movwf	___wmul@multiplier
  4741  040A  0827               	movf	??_runPotScaling+1,w
  4742  040B  00F1               	movwf	___wmul@multiplier+1
  4743  040C  318C  24B8  3183   	fcall	___wmul
  4744  040F  0870               	movf	?___wmul,w
  4745  0410  0020               	movlb	0	; select bank0
  4746  0411  00A8               	movwf	??_runPotScaling+2
  4747  0412  0871               	movf	?___wmul+1,w
  4748  0413  00A9               	movwf	??_runPotScaling+3
  4749  0414  01AA               	clrf	??_runPotScaling+4
  4750  0415  01AB               	clrf	??_runPotScaling+5
  4751  0416  082B               	movf	??_runPotScaling+5,w
  4752  0417  00FD               	movwf	___lldiv@dividend+3
  4753  0418  082A               	movf	??_runPotScaling+4,w
  4754  0419  00FC               	movwf	___lldiv@dividend+2
  4755  041A  0829               	movf	??_runPotScaling+3,w
  4756  041B  00FB               	movwf	___lldiv@dividend+1
  4757  041C  0828               	movf	??_runPotScaling+2,w
  4758  041D  00FA               	movwf	___lldiv@dividend
  4759  041E  318F  27A5  3183   	fcall	___lldiv
  4760  0421  0877               	movf	?___lldiv+1,w
  4761  0422  0020               	movlb	0	; select bank0
  4762  0423  00AF               	movwf	runPotScaling@maxDuty+1
  4763  0424  0876               	movf	?___lldiv,w
  4764  0425  00AE               	movwf	runPotScaling@maxDuty
  4765                           
  4766                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4767  0426  3000               	movlw	0
  4768  0427  00F9               	movwf	___lldiv@divisor+3
  4769  0428  3000               	movlw	0
  4770  0429  00F8               	movwf	___lldiv@divisor+2
  4771  042A  3000               	movlw	0
  4772  042B  00F7               	movwf	___lldiv@divisor+1
  4773  042C  3019               	movlw	25
  4774  042D  00F6               	movwf	___lldiv@divisor
  4775  042E  300A               	movlw	10
  4776  042F  00F2               	movwf	___wmul@multiplicand
  4777  0430  3000               	movlw	0
  4778  0431  00F3               	movwf	___wmul@multiplicand+1
  4779  0432  086E               	movf	_setPeriod,w
  4780  0433  00A6               	movwf	??_runPotScaling
  4781  0434  01A7               	clrf	??_runPotScaling+1
  4782  0435  0826               	movf	??_runPotScaling,w
  4783  0436  00F0               	movwf	___wmul@multiplier
  4784  0437  0827               	movf	??_runPotScaling+1,w
  4785  0438  00F1               	movwf	___wmul@multiplier+1
  4786  0439  318C  24B8  3183   	fcall	___wmul
  4787  043C  0870               	movf	?___wmul,w
  4788  043D  0020               	movlb	0	; select bank0
  4789  043E  00A8               	movwf	??_runPotScaling+2
  4790  043F  0871               	movf	?___wmul+1,w
  4791  0440  00A9               	movwf	??_runPotScaling+3
  4792  0441  01AA               	clrf	??_runPotScaling+4
  4793  0442  01AB               	clrf	??_runPotScaling+5
  4794  0443  082B               	movf	??_runPotScaling+5,w
  4795  0444  00FD               	movwf	___lldiv@dividend+3
  4796  0445  082A               	movf	??_runPotScaling+4,w
  4797  0446  00FC               	movwf	___lldiv@dividend+2
  4798  0447  0829               	movf	??_runPotScaling+3,w
  4799  0448  00FB               	movwf	___lldiv@dividend+1
  4800  0449  0828               	movf	??_runPotScaling+2,w
  4801  044A  00FA               	movwf	___lldiv@dividend
  4802  044B  318F  27A5  3183   	fcall	___lldiv
  4803  044E  0877               	movf	?___lldiv+1,w
  4804  044F  0020               	movlb	0	; select bank0
  4805  0450  00B1               	movwf	runPotScaling@minDuty+1
  4806  0451  0876               	movf	?___lldiv,w
  4807  0452  00B0               	movwf	runPotScaling@minDuty
  4808  0453                     i1l2450:
  4809                           
  4810                           ;Potentiometer.c: 69:             if(setDuty > maxDuty) setDuty = maxDuty;
  4811  0453  0864               	movf	_setDuty+1,w
  4812  0454  022F               	subwf	runPotScaling@maxDuty+1,w
  4813  0455  1D03               	skipz
  4814  0456  2C59               	goto	u230_25
  4815  0457  0863               	movf	_setDuty,w
  4816  0458  022E               	subwf	runPotScaling@maxDuty,w
  4817  0459                     u230_25:
  4818  0459  1803               	skipnc
  4819  045A  2C5C               	goto	u230_21
  4820  045B  2C5D               	goto	u230_20
  4821  045C                     u230_21:
  4822  045C  2C61               	goto	i1l373
  4823  045D                     u230_20:
  4824  045D                     i1l2452:
  4825  045D  082F               	movf	runPotScaling@maxDuty+1,w
  4826  045E  00E4               	movwf	_setDuty+1
  4827  045F  082E               	movf	runPotScaling@maxDuty,w
  4828  0460  00E3               	movwf	_setDuty
  4829  0461                     i1l373:
  4830                           
  4831                           ;Potentiometer.c: 70:             if(setDuty < minDuty) setDuty = minDuty;
  4832  0461  0831               	movf	runPotScaling@minDuty+1,w
  4833  0462  0264               	subwf	_setDuty+1,w
  4834  0463  1D03               	skipz
  4835  0464  2C67               	goto	u231_25
  4836  0465  0830               	movf	runPotScaling@minDuty,w
  4837  0466  0263               	subwf	_setDuty,w
  4838  0467                     u231_25:
  4839  0467  1803               	skipnc
  4840  0468  2C6A               	goto	u231_21
  4841  0469  2C6B               	goto	u231_20
  4842  046A                     u231_21:
  4843  046A  2C6F               	goto	i1l2456
  4844  046B                     u231_20:
  4845  046B                     i1l2454:
  4846  046B  0831               	movf	runPotScaling@minDuty+1,w
  4847  046C  00E4               	movwf	_setDuty+1
  4848  046D  0830               	movf	runPotScaling@minDuty,w
  4849  046E  00E3               	movwf	_setDuty
  4850  046F                     i1l2456:
  4851                           
  4852                           ;Potentiometer.c: 72:             potSetCount = 0;
  4853  046F  01E8               	clrf	_potSetCount
  4854  0470                     i1l375:
  4855  0470  0008               	return
  4856  0471                     __end_of_runPotScaling:
  4857                           
  4858                           	psect	text19
  4859  06D1                     __ptext19:	
  4860 ;; *************** function _readFilteredVout *****************
  4861 ;; Defined at:
  4862 ;;		line 33 in file "Controller.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  i               1    8[BANK0 ] unsigned char 
  4867 ;;  i               1    9[BANK0 ] unsigned char 
  4868 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  2   10[COMMON] unsigned short 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4878 ;;      Params:         2       0       0       0       0       0
  4879 ;;      Locals:         0       6       0       0       0       0
  4880 ;;      Temps:          0       4       0       0       0       0
  4881 ;;      Totals:         2      10       0       0       0       0
  4882 ;;Total ram usage:       12 bytes
  4883 ;; Hardware stack levels used: 1
  4884 ;; Hardware stack levels required when called: 1
  4885 ;; This function calls:
  4886 ;;		_readADCRaw
  4887 ;; This function is called by:
  4888 ;;		_Tick490Hz
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892  06D1                     _readFilteredVout:	
  4893                           ;psect for function _readFilteredVout
  4894                           
  4895  06D1                     i1l2412:	
  4896                           ;incstack = 0
  4897                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4898                           
  4899                           
  4900                           ;Controller.c: 34:     for(uint8_t i=0; i<16 -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4901  06D1  0020               	movlb	0	; select bank0
  4902  06D2  01A9               	clrf	readFilteredVout@i
  4903  06D3                     i1l2418:
  4904  06D3  3529               	lslf	readFilteredVout@i,w
  4905  06D4  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4906  06D5  0086               	movwf	6
  4907  06D6  3001               	movlw	1	; select bank3/4
  4908  06D7  0087               	movwf	7
  4909  06D8  3529               	lslf	readFilteredVout@i,w
  4910  06D9  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4911  06DA  0084               	movwf	4
  4912  06DB  3001               	movlw	1	; select bank3/4
  4913  06DC  0085               	movwf	5
  4914  06DD  3F40               	moviw [0]fsr1
  4915  06DE  3F80               	movwi [0]fsr0
  4916  06DF  3F41               	moviw [1]fsr1
  4917  06E0  3F81               	movwi [1]fsr0
  4918  06E1                     i1l2420:
  4919  06E1  3001               	movlw	1
  4920  06E2  00A0               	movwf	??_readFilteredVout
  4921  06E3  0820               	movf	??_readFilteredVout,w
  4922  06E4  07A9               	addwf	readFilteredVout@i,f
  4923  06E5                     i1l2422:
  4924  06E5  300F               	movlw	15
  4925  06E6  0229               	subwf	readFilteredVout@i,w
  4926  06E7  1C03               	skipc
  4927  06E8  2EEA               	goto	u223_21
  4928  06E9  2EEB               	goto	u223_20
  4929  06EA                     u223_21:
  4930  06EA  2ED3               	goto	i1l2418
  4931  06EB                     u223_20:
  4932  06EB                     i1l2424:
  4933                           
  4934                           ;Controller.c: 35:     voutFIFO[16 -1] = readADCRaw(pinRA4);
  4935  06EB  3004               	movlw	4
  4936  06EC  318F  274B  3186   	fcall	_readADCRaw
  4937  06EF  0871               	movf	?_readADCRaw+1,w
  4938  06F0  0023               	movlb	3	; select bank3
  4939  06F1  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  4940  06F2  0870               	movf	?_readADCRaw,w
  4941  06F3  00DE               	movwf	(_voutFIFO^(0+384)+30)
  4942  06F4                     i1l2426:
  4943                           
  4944                           ;Controller.c: 36:     uint32_t sumOfSamples = 0;
  4945  06F4  3000               	movlw	0
  4946  06F5  0020               	movlb	0	; select bank0
  4947  06F6  00A7               	movwf	readFilteredVout@sumOfSamples+3
  4948  06F7  3000               	movlw	0
  4949  06F8  00A6               	movwf	readFilteredVout@sumOfSamples+2
  4950  06F9  3000               	movlw	0
  4951  06FA  00A5               	movwf	readFilteredVout@sumOfSamples+1
  4952  06FB  3000               	movlw	0
  4953  06FC  00A4               	movwf	readFilteredVout@sumOfSamples
  4954  06FD                     i1l2428:
  4955                           
  4956                           ;Controller.c: 37:             for(uint8_t i=0; i<16; i++) sumOfSamples += voutFIFO[i];
  4957  06FD  01A8               	clrf	readFilteredVout@i_846
  4958  06FE                     i1l2434:
  4959  06FE  3528               	lslf	readFilteredVout@i_846,w
  4960  06FF  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4961  0700  0086               	movwf	6
  4962  0701  3001               	movlw	1	; select bank3/4
  4963  0702  0087               	movwf	7
  4964  0703  3F40               	moviw [0]fsr1
  4965  0704  00A0               	movwf	??_readFilteredVout
  4966  0705  3F41               	moviw [1]fsr1
  4967  0706  00A1               	movwf	??_readFilteredVout+1
  4968  0707  0820               	movf	??_readFilteredVout,w
  4969  0708  07A4               	addwf	readFilteredVout@sumOfSamples,f
  4970  0709  0821               	movf	??_readFilteredVout+1,w
  4971  070A  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  4972  070B  3000               	movlw	0
  4973  070C  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  4974  070D  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  4975  070E                     i1l2436:
  4976  070E  3001               	movlw	1
  4977  070F  00A0               	movwf	??_readFilteredVout
  4978  0710  0820               	movf	??_readFilteredVout,w
  4979  0711  07A8               	addwf	readFilteredVout@i_846,f
  4980  0712                     i1l2438:
  4981  0712  3010               	movlw	16
  4982  0713  0228               	subwf	readFilteredVout@i_846,w
  4983  0714  1C03               	skipc
  4984  0715  2F17               	goto	u224_21
  4985  0716  2F18               	goto	u224_20
  4986  0717                     u224_21:
  4987  0717  2EFE               	goto	i1l2434
  4988  0718                     u224_20:
  4989  0718                     i1l2440:
  4990                           
  4991                           ;Controller.c: 39:     return (sumOfSamples >> 4);
  4992  0718  0824               	movf	readFilteredVout@sumOfSamples,w
  4993  0719  00A0               	movwf	??_readFilteredVout
  4994  071A  0825               	movf	readFilteredVout@sumOfSamples+1,w
  4995  071B  00A1               	movwf	??_readFilteredVout+1
  4996  071C  0826               	movf	readFilteredVout@sumOfSamples+2,w
  4997  071D  00A2               	movwf	??_readFilteredVout+2
  4998  071E  0827               	movf	readFilteredVout@sumOfSamples+3,w
  4999  071F  00A3               	movwf	??_readFilteredVout+3
  5000  0720  3004               	movlw	4
  5001  0721                     u225_25:
  5002  0721  36A3               	lsrf	??_readFilteredVout+3,f
  5003  0722  0CA2               	rrf	??_readFilteredVout+2,f
  5004  0723  0CA1               	rrf	??_readFilteredVout+1,f
  5005  0724  0CA0               	rrf	??_readFilteredVout,f
  5006  0725                     u225_20:
  5007  0725  0B89               	decfsz	9,f
  5008  0726  2F21               	goto	u225_25
  5009  0727  0821               	movf	??_readFilteredVout+1,w
  5010  0728  00FB               	movwf	?_readFilteredVout+1
  5011  0729  0820               	movf	??_readFilteredVout,w
  5012  072A  00FA               	movwf	?_readFilteredVout
  5013  072B                     i1l437:
  5014  072B  0008               	return
  5015  072C                     __end_of_readFilteredVout:
  5016                           
  5017                           	psect	text20
  5018  0EF3                     __ptext20:	
  5019 ;; *************** function _readFilteredIL *****************
  5020 ;; Defined at:
  5021 ;;		line 56 in file "CurrentSensor.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  i               1   10[COMMON] unsigned char 
  5026 ;;  i               1   11[COMMON] unsigned char 
  5027 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  2    0[COMMON] unsigned short 
  5030 ;; Registers used:
  5031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5037 ;;      Params:         2       0       0       0       0       0
  5038 ;;      Locals:         6       0       0       0       0       0
  5039 ;;      Temps:          4       0       0       0       0       0
  5040 ;;      Totals:        12       0       0       0       0       0
  5041 ;;Total ram usage:       12 bytes
  5042 ;; Hardware stack levels used: 1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_Tick490Hz
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050  0EF3                     _readFilteredIL:	
  5051                           ;psect for function _readFilteredIL
  5052                           
  5053  0EF3                     i1l2382:	
  5054                           ;incstack = 0
  5055                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5056                           
  5057                           
  5058                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16 -1; i++) currentILFIFO[i] = currentILFIF
      +                          O[i+1];
  5059  0EF3  01FB               	clrf	readFilteredIL@i
  5060  0EF4                     i1l2388:
  5061  0EF4  357B               	lslf	readFilteredIL@i,w
  5062  0EF5  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5063  0EF6  0086               	movwf	6
  5064  0EF7  3001               	movlw	1	; select bank2/3
  5065  0EF8  0087               	movwf	7
  5066  0EF9  357B               	lslf	readFilteredIL@i,w
  5067  0EFA  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5068  0EFB  0084               	movwf	4
  5069  0EFC  3001               	movlw	1	; select bank2/3
  5070  0EFD  0085               	movwf	5
  5071  0EFE  3F40               	moviw [0]fsr1
  5072  0EFF  3F80               	movwi [0]fsr0
  5073  0F00  3F41               	moviw [1]fsr1
  5074  0F01  3F81               	movwi [1]fsr0
  5075  0F02                     i1l2390:
  5076  0F02  3001               	movlw	1
  5077  0F03  00F2               	movwf	??_readFilteredIL
  5078  0F04  0872               	movf	??_readFilteredIL,w
  5079  0F05  07FB               	addwf	readFilteredIL@i,f
  5080  0F06                     i1l2392:
  5081  0F06  300F               	movlw	15
  5082  0F07  027B               	subwf	readFilteredIL@i,w
  5083  0F08  1C03               	skipc
  5084  0F09  2F0B               	goto	u220_21
  5085  0F0A  2F0C               	goto	u220_20
  5086  0F0B                     u220_21:
  5087  0F0B  2EF4               	goto	i1l2388
  5088  0F0C                     u220_20:
  5089  0F0C                     i1l2394:
  5090                           
  5091                           ;CurrentSensor.c: 58:     currentILFIFO[16 -1] = latestIL;
  5092  0F0C  0020               	movlb	0	; select bank0
  5093  0F0D  0862               	movf	_latestIL+1,w	;volatile
  5094  0F0E  0022               	movlb	2	; select bank2
  5095  0F0F  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5096  0F10  0020               	movlb	0	; select bank0
  5097  0F11  0861               	movf	_latestIL,w	;volatile
  5098  0F12  0022               	movlb	2	; select bank2
  5099  0F13  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5100                           
  5101                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5102  0F14  3000               	movlw	0
  5103  0F15  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5104  0F16  3000               	movlw	0
  5105  0F17  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5106  0F18  3000               	movlw	0
  5107  0F19  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5108  0F1A  3000               	movlw	0
  5109  0F1B  00F6               	movwf	readFilteredIL@sumOfSamples
  5110  0F1C                     i1l2396:
  5111                           
  5112                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16; i++) sumOfSamples += currentILFIFO[i];
  5113  0F1C  01FA               	clrf	readFilteredIL@i_936
  5114  0F1D                     i1l2402:
  5115  0F1D  357A               	lslf	readFilteredIL@i_936,w
  5116  0F1E  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5117  0F1F  0086               	movwf	6
  5118  0F20  3001               	movlw	1	; select bank2/3
  5119  0F21  0087               	movwf	7
  5120  0F22  3F40               	moviw [0]fsr1
  5121  0F23  00F2               	movwf	??_readFilteredIL
  5122  0F24  3F41               	moviw [1]fsr1
  5123  0F25  00F3               	movwf	??_readFilteredIL+1
  5124  0F26  0872               	movf	??_readFilteredIL,w
  5125  0F27  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5126  0F28  0873               	movf	??_readFilteredIL+1,w
  5127  0F29  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5128  0F2A  3000               	movlw	0
  5129  0F2B  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5130  0F2C  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5131  0F2D                     i1l2404:
  5132  0F2D  3001               	movlw	1
  5133  0F2E  00F2               	movwf	??_readFilteredIL
  5134  0F2F  0872               	movf	??_readFilteredIL,w
  5135  0F30  07FA               	addwf	readFilteredIL@i_936,f
  5136  0F31                     i1l2406:
  5137  0F31  3010               	movlw	16
  5138  0F32  027A               	subwf	readFilteredIL@i_936,w
  5139  0F33  1C03               	skipc
  5140  0F34  2F36               	goto	u221_21
  5141  0F35  2F37               	goto	u221_20
  5142  0F36                     u221_21:
  5143  0F36  2F1D               	goto	i1l2402
  5144  0F37                     u221_20:
  5145  0F37                     i1l2408:
  5146                           
  5147                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4);
  5148  0F37  0876               	movf	readFilteredIL@sumOfSamples,w
  5149  0F38  00F2               	movwf	??_readFilteredIL
  5150  0F39  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5151  0F3A  00F3               	movwf	??_readFilteredIL+1
  5152  0F3B  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5153  0F3C  00F4               	movwf	??_readFilteredIL+2
  5154  0F3D  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5155  0F3E  00F5               	movwf	??_readFilteredIL+3
  5156  0F3F  3004               	movlw	4
  5157  0F40                     u222_25:
  5158  0F40  36F5               	lsrf	??_readFilteredIL+3,f
  5159  0F41  0CF4               	rrf	??_readFilteredIL+2,f
  5160  0F42  0CF3               	rrf	??_readFilteredIL+1,f
  5161  0F43  0CF2               	rrf	??_readFilteredIL,f
  5162  0F44                     u222_20:
  5163  0F44  0B89               	decfsz	9,f
  5164  0F45  2F40               	goto	u222_25
  5165  0F46  0873               	movf	??_readFilteredIL+1,w
  5166  0F47  00F1               	movwf	?_readFilteredIL+1
  5167  0F48  0872               	movf	??_readFilteredIL,w
  5168  0F49  00F0               	movwf	?_readFilteredIL
  5169  0F4A                     i1l525:
  5170  0F4A  0008               	return
  5171  0F4B                     __end_of_readFilteredIL:
  5172                           
  5173                           	psect	text21
  5174  072C                     __ptext21:	
  5175 ;; *************** function _readFilteredFreqPot *****************
  5176 ;; Defined at:
  5177 ;;		line 39 in file "Potentiometer.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  i               1    8[BANK0 ] unsigned char 
  5182 ;;  i               1    9[BANK0 ] unsigned char 
  5183 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  2   10[COMMON] unsigned short 
  5186 ;; Registers used:
  5187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5193 ;;      Params:         2       0       0       0       0       0
  5194 ;;      Locals:         0       6       0       0       0       0
  5195 ;;      Temps:          0       4       0       0       0       0
  5196 ;;      Totals:         2      10       0       0       0       0
  5197 ;;Total ram usage:       12 bytes
  5198 ;; Hardware stack levels used: 1
  5199 ;; Hardware stack levels required when called: 1
  5200 ;; This function calls:
  5201 ;;		_readADCRaw
  5202 ;; This function is called by:
  5203 ;;		_Tick490Hz
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207  072C                     _readFilteredFreqPot:	
  5208                           ;psect for function _readFilteredFreqPot
  5209                           
  5210  072C                     i1l2490:	
  5211                           ;incstack = 0
  5212                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5213                           
  5214                           
  5215                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5216  072C  0020               	movlb	0	; select bank0
  5217  072D  01A9               	clrf	readFilteredFreqPot@i
  5218  072E                     i1l2496:
  5219  072E  3529               	lslf	readFilteredFreqPot@i,w
  5220  072F  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5221  0730  0086               	movwf	6
  5222  0731  3001               	movlw	1	; select bank3/4
  5223  0732  0087               	movwf	7
  5224  0733  3529               	lslf	readFilteredFreqPot@i,w
  5225  0734  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5226  0735  0084               	movwf	4
  5227  0736  3001               	movlw	1	; select bank3/4
  5228  0737  0085               	movwf	5
  5229  0738  3F40               	moviw [0]fsr1
  5230  0739  3F80               	movwi [0]fsr0
  5231  073A  3F41               	moviw [1]fsr1
  5232  073B  3F81               	movwi [1]fsr0
  5233  073C                     i1l2498:
  5234  073C  3001               	movlw	1
  5235  073D  00A0               	movwf	??_readFilteredFreqPot
  5236  073E  0820               	movf	??_readFilteredFreqPot,w
  5237  073F  07A9               	addwf	readFilteredFreqPot@i,f
  5238  0740                     i1l2500:
  5239  0740  300F               	movlw	15
  5240  0741  0229               	subwf	readFilteredFreqPot@i,w
  5241  0742  1C03               	skipc
  5242  0743  2F45               	goto	u235_21
  5243  0744  2F46               	goto	u235_20
  5244  0745                     u235_21:
  5245  0745  2F2E               	goto	i1l2496
  5246  0746                     u235_20:
  5247  0746                     i1l2502:
  5248                           
  5249                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5250  0746  300A               	movlw	10
  5251  0747  318F  274B  3187   	fcall	_readADCRaw
  5252  074A  0871               	movf	?_readADCRaw+1,w
  5253  074B  0023               	movlb	3	; select bank3
  5254  074C  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5255  074D  0870               	movf	?_readADCRaw,w
  5256  074E  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5257  074F                     i1l2504:
  5258                           
  5259                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5260  074F  3000               	movlw	0
  5261  0750  0020               	movlb	0	; select bank0
  5262  0751  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5263  0752  3000               	movlw	0
  5264  0753  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5265  0754  3000               	movlw	0
  5266  0755  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5267  0756  3000               	movlw	0
  5268  0757  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5269  0758                     i1l2506:
  5270                           
  5271                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5272  0758  01A8               	clrf	readFilteredFreqPot@i_753
  5273  0759                     i1l2512:
  5274  0759  3528               	lslf	readFilteredFreqPot@i_753,w
  5275  075A  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5276  075B  0086               	movwf	6
  5277  075C  3001               	movlw	1	; select bank3/4
  5278  075D  0087               	movwf	7
  5279  075E  3F40               	moviw [0]fsr1
  5280  075F  00A0               	movwf	??_readFilteredFreqPot
  5281  0760  3F41               	moviw [1]fsr1
  5282  0761  00A1               	movwf	??_readFilteredFreqPot+1
  5283  0762  0820               	movf	??_readFilteredFreqPot,w
  5284  0763  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5285  0764  0821               	movf	??_readFilteredFreqPot+1,w
  5286  0765  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5287  0766  3000               	movlw	0
  5288  0767  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5289  0768  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5290  0769                     i1l2514:
  5291  0769  3001               	movlw	1
  5292  076A  00A0               	movwf	??_readFilteredFreqPot
  5293  076B  0820               	movf	??_readFilteredFreqPot,w
  5294  076C  07A8               	addwf	readFilteredFreqPot@i_753,f
  5295  076D                     i1l2516:
  5296  076D  3010               	movlw	16
  5297  076E  0228               	subwf	readFilteredFreqPot@i_753,w
  5298  076F  1C03               	skipc
  5299  0770  2F72               	goto	u236_21
  5300  0771  2F73               	goto	u236_20
  5301  0772                     u236_21:
  5302  0772  2F59               	goto	i1l2512
  5303  0773                     u236_20:
  5304  0773                     i1l2518:
  5305                           
  5306                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4);
  5307  0773  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5308  0774  00A0               	movwf	??_readFilteredFreqPot
  5309  0775  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5310  0776  00A1               	movwf	??_readFilteredFreqPot+1
  5311  0777  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5312  0778  00A2               	movwf	??_readFilteredFreqPot+2
  5313  0779  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5314  077A  00A3               	movwf	??_readFilteredFreqPot+3
  5315  077B  3004               	movlw	4
  5316  077C                     u237_25:
  5317  077C  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5318  077D  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5319  077E  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5320  077F  0CA0               	rrf	??_readFilteredFreqPot,f
  5321  0780                     u237_20:
  5322  0780  0B89               	decfsz	9,f
  5323  0781  2F7C               	goto	u237_25
  5324  0782  0821               	movf	??_readFilteredFreqPot+1,w
  5325  0783  00FB               	movwf	?_readFilteredFreqPot+1
  5326  0784  0820               	movf	??_readFilteredFreqPot,w
  5327  0785  00FA               	movwf	?_readFilteredFreqPot
  5328  0786                     i1l368:
  5329  0786  0008               	return
  5330  0787                     __end_of_readFilteredFreqPot:
  5331                           
  5332                           	psect	text22
  5333  0787                     __ptext22:	
  5334 ;; *************** function _readFilteredDutyPot *****************
  5335 ;; Defined at:
  5336 ;;		line 25 in file "Potentiometer.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  i               1    8[BANK0 ] unsigned char 
  5341 ;;  i               1    9[BANK0 ] unsigned char 
  5342 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  2   10[COMMON] unsigned short 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5352 ;;      Params:         2       0       0       0       0       0
  5353 ;;      Locals:         0       6       0       0       0       0
  5354 ;;      Temps:          0       4       0       0       0       0
  5355 ;;      Totals:         2      10       0       0       0       0
  5356 ;;Total ram usage:       12 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; Hardware stack levels required when called: 1
  5359 ;; This function calls:
  5360 ;;		_readADCRaw
  5361 ;; This function is called by:
  5362 ;;		_Tick490Hz
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366  0787                     _readFilteredDutyPot:	
  5367                           ;psect for function _readFilteredDutyPot
  5368                           
  5369  0787                     i1l2458:	
  5370                           ;incstack = 0
  5371                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5372                           
  5373                           
  5374                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5375  0787  0020               	movlb	0	; select bank0
  5376  0788  01A9               	clrf	readFilteredDutyPot@i
  5377  0789                     i1l2464:
  5378  0789  3529               	lslf	readFilteredDutyPot@i,w
  5379  078A  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5380  078B  0086               	movwf	6
  5381  078C  3002               	movlw	2	; select bank4/5
  5382  078D  0087               	movwf	7
  5383  078E  3529               	lslf	readFilteredDutyPot@i,w
  5384  078F  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5385  0790  0084               	movwf	4
  5386  0791  3002               	movlw	2	; select bank4/5
  5387  0792  0085               	movwf	5
  5388  0793  3F40               	moviw [0]fsr1
  5389  0794  3F80               	movwi [0]fsr0
  5390  0795  3F41               	moviw [1]fsr1
  5391  0796  3F81               	movwi [1]fsr0
  5392  0797                     i1l2466:
  5393  0797  3001               	movlw	1
  5394  0798  00A0               	movwf	??_readFilteredDutyPot
  5395  0799  0820               	movf	??_readFilteredDutyPot,w
  5396  079A  07A9               	addwf	readFilteredDutyPot@i,f
  5397  079B                     i1l2468:
  5398  079B  300F               	movlw	15
  5399  079C  0229               	subwf	readFilteredDutyPot@i,w
  5400  079D  1C03               	skipc
  5401  079E  2FA0               	goto	u232_21
  5402  079F  2FA1               	goto	u232_20
  5403  07A0                     u232_21:
  5404  07A0  2F89               	goto	i1l2464
  5405  07A1                     u232_20:
  5406  07A1                     i1l2470:
  5407                           
  5408                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5409  07A1  3009               	movlw	9
  5410  07A2  318F  274B  3187   	fcall	_readADCRaw
  5411  07A5  0871               	movf	?_readADCRaw+1,w
  5412  07A6  0024               	movlb	4	; select bank4
  5413  07A7  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5414  07A8  0870               	movf	?_readADCRaw,w
  5415  07A9  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5416  07AA                     i1l2472:
  5417                           
  5418                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5419  07AA  3000               	movlw	0
  5420  07AB  0020               	movlb	0	; select bank0
  5421  07AC  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5422  07AD  3000               	movlw	0
  5423  07AE  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5424  07AF  3000               	movlw	0
  5425  07B0  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5426  07B1  3000               	movlw	0
  5427  07B2  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5428  07B3                     i1l2474:
  5429                           
  5430                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5431  07B3  01A8               	clrf	readFilteredDutyPot@i_749
  5432  07B4                     i1l2480:
  5433  07B4  3528               	lslf	readFilteredDutyPot@i_749,w
  5434  07B5  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5435  07B6  0086               	movwf	6
  5436  07B7  3002               	movlw	2	; select bank4/5
  5437  07B8  0087               	movwf	7
  5438  07B9  3F40               	moviw [0]fsr1
  5439  07BA  00A0               	movwf	??_readFilteredDutyPot
  5440  07BB  3F41               	moviw [1]fsr1
  5441  07BC  00A1               	movwf	??_readFilteredDutyPot+1
  5442  07BD  0820               	movf	??_readFilteredDutyPot,w
  5443  07BE  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5444  07BF  0821               	movf	??_readFilteredDutyPot+1,w
  5445  07C0  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5446  07C1  3000               	movlw	0
  5447  07C2  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5448  07C3  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5449  07C4                     i1l2482:
  5450  07C4  3001               	movlw	1
  5451  07C5  00A0               	movwf	??_readFilteredDutyPot
  5452  07C6  0820               	movf	??_readFilteredDutyPot,w
  5453  07C7  07A8               	addwf	readFilteredDutyPot@i_749,f
  5454  07C8                     i1l2484:
  5455  07C8  3010               	movlw	16
  5456  07C9  0228               	subwf	readFilteredDutyPot@i_749,w
  5457  07CA  1C03               	skipc
  5458  07CB  2FCD               	goto	u233_21
  5459  07CC  2FCE               	goto	u233_20
  5460  07CD                     u233_21:
  5461  07CD  2FB4               	goto	i1l2480
  5462  07CE                     u233_20:
  5463  07CE                     i1l2486:
  5464                           
  5465                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4);
  5466  07CE  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5467  07CF  00A0               	movwf	??_readFilteredDutyPot
  5468  07D0  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5469  07D1  00A1               	movwf	??_readFilteredDutyPot+1
  5470  07D2  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5471  07D3  00A2               	movwf	??_readFilteredDutyPot+2
  5472  07D4  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5473  07D5  00A3               	movwf	??_readFilteredDutyPot+3
  5474  07D6  3004               	movlw	4
  5475  07D7                     u234_25:
  5476  07D7  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5477  07D8  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5478  07D9  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5479  07DA  0CA0               	rrf	??_readFilteredDutyPot,f
  5480  07DB                     u234_20:
  5481  07DB  0B89               	decfsz	9,f
  5482  07DC  2FD7               	goto	u234_25
  5483  07DD  0821               	movf	??_readFilteredDutyPot+1,w
  5484  07DE  00FB               	movwf	?_readFilteredDutyPot+1
  5485  07DF  0820               	movf	??_readFilteredDutyPot,w
  5486  07E0  00FA               	movwf	?_readFilteredDutyPot
  5487  07E1                     i1l361:
  5488  07E1  0008               	return
  5489  07E2                     __end_of_readFilteredDutyPot:
  5490                           
  5491                           	psect	text23
  5492  0F4B                     __ptext23:	
  5493 ;; *************** function _readADCRaw *****************
  5494 ;; Defined at:
  5495 ;;		line 71 in file "ADC.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  gpioNumber      1    wreg     const enum E2798
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5500 ;;  i               1    8[COMMON] unsigned char 
  5501 ;;  returnValue     2    4[COMMON] unsigned int 
  5502 ;;  gpioValid       1    7[COMMON] unsigned char 
  5503 ;;  channel         1    6[COMMON] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2    0[COMMON] unsigned short 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5513 ;;      Params:         2       0       0       0       0       0
  5514 ;;      Locals:         6       0       0       0       0       0
  5515 ;;      Temps:          2       0       0       0       0       0
  5516 ;;      Totals:        10       0       0       0       0       0
  5517 ;;Total ram usage:       10 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_readFilteredDutyPot
  5523 ;;		_readFilteredFreqPot
  5524 ;;		_readFilteredVout
  5525 ;;		_readFilteredIDS
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529  0F4B                     _readADCRaw:	
  5530                           ;psect for function _readADCRaw
  5531                           
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5535                           ;readADCRaw@gpioNumber stored from wreg
  5536  0F4B  00F9               	movwf	readADCRaw@gpioNumber
  5537  0F4C                     i1l2208:
  5538                           
  5539                           ;ADC.c: 72:     uint8_t channel = 0;
  5540  0F4C  01F6               	clrf	readADCRaw@channel
  5541                           
  5542                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5543  0F4D  01F7               	clrf	readADCRaw@gpioValid
  5544  0F4E                     i1l2210:
  5545                           
  5546                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5547  0F4E  3005               	movlw	5
  5548  0F4F  0279               	subwf	readADCRaw@gpioNumber,w
  5549  0F50  1803               	skipnc
  5550  0F51  2F53               	goto	u185_21
  5551  0F52  2F54               	goto	u185_20
  5552  0F53                     u185_21:
  5553  0F53  2F5A               	goto	i1l242
  5554  0F54                     u185_20:
  5555  0F54                     i1l2212:
  5556                           
  5557                           ;ADC.c: 76:         channel = gpioNumber;
  5558  0F54  0879               	movf	readADCRaw@gpioNumber,w
  5559  0F55  00F2               	movwf	??_readADCRaw
  5560  0F56  0872               	movf	??_readADCRaw,w
  5561  0F57  00F6               	movwf	readADCRaw@channel
  5562  0F58                     i1l2214:
  5563                           
  5564                           ;ADC.c: 77:         gpioValid = 1;
  5565  0F58  01F7               	clrf	readADCRaw@gpioValid
  5566  0F59  0AF7               	incf	readADCRaw@gpioValid,f
  5567  0F5A                     i1l242:	
  5568                           ;ADC.c: 78:     }
  5569                           
  5570                           
  5571                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5572  0F5A  3009               	movlw	9
  5573  0F5B  0279               	subwf	readADCRaw@gpioNumber,w
  5574  0F5C  1C03               	skipc
  5575  0F5D  2F5F               	goto	u186_21
  5576  0F5E  2F60               	goto	u186_20
  5577  0F5F                     u186_21:
  5578  0F5F  2F6D               	goto	i1l243
  5579  0F60                     u186_20:
  5580  0F60                     i1l2216:
  5581  0F60  3010               	movlw	16
  5582  0F61  0279               	subwf	readADCRaw@gpioNumber,w
  5583  0F62  1803               	skipnc
  5584  0F63  2F65               	goto	u187_21
  5585  0F64  2F66               	goto	u187_20
  5586  0F65                     u187_21:
  5587  0F65  2F6D               	goto	i1l243
  5588  0F66                     u187_20:
  5589  0F66                     i1l2218:
  5590                           
  5591                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5592  0F66  0879               	movf	readADCRaw@gpioNumber,w
  5593  0F67  3C14               	sublw	20
  5594  0F68  00F2               	movwf	??_readADCRaw
  5595  0F69  0872               	movf	??_readADCRaw,w
  5596  0F6A  00F6               	movwf	readADCRaw@channel
  5597  0F6B                     i1l2220:
  5598                           
  5599                           ;ADC.c: 81:         gpioValid = 1;
  5600  0F6B  01F7               	clrf	readADCRaw@gpioValid
  5601  0F6C  0AF7               	incf	readADCRaw@gpioValid,f
  5602  0F6D                     i1l243:	
  5603                           ;ADC.c: 82:     }
  5604                           
  5605                           
  5606                           ;ADC.c: 83:     if(gpioValid){
  5607  0F6D  0877               	movf	readADCRaw@gpioValid,w
  5608  0F6E  1903               	btfsc	3,2
  5609  0F6F  2F71               	goto	u188_21
  5610  0F70  2F72               	goto	u188_20
  5611  0F71                     u188_21:
  5612  0F71  2FA2               	goto	i1l2248
  5613  0F72                     u188_20:
  5614  0F72                     i1l2222:
  5615                           
  5616                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5617  0F72  0021               	movlb	1	; select bank1
  5618  0F73  081D               	movf	29,w	;volatile
  5619  0F74                     i1l2224:
  5620                           
  5621                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5622  0F74  3083               	movlw	131
  5623  0F75  00F2               	movwf	??_readADCRaw
  5624  0F76  0872               	movf	??_readADCRaw,w
  5625  0F77  059D               	andwf	29,f	;volatile
  5626  0F78                     i1l2226:
  5627                           
  5628                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5629  0F78  0876               	movf	readADCRaw@channel,w	;volatile
  5630  0F79  00F2               	movwf	??_readADCRaw
  5631  0F7A  3001               	movlw	1
  5632  0F7B                     u189_25:
  5633  0F7B  35F2               	lslf	??_readADCRaw,f
  5634  0F7C  3EFF               	addlw	-1
  5635  0F7D  1D03               	skipz
  5636  0F7E  2F7B               	goto	u189_25
  5637  0F7F  3572               	lslf	??_readADCRaw,w
  5638  0F80  00F3               	movwf	??_readADCRaw+1
  5639  0F81  0873               	movf	??_readADCRaw+1,w
  5640  0F82  049D               	iorwf	29,f	;volatile
  5641  0F83                     i1l2228:
  5642                           
  5643                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5644  0F83  01F8               	clrf	readADCRaw@i
  5645  0F84                     i1l2234:
  5646  0F84  3001               	movlw	1
  5647  0F85  00F2               	movwf	??_readADCRaw
  5648  0F86  0872               	movf	??_readADCRaw,w
  5649  0F87  07F8               	addwf	readADCRaw@i,f
  5650  0F88                     i1l2236:
  5651  0F88  3010               	movlw	16
  5652  0F89  0278               	subwf	readADCRaw@i,w
  5653  0F8A  1C03               	skipc
  5654  0F8B  2F8D               	goto	u190_21
  5655  0F8C  2F8E               	goto	u190_20
  5656  0F8D                     u190_21:
  5657  0F8D  2F84               	goto	i1l2234
  5658  0F8E                     u190_20:
  5659  0F8E                     i1l247:
  5660                           
  5661                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5662  0F8E  0021               	movlb	1	; select bank1
  5663  0F8F  149D               	bsf	29,1	;volatile
  5664  0F90                     i1l248:	
  5665                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5666                           
  5667  0F90  189D               	btfsc	29,1	;volatile
  5668  0F91  2F93               	goto	u191_21
  5669  0F92  2F94               	goto	u191_20
  5670  0F93                     u191_21:
  5671  0F93  2F90               	goto	i1l248
  5672  0F94                     u191_20:
  5673  0F94                     i1l2238:
  5674                           
  5675                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5676  0F94  081C               	movf	28,w	;volatile
  5677  0F95  00F5               	movwf	readADCRaw@returnValue+1
  5678  0F96  081B               	movf	27,w	;volatile
  5679  0F97  00F4               	movwf	readADCRaw@returnValue
  5680  0F98                     i1l2240:
  5681                           
  5682                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5683  0F98  3083               	movlw	131
  5684  0F99  00F2               	movwf	??_readADCRaw
  5685  0F9A  0872               	movf	??_readADCRaw,w
  5686  0F9B  059D               	andwf	29,f	;volatile
  5687  0F9C                     i1l2242:
  5688                           
  5689                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5690  0F9C  159D               	bsf	29,3	;volatile
  5691  0F9D                     i1l2244:
  5692                           
  5693                           ;ADC.c: 98:             return returnValue;
  5694  0F9D  0875               	movf	readADCRaw@returnValue+1,w
  5695  0F9E  00F1               	movwf	?_readADCRaw+1
  5696  0F9F  0874               	movf	readADCRaw@returnValue,w
  5697  0FA0  00F0               	movwf	?_readADCRaw
  5698  0FA1  2FA4               	goto	i1l251
  5699  0FA2                     i1l2248:
  5700  0FA2  01F0               	clrf	?_readADCRaw
  5701  0FA3  01F1               	clrf	?_readADCRaw+1
  5702  0FA4                     i1l251:
  5703  0FA4  0008               	return
  5704  0FA5                     __end_of_readADCRaw:
  5705                           
  5706                           	psect	text24
  5707  0CF7                     __ptext24:	
  5708 ;; *************** function _currentTripMonitor *****************
  5709 ;; Defined at:
  5710 ;;		line 94 in file "CurrentSensor.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;		None
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;		None
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  2    4[None  ] int 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0, pclath, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5724 ;;      Params:         0       0       0       0       0       0
  5725 ;;      Locals:         0       0       0       0       0       0
  5726 ;;      Temps:          1       0       0       0       0       0
  5727 ;;      Totals:         1       0       0       0       0       0
  5728 ;;Total ram usage:        1 bytes
  5729 ;; Hardware stack levels used: 1
  5730 ;; Hardware stack levels required when called: 2
  5731 ;; This function calls:
  5732 ;;		_currentTripRead
  5733 ;;		_transToOverCurrentFault
  5734 ;;		i1_currentTripReset
  5735 ;; This function is called by:
  5736 ;;		_Tick490Hz
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740  0CF7                     _currentTripMonitor:	
  5741                           ;psect for function _currentTripMonitor
  5742                           
  5743  0CF7                     i1l2336:	
  5744                           ;incstack = 0
  5745                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5746                           
  5747                           
  5748                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5749  0CF7  318D  2546  318C   	fcall	_currentTripRead
  5750  0CFA  3A01               	xorlw	1
  5751  0CFB  1D03               	skipz
  5752  0CFC  2CFE               	goto	u211_21
  5753  0CFD  2CFF               	goto	u211_20
  5754  0CFE                     u211_21:
  5755  0CFE  2D12               	goto	i1l2344
  5756  0CFF                     u211_20:
  5757  0CFF                     i1l2338:
  5758                           
  5759                           ;CurrentSensor.c: 97:         currentTripCount++;
  5760  0CFF  3001               	movlw	1
  5761  0D00  00FB               	movwf	??_currentTripMonitor
  5762  0D01  087B               	movf	??_currentTripMonitor,w
  5763  0D02  0020               	movlb	0	; select bank0
  5764  0D03  07E9               	addwf	_currentTripCount,f
  5765                           
  5766                           ;CurrentSensor.c: 98:         if(currentTripCount == 3){
  5767  0D04  3003               	movlw	3
  5768  0D05  0669               	xorwf	_currentTripCount,w
  5769  0D06  1D03               	btfss	3,2
  5770  0D07  2D09               	goto	u212_21
  5771  0D08  2D0A               	goto	u212_20
  5772  0D09                     u212_21:
  5773  0D09  2D0E               	goto	i1l2342
  5774  0D0A                     u212_20:
  5775  0D0A                     i1l2340:
  5776                           
  5777                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5778  0D0A  318C  244C  318C   	fcall	_transToOverCurrentFault
  5779                           
  5780                           ;CurrentSensor.c: 100:         }
  5781  0D0D  2D1A               	goto	i1l539
  5782  0D0E                     i1l2342:
  5783                           
  5784                           ;CurrentSensor.c: 102:             currentTripReset();
  5785  0D0E  318C  245E  318C   	fcall	i1_currentTripReset
  5786  0D11  2D1A               	goto	i1l539
  5787  0D12                     i1l2344:
  5788                           
  5789                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5790  0D12  0020               	movlb	0	; select bank0
  5791  0D13  0869               	movf	_currentTripCount,w
  5792  0D14  1903               	btfsc	3,2
  5793  0D15  2D17               	goto	u213_21
  5794  0D16  2D18               	goto	u213_20
  5795  0D17                     u213_21:
  5796  0D17  2D1A               	goto	i1l539
  5797  0D18                     u213_20:
  5798  0D18                     i1l2346:
  5799                           
  5800                           ;CurrentSensor.c: 107:             currentTripCount--;
  5801  0D18  3001               	movlw	1
  5802  0D19  02E9               	subwf	_currentTripCount,f
  5803  0D1A                     i1l539:
  5804  0D1A  0008               	return
  5805  0D1B                     __end_of_currentTripMonitor:
  5806                           
  5807                           	psect	text25
  5808  0C5E                     __ptext25:	
  5809 ;; *************** function i1_currentTripReset *****************
  5810 ;; Defined at:
  5811 ;;		line 71 in file "CurrentSensor.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5825 ;;      Params:         0       0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0       0
  5827 ;;      Temps:          0       0       0       0       0       0
  5828 ;;      Totals:         0       0       0       0       0       0
  5829 ;;Total ram usage:        0 bytes
  5830 ;; Hardware stack levels used: 1
  5831 ;; Hardware stack levels required when called: 1
  5832 ;; This function calls:
  5833 ;;		i1_writeGPIO
  5834 ;; This function is called by:
  5835 ;;		_currentTripMonitor
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839  0C5E                     i1_currentTripReset:	
  5840                           ;psect for function i1_currentTripReset
  5841                           
  5842  0C5E                     i1l2332:	
  5843                           ;incstack = 0
  5844                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5845                           
  5846                           
  5847                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5848  0C5E  01F0               	clrf	i1writeGPIO@writeValue
  5849  0C5F  300B               	movlw	11
  5850  0C60  3186  2672  318C   	fcall	i1_writeGPIO
  5851  0C63                     i1l2334:
  5852                           
  5853                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5854                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5855  0C63  01F0               	clrf	i1writeGPIO@writeValue
  5856  0C64  0AF0               	incf	i1writeGPIO@writeValue,f
  5857  0C65  300B               	movlw	11
  5858  0C66  3186  2672  318C   	fcall	i1_writeGPIO
  5859  0C69                     i1l528:
  5860  0C69  0008               	return
  5861  0C6A                     __end_ofi1_currentTripReset:
  5862                           
  5863                           	psect	text26
  5864  0672                     __ptext26:	
  5865 ;; *************** function i1_writeGPIO *****************
  5866 ;; Defined at:
  5867 ;;		line 52 in file "GPIO.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  gpioNumber      1    wreg     const enum E2798
  5870 ;;  writeValue      1    0[COMMON] unsigned char 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5873 ;;  portNumber      1    5[COMMON] unsigned char 
  5874 ;;  portType        1    3[COMMON] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		wreg, status,2, status,0
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5884 ;;      Params:         1       0       0       0       0       0
  5885 ;;      Locals:         3       0       0       0       0       0
  5886 ;;      Temps:          2       0       0       0       0       0
  5887 ;;      Totals:         6       0       0       0       0       0
  5888 ;;Total ram usage:        6 bytes
  5889 ;; Hardware stack levels used: 1
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_Tick490Hz
  5894 ;;		i1_currentTripReset
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898  0672                     i1_writeGPIO:	
  5899                           ;psect for function i1_writeGPIO
  5900                           
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5904                           ;i1writeGPIO@gpioNumber stored from wreg
  5905  0672  00F4               	movwf	i1writeGPIO@gpioNumber
  5906  0673                     i1l2084:
  5907                           
  5908                           ;GPIO.c: 54:     uint8_t portType = 0;
  5909  0673  01F3               	clrf	i1writeGPIO@portType
  5910  0674                     i1l2086:
  5911                           
  5912                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5913  0674  3008               	movlw	8
  5914  0675  0274               	subwf	i1writeGPIO@gpioNumber,w
  5915  0676  1C03               	skipc
  5916  0677  2E79               	goto	u150_21
  5917  0678  2E7A               	goto	u150_20
  5918  0679                     u150_21:
  5919  0679  2E82               	goto	i1l2092
  5920  067A                     u150_20:
  5921  067A                     i1l2088:
  5922                           
  5923                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  5924  067A  0874               	movf	i1writeGPIO@gpioNumber,w
  5925  067B  3EF8               	addlw	248
  5926  067C  00F1               	movwf	??i1_writeGPIO
  5927  067D  0871               	movf	??i1_writeGPIO,w
  5928  067E  00F5               	movwf	i1writeGPIO@portNumber
  5929  067F                     i1l2090:
  5930                           
  5931                           ;GPIO.c: 57:         portType = 1;
  5932  067F  01F3               	clrf	i1writeGPIO@portType
  5933  0680  0AF3               	incf	i1writeGPIO@portType,f
  5934                           
  5935                           ;GPIO.c: 58:     }
  5936  0681  2E87               	goto	i1l2096
  5937  0682                     i1l2092:
  5938                           
  5939                           ;GPIO.c: 60:         portNumber = gpioNumber;
  5940  0682  0874               	movf	i1writeGPIO@gpioNumber,w
  5941  0683  00F1               	movwf	??i1_writeGPIO
  5942  0684  0871               	movf	??i1_writeGPIO,w
  5943  0685  00F5               	movwf	i1writeGPIO@portNumber
  5944  0686                     i1l2094:
  5945                           
  5946                           ;GPIO.c: 61:         portType = 0;
  5947  0686  01F3               	clrf	i1writeGPIO@portType
  5948  0687                     i1l2096:
  5949                           
  5950                           ;GPIO.c: 64:     if(portType == 0){
  5951  0687  0873               	movf	i1writeGPIO@portType,w
  5952  0688  1D03               	btfss	3,2
  5953  0689  2E8B               	goto	u151_21
  5954  068A  2E8C               	goto	u151_20
  5955  068B                     u151_21:
  5956  068B  2EAC               	goto	i1l2104
  5957  068C                     u151_20:
  5958  068C                     i1l2098:
  5959                           
  5960                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  5961  068C  0870               	movf	i1writeGPIO@writeValue,w
  5962  068D  1903               	btfsc	3,2
  5963  068E  2E90               	goto	u152_21
  5964  068F  2E91               	goto	u152_20
  5965  0690                     u152_21:
  5966  0690  2E9E               	goto	i1l2102
  5967  0691                     u152_20:
  5968  0691                     i1l2100:
  5969  0691  3001               	movlw	1
  5970  0692  00F1               	movwf	??i1_writeGPIO
  5971  0693  0A75               	incf	i1writeGPIO@portNumber,w
  5972  0694  2E96               	goto	u153_24
  5973  0695                     u153_25:
  5974  0695  35F1               	lslf	??i1_writeGPIO,f
  5975  0696                     u153_24:
  5976  0696  0B89               	decfsz	9,f
  5977  0697  2E95               	goto	u153_25
  5978  0698  0871               	movf	??i1_writeGPIO,w
  5979  0699  00F2               	movwf	??i1_writeGPIO+1
  5980  069A  0872               	movf	??i1_writeGPIO+1,w
  5981  069B  0022               	movlb	2	; select bank2
  5982  069C  048C               	iorwf	12,f	;volatile
  5983  069D  2ED0               	goto	i1l316
  5984  069E                     i1l2102:
  5985  069E  3001               	movlw	1
  5986  069F  00F1               	movwf	??i1_writeGPIO
  5987  06A0  0A75               	incf	i1writeGPIO@portNumber,w
  5988  06A1  2EA3               	goto	u154_24
  5989  06A2                     u154_25:
  5990  06A2  35F1               	lslf	??i1_writeGPIO,f
  5991  06A3                     u154_24:
  5992  06A3  0B89               	decfsz	9,f
  5993  06A4  2EA2               	goto	u154_25
  5994  06A5  0871               	movf	??i1_writeGPIO,w
  5995  06A6  3AFF               	xorlw	255
  5996  06A7  00F2               	movwf	??i1_writeGPIO+1
  5997  06A8  0872               	movf	??i1_writeGPIO+1,w
  5998  06A9  0022               	movlb	2	; select bank2
  5999  06AA  058C               	andwf	12,f	;volatile
  6000  06AB  2ED0               	goto	i1l316
  6001  06AC                     i1l2104:
  6002  06AC  0373               	decf	i1writeGPIO@portType,w
  6003  06AD  1D03               	btfss	3,2
  6004  06AE  2EB0               	goto	u155_21
  6005  06AF  2EB1               	goto	u155_20
  6006  06B0                     u155_21:
  6007  06B0  2ED0               	goto	i1l316
  6008  06B1                     u155_20:
  6009  06B1                     i1l2106:
  6010                           
  6011                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6012  06B1  0870               	movf	i1writeGPIO@writeValue,w
  6013  06B2  1903               	btfsc	3,2
  6014  06B3  2EB5               	goto	u156_21
  6015  06B4  2EB6               	goto	u156_20
  6016  06B5                     u156_21:
  6017  06B5  2EC3               	goto	i1l2110
  6018  06B6                     u156_20:
  6019  06B6                     i1l2108:
  6020  06B6  3001               	movlw	1
  6021  06B7  00F1               	movwf	??i1_writeGPIO
  6022  06B8  0A75               	incf	i1writeGPIO@portNumber,w
  6023  06B9  2EBB               	goto	u157_24
  6024  06BA                     u157_25:
  6025  06BA  35F1               	lslf	??i1_writeGPIO,f
  6026  06BB                     u157_24:
  6027  06BB  0B89               	decfsz	9,f
  6028  06BC  2EBA               	goto	u157_25
  6029  06BD  0871               	movf	??i1_writeGPIO,w
  6030  06BE  00F2               	movwf	??i1_writeGPIO+1
  6031  06BF  0872               	movf	??i1_writeGPIO+1,w
  6032  06C0  0022               	movlb	2	; select bank2
  6033  06C1  048D               	iorwf	13,f	;volatile
  6034  06C2  2ED0               	goto	i1l316
  6035  06C3                     i1l2110:
  6036  06C3  3001               	movlw	1
  6037  06C4  00F1               	movwf	??i1_writeGPIO
  6038  06C5  0A75               	incf	i1writeGPIO@portNumber,w
  6039  06C6  2EC8               	goto	u158_24
  6040  06C7                     u158_25:
  6041  06C7  35F1               	lslf	??i1_writeGPIO,f
  6042  06C8                     u158_24:
  6043  06C8  0B89               	decfsz	9,f
  6044  06C9  2EC7               	goto	u158_25
  6045  06CA  0871               	movf	??i1_writeGPIO,w
  6046  06CB  3AFF               	xorlw	255
  6047  06CC  00F2               	movwf	??i1_writeGPIO+1
  6048  06CD  0872               	movf	??i1_writeGPIO+1,w
  6049  06CE  0022               	movlb	2	; select bank2
  6050  06CF  058D               	andwf	13,f	;volatile
  6051  06D0                     i1l316:
  6052  06D0  0008               	return
  6053  06D1                     __end_ofi1_writeGPIO:
  6054                           
  6055                           	psect	text27
  6056  0C4C                     __ptext27:	
  6057 ;; *************** function _transToOverCurrentFault *****************
  6058 ;; Defined at:
  6059 ;;		line 45 in file "StateMachine.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;		None
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6073 ;;      Params:         0       0       0       0       0       0
  6074 ;;      Locals:         0       0       0       0       0       0
  6075 ;;      Temps:          1       0       0       0       0       0
  6076 ;;      Totals:         1       0       0       0       0       0
  6077 ;;Total ram usage:        1 bytes
  6078 ;; Hardware stack levels used: 1
  6079 ;; This function calls:
  6080 ;;		Nothing
  6081 ;; This function is called by:
  6082 ;;		_currentTripMonitor
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086  0C4C                     _transToOverCurrentFault:	
  6087                           ;psect for function _transToOverCurrentFault
  6088                           
  6089  0C4C                     i1l2304:	
  6090                           ;incstack = 0
  6091                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6092                           
  6093                           
  6094                           ;StateMachine.c: 46:     setDuty = 0;
  6095  0C4C  0020               	movlb	0	; select bank0
  6096  0C4D  01E3               	clrf	_setDuty
  6097  0C4E  01E4               	clrf	_setDuty+1
  6098                           
  6099                           ;StateMachine.c: 47:     setPeriod = 0;
  6100  0C4F  01EE               	clrf	_setPeriod
  6101  0C50                     i1l2306:
  6102                           
  6103                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  6104  0C50  3004               	movlw	4
  6105  0C51  00F0               	movwf	??_transToOverCurrentFault
  6106  0C52  0870               	movf	??_transToOverCurrentFault,w
  6107  0C53  00EC               	movwf	_currentState
  6108  0C54                     i1l563:
  6109  0C54  0008               	return
  6110  0C55                     __end_of_transToOverCurrentFault:
  6111                           
  6112                           	psect	text28
  6113  0D46                     __ptext28:	
  6114 ;; *************** function _currentTripRead *****************
  6115 ;; Defined at:
  6116 ;;		line 31 in file "CurrentSensor.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      _Bool 
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0, pclath, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6130 ;;      Params:         0       0       0       0       0       0
  6131 ;;      Locals:         1       0       0       0       0       0
  6132 ;;      Temps:          1       0       0       0       0       0
  6133 ;;      Totals:         2       0       0       0       0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; Hardware stack levels required when called: 1
  6137 ;; This function calls:
  6138 ;;		i1_readGPIO
  6139 ;; This function is called by:
  6140 ;;		_currentTripMonitor
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144  0D46                     _currentTripRead:	
  6145                           ;psect for function _currentTripRead
  6146                           
  6147  0D46                     i1l2290:	
  6148                           ;incstack = 0
  6149                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6150                           
  6151                           
  6152                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6153  0D46  3001               	movlw	1
  6154  0D47  318E  2616  318D   	fcall	i1_readGPIO
  6155  0D4A  3A01               	xorlw	1
  6156  0D4B  1D03               	skipz
  6157  0D4C  2D4E               	goto	u198_21
  6158  0D4D  2D50               	goto	u198_20
  6159  0D4E                     u198_21:
  6160  0D4E  3001               	movlw	1
  6161  0D4F  2D51               	goto	u199_20
  6162  0D50                     u198_20:
  6163  0D50  3000               	movlw	0
  6164  0D51                     u199_20:
  6165  0D51  00F9               	movwf	??_currentTripRead
  6166  0D52  0879               	movf	??_currentTripRead,w
  6167  0D53  0020               	movlb	0	; select bank0
  6168  0D54  00EB               	movwf	_tripIDS
  6169                           
  6170                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6171  0D55  3003               	movlw	3
  6172  0D56  318E  2616  318D   	fcall	i1_readGPIO
  6173  0D59  3A01               	xorlw	1
  6174  0D5A  1D03               	skipz
  6175  0D5B  2D5D               	goto	u200_21
  6176  0D5C  2D5F               	goto	u200_20
  6177  0D5D                     u200_21:
  6178  0D5D  3001               	movlw	1
  6179  0D5E  2D60               	goto	u201_20
  6180  0D5F                     u200_20:
  6181  0D5F  3000               	movlw	0
  6182  0D60                     u201_20:
  6183  0D60  00F9               	movwf	??_currentTripRead
  6184  0D61  0879               	movf	??_currentTripRead,w
  6185  0D62  0020               	movlb	0	; select bank0
  6186  0D63  00EA               	movwf	_tripIL
  6187  0D64                     i1l2292:
  6188                           
  6189                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6190  0D64  01FA               	clrf	_currentTripRead$928
  6191  0D65  0AFA               	incf	_currentTripRead$928,f
  6192  0D66                     i1l2294:
  6193  0D66  086A               	movf	_tripIL,w
  6194  0D67  1D03               	btfss	3,2
  6195  0D68  2D6A               	goto	u202_21
  6196  0D69  2D6B               	goto	u202_20
  6197  0D6A                     u202_21:
  6198  0D6A  2D71               	goto	i1l2300
  6199  0D6B                     u202_20:
  6200  0D6B                     i1l2296:
  6201  0D6B  086B               	movf	_tripIDS,w
  6202  0D6C  1D03               	btfss	3,2
  6203  0D6D  2D6F               	goto	u203_21
  6204  0D6E  2D70               	goto	u203_20
  6205  0D6F                     u203_21:
  6206  0D6F  2D71               	goto	i1l2300
  6207  0D70                     u203_20:
  6208  0D70                     i1l2298:
  6209  0D70  01FA               	clrf	_currentTripRead$928
  6210  0D71                     i1l2300:
  6211  0D71  087A               	movf	_currentTripRead$928,w
  6212  0D72                     i1l511:
  6213  0D72  0008               	return
  6214  0D73                     __end_of_currentTripRead:
  6215                           
  6216                           	psect	text29
  6217  0298                     __ptext29:	
  6218 ;; *************** function _controlRoutine *****************
  6219 ;; Defined at:
  6220 ;;		line 59 in file "Controller.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6225 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6235 ;;      Params:         0       0       0       0       0       0
  6236 ;;      Locals:         0       4       0       0       0       0
  6237 ;;      Temps:          0       6       0       0       0       0
  6238 ;;      Totals:         0      10       0       0       0       0
  6239 ;;Total ram usage:       10 bytes
  6240 ;; Hardware stack levels used: 1
  6241 ;; Hardware stack levels required when called: 3
  6242 ;; This function calls:
  6243 ;;		___lldiv
  6244 ;;		___wmul
  6245 ;;		_runCurrentModeControl
  6246 ;;		_runVoltageModeControl
  6247 ;; This function is called by:
  6248 ;;		_Tick490Hz
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252  0298                     _controlRoutine:	
  6253                           ;psect for function _controlRoutine
  6254                           
  6255  0298                     i1l2354:	
  6256                           ;incstack = 0
  6257                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6258                           
  6259                           
  6260                           ;Controller.c: 60:     if(currentState == voltageModeControl){
  6261  0298  3002               	movlw	2
  6262  0299  0020               	movlb	0	; select bank0
  6263  029A  066C               	xorwf	_currentState,w
  6264  029B  1D03               	btfss	3,2
  6265  029C  2A9E               	goto	u216_21
  6266  029D  2A9F               	goto	u216_20
  6267  029E                     u216_21:
  6268  029E  2ADA               	goto	i1l2362
  6269  029F                     u216_20:
  6270  029F                     i1l2356:
  6271                           
  6272                           ;Controller.c: 61:         runVoltageModeControl();
  6273  029F  3180  20B4  3182   	fcall	_runVoltageModeControl
  6274  02A2                     i1l2358:
  6275                           
  6276                           ;Controller.c: 62:         setPeriod = 79u;
  6277  02A2  304F               	movlw	79
  6278  02A3  0020               	movlb	0	; select bank0
  6279  02A4  00D2               	movwf	??_controlRoutine
  6280  02A5  0852               	movf	??_controlRoutine,w
  6281  02A6  00EE               	movwf	_setPeriod
  6282  02A7                     i1l2360:
  6283                           
  6284                           ;Controller.c: 64:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + voltageModeVariables.sumOutput;
  6285  02A7  3016               	movlw	22
  6286  02A8  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6287  02A9  0086               	movwf	6
  6288  02AA  0187               	clrf	7
  6289  02AB  3000               	movlw	0
  6290  02AC  00F9               	movwf	___lldiv@divisor+3
  6291  02AD  3000               	movlw	0
  6292  02AE  00F8               	movwf	___lldiv@divisor+2
  6293  02AF  3000               	movlw	0
  6294  02B0  00F7               	movwf	___lldiv@divisor+1
  6295  02B1  3019               	movlw	25
  6296  02B2  00F6               	movwf	___lldiv@divisor
  6297  02B3  3032               	movlw	50
  6298  02B4  00F2               	movwf	___wmul@multiplicand
  6299  02B5  3000               	movlw	0
  6300  02B6  00F3               	movwf	___wmul@multiplicand+1
  6301  02B7  086E               	movf	_setPeriod,w
  6302  02B8  00D2               	movwf	??_controlRoutine
  6303  02B9  01D3               	clrf	??_controlRoutine+1
  6304  02BA  0852               	movf	??_controlRoutine,w
  6305  02BB  00F0               	movwf	___wmul@multiplier
  6306  02BC  0853               	movf	??_controlRoutine+1,w
  6307  02BD  00F1               	movwf	___wmul@multiplier+1
  6308  02BE  318C  24B8  3182   	fcall	___wmul
  6309  02C1  0870               	movf	?___wmul,w
  6310  02C2  0020               	movlb	0	; select bank0
  6311  02C3  00D4               	movwf	??_controlRoutine+2
  6312  02C4  0871               	movf	?___wmul+1,w
  6313  02C5  00D5               	movwf	??_controlRoutine+3
  6314  02C6  01D6               	clrf	??_controlRoutine+4
  6315  02C7  01D7               	clrf	??_controlRoutine+5
  6316  02C8  0857               	movf	??_controlRoutine+5,w
  6317  02C9  00FD               	movwf	___lldiv@dividend+3
  6318  02CA  0856               	movf	??_controlRoutine+4,w
  6319  02CB  00FC               	movwf	___lldiv@dividend+2
  6320  02CC  0855               	movf	??_controlRoutine+3,w
  6321  02CD  00FB               	movwf	___lldiv@dividend+1
  6322  02CE  0854               	movf	??_controlRoutine+2,w
  6323  02CF  00FA               	movwf	___lldiv@dividend
  6324  02D0  318F  27A5  3182   	fcall	___lldiv
  6325  02D3  3F40               	moviw [0]fsr1
  6326  02D4  0776               	addwf	?___lldiv,w
  6327  02D5  0020               	movlb	0	; select bank0
  6328  02D6  00E3               	movwf	_setDuty
  6329  02D7  3F41               	moviw [1]fsr1
  6330  02D8  3D77               	addwfc	?___lldiv+1,w
  6331  02D9  00E4               	movwf	_setDuty+1
  6332  02DA                     i1l2362:
  6333                           
  6334                           ;Controller.c: 66:     if(currentState == currentModeControl){
  6335  02DA  3003               	movlw	3
  6336  02DB  066C               	xorwf	_currentState,w
  6337  02DC  1D03               	btfss	3,2
  6338  02DD  2ADF               	goto	u217_21
  6339  02DE  2AE0               	goto	u217_20
  6340  02DF                     u217_21:
  6341  02DF  2B1B               	goto	i1l2370
  6342  02E0                     u217_20:
  6343  02E0                     i1l2364:
  6344                           
  6345                           ;Controller.c: 67:         runCurrentModeControl();
  6346  02E0  318C  2443  3182   	fcall	_runCurrentModeControl
  6347  02E3                     i1l2366:
  6348                           
  6349                           ;Controller.c: 68:         setPeriod = 79u;
  6350  02E3  304F               	movlw	79
  6351  02E4  0020               	movlb	0	; select bank0
  6352  02E5  00D2               	movwf	??_controlRoutine
  6353  02E6  0852               	movf	??_controlRoutine,w
  6354  02E7  00EE               	movwf	_setPeriod
  6355  02E8                     i1l2368:
  6356                           
  6357                           ;Controller.c: 70:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + currentModeVariables.sumOutput;
  6358  02E8  3016               	movlw	22
  6359  02E9  3EA0               	addlw	(low (_currentModeVariables| 0))& (0+255)
  6360  02EA  0086               	movwf	6
  6361  02EB  0187               	clrf	7
  6362  02EC  3000               	movlw	0
  6363  02ED  00F9               	movwf	___lldiv@divisor+3
  6364  02EE  3000               	movlw	0
  6365  02EF  00F8               	movwf	___lldiv@divisor+2
  6366  02F0  3000               	movlw	0
  6367  02F1  00F7               	movwf	___lldiv@divisor+1
  6368  02F2  3019               	movlw	25
  6369  02F3  00F6               	movwf	___lldiv@divisor
  6370  02F4  3032               	movlw	50
  6371  02F5  00F2               	movwf	___wmul@multiplicand
  6372  02F6  3000               	movlw	0
  6373  02F7  00F3               	movwf	___wmul@multiplicand+1
  6374  02F8  086E               	movf	_setPeriod,w
  6375  02F9  00D2               	movwf	??_controlRoutine
  6376  02FA  01D3               	clrf	??_controlRoutine+1
  6377  02FB  0852               	movf	??_controlRoutine,w
  6378  02FC  00F0               	movwf	___wmul@multiplier
  6379  02FD  0853               	movf	??_controlRoutine+1,w
  6380  02FE  00F1               	movwf	___wmul@multiplier+1
  6381  02FF  318C  24B8  3182   	fcall	___wmul
  6382  0302  0870               	movf	?___wmul,w
  6383  0303  0020               	movlb	0	; select bank0
  6384  0304  00D4               	movwf	??_controlRoutine+2
  6385  0305  0871               	movf	?___wmul+1,w
  6386  0306  00D5               	movwf	??_controlRoutine+3
  6387  0307  01D6               	clrf	??_controlRoutine+4
  6388  0308  01D7               	clrf	??_controlRoutine+5
  6389  0309  0857               	movf	??_controlRoutine+5,w
  6390  030A  00FD               	movwf	___lldiv@dividend+3
  6391  030B  0856               	movf	??_controlRoutine+4,w
  6392  030C  00FC               	movwf	___lldiv@dividend+2
  6393  030D  0855               	movf	??_controlRoutine+3,w
  6394  030E  00FB               	movwf	___lldiv@dividend+1
  6395  030F  0854               	movf	??_controlRoutine+2,w
  6396  0310  00FA               	movwf	___lldiv@dividend
  6397  0311  318F  27A5  3182   	fcall	___lldiv
  6398  0314  3F40               	moviw [0]fsr1
  6399  0315  0776               	addwf	?___lldiv,w
  6400  0316  0020               	movlb	0	; select bank0
  6401  0317  00E3               	movwf	_setDuty
  6402  0318  3F41               	moviw [1]fsr1
  6403  0319  3D77               	addwfc	?___lldiv+1,w
  6404  031A  00E4               	movwf	_setDuty+1
  6405  031B                     i1l2370:
  6406                           
  6407                           ;Controller.c: 73:     uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * setP
      +                          eriod)) / 25);
  6408  031B  3000               	movlw	0
  6409  031C  00F9               	movwf	___lldiv@divisor+3
  6410  031D  3000               	movlw	0
  6411  031E  00F8               	movwf	___lldiv@divisor+2
  6412  031F  3000               	movlw	0
  6413  0320  00F7               	movwf	___lldiv@divisor+1
  6414  0321  3019               	movlw	25
  6415  0322  00F6               	movwf	___lldiv@divisor
  6416  0323  305A               	movlw	90
  6417  0324  00F2               	movwf	___wmul@multiplicand
  6418  0325  3000               	movlw	0
  6419  0326  00F3               	movwf	___wmul@multiplicand+1
  6420  0327  086E               	movf	_setPeriod,w
  6421  0328  00D2               	movwf	??_controlRoutine
  6422  0329  01D3               	clrf	??_controlRoutine+1
  6423  032A  0852               	movf	??_controlRoutine,w
  6424  032B  00F0               	movwf	___wmul@multiplier
  6425  032C  0853               	movf	??_controlRoutine+1,w
  6426  032D  00F1               	movwf	___wmul@multiplier+1
  6427  032E  318C  24B8  3182   	fcall	___wmul
  6428  0331  0870               	movf	?___wmul,w
  6429  0332  0020               	movlb	0	; select bank0
  6430  0333  00D4               	movwf	??_controlRoutine+2
  6431  0334  0871               	movf	?___wmul+1,w
  6432  0335  00D5               	movwf	??_controlRoutine+3
  6433  0336  01D6               	clrf	??_controlRoutine+4
  6434  0337  01D7               	clrf	??_controlRoutine+5
  6435  0338  0857               	movf	??_controlRoutine+5,w
  6436  0339  00FD               	movwf	___lldiv@dividend+3
  6437  033A  0856               	movf	??_controlRoutine+4,w
  6438  033B  00FC               	movwf	___lldiv@dividend+2
  6439  033C  0855               	movf	??_controlRoutine+3,w
  6440  033D  00FB               	movwf	___lldiv@dividend+1
  6441  033E  0854               	movf	??_controlRoutine+2,w
  6442  033F  00FA               	movwf	___lldiv@dividend
  6443  0340  318F  27A5  3182   	fcall	___lldiv
  6444  0343  0877               	movf	?___lldiv+1,w
  6445  0344  0020               	movlb	0	; select bank0
  6446  0345  00D9               	movwf	controlRoutine@maxDuty+1
  6447  0346  0876               	movf	?___lldiv,w
  6448  0347  00D8               	movwf	controlRoutine@maxDuty
  6449  0348                     i1l2372:
  6450                           
  6451                           ;Controller.c: 74:     uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * setP
      +                          eriod)) / 25);
  6452  0348  3000               	movlw	0
  6453  0349  00F9               	movwf	___lldiv@divisor+3
  6454  034A  3000               	movlw	0
  6455  034B  00F8               	movwf	___lldiv@divisor+2
  6456  034C  3000               	movlw	0
  6457  034D  00F7               	movwf	___lldiv@divisor+1
  6458  034E  3019               	movlw	25
  6459  034F  00F6               	movwf	___lldiv@divisor
  6460  0350  300A               	movlw	10
  6461  0351  00F2               	movwf	___wmul@multiplicand
  6462  0352  3000               	movlw	0
  6463  0353  00F3               	movwf	___wmul@multiplicand+1
  6464  0354  086E               	movf	_setPeriod,w
  6465  0355  00D2               	movwf	??_controlRoutine
  6466  0356  01D3               	clrf	??_controlRoutine+1
  6467  0357  0852               	movf	??_controlRoutine,w
  6468  0358  00F0               	movwf	___wmul@multiplier
  6469  0359  0853               	movf	??_controlRoutine+1,w
  6470  035A  00F1               	movwf	___wmul@multiplier+1
  6471  035B  318C  24B8  3182   	fcall	___wmul
  6472  035E  0870               	movf	?___wmul,w
  6473  035F  0020               	movlb	0	; select bank0
  6474  0360  00D4               	movwf	??_controlRoutine+2
  6475  0361  0871               	movf	?___wmul+1,w
  6476  0362  00D5               	movwf	??_controlRoutine+3
  6477  0363  01D6               	clrf	??_controlRoutine+4
  6478  0364  01D7               	clrf	??_controlRoutine+5
  6479  0365  0857               	movf	??_controlRoutine+5,w
  6480  0366  00FD               	movwf	___lldiv@dividend+3
  6481  0367  0856               	movf	??_controlRoutine+4,w
  6482  0368  00FC               	movwf	___lldiv@dividend+2
  6483  0369  0855               	movf	??_controlRoutine+3,w
  6484  036A  00FB               	movwf	___lldiv@dividend+1
  6485  036B  0854               	movf	??_controlRoutine+2,w
  6486  036C  00FA               	movwf	___lldiv@dividend
  6487  036D  318F  27A5  3182   	fcall	___lldiv
  6488  0370  0877               	movf	?___lldiv+1,w
  6489  0371  0020               	movlb	0	; select bank0
  6490  0372  00DB               	movwf	controlRoutine@minDuty+1
  6491  0373  0876               	movf	?___lldiv,w
  6492  0374  00DA               	movwf	controlRoutine@minDuty
  6493  0375                     i1l2374:
  6494                           
  6495                           ;Controller.c: 75:     if(setDuty > maxDuty) setDuty = maxDuty;
  6496  0375  0864               	movf	_setDuty+1,w
  6497  0376  0259               	subwf	controlRoutine@maxDuty+1,w
  6498  0377  1D03               	skipz
  6499  0378  2B7B               	goto	u218_25
  6500  0379  0863               	movf	_setDuty,w
  6501  037A  0258               	subwf	controlRoutine@maxDuty,w
  6502  037B                     u218_25:
  6503  037B  1803               	skipnc
  6504  037C  2B7E               	goto	u218_21
  6505  037D  2B7F               	goto	u218_20
  6506  037E                     u218_21:
  6507  037E  2B83               	goto	i1l445
  6508  037F                     u218_20:
  6509  037F                     i1l2376:
  6510  037F  0859               	movf	controlRoutine@maxDuty+1,w
  6511  0380  00E4               	movwf	_setDuty+1
  6512  0381  0858               	movf	controlRoutine@maxDuty,w
  6513  0382  00E3               	movwf	_setDuty
  6514  0383                     i1l445:
  6515                           
  6516                           ;Controller.c: 76:     if(setDuty < minDuty) setDuty = minDuty;
  6517  0383  085B               	movf	controlRoutine@minDuty+1,w
  6518  0384  0264               	subwf	_setDuty+1,w
  6519  0385  1D03               	skipz
  6520  0386  2B89               	goto	u219_25
  6521  0387  085A               	movf	controlRoutine@minDuty,w
  6522  0388  0263               	subwf	_setDuty,w
  6523  0389                     u219_25:
  6524  0389  1803               	skipnc
  6525  038A  2B8C               	goto	u219_21
  6526  038B  2B8D               	goto	u219_20
  6527  038C                     u219_21:
  6528  038C  2B91               	goto	i1l448
  6529  038D                     u219_20:
  6530  038D                     i1l2378:
  6531  038D  085B               	movf	controlRoutine@minDuty+1,w
  6532  038E  00E4               	movwf	_setDuty+1
  6533  038F  085A               	movf	controlRoutine@minDuty,w
  6534  0390  00E3               	movwf	_setDuty
  6535  0391                     i1l448:
  6536  0391  0008               	return
  6537  0392                     __end_of_controlRoutine:
  6538                           
  6539                           	psect	text30
  6540  00B4                     __ptext30:	
  6541 ;; *************** function _runVoltageModeControl *****************
  6542 ;; Defined at:
  6543 ;;		line 86 in file "Controller.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  propMult        8   40[BANK0 ] long long 
  6548 ;;  integralMult    8   32[BANK0 ] long long 
  6549 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6559 ;;      Params:         0       0       0       0       0       0
  6560 ;;      Locals:         0      18       0       0       0       0
  6561 ;;      Temps:          0      16       0       0       0       0
  6562 ;;      Totals:         0      34       0       0       0       0
  6563 ;;Total ram usage:       34 bytes
  6564 ;; Hardware stack levels used: 1
  6565 ;; Hardware stack levels required when called: 2
  6566 ;; This function calls:
  6567 ;;		___lmul
  6568 ;;		___omul
  6569 ;;		_abs
  6570 ;;		_convertRawToMilliVolts
  6571 ;;		i1_readGPIO
  6572 ;; This function is called by:
  6573 ;;		_controlRoutine
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577  00B4                     _runVoltageModeControl:	
  6578                           ;psect for function _runVoltageModeControl
  6579                           
  6580  00B4                     i1l2252:	
  6581                           ;incstack = 0
  6582                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6583                           
  6584                           
  6585                           ;Controller.c: 89:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6586  00B4  0020               	movlb	0	; select bank0
  6587  00B5  085E               	movf	_filteredVout+1,w
  6588  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6589  00B7  085D               	movf	_filteredVout,w
  6590  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6591  00B9  318D  25DB  3180   	fcall	_convertRawToMilliVolts
  6592  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6593  00BD  0020               	movlb	0	; select bank0
  6594  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6595  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6596  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6597                           
  6598                           ;Controller.c: 92:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVolt
      +                          age;
  6599  00C1  3008               	movlw	8
  6600  00C2  318E  2616  3180   	fcall	i1_readGPIO
  6601  00C5  3A00               	xorlw	0
  6602  00C6  1903               	skipnz
  6603  00C7  28C9               	goto	u192_21
  6604  00C8  28CA               	goto	u192_20
  6605  00C9                     u192_21:
  6606  00C9  28D9               	goto	i1l2256
  6607  00CA                     u192_20:
  6608  00CA                     i1l2254:
  6609  00CA  3080               	movlw	128
  6610  00CB  0020               	movlb	0	; select bank0
  6611  00CC  00B0               	movwf	??_runVoltageModeControl
  6612  00CD  303E               	movlw	62
  6613  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6614  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6615  00D0  0230               	subwf	??_runVoltageModeControl,w
  6616  00D1  0021               	movlb	1	; select bank1
  6617  00D2  00C6               	movwf	_voltageModeVariables^(0+128)
  6618  00D3  0020               	movlb	0	; select bank0
  6619  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6620  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6621  00D6  0021               	movlb	1	; select bank1
  6622  00D7  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6623  00D8  28E7               	goto	i1l2258
  6624  00D9                     i1l2256:
  6625  00D9  30E0               	movlw	224
  6626  00DA  0020               	movlb	0	; select bank0
  6627  00DB  00B0               	movwf	??_runVoltageModeControl
  6628  00DC  302E               	movlw	46
  6629  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6630  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6631  00DF  0230               	subwf	??_runVoltageModeControl,w
  6632  00E0  0021               	movlb	1	; select bank1
  6633  00E1  00C6               	movwf	_voltageModeVariables^(0+128)
  6634  00E2  0020               	movlb	0	; select bank0
  6635  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6636  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6637  00E5  0021               	movlb	1	; select bank1
  6638  00E6  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6639  00E7                     i1l2258:
  6640                           
  6641                           ;Controller.c: 96:    int64_t integralMult = ((int64_t) (15u * ((int64_t) voltageModeVar
      +                          iables.error) )) * 267u;
  6642  00E7  0846               	movf	_voltageModeVariables^(0+128),w
  6643  00E8  0020               	movlb	0	; select bank0
  6644  00E9  00A0               	movwf	___omul@multiplier
  6645  00EA  0021               	movlb	1	; select bank1
  6646  00EB  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6647  00EC  0020               	movlb	0	; select bank0
  6648  00ED  00A1               	movwf	___omul@multiplier+1
  6649  00EE  0D89               	rlf	9,f
  6650  00EF  3B89               	subwfb	9,f
  6651  00F0  0989               	comf	9,f
  6652  00F1  00A2               	movwf	___omul@multiplier+2
  6653  00F2  00A3               	movwf	___omul@multiplier+3
  6654  00F3  00A4               	movwf	___omul@multiplier+4
  6655  00F4  00A5               	movwf	___omul@multiplier+5
  6656  00F5  00A6               	movwf	___omul@multiplier+6
  6657  00F6  00A7               	movwf	___omul@multiplier+7
  6658  00F7  3000               	movlw	0
  6659  00F8  00AF               	movwf	___omul@multiplicand+7
  6660  00F9  3000               	movlw	0
  6661  00FA  00AE               	movwf	___omul@multiplicand+6
  6662  00FB  3000               	movlw	0
  6663  00FC  00AD               	movwf	___omul@multiplicand+5
  6664  00FD  3000               	movlw	0
  6665  00FE  00AC               	movwf	___omul@multiplicand+4
  6666  00FF  3000               	movlw	0
  6667  0100  00AB               	movwf	___omul@multiplicand+3
  6668  0101  3000               	movlw	0
  6669  0102  00AA               	movwf	___omul@multiplicand+2
  6670  0103  300F               	movlw	15
  6671  0104  00A9               	movwf	___omul@multiplicand+1
  6672  0105  30A5               	movlw	165
  6673  0106  00A8               	movwf	___omul@multiplicand
  6674  0107  318E  26A7  3180   	fcall	___omul
  6675  010A  0020               	movlb	0	; select bank0
  6676  010B  0820               	movf	?___omul,w
  6677  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6678  010D  0821               	movf	?___omul+1,w
  6679  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6680  010F  0822               	movf	?___omul+2,w
  6681  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6682  0111  0823               	movf	?___omul+3,w
  6683  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6684  0113  0824               	movf	?___omul+4,w
  6685  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6686  0115  0825               	movf	?___omul+5,w
  6687  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6688  0117  0826               	movf	?___omul+6,w
  6689  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6690  0119  0827               	movf	?___omul+7,w
  6691  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6692  011B                     i1l2260:
  6693                           
  6694                           ;Controller.c: 98:    voltageModeVariables.integral = integralMult;
  6695  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6696  011C  0021               	movlb	1	; select bank1
  6697  011D  00CB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6698  011E  0020               	movlb	0	; select bank0
  6699  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6700  0120  0021               	movlb	1	; select bank1
  6701  0121  00CA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6702  0122  0020               	movlb	0	; select bank0
  6703  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6704  0124  0021               	movlb	1	; select bank1
  6705  0125  00C9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6706  0126  0020               	movlb	0	; select bank0
  6707  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6708  0128  0021               	movlb	1	; select bank1
  6709  0129  00C8               	movwf	(_voltageModeVariables^(0+128)+2)
  6710  012A                     i1l2262:
  6711                           
  6712                           ;Controller.c: 99:    voltageModeVariables.integralOutputScaled = (voltageModeVariables.
      +                          integralOutputScaled + voltageModeVariables.integral);
  6713  012A  300E               	movlw	14
  6714  012B  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6715  012C  0086               	movwf	6
  6716  012D  0187               	clrf	7
  6717  012E  3F40               	moviw [0]fsr1
  6718  012F  0020               	movlb	0	; select bank0
  6719  0130  00B0               	movwf	??_runVoltageModeControl
  6720  0131  3F41               	moviw [1]fsr1
  6721  0132  00B1               	movwf	??_runVoltageModeControl+1
  6722  0133  3F42               	moviw [2]fsr1
  6723  0134  00B2               	movwf	??_runVoltageModeControl+2
  6724  0135  3F43               	moviw [3]fsr1
  6725  0136  00B3               	movwf	??_runVoltageModeControl+3
  6726  0137  3F44               	moviw [4]fsr1
  6727  0138  00B4               	movwf	??_runVoltageModeControl+4
  6728  0139  3F45               	moviw [5]fsr1
  6729  013A  00B5               	movwf	??_runVoltageModeControl+5
  6730  013B  3F46               	moviw [6]fsr1
  6731  013C  00B6               	movwf	??_runVoltageModeControl+6
  6732  013D  3F47               	moviw [7]fsr1
  6733  013E  00B7               	movwf	??_runVoltageModeControl+7
  6734  013F  0021               	movlb	1	; select bank1
  6735  0140  0848               	movf	(_voltageModeVariables^(0+128)+2),w
  6736  0141  0020               	movlb	0	; select bank0
  6737  0142  00B8               	movwf	??_runVoltageModeControl+8
  6738  0143  0021               	movlb	1	; select bank1
  6739  0144  0849               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6740  0145  0020               	movlb	0	; select bank0
  6741  0146  00B9               	movwf	??_runVoltageModeControl+9
  6742  0147  0021               	movlb	1	; select bank1
  6743  0148  084A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6744  0149  0020               	movlb	0	; select bank0
  6745  014A  00BA               	movwf	??_runVoltageModeControl+10
  6746  014B  0021               	movlb	1	; select bank1
  6747  014C  084B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6748  014D  0020               	movlb	0	; select bank0
  6749  014E  00BB               	movwf	??_runVoltageModeControl+11
  6750  014F  3000               	movlw	0
  6751  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6752  0151  30FF               	movlw	255
  6753  0152  00BC               	movwf	??_runVoltageModeControl+12
  6754  0153  00BD               	movwf	??_runVoltageModeControl+13
  6755  0154  00BE               	movwf	??_runVoltageModeControl+14
  6756  0155  00BF               	movwf	??_runVoltageModeControl+15
  6757  0156  0838               	movf	??_runVoltageModeControl+8,w
  6758  0157  07B0               	addwf	??_runVoltageModeControl,f
  6759  0158  0839               	movf	??_runVoltageModeControl+9,w
  6760  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6761  015A  083A               	movf	??_runVoltageModeControl+10,w
  6762  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6763  015C  083B               	movf	??_runVoltageModeControl+11,w
  6764  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6765  015E  083C               	movf	??_runVoltageModeControl+12,w
  6766  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6767  0160  083D               	movf	??_runVoltageModeControl+13,w
  6768  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6769  0162  083E               	movf	??_runVoltageModeControl+14,w
  6770  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6771  0164  083F               	movf	??_runVoltageModeControl+15,w
  6772  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6773  0166  0837               	movf	??_runVoltageModeControl+7,w
  6774  0167  0021               	movlb	1	; select bank1
  6775  0168  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6776  0169  0020               	movlb	0	; select bank0
  6777  016A  0836               	movf	??_runVoltageModeControl+6,w
  6778  016B  0021               	movlb	1	; select bank1
  6779  016C  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6780  016D  0020               	movlb	0	; select bank0
  6781  016E  0835               	movf	??_runVoltageModeControl+5,w
  6782  016F  0021               	movlb	1	; select bank1
  6783  0170  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6784  0171  0020               	movlb	0	; select bank0
  6785  0172  0834               	movf	??_runVoltageModeControl+4,w
  6786  0173  0021               	movlb	1	; select bank1
  6787  0174  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6788  0175  0020               	movlb	0	; select bank0
  6789  0176  0833               	movf	??_runVoltageModeControl+3,w
  6790  0177  0021               	movlb	1	; select bank1
  6791  0178  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6792  0179  0020               	movlb	0	; select bank0
  6793  017A  0832               	movf	??_runVoltageModeControl+2,w
  6794  017B  0021               	movlb	1	; select bank1
  6795  017C  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6796  017D  0020               	movlb	0	; select bank0
  6797  017E  0831               	movf	??_runVoltageModeControl+1,w
  6798  017F  0021               	movlb	1	; select bank1
  6799  0180  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6800  0181  0020               	movlb	0	; select bank0
  6801  0182  0830               	movf	??_runVoltageModeControl,w
  6802  0183  0021               	movlb	1	; select bank1
  6803  0184  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6804  0185                     i1l2264:
  6805                           
  6806                           ;Controller.c: 102:    if(voltageModeVariables.integralOutputScaled > (2147483648u)){
  6807  0185  1BDB               	btfsc	((_voltageModeVariables+7)^(0+128)+14),7
  6808  0186  299E               	goto	u193_21
  6809  0187  085B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6810  0188  1D03               	btfss	3,2
  6811  0189  299F               	goto	u193_20
  6812  018A  085A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6813  018B  1D03               	btfss	3,2
  6814  018C  299F               	goto	u193_20
  6815  018D  0859               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6816  018E  1D03               	btfss	3,2
  6817  018F  299F               	goto	u193_20
  6818  0190  0858               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6819  0191  1D03               	btfss	3,2
  6820  0192  299F               	goto	u193_20
  6821  0193  3001               	movlw	1
  6822  0194  0254               	subwf	(_voltageModeVariables^(0+128)+14),w
  6823  0195  3000               	movlw	0
  6824  0196  3B55               	subwfb	((_voltageModeVariables+1)^(0+128)+14),w
  6825  0197  3000               	movlw	0
  6826  0198  3B56               	subwfb	((_voltageModeVariables+2)^(0+128)+14),w
  6827  0199  3080               	movlw	128
  6828  019A  3B57               	subwfb	((_voltageModeVariables+3)^(0+128)+14),w
  6829  019B  1C03               	btfss	3,0
  6830  019C  299E               	goto	u193_21
  6831  019D  299F               	goto	u193_20
  6832  019E                     u193_21:
  6833  019E  29B0               	goto	i1l2268
  6834  019F                     u193_20:
  6835  019F                     i1l2266:
  6836                           
  6837                           ;Controller.c: 103:        voltageModeVariables.integralOutputScaled = (2147483648u);
  6838  019F  3000               	movlw	0
  6839  01A0  0021               	movlb	1	; select bank1
  6840  01A1  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6841  01A2  3000               	movlw	0
  6842  01A3  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6843  01A4  3000               	movlw	0
  6844  01A5  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6845  01A6  3000               	movlw	0
  6846  01A7  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6847  01A8  3080               	movlw	128
  6848  01A9  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6849  01AA  3000               	movlw	0
  6850  01AB  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6851  01AC  3000               	movlw	0
  6852  01AD  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6853  01AE  3000               	movlw	0
  6854  01AF  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6855  01B0                     i1l2268:
  6856                           
  6857                           ;Controller.c: 106:    if(voltageModeVariables.integralOutputScaled < 0){
  6858  01B0  300E               	movlw	14
  6859  01B1  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6860  01B2  0086               	movwf	6
  6861  01B3  0187               	clrf	7
  6862  01B4  3F47               	moviw [7]fsr1
  6863  01B5  0020               	movlb	0	; select bank0
  6864  01B6  00B0               	movwf	??_runVoltageModeControl
  6865  01B7  1FB0               	btfss	??_runVoltageModeControl,7
  6866  01B8  29BA               	goto	u194_21
  6867  01B9  29BB               	goto	u194_20
  6868  01BA                     u194_21:
  6869  01BA  29EA               	goto	i1l2274
  6870  01BB                     u194_20:
  6871  01BB                     i1l2270:
  6872                           
  6873                           ;Controller.c: 107:         if(abs(voltageModeVariables.integralOutputScaled) > (2147483
      +                          648u)){
  6874  01BB  0021               	movlb	1	; select bank1
  6875  01BC  0855               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6876  01BD  00F1               	movwf	abs@a+1
  6877  01BE  0854               	movf	(_voltageModeVariables^(0+128)+14),w
  6878  01BF  00F0               	movwf	abs@a
  6879  01C0  318C  249E  3180   	fcall	_abs
  6880  01C3  0870               	movf	?_abs,w
  6881  01C4  0020               	movlb	0	; select bank0
  6882  01C5  00B0               	movwf	??_runVoltageModeControl
  6883  01C6  0871               	movf	?_abs+1,w
  6884  01C7  00B1               	movwf	??_runVoltageModeControl+1
  6885  01C8  3000               	movlw	0
  6886  01C9  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6887  01CA  30FF               	movlw	255
  6888  01CB  00B2               	movwf	??_runVoltageModeControl+2
  6889  01CC  00B3               	movwf	??_runVoltageModeControl+3
  6890  01CD  3001               	movlw	1
  6891  01CE  0230               	subwf	??_runVoltageModeControl,w
  6892  01CF  3000               	movlw	0
  6893  01D0  3B31               	subwfb	??_runVoltageModeControl+1,w
  6894  01D1  3000               	movlw	0
  6895  01D2  3B32               	subwfb	??_runVoltageModeControl+2,w
  6896  01D3  3080               	movlw	128
  6897  01D4  3B33               	subwfb	??_runVoltageModeControl+3,w
  6898  01D5  1C03               	btfss	3,0
  6899  01D6  29D8               	goto	u195_21
  6900  01D7  29D9               	goto	u195_20
  6901  01D8                     u195_21:
  6902  01D8  29EA               	goto	i1l2274
  6903  01D9                     u195_20:
  6904  01D9                     i1l2272:
  6905                           
  6906                           ;Controller.c: 108:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(2147483648u));
  6907  01D9  3000               	movlw	0
  6908  01DA  0021               	movlb	1	; select bank1
  6909  01DB  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6910  01DC  3000               	movlw	0
  6911  01DD  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6912  01DE  3000               	movlw	0
  6913  01DF  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6914  01E0  3000               	movlw	0
  6915  01E1  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6916  01E2  3080               	movlw	128
  6917  01E3  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6918  01E4  3000               	movlw	0
  6919  01E5  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6920  01E6  3000               	movlw	0
  6921  01E7  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6922  01E8  3000               	movlw	0
  6923  01E9  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6924  01EA                     i1l2274:
  6925                           
  6926                           ;Controller.c: 113:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 6u);
  6927  01EA  300E               	movlw	14
  6928  01EB  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6929  01EC  0086               	movwf	6
  6930  01ED  0187               	clrf	7
  6931  01EE  3F40               	moviw [0]fsr1
  6932  01EF  0020               	movlb	0	; select bank0
  6933  01F0  00B0               	movwf	??_runVoltageModeControl
  6934  01F1  3F41               	moviw [1]fsr1
  6935  01F2  00B1               	movwf	??_runVoltageModeControl+1
  6936  01F3  3F42               	moviw [2]fsr1
  6937  01F4  00B2               	movwf	??_runVoltageModeControl+2
  6938  01F5  3F43               	moviw [3]fsr1
  6939  01F6  00B3               	movwf	??_runVoltageModeControl+3
  6940  01F7  3F44               	moviw [4]fsr1
  6941  01F8  00B4               	movwf	??_runVoltageModeControl+4
  6942  01F9  3F45               	moviw [5]fsr1
  6943  01FA  00B5               	movwf	??_runVoltageModeControl+5
  6944  01FB  3F46               	moviw [6]fsr1
  6945  01FC  00B6               	movwf	??_runVoltageModeControl+6
  6946  01FD  3F47               	moviw [7]fsr1
  6947  01FE  00B7               	movwf	??_runVoltageModeControl+7
  6948  01FF  3016               	movlw	22
  6949  0200  00B8               	movwf	??_runVoltageModeControl+8
  6950  0201                     u196_25:
  6951  0201  0020               	movlb	0	; select bank0
  6952  0202  37B7               	asrf	??_runVoltageModeControl+7,f
  6953  0203  0CB6               	rrf	??_runVoltageModeControl+6,f
  6954  0204  0CB5               	rrf	??_runVoltageModeControl+5,f
  6955  0205  0CB4               	rrf	??_runVoltageModeControl+4,f
  6956  0206  0CB3               	rrf	??_runVoltageModeControl+3,f
  6957  0207  0CB2               	rrf	??_runVoltageModeControl+2,f
  6958  0208  0CB1               	rrf	??_runVoltageModeControl+1,f
  6959  0209  0CB0               	rrf	??_runVoltageModeControl,f
  6960  020A                     u196_20:
  6961  020A  0BB8               	decfsz	??_runVoltageModeControl+8,f
  6962  020B  2A01               	goto	u196_25
  6963  020C  0020               	movlb	0	; select bank0
  6964  020D  0833               	movf	??_runVoltageModeControl+3,w
  6965  020E  0021               	movlb	1	; select bank1
  6966  020F  00D3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  6967  0210  0020               	movlb	0	; select bank0
  6968  0211  0832               	movf	??_runVoltageModeControl+2,w
  6969  0212  0021               	movlb	1	; select bank1
  6970  0213  00D2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  6971  0214  0020               	movlb	0	; select bank0
  6972  0215  0831               	movf	??_runVoltageModeControl+1,w
  6973  0216  0021               	movlb	1	; select bank1
  6974  0217  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  6975  0218  0020               	movlb	0	; select bank0
  6976  0219  0830               	movf	??_runVoltageModeControl,w
  6977  021A  0021               	movlb	1	; select bank1
  6978  021B  00D0               	movwf	(_voltageModeVariables^(0+128)+10)
  6979  021C                     i1l2276:
  6980                           
  6981                           ;Controller.c: 116:    int64_t propMult = (int32_t) (18u * ((int32_t) voltageModeVariabl
      +                          es.error));
  6982  021C  0846               	movf	_voltageModeVariables^(0+128),w
  6983  021D  00F0               	movwf	___lmul@multiplier
  6984  021E  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6985  021F  00F1               	movwf	___lmul@multiplier+1
  6986  0220  0D89               	rlf	9,f
  6987  0221  3B89               	subwfb	9,f
  6988  0222  0989               	comf	9,f
  6989  0223  00F2               	movwf	___lmul@multiplier+2
  6990  0224  00F3               	movwf	___lmul@multiplier+3
  6991  0225  3000               	movlw	0
  6992  0226  00F7               	movwf	___lmul@multiplicand+3
  6993  0227  3000               	movlw	0
  6994  0228  00F6               	movwf	___lmul@multiplicand+2
  6995  0229  3000               	movlw	0
  6996  022A  00F5               	movwf	___lmul@multiplicand+1
  6997  022B  3012               	movlw	18
  6998  022C  00F4               	movwf	___lmul@multiplicand
  6999  022D  318D  2573  3180   	fcall	___lmul
  7000  0230  0870               	movf	?___lmul,w
  7001  0231  0020               	movlb	0	; select bank0
  7002  0232  00C8               	movwf	runVoltageModeControl@propMult
  7003  0233  0871               	movf	?___lmul+1,w
  7004  0234  00C9               	movwf	runVoltageModeControl@propMult+1
  7005  0235  0872               	movf	?___lmul+2,w
  7006  0236  00CA               	movwf	runVoltageModeControl@propMult+2
  7007  0237  0873               	movf	?___lmul+3,w
  7008  0238  00CB               	movwf	runVoltageModeControl@propMult+3
  7009  0239  3000               	movlw	0
  7010  023A  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7011  023B  30FF               	movlw	255
  7012  023C  00CC               	movwf	runVoltageModeControl@propMult+4
  7013  023D  00CD               	movwf	runVoltageModeControl@propMult+5
  7014  023E  00CE               	movwf	runVoltageModeControl@propMult+6
  7015  023F  00CF               	movwf	runVoltageModeControl@propMult+7
  7016  0240                     i1l2278:
  7017                           
  7018                           ;Controller.c: 117:    voltageModeVariables.proportionalOutput = propMult >> 10u;
  7019  0240  3048               	movlw	low runVoltageModeControl@propMult
  7020  0241  0086               	movwf	6
  7021  0242  3000               	movlw	high runVoltageModeControl@propMult
  7022  0243  0087               	movwf	7
  7023  0244  3F40               	moviw [0]fsr1
  7024  0245  00B0               	movwf	??_runVoltageModeControl
  7025  0246  3F41               	moviw [1]fsr1
  7026  0247  00B1               	movwf	??_runVoltageModeControl+1
  7027  0248  3F42               	moviw [2]fsr1
  7028  0249  00B2               	movwf	??_runVoltageModeControl+2
  7029  024A  3F43               	moviw [3]fsr1
  7030  024B  00B3               	movwf	??_runVoltageModeControl+3
  7031  024C  3F44               	moviw [4]fsr1
  7032  024D  00B4               	movwf	??_runVoltageModeControl+4
  7033  024E  3F45               	moviw [5]fsr1
  7034  024F  00B5               	movwf	??_runVoltageModeControl+5
  7035  0250  3F46               	moviw [6]fsr1
  7036  0251  00B6               	movwf	??_runVoltageModeControl+6
  7037  0252  3F47               	moviw [7]fsr1
  7038  0253  00B7               	movwf	??_runVoltageModeControl+7
  7039  0254  300A               	movlw	10
  7040  0255  00B8               	movwf	??_runVoltageModeControl+8
  7041  0256                     u197_25:
  7042  0256  0020               	movlb	0	; select bank0
  7043  0257  37B7               	asrf	??_runVoltageModeControl+7,f
  7044  0258  0CB6               	rrf	??_runVoltageModeControl+6,f
  7045  0259  0CB5               	rrf	??_runVoltageModeControl+5,f
  7046  025A  0CB4               	rrf	??_runVoltageModeControl+4,f
  7047  025B  0CB3               	rrf	??_runVoltageModeControl+3,f
  7048  025C  0CB2               	rrf	??_runVoltageModeControl+2,f
  7049  025D  0CB1               	rrf	??_runVoltageModeControl+1,f
  7050  025E  0CB0               	rrf	??_runVoltageModeControl,f
  7051  025F                     u197_20:
  7052  025F  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7053  0260  2A56               	goto	u197_25
  7054  0261  0020               	movlb	0	; select bank0
  7055  0262  0833               	movf	??_runVoltageModeControl+3,w
  7056  0263  0021               	movlb	1	; select bank1
  7057  0264  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7058  0265  0020               	movlb	0	; select bank0
  7059  0266  0832               	movf	??_runVoltageModeControl+2,w
  7060  0267  0021               	movlb	1	; select bank1
  7061  0268  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7062  0269  0020               	movlb	0	; select bank0
  7063  026A  0831               	movf	??_runVoltageModeControl+1,w
  7064  026B  0021               	movlb	1	; select bank1
  7065  026C  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7066  026D  0020               	movlb	0	; select bank0
  7067  026E  0830               	movf	??_runVoltageModeControl,w
  7068  026F  0021               	movlb	1	; select bank1
  7069  0270  00CC               	movwf	(_voltageModeVariables^(0+128)+6)
  7070  0271                     i1l2280:
  7071                           
  7072                           ;Controller.c: 119:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7073  0271  0850               	movf	(_voltageModeVariables^(0+128)+10),w
  7074  0272  074C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7075  0273  0020               	movlb	0	; select bank0
  7076  0274  00B0               	movwf	??_runVoltageModeControl
  7077  0275  0021               	movlb	1	; select bank1
  7078  0276  0851               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7079  0277  3D4D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7080  0278  0020               	movlb	0	; select bank0
  7081  0279  00B1               	movwf	??_runVoltageModeControl+1
  7082  027A  0021               	movlb	1	; select bank1
  7083  027B  0852               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7084  027C  3D4E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7085  027D  0020               	movlb	0	; select bank0
  7086  027E  00B2               	movwf	??_runVoltageModeControl+2
  7087  027F  0021               	movlb	1	; select bank1
  7088  0280  0853               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7089  0281  3D4F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7090  0282  0020               	movlb	0	; select bank0
  7091  0283  00B3               	movwf	??_runVoltageModeControl+3
  7092  0284  0833               	movf	??_runVoltageModeControl+3,w
  7093  0285  0021               	movlb	1	; select bank1
  7094  0286  00DF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7095  0287  0020               	movlb	0	; select bank0
  7096  0288  0832               	movf	??_runVoltageModeControl+2,w
  7097  0289  0021               	movlb	1	; select bank1
  7098  028A  00DE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7099  028B  0020               	movlb	0	; select bank0
  7100  028C  0831               	movf	??_runVoltageModeControl+1,w
  7101  028D  0021               	movlb	1	; select bank1
  7102  028E  00DD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7103  028F  0020               	movlb	0	; select bank0
  7104  0290  0830               	movf	??_runVoltageModeControl,w
  7105  0291  0021               	movlb	1	; select bank1
  7106  0292  00DC               	movwf	(_voltageModeVariables^(0+128)+22)
  7107  0293                     i1l2282:
  7108                           
  7109                           ;Controller.c: 120:    voltageModeVariables.previousError = voltageModeVariables.error;
  7110  0293  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7111  0294  00E1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7112  0295  0846               	movf	_voltageModeVariables^(0+128),w
  7113  0296  00E0               	movwf	(_voltageModeVariables^(0+128)+26)
  7114  0297                     i1l456:
  7115  0297  0008               	return
  7116  0298                     __end_of_runVoltageModeControl:
  7117                           
  7118                           	psect	text31
  7119  0E16                     __ptext31:	
  7120 ;; *************** function i1_readGPIO *****************
  7121 ;; Defined at:
  7122 ;;		line 79 in file "GPIO.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  gpioNumber      1    wreg     const enum E2798
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7127 ;;  portType        1    7[COMMON] unsigned char 
  7128 ;;  portNumber      1    6[COMMON] unsigned char 
  7129 ;;  returnValueB    1    5[COMMON] unsigned char 
  7130 ;;  readB           1    4[COMMON] unsigned char 
  7131 ;;  returnValueA    1    3[COMMON] unsigned char 
  7132 ;;  readA           1    2[COMMON] unsigned char 
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      _Bool 
  7135 ;; Registers used:
  7136 ;;		wreg, status,2, status,0
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7142 ;;      Params:         0       0       0       0       0       0
  7143 ;;      Locals:         7       0       0       0       0       0
  7144 ;;      Temps:          2       0       0       0       0       0
  7145 ;;      Totals:         9       0       0       0       0       0
  7146 ;;Total ram usage:        9 bytes
  7147 ;; Hardware stack levels used: 1
  7148 ;; This function calls:
  7149 ;;		Nothing
  7150 ;; This function is called by:
  7151 ;;		_runVoltageModeControl
  7152 ;;		_currentTripRead
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156  0E16                     i1_readGPIO:	
  7157                           ;psect for function i1_readGPIO
  7158                           
  7159                           
  7160                           ;incstack = 0
  7161                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7162                           ;i1readGPIO@gpioNumber stored from wreg
  7163  0E16  00F8               	movwf	i1readGPIO@gpioNumber
  7164  0E17                     i1l2112:
  7165                           
  7166                           ;GPIO.c: 81:     uint8_t portType = 0;
  7167  0E17  01F7               	clrf	i1readGPIO@portType
  7168  0E18                     i1l2114:
  7169                           
  7170                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7171  0E18  3008               	movlw	8
  7172  0E19  0278               	subwf	i1readGPIO@gpioNumber,w
  7173  0E1A  1C03               	skipc
  7174  0E1B  2E1D               	goto	u159_21
  7175  0E1C  2E1E               	goto	u159_20
  7176  0E1D                     u159_21:
  7177  0E1D  2E26               	goto	i1l2120
  7178  0E1E                     u159_20:
  7179  0E1E                     i1l2116:
  7180                           
  7181                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7182  0E1E  0878               	movf	i1readGPIO@gpioNumber,w
  7183  0E1F  3EF8               	addlw	248
  7184  0E20  00F0               	movwf	??i1_readGPIO
  7185  0E21  0870               	movf	??i1_readGPIO,w
  7186  0E22  00F6               	movwf	i1readGPIO@portNumber
  7187  0E23                     i1l2118:
  7188                           
  7189                           ;GPIO.c: 84:         portType = 1;
  7190  0E23  01F7               	clrf	i1readGPIO@portType
  7191  0E24  0AF7               	incf	i1readGPIO@portType,f
  7192                           
  7193                           ;GPIO.c: 85:     }
  7194  0E25  2E2B               	goto	i1l2124
  7195  0E26                     i1l2120:
  7196                           
  7197                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7198  0E26  0878               	movf	i1readGPIO@gpioNumber,w
  7199  0E27  00F0               	movwf	??i1_readGPIO
  7200  0E28  0870               	movf	??i1_readGPIO,w
  7201  0E29  00F6               	movwf	i1readGPIO@portNumber
  7202  0E2A                     i1l2122:
  7203                           
  7204                           ;GPIO.c: 88:         portType = 0;
  7205  0E2A  01F7               	clrf	i1readGPIO@portType
  7206  0E2B                     i1l2124:
  7207                           
  7208                           ;GPIO.c: 91:     if(portType == 0){
  7209  0E2B  0877               	movf	i1readGPIO@portType,w
  7210  0E2C  1D03               	btfss	3,2
  7211  0E2D  2E2F               	goto	u160_21
  7212  0E2E  2E30               	goto	u160_20
  7213  0E2F                     u160_21:
  7214  0E2F  2E43               	goto	i1l2136
  7215  0E30                     u160_20:
  7216  0E30                     i1l2126:
  7217                           
  7218                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7219  0E30  0020               	movlb	0	; select bank0
  7220  0E31  080C               	movf	12,w	;volatile
  7221  0E32  00F0               	movwf	??i1_readGPIO
  7222  0E33  0870               	movf	??i1_readGPIO,w
  7223  0E34  00F2               	movwf	i1readGPIO@readA
  7224  0E35                     i1l2128:
  7225                           
  7226                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7227  0E35  0872               	movf	i1readGPIO@readA,w
  7228  0E36  00F0               	movwf	??i1_readGPIO
  7229  0E37  0A76               	incf	i1readGPIO@portNumber,w
  7230  0E38  2E3A               	goto	u161_24
  7231  0E39                     u161_25:
  7232  0E39  36F0               	lsrf	??i1_readGPIO,f
  7233  0E3A                     u161_24:
  7234  0E3A  0B89               	decfsz	9,f
  7235  0E3B  2E39               	goto	u161_25
  7236  0E3C  0870               	movf	??i1_readGPIO,w
  7237  0E3D  3901               	andlw	1
  7238  0E3E  00F1               	movwf	??i1_readGPIO+1
  7239  0E3F  0871               	movf	??i1_readGPIO+1,w
  7240  0E40  00F3               	movwf	i1readGPIO@returnValueA
  7241  0E41                     i1l2130:
  7242                           
  7243                           ;GPIO.c: 94:         return returnValueA;
  7244  0E41  0873               	movf	i1readGPIO@returnValueA,w
  7245  0E42  2E5C               	goto	i1l322
  7246  0E43                     i1l2136:
  7247  0E43  0377               	decf	i1readGPIO@portType,w
  7248  0E44  1D03               	btfss	3,2
  7249  0E45  2E47               	goto	u162_21
  7250  0E46  2E48               	goto	u162_20
  7251  0E47                     u162_21:
  7252  0E47  2E5B               	goto	i1l2148
  7253  0E48                     u162_20:
  7254  0E48                     i1l2138:
  7255                           
  7256                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7257  0E48  0020               	movlb	0	; select bank0
  7258  0E49  080D               	movf	13,w	;volatile
  7259  0E4A  00F0               	movwf	??i1_readGPIO
  7260  0E4B  0870               	movf	??i1_readGPIO,w
  7261  0E4C  00F4               	movwf	i1readGPIO@readB
  7262  0E4D                     i1l2140:
  7263                           
  7264                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7265  0E4D  0874               	movf	i1readGPIO@readB,w
  7266  0E4E  00F0               	movwf	??i1_readGPIO
  7267  0E4F  0A76               	incf	i1readGPIO@portNumber,w
  7268  0E50  2E52               	goto	u163_24
  7269  0E51                     u163_25:
  7270  0E51  36F0               	lsrf	??i1_readGPIO,f
  7271  0E52                     u163_24:
  7272  0E52  0B89               	decfsz	9,f
  7273  0E53  2E51               	goto	u163_25
  7274  0E54  0870               	movf	??i1_readGPIO,w
  7275  0E55  3901               	andlw	1
  7276  0E56  00F1               	movwf	??i1_readGPIO+1
  7277  0E57  0871               	movf	??i1_readGPIO+1,w
  7278  0E58  00F5               	movwf	i1readGPIO@returnValueB
  7279  0E59                     i1l2142:
  7280                           
  7281                           ;GPIO.c: 99:         return returnValueB;
  7282  0E59  0875               	movf	i1readGPIO@returnValueB,w
  7283  0E5A  2E5C               	goto	i1l322
  7284  0E5B                     i1l2148:
  7285  0E5B  3000               	movlw	0
  7286  0E5C                     i1l322:
  7287  0E5C  0008               	return
  7288  0E5D                     __end_ofi1_readGPIO:
  7289                           
  7290                           	psect	text32
  7291  0DDB                     __ptext32:	
  7292 ;; *************** function _convertRawToMilliVolts *****************
  7293 ;; Defined at:
  7294 ;;		line 47 in file "Controller.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;  rawValue        2   12[COMMON] unsigned short 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  vsenseMult      4    5[BANK0 ] long 
  7299 ;;  returnValued    2   11[BANK0 ] short 
  7300 ;;  offsetted       2    9[BANK0 ] short 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  2   12[COMMON] short 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0, pclath, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7310 ;;      Params:         2       0       0       0       0       0
  7311 ;;      Locals:         0       8       0       0       0       0
  7312 ;;      Temps:          0       5       0       0       0       0
  7313 ;;      Totals:         2      13       0       0       0       0
  7314 ;;Total ram usage:       15 bytes
  7315 ;; Hardware stack levels used: 1
  7316 ;; Hardware stack levels required when called: 1
  7317 ;; This function calls:
  7318 ;;		___lmul
  7319 ;; This function is called by:
  7320 ;;		_runVoltageModeControl
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324  0DDB                     _convertRawToMilliVolts:	
  7325                           ;psect for function _convertRawToMilliVolts
  7326                           
  7327  0DDB                     i1l2052:	
  7328                           ;incstack = 0
  7329                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7330                           
  7331                           
  7332                           ;Controller.c: 48:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7333  0DDB  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7334  0DDC  0020               	movlb	0	; select bank0
  7335  0DDD  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7336  0DDE  087C               	movf	convertRawToMilliVolts@rawValue,w
  7337  0DDF  00A9               	movwf	convertRawToMilliVolts@offsetted
  7338  0DE0                     i1l2054:
  7339                           
  7340                           ;Controller.c: 49:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7341  0DE0  0829               	movf	convertRawToMilliVolts@offsetted,w
  7342  0DE1  00F0               	movwf	___lmul@multiplier
  7343  0DE2  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7344  0DE3  00F1               	movwf	___lmul@multiplier+1
  7345  0DE4  0D89               	rlf	9,f
  7346  0DE5  3B89               	subwfb	9,f
  7347  0DE6  0989               	comf	9,f
  7348  0DE7  00F2               	movwf	___lmul@multiplier+2
  7349  0DE8  00F3               	movwf	___lmul@multiplier+3
  7350  0DE9  3000               	movlw	0
  7351  0DEA  00F7               	movwf	___lmul@multiplicand+3
  7352  0DEB  3000               	movlw	0
  7353  0DEC  00F6               	movwf	___lmul@multiplicand+2
  7354  0DED  3017               	movlw	23
  7355  0DEE  00F5               	movwf	___lmul@multiplicand+1
  7356  0DEF  30D4               	movlw	212
  7357  0DF0  00F4               	movwf	___lmul@multiplicand
  7358  0DF1  318D  2573  318D   	fcall	___lmul
  7359  0DF4  0873               	movf	?___lmul+3,w
  7360  0DF5  0020               	movlb	0	; select bank0
  7361  0DF6  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7362  0DF7  0872               	movf	?___lmul+2,w
  7363  0DF8  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7364  0DF9  0871               	movf	?___lmul+1,w
  7365  0DFA  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7366  0DFB  0870               	movf	?___lmul,w
  7367  0DFC  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7368  0DFD                     i1l2056:
  7369                           
  7370                           ;Controller.c: 50:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7371  0DFD  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7372  0DFE  00A0               	movwf	??_convertRawToMilliVolts
  7373  0DFF  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7374  0E00  00A1               	movwf	??_convertRawToMilliVolts+1
  7375  0E01  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7376  0E02  00A2               	movwf	??_convertRawToMilliVolts+2
  7377  0E03  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7378  0E04  00A3               	movwf	??_convertRawToMilliVolts+3
  7379  0E05  3008               	movlw	8
  7380  0E06  00A4               	movwf	??_convertRawToMilliVolts+4
  7381  0E07                     u145_25:
  7382  0E07  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7383  0E08  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7384  0E09  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7385  0E0A  0CA0               	rrf	??_convertRawToMilliVolts,f
  7386  0E0B                     u145_20:
  7387  0E0B  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7388  0E0C  2E07               	goto	u145_25
  7389  0E0D  0821               	movf	??_convertRawToMilliVolts+1,w
  7390  0E0E  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7391  0E0F  0820               	movf	??_convertRawToMilliVolts,w
  7392  0E10  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7393  0E11                     i1l2058:
  7394                           
  7395                           ;Controller.c: 51:     return returnValuedV;
  7396  0E11  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7397  0E12  00FD               	movwf	?_convertRawToMilliVolts+1
  7398  0E13  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7399  0E14  00FC               	movwf	?_convertRawToMilliVolts
  7400  0E15                     i1l440:
  7401  0E15  0008               	return
  7402  0E16                     __end_of_convertRawToMilliVolts:
  7403                           
  7404                           	psect	text33
  7405  0D73                     __ptext33:	
  7406 ;; *************** function ___lmul *****************
  7407 ;; Defined at:
  7408 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  multiplier      4    0[COMMON] unsigned long 
  7411 ;;  multiplicand    4    4[COMMON] unsigned long 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  product         4    8[COMMON] unsigned long 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  4    0[COMMON] unsigned long 
  7416 ;; Registers used:
  7417 ;;		wreg, status,2, status,0
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7423 ;;      Params:         8       0       0       0       0       0
  7424 ;;      Locals:         4       0       0       0       0       0
  7425 ;;      Temps:          0       0       0       0       0       0
  7426 ;;      Totals:        12       0       0       0       0       0
  7427 ;;Total ram usage:       12 bytes
  7428 ;; Hardware stack levels used: 1
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_runPotScaling
  7433 ;;		_convertRawToMilliVolts
  7434 ;;		_runVoltageModeControl
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438  0D73                     ___lmul:	
  7439                           ;psect for function ___lmul
  7440                           
  7441  0D73                     i1l2010:	
  7442                           ;incstack = 0
  7443                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7444                           
  7445  0D73  3000               	movlw	0
  7446  0D74  00FB               	movwf	___lmul@product+3
  7447  0D75  3000               	movlw	0
  7448  0D76  00FA               	movwf	___lmul@product+2
  7449  0D77  3000               	movlw	0
  7450  0D78  00F9               	movwf	___lmul@product+1
  7451  0D79  3000               	movlw	0
  7452  0D7A  00F8               	movwf	___lmul@product
  7453  0D7B                     i1l2012:
  7454  0D7B  1C70               	btfss	___lmul@multiplier,0
  7455  0D7C  2D7E               	goto	u132_21
  7456  0D7D  2D7F               	goto	u132_20
  7457  0D7E                     u132_21:
  7458  0D7E  2D87               	goto	i1l2016
  7459  0D7F                     u132_20:
  7460  0D7F                     i1l2014:
  7461  0D7F  0874               	movf	___lmul@multiplicand,w
  7462  0D80  07F8               	addwf	___lmul@product,f
  7463  0D81  0875               	movf	___lmul@multiplicand+1,w
  7464  0D82  3DF9               	addwfc	___lmul@product+1,f
  7465  0D83  0876               	movf	___lmul@multiplicand+2,w
  7466  0D84  3DFA               	addwfc	___lmul@product+2,f
  7467  0D85  0877               	movf	___lmul@multiplicand+3,w
  7468  0D86  3DFB               	addwfc	___lmul@product+3,f
  7469  0D87                     i1l2016:
  7470  0D87  3001               	movlw	1
  7471  0D88                     u133_25:
  7472  0D88  35F4               	lslf	___lmul@multiplicand,f
  7473  0D89  0DF5               	rlf	___lmul@multiplicand+1,f
  7474  0D8A  0DF6               	rlf	___lmul@multiplicand+2,f
  7475  0D8B  0DF7               	rlf	___lmul@multiplicand+3,f
  7476  0D8C  0B89               	decfsz	9,f
  7477  0D8D  2D88               	goto	u133_25
  7478  0D8E                     i1l2018:
  7479  0D8E  3001               	movlw	1
  7480  0D8F                     u134_25:
  7481  0D8F  36F3               	lsrf	___lmul@multiplier+3,f
  7482  0D90  0CF2               	rrf	___lmul@multiplier+2,f
  7483  0D91  0CF1               	rrf	___lmul@multiplier+1,f
  7484  0D92  0CF0               	rrf	___lmul@multiplier,f
  7485  0D93  0B89               	decfsz	9,f
  7486  0D94  2D8F               	goto	u134_25
  7487  0D95  0873               	movf	___lmul@multiplier+3,w
  7488  0D96  0472               	iorwf	___lmul@multiplier+2,w
  7489  0D97  0471               	iorwf	___lmul@multiplier+1,w
  7490  0D98  0470               	iorwf	___lmul@multiplier,w
  7491  0D99  1D03               	skipz
  7492  0D9A  2D9C               	goto	u135_21
  7493  0D9B  2D9D               	goto	u135_20
  7494  0D9C                     u135_21:
  7495  0D9C  2D7B               	goto	i1l2012
  7496  0D9D                     u135_20:
  7497  0D9D                     i1l2020:
  7498  0D9D  087B               	movf	___lmul@product+3,w
  7499  0D9E  00F3               	movwf	?___lmul+3
  7500  0D9F  087A               	movf	___lmul@product+2,w
  7501  0DA0  00F2               	movwf	?___lmul+2
  7502  0DA1  0879               	movf	___lmul@product+1,w
  7503  0DA2  00F1               	movwf	?___lmul+1
  7504  0DA3  0878               	movf	___lmul@product,w
  7505  0DA4  00F0               	movwf	?___lmul
  7506  0DA5                     i1l727:
  7507  0DA5  0008               	return
  7508  0DA6                     __end_of___lmul:
  7509                           
  7510                           	psect	text34
  7511  0C9E                     __ptext34:	
  7512 ;; *************** function _abs *****************
  7513 ;; Defined at:
  7514 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  a               2    0[COMMON] int 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;		None
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  2    0[COMMON] int 
  7521 ;; Registers used:
  7522 ;;		wreg, status,2, status,0
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7528 ;;      Params:         2       0       0       0       0       0
  7529 ;;      Locals:         0       0       0       0       0       0
  7530 ;;      Temps:          2       0       0       0       0       0
  7531 ;;      Totals:         4       0       0       0       0       0
  7532 ;;Total ram usage:        4 bytes
  7533 ;; Hardware stack levels used: 1
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_runVoltageModeControl
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541  0C9E                     _abs:	
  7542                           ;psect for function _abs
  7543                           
  7544  0C9E                     i1l2062:	
  7545                           ;incstack = 0
  7546                           ; Regs used in _abs: [wreg+status,2+status,0]
  7547                           
  7548  0C9E  0871               	movf	abs@a+1,w
  7549  0C9F  3A80               	xorlw	128
  7550  0CA0  00F2               	movwf	??_abs
  7551  0CA1  3080               	movlw	128
  7552  0CA2  0272               	subwf	??_abs,w
  7553  0CA3  1D03               	skipz
  7554  0CA4  2CA7               	goto	u146_25
  7555  0CA5  3001               	movlw	1
  7556  0CA6  0270               	subwf	abs@a,w
  7557  0CA7                     u146_25:
  7558  0CA7  1803               	skipnc
  7559  0CA8  2CAA               	goto	u146_21
  7560  0CA9  2CAB               	goto	u146_20
  7561  0CAA                     u146_21:
  7562  0CAA  2CB7               	goto	i1l1173
  7563  0CAB                     u146_20:
  7564  0CAB                     i1l2064:
  7565  0CAB  0970               	comf	abs@a,w
  7566  0CAC  00F2               	movwf	??_abs
  7567  0CAD  0971               	comf	abs@a+1,w
  7568  0CAE  00F3               	movwf	??_abs+1
  7569  0CAF  0AF2               	incf	??_abs,f
  7570  0CB0  1903               	skipnz
  7571  0CB1  0AF3               	incf	??_abs+1,f
  7572  0CB2  0872               	movf	??_abs,w
  7573  0CB3  00F0               	movwf	?_abs
  7574  0CB4  0873               	movf	??_abs+1,w
  7575  0CB5  00F1               	movwf	?_abs+1
  7576  0CB6  2CB7               	goto	i1l1176
  7577  0CB7                     i1l1173:
  7578  0CB7                     i1l1176:
  7579  0CB7  0008               	return
  7580  0CB8                     __end_of_abs:
  7581                           
  7582                           	psect	text35
  7583  0EA7                     __ptext35:	
  7584 ;; *************** function ___omul *****************
  7585 ;; Defined at:
  7586 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7589 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  product         8    1[COMMON] unsigned long long 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  8    0[BANK0 ] unsigned long long 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7601 ;;      Params:         0      16       0       0       0       0
  7602 ;;      Locals:         8       0       0       0       0       0
  7603 ;;      Temps:          1       0       0       0       0       0
  7604 ;;      Totals:         9      16       0       0       0       0
  7605 ;;Total ram usage:       25 bytes
  7606 ;; Hardware stack levels used: 1
  7607 ;; This function calls:
  7608 ;;		Nothing
  7609 ;; This function is called by:
  7610 ;;		_runVoltageModeControl
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614  0EA7                     ___omul:	
  7615                           ;psect for function ___omul
  7616                           
  7617  0EA7                     i1l2074:	
  7618                           ;incstack = 0
  7619                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7620                           
  7621  0EA7  3071               	movlw	low ___omul@product
  7622  0EA8  0086               	movwf	6
  7623  0EA9  3000               	movlw	high ___omul@product
  7624  0EAA  0087               	movwf	7
  7625  0EAB  3008               	movlw	8
  7626  0EAC  00F0               	movwf	??___omul
  7627  0EAD  3000               	movlw	0
  7628  0EAE                     u147_20:
  7629  0EAE  001E               	movwi fsr1++
  7630  0EAF  0BF0               	decfsz	??___omul,f
  7631  0EB0  2EAE               	goto	u147_20
  7632  0EB1                     i1l2076:
  7633  0EB1  0020               	movlb	0	; select bank0
  7634  0EB2  1C20               	btfss	___omul@multiplier,0
  7635  0EB3  2EB5               	goto	u148_21
  7636  0EB4  2EB6               	goto	u148_20
  7637  0EB5                     u148_21:
  7638  0EB5  2EC6               	goto	i1l2080
  7639  0EB6                     u148_20:
  7640  0EB6                     i1l2078:
  7641  0EB6  0828               	movf	___omul@multiplicand,w
  7642  0EB7  07F1               	addwf	___omul@product,f
  7643  0EB8  0829               	movf	___omul@multiplicand+1,w
  7644  0EB9  3DF2               	addwfc	___omul@product+1,f
  7645  0EBA  082A               	movf	___omul@multiplicand+2,w
  7646  0EBB  3DF3               	addwfc	___omul@product+2,f
  7647  0EBC  082B               	movf	___omul@multiplicand+3,w
  7648  0EBD  3DF4               	addwfc	___omul@product+3,f
  7649  0EBE  082C               	movf	___omul@multiplicand+4,w
  7650  0EBF  3DF5               	addwfc	___omul@product+4,f
  7651  0EC0  082D               	movf	___omul@multiplicand+5,w
  7652  0EC1  3DF6               	addwfc	___omul@product+5,f
  7653  0EC2  082E               	movf	___omul@multiplicand+6,w
  7654  0EC3  3DF7               	addwfc	___omul@product+6,f
  7655  0EC4  082F               	movf	___omul@multiplicand+7,w
  7656  0EC5  3DF8               	addwfc	___omul@product+7,f
  7657  0EC6                     i1l2080:
  7658  0EC6  35A8               	lslf	___omul@multiplicand,f
  7659  0EC7  0DA9               	rlf	___omul@multiplicand+1,f
  7660  0EC8  0DAA               	rlf	___omul@multiplicand+2,f
  7661  0EC9  0DAB               	rlf	___omul@multiplicand+3,f
  7662  0ECA  0DAC               	rlf	___omul@multiplicand+4,f
  7663  0ECB  0DAD               	rlf	___omul@multiplicand+5,f
  7664  0ECC  0DAE               	rlf	___omul@multiplicand+6,f
  7665  0ECD  0DAF               	rlf	___omul@multiplicand+7,f
  7666  0ECE                     i1l2082:
  7667  0ECE  36A7               	lsrf	___omul@multiplier+7,f
  7668  0ECF  0CA6               	rrf	___omul@multiplier+6,f
  7669  0ED0  0CA5               	rrf	___omul@multiplier+5,f
  7670  0ED1  0CA4               	rrf	___omul@multiplier+4,f
  7671  0ED2  0CA3               	rrf	___omul@multiplier+3,f
  7672  0ED3  0CA2               	rrf	___omul@multiplier+2,f
  7673  0ED4  0CA1               	rrf	___omul@multiplier+1,f
  7674  0ED5  0CA0               	rrf	___omul@multiplier,f
  7675  0ED6  0820               	movf	___omul@multiplier,w
  7676  0ED7  0421               	iorwf	___omul@multiplier+1,w
  7677  0ED8  0422               	iorwf	___omul@multiplier+2,w
  7678  0ED9  0423               	iorwf	___omul@multiplier+3,w
  7679  0EDA  0424               	iorwf	___omul@multiplier+4,w
  7680  0EDB  0425               	iorwf	___omul@multiplier+5,w
  7681  0EDC  0426               	iorwf	___omul@multiplier+6,w
  7682  0EDD  0427               	iorwf	___omul@multiplier+7,w
  7683  0EDE  1D03               	skipz
  7684  0EDF  2EE1               	goto	u149_21
  7685  0EE0  2EE2               	goto	u149_20
  7686  0EE1                     u149_21:
  7687  0EE1  2EB1               	goto	i1l2076
  7688  0EE2                     u149_20:
  7689  0EE2                     i1l732:
  7690  0EE2  0871               	movf	___omul@product,w
  7691  0EE3  00A0               	movwf	?___omul
  7692  0EE4  0872               	movf	___omul@product+1,w
  7693  0EE5  00A1               	movwf	?___omul+1
  7694  0EE6  0873               	movf	___omul@product+2,w
  7695  0EE7  00A2               	movwf	?___omul+2
  7696  0EE8  0874               	movf	___omul@product+3,w
  7697  0EE9  00A3               	movwf	?___omul+3
  7698  0EEA  0875               	movf	___omul@product+4,w
  7699  0EEB  00A4               	movwf	?___omul+4
  7700  0EEC  0876               	movf	___omul@product+5,w
  7701  0EED  00A5               	movwf	?___omul+5
  7702  0EEE  0877               	movf	___omul@product+6,w
  7703  0EEF  00A6               	movwf	?___omul+6
  7704  0EF0  0878               	movf	___omul@product+7,w
  7705  0EF1  00A7               	movwf	?___omul+7
  7706  0EF2                     i1l733:
  7707  0EF2  0008               	return
  7708  0EF3                     __end_of___omul:
  7709                           
  7710                           	psect	text36
  7711  0C43                     __ptext36:	
  7712 ;; *************** function _runCurrentModeControl *****************
  7713 ;; Defined at:
  7714 ;;		line 128 in file "Controller.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  newCurrent      2    0        short 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, status,2, status,0, pclath, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7728 ;;      Params:         0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0
  7731 ;;      Totals:         0       0       0       0       0       0
  7732 ;;Total ram usage:        0 bytes
  7733 ;; Hardware stack levels used: 1
  7734 ;; Hardware stack levels required when called: 2
  7735 ;; This function calls:
  7736 ;;		_convertRawToMilliAmps
  7737 ;; This function is called by:
  7738 ;;		_controlRoutine
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742  0C43                     _runCurrentModeControl:	
  7743                           ;psect for function _runCurrentModeControl
  7744                           
  7745  0C43                     i1l2284:	
  7746                           ;incstack = 0
  7747                           ; Regs used in _runCurrentModeControl: [wreg+status,2+status,0+pclath+cstack]
  7748                           
  7749  0C43  0020               	movlb	0	; select bank0
  7750  0C44  0860               	movf	_filteredIL+1,w
  7751  0C45  00F7               	movwf	convertRawToMilliAmps@rawValue+1
  7752  0C46  085F               	movf	_filteredIL,w
  7753  0C47  00F6               	movwf	convertRawToMilliAmps@rawValue
  7754  0C48  318C  2484  318C   	fcall	_convertRawToMilliAmps
  7755  0C4B                     i1l459:
  7756  0C4B  0008               	return
  7757  0C4C                     __end_of_runCurrentModeControl:
  7758                           
  7759                           	psect	text37
  7760  0C84                     __ptext37:	
  7761 ;; *************** function _convertRawToMilliAmps *****************
  7762 ;; Defined at:
  7763 ;;		line 82 in file "CurrentSensor.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  rawValue        2    6[COMMON] unsigned short 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  returnValuem    2   10[COMMON] short 
  7768 ;;  offsetted       2    8[COMMON] short 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  2    6[COMMON] short 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7778 ;;      Params:         2       0       0       0       0       0
  7779 ;;      Locals:         4       0       0       0       0       0
  7780 ;;      Temps:          0       0       0       0       0       0
  7781 ;;      Totals:         6       0       0       0       0       0
  7782 ;;Total ram usage:        6 bytes
  7783 ;; Hardware stack levels used: 1
  7784 ;; Hardware stack levels required when called: 1
  7785 ;; This function calls:
  7786 ;;		___wmul
  7787 ;; This function is called by:
  7788 ;;		_runCurrentModeControl
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792  0C84                     _convertRawToMilliAmps:	
  7793                           ;psect for function _convertRawToMilliAmps
  7794                           
  7795  0C84                     i1l2066:	
  7796                           ;incstack = 0
  7797                           ; Regs used in _convertRawToMilliAmps: [wreg+status,2+status,0+pclath+cstack]
  7798                           
  7799                           
  7800                           ;CurrentSensor.c: 83:     int16_t offsetted = (int16_t)(rawValue - 445);
  7801  0C84  0876               	movf	convertRawToMilliAmps@rawValue,w
  7802  0C85  3E43               	addlw	67
  7803  0C86  00F8               	movwf	convertRawToMilliAmps@offsetted
  7804  0C87  30FE               	movlw	254
  7805  0C88  3D77               	addwfc	convertRawToMilliAmps@rawValue+1,w
  7806  0C89  00F9               	movwf	convertRawToMilliAmps@offsetted+1
  7807  0C8A                     i1l2068:
  7808                           
  7809                           ;CurrentSensor.c: 84:     int16_t returnValuemA = (int32_t)(offsetted * 2857) >> 0;
  7810  0C8A  0879               	movf	convertRawToMilliAmps@offsetted+1,w
  7811  0C8B  00F1               	movwf	___wmul@multiplier+1
  7812  0C8C  0878               	movf	convertRawToMilliAmps@offsetted,w
  7813  0C8D  00F0               	movwf	___wmul@multiplier
  7814  0C8E  3029               	movlw	41
  7815  0C8F  00F2               	movwf	___wmul@multiplicand
  7816  0C90  300B               	movlw	11
  7817  0C91  00F3               	movwf	___wmul@multiplicand+1
  7818  0C92  318C  24B8  318C   	fcall	___wmul
  7819  0C95  0871               	movf	?___wmul+1,w
  7820  0C96  00FB               	movwf	convertRawToMilliAmps@returnValuemA+1
  7821  0C97  0870               	movf	?___wmul,w
  7822  0C98  00FA               	movwf	convertRawToMilliAmps@returnValuemA
  7823  0C99                     i1l2070:
  7824                           
  7825                           ;CurrentSensor.c: 85:     return returnValuemA;
  7826  0C99  087B               	movf	convertRawToMilliAmps@returnValuemA+1,w
  7827  0C9A  00F7               	movwf	?_convertRawToMilliAmps+1
  7828  0C9B  087A               	movf	convertRawToMilliAmps@returnValuemA,w
  7829  0C9C  00F6               	movwf	?_convertRawToMilliAmps
  7830  0C9D                     i1l531:
  7831  0C9D  0008               	return
  7832  0C9E                     __end_of_convertRawToMilliAmps:
  7833                           
  7834                           	psect	text38
  7835  0CB8                     __ptext38:	
  7836 ;; *************** function ___wmul *****************
  7837 ;; Defined at:
  7838 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  multiplier      2    0[COMMON] unsigned int 
  7841 ;;  multiplicand    2    2[COMMON] unsigned int 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  product         2    4[COMMON] unsigned int 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  2    0[COMMON] unsigned int 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7853 ;;      Params:         4       0       0       0       0       0
  7854 ;;      Locals:         2       0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0
  7856 ;;      Totals:         6       0       0       0       0       0
  7857 ;;Total ram usage:        6 bytes
  7858 ;; Hardware stack levels used: 1
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_runPotScaling
  7863 ;;		_controlRoutine
  7864 ;;		_convertRawToMilliAmps
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868  0CB8                     ___wmul:	
  7869                           ;psect for function ___wmul
  7870                           
  7871  0CB8                     i1l1996:	
  7872                           ;incstack = 0
  7873                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7874                           
  7875  0CB8  01F4               	clrf	___wmul@product
  7876  0CB9  01F5               	clrf	___wmul@product+1
  7877  0CBA                     i1l1998:
  7878  0CBA  1C70               	btfss	___wmul@multiplier,0
  7879  0CBB  2CBD               	goto	u128_21
  7880  0CBC  2CBE               	goto	u128_20
  7881  0CBD                     u128_21:
  7882  0CBD  2CC2               	goto	i1l713
  7883  0CBE                     u128_20:
  7884  0CBE                     i1l2000:
  7885  0CBE  0872               	movf	___wmul@multiplicand,w
  7886  0CBF  07F4               	addwf	___wmul@product,f
  7887  0CC0  0873               	movf	___wmul@multiplicand+1,w
  7888  0CC1  3DF5               	addwfc	___wmul@product+1,f
  7889  0CC2                     i1l713:
  7890  0CC2  3001               	movlw	1
  7891  0CC3                     u129_25:
  7892  0CC3  35F2               	lslf	___wmul@multiplicand,f
  7893  0CC4  0DF3               	rlf	___wmul@multiplicand+1,f
  7894  0CC5  0B89               	decfsz	9,f
  7895  0CC6  2CC3               	goto	u129_25
  7896  0CC7                     i1l2002:
  7897  0CC7  3001               	movlw	1
  7898  0CC8                     u130_25:
  7899  0CC8  36F1               	lsrf	___wmul@multiplier+1,f
  7900  0CC9  0CF0               	rrf	___wmul@multiplier,f
  7901  0CCA  0B89               	decfsz	9,f
  7902  0CCB  2CC8               	goto	u130_25
  7903  0CCC                     i1l2004:
  7904  0CCC  0870               	movf	___wmul@multiplier,w
  7905  0CCD  0471               	iorwf	___wmul@multiplier+1,w
  7906  0CCE  1D03               	btfss	3,2
  7907  0CCF  2CD1               	goto	u131_21
  7908  0CD0  2CD2               	goto	u131_20
  7909  0CD1                     u131_21:
  7910  0CD1  2CBA               	goto	i1l1998
  7911  0CD2                     u131_20:
  7912  0CD2                     i1l2006:
  7913  0CD2  0875               	movf	___wmul@product+1,w
  7914  0CD3  00F1               	movwf	?___wmul+1
  7915  0CD4  0874               	movf	___wmul@product,w
  7916  0CD5  00F0               	movwf	?___wmul
  7917  0CD6                     i1l715:
  7918  0CD6  0008               	return
  7919  0CD7                     __end_of___wmul:
  7920                           
  7921                           	psect	text39
  7922  0FA5                     __ptext39:	
  7923 ;; *************** function ___lldiv *****************
  7924 ;; Defined at:
  7925 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  divisor         4    6[COMMON] unsigned long 
  7928 ;;  dividend        4   10[COMMON] unsigned long 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  quotient        4    1[BANK0 ] unsigned long 
  7931 ;;  counter         1    5[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  4    6[COMMON] unsigned long 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7941 ;;      Params:         8       0       0       0       0       0
  7942 ;;      Locals:         0       5       0       0       0       0
  7943 ;;      Temps:          0       1       0       0       0       0
  7944 ;;      Totals:         8       6       0       0       0       0
  7945 ;;Total ram usage:       14 bytes
  7946 ;; Hardware stack levels used: 1
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		_runPotScaling
  7951 ;;		_controlRoutine
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955  0FA5                     ___lldiv:	
  7956                           ;psect for function ___lldiv
  7957                           
  7958  0FA5                     i1l2308:	
  7959                           ;incstack = 0
  7960                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7961                           
  7962  0FA5  3000               	movlw	0
  7963  0FA6  0020               	movlb	0	; select bank0
  7964  0FA7  00A4               	movwf	___lldiv@quotient+3
  7965  0FA8  3000               	movlw	0
  7966  0FA9  00A3               	movwf	___lldiv@quotient+2
  7967  0FAA  3000               	movlw	0
  7968  0FAB  00A2               	movwf	___lldiv@quotient+1
  7969  0FAC  3000               	movlw	0
  7970  0FAD  00A1               	movwf	___lldiv@quotient
  7971  0FAE  0879               	movf	___lldiv@divisor+3,w
  7972  0FAF  0478               	iorwf	___lldiv@divisor+2,w
  7973  0FB0  0477               	iorwf	___lldiv@divisor+1,w
  7974  0FB1  0476               	iorwf	___lldiv@divisor,w
  7975  0FB2  1903               	skipnz
  7976  0FB3  2FB5               	goto	u204_21
  7977  0FB4  2FB6               	goto	u204_20
  7978  0FB5                     u204_21:
  7979  0FB5  2FF7               	goto	i1l2328
  7980  0FB6                     u204_20:
  7981  0FB6                     i1l2310:
  7982  0FB6  01A5               	clrf	___lldiv@counter
  7983  0FB7  0AA5               	incf	___lldiv@counter,f
  7984  0FB8  2FC4               	goto	i1l2314
  7985  0FB9                     i1l2312:
  7986  0FB9  3001               	movlw	1
  7987  0FBA                     u205_25:
  7988  0FBA  35F6               	lslf	___lldiv@divisor,f
  7989  0FBB  0DF7               	rlf	___lldiv@divisor+1,f
  7990  0FBC  0DF8               	rlf	___lldiv@divisor+2,f
  7991  0FBD  0DF9               	rlf	___lldiv@divisor+3,f
  7992  0FBE  0B89               	decfsz	9,f
  7993  0FBF  2FBA               	goto	u205_25
  7994  0FC0  3001               	movlw	1
  7995  0FC1  00A0               	movwf	??___lldiv
  7996  0FC2  0820               	movf	??___lldiv,w
  7997  0FC3  07A5               	addwf	___lldiv@counter,f
  7998  0FC4                     i1l2314:
  7999  0FC4  1FF9               	btfss	___lldiv@divisor+3,7
  8000  0FC5  2FC7               	goto	u206_21
  8001  0FC6  2FC8               	goto	u206_20
  8002  0FC7                     u206_21:
  8003  0FC7  2FB9               	goto	i1l2312
  8004  0FC8                     u206_20:
  8005  0FC8                     i1l2316:
  8006  0FC8  3001               	movlw	1
  8007  0FC9                     u207_25:
  8008  0FC9  35A1               	lslf	___lldiv@quotient,f
  8009  0FCA  0DA2               	rlf	___lldiv@quotient+1,f
  8010  0FCB  0DA3               	rlf	___lldiv@quotient+2,f
  8011  0FCC  0DA4               	rlf	___lldiv@quotient+3,f
  8012  0FCD  0B89               	decfsz	9,f
  8013  0FCE  2FC9               	goto	u207_25
  8014  0FCF                     i1l2318:
  8015  0FCF  0879               	movf	___lldiv@divisor+3,w
  8016  0FD0  027D               	subwf	___lldiv@dividend+3,w
  8017  0FD1  1D03               	skipz
  8018  0FD2  2FDD               	goto	u208_25
  8019  0FD3  0878               	movf	___lldiv@divisor+2,w
  8020  0FD4  027C               	subwf	___lldiv@dividend+2,w
  8021  0FD5  1D03               	skipz
  8022  0FD6  2FDD               	goto	u208_25
  8023  0FD7  0877               	movf	___lldiv@divisor+1,w
  8024  0FD8  027B               	subwf	___lldiv@dividend+1,w
  8025  0FD9  1D03               	skipz
  8026  0FDA  2FDD               	goto	u208_25
  8027  0FDB  0876               	movf	___lldiv@divisor,w
  8028  0FDC  027A               	subwf	___lldiv@dividend,w
  8029  0FDD                     u208_25:
  8030  0FDD  1C03               	skipc
  8031  0FDE  2FE0               	goto	u208_21
  8032  0FDF  2FE1               	goto	u208_20
  8033  0FE0                     u208_21:
  8034  0FE0  2FEA               	goto	i1l2324
  8035  0FE1                     u208_20:
  8036  0FE1                     i1l2320:
  8037  0FE1  0876               	movf	___lldiv@divisor,w
  8038  0FE2  02FA               	subwf	___lldiv@dividend,f
  8039  0FE3  0877               	movf	___lldiv@divisor+1,w
  8040  0FE4  3BFB               	subwfb	___lldiv@dividend+1,f
  8041  0FE5  0878               	movf	___lldiv@divisor+2,w
  8042  0FE6  3BFC               	subwfb	___lldiv@dividend+2,f
  8043  0FE7  0879               	movf	___lldiv@divisor+3,w
  8044  0FE8  3BFD               	subwfb	___lldiv@dividend+3,f
  8045  0FE9                     i1l2322:
  8046  0FE9  1421               	bsf	___lldiv@quotient,0
  8047  0FEA                     i1l2324:
  8048  0FEA  3001               	movlw	1
  8049  0FEB                     u209_25:
  8050  0FEB  36F9               	lsrf	___lldiv@divisor+3,f
  8051  0FEC  0CF8               	rrf	___lldiv@divisor+2,f
  8052  0FED  0CF7               	rrf	___lldiv@divisor+1,f
  8053  0FEE  0CF6               	rrf	___lldiv@divisor,f
  8054  0FEF  0B89               	decfsz	9,f
  8055  0FF0  2FEB               	goto	u209_25
  8056  0FF1                     i1l2326:
  8057  0FF1  3001               	movlw	1
  8058  0FF2  02A5               	subwf	___lldiv@counter,f
  8059  0FF3  1D03               	btfss	3,2
  8060  0FF4  2FF6               	goto	u210_21
  8061  0FF5  2FF7               	goto	u210_20
  8062  0FF6                     u210_21:
  8063  0FF6  2FC8               	goto	i1l2316
  8064  0FF7                     u210_20:
  8065  0FF7                     i1l2328:
  8066  0FF7  0824               	movf	___lldiv@quotient+3,w
  8067  0FF8  00F9               	movwf	?___lldiv+3
  8068  0FF9  0823               	movf	___lldiv@quotient+2,w
  8069  0FFA  00F8               	movwf	?___lldiv+2
  8070  0FFB  0822               	movf	___lldiv@quotient+1,w
  8071  0FFC  00F7               	movwf	?___lldiv+1
  8072  0FFD  0821               	movf	___lldiv@quotient,w
  8073  0FFE  00F6               	movwf	?___lldiv
  8074  0FFF                     i1l749:
  8075  0FFF  0008               	return
  8076  1000                     __end_of___lldiv:
  8077  007E                     btemp	set	126	;btemp
  8078  007E                     int$flags	set	126
  8079  007E                     wtemp0	set	126
  8080                           
  8081                           	psect	idloc
  8082                           
  8083                           ;Config register IDLOC0 @ 0x8000
  8084                           ;	unspecified, using default values
  8085  8000                     	org	32768
  8086  8000  3FFF               	dw	16383
  8087                           
  8088                           ;Config register IDLOC1 @ 0x8001
  8089                           ;	unspecified, using default values
  8090  8001                     	org	32769
  8091  8001  3FFF               	dw	16383
  8092                           
  8093                           ;Config register IDLOC2 @ 0x8002
  8094                           ;	unspecified, using default values
  8095  8002                     	org	32770
  8096  8002  3FFF               	dw	16383
  8097                           
  8098                           ;Config register IDLOC3 @ 0x8003
  8099                           ;	unspecified, using default values
  8100  8003                     	org	32771
  8101  8003  3FFF               	dw	16383
  8102                           
  8103                           	psect	config
  8104                           
  8105                           ;Config register CONFIG1 @ 0x8007
  8106                           ;	Oscillator Selection
  8107                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8108                           ;	Watchdog Timer Enable
  8109                           ;	WDTE = OFF, WDT disabled
  8110                           ;	Power-up Timer Enable
  8111                           ;	PWRTE = OFF, PWRT disabled
  8112                           ;	MCLR Pin Function Select
  8113                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8114                           ;	Flash Program Memory Code Protection
  8115                           ;	CP = OFF, Program memory code protection is disabled
  8116                           ;	Data Memory Code Protection
  8117                           ;	CPD = OFF, Data memory code protection is disabled
  8118                           ;	Brown-out Reset Enable
  8119                           ;	BOREN = ON, Brown-out Reset enabled
  8120                           ;	Clock Out Enable
  8121                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8122                           ;	Internal/External Switchover
  8123                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8124                           ;	Fail-Safe Clock Monitor Enable
  8125                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8126  8007                     	org	32775
  8127  8007  0FA4               	dw	4004
  8128                           
  8129                           ;Config register CONFIG2 @ 0x8008
  8130                           ;	Flash Memory Self-Write Protection
  8131                           ;	WRT = OFF, Write protection off
  8132                           ;	PLL Enable
  8133                           ;	PLLEN = OFF, 4x PLL disabled
  8134                           ;	Stack Overflow/Underflow Reset Enable
  8135                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8136                           ;	Brown-out Reset Voltage Selection
  8137                           ;	BORV = 0x1, unprogrammed default
  8138                           ;	Low-Voltage Programming Enable
  8139                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8140  8008                     	org	32776
  8141  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         246
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      79
    BANK1            80     13      79
    BANK2            80      0      66
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    _runCurrentModeControl->_convertRawToMilliAmps
    _convertRawToMilliAmps->___wmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0   11750
                                             60 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    3020
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      10    10      0    5939
                                             50 BANK0     10    10      0
                            ___lldiv
                             ___wmul
              _runCurrentModeControl
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    2296
                                             16 BANK0     34    34      0
                             ___lmul
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _runCurrentModeControl                                2     2      0    1301
              _convertRawToMilliAmps
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliAmps                                6     4      2    1300
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1074
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runCurrentModeControl
       _convertRawToMilliAmps
         ___wmul
     _runVoltageModeControl
       ___lmul
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     14E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      42      10       82.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     14E      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Aug 07 17:37:19 2023

                ___wmul@multiplicand 0072                                  l116 0DD8  
                                l230 0C26                                  l302 05AB  
                                l135 0535                                  l234 05D3  
                                l322 0EA6                                  l170 07FD  
                                l316 0671                                  l430 0C75  
                                l239 0611                                  l506 0CF6  
                                l354 0C5D                                  l197 0C42  
                                l528 0C83                                  l560 0C33  
                                l554 0C20                                  l557 0C3A  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C9E                                  wreg 0009  
                __end_ofi1_writeGPIO 06D1                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00E3                           i1_readGPIO 0E16  
                               ?_abs 0070                                 l2030 0620  
                               l2200 05D8                                 l2040 0632  
                               l2032 0623                                 l2024 0614  
                               l2202 05DD                                 l2050 0664  
                               l2042 063F                                 l2034 0627  
                               l2026 0615                                 l2204 05F5  
                               l2044 064D                                 l2036 0628  
                               l2028 061B                                 l2206 05FA  
                               l2046 0652                                 l2038 062D  
                               l2160 0547                                 l2152 0538  
                               l2048 0657                                 l2170 056F  
                               l2162 054B                                 l2154 0539  
                               l2180 05AE                                 l2172 057C  
                               l2164 054C                                 l2156 053F  
                               l2190 05BE                                 l2182 05B1  
                               l2174 0581                                 l2166 0551  
                               l2158 0544                                 l2192 05C4  
                               l2184 05B7                                 l2176 0586  
                               l2168 0556                                 l2600 07E2  
                               l2194 05CA                                 l2186 05BB  
                               l2178 059F                                 l2530 0480  
                               l2522 0473                                 l2610 07ED  
                               l2602 07E5                                 l2196 05CF  
                               l2188 05BC                                 l2540 0493  
                               l2532 0484                                 l2524 0474  
                               l2620 07F6                                 l2612 07EE  
                               l2604 07E7                                 l2198 05D1  
                               l2286 0C76                                 l2630 0CD7  
                               l2550 04AE                                 l2542 049C  
                               l2534 0485                                 l2526 0476  
                               l2622 07F8                                 l2614 07F1  
                               l2606 07E9                                 l2288 0C7C  
                               l2632 0C55                                 l2640 0E66  
                               l2560 04C6                                 l2552 04AF  
                               l2544 04A0                                 l2536 048E  
                               l2528 0477                                 l2616 07F3  
                               l2608 07EB                                 l2624 0C3B  
                               l2720 0DAD                                 l2634 0C6A  
                               l2650 0E78                                 l2642 0E6B  
                               l2802 0512                                 l2570 04D9  
                               l2562 04CA                                 l2554 04B8  
                               l2546 04A1                                 l2538 0492  
                               l2618 07F5                                 l2626 0C40  
                               l2730 0DBC                                 l2722 0DB0  
                               l2628 0C21                                 l2652 0E7E  
                               l2660 0E8C                                 l2644 0E6E  
                               l2636 0E5F                                 l2580 04F2  
                               l2572 04E2                                 l2564 04CB  
                               l2556 04BC                                 l2548 04AA  
                               l2732 0DC2                                 l2724 0DB3  
                               l2716 0DA6                                 l2662 0E91  
                               l2654 0E8A                                 l2646 0E72  
                               l2638 0E60                                 l2582 04F3  
                               l2574 04E6                                 l2566 04D4  
                               l2558 04BD                                 l2742 0DD5  
                               l2734 0DC8                                 l2726 0DB6  
                               l2718 0DAA                                 l2664 0E97  
                               l2672 0EA5                                 l2648 0E73  
                               l2584 04FC                                 l2576 04E7  
                               l2568 04D8                                 l2592 050A  
                               l2680 0C1D                                 l2736 0DC8  
                               l2728 0DB9                                 l2666 0EA3  
                               l2586 0500                                 l2578 04F0  
                               l2738 0DD1                                 l2588 0501  
                               l2676 0C34                                 l2678 0C2D  
                               STR_1 07FE                                 u1410 0652  
                               u1411 0651                                 u1420 0657  
                               u1404 0644                                 u1421 0656  
                               u1405 0643                                 _LATA 010C  
                               _LATB 010D                                 u1360 061B  
                               u1361 061A                                 u1434 065C  
                               u1370 062D                                 u2410 0E91  
                               u1435 065B                                 u1371 062C  
                               u2411 0E90                                 u1700 0581  
                               u1444 0669                                 u1380 0632  
                               u2404 0E83                                 u1701 0580  
                               u1445 0668                                 u1381 0631  
                               u2405 0E82                                 u1710 0586  
                               u2510 0DD1                                 u1711 0585  
                               u2511 0DD0                                 u1640 053F  
                               u2424 0E9C                                 u1641 053E  
                               u2425 0E9B                                 u1650 0551  
                               u1394 0637                                 u1651 0550  
                               u1395 0636                                 u1820 05FA  
                               u1804 05E2                                 u1724 058B  
                               u1660 0556                                 u2380 0E66  
                               u1821 05F9                                 u1805 05E1  
                               u1725 058A                                 u1661 0555  
                               u2381 0E65                                 u1814 05ED  
                               u1750 05B7                                 u1734 0596  
                               u2390 0E78                                 u1815 05EC  
                               u1751 05B6                                 u1735 0595  
                               u2391 0E77                                 u1760 05C4  
                               u1744 05A4                                 u1761 05C3  
                               u1745 05A3                                 u1834 05FF  
                               u1770 05CA                                 u1674 055B  
                               u1835 05FE                                 u1771 05C9  
                               u1675 055A                                 u1844 060A  
                               u1780 05D8                                 u1684 0566  
                               u1845 0609                                 u1781 05D7  
                               u1685 0565                                 u1790 05DD  
                               u1694 0574                                 u1791 05DC  
                               u1695 0573            _transToVoltageModeControl 0C34  
                    _filteredFreqPot 00C0                      _filteredDutyPot 0160  
                               abs@a 0070                                 _main 0DA6  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               fsr1l 0006                                 btemp 007E  
                     ?_runPotScaling 0070        convertRawToMilliAmps@rawValue 0076  
                               start 0086            ??_setupInternalOscillator 00E2  
                              ??_abs 0072                                ?_main 00EB  
                    __end_of___lldiv 1000                                i1l106 0084  
                              i1l322 0E5C                                i1l242 0F5A  
                              i1l251 0FA4                                i1l243 0F6D  
                              i1l316 06D0                                i1l173 0D45  
                              i1l511 0D72                                i1l247 0F8E  
                              i1l440 0E15                                i1l248 0F90  
                              i1l361 07E1                                i1l531 0C9D  
                              i1l445 0383                                i1l525 0F4A  
                              i1l437 072B                                i1l373 0461  
                              i1l375 0470                                i1l456 0297  
                              i1l448 0391                                i1l528 0C69  
                              i1l368 0786                                i1l713 0CC2  
                              i1l715 0CD6                                i1l459 0C4B  
                              i1l563 0C54                                i1l539 0D1A  
                              i1l732 0EE2                                i1l733 0EF2  
                              i1l727 0DA5                                i1l749 0FFF  
                              _PORTA 000C                                _PORTB 000D  
                              _TRISA 008C                                _TRISB 008D  
                ___lmul@multiplicand 0074                          readADCRaw@i 0078  
     convertRawToMilliAmps@offsetted 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_749 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00E5  
                _initialiseADCModule 0C21                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00E7                      __initialization 0088  
                       __end_of_main 0DDB                    ?_initialiseADCPin 0070  
                        i1_writeGPIO 0672                               ??_main 00EF  
                 ??_initialiseADCPin 00E2             __end_of_readFilteredVout 072C  
               ?_initialiseADCModule 0070           ??_initialiseCurrentSensors 00E8  
    __end_of_setupInternalOscillator 0536  setupInternalOscillator@selectedFreq 00E4  
                             _ADCON0 009D                               _ADCON1 009E  
                        ?i1_readGPIO 0070                               _ADRESH 009C  
                             _ADRESL 009B                               _CCPR1L 0291  
                             _ANSELA 018C                               _ANSELB 018D  
                             i1l2000 0CBE                               i1l2002 0CC7  
                             i1l2010 0D73                               i1l2004 0CCC  
                             i1l2020 0D9D                               i1l2012 0D7B  
                             i1l2100 0691                               i1l2006 0CD2  
                             i1l2014 0D7F                               i1l2110 06C3  
                             i1l2102 069E                               i1l2016 0D87  
                             i1l2120 0E26                               i1l2112 0E17  
                             i1l2104 06AC                               i1l2018 0D8E  
                             i1l2130 0E41                               i1l2122 0E2A  
                             i1l2114 0E18                               i1l2106 06B1  
                             i1l2210 0F4E                               i1l2052 0DDB  
                             i1l2140 0E4D                               i1l2124 0E2B  
                             i1l2116 0E1E                               i1l2300 0D71  
                             i1l2108 06B6                               i1l2220 0F6B  
                             i1l2212 0F54                               i1l1173 0CB7  
                             i1l2310 0FB6                               i1l2070 0C99  
                             i1l2062 0C9E                               i1l2054 0DE0  
                             i1l2142 0E59                               i1l2126 0E30  
                             i1l2118 0E23                               i1l2222 0F72  
                             i1l2214 0F58                               i1l2320 0FE1  
                             i1l2312 0FB9                               i1l2080 0EC6  
                             i1l1176 0CB7                               i1l2064 0CAB  
                             i1l2056 0DFD                               i1l2128 0E35  
                             i1l2136 0E43                               u200_20 0D5F  
                             i1l2304 0C4C                               i1l2240 0F98  
                             i1l2224 0F74                               i1l2216 0F60  
                             i1l2208 0F4C                               u200_21 0D5D  
                             i1l2322 0FE9                               i1l2314 0FC4  
                             i1l2066 0C84                               i1l2082 0ECE  
                             i1l2074 0EA7                               i1l2058 0E11  
                             i1l2138 0E48                               i1l2306 0C50  
                             i1l2090 067F                               i1l2242 0F9C  
                             i1l2234 0F84                               i1l2226 0F78  
                             i1l2218 0F66                               i1l2402 0F1D  
                             i1l2324 0FEA                               i1l2316 0FC8  
                             i1l2308 0FA5                               i1l2068 0C8A  
                             i1l2076 0EB1                               i1l2148 0E5B  
                             i1l2260 011B                               i1l2252 00B4  
                             i1l2092 0682                               i1l2084 0673  
                             i1l2332 0C5E                               i1l2340 0D0A  
                             i1l2244 0F9D                               i1l2236 0F88  
                             i1l2228 0F83                               i1l2500 0740  
                             i1l2404 0F2D                               i1l2420 06E1  
                             i1l2412 06D1                               i1l2326 0FF1  
                             i1l2318 0FCF                               i1l2078 0EB6  
                             i1l2270 01BB                               i1l2262 012A  
                             i1l2254 00CA                               i1l2094 0686  
                             i1l2086 0674                               i1l2334 0C63  
                             i1l2342 0D0E                               i1l2238 0F94  
                             i1l2502 0746                               i1l2406 0F31  
                             i1l2422 06E5                               i1l2350 0D1E  
                             i1l2328 0FF7                               i1l2280 0271  
                             i1l2272 01D9                               i1l2264 0185  
                             i1l2256 00D9                               i1l2360 02A7  
                             u201_20 0D60                               i1l2096 0687  
                             i1l2088 067A                               i1l2344 0D12  
                             i1l2336 0CF7                               i1l2248 0FA2  
                             i1l2512 0759                               i1l2504 074F  
                             i1l2408 0F37                               i1l2440 0718  
                             i1l2424 06EB                               i1l2352 0D29  
                             i1l2282 0293                               i1l2274 01EA  
                             i1l2266 019F                               i1l2258 00E7  
                             i1l2370 031B                               i1l2362 02DA  
                             i1l2354 0298                               i1l2290 0D46  
                             i1l2098 068C                               i1l2346 0D18  
                             i1l2338 0CFF                               i1l2514 0769  
                             i1l2506 0758                               i1l2434 06FE  
                             i1l2426 06F4                               i1l2418 06D3  
                             i1l2450 0453                               i1l2284 0C43  
                             i1l2276 021C                               i1l2268 01B0  
                             i1l2372 0348                               i1l2364 02E0  
                             i1l2356 029F                               i1l2292 0D64  
                             i1l2516 076D                               i1l2436 070E  
                             i1l2428 06FD                               i1l2452 045D  
                             i1l2444 0392                               i1l2348 0D1B  
                             i1l2700 004A                               i1l2278 0240  
                             i1l2374 0375                               i1l2366 02E3  
                             i1l2358 02A2                               i1l2294 0D66  
                             i1l2470 07A1                               i1l2518 0773  
                             i1l2390 0F02                               i1l2382 0EF3  
                             i1l2438 0712                               i1l2454 046B  
                             i1l2446 0398                               i1l2710 0073  
                             i1l2702 004D                               u210_20 0FF7  
                             i1l2376 037F                               i1l2368 02E8  
                             i1l2296 0D6B                               u202_20 0D6B  
                             i1l2480 07B4                               i1l2472 07AA  
                             i1l2464 0789                               i1l2392 0F06  
                             i1l2456 046F                               i1l2448 03A2  
                             i1l2704 0053                               i1l2712 0078  
                             u210_21 0FF6                               u202_21 0D6A  
                             i1l2378 038D                               i1l2298 0D70  
                             i1l2482 07C4                               i1l2474 07B3  
                             i1l2466 0797                               i1l2458 0787  
                             i1l2490 072C                               i1l2394 0F0C  
                             i1l2714 0083                               i1l2706 0063  
                             i1l2484 07C8                               i1l2468 079B  
                             i1l2396 0F1C                               i1l2388 0EF4  
                             i1l2708 006E                               u130_25 0CC8  
                             i1l2486 07CE                               u131_20 0CD2  
                             u203_20 0D70                               u211_20 0CFF  
                             i1l2496 072E                               u131_21 0CD1  
                             u203_21 0D6F                               u211_21 0CFE  
                             i1l2498 073C                               i1l2690 0029  
                             i1l2682 0006                               i1l2692 002F  
                             i1l2684 001B                               i1l2694 0035  
                             i1l2686 0021                               u204_20 0FB6  
                             u132_20 0D7F                               u212_20 0D0A  
                             u220_20 0F0C                               i1l2696 003D  
                             i1l2688 0024                               u204_21 0FB5  
                             u132_21 0D7E                               u212_21 0D09  
                             u220_21 0F0B                               i1l2698 0045  
                             i1l1996 0CB8                               i1l1998 0CBA  
                             u213_20 0D18                               u221_20 0F37  
                             u213_21 0D17                               u221_21 0F36  
                             u205_25 0FBA                               u133_25 0D88  
                             u206_20 0FC8                               u150_20 067A  
                             u222_20 0F44                               u230_20 045D  
                             u214_20 0D43                               u206_21 0FC7  
                             u150_21 0679                               u230_21 045C  
                             u214_21 0D40                               u134_25 0D8F  
                             u222_25 0F40                               u230_25 0459  
                             u135_20 0D9D                               u151_20 068C  
                             u223_20 06EB                               u231_20 046B  
                             u135_21 0D9C                               u151_21 068B  
                             u223_21 06EA                               u231_21 046A  
                             u215_24 0D45                               u207_25 0FC9  
                             u231_25 0467                               u208_20 0FE1  
                             u128_20 0CBE                               u160_20 0E30  
                             u216_20 029F                               u152_20 0691  
                             u232_20 07A1                               u224_20 0718  
                             u208_21 0FE0                               u128_21 0CBD  
                             u160_21 0E2F                               u216_21 029E  
                             u152_21 0690                               u232_21 07A0  
                             u224_21 0717                               u208_25 0FDD  
                             u145_20 0E0B                               u217_20 02E0  
                             u233_20 07CE                               u225_20 0725  
                             u217_21 02DF                               u233_21 07CD  
                             u161_24 0E3A                               u153_24 0696  
                             u209_25 0FEB                               u129_25 0CC3  
                             u145_25 0E07                               u161_25 0E39  
                             u153_25 0695                               u225_25 0721  
                             u146_20 0CAB                               u162_20 0E48  
                             u218_20 037F                               u234_20 07DB  
                             u226_20 0398                               u250_20 0080  
                             u146_21 0CAA                               u162_21 0E47  
                             u218_21 037E                               u226_21 0397  
                             u154_24 06A3                               u146_25 0CA7  
                             u218_25 037B                               u154_25 06A2  
                             u234_25 07D7                               u147_20 0EAE  
                             u219_20 038D                               u155_20 06B1  
                             u235_20 0746                               u227_20 03A2  
                             u243_20 0021                               u219_21 038C  
                             u155_21 06B0                               u235_21 0745  
                             u227_21 03A1                               u243_21 0020  
                             u163_24 0E52                               u163_25 0E51  
                             u219_25 0389                               u148_20 0EB6  
                             u156_20 06B6                               u236_20 0773  
                             u228_20 03C4                               u244_20 002F  
                             u148_21 0EB5                               u156_21 06B5  
                             u236_21 0772                               u244_21 002E  
                             u228_25 03C0                               u149_20 0EE2  
                             u237_20 0780                               u229_20 03F3  
                             u245_20 004A                               u149_21 0EE1  
                             u245_21 0049                               u157_24 06BB  
                             u157_25 06BA                               u237_25 077C  
                             u229_25 03EF                               u190_20 0F8E  
                             u246_20 0053                               u190_21 0F8D  
                             u246_21 0052                               u158_24 06C8  
                             u158_25 06C7                               u159_20 0E1E  
                             u191_20 0F94                               u247_20 006A  
                             u159_21 0E1D                               u191_21 0F93  
                             u247_21 0068                               u192_20 00CA  
                             u248_20 006B                               u192_21 00C9  
                             u193_20 019F                               u185_20 0F54  
                             u249_20 007F                               u193_21 019E  
                             u185_21 0F53                               u249_21 007D  
                             u194_20 01BB                               u186_20 0F60  
                             u194_21 01BA                               u186_21 0F5F  
                             u195_20 01D9                               u187_20 0F66  
                             u195_21 01D8                               u187_21 0F65  
                             u196_20 020A                               u188_20 0F72  
                             u188_21 0F71                      ??_runPotScaling 0026  
                             u196_25 0201                               u197_20 025F  
                             u197_25 0256                               u189_25 0F7B  
                             u198_20 0D50                               u198_21 0D4E  
                             u199_20 0D51              initialiseGPIO@direction 00E2  
                   readGPIO@portType 00E9                  readADCRaw@gpioValid 0077  
                             ___lmul 0D73                               ___omul 0EA7  
                             ___wmul 0CB8                            ??___lldiv 0020  
                   __end_of_readGPIO 0EA7                       _controlRoutine 0298  
                             _tripIL 006A       convertRawToMilliVolts@rawValue 007C  
          setPWMDutyandPeriod@period 0072                ??_initialiseADCModule 00E2  
           _initialisePotentiometers 0C55           initialiseADCPin@portNumber 00E6  
                   __end_of_setupPWM 07FE                      _currentTripRead 0D46  
         ?_transToCurrentModeControl 0070              __end_of__initialization 00B0  
            ??_runCurrentModeControl 007C               __end_of_controlRoutine 0392  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00E4  
              i1writeGPIO@gpioNumber 0074                _convertRawToMilliAmps 0C84  
                      _currentILFIFO 0120                       _OPTION_REGbits 0095  
                  __end_of_Tick490Hz 0086                _runVoltageModeControl 00B4  
                         __pbssBANK0 005D                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pmaintext 0DA6  
                    ?_controlRoutine 0070                              ?___lmul 0070  
                            ?___omul 0020                              ?___wmul 0070  
  __end_of_transToVoltageModeControl 0C3B             ??_convertRawToMilliVolts 0020  
                         __pintentry 0004                              _CCP1CON 0293  
                ___omul@multiplicand 0028                       ___lmul@product 0078  
            __end_of_currentTripRead 0D73          __end_of_setPWMDutyandPeriod 0D46  
   __end_of_initialiseCurrentSensors 0CF7           __end_ofi1_currentTripReset 0C6A  
           initialiseADCPin@portType 00E5              _transToOverCurrentFault 0C4C  
                 i1readGPIO@portType 0077                readFilteredVout@i_846 0028  
              i1writeGPIO@portNumber 0075                           _filteredIL 005F  
                          ?_readGPIO 0070                           _readADCRaw 0F4B  
                _readFilteredFreqPot 072C                 i1readGPIO@gpioNumber 0078  
                _readFilteredDutyPot 0787   convertRawToMilliAmps@returnValuemA 007A  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00E6                              ___lldiv 0FA5  
             ?_convertRawToMilliAmps 0076                         ?i1_writeGPIO 0070  
               ?_readFilteredFreqPot 007A                              __ptext1 0C34  
                            __ptext2 0C1D                              __ptext3 0C2D  
                            __ptext4 0C3B                              __ptext5 07E2  
                            __ptext6 0471                              __ptext7 0E5D  
                            __ptext8 0C55                              __ptext9 0CD7  
               ?_readFilteredDutyPot 007A         __end_of_initialiseController 0C76  
                          _T2CONbits 001C                    ?_readFilteredVout 007A  
                            _setDuty 0063                i1writeGPIO@writeValue 0070  
             ?_runVoltageModeControl 0070                              _tripIDS 006B  
                 ??_readFilteredVout 0020                         ??i1_readGPIO 0070  
                            clrloop0 0C28                 end_of_initialization 00B0  
    convertRawToMilliVolts@offsetted 0029                           ??_readGPIO 00E2  
                     ___omul@product 0071             ?_setupInternalOscillator 0070  
                    ___lldiv@divisor 0076                      ___lldiv@counter 0025  
                   _currentTripCount 0069                           ??_setupPWM 00E8  
                   _currentTripReset 0C76           ??_initialisePotentiometers 00E8  
                         _prevPeriod 006D                    writeGPIO@portType 00E5  
                     _readFilteredIL 0EF3                   __end_ofi1_readGPIO 0E5D  
              ??_readFilteredFreqPot 0020                ??_readFilteredDutyPot 0020  
               i1readGPIO@portNumber 0076                     ?_currentTripRead 0070  
                  __end_of_writeGPIO 0672            ??_transToOverCurrentFault 0070  
           initialiseGPIO@portNumber 00E7                         _filteredVout 005D  
        ??_transToCurrentModeControl 00E2                          ?_readADCRaw 0070  
                  _transToPotControl 0C1D                          _CCP1CONbits 0293  
                      readGPIO@readA 00E4                        readGPIO@readB 00E6  
              __end_of_runPotScaling 0471                   ?_transToPotControl 0070  
          ?_initialiseCurrentSensors 0070        __end_of_runCurrentModeControl 0C4C  
               _voltageModeVariables 00C6               __end_of_readFilteredIL 0F4B  
                ??_transToPotControl 00E2                       __end_of___lmul 0DA6  
        __end_of_initialiseADCModule 0C27                       __end_of___omul 0EF3  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0CD7  
              controlRoutine@minDuty 005A                       _clockFrequency 00BC  
                start_initialization 0088         __end_of_setupTimer0Interrupt 0C43  
                     _currentIDSFIFO 0140                          __end_of_abs 0CB8  
                          _Tick490Hz 0004               _convertRawToMilliVolts 0DDB  
          __end_of_transToPotControl 0C21     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0C55           __end_of_currentTripMonitor 0D1B  
               _initialiseController 0C6A                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0C2D                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00E2  
                         ?_Tick490Hz 0070                     _initialiseADCPin 05AC  
                       _currentState 006C                   i1_currentTripReset 0C5E  
                 readGPIO@gpioNumber 00EA                ?_initialiseController 0070  
                     _initialiseGPIO 0536              ??_convertRawToMilliAmps 0078  
                    i1readGPIO@readA 0072                      i1readGPIO@readB 0074  
   __end_of_initialisePotentiometers 0C5E                  ?i1_currentTripReset 0070  
                           ?___lldiv 0076           ?_transToVoltageModeControl 0070  
    runVoltageModeControl@newVoltage 0050        runVoltageModeControl@propMult 0048  
            ??_runVoltageModeControl 0030                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0C84      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 05AC  
                          clear_ram0 0C27                            _setPeriod 006E  
                           _PIE1bits 0091         setPWMDutyandPeriod@dutyCycle 0070  
               _setupTimer0Interrupt 0C3B    runVoltageModeControl@integralMult 0040  
                _currentTripRead$928 007A                          _filteredIDS 00C2  
                         _ADCON0bits 009D                    ___wmul@multiplier 0070  
                 readGPIO@portNumber 00E8                          _freqPotFIFO 01A0  
                          _writeGPIO 0612                          ??_Tick490Hz 005C  
                  ___lmul@multiplier 0070                         ??_readADCRaw 0072  
             ??_initialiseController 00E8                      ?_initialiseGPIO 00E2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
               _currentModeVariables 00A0                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 0787          __end_of_readFilteredDutyPot 07E2  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
                writeGPIO@gpioNumber 00E6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0FA5             readFilteredFreqPot@i_753 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00E2  
                           __ptext10 0C76                             __ptext11 0612  
                           __ptext20 0EF3                             __ptext12 0C6A  
                           __ptext21 072C                             __ptext13 0536  
                           __ptext30 00B4                             __ptext22 0787  
                           __ptext14 05AC                             __ptext31 0E16  
                           __ptext23 0F4B                             __ptext15 0C21  
                           __ptext32 0DDB                             __ptext24 0CF7  
                           __ptext33 0D73                             __ptext25 0C5E  
                           __ptext17 0D1B                             __ptext34 0C9E  
                           __ptext26 0672                             __ptext18 0392  
                           __ptext35 0EA7                             __ptext27 0C4C  
                           __ptext19 06D1                             __ptext36 0C43  
                           __ptext28 0D46                             __ptext37 0C84  
                           __ptext29 0298                             __ptext38 0CB8  
                           __ptext39 0FA5            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0E5D  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00C4                             _setupPWM 07E2  
              _runCurrentModeControl 0C43                             int$flags 007E  
                           _slotTest 0065             __end_of_initialiseADCPin 0612  
                           main@argc 00EB             ?_transToOverCurrentFault 0070  
                           main@argv 00ED                             _voutFIFO 01C0  
    readFilteredFreqPot@sumOfSamples 0024                   _currentTripMonitor 0CF7  
                   _timerSlotQuarter 0066       __end_of_convertRawToMilliVolts 0E16  
                         _INTCONbits 000B                  ?_currentTripMonitor 0070  
  __end_of_transToCurrentModeControl 0C34                  writeGPIO@portNumber 00E7  
                           intlevel1 0000             _initialiseCurrentSensors 0CD7  
                   ___lldiv@dividend 007A               i1readGPIO@returnValueA 0073  
             i1readGPIO@returnValueB 0075                     _readFilteredVout 06D1  
             ??_setupTimer0Interrupt 00E2                           _OSCCONbits 0099  
               ??_currentTripMonitor 007B                          _potSetCount 0068  
                _setPWMDutyandPeriod 0D1B        __end_of_convertRawToMilliAmps 0C9E  
            _setupInternalOscillator 0471          ??_transToVoltageModeControl 00E2  
                      ??i1_writeGPIO 0071                        __pstringtext1 07FE  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 0298  
                writeGPIO@writeValue 00E2                          ??_writeGPIO 00E3  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00E8                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 0392  
               readGPIO@returnValueA 00E5                 readGPIO@returnValueB 00E7  
                readFilteredIL@i_936 007A               ?_runCurrentModeControl 0070  
                    readFilteredIL@i 007B  
