

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Aug 15 11:19:28 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.40
    60                           ; Generated 17/11/2021 GMT
    61                           ; 
    62                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1827 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0212                     	;# 
   183  0213                     	;# 
   184  0213                     	;# 
   185  0214                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0219                     	;# 
   195  021A                     	;# 
   196  021B                     	;# 
   197  021C                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029E                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0318                     	;# 
   224  0318                     	;# 
   225  0319                     	;# 
   226  031A                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  0111                     	;# 
   301  0112                     	;# 
   302  0113                     	;# 
   303  0114                     	;# 
   304  0115                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011D                     	;# 
   312  011E                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0219                     	;# 
   353  021A                     	;# 
   354  021B                     	;# 
   355  021C                     	;# 
   356  021D                     	;# 
   357  021E                     	;# 
   358  021F                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  039A                     	;# 
   389  039C                     	;# 
   390  039D                     	;# 
   391  039E                     	;# 
   392  039F                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  041C                     	;# 
   397  041D                     	;# 
   398  041E                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0219                     	;# 
   511  021A                     	;# 
   512  021B                     	;# 
   513  021C                     	;# 
   514  021D                     	;# 
   515  021E                     	;# 
   516  021F                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0294                     	;# 
   522  0295                     	;# 
   523  0295                     	;# 
   524  0296                     	;# 
   525  0298                     	;# 
   526  0298                     	;# 
   527  0299                     	;# 
   528  029A                     	;# 
   529  029B                     	;# 
   530  029C                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0219                     	;# 
   669  021A                     	;# 
   670  021B                     	;# 
   671  021C                     	;# 
   672  021D                     	;# 
   673  021E                     	;# 
   674  021F                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0294                     	;# 
   680  0295                     	;# 
   681  0295                     	;# 
   682  0296                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029B                     	;# 
   688  029C                     	;# 
   689  029C                     	;# 
   690  029D                     	;# 
   691  029E                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0415                     	;# 
   710  0416                     	;# 
   711  0417                     	;# 
   712  041C                     	;# 
   713  041D                     	;# 
   714  041E                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  001E                     	;# 
   754  001F                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0219                     	;# 
   827  021A                     	;# 
   828  021B                     	;# 
   829  021C                     	;# 
   830  021D                     	;# 
   831  021E                     	;# 
   832  021F                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0295                     	;# 
   840  0296                     	;# 
   841  0298                     	;# 
   842  0298                     	;# 
   843  0299                     	;# 
   844  029A                     	;# 
   845  029B                     	;# 
   846  029C                     	;# 
   847  029C                     	;# 
   848  029D                     	;# 
   849  029E                     	;# 
   850  029E                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0016                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001C                     	;# 
   911  001E                     	;# 
   912  001F                     	;# 
   913  008C                     	;# 
   914  008D                     	;# 
   915  0091                     	;# 
   916  0092                     	;# 
   917  0093                     	;# 
   918  0094                     	;# 
   919  0095                     	;# 
   920  0096                     	;# 
   921  0097                     	;# 
   922  0098                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  0111                     	;# 
   933  0112                     	;# 
   934  0113                     	;# 
   935  0114                     	;# 
   936  0115                     	;# 
   937  0116                     	;# 
   938  0117                     	;# 
   939  0118                     	;# 
   940  0119                     	;# 
   941  011A                     	;# 
   942  011B                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019C                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  0211                     	;# 
   970  0211                     	;# 
   971  0212                     	;# 
   972  0212                     	;# 
   973  0213                     	;# 
   974  0213                     	;# 
   975  0214                     	;# 
   976  0214                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0216                     	;# 
   981  0216                     	;# 
   982  0217                     	;# 
   983  0217                     	;# 
   984  0219                     	;# 
   985  021A                     	;# 
   986  021B                     	;# 
   987  021C                     	;# 
   988  021D                     	;# 
   989  021E                     	;# 
   990  021F                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  039A                     	;# 
  1021  039C                     	;# 
  1022  039D                     	;# 
  1023  039E                     	;# 
  1024  039F                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  041C                     	;# 
  1029  041D                     	;# 
  1030  041E                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011A                     	;# 
  1100  011B                     	;# 
  1101  011D                     	;# 
  1102  011E                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0219                     	;# 
  1143  021A                     	;# 
  1144  021B                     	;# 
  1145  021C                     	;# 
  1146  021D                     	;# 
  1147  021E                     	;# 
  1148  021F                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029C                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  029E                     	;# 
  1167  0311                     	;# 
  1168  0311                     	;# 
  1169  0312                     	;# 
  1170  0313                     	;# 
  1171  0318                     	;# 
  1172  0318                     	;# 
  1173  0319                     	;# 
  1174  031A                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  041C                     	;# 
  1187  041D                     	;# 
  1188  041E                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  0011                     	;# 
  1215  0012                     	;# 
  1216  0013                     	;# 
  1217  0014                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0016                     	;# 
  1221  0017                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  0111                     	;# 
  1249  0112                     	;# 
  1250  0113                     	;# 
  1251  0114                     	;# 
  1252  0115                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0118                     	;# 
  1256  0119                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011D                     	;# 
  1260  011E                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  0191                     	;# 
  1264  0191                     	;# 
  1265  0192                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019D                     	;# 
  1281  019E                     	;# 
  1282  019F                     	;# 
  1283  020C                     	;# 
  1284  020D                     	;# 
  1285  0211                     	;# 
  1286  0211                     	;# 
  1287  0212                     	;# 
  1288  0212                     	;# 
  1289  0213                     	;# 
  1290  0213                     	;# 
  1291  0214                     	;# 
  1292  0214                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  0219                     	;# 
  1301  021A                     	;# 
  1302  021B                     	;# 
  1303  021C                     	;# 
  1304  021D                     	;# 
  1305  021E                     	;# 
  1306  021F                     	;# 
  1307  0291                     	;# 
  1308  0291                     	;# 
  1309  0292                     	;# 
  1310  0293                     	;# 
  1311  0294                     	;# 
  1312  0295                     	;# 
  1313  0295                     	;# 
  1314  0296                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029B                     	;# 
  1320  029C                     	;# 
  1321  029C                     	;# 
  1322  029D                     	;# 
  1323  029E                     	;# 
  1324  029E                     	;# 
  1325  0311                     	;# 
  1326  0311                     	;# 
  1327  0312                     	;# 
  1328  0313                     	;# 
  1329  0318                     	;# 
  1330  0318                     	;# 
  1331  0319                     	;# 
  1332  031A                     	;# 
  1333  0394                     	;# 
  1334  0395                     	;# 
  1335  0396                     	;# 
  1336  039A                     	;# 
  1337  039C                     	;# 
  1338  039D                     	;# 
  1339  039E                     	;# 
  1340  039F                     	;# 
  1341  0415                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  041C                     	;# 
  1345  041D                     	;# 
  1346  041E                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0013                     	;# 
  1375  0014                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008D                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0094                     	;# 
  1393  0095                     	;# 
  1394  0096                     	;# 
  1395  0097                     	;# 
  1396  0098                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  0111                     	;# 
  1407  0112                     	;# 
  1408  0113                     	;# 
  1409  0114                     	;# 
  1410  0115                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  0118                     	;# 
  1414  0119                     	;# 
  1415  011A                     	;# 
  1416  011B                     	;# 
  1417  011D                     	;# 
  1418  011E                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0219                     	;# 
  1459  021A                     	;# 
  1460  021B                     	;# 
  1461  021C                     	;# 
  1462  021D                     	;# 
  1463  021E                     	;# 
  1464  021F                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0294                     	;# 
  1470  0295                     	;# 
  1471  0295                     	;# 
  1472  0296                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029B                     	;# 
  1478  029C                     	;# 
  1479  029C                     	;# 
  1480  029D                     	;# 
  1481  029E                     	;# 
  1482  029E                     	;# 
  1483  0311                     	;# 
  1484  0311                     	;# 
  1485  0312                     	;# 
  1486  0313                     	;# 
  1487  0318                     	;# 
  1488  0318                     	;# 
  1489  0319                     	;# 
  1490  031A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  039A                     	;# 
  1495  039C                     	;# 
  1496  039D                     	;# 
  1497  039E                     	;# 
  1498  039F                     	;# 
  1499  0415                     	;# 
  1500  0416                     	;# 
  1501  0417                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  0011                     	;# 
  1531  0012                     	;# 
  1532  0013                     	;# 
  1533  0014                     	;# 
  1534  0015                     	;# 
  1535  0016                     	;# 
  1536  0016                     	;# 
  1537  0017                     	;# 
  1538  0018                     	;# 
  1539  0019                     	;# 
  1540  001A                     	;# 
  1541  001B                     	;# 
  1542  001C                     	;# 
  1543  001E                     	;# 
  1544  001F                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0098                     	;# 
  1555  0099                     	;# 
  1556  009A                     	;# 
  1557  009B                     	;# 
  1558  009B                     	;# 
  1559  009C                     	;# 
  1560  009D                     	;# 
  1561  009E                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  0111                     	;# 
  1565  0112                     	;# 
  1566  0113                     	;# 
  1567  0114                     	;# 
  1568  0115                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  0118                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011B                     	;# 
  1575  011D                     	;# 
  1576  011E                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  0191                     	;# 
  1580  0191                     	;# 
  1581  0192                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0199                     	;# 
  1589  019A                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  020C                     	;# 
  1600  020D                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  0219                     	;# 
  1617  021A                     	;# 
  1618  021B                     	;# 
  1619  021C                     	;# 
  1620  021D                     	;# 
  1621  021E                     	;# 
  1622  021F                     	;# 
  1623  0291                     	;# 
  1624  0291                     	;# 
  1625  0292                     	;# 
  1626  0293                     	;# 
  1627  0294                     	;# 
  1628  0295                     	;# 
  1629  0295                     	;# 
  1630  0296                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  029B                     	;# 
  1636  029C                     	;# 
  1637  029C                     	;# 
  1638  029D                     	;# 
  1639  029E                     	;# 
  1640  029E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0318                     	;# 
  1646  0318                     	;# 
  1647  0319                     	;# 
  1648  031A                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  039A                     	;# 
  1653  039C                     	;# 
  1654  039D                     	;# 
  1655  039E                     	;# 
  1656  039F                     	;# 
  1657  0415                     	;# 
  1658  0416                     	;# 
  1659  0417                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  000D                     _PORTB	set	13
  1675  000C                     _PORTA	set	12
  1676  001C                     _T2CONbits	set	28
  1677  001B                     _PR2	set	27
  1678  000B                     _INTCONbits	set	11
  1679  009B                     _ADRESL	set	155
  1680  009C                     _ADRESH	set	156
  1681  009D                     _ADCON0bits	set	157
  1682  008D                     _TRISB	set	141
  1683  008C                     _TRISA	set	140
  1684  009E                     _ADCON1	set	158
  1685  009D                     _ADCON0	set	157
  1686  0095                     _OPTION_REG	set	149
  1687  0095                     _OPTION_REGbits	set	149
  1688  0091                     _PIE1bits	set	145
  1689  0099                     _OSCCONbits	set	153
  1690  010D                     _LATB	set	269
  1691  010C                     _LATA	set	268
  1692  011D                     _APFCON0bits	set	285
  1693  018D                     _ANSELB	set	397
  1694  018C                     _ANSELA	set	396
  1695  0293                     _CCP1CONbits	set	659
  1696  0296                     _PSTR1CONbits	set	662
  1697  0291                     _CCPR1L	set	657
  1698  0293                     _CCP1CON	set	659
  1699                           
  1700                           	psect	stringtext1
  1701  07E7                     __pstringtext1:
  1702  07E7                     STR_1:
  1703  07E7  3428               	retlw	40	;'('
  1704  07E8  3428               	retlw	40	;'('
  1705  07E9  3449               	retlw	73	;'I'
  1706  07EA  344E               	retlw	78	;'N'
  1707  07EB  3454               	retlw	84	;'T'
  1708  07EC  3443               	retlw	67	;'C'
  1709  07ED  344F               	retlw	79	;'O'
  1710  07EE  344E               	retlw	78	;'N'
  1711  07EF  3429               	retlw	41	;')'
  1712  07F0  3426               	retlw	38	;'&'
  1713  07F1  3430               	retlw	48	;'0'
  1714  07F2  3437               	retlw	55	;'7'
  1715  07F3  3446               	retlw	70	;'F'
  1716  07F4  3468               	retlw	104	;'h'
  1717  07F5  3429               	retlw	41	;')'
  1718  07F6  342C               	retlw	44	;','
  1719  07F7  3432               	retlw	50	;'2'
  1720  07F8  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext2
  1723  0000                     __pstringtext2:
  1724  07E7                     
  1725                           	psect	cinit
  1726  0088                     start_initialization:	
  1727                           ; #config settings
  1728                           
  1729  0088                     __initialization:
  1730                           
  1731                           ; Clear objects allocated to BANK0
  1732  0088  305F               	movlw	low __pbssBANK0
  1733  0089  0084               	movwf	4
  1734  008A  3000               	movlw	high __pbssBANK0
  1735  008B  0085               	movwf	5
  1736  008C  3010               	movlw	16
  1737  008D  318B  23C6  3180   	fcall	clear_ram0
  1738                           
  1739                           ; Clear objects allocated to BANK1
  1740  0090  30A0               	movlw	low __pbssBANK1
  1741  0091  0084               	movwf	4
  1742  0092  3000               	movlw	high __pbssBANK1
  1743  0093  0085               	movwf	5
  1744  0094  3032               	movlw	50
  1745  0095  318B  23C6  3180   	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK2
  1748  0098  3020               	movlw	low __pbssBANK2
  1749  0099  0084               	movwf	4
  1750  009A  3001               	movlw	high __pbssBANK2
  1751  009B  0085               	movwf	5
  1752  009C  3040               	movlw	64
  1753  009D  318B  23C6  3180   	fcall	clear_ram0
  1754                           
  1755                           ; Clear objects allocated to BANK3
  1756  00A0  30A0               	movlw	low __pbssBANK3
  1757  00A1  0084               	movwf	4
  1758  00A2  3001               	movlw	high __pbssBANK3
  1759  00A3  0085               	movwf	5
  1760  00A4  3040               	movlw	64
  1761  00A5  318B  23C6  3180   	fcall	clear_ram0
  1762                           
  1763                           ; Clear objects allocated to BANK4
  1764  00A8  3020               	movlw	low __pbssBANK4
  1765  00A9  0084               	movwf	4
  1766  00AA  3002               	movlw	high __pbssBANK4
  1767  00AB  0085               	movwf	5
  1768  00AC  3020               	movlw	32
  1769  00AD  318B  23C6  3180   	fcall	clear_ram0
  1770  00B0                     end_of_initialization:	
  1771                           ;End of C runtime variable initialization code
  1772                           
  1773  00B0                     __end_of__initialization:
  1774  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1775  00B1  0020               	movlb	0
  1776  00B2  318D  2D48         	ljmp	_main	;jump to C main() function
  1777                           
  1778                           	psect	bssBANK0
  1779  005F                     __pbssBANK0:
  1780  005F                     _filteredVout:
  1781  005F                     	ds	2
  1782  0061                     _latestIL:
  1783  0061                     	ds	2
  1784  0063                     _setDuty:
  1785  0063                     	ds	2
  1786  0065                     _slotTest:
  1787  0065                     	ds	1
  1788  0066                     _timerSlotQuarter:
  1789  0066                     	ds	1
  1790  0067                     _timerSlotHalf:
  1791  0067                     	ds	1
  1792  0068                     _potSetCount:
  1793  0068                     	ds	1
  1794  0069                     _currentTripCount:
  1795  0069                     	ds	1
  1796  006A                     _tripIL:
  1797  006A                     	ds	1
  1798  006B                     _tripIDS:
  1799  006B                     	ds	1
  1800  006C                     _currentState:
  1801  006C                     	ds	1
  1802  006D                     _prevPeriod:
  1803  006D                     	ds	1
  1804  006E                     _setPeriod:
  1805  006E                     	ds	1
  1806                           
  1807                           	psect	bssBANK1
  1808  00A0                     __pbssBANK1:
  1809  00A0                     _integratorScaledLimit:
  1810  00A0                     	ds	8
  1811  00A8                     _clockFrequency:
  1812  00A8                     	ds	4
  1813  00AC                     _filteredDutyPot:
  1814  00AC                     	ds	2
  1815  00AE                     _filteredFreqPot:
  1816  00AE                     	ds	2
  1817  00B0                     _filteredIL:
  1818  00B0                     	ds	2
  1819  00B2                     _filteredIDS:
  1820  00B2                     	ds	2
  1821  00B4                     _prevDuty:
  1822  00B4                     	ds	2
  1823  00B6                     _voltageModeVariables:
  1824  00B6                     	ds	28
  1825                           
  1826                           	psect	bssBANK2
  1827  0120                     __pbssBANK2:
  1828  0120                     _currentILFIFO:
  1829  0120                     	ds	32
  1830  0140                     _currentIDSFIFO:
  1831  0140                     	ds	32
  1832                           
  1833                           	psect	bssBANK3
  1834  01A0                     __pbssBANK3:
  1835  01A0                     _freqPotFIFO:
  1836  01A0                     	ds	32
  1837  01C0                     _voutFIFO:
  1838  01C0                     	ds	32
  1839                           
  1840                           	psect	bssBANK4
  1841  0220                     __pbssBANK4:
  1842  0220                     _dutyPotFIFO:
  1843  0220                     	ds	32
  1844                           
  1845                           	psect	clrtext
  1846  0BC6                     clear_ram0:	
  1847                           ;	Called with FSR0 containing the base address, and
  1848                           ;	WREG with the size to clear
  1849                           
  1850  0BC6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1851  0BC7                     clrloop0:
  1852  0BC7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1853  0BC8  3101               	addfsr 0,1
  1854  0BC9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1855  0BCA  2BC7               	goto	clrloop0	;have we reached the end yet?
  1856  0BCB  3400               	retlw	0	;all done for this memory range, return
  1857                           
  1858                           	psect	cstackBANK1
  1859  00D2                     __pcstackBANK1:
  1860  00D2                     ?_writeGPIO:
  1861  00D2                     ??_transToInitialising:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  00D2                     ??_setupInternalOscillator:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00D2                     ??_setupTimer0Interrupt:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00D2                     ??_initialiseADCModule:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00D2                     ?_initialiseGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00D2                     ??_readGPIO:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00D2                     ??_transToVoltageModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00D2                     ??_transToCurrentModeControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00D2                     ??_transToPotControl:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00D2                     ??_initialiseADCPin:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00D2                     initialiseGPIO@direction:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00D2                     writeGPIO@writeValue:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x0
  1899  00D2                     	ds	1
  1900  00D3                     ??_writeGPIO:
  1901  00D3                     ??_initialiseGPIO:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1
  1906  00D3                     	ds	1
  1907  00D4                     setupInternalOscillator@selectedFreq:
  1908  00D4                     initialiseADCPin@gpioValid:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911  00D4                     readGPIO@readA:	
  1912                           ; 1 bytes @ 0x2
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x2
  1916  00D4                     	ds	1
  1917  00D5                     initialiseADCPin@portType:
  1918  00D5                     initialiseGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00D5                     writeGPIO@portType:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924  00D5                     readGPIO@returnValueA:	
  1925                           ; 1 bytes @ 0x3
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x3
  1929  00D5                     	ds	1
  1930  00D6                     initialiseADCPin@portNumber:
  1931  00D6                     initialiseGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00D6                     writeGPIO@gpioNumber:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937  00D6                     readGPIO@readB:	
  1938                           ; 1 bytes @ 0x4
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x4
  1942  00D6                     	ds	1
  1943  00D7                     initialiseADCPin@gpioNumber:
  1944  00D7                     initialiseGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00D7                     writeGPIO@portNumber:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  00D7                     readGPIO@returnValueB:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  00D7                     	ds	1
  1956  00D8                     ??_setupPWM:
  1957  00D8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00D8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00D8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00D8                     ??_currentTripReset:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969  00D8                     readGPIO@portNumber:	
  1970                           ; 1 bytes @ 0x6
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x6
  1974  00D8                     	ds	1
  1975  00D9                     readGPIO@portType:
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  00D9                     	ds	1
  1979  00DA                     readGPIO@gpioNumber:
  1980                           
  1981                           ; 1 bytes @ 0x8
  1982  00DA                     	ds	1
  1983  00DB                     ?_main:
  1984  00DB                     main@argc:	
  1985                           ; 2 bytes @ 0x9
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00DB                     	ds	2
  1990  00DD                     main@argv:
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  00DD                     	ds	2
  1994  00DF                     ??_main:
  1995                           
  1996                           	psect	cstackCOMMON
  1997  0070                     __pcstackCOMMON:	
  1998                           ; 1 bytes @ 0xD
  1999                           
  2000  0070                     ?_setPWMDutyandPeriod:
  2001  0070                     ?_controlRoutine:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_runPotScaling:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_transToInitialising:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_setupInternalOscillator:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_setupPWM:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_setupTimer0Interrupt:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_initialiseADCModule:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_initialiseCurrentSensors:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialisePotentiometers:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_initialiseController:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_readGPIO:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_transToVoltageModeControl:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_transToCurrentModeControl:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_transToPotControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_runVoltageModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_currentTripReset:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_transToOverCurrentFault:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_transToOverCurrentFault:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick490Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_currentTripRead:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ??___omul:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_writeGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_readGPIO:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1_currentTripReset:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_currentTripMonitor:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_readFilteredIL:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?_abs:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?_readADCRaw:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?___wmul:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?___lmul:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097  0070                     i1writeGPIO@writeValue:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     setPWMDutyandPeriod@dutyCycle:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___wmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     abs@a:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ___lmul@multiplier:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112                           
  2113                           ; 4 bytes @ 0x0
  2114  0070                     	ds	1
  2115  0071                     ??i1_writeGPIO:
  2116  0071                     ___omul@product:	
  2117                           ; 1 bytes @ 0x1
  2118                           
  2119                           
  2120                           ; 8 bytes @ 0x1
  2121  0071                     	ds	1
  2122  0072                     ??_readFilteredIL:
  2123  0072                     ??_abs:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     ??_readADCRaw:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     setPWMDutyandPeriod@period:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132  0072                     i1readGPIO@readA:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     ___wmul@multiplicand:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x2
  2140  0072                     	ds	1
  2141  0073                     ??_setPWMDutyandPeriod:
  2142  0073                     i1writeGPIO@portType:	
  2143                           ; 1 bytes @ 0x3
  2144                           
  2145  0073                     i1readGPIO@returnValueA:	
  2146                           ; 1 bytes @ 0x3
  2147                           
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  0073                     	ds	1
  2151  0074                     ??___wmul:
  2152  0074                     i1writeGPIO@gpioNumber:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     i1readGPIO@readB:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     readADCRaw@returnValue:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161  0074                     ___wmul@product:	
  2162                           ; 2 bytes @ 0x4
  2163                           
  2164  0074                     ___lmul@multiplicand:	
  2165                           ; 2 bytes @ 0x4
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1writeGPIO@portNumber:
  2171  0075                     i1readGPIO@returnValueB:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174                           
  2175                           ; 1 bytes @ 0x5
  2176  0075                     	ds	1
  2177  0076                     ??i1_currentTripReset:
  2178  0076                     ?___lldiv:	
  2179                           ; 1 bytes @ 0x6
  2180                           
  2181  0076                     readADCRaw@channel:	
  2182                           ; 4 bytes @ 0x6
  2183                           
  2184  0076                     i1readGPIO@portNumber:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187  0076                     readFilteredIL@sumOfSamples:	
  2188                           ; 1 bytes @ 0x6
  2189                           
  2190  0076                     ___lldiv@divisor:	
  2191                           ; 4 bytes @ 0x6
  2192                           
  2193                           
  2194                           ; 4 bytes @ 0x6
  2195  0076                     	ds	1
  2196  0077                     readADCRaw@gpioValid:
  2197  0077                     i1readGPIO@portType:	
  2198                           ; 1 bytes @ 0x7
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x7
  2202  0077                     	ds	1
  2203  0078                     ??___lmul:
  2204  0078                     readADCRaw@i:	
  2205                           ; 1 bytes @ 0x8
  2206                           
  2207  0078                     i1readGPIO@gpioNumber:	
  2208                           ; 1 bytes @ 0x8
  2209                           
  2210  0078                     ___lmul@product:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213                           
  2214                           ; 4 bytes @ 0x8
  2215  0078                     	ds	1
  2216  0079                     ??_currentTripRead:
  2217  0079                     readADCRaw@gpioNumber:	
  2218                           ; 1 bytes @ 0x9
  2219                           
  2220                           
  2221                           ; 1 bytes @ 0x9
  2222  0079                     	ds	1
  2223  007A                     ?_readFilteredVout:
  2224  007A                     ?_readFilteredDutyPot:	
  2225                           ; 2 bytes @ 0xA
  2226                           
  2227  007A                     ?_readFilteredFreqPot:	
  2228                           ; 2 bytes @ 0xA
  2229                           
  2230  007A                     _currentTripRead$917:	
  2231                           ; 2 bytes @ 0xA
  2232                           
  2233  007A                     readFilteredIL@i_925:	
  2234                           ; 1 bytes @ 0xA
  2235                           
  2236  007A                     ___lldiv@dividend:	
  2237                           ; 1 bytes @ 0xA
  2238                           
  2239                           
  2240                           ; 4 bytes @ 0xA
  2241  007A                     	ds	1
  2242  007B                     ??_currentTripMonitor:
  2243  007B                     readFilteredIL@i:	
  2244                           ; 1 bytes @ 0xB
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0xB
  2248  007B                     	ds	1
  2249  007C                     ?_convertRawToMilliVolts:
  2250  007C                     convertRawToMilliVolts@rawValue:	
  2251                           ; 2 bytes @ 0xC
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0xC
  2255  007C                     	ds	2
  2256                           
  2257                           	psect	cstackBANK0
  2258  0020                     __pcstackBANK0:
  2259  0020                     ??_readFilteredVout:
  2260  0020                     ??_readFilteredDutyPot:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0020                     ??_readFilteredFreqPot:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0020                     ??_convertRawToMilliVolts:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0020                     ??___lldiv:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0020                     ?___omul:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0020                     ___omul@multiplier:	
  2276                           ; 8 bytes @ 0x0
  2277                           
  2278                           
  2279                           ; 8 bytes @ 0x0
  2280  0020                     	ds	1
  2281  0021                     ___lldiv@quotient:
  2282                           
  2283                           ; 4 bytes @ 0x1
  2284  0021                     	ds	3
  2285  0024                     readFilteredDutyPot@sumOfSamples:
  2286  0024                     readFilteredFreqPot@sumOfSamples:	
  2287                           ; 4 bytes @ 0x4
  2288                           
  2289  0024                     readFilteredVout@sumOfSamples:	
  2290                           ; 4 bytes @ 0x4
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x4
  2294  0024                     	ds	1
  2295  0025                     ___lldiv@counter:
  2296  0025                     convertRawToMilliVolts@vsenseMult:	
  2297                           ; 1 bytes @ 0x5
  2298                           
  2299                           
  2300                           ; 4 bytes @ 0x5
  2301  0025                     	ds	1
  2302  0026                     ??_runPotScaling:
  2303                           
  2304                           ; 1 bytes @ 0x6
  2305  0026                     	ds	2
  2306  0028                     readFilteredDutyPot@i_754:
  2307  0028                     readFilteredFreqPot@i_758:	
  2308                           ; 1 bytes @ 0x8
  2309                           
  2310  0028                     readFilteredVout@i_835:	
  2311                           ; 1 bytes @ 0x8
  2312                           
  2313  0028                     ___omul@multiplicand:	
  2314                           ; 1 bytes @ 0x8
  2315                           
  2316                           
  2317                           ; 8 bytes @ 0x8
  2318  0028                     	ds	1
  2319  0029                     readFilteredDutyPot@i:
  2320  0029                     readFilteredFreqPot@i:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0029                     readFilteredVout@i:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0029                     convertRawToMilliVolts@offsetted:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 2 bytes @ 0x9
  2331  0029                     	ds	2
  2332  002B                     convertRawToMilliVolts@returnValuedV:
  2333                           
  2334                           ; 2 bytes @ 0xB
  2335  002B                     	ds	1
  2336  002C                     runPotScaling@maxDuty:
  2337                           
  2338                           ; 2 bytes @ 0xC
  2339  002C                     	ds	2
  2340  002E                     runPotScaling@minDuty:
  2341                           
  2342                           ; 2 bytes @ 0xE
  2343  002E                     	ds	2
  2344  0030                     ??_runVoltageModeControl:
  2345                           
  2346                           ; 1 bytes @ 0x10
  2347  0030                     	ds	16
  2348  0040                     runVoltageModeControl@integralMult:
  2349                           
  2350                           ; 8 bytes @ 0x20
  2351  0040                     	ds	8
  2352  0048                     runVoltageModeControl@propMult:
  2353                           
  2354                           ; 8 bytes @ 0x28
  2355  0048                     	ds	8
  2356  0050                     runVoltageModeControl@newVoltage:
  2357                           
  2358                           ; 2 bytes @ 0x30
  2359  0050                     	ds	2
  2360  0052                     ??_controlRoutine:
  2361                           
  2362                           ; 1 bytes @ 0x32
  2363  0052                     	ds	6
  2364  0058                     controlRoutine@maxDuty:
  2365                           
  2366                           ; 2 bytes @ 0x38
  2367  0058                     	ds	2
  2368  005A                     controlRoutine@minDuty:
  2369                           
  2370                           ; 2 bytes @ 0x3A
  2371  005A                     	ds	2
  2372  005C                     controlRoutine@setDuty_unreg:
  2373                           
  2374                           ; 2 bytes @ 0x3C
  2375  005C                     	ds	2
  2376  005E                     ??_Tick490Hz:
  2377                           
  2378                           ; 1 bytes @ 0x3E
  2379  005E                     	ds	1
  2380                           
  2381                           	psect	maintext
  2382  0D48                     __pmaintext:	
  2383 ;;
  2384 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2385 ;;
  2386 ;; *************** function _main *****************
  2387 ;; Defined at:
  2388 ;;		line 107 in file "main.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  argc            2    9[BANK1 ] int 
  2391 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  2    9[BANK1 ] int 
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : B1F/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2403 ;;      Params:         0       0       4       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0
  2406 ;;      Totals:         0       0       4       0       0       0
  2407 ;;Total ram usage:        4 bytes
  2408 ;; Hardware stack levels required when called: 8
  2409 ;; This function calls:
  2410 ;;		_initialiseADCModule
  2411 ;;		_initialiseController
  2412 ;;		_initialiseCurrentSensors
  2413 ;;		_initialiseGPIO
  2414 ;;		_initialisePotentiometers
  2415 ;;		_readGPIO
  2416 ;;		_setupInternalOscillator
  2417 ;;		_setupPWM
  2418 ;;		_setupTimer0Interrupt
  2419 ;;		_transToCurrentModeControl
  2420 ;;		_transToInitialising
  2421 ;;		_transToPotControl
  2422 ;;		_transToVoltageModeControl
  2423 ;; This function is called by:
  2424 ;;		Startup code after reset
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428  0D48                     _main:	
  2429                           ;psect for function _main
  2430                           
  2431  0D48                     l2733:	
  2432                           ;incstack = 0
  2433                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2434                           
  2435                           
  2436                           ;main.c: 109:     transToInitialising();
  2437  0D48  318B  23B9  318D   	fcall	_transToInitialising
  2438  0D4B                     l2735:
  2439                           
  2440                           ;main.c: 110:     setupInternalOscillator(freq32M);
  2441  0D4B  300A               	movlw	10
  2442  0D4C  3184  24D1  318D   	fcall	_setupInternalOscillator
  2443  0D4F                     l2737:
  2444                           
  2445                           ;main.c: 111:     setupPWM();
  2446  0D4F  318C  2421  318D   	fcall	_setupPWM
  2447  0D52                     l2739:
  2448                           
  2449                           ;main.c: 112:     setupTimer0Interrupt();
  2450  0D52  318B  23D3  318D   	fcall	_setupTimer0Interrupt
  2451  0D55                     l2741:
  2452                           
  2453                           ;main.c: 113:     initialiseADCModule();
  2454  0D55  318B  23C0  318D   	fcall	_initialiseADCModule
  2455  0D58                     l2743:
  2456                           
  2457                           ;main.c: 114:     initialiseCurrentSensors();
  2458  0D58  318C  2479  318D   	fcall	_initialiseCurrentSensors
  2459  0D5B                     l2745:
  2460                           
  2461                           ;main.c: 115:     initialisePotentiometers();
  2462  0D5B  318B  23E4  318D   	fcall	_initialisePotentiometers
  2463  0D5E                     l2747:
  2464                           
  2465                           ;main.c: 116:     initialiseController();
  2466  0D5E  318C  243D  318D   	fcall	_initialiseController
  2467  0D61                     l2749:
  2468                           
  2469                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2470  0D61  0021               	movlb	1	; select bank1
  2471  0D62  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2472  0D63  300C               	movlw	12
  2473  0D64  3185  2596  318D   	fcall	_initialiseGPIO
  2474  0D67                     l2751:
  2475                           
  2476                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2477  0D67  0021               	movlb	1	; select bank1
  2478  0D68  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2479  0D69  300D               	movlw	13
  2480  0D6A  3185  2596  318D   	fcall	_initialiseGPIO
  2481  0D6D                     l2753:
  2482  0D6D                     l2755:	
  2483                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2484                           
  2485                           
  2486                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2487  0D6D  3008               	movlw	8
  2488  0D6E  318E  2602  318D   	fcall	_readGPIO
  2489  0D71  3A01               	xorlw	1
  2490  0D72  1903               	skipnz
  2491  0D73  2D75               	goto	u2591
  2492  0D74  2D76               	goto	u2590
  2493  0D75                     u2591:
  2494  0D75  2D7A               	goto	l2761
  2495  0D76                     u2590:
  2496  0D76                     l2757:
  2497  0D76  3187  27F9  318D   	fcall	_transToVoltageModeControl
  2498  0D79  2D7D               	goto	l120
  2499  0D7A                     l2761:
  2500  0D7A  318B  23BC  318D   	fcall	_transToPotControl
  2501  0D7D                     l120:	
  2502                           ;main.c: 129:     while(1){
  2503                           
  2504  0D7D  2D7D               	goto	l120
  2505  0D7E  3180  2886         	ljmp	start
  2506  0D80                     __end_of_main:
  2507                           
  2508                           	psect	text1
  2509  07F9                     __ptext1:	
  2510 ;; *************** function _transToVoltageModeControl *****************
  2511 ;; Defined at:
  2512 ;;		line 35 in file "StateMachine.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;		None
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2526 ;;      Params:         0       0       0       0       0       0
  2527 ;;      Locals:         0       0       0       0       0       0
  2528 ;;      Temps:          0       0       1       0       0       0
  2529 ;;      Totals:         0       0       1       0       0       0
  2530 ;;Total ram usage:        1 bytes
  2531 ;; Hardware stack levels used: 1
  2532 ;; Hardware stack levels required when called: 5
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540  07F9                     _transToVoltageModeControl:	
  2541                           ;psect for function _transToVoltageModeControl
  2542                           
  2543  07F9                     l2693:	
  2544                           ;incstack = 0
  2545                           ; Regs used in _transToVoltageModeControl: [wreg]
  2546                           
  2547                           
  2548                           ;StateMachine.c: 36:     currentState = voltageModeControl;
  2549  07F9  3002               	movlw	2
  2550  07FA  0021               	movlb	1	; select bank1
  2551  07FB  00D2               	movwf	??_transToVoltageModeControl^(0+128)
  2552  07FC  0852               	movf	??_transToVoltageModeControl^(0+128),w
  2553  07FD  0020               	movlb	0	; select bank0
  2554  07FE  00EC               	movwf	_currentState
  2555  07FF                     l566:
  2556  07FF  0008               	return
  2557  0800                     __end_of_transToVoltageModeControl:
  2558                           
  2559                           	psect	text2
  2560  0BBC                     __ptext2:	
  2561 ;; *************** function _transToPotControl *****************
  2562 ;; Defined at:
  2563 ;;		line 26 in file "StateMachine.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		None
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2577 ;;      Params:         0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0
  2580 ;;      Totals:         0       0       0       0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used: 1
  2583 ;; Hardware stack levels required when called: 5
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591  0BBC                     _transToPotControl:	
  2592                           ;psect for function _transToPotControl
  2593                           
  2594  0BBC                     l2697:	
  2595                           ;incstack = 0
  2596                           ; Regs used in _transToPotControl: []
  2597                           
  2598                           
  2599                           ;StateMachine.c: 27:     currentState = potControl;
  2600  0BBC  0020               	movlb	0	; select bank0
  2601  0BBD  01EC               	clrf	_currentState
  2602  0BBE  0AEC               	incf	_currentState,f
  2603  0BBF                     l563:
  2604  0BBF  0008               	return
  2605  0BC0                     __end_of_transToPotControl:
  2606                           
  2607                           	psect	text3
  2608  0BB9                     __ptext3:	
  2609 ;; *************** function _transToInitialising *****************
  2610 ;; Defined at:
  2611 ;;		line 18 in file "StateMachine.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		status,2
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2625 ;;      Params:         0       0       0       0       0       0
  2626 ;;      Locals:         0       0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0       0
  2628 ;;      Totals:         0       0       0       0       0       0
  2629 ;;Total ram usage:        0 bytes
  2630 ;; Hardware stack levels used: 1
  2631 ;; Hardware stack levels required when called: 5
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639  0BB9                     _transToInitialising:	
  2640                           ;psect for function _transToInitialising
  2641                           
  2642  0BB9                     l2535:	
  2643                           ;incstack = 0
  2644                           ; Regs used in _transToInitialising: [status,2]
  2645                           
  2646                           
  2647                           ;StateMachine.c: 19:     currentState = initialising;
  2648  0BB9  0020               	movlb	0	; select bank0
  2649  0BBA  01EC               	clrf	_currentState
  2650  0BBB                     l560:
  2651  0BBB  0008               	return
  2652  0BBC                     __end_of_transToInitialising:
  2653                           
  2654                           	psect	text4
  2655  0BCC                     __ptext4:	
  2656 ;; *************** function _transToCurrentModeControl *****************
  2657 ;; Defined at:
  2658 ;;		line 44 in file "StateMachine.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2672 ;;      Params:         0       0       0       0       0       0
  2673 ;;      Locals:         0       0       0       0       0       0
  2674 ;;      Temps:          0       0       1       0       0       0
  2675 ;;      Totals:         0       0       1       0       0       0
  2676 ;;Total ram usage:        1 bytes
  2677 ;; Hardware stack levels used: 1
  2678 ;; Hardware stack levels required when called: 5
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_main
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686  0BCC                     _transToCurrentModeControl:	
  2687                           ;psect for function _transToCurrentModeControl
  2688                           
  2689  0BCC                     l2695:	
  2690                           ;incstack = 0
  2691                           ; Regs used in _transToCurrentModeControl: [wreg]
  2692                           
  2693                           
  2694                           ;StateMachine.c: 45:     currentState = currentModeControl;
  2695  0BCC  3003               	movlw	3
  2696  0BCD  0021               	movlb	1	; select bank1
  2697  0BCE  00D2               	movwf	??_transToCurrentModeControl^(0+128)
  2698  0BCF  0852               	movf	??_transToCurrentModeControl^(0+128),w
  2699  0BD0  0020               	movlb	0	; select bank0
  2700  0BD1  00EC               	movwf	_currentState
  2701  0BD2                     l569:
  2702  0BD2  0008               	return
  2703  0BD3                     __end_of_transToCurrentModeControl:
  2704                           
  2705                           	psect	text5
  2706  0BD3                     __ptext5:	
  2707 ;; *************** function _setupTimer0Interrupt *****************
  2708 ;; Defined at:
  2709 ;;		line 17 in file "Timer0.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2723 ;;      Params:         0       0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0       0
  2726 ;;      Totals:         0       0       0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used: 1
  2729 ;; Hardware stack levels required when called: 5
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_main
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737  0BD3                     _setupTimer0Interrupt:	
  2738                           ;psect for function _setupTimer0Interrupt
  2739                           
  2740  0BD3                     l2639:	
  2741                           ;incstack = 0
  2742                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2743                           
  2744                           
  2745                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2746  0BD3  178B               	bsf	11,7	;volatile
  2747                           
  2748                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2749  0BD4  168B               	bsf	11,5	;volatile
  2750                           
  2751                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2752  0BD5  0021               	movlb	1	; select bank1
  2753  0BD6  1295               	bcf	21,5	;volatile
  2754                           
  2755                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2756  0BD7  1195               	bcf	21,3	;volatile
  2757  0BD8                     l2641:
  2758                           
  2759                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2760  0BD8  3005               	movlw	5
  2761  0BD9  0095               	movwf	21	;volatile
  2762  0BDA                     l201:
  2763  0BDA  0008               	return
  2764  0BDB                     __end_of_setupTimer0Interrupt:
  2765                           
  2766                           	psect	text6
  2767  0C21                     __ptext6:	
  2768 ;; *************** function _setupPWM *****************
  2769 ;; Defined at:
  2770 ;;		line 16 in file "PWM.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0, pclath, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2784 ;;      Params:         0       0       0       0       0       0
  2785 ;;      Locals:         0       0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0
  2787 ;;      Totals:         0       0       0       0       0       0
  2788 ;;Total ram usage:        0 bytes
  2789 ;; Hardware stack levels used: 1
  2790 ;; Hardware stack levels required when called: 6
  2791 ;; This function calls:
  2792 ;;		_initialiseGPIO
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798  0C21                     _setupPWM:	
  2799                           ;psect for function _setupPWM
  2800                           
  2801  0C21                     l2615:	
  2802                           ;incstack = 0
  2803                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2804                           
  2805                           
  2806                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2807  0C21  300C               	movlw	12
  2808  0C22  0025               	movlb	5	; select bank5
  2809  0C23  0093               	movwf	19	;volatile
  2810  0C24                     l2617:
  2811                           
  2812                           ;PWM.c: 20:     PR2 = 0;
  2813  0C24  0020               	movlb	0	; select bank0
  2814  0C25  019B               	clrf	27	;volatile
  2815  0C26                     l2619:
  2816                           
  2817                           ;PWM.c: 21:     CCPR1L = 0;
  2818  0C26  0025               	movlb	5	; select bank5
  2819  0C27  0191               	clrf	17	;volatile
  2820  0C28                     l2621:
  2821                           
  2822                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2823  0C28  0022               	movlb	2	; select bank2
  2824  0C29  151D               	bsf	29,2	;volatile
  2825  0C2A                     l2623:
  2826                           
  2827                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2828  0C2A  0025               	movlb	5	; select bank5
  2829  0C2B  1596               	bsf	22,3	;volatile
  2830  0C2C                     l2625:
  2831                           
  2832                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2833  0C2C  1016               	bcf	22,0	;volatile
  2834  0C2D                     l2627:
  2835                           
  2836                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2837  0C2D  30FC               	movlw	-4
  2838  0C2E  0020               	movlb	0	; select bank0
  2839  0C2F  059C               	andwf	28,f	;volatile
  2840  0C30                     l2629:
  2841                           
  2842                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2843  0C30  0021               	movlb	1	; select bank1
  2844  0C31  1091               	bcf	17,1	;volatile
  2845  0C32                     l2631:
  2846                           
  2847                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2848  0C32  0020               	movlb	0	; select bank0
  2849  0C33  151C               	bsf	28,2	;volatile
  2850  0C34                     l2633:
  2851                           
  2852                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2853  0C34  170B               	bsf	11,6	;volatile
  2854  0C35                     l2635:
  2855                           
  2856                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2857  0C35  0021               	movlb	1	; select bank1
  2858  0C36  1511               	bsf	17,2	;volatile
  2859  0C37                     l2637:
  2860                           
  2861                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2862  0C37  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2863  0C38  3006               	movlw	6
  2864  0C39  3185  2596  318C   	fcall	_initialiseGPIO
  2865  0C3C                     l174:
  2866  0C3C  0008               	return
  2867  0C3D                     __end_of_setupPWM:
  2868                           
  2869                           	psect	text7
  2870  04D1                     __ptext7:	
  2871 ;; *************** function _setupInternalOscillator *****************
  2872 ;; Defined at:
  2873 ;;		line 140 in file "main.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  selectedFreq    1    wreg     const enum E2846
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  selectedFreq    1    2[BANK1 ] const enum E2846
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2887 ;;      Params:         0       0       0       0       0       0
  2888 ;;      Locals:         0       0       1       0       0       0
  2889 ;;      Temps:          0       0       2       0       0       0
  2890 ;;      Totals:         0       0       3       0       0       0
  2891 ;;Total ram usage:        3 bytes
  2892 ;; Hardware stack levels used: 1
  2893 ;; Hardware stack levels required when called: 5
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_main
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901  04D1                     _setupInternalOscillator:	
  2902                           ;psect for function _setupInternalOscillator
  2903                           
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2907                           ;setupInternalOscillator@selectedFreq stored from wreg
  2908  04D1  0021               	movlb	1	; select bank1
  2909  04D2  00D4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2910  04D3                     l2537:
  2911                           
  2912                           ;main.c: 144:     switch(selectedFreq){
  2913  04D3  2D6A               	goto	l2607
  2914  04D4                     l2539:
  2915  04D4  3087               	movlw	-121
  2916  04D5  0599               	andwf	25,f	;volatile
  2917  04D6                     l2541:
  2918  04D6  1399               	bcf	25,7	;volatile
  2919  04D7                     l2543:
  2920  04D7  3000               	movlw	0
  2921  04D8  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2922  04D9  3000               	movlw	0
  2923  04DA  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2924  04DB  3079               	movlw	121
  2925  04DC  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2926  04DD  3018               	movlw	24
  2927  04DE  00A8               	movwf	_clockFrequency^(0+128)
  2928  04DF  2D95               	goto	l139
  2929  04E0                     l2545:
  2930  04E0  0819               	movf	25,w	;volatile
  2931  04E1  3987               	andlw	-121
  2932  04E2  3820               	iorlw	32
  2933  04E3  0099               	movwf	25	;volatile
  2934  04E4                     l2547:
  2935  04E4  1399               	bcf	25,7	;volatile
  2936  04E5                     l2549:
  2937  04E5  3000               	movlw	0
  2938  04E6  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2939  04E7  3000               	movlw	0
  2940  04E8  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2941  04E9  30F4               	movlw	244
  2942  04EA  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2943  04EB  3024               	movlw	36
  2944  04EC  00A8               	movwf	_clockFrequency^(0+128)
  2945  04ED  2D95               	goto	l139
  2946  04EE                     l2551:
  2947  04EE  0819               	movf	25,w	;volatile
  2948  04EF  3987               	andlw	-121
  2949  04F0  3828               	iorlw	40
  2950  04F1  0099               	movwf	25	;volatile
  2951  04F2                     l2553:
  2952  04F2  1399               	bcf	25,7	;volatile
  2953  04F3                     l2555:
  2954  04F3  3000               	movlw	0
  2955  04F4  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2956  04F5  3001               	movlw	1
  2957  04F6  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2958  04F7  30E8               	movlw	232
  2959  04F8  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2960  04F9  3048               	movlw	72
  2961  04FA  00A8               	movwf	_clockFrequency^(0+128)
  2962  04FB  2D95               	goto	l139
  2963  04FC                     l2557:
  2964  04FC  0819               	movf	25,w	;volatile
  2965  04FD  3987               	andlw	-121
  2966  04FE  3830               	iorlw	48
  2967  04FF  0099               	movwf	25	;volatile
  2968  0500                     l2559:
  2969  0500  1399               	bcf	25,7	;volatile
  2970  0501                     l2561:
  2971  0501  3000               	movlw	0
  2972  0502  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2973  0503  3003               	movlw	3
  2974  0504  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2975  0505  30D0               	movlw	208
  2976  0506  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2977  0507  3090               	movlw	144
  2978  0508  00A8               	movwf	_clockFrequency^(0+128)
  2979  0509  2D95               	goto	l139
  2980  050A                     l2563:
  2981  050A  0819               	movf	25,w	;volatile
  2982  050B  3987               	andlw	-121
  2983  050C  3838               	iorlw	56
  2984  050D  0099               	movwf	25	;volatile
  2985  050E                     l2565:
  2986  050E  1399               	bcf	25,7	;volatile
  2987  050F                     l2567:
  2988  050F  3000               	movlw	0
  2989  0510  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2990  0511  3007               	movlw	7
  2991  0512  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2992  0513  30A1               	movlw	161
  2993  0514  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2994  0515  3020               	movlw	32
  2995  0516  00A8               	movwf	_clockFrequency^(0+128)
  2996  0517  2D95               	goto	l139
  2997  0518                     l2569:
  2998  0518  0819               	movf	25,w	;volatile
  2999  0519  3987               	andlw	-121
  3000  051A  3858               	iorlw	88
  3001  051B  0099               	movwf	25	;volatile
  3002  051C                     l2571:
  3003  051C  1399               	bcf	25,7	;volatile
  3004  051D                     l2573:
  3005  051D  3000               	movlw	0
  3006  051E  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3007  051F  300F               	movlw	15
  3008  0520  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3009  0521  3042               	movlw	66
  3010  0522  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3011  0523  3040               	movlw	64
  3012  0524  00A8               	movwf	_clockFrequency^(0+128)
  3013  0525  2D95               	goto	l139
  3014  0526                     l2575:
  3015  0526  0819               	movf	25,w	;volatile
  3016  0527  3987               	andlw	-121
  3017  0528  3860               	iorlw	96
  3018  0529  0099               	movwf	25	;volatile
  3019  052A                     l2577:
  3020  052A  1399               	bcf	25,7	;volatile
  3021  052B                     l2579:
  3022  052B  3000               	movlw	0
  3023  052C  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3024  052D  301E               	movlw	30
  3025  052E  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3026  052F  3084               	movlw	132
  3027  0530  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3028  0531  3080               	movlw	128
  3029  0532  00A8               	movwf	_clockFrequency^(0+128)
  3030  0533  2D95               	goto	l139
  3031  0534                     l2581:
  3032  0534  0819               	movf	25,w	;volatile
  3033  0535  3987               	andlw	-121
  3034  0536  3868               	iorlw	104
  3035  0537  0099               	movwf	25	;volatile
  3036  0538                     l2583:
  3037  0538  1399               	bcf	25,7	;volatile
  3038  0539                     l2585:
  3039  0539  3000               	movlw	0
  3040  053A  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3041  053B  303D               	movlw	61
  3042  053C  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3043  053D  3009               	movlw	9
  3044  053E  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3045  053F  3000               	movlw	0
  3046  0540  00A8               	movwf	_clockFrequency^(0+128)
  3047  0541  2D95               	goto	l139
  3048  0542                     l2587:
  3049  0542  0819               	movf	25,w	;volatile
  3050  0543  3987               	andlw	-121
  3051  0544  3870               	iorlw	112
  3052  0545  0099               	movwf	25	;volatile
  3053  0546                     l2589:
  3054  0546  1399               	bcf	25,7	;volatile
  3055  0547                     l2591:
  3056  0547  3000               	movlw	0
  3057  0548  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3058  0549  307A               	movlw	122
  3059  054A  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3060  054B  3012               	movlw	18
  3061  054C  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3062  054D  3000               	movlw	0
  3063  054E  00A8               	movwf	_clockFrequency^(0+128)
  3064  054F  2D95               	goto	l139
  3065  0550                     l2593:
  3066  0550  3078               	movlw	120
  3067  0551  0499               	iorwf	25,f	;volatile
  3068  0552                     l2595:
  3069  0552  1399               	bcf	25,7	;volatile
  3070  0553                     l2597:
  3071  0553  3000               	movlw	0
  3072  0554  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3073  0555  30F4               	movlw	244
  3074  0556  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3075  0557  3024               	movlw	36
  3076  0558  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3077  0559  3000               	movlw	0
  3078  055A  00A8               	movwf	_clockFrequency^(0+128)
  3079  055B  2D95               	goto	l139
  3080  055C                     l2599:
  3081  055C  0819               	movf	25,w	;volatile
  3082  055D  3987               	andlw	-121
  3083  055E  3870               	iorlw	112
  3084  055F  0099               	movwf	25	;volatile
  3085  0560                     l2601:
  3086  0560  1799               	bsf	25,7	;volatile
  3087  0561                     l2603:
  3088  0561  3001               	movlw	1
  3089  0562  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3090  0563  30E8               	movlw	232
  3091  0564  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3092  0565  3048               	movlw	72
  3093  0566  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3094  0567  3000               	movlw	0
  3095  0568  00A8               	movwf	_clockFrequency^(0+128)
  3096  0569  2D95               	goto	l139
  3097  056A                     l2607:
  3098  056A  0854               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3099  056B  00D2               	movwf	??_setupInternalOscillator^(0+128)
  3100  056C  01D3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3101                           
  3102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3103                           ; Switch size 1, requested type "simple"
  3104                           ; Number of cases is 1, Range of values is 0 to 0
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte            4     3 (average)
  3108                           ; direct_byte            8     6 (fixed)
  3109                           ; jumptable            260     6 (fixed)
  3110                           ;	Chosen strategy is simple_byte
  3111  056D  0853               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3112  056E  3A00               	xorlw	0	; case 0
  3113  056F  1903               	skipnz
  3114  0570  2D72               	goto	l2827
  3115  0571  2D95               	goto	l139
  3116  0572                     l2827:
  3117                           
  3118                           ; Switch size 1, requested type "simple"
  3119                           ; Number of cases is 11, Range of values is 0 to 10
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; direct_byte           28     6 (fixed)
  3123                           ; simple_byte           34    18 (average)
  3124                           ; jumptable            260     6 (fixed)
  3125                           ;	Chosen strategy is simple_byte
  3126  0572  0852               	movf	??_setupInternalOscillator^(0+128),w
  3127  0573  3A00               	xorlw	0	; case 0
  3128  0574  1903               	skipnz
  3129  0575  2CD4               	goto	l2539
  3130  0576  3A01               	xorlw	1	; case 1
  3131  0577  1903               	skipnz
  3132  0578  2CE0               	goto	l2545
  3133  0579  3A03               	xorlw	3	; case 2
  3134  057A  1903               	skipnz
  3135  057B  2CEE               	goto	l2551
  3136  057C  3A01               	xorlw	1	; case 3
  3137  057D  1903               	skipnz
  3138  057E  2CFC               	goto	l2557
  3139  057F  3A07               	xorlw	7	; case 4
  3140  0580  1903               	skipnz
  3141  0581  2D0A               	goto	l2563
  3142  0582  3A01               	xorlw	1	; case 5
  3143  0583  1903               	skipnz
  3144  0584  2D18               	goto	l2569
  3145  0585  3A03               	xorlw	3	; case 6
  3146  0586  1903               	skipnz
  3147  0587  2D26               	goto	l2575
  3148  0588  3A01               	xorlw	1	; case 7
  3149  0589  1903               	skipnz
  3150  058A  2D34               	goto	l2581
  3151  058B  3A0F               	xorlw	15	; case 8
  3152  058C  1903               	skipnz
  3153  058D  2D42               	goto	l2587
  3154  058E  3A01               	xorlw	1	; case 9
  3155  058F  1903               	skipnz
  3156  0590  2D50               	goto	l2593
  3157  0591  3A03               	xorlw	3	; case 10
  3158  0592  1903               	skipnz
  3159  0593  2D5C               	goto	l2599
  3160  0594  2D95               	goto	l139
  3161  0595                     l139:
  3162  0595  0008               	return
  3163  0596                     __end_of_setupInternalOscillator:
  3164                           
  3165                           	psect	text8
  3166  0E02                     __ptext8:	
  3167 ;; *************** function _readGPIO *****************
  3168 ;; Defined at:
  3169 ;;		line 79 in file "GPIO.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  gpioNumber      1    wreg     const enum E2798
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3174 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3175 ;;  readB           1    4[BANK1 ] unsigned char 
  3176 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3177 ;;  readA           1    2[BANK1 ] unsigned char 
  3178 ;;  portType        1    7[BANK1 ] unsigned char 
  3179 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      _Bool 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3189 ;;      Params:         0       0       0       0       0       0
  3190 ;;      Locals:         0       0       7       0       0       0
  3191 ;;      Temps:          0       0       2       0       0       0
  3192 ;;      Totals:         0       0       9       0       0       0
  3193 ;;Total ram usage:        9 bytes
  3194 ;; Hardware stack levels used: 1
  3195 ;; Hardware stack levels required when called: 5
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203  0E02                     _readGPIO:	
  3204                           ;psect for function _readGPIO
  3205                           
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3209                           ;readGPIO@gpioNumber stored from wreg
  3210  0E02  0021               	movlb	1	; select bank1
  3211  0E03  00DA               	movwf	readGPIO@gpioNumber^(0+128)
  3212  0E04                     l2653:
  3213                           
  3214                           ;GPIO.c: 81:     uint8_t portType = 0;
  3215  0E04  01D9               	clrf	readGPIO@portType^(0+128)
  3216  0E05                     l2655:
  3217                           
  3218                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3219  0E05  3008               	movlw	8
  3220  0E06  025A               	subwf	readGPIO@gpioNumber^(0+128),w
  3221  0E07  1C03               	skipc
  3222  0E08  2E0A               	goto	u2461
  3223  0E09  2E0B               	goto	u2460
  3224  0E0A                     u2461:
  3225  0E0A  2E13               	goto	l2661
  3226  0E0B                     u2460:
  3227  0E0B                     l2657:
  3228                           
  3229                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3230  0E0B  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3231  0E0C  3EF8               	addlw	248
  3232  0E0D  00D2               	movwf	??_readGPIO^(0+128)
  3233  0E0E  0852               	movf	??_readGPIO^(0+128),w
  3234  0E0F  00D8               	movwf	readGPIO@portNumber^(0+128)
  3235  0E10                     l2659:
  3236                           
  3237                           ;GPIO.c: 84:         portType = 1;
  3238  0E10  01D9               	clrf	readGPIO@portType^(0+128)
  3239  0E11  0AD9               	incf	readGPIO@portType^(0+128),f
  3240                           
  3241                           ;GPIO.c: 85:     }
  3242  0E12  2E18               	goto	l2665
  3243  0E13                     l2661:
  3244                           
  3245                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3246  0E13  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3247  0E14  00D2               	movwf	??_readGPIO^(0+128)
  3248  0E15  0852               	movf	??_readGPIO^(0+128),w
  3249  0E16  00D8               	movwf	readGPIO@portNumber^(0+128)
  3250  0E17                     l2663:
  3251                           
  3252                           ;GPIO.c: 88:         portType = 0;
  3253  0E17  01D9               	clrf	readGPIO@portType^(0+128)
  3254  0E18                     l2665:
  3255                           
  3256                           ;GPIO.c: 91:     if(portType == 0){
  3257  0E18  0859               	movf	readGPIO@portType^(0+128),w
  3258  0E19  1D03               	btfss	3,2
  3259  0E1A  2E1C               	goto	u2471
  3260  0E1B  2E1D               	goto	u2470
  3261  0E1C                     u2471:
  3262  0E1C  2E31               	goto	l2677
  3263  0E1D                     u2470:
  3264  0E1D                     l2667:
  3265                           
  3266                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3267  0E1D  0020               	movlb	0	; select bank0
  3268  0E1E  080C               	movf	12,w	;volatile
  3269  0E1F  0021               	movlb	1	; select bank1
  3270  0E20  00D2               	movwf	??_readGPIO^(0+128)
  3271  0E21  0852               	movf	??_readGPIO^(0+128),w
  3272  0E22  00D4               	movwf	readGPIO@readA^(0+128)
  3273  0E23                     l2669:
  3274                           
  3275                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3276  0E23  0854               	movf	readGPIO@readA^(0+128),w
  3277  0E24  00D2               	movwf	??_readGPIO^(0+128)
  3278  0E25  0A58               	incf	readGPIO@portNumber^(0+128),w
  3279  0E26  2E28               	goto	u2484
  3280  0E27                     u2485:
  3281  0E27  36D2               	lsrf	??_readGPIO^(0+128),f
  3282  0E28                     u2484:
  3283  0E28  0B89               	decfsz	9,f
  3284  0E29  2E27               	goto	u2485
  3285  0E2A  0852               	movf	??_readGPIO^(0+128),w
  3286  0E2B  3901               	andlw	1
  3287  0E2C  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3288  0E2D  0853               	movf	(??_readGPIO+1)^(0+128),w
  3289  0E2E  00D5               	movwf	readGPIO@returnValueA^(0+128)
  3290  0E2F                     l2671:
  3291                           
  3292                           ;GPIO.c: 94:         return returnValueA;
  3293  0E2F  0855               	movf	readGPIO@returnValueA^(0+128),w
  3294  0E30  2E4B               	goto	l326
  3295  0E31                     l2677:
  3296  0E31  0359               	decf	readGPIO@portType^(0+128),w
  3297  0E32  1D03               	btfss	3,2
  3298  0E33  2E35               	goto	u2491
  3299  0E34  2E36               	goto	u2490
  3300  0E35                     u2491:
  3301  0E35  2E4A               	goto	l2689
  3302  0E36                     u2490:
  3303  0E36                     l2679:
  3304                           
  3305                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3306  0E36  0020               	movlb	0	; select bank0
  3307  0E37  080D               	movf	13,w	;volatile
  3308  0E38  0021               	movlb	1	; select bank1
  3309  0E39  00D2               	movwf	??_readGPIO^(0+128)
  3310  0E3A  0852               	movf	??_readGPIO^(0+128),w
  3311  0E3B  00D6               	movwf	readGPIO@readB^(0+128)
  3312  0E3C                     l2681:
  3313                           
  3314                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3315  0E3C  0856               	movf	readGPIO@readB^(0+128),w
  3316  0E3D  00D2               	movwf	??_readGPIO^(0+128)
  3317  0E3E  0A58               	incf	readGPIO@portNumber^(0+128),w
  3318  0E3F  2E41               	goto	u2504
  3319  0E40                     u2505:
  3320  0E40  36D2               	lsrf	??_readGPIO^(0+128),f
  3321  0E41                     u2504:
  3322  0E41  0B89               	decfsz	9,f
  3323  0E42  2E40               	goto	u2505
  3324  0E43  0852               	movf	??_readGPIO^(0+128),w
  3325  0E44  3901               	andlw	1
  3326  0E45  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3327  0E46  0853               	movf	(??_readGPIO+1)^(0+128),w
  3328  0E47  00D7               	movwf	readGPIO@returnValueB^(0+128)
  3329  0E48                     l2683:
  3330                           
  3331                           ;GPIO.c: 99:         return returnValueB;
  3332  0E48  0857               	movf	readGPIO@returnValueB^(0+128),w
  3333  0E49  2E4B               	goto	l326
  3334  0E4A                     l2689:
  3335  0E4A  3000               	movlw	0
  3336  0E4B                     l326:
  3337  0E4B  0008               	return
  3338  0E4C                     __end_of_readGPIO:
  3339                           
  3340                           	psect	text9
  3341  0BE4                     __ptext9:	
  3342 ;; *************** function _initialisePotentiometers *****************
  3343 ;; Defined at:
  3344 ;;		line 15 in file "Potentiometer.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;		None
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;		None
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0, pclath, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3358 ;;      Params:         0       0       0       0       0       0
  3359 ;;      Locals:         0       0       0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0       0
  3361 ;;      Totals:         0       0       0       0       0       0
  3362 ;;Total ram usage:        0 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 6
  3365 ;; This function calls:
  3366 ;;		_initialiseADCPin
  3367 ;; This function is called by:
  3368 ;;		_main
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372  0BE4                     _initialisePotentiometers:	
  3373                           ;psect for function _initialisePotentiometers
  3374                           
  3375  0BE4                     l2647:	
  3376                           ;incstack = 0
  3377                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3378                           
  3379                           
  3380                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3381  0BE4  3009               	movlw	9
  3382  0BE5  3186  260C  318B   	fcall	_initialiseADCPin
  3383                           
  3384                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3385  0BE8  300A               	movlw	10
  3386  0BE9  3186  260C  318B   	fcall	_initialiseADCPin
  3387  0BEC                     l358:
  3388  0BEC  0008               	return
  3389  0BED                     __end_of_initialisePotentiometers:
  3390                           
  3391                           	psect	text10
  3392  0C79                     __ptext10:	
  3393 ;; *************** function _initialiseCurrentSensors *****************
  3394 ;; Defined at:
  3395 ;;		line 18 in file "CurrentSensor.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, pclath, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3409 ;;      Params:         0       0       0       0       0       0
  3410 ;;      Locals:         0       0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0
  3412 ;;      Totals:         0       0       0       0       0       0
  3413 ;;Total ram usage:        0 bytes
  3414 ;; Hardware stack levels used: 1
  3415 ;; Hardware stack levels required when called: 7
  3416 ;; This function calls:
  3417 ;;		_currentTripReset
  3418 ;;		_initialiseADCPin
  3419 ;;		_initialiseGPIO
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425  0C79                     _initialiseCurrentSensors:	
  3426                           ;psect for function _initialiseCurrentSensors
  3427                           
  3428  0C79                     l2645:	
  3429                           ;incstack = 0
  3430                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3431                           
  3432                           
  3433                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3434  0C79  0021               	movlb	1	; select bank1
  3435  0C7A  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3436  0C7B  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3437  0C7C  3003               	movlw	3
  3438  0C7D  3185  2596  318C   	fcall	_initialiseGPIO
  3439                           
  3440                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3441  0C80  0021               	movlb	1	; select bank1
  3442  0C81  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3443  0C82  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3444  0C83  3001               	movlw	1
  3445  0C84  3185  2596  318C   	fcall	_initialiseGPIO
  3446                           
  3447                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3448  0C87  3000               	movlw	0
  3449  0C88  3186  260C  318C   	fcall	_initialiseADCPin
  3450                           
  3451                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3452  0C8B  3002               	movlw	2
  3453  0C8C  3186  260C  318C   	fcall	_initialiseADCPin
  3454                           
  3455                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3456  0C8F  0021               	movlb	1	; select bank1
  3457  0C90  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3458  0C91  300B               	movlw	11
  3459  0C92  3185  2596  318C   	fcall	_initialiseGPIO
  3460                           
  3461                           ;CurrentSensor.c: 24:     currentTripReset();
  3462  0C95  318B  23F9  318C   	fcall	_currentTripReset
  3463  0C98                     l512:
  3464  0C98  0008               	return
  3465  0C99                     __end_of_initialiseCurrentSensors:
  3466                           
  3467                           	psect	text11
  3468  0BF9                     __ptext11:	
  3469 ;; *************** function _currentTripReset *****************
  3470 ;; Defined at:
  3471 ;;		line 71 in file "CurrentSensor.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0, pclath, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3485 ;;      Params:         0       0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0
  3488 ;;      Totals:         0       0       0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used: 1
  3491 ;; Hardware stack levels required when called: 6
  3492 ;; This function calls:
  3493 ;;		_writeGPIO
  3494 ;; This function is called by:
  3495 ;;		_initialiseCurrentSensors
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499  0BF9                     _currentTripReset:	
  3500                           ;psect for function _currentTripReset
  3501                           
  3502  0BF9                     l2279:	
  3503                           ;incstack = 0
  3504                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3505                           
  3506                           
  3507                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3508  0BF9  0021               	movlb	1	; select bank1
  3509  0BFA  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3510  0BFB  300B               	movlw	11
  3511  0BFC  3186  2672  318B   	fcall	_writeGPIO
  3512  0BFF                     l2281:
  3513                           
  3514                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3515                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3516  0BFF  0021               	movlb	1	; select bank1
  3517  0C00  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3518  0C01  0AD2               	incf	writeGPIO@writeValue^(0+128),f
  3519  0C02  300B               	movlw	11
  3520  0C03  3186  2672  318B   	fcall	_writeGPIO
  3521  0C06                     l534:
  3522  0C06  0008               	return
  3523  0C07                     __end_of_currentTripReset:
  3524                           
  3525                           	psect	text12
  3526  0672                     __ptext12:	
  3527 ;; *************** function _writeGPIO *****************
  3528 ;; Defined at:
  3529 ;;		line 52 in file "GPIO.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;  gpioNumber      1    wreg     const enum E2798
  3532 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3535 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3536 ;;  portType        1    3[BANK1 ] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3546 ;;      Params:         0       0       1       0       0       0
  3547 ;;      Locals:         0       0       3       0       0       0
  3548 ;;      Temps:          0       0       2       0       0       0
  3549 ;;      Totals:         0       0       6       0       0       0
  3550 ;;Total ram usage:        6 bytes
  3551 ;; Hardware stack levels used: 1
  3552 ;; Hardware stack levels required when called: 5
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_currentTripReset
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560  0672                     _writeGPIO:	
  3561                           ;psect for function _writeGPIO
  3562                           
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3566                           ;writeGPIO@gpioNumber stored from wreg
  3567  0672  0021               	movlb	1	; select bank1
  3568  0673  00D6               	movwf	writeGPIO@gpioNumber^(0+128)
  3569  0674                     l2027:
  3570                           
  3571                           ;GPIO.c: 54:     uint8_t portType = 0;
  3572  0674  01D5               	clrf	writeGPIO@portType^(0+128)
  3573  0675                     l2029:
  3574                           
  3575                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3576  0675  3008               	movlw	8
  3577  0676  0256               	subwf	writeGPIO@gpioNumber^(0+128),w
  3578  0677  1C03               	skipc
  3579  0678  2E7A               	goto	u1361
  3580  0679  2E7B               	goto	u1360
  3581  067A                     u1361:
  3582  067A  2E83               	goto	l2035
  3583  067B                     u1360:
  3584  067B                     l2031:
  3585                           
  3586                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3587  067B  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3588  067C  3EF8               	addlw	248
  3589  067D  00D3               	movwf	??_writeGPIO^(0+128)
  3590  067E  0853               	movf	??_writeGPIO^(0+128),w
  3591  067F  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3592  0680                     l2033:
  3593                           
  3594                           ;GPIO.c: 57:         portType = 1;
  3595  0680  01D5               	clrf	writeGPIO@portType^(0+128)
  3596  0681  0AD5               	incf	writeGPIO@portType^(0+128),f
  3597                           
  3598                           ;GPIO.c: 58:     }
  3599  0682  2E88               	goto	l2039
  3600  0683                     l2035:
  3601                           
  3602                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3603  0683  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3604  0684  00D3               	movwf	??_writeGPIO^(0+128)
  3605  0685  0853               	movf	??_writeGPIO^(0+128),w
  3606  0686  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3607  0687                     l2037:
  3608                           
  3609                           ;GPIO.c: 61:         portType = 0;
  3610  0687  01D5               	clrf	writeGPIO@portType^(0+128)
  3611  0688                     l2039:
  3612                           
  3613                           ;GPIO.c: 64:     if(portType == 0){
  3614  0688  0855               	movf	writeGPIO@portType^(0+128),w
  3615  0689  1D03               	btfss	3,2
  3616  068A  2E8C               	goto	u1371
  3617  068B  2E8D               	goto	u1370
  3618  068C                     u1371:
  3619  068C  2EAD               	goto	l2047
  3620  068D                     u1370:
  3621  068D                     l2041:
  3622                           
  3623                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3624  068D  0852               	movf	writeGPIO@writeValue^(0+128),w
  3625  068E  1903               	btfsc	3,2
  3626  068F  2E91               	goto	u1381
  3627  0690  2E92               	goto	u1380
  3628  0691                     u1381:
  3629  0691  2E9F               	goto	l2045
  3630  0692                     u1380:
  3631  0692                     l2043:
  3632  0692  3001               	movlw	1
  3633  0693  00D3               	movwf	??_writeGPIO^(0+128)
  3634  0694  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3635  0695  2E97               	goto	u1394
  3636  0696                     u1395:
  3637  0696  35D3               	lslf	??_writeGPIO^(0+128),f
  3638  0697                     u1394:
  3639  0697  0B89               	decfsz	9,f
  3640  0698  2E96               	goto	u1395
  3641  0699  0853               	movf	??_writeGPIO^(0+128),w
  3642  069A  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3643  069B  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3644  069C  0022               	movlb	2	; select bank2
  3645  069D  048C               	iorwf	12,f	;volatile
  3646  069E  2ED1               	goto	l320
  3647  069F                     l2045:
  3648  069F  3001               	movlw	1
  3649  06A0  00D3               	movwf	??_writeGPIO^(0+128)
  3650  06A1  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3651  06A2  2EA4               	goto	u1404
  3652  06A3                     u1405:
  3653  06A3  35D3               	lslf	??_writeGPIO^(0+128),f
  3654  06A4                     u1404:
  3655  06A4  0B89               	decfsz	9,f
  3656  06A5  2EA3               	goto	u1405
  3657  06A6  0853               	movf	??_writeGPIO^(0+128),w
  3658  06A7  3AFF               	xorlw	255
  3659  06A8  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3660  06A9  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3661  06AA  0022               	movlb	2	; select bank2
  3662  06AB  058C               	andwf	12,f	;volatile
  3663  06AC  2ED1               	goto	l320
  3664  06AD                     l2047:
  3665  06AD  0355               	decf	writeGPIO@portType^(0+128),w
  3666  06AE  1D03               	btfss	3,2
  3667  06AF  2EB1               	goto	u1411
  3668  06B0  2EB2               	goto	u1410
  3669  06B1                     u1411:
  3670  06B1  2ED1               	goto	l320
  3671  06B2                     u1410:
  3672  06B2                     l2049:
  3673                           
  3674                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3675  06B2  0852               	movf	writeGPIO@writeValue^(0+128),w
  3676  06B3  1903               	btfsc	3,2
  3677  06B4  2EB6               	goto	u1421
  3678  06B5  2EB7               	goto	u1420
  3679  06B6                     u1421:
  3680  06B6  2EC4               	goto	l2053
  3681  06B7                     u1420:
  3682  06B7                     l2051:
  3683  06B7  3001               	movlw	1
  3684  06B8  00D3               	movwf	??_writeGPIO^(0+128)
  3685  06B9  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3686  06BA  2EBC               	goto	u1434
  3687  06BB                     u1435:
  3688  06BB  35D3               	lslf	??_writeGPIO^(0+128),f
  3689  06BC                     u1434:
  3690  06BC  0B89               	decfsz	9,f
  3691  06BD  2EBB               	goto	u1435
  3692  06BE  0853               	movf	??_writeGPIO^(0+128),w
  3693  06BF  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3694  06C0  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3695  06C1  0022               	movlb	2	; select bank2
  3696  06C2  048D               	iorwf	13,f	;volatile
  3697  06C3  2ED1               	goto	l320
  3698  06C4                     l2053:
  3699  06C4  3001               	movlw	1
  3700  06C5  00D3               	movwf	??_writeGPIO^(0+128)
  3701  06C6  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3702  06C7  2EC9               	goto	u1444
  3703  06C8                     u1445:
  3704  06C8  35D3               	lslf	??_writeGPIO^(0+128),f
  3705  06C9                     u1444:
  3706  06C9  0B89               	decfsz	9,f
  3707  06CA  2EC8               	goto	u1445
  3708  06CB  0853               	movf	??_writeGPIO^(0+128),w
  3709  06CC  3AFF               	xorlw	255
  3710  06CD  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3711  06CE  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3712  06CF  0022               	movlb	2	; select bank2
  3713  06D0  058D               	andwf	13,f	;volatile
  3714  06D1                     l320:
  3715  06D1  0008               	return
  3716  06D2                     __end_of_writeGPIO:
  3717                           
  3718                           	psect	text13
  3719  0C3D                     __ptext13:	
  3720 ;; *************** function _initialiseController *****************
  3721 ;; Defined at:
  3722 ;;		line 28 in file "Controller.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3736 ;;      Params:         0       0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; Hardware stack levels required when called: 6
  3743 ;; This function calls:
  3744 ;;		_initialiseADCPin
  3745 ;;		_initialiseGPIO
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751  0C3D                     _initialiseController:	
  3752                           ;psect for function _initialiseController
  3753                           
  3754  0C3D                     l2649:	
  3755                           ;incstack = 0
  3756                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3757                           
  3758                           
  3759                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3760  0C3D  0021               	movlb	1	; select bank1
  3761  0C3E  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3762  0C3F  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3763  0C40  3004               	movlw	4
  3764  0C41  3185  2596  318C   	fcall	_initialiseGPIO
  3765                           
  3766                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3767  0C44  3004               	movlw	4
  3768  0C45  3186  260C  318C   	fcall	_initialiseADCPin
  3769  0C48                     l2651:
  3770                           
  3771                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (7u + 16u)
      +                          );
  3772  0C48  3000               	movlw	0
  3773  0C49  0021               	movlb	1	; select bank1
  3774  0C4A  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3775  0C4B  3000               	movlw	0
  3776  0C4C  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3777  0C4D  3000               	movlw	0
  3778  0C4E  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3779  0C4F  3001               	movlw	1
  3780  0C50  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3781  0C51  3000               	movlw	0
  3782  0C52  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3783  0C53  3000               	movlw	0
  3784  0C54  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3785  0C55  3000               	movlw	0
  3786  0C56  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3787  0C57  3000               	movlw	0
  3788  0C58  00A0               	movwf	_integratorScaledLimit^(0+128)
  3789  0C59                     l430:
  3790  0C59  0008               	return
  3791  0C5A                     __end_of_initialiseController:
  3792                           
  3793                           	psect	text14
  3794  0596                     __ptext14:	
  3795 ;; *************** function _initialiseGPIO *****************
  3796 ;; Defined at:
  3797 ;;		line 18 in file "GPIO.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  gpioNumber      1    wreg     const enum E2798
  3800 ;;  direction       1    0[BANK1 ] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3803 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3804 ;;  portType        1    3[BANK1 ] unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      void 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3814 ;;      Params:         0       0       1       0       0       0
  3815 ;;      Locals:         0       0       3       0       0       0
  3816 ;;      Temps:          0       0       2       0       0       0
  3817 ;;      Totals:         0       0       6       0       0       0
  3818 ;;Total ram usage:        6 bytes
  3819 ;; Hardware stack levels used: 1
  3820 ;; Hardware stack levels required when called: 5
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_main
  3825 ;;		_setupPWM
  3826 ;;		_initialiseController
  3827 ;;		_initialiseCurrentSensors
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831  0596                     _initialiseGPIO:	
  3832                           ;psect for function _initialiseGPIO
  3833                           
  3834                           
  3835                           ;incstack = 0
  3836                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3837                           ;initialiseGPIO@gpioNumber stored from wreg
  3838  0596  0021               	movlb	1	; select bank1
  3839  0597  00D6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3840  0598                     l2147:
  3841                           
  3842                           ;GPIO.c: 20:     uint8_t portType = 0;
  3843  0598  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3844  0599                     l2149:
  3845                           
  3846                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3847  0599  3008               	movlw	8
  3848  059A  0256               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3849  059B  1C03               	skipc
  3850  059C  2D9E               	goto	u1641
  3851  059D  2D9F               	goto	u1640
  3852  059E                     u1641:
  3853  059E  2DA7               	goto	l2155
  3854  059F                     u1640:
  3855  059F                     l2151:
  3856                           
  3857                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3858  059F  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3859  05A0  3EF8               	addlw	248
  3860  05A1  00D3               	movwf	??_initialiseGPIO^(0+128)
  3861  05A2  0853               	movf	??_initialiseGPIO^(0+128),w
  3862  05A3  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3863  05A4                     l2153:
  3864                           
  3865                           ;GPIO.c: 23:         portType = 1;
  3866  05A4  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3867  05A5  0AD5               	incf	initialiseGPIO@portType^(0+128),f
  3868                           
  3869                           ;GPIO.c: 24:     }
  3870  05A6  2DAC               	goto	l2159
  3871  05A7                     l2155:
  3872                           
  3873                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3874  05A7  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3875  05A8  00D3               	movwf	??_initialiseGPIO^(0+128)
  3876  05A9  0853               	movf	??_initialiseGPIO^(0+128),w
  3877  05AA  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3878  05AB                     l2157:
  3879                           
  3880                           ;GPIO.c: 27:         portType = 0;
  3881  05AB  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3882  05AC                     l2159:
  3883                           
  3884                           ;GPIO.c: 30:     if(portType == 0){
  3885  05AC  0855               	movf	initialiseGPIO@portType^(0+128),w
  3886  05AD  1D03               	btfss	3,2
  3887  05AE  2DB0               	goto	u1651
  3888  05AF  2DB1               	goto	u1650
  3889  05B0                     u1651:
  3890  05B0  2DDC               	goto	l2167
  3891  05B1                     u1650:
  3892  05B1                     l2161:
  3893                           
  3894                           ;GPIO.c: 31:         if(direction){
  3895  05B1  0852               	movf	initialiseGPIO@direction^(0+128),w
  3896  05B2  1903               	btfsc	3,2
  3897  05B3  2DB5               	goto	u1661
  3898  05B4  2DB6               	goto	u1660
  3899  05B5                     u1661:
  3900  05B5  2DCF               	goto	l2165
  3901  05B6                     u1660:
  3902  05B6                     l2163:
  3903                           
  3904                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3905  05B6  3001               	movlw	1
  3906  05B7  00D3               	movwf	??_initialiseGPIO^(0+128)
  3907  05B8  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3908  05B9  2DBB               	goto	u1674
  3909  05BA                     u1675:
  3910  05BA  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3911  05BB                     u1674:
  3912  05BB  0B89               	decfsz	9,f
  3913  05BC  2DBA               	goto	u1675
  3914  05BD  0853               	movf	??_initialiseGPIO^(0+128),w
  3915  05BE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3916  05BF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3917  05C0  048C               	iorwf	12,f	;volatile
  3918                           
  3919                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3920  05C1  3001               	movlw	1
  3921  05C2  00D3               	movwf	??_initialiseGPIO^(0+128)
  3922  05C3  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3923  05C4  2DC6               	goto	u1684
  3924  05C5                     u1685:
  3925  05C5  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3926  05C6                     u1684:
  3927  05C6  0B89               	decfsz	9,f
  3928  05C7  2DC5               	goto	u1685
  3929  05C8  0853               	movf	??_initialiseGPIO^(0+128),w
  3930  05C9  3AFF               	xorlw	255
  3931  05CA  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3932  05CB  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3933  05CC  0023               	movlb	3	; select bank3
  3934  05CD  058C               	andwf	12,f	;volatile
  3935                           
  3936                           ;GPIO.c: 34:         }
  3937  05CE  2E0B               	goto	l306
  3938  05CF                     l2165:
  3939  05CF  3001               	movlw	1
  3940  05D0  00D3               	movwf	??_initialiseGPIO^(0+128)
  3941  05D1  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3942  05D2  2DD4               	goto	u1694
  3943  05D3                     u1695:
  3944  05D3  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3945  05D4                     u1694:
  3946  05D4  0B89               	decfsz	9,f
  3947  05D5  2DD3               	goto	u1695
  3948  05D6  0853               	movf	??_initialiseGPIO^(0+128),w
  3949  05D7  3AFF               	xorlw	255
  3950  05D8  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3951  05D9  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3952  05DA  058C               	andwf	12,f	;volatile
  3953  05DB  2E0B               	goto	l306
  3954  05DC                     l2167:
  3955  05DC  0355               	decf	initialiseGPIO@portType^(0+128),w
  3956  05DD  1D03               	btfss	3,2
  3957  05DE  2DE0               	goto	u1701
  3958  05DF  2DE1               	goto	u1700
  3959  05E0                     u1701:
  3960  05E0  2E0B               	goto	l306
  3961  05E1                     u1700:
  3962  05E1                     l2169:
  3963                           
  3964                           ;GPIO.c: 38:         if(direction){
  3965  05E1  0852               	movf	initialiseGPIO@direction^(0+128),w
  3966  05E2  1903               	btfsc	3,2
  3967  05E3  2DE5               	goto	u1711
  3968  05E4  2DE6               	goto	u1710
  3969  05E5                     u1711:
  3970  05E5  2DFF               	goto	l2173
  3971  05E6                     u1710:
  3972  05E6                     l2171:
  3973                           
  3974                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3975  05E6  3001               	movlw	1
  3976  05E7  00D3               	movwf	??_initialiseGPIO^(0+128)
  3977  05E8  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3978  05E9  2DEB               	goto	u1724
  3979  05EA                     u1725:
  3980  05EA  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3981  05EB                     u1724:
  3982  05EB  0B89               	decfsz	9,f
  3983  05EC  2DEA               	goto	u1725
  3984  05ED  0853               	movf	??_initialiseGPIO^(0+128),w
  3985  05EE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3986  05EF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3987  05F0  048D               	iorwf	13,f	;volatile
  3988                           
  3989                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3990  05F1  3001               	movlw	1
  3991  05F2  00D3               	movwf	??_initialiseGPIO^(0+128)
  3992  05F3  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3993  05F4  2DF6               	goto	u1734
  3994  05F5                     u1735:
  3995  05F5  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3996  05F6                     u1734:
  3997  05F6  0B89               	decfsz	9,f
  3998  05F7  2DF5               	goto	u1735
  3999  05F8  0853               	movf	??_initialiseGPIO^(0+128),w
  4000  05F9  3AFF               	xorlw	255
  4001  05FA  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4002  05FB  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4003  05FC  0023               	movlb	3	; select bank3
  4004  05FD  058D               	andwf	13,f	;volatile
  4005                           
  4006                           ;GPIO.c: 41:         }
  4007  05FE  2E0B               	goto	l306
  4008  05FF                     l2173:
  4009  05FF  3001               	movlw	1
  4010  0600  00D3               	movwf	??_initialiseGPIO^(0+128)
  4011  0601  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  4012  0602  2E04               	goto	u1744
  4013  0603                     u1745:
  4014  0603  35D3               	lslf	??_initialiseGPIO^(0+128),f
  4015  0604                     u1744:
  4016  0604  0B89               	decfsz	9,f
  4017  0605  2E03               	goto	u1745
  4018  0606  0853               	movf	??_initialiseGPIO^(0+128),w
  4019  0607  3AFF               	xorlw	255
  4020  0608  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4021  0609  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4022  060A  058D               	andwf	13,f	;volatile
  4023  060B                     l306:
  4024  060B  0008               	return
  4025  060C                     __end_of_initialiseGPIO:
  4026                           
  4027                           	psect	text15
  4028  060C                     __ptext15:	
  4029 ;; *************** function _initialiseADCPin *****************
  4030 ;; Defined at:
  4031 ;;		line 37 in file "ADC.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  gpioNumber      1    wreg     const enum E2798
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  4036 ;;  portNumber      1    4[BANK1 ] unsigned char 
  4037 ;;  portType        1    3[BANK1 ] unsigned char 
  4038 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4048 ;;      Params:         0       0       0       0       0       0
  4049 ;;      Locals:         0       0       4       0       0       0
  4050 ;;      Temps:          0       0       2       0       0       0
  4051 ;;      Totals:         0       0       6       0       0       0
  4052 ;;Total ram usage:        6 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 5
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_initialisePotentiometers
  4059 ;;		_initialiseController
  4060 ;;		_initialiseCurrentSensors
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064  060C                     _initialiseADCPin:	
  4065                           ;psect for function _initialiseADCPin
  4066                           
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4070                           ;initialiseADCPin@gpioNumber stored from wreg
  4071  060C  0021               	movlb	1	; select bank1
  4072  060D  00D7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4073  060E                     l2175:
  4074                           
  4075                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4076  060E  01D6               	clrf	initialiseADCPin@portNumber^(0+128)
  4077                           
  4078                           ;ADC.c: 40:     uint8_t portType = 0;
  4079  060F  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4080                           
  4081                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4082  0610  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4083  0611                     l2177:
  4084                           
  4085                           ;ADC.c: 43:     if(gpioNumber < 4){
  4086  0611  3004               	movlw	4
  4087  0612  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4088  0613  1803               	skipnc
  4089  0614  2E16               	goto	u1751
  4090  0615  2E17               	goto	u1750
  4091  0616                     u1751:
  4092  0616  2E1E               	goto	l2185
  4093  0617                     u1750:
  4094  0617                     l2179:
  4095                           
  4096                           ;ADC.c: 44:         portNumber = gpioNumber;
  4097  0617  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4098  0618  00D2               	movwf	??_initialiseADCPin^(0+128)
  4099  0619  0852               	movf	??_initialiseADCPin^(0+128),w
  4100  061A  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4101  061B                     l2181:
  4102                           
  4103                           ;ADC.c: 45:         portType = 0;
  4104  061B  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4105  061C                     l2183:
  4106                           
  4107                           ;ADC.c: 46:         gpioValid = 1;
  4108  061C  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4109  061D  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4110  061E                     l2185:
  4111                           
  4112                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4113  061E  3009               	movlw	9
  4114  061F  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4115  0620  1C03               	skipc
  4116  0621  2E23               	goto	u1761
  4117  0622  2E24               	goto	u1760
  4118  0623                     u1761:
  4119  0623  2E33               	goto	l238
  4120  0624                     u1760:
  4121  0624                     l2187:
  4122  0624  3010               	movlw	16
  4123  0625  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4124  0626  1803               	skipnc
  4125  0627  2E29               	goto	u1771
  4126  0628  2E2A               	goto	u1770
  4127  0629                     u1771:
  4128  0629  2E33               	goto	l238
  4129  062A                     u1770:
  4130  062A                     l2189:
  4131                           
  4132                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4133  062A  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4134  062B  3EF8               	addlw	248
  4135  062C  00D2               	movwf	??_initialiseADCPin^(0+128)
  4136  062D  0852               	movf	??_initialiseADCPin^(0+128),w
  4137  062E  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4138  062F                     l2191:
  4139                           
  4140                           ;ADC.c: 51:         portType = 1;
  4141  062F  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4142  0630  0AD5               	incf	initialiseADCPin@portType^(0+128),f
  4143  0631                     l2193:
  4144                           
  4145                           ;ADC.c: 52:         gpioValid = 1;
  4146  0631  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4147  0632  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4148  0633                     l238:	
  4149                           ;ADC.c: 53:     }
  4150                           
  4151                           
  4152                           ;ADC.c: 55:     if(gpioValid){
  4153  0633  0854               	movf	initialiseADCPin@gpioValid^(0+128),w
  4154  0634  1903               	btfsc	3,2
  4155  0635  2E37               	goto	u1781
  4156  0636  2E38               	goto	u1780
  4157  0637                     u1781:
  4158  0637  2E71               	goto	l243
  4159  0638                     u1780:
  4160  0638                     l2195:
  4161                           
  4162                           ;ADC.c: 56:         if(portType == 0){
  4163  0638  0855               	movf	initialiseADCPin@portType^(0+128),w
  4164  0639  1D03               	btfss	3,2
  4165  063A  2E3C               	goto	u1791
  4166  063B  2E3D               	goto	u1790
  4167  063C                     u1791:
  4168  063C  2E55               	goto	l2199
  4169  063D                     u1790:
  4170  063D                     l2197:
  4171                           
  4172                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4173  063D  3001               	movlw	1
  4174  063E  00D2               	movwf	??_initialiseADCPin^(0+128)
  4175  063F  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4176  0640  2E42               	goto	u1804
  4177  0641                     u1805:
  4178  0641  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4179  0642                     u1804:
  4180  0642  0B89               	decfsz	9,f
  4181  0643  2E41               	goto	u1805
  4182  0644  0852               	movf	??_initialiseADCPin^(0+128),w
  4183  0645  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4184  0646  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4185  0647  048C               	iorwf	12,f	;volatile
  4186                           
  4187                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4188  0648  3001               	movlw	1
  4189  0649  00D2               	movwf	??_initialiseADCPin^(0+128)
  4190  064A  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4191  064B  2E4D               	goto	u1814
  4192  064C                     u1815:
  4193  064C  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4194  064D                     u1814:
  4195  064D  0B89               	decfsz	9,f
  4196  064E  2E4C               	goto	u1815
  4197  064F  0852               	movf	??_initialiseADCPin^(0+128),w
  4198  0650  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4199  0651  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4200  0652  0023               	movlb	3	; select bank3
  4201  0653  048C               	iorwf	12,f	;volatile
  4202                           
  4203                           ;ADC.c: 59:         }
  4204  0654  2E71               	goto	l243
  4205  0655                     l2199:
  4206  0655  0355               	decf	initialiseADCPin@portType^(0+128),w
  4207  0656  1D03               	btfss	3,2
  4208  0657  2E59               	goto	u1821
  4209  0658  2E5A               	goto	u1820
  4210  0659                     u1821:
  4211  0659  2E71               	goto	l243
  4212  065A                     u1820:
  4213  065A                     l2201:
  4214                           
  4215                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4216  065A  3001               	movlw	1
  4217  065B  00D2               	movwf	??_initialiseADCPin^(0+128)
  4218  065C  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4219  065D  2E5F               	goto	u1834
  4220  065E                     u1835:
  4221  065E  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4222  065F                     u1834:
  4223  065F  0B89               	decfsz	9,f
  4224  0660  2E5E               	goto	u1835
  4225  0661  0852               	movf	??_initialiseADCPin^(0+128),w
  4226  0662  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4227  0663  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4228  0664  048D               	iorwf	13,f	;volatile
  4229                           
  4230                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4231  0665  3001               	movlw	1
  4232  0666  00D2               	movwf	??_initialiseADCPin^(0+128)
  4233  0667  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4234  0668  2E6A               	goto	u1844
  4235  0669                     u1845:
  4236  0669  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4237  066A                     u1844:
  4238  066A  0B89               	decfsz	9,f
  4239  066B  2E69               	goto	u1845
  4240  066C  0852               	movf	??_initialiseADCPin^(0+128),w
  4241  066D  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4242  066E  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4243  066F  0023               	movlb	3	; select bank3
  4244  0670  048D               	iorwf	13,f	;volatile
  4245  0671                     l243:
  4246  0671  0008               	return
  4247  0672                     __end_of_initialiseADCPin:
  4248                           
  4249                           	psect	text16
  4250  0BC0                     __ptext16:	
  4251 ;; *************** function _initialiseADCModule *****************
  4252 ;; Defined at:
  4253 ;;		line 14 in file "ADC.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4267 ;;      Params:         0       0       0       0       0       0
  4268 ;;      Locals:         0       0       0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0
  4270 ;;      Totals:         0       0       0       0       0       0
  4271 ;;Total ram usage:        0 bytes
  4272 ;; Hardware stack levels used: 1
  4273 ;; Hardware stack levels required when called: 5
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281  0BC0                     _initialiseADCModule:	
  4282                           ;psect for function _initialiseADCModule
  4283                           
  4284  0BC0                     l2643:	
  4285                           ;incstack = 0
  4286                           ; Regs used in _initialiseADCModule: [wreg]
  4287                           
  4288                           
  4289                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4290  0BC0  3001               	movlw	1
  4291  0BC1  0021               	movlb	1	; select bank1
  4292  0BC2  009D               	movwf	29	;volatile
  4293                           
  4294                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4295  0BC3  3090               	movlw	144
  4296  0BC4  009E               	movwf	30	;volatile
  4297  0BC5                     l234:
  4298  0BC5  0008               	return
  4299  0BC6                     __end_of_initialiseADCModule:
  4300                           
  4301                           	psect	intentry
  4302  0004                     __pintentry:	
  4303 ;; *************** function _Tick490Hz *****************
  4304 ;; Defined at:
  4305 ;;		line 42 in file "main.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4319 ;;      Params:         0       0       0       0       0       0
  4320 ;;      Locals:         0       0       0       0       0       0
  4321 ;;      Temps:          0       1       0       0       0       0
  4322 ;;      Totals:         0       1       0       0       0       0
  4323 ;;Total ram usage:        1 bytes
  4324 ;; Hardware stack levels used: 1
  4325 ;; Hardware stack levels required when called: 4
  4326 ;; This function calls:
  4327 ;;		_controlRoutine
  4328 ;;		_currentTripMonitor
  4329 ;;		_readFilteredDutyPot
  4330 ;;		_readFilteredFreqPot
  4331 ;;		_readFilteredIL
  4332 ;;		_readFilteredVout
  4333 ;;		_runPotScaling
  4334 ;;		_setPWMDutyandPeriod
  4335 ;;		i1_writeGPIO
  4336 ;; This function is called by:
  4337 ;;		Interrupt level 1
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341  0004                     _Tick490Hz:
  4342                           
  4343                           ;incstack = 0
  4344  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4345                           
  4346                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4347  0005  3180               	pagesel	$
  4348  0006                     i1l2699:
  4349                           
  4350                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4351  0006  01F0               	clrf	i1writeGPIO@writeValue
  4352  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4353  0008  300C               	movlw	12
  4354  0009  3186  26D2  3180   	fcall	i1_writeGPIO
  4355                           
  4356                           ;main.c: 54:         currentTripMonitor();
  4357  000C  318C  2499  3180   	fcall	_currentTripMonitor
  4358                           
  4359                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4360  000F  0020               	movlb	0	; select bank0
  4361  0010  0864               	movf	_setDuty+1,w
  4362  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4363  0012  0863               	movf	_setDuty,w
  4364  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4365  0014  086E               	movf	_setPeriod,w
  4366  0015  00DE               	movwf	??_Tick490Hz
  4367  0016  085E               	movf	??_Tick490Hz,w
  4368  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4369  0018  318C  24BD  3180   	fcall	_setPWMDutyandPeriod
  4370  001B                     i1l2701:
  4371                           
  4372                           ;main.c: 58:         if(timerSlotHalf == 0){
  4373  001B  0020               	movlb	0	; select bank0
  4374  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4375  001D  1D03               	btfss	3,2
  4376  001E  2820               	goto	u251_21
  4377  001F  2821               	goto	u251_20
  4378  0020                     u251_21:
  4379  0020  2829               	goto	i1l2707
  4380  0021                     u251_20:
  4381  0021                     i1l2703:
  4382                           
  4383                           ;main.c: 60:             controlRoutine();
  4384  0021  3183  23FB  3180   	fcall	_controlRoutine
  4385  0024                     i1l2705:
  4386                           
  4387                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4388  0024  01F0               	clrf	i1writeGPIO@writeValue
  4389  0025  300C               	movlw	12
  4390  0026  3186  26D2  3180   	fcall	i1_writeGPIO
  4391  0029                     i1l2707:
  4392                           
  4393                           ;main.c: 64:         if(timerSlotHalf == 1){
  4394  0029  0020               	movlb	0	; select bank0
  4395  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4396  002B  1D03               	btfss	3,2
  4397  002C  282E               	goto	u252_21
  4398  002D  282F               	goto	u252_20
  4399  002E                     u252_21:
  4400  002E  2878               	goto	i1l2729
  4401  002F                     u252_20:
  4402  002F                     i1l2709:
  4403                           
  4404                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4405  002F  01F0               	clrf	i1writeGPIO@writeValue
  4406  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4407  0031  300D               	movlw	13
  4408  0032  3186  26D2  3180   	fcall	i1_writeGPIO
  4409  0035                     i1l2711:
  4410                           
  4411                           ;main.c: 67:             filteredIL = readFilteredIL();
  4412  0035  318E  2698  3180   	fcall	_readFilteredIL
  4413  0038  0871               	movf	?_readFilteredIL+1,w
  4414  0039  0021               	movlb	1	; select bank1
  4415  003A  00B1               	movwf	(_filteredIL+1)^(0+128)
  4416  003B  0870               	movf	?_readFilteredIL,w
  4417  003C  00B0               	movwf	_filteredIL^(0+128)
  4418  003D                     i1l2713:
  4419                           
  4420                           ;main.c: 69:             filteredVout = readFilteredVout();
  4421  003D  3187  2731  3180   	fcall	_readFilteredVout
  4422  0040  087B               	movf	?_readFilteredVout+1,w
  4423  0041  0020               	movlb	0	; select bank0
  4424  0042  00E0               	movwf	_filteredVout+1
  4425  0043  087A               	movf	?_readFilteredVout,w
  4426  0044  00DF               	movwf	_filteredVout
  4427  0045                     i1l2715:
  4428                           
  4429                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4430  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4431  0046  1D03               	btfss	3,2
  4432  0047  2849               	goto	u253_21
  4433  0048  284A               	goto	u253_20
  4434  0049                     u253_21:
  4435  0049  284D               	goto	i1l2719
  4436  004A                     u253_20:
  4437  004A                     i1l2717:
  4438                           
  4439                           ;main.c: 74:                 runPotScaling();
  4440  004A  3183  2313  3180   	fcall	_runPotScaling
  4441  004D                     i1l2719:
  4442                           
  4443                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4444  004D  0020               	movlb	0	; select bank0
  4445  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4446  004F  1D03               	btfss	3,2
  4447  0050  2852               	goto	u254_21
  4448  0051  2853               	goto	u254_20
  4449  0052                     u254_21:
  4450  0052  2863               	goto	i1l2723
  4451  0053                     u254_20:
  4452  0053                     i1l2721:
  4453                           
  4454                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4455  0053  318F  27A5  3180   	fcall	_readFilteredDutyPot
  4456  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4457  0057  0021               	movlb	1	; select bank1
  4458  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4459  0059  087A               	movf	?_readFilteredDutyPot,w
  4460  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4461                           
  4462                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4463  005B  3187  278C  3180   	fcall	_readFilteredFreqPot
  4464  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4465  005F  0021               	movlb	1	; select bank1
  4466  0060  00AF               	movwf	(_filteredFreqPot+1)^(0+128)
  4467  0061  087A               	movf	?_readFilteredFreqPot,w
  4468  0062  00AE               	movwf	_filteredFreqPot^(0+128)
  4469  0063                     i1l2723:
  4470                           
  4471                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4472  0063  0020               	movlb	0	; select bank0
  4473  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4474  0065  1D03               	btfss	3,2
  4475  0066  2868               	goto	u255_21
  4476  0067  286A               	goto	u255_20
  4477  0068                     u255_21:
  4478  0068  3001               	movlw	1
  4479  0069  286B               	goto	u256_20
  4480  006A                     u255_20:
  4481  006A  3000               	movlw	0
  4482  006B                     u256_20:
  4483  006B  00DE               	movwf	??_Tick490Hz
  4484  006C  085E               	movf	??_Tick490Hz,w
  4485  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4486  006E                     i1l2725:
  4487                           
  4488                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4489  006E  01F0               	clrf	i1writeGPIO@writeValue
  4490  006F  300C               	movlw	12
  4491  0070  3186  26D2  3180   	fcall	i1_writeGPIO
  4492  0073                     i1l2727:
  4493                           
  4494                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4495  0073  01F0               	clrf	i1writeGPIO@writeValue
  4496  0074  300D               	movlw	13
  4497  0075  3186  26D2  3180   	fcall	i1_writeGPIO
  4498  0078                     i1l2729:
  4499                           
  4500                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4501  0078  0020               	movlb	0	; select bank0
  4502  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4503  007A  1D03               	btfss	3,2
  4504  007B  287D               	goto	u257_21
  4505  007C  287F               	goto	u257_20
  4506  007D                     u257_21:
  4507  007D  3001               	movlw	1
  4508  007E  2880               	goto	u258_20
  4509  007F                     u257_20:
  4510  007F  3000               	movlw	0
  4511  0080                     u258_20:
  4512  0080  00DE               	movwf	??_Tick490Hz
  4513  0081  085E               	movf	??_Tick490Hz,w
  4514  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4515  0083                     i1l2731:
  4516                           
  4517                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4518  0083  110B               	bcf	11,2	;volatile
  4519  0084                     i1l110:
  4520  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4521  0085  0009               	retfie
  4522  0086                     __end_of_Tick490Hz:
  4523                           
  4524                           	psect	text18
  4525  0CBD                     __ptext18:	
  4526 ;; *************** function _setPWMDutyandPeriod *****************
  4527 ;; Defined at:
  4528 ;;		line 49 in file "PWM.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4531 ;;  period          1    2[COMMON] unsigned char 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;		None
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      void 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4543 ;;      Params:         3       0       0       0       0       0
  4544 ;;      Locals:         0       0       0       0       0       0
  4545 ;;      Temps:          2       0       0       0       0       0
  4546 ;;      Totals:         5       0       0       0       0       0
  4547 ;;Total ram usage:        5 bytes
  4548 ;; Hardware stack levels used: 1
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_Tick490Hz
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556  0CBD                     _setPWMDutyandPeriod:	
  4557                           ;psect for function _setPWMDutyandPeriod
  4558                           
  4559  0CBD                     i1l2355:	
  4560                           ;incstack = 0
  4561                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4562                           
  4563                           
  4564                           ;PWM.c: 50:     PR2 = period;
  4565  0CBD  0872               	movf	setPWMDutyandPeriod@period,w
  4566  0CBE  0020               	movlb	0	; select bank0
  4567  0CBF  009B               	movwf	27	;volatile
  4568  0CC0                     i1l2357:
  4569                           
  4570                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4571  0CC0  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4572  0CC1  00F4               	movwf	??_setPWMDutyandPeriod+1
  4573  0CC2  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4574  0CC3  00F3               	movwf	??_setPWMDutyandPeriod
  4575  0CC4  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4576  0CC5  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4577  0CC6  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4578  0CC7  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4579  0CC8  0873               	movf	??_setPWMDutyandPeriod,w
  4580  0CC9  0025               	movlb	5	; select bank5
  4581  0CCA  0091               	movwf	17	;volatile
  4582  0CCB                     i1l2359:
  4583                           
  4584                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4585  0CCB  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4586  0CCC  3901               	andlw	1
  4587  0CCD  00F3               	movwf	??_setPWMDutyandPeriod
  4588  0CCE  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4589  0CCF  0813               	movf	19,w	;volatile
  4590  0CD0  0673               	xorwf	??_setPWMDutyandPeriod,w
  4591  0CD1  39EF               	andlw	-17
  4592  0CD2  0673               	xorwf	??_setPWMDutyandPeriod,w
  4593  0CD3  0093               	movwf	19	;volatile
  4594                           
  4595                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4596  0CD4  3002               	movlw	2
  4597  0CD5  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4598  0CD6  00F3               	movwf	??_setPWMDutyandPeriod
  4599  0CD7  3000               	movlw	0
  4600  0CD8  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4601  0CD9  00F4               	movwf	??_setPWMDutyandPeriod+1
  4602  0CDA  3000               	movlw	0
  4603  0CDB  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4604  0CDC  3002               	movlw	2
  4605  0CDD  1903               	skipnz
  4606  0CDE  0273               	subwf	??_setPWMDutyandPeriod,w
  4607  0CDF  1803               	skipnc
  4608  0CE0  2CE2               	goto	u219_21
  4609  0CE1  2CE5               	goto	u219_20
  4610  0CE2                     u219_21:
  4611  0CE2  0025               	movlb	5	; select bank5
  4612  0CE3  1693               	bsf	19,5	;volatile
  4613  0CE4  2CE7               	goto	u220_24
  4614  0CE5                     u219_20:
  4615  0CE5  0025               	movlb	5	; select bank5
  4616  0CE6  1293               	bcf	19,5	;volatile
  4617  0CE7                     u220_24:
  4618  0CE7                     i1l177:
  4619  0CE7  0008               	return
  4620  0CE8                     __end_of_setPWMDutyandPeriod:
  4621                           
  4622                           	psect	text19
  4623  0313                     __ptext19:	
  4624 ;; *************** function _runPotScaling *****************
  4625 ;; Defined at:
  4626 ;;		line 55 in file "Potentiometer.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  minDuty         2   14[BANK0 ] unsigned short 
  4631 ;;  maxDuty         2   12[BANK0 ] unsigned short 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0, pclath, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4641 ;;      Params:         0       0       0       0       0       0
  4642 ;;      Locals:         0       4       0       0       0       0
  4643 ;;      Temps:          0       6       0       0       0       0
  4644 ;;      Totals:         0      10       0       0       0       0
  4645 ;;Total ram usage:       10 bytes
  4646 ;; Hardware stack levels used: 1
  4647 ;; Hardware stack levels required when called: 1
  4648 ;; This function calls:
  4649 ;;		___lldiv
  4650 ;;		___lmul
  4651 ;;		___wmul
  4652 ;; This function is called by:
  4653 ;;		_Tick490Hz
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657  0313                     _runPotScaling:	
  4658                           ;psect for function _runPotScaling
  4659                           
  4660  0313                     i1l2455:	
  4661                           ;incstack = 0
  4662                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4663                           
  4664                           
  4665                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4666  0313  0020               	movlb	0	; select bank0
  4667  0314  036C               	decf	_currentState,w
  4668  0315  1D03               	btfss	3,2
  4669  0316  2B18               	goto	u234_21
  4670  0317  2B19               	goto	u234_20
  4671  0318                     u234_21:
  4672  0318  2BFA               	goto	i1l379
  4673  0319                     u234_20:
  4674  0319                     i1l2457:
  4675                           
  4676                           ;Potentiometer.c: 58:         potSetCount++;
  4677  0319  3001               	movlw	1
  4678  031A  00A6               	movwf	??_runPotScaling
  4679  031B  0826               	movf	??_runPotScaling,w
  4680  031C  07E8               	addwf	_potSetCount,f
  4681                           
  4682                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4683  031D  3020               	movlw	32
  4684  031E  0668               	xorwf	_potSetCount,w
  4685  031F  1D03               	btfss	3,2
  4686  0320  2B22               	goto	u235_21
  4687  0321  2B23               	goto	u235_20
  4688  0322                     u235_21:
  4689  0322  2BFA               	goto	i1l379
  4690  0323                     u235_20:
  4691  0323                     i1l2459:
  4692                           
  4693                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 51) * (uint
      +                          32_t)(180u - 15u)) >> 10 ) + 15u;
  4694  0323  0021               	movlb	1	; select bank1
  4695  0324  082E               	movf	_filteredFreqPot^(0+128),w
  4696  0325  3ECD               	addlw	205
  4697  0326  00F0               	movwf	___lmul@multiplier
  4698  0327  30FF               	movlw	255
  4699  0328  3D2F               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4700  0329  00F1               	movwf	___lmul@multiplier+1
  4701  032A  01F2               	clrf	___lmul@multiplier+2
  4702  032B  01F3               	clrf	___lmul@multiplier+3
  4703  032C  3000               	movlw	0
  4704  032D  00F7               	movwf	___lmul@multiplicand+3
  4705  032E  3000               	movlw	0
  4706  032F  00F6               	movwf	___lmul@multiplicand+2
  4707  0330  3000               	movlw	0
  4708  0331  00F5               	movwf	___lmul@multiplicand+1
  4709  0332  30A5               	movlw	165
  4710  0333  00F4               	movwf	___lmul@multiplicand
  4711  0334  318D  2515  3183   	fcall	___lmul
  4712  0337  0870               	movf	?___lmul,w
  4713  0338  0020               	movlb	0	; select bank0
  4714  0339  00A6               	movwf	??_runPotScaling
  4715  033A  0871               	movf	?___lmul+1,w
  4716  033B  00A7               	movwf	??_runPotScaling+1
  4717  033C  0872               	movf	?___lmul+2,w
  4718  033D  00A8               	movwf	??_runPotScaling+2
  4719  033E  0873               	movf	?___lmul+3,w
  4720  033F  00A9               	movwf	??_runPotScaling+3
  4721  0340  300A               	movlw	10
  4722  0341                     u236_25:
  4723  0341  36A9               	lsrf	??_runPotScaling+3,f
  4724  0342  0CA8               	rrf	??_runPotScaling+2,f
  4725  0343  0CA7               	rrf	??_runPotScaling+1,f
  4726  0344  0CA6               	rrf	??_runPotScaling,f
  4727  0345                     u236_20:
  4728  0345  0B89               	decfsz	9,f
  4729  0346  2B41               	goto	u236_25
  4730  0347  0826               	movf	??_runPotScaling,w
  4731  0348  3E0F               	addlw	15
  4732  0349  00AA               	movwf	??_runPotScaling+4
  4733  034A  082A               	movf	??_runPotScaling+4,w
  4734  034B  00EE               	movwf	_setPeriod
  4735                           
  4736                           ;Potentiometer.c: 65:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4737  034C  3000               	movlw	0
  4738  034D  00F9               	movwf	___lldiv@divisor+3
  4739  034E  3000               	movlw	0
  4740  034F  00F8               	movwf	___lldiv@divisor+2
  4741  0350  3000               	movlw	0
  4742  0351  00F7               	movwf	___lldiv@divisor+1
  4743  0352  3019               	movlw	25
  4744  0353  00F6               	movwf	___lldiv@divisor
  4745  0354  305A               	movlw	90
  4746  0355  00F2               	movwf	___wmul@multiplicand
  4747  0356  3000               	movlw	0
  4748  0357  00F3               	movwf	___wmul@multiplicand+1
  4749  0358  086E               	movf	_setPeriod,w
  4750  0359  00A6               	movwf	??_runPotScaling
  4751  035A  01A7               	clrf	??_runPotScaling+1
  4752  035B  0826               	movf	??_runPotScaling,w
  4753  035C  00F0               	movwf	___wmul@multiplier
  4754  035D  0827               	movf	??_runPotScaling+1,w
  4755  035E  00F1               	movwf	___wmul@multiplier+1
  4756  035F  318C  245A  3183   	fcall	___wmul
  4757  0362  0870               	movf	?___wmul,w
  4758  0363  0020               	movlb	0	; select bank0
  4759  0364  00A8               	movwf	??_runPotScaling+2
  4760  0365  0871               	movf	?___wmul+1,w
  4761  0366  00A9               	movwf	??_runPotScaling+3
  4762  0367  01AA               	clrf	??_runPotScaling+4
  4763  0368  01AB               	clrf	??_runPotScaling+5
  4764  0369  082B               	movf	??_runPotScaling+5,w
  4765  036A  00FD               	movwf	___lldiv@dividend+3
  4766  036B  082A               	movf	??_runPotScaling+4,w
  4767  036C  00FC               	movwf	___lldiv@dividend+2
  4768  036D  0829               	movf	??_runPotScaling+3,w
  4769  036E  00FB               	movwf	___lldiv@dividend+1
  4770  036F  0828               	movf	??_runPotScaling+2,w
  4771  0370  00FA               	movwf	___lldiv@dividend
  4772  0371  318F  274A  3183   	fcall	___lldiv
  4773  0374  0877               	movf	?___lldiv+1,w
  4774  0375  0020               	movlb	0	; select bank0
  4775  0376  00AD               	movwf	runPotScaling@maxDuty+1
  4776  0377  0876               	movf	?___lldiv,w
  4777  0378  00AC               	movwf	runPotScaling@maxDuty
  4778                           
  4779                           ;Potentiometer.c: 66:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4780  0379  3000               	movlw	0
  4781  037A  00F9               	movwf	___lldiv@divisor+3
  4782  037B  3000               	movlw	0
  4783  037C  00F8               	movwf	___lldiv@divisor+2
  4784  037D  3000               	movlw	0
  4785  037E  00F7               	movwf	___lldiv@divisor+1
  4786  037F  3019               	movlw	25
  4787  0380  00F6               	movwf	___lldiv@divisor
  4788  0381  300A               	movlw	10
  4789  0382  00F2               	movwf	___wmul@multiplicand
  4790  0383  3000               	movlw	0
  4791  0384  00F3               	movwf	___wmul@multiplicand+1
  4792  0385  086E               	movf	_setPeriod,w
  4793  0386  00A6               	movwf	??_runPotScaling
  4794  0387  01A7               	clrf	??_runPotScaling+1
  4795  0388  0826               	movf	??_runPotScaling,w
  4796  0389  00F0               	movwf	___wmul@multiplier
  4797  038A  0827               	movf	??_runPotScaling+1,w
  4798  038B  00F1               	movwf	___wmul@multiplier+1
  4799  038C  318C  245A  3183   	fcall	___wmul
  4800  038F  0870               	movf	?___wmul,w
  4801  0390  0020               	movlb	0	; select bank0
  4802  0391  00A8               	movwf	??_runPotScaling+2
  4803  0392  0871               	movf	?___wmul+1,w
  4804  0393  00A9               	movwf	??_runPotScaling+3
  4805  0394  01AA               	clrf	??_runPotScaling+4
  4806  0395  01AB               	clrf	??_runPotScaling+5
  4807  0396  082B               	movf	??_runPotScaling+5,w
  4808  0397  00FD               	movwf	___lldiv@dividend+3
  4809  0398  082A               	movf	??_runPotScaling+4,w
  4810  0399  00FC               	movwf	___lldiv@dividend+2
  4811  039A  0829               	movf	??_runPotScaling+3,w
  4812  039B  00FB               	movwf	___lldiv@dividend+1
  4813  039C  0828               	movf	??_runPotScaling+2,w
  4814  039D  00FA               	movwf	___lldiv@dividend
  4815  039E  318F  274A  3183   	fcall	___lldiv
  4816  03A1  0877               	movf	?___lldiv+1,w
  4817  03A2  0020               	movlb	0	; select bank0
  4818  03A3  00AF               	movwf	runPotScaling@minDuty+1
  4819  03A4  0876               	movf	?___lldiv,w
  4820  03A5  00AE               	movwf	runPotScaling@minDuty
  4821                           
  4822                           ;Potentiometer.c: 69:             setDuty = ((uint32_t)((filteredDutyPot-51) * (uint32_t
      +                          )(maxDuty-minDuty)) >> 10) + minDuty;
  4823  03A6  0021               	movlb	1	; select bank1
  4824  03A7  082C               	movf	_filteredDutyPot^(0+128),w
  4825  03A8  3ECD               	addlw	205
  4826  03A9  00F0               	movwf	___lmul@multiplier
  4827  03AA  30FF               	movlw	255
  4828  03AB  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4829  03AC  00F1               	movwf	___lmul@multiplier+1
  4830  03AD  01F2               	clrf	___lmul@multiplier+2
  4831  03AE  01F3               	clrf	___lmul@multiplier+3
  4832  03AF  0020               	movlb	0	; select bank0
  4833  03B0  082E               	movf	runPotScaling@minDuty,w
  4834  03B1  022C               	subwf	runPotScaling@maxDuty,w
  4835  03B2  00F4               	movwf	___lmul@multiplicand
  4836  03B3  082F               	movf	runPotScaling@minDuty+1,w
  4837  03B4  3B2D               	subwfb	runPotScaling@maxDuty+1,w
  4838  03B5  00F5               	movwf	___lmul@multiplicand+1
  4839  03B6  01F6               	clrf	___lmul@multiplicand+2
  4840  03B7  01F7               	clrf	___lmul@multiplicand+3
  4841  03B8  318D  2515  3183   	fcall	___lmul
  4842  03BB  0870               	movf	?___lmul,w
  4843  03BC  0020               	movlb	0	; select bank0
  4844  03BD  00A6               	movwf	??_runPotScaling
  4845  03BE  0871               	movf	?___lmul+1,w
  4846  03BF  00A7               	movwf	??_runPotScaling+1
  4847  03C0  0872               	movf	?___lmul+2,w
  4848  03C1  00A8               	movwf	??_runPotScaling+2
  4849  03C2  0873               	movf	?___lmul+3,w
  4850  03C3  00A9               	movwf	??_runPotScaling+3
  4851  03C4  300A               	movlw	10
  4852  03C5                     u237_25:
  4853  03C5  36A9               	lsrf	??_runPotScaling+3,f
  4854  03C6  0CA8               	rrf	??_runPotScaling+2,f
  4855  03C7  0CA7               	rrf	??_runPotScaling+1,f
  4856  03C8  0CA6               	rrf	??_runPotScaling,f
  4857  03C9                     u237_20:
  4858  03C9  0B89               	decfsz	9,f
  4859  03CA  2BC5               	goto	u237_25
  4860  03CB  082E               	movf	runPotScaling@minDuty,w
  4861  03CC  0726               	addwf	??_runPotScaling,w
  4862  03CD  00E3               	movwf	_setDuty
  4863  03CE  082F               	movf	runPotScaling@minDuty+1,w
  4864  03CF  3D27               	addwfc	??_runPotScaling+1,w
  4865  03D0  00E4               	movwf	_setDuty+1
  4866  03D1                     i1l2461:
  4867                           
  4868                           ;Potentiometer.c: 70:             setDuty = (maxDuty) - (setDuty - minDuty);
  4869  03D1  0863               	movf	_setDuty,w
  4870  03D2  022E               	subwf	runPotScaling@minDuty,w
  4871  03D3  00A6               	movwf	??_runPotScaling
  4872  03D4  0864               	movf	_setDuty+1,w
  4873  03D5  3B2F               	subwfb	runPotScaling@minDuty+1,w
  4874  03D6  00A7               	movwf	??_runPotScaling+1
  4875  03D7  082C               	movf	runPotScaling@maxDuty,w
  4876  03D8  0726               	addwf	??_runPotScaling,w
  4877  03D9  00E3               	movwf	_setDuty
  4878  03DA  082D               	movf	runPotScaling@maxDuty+1,w
  4879  03DB  3D27               	addwfc	??_runPotScaling+1,w
  4880  03DC  00E4               	movwf	_setDuty+1
  4881  03DD                     i1l2463:
  4882                           
  4883                           ;Potentiometer.c: 73:             if(setDuty > maxDuty) setDuty = maxDuty;
  4884  03DD  0864               	movf	_setDuty+1,w
  4885  03DE  022D               	subwf	runPotScaling@maxDuty+1,w
  4886  03DF  1D03               	skipz
  4887  03E0  2BE3               	goto	u238_25
  4888  03E1  0863               	movf	_setDuty,w
  4889  03E2  022C               	subwf	runPotScaling@maxDuty,w
  4890  03E3                     u238_25:
  4891  03E3  1803               	skipnc
  4892  03E4  2BE6               	goto	u238_21
  4893  03E5  2BE7               	goto	u238_20
  4894  03E6                     u238_21:
  4895  03E6  2BEB               	goto	i1l377
  4896  03E7                     u238_20:
  4897  03E7                     i1l2465:
  4898  03E7  082D               	movf	runPotScaling@maxDuty+1,w
  4899  03E8  00E4               	movwf	_setDuty+1
  4900  03E9  082C               	movf	runPotScaling@maxDuty,w
  4901  03EA  00E3               	movwf	_setDuty
  4902  03EB                     i1l377:
  4903                           
  4904                           ;Potentiometer.c: 74:             if(setDuty < minDuty) setDuty = minDuty;
  4905  03EB  082F               	movf	runPotScaling@minDuty+1,w
  4906  03EC  0264               	subwf	_setDuty+1,w
  4907  03ED  1D03               	skipz
  4908  03EE  2BF1               	goto	u239_25
  4909  03EF  082E               	movf	runPotScaling@minDuty,w
  4910  03F0  0263               	subwf	_setDuty,w
  4911  03F1                     u239_25:
  4912  03F1  1803               	skipnc
  4913  03F2  2BF4               	goto	u239_21
  4914  03F3  2BF5               	goto	u239_20
  4915  03F4                     u239_21:
  4916  03F4  2BF9               	goto	i1l2469
  4917  03F5                     u239_20:
  4918  03F5                     i1l2467:
  4919  03F5  082F               	movf	runPotScaling@minDuty+1,w
  4920  03F6  00E4               	movwf	_setDuty+1
  4921  03F7  082E               	movf	runPotScaling@minDuty,w
  4922  03F8  00E3               	movwf	_setDuty
  4923  03F9                     i1l2469:
  4924                           
  4925                           ;Potentiometer.c: 76:             potSetCount = 0;
  4926  03F9  01E8               	clrf	_potSetCount
  4927  03FA                     i1l379:
  4928  03FA  0008               	return
  4929  03FB                     __end_of_runPotScaling:
  4930                           
  4931                           	psect	text20
  4932  0731                     __ptext20:	
  4933 ;; *************** function _readFilteredVout *****************
  4934 ;; Defined at:
  4935 ;;		line 39 in file "Controller.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  i               1    8[BANK0 ] unsigned char 
  4940 ;;  i               1    9[BANK0 ] unsigned char 
  4941 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  2   10[COMMON] unsigned short 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4951 ;;      Params:         2       0       0       0       0       0
  4952 ;;      Locals:         0       6       0       0       0       0
  4953 ;;      Temps:          0       4       0       0       0       0
  4954 ;;      Totals:         2      10       0       0       0       0
  4955 ;;Total ram usage:       12 bytes
  4956 ;; Hardware stack levels used: 1
  4957 ;; Hardware stack levels required when called: 1
  4958 ;; This function calls:
  4959 ;;		_readADCRaw
  4960 ;; This function is called by:
  4961 ;;		_Tick490Hz
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965  0731                     _readFilteredVout:	
  4966                           ;psect for function _readFilteredVout
  4967                           
  4968  0731                     i1l2423:	
  4969                           ;incstack = 0
  4970                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4971                           
  4972                           
  4973                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4974  0731  0020               	movlb	0	; select bank0
  4975  0732  01A9               	clrf	readFilteredVout@i
  4976  0733                     i1l2429:
  4977  0733  3529               	lslf	readFilteredVout@i,w
  4978  0734  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4979  0735  0086               	movwf	6
  4980  0736  3001               	movlw	1	; select bank3/4
  4981  0737  0087               	movwf	7
  4982  0738  3529               	lslf	readFilteredVout@i,w
  4983  0739  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4984  073A  0084               	movwf	4
  4985  073B  3001               	movlw	1	; select bank3/4
  4986  073C  0085               	movwf	5
  4987  073D  3F40               	moviw [0]fsr1
  4988  073E  3F80               	movwi [0]fsr0
  4989  073F  3F41               	moviw [1]fsr1
  4990  0740  3F81               	movwi [1]fsr0
  4991  0741                     i1l2431:
  4992  0741  3001               	movlw	1
  4993  0742  00A0               	movwf	??_readFilteredVout
  4994  0743  0820               	movf	??_readFilteredVout,w
  4995  0744  07A9               	addwf	readFilteredVout@i,f
  4996  0745                     i1l2433:
  4997  0745  300F               	movlw	15
  4998  0746  0229               	subwf	readFilteredVout@i,w
  4999  0747  1C03               	skipc
  5000  0748  2F4A               	goto	u231_21
  5001  0749  2F4B               	goto	u231_20
  5002  074A                     u231_21:
  5003  074A  2F33               	goto	i1l2429
  5004  074B                     u231_20:
  5005  074B                     i1l2435:
  5006                           
  5007                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  5008  074B  3004               	movlw	4
  5009  074C  318E  26F0  3187   	fcall	_readADCRaw
  5010  074F  0871               	movf	?_readADCRaw+1,w
  5011  0750  0023               	movlb	3	; select bank3
  5012  0751  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5013  0752  0870               	movf	?_readADCRaw,w
  5014  0753  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5015  0754                     i1l2437:
  5016                           
  5017                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  5018  0754  3000               	movlw	0
  5019  0755  0020               	movlb	0	; select bank0
  5020  0756  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5021  0757  3000               	movlw	0
  5022  0758  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5023  0759  3000               	movlw	0
  5024  075A  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5025  075B  3000               	movlw	0
  5026  075C  00A4               	movwf	readFilteredVout@sumOfSamples
  5027  075D                     i1l2439:
  5028                           
  5029                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  5030  075D  01A8               	clrf	readFilteredVout@i_835
  5031  075E                     i1l2445:
  5032  075E  3528               	lslf	readFilteredVout@i_835,w
  5033  075F  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5034  0760  0086               	movwf	6
  5035  0761  3001               	movlw	1	; select bank3/4
  5036  0762  0087               	movwf	7
  5037  0763  3F40               	moviw [0]fsr1
  5038  0764  00A0               	movwf	??_readFilteredVout
  5039  0765  3F41               	moviw [1]fsr1
  5040  0766  00A1               	movwf	??_readFilteredVout+1
  5041  0767  0820               	movf	??_readFilteredVout,w
  5042  0768  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5043  0769  0821               	movf	??_readFilteredVout+1,w
  5044  076A  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5045  076B  3000               	movlw	0
  5046  076C  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5047  076D  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5048  076E                     i1l2447:
  5049  076E  3001               	movlw	1
  5050  076F  00A0               	movwf	??_readFilteredVout
  5051  0770  0820               	movf	??_readFilteredVout,w
  5052  0771  07A8               	addwf	readFilteredVout@i_835,f
  5053  0772                     i1l2449:
  5054  0772  3010               	movlw	16
  5055  0773  0228               	subwf	readFilteredVout@i_835,w
  5056  0774  1C03               	skipc
  5057  0775  2F77               	goto	u232_21
  5058  0776  2F78               	goto	u232_20
  5059  0777                     u232_21:
  5060  0777  2F5E               	goto	i1l2445
  5061  0778                     u232_20:
  5062  0778                     i1l2451:
  5063                           
  5064                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  5065  0778  0824               	movf	readFilteredVout@sumOfSamples,w
  5066  0779  00A0               	movwf	??_readFilteredVout
  5067  077A  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5068  077B  00A1               	movwf	??_readFilteredVout+1
  5069  077C  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5070  077D  00A2               	movwf	??_readFilteredVout+2
  5071  077E  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5072  077F  00A3               	movwf	??_readFilteredVout+3
  5073  0780  3004               	movlw	4
  5074  0781                     u233_25:
  5075  0781  36A3               	lsrf	??_readFilteredVout+3,f
  5076  0782  0CA2               	rrf	??_readFilteredVout+2,f
  5077  0783  0CA1               	rrf	??_readFilteredVout+1,f
  5078  0784  0CA0               	rrf	??_readFilteredVout,f
  5079  0785                     u233_20:
  5080  0785  0B89               	decfsz	9,f
  5081  0786  2F81               	goto	u233_25
  5082  0787  0821               	movf	??_readFilteredVout+1,w
  5083  0788  00FB               	movwf	?_readFilteredVout+1
  5084  0789  0820               	movf	??_readFilteredVout,w
  5085  078A  00FA               	movwf	?_readFilteredVout
  5086  078B                     i1l437:
  5087  078B  0008               	return
  5088  078C                     __end_of_readFilteredVout:
  5089                           
  5090                           	psect	text21
  5091  0E98                     __ptext21:	
  5092 ;; *************** function _readFilteredIL *****************
  5093 ;; Defined at:
  5094 ;;		line 56 in file "CurrentSensor.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  i               1   10[COMMON] unsigned char 
  5099 ;;  i               1   11[COMMON] unsigned char 
  5100 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  2    0[COMMON] unsigned short 
  5103 ;; Registers used:
  5104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5110 ;;      Params:         2       0       0       0       0       0
  5111 ;;      Locals:         6       0       0       0       0       0
  5112 ;;      Temps:          4       0       0       0       0       0
  5113 ;;      Totals:        12       0       0       0       0       0
  5114 ;;Total ram usage:       12 bytes
  5115 ;; Hardware stack levels used: 1
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_Tick490Hz
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123  0E98                     _readFilteredIL:	
  5124                           ;psect for function _readFilteredIL
  5125                           
  5126  0E98                     i1l2393:	
  5127                           ;incstack = 0
  5128                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5129                           
  5130                           
  5131                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5132  0E98  01FB               	clrf	readFilteredIL@i
  5133  0E99                     i1l2399:
  5134  0E99  357B               	lslf	readFilteredIL@i,w
  5135  0E9A  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5136  0E9B  0086               	movwf	6
  5137  0E9C  3001               	movlw	1	; select bank2/3
  5138  0E9D  0087               	movwf	7
  5139  0E9E  357B               	lslf	readFilteredIL@i,w
  5140  0E9F  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5141  0EA0  0084               	movwf	4
  5142  0EA1  3001               	movlw	1	; select bank2/3
  5143  0EA2  0085               	movwf	5
  5144  0EA3  3F40               	moviw [0]fsr1
  5145  0EA4  3F80               	movwi [0]fsr0
  5146  0EA5  3F41               	moviw [1]fsr1
  5147  0EA6  3F81               	movwi [1]fsr0
  5148  0EA7                     i1l2401:
  5149  0EA7  3001               	movlw	1
  5150  0EA8  00F2               	movwf	??_readFilteredIL
  5151  0EA9  0872               	movf	??_readFilteredIL,w
  5152  0EAA  07FB               	addwf	readFilteredIL@i,f
  5153  0EAB                     i1l2403:
  5154  0EAB  300F               	movlw	15
  5155  0EAC  027B               	subwf	readFilteredIL@i,w
  5156  0EAD  1C03               	skipc
  5157  0EAE  2EB0               	goto	u228_21
  5158  0EAF  2EB1               	goto	u228_20
  5159  0EB0                     u228_21:
  5160  0EB0  2E99               	goto	i1l2399
  5161  0EB1                     u228_20:
  5162  0EB1                     i1l2405:
  5163                           
  5164                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5165  0EB1  0020               	movlb	0	; select bank0
  5166  0EB2  0862               	movf	_latestIL+1,w	;volatile
  5167  0EB3  0022               	movlb	2	; select bank2
  5168  0EB4  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5169  0EB5  0020               	movlb	0	; select bank0
  5170  0EB6  0861               	movf	_latestIL,w	;volatile
  5171  0EB7  0022               	movlb	2	; select bank2
  5172  0EB8  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5173                           
  5174                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5175  0EB9  3000               	movlw	0
  5176  0EBA  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5177  0EBB  3000               	movlw	0
  5178  0EBC  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5179  0EBD  3000               	movlw	0
  5180  0EBE  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5181  0EBF  3000               	movlw	0
  5182  0EC0  00F6               	movwf	readFilteredIL@sumOfSamples
  5183  0EC1                     i1l2407:
  5184                           
  5185                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5186  0EC1  01FA               	clrf	readFilteredIL@i_925
  5187  0EC2                     i1l2413:
  5188  0EC2  357A               	lslf	readFilteredIL@i_925,w
  5189  0EC3  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5190  0EC4  0086               	movwf	6
  5191  0EC5  3001               	movlw	1	; select bank2/3
  5192  0EC6  0087               	movwf	7
  5193  0EC7  3F40               	moviw [0]fsr1
  5194  0EC8  00F2               	movwf	??_readFilteredIL
  5195  0EC9  3F41               	moviw [1]fsr1
  5196  0ECA  00F3               	movwf	??_readFilteredIL+1
  5197  0ECB  0872               	movf	??_readFilteredIL,w
  5198  0ECC  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5199  0ECD  0873               	movf	??_readFilteredIL+1,w
  5200  0ECE  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5201  0ECF  3000               	movlw	0
  5202  0ED0  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5203  0ED1  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5204  0ED2                     i1l2415:
  5205  0ED2  3001               	movlw	1
  5206  0ED3  00F2               	movwf	??_readFilteredIL
  5207  0ED4  0872               	movf	??_readFilteredIL,w
  5208  0ED5  07FA               	addwf	readFilteredIL@i_925,f
  5209  0ED6                     i1l2417:
  5210  0ED6  3010               	movlw	16
  5211  0ED7  027A               	subwf	readFilteredIL@i_925,w
  5212  0ED8  1C03               	skipc
  5213  0ED9  2EDB               	goto	u229_21
  5214  0EDA  2EDC               	goto	u229_20
  5215  0EDB                     u229_21:
  5216  0EDB  2EC2               	goto	i1l2413
  5217  0EDC                     u229_20:
  5218  0EDC                     i1l2419:
  5219                           
  5220                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5221  0EDC  0876               	movf	readFilteredIL@sumOfSamples,w
  5222  0EDD  00F2               	movwf	??_readFilteredIL
  5223  0EDE  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5224  0EDF  00F3               	movwf	??_readFilteredIL+1
  5225  0EE0  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5226  0EE1  00F4               	movwf	??_readFilteredIL+2
  5227  0EE2  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5228  0EE3  00F5               	movwf	??_readFilteredIL+3
  5229  0EE4  3004               	movlw	4
  5230  0EE5                     u230_25:
  5231  0EE5  36F5               	lsrf	??_readFilteredIL+3,f
  5232  0EE6  0CF4               	rrf	??_readFilteredIL+2,f
  5233  0EE7  0CF3               	rrf	??_readFilteredIL+1,f
  5234  0EE8  0CF2               	rrf	??_readFilteredIL,f
  5235  0EE9                     u230_20:
  5236  0EE9  0B89               	decfsz	9,f
  5237  0EEA  2EE5               	goto	u230_25
  5238  0EEB  0873               	movf	??_readFilteredIL+1,w
  5239  0EEC  00F1               	movwf	?_readFilteredIL+1
  5240  0EED  0872               	movf	??_readFilteredIL,w
  5241  0EEE  00F0               	movwf	?_readFilteredIL
  5242  0EEF                     i1l531:
  5243  0EEF  0008               	return
  5244  0EF0                     __end_of_readFilteredIL:
  5245                           
  5246                           	psect	text22
  5247  078C                     __ptext22:	
  5248 ;; *************** function _readFilteredFreqPot *****************
  5249 ;; Defined at:
  5250 ;;		line 39 in file "Potentiometer.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;  i               1    8[BANK0 ] unsigned char 
  5255 ;;  i               1    9[BANK0 ] unsigned char 
  5256 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2   10[COMMON] unsigned short 
  5259 ;; Registers used:
  5260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5266 ;;      Params:         2       0       0       0       0       0
  5267 ;;      Locals:         0       6       0       0       0       0
  5268 ;;      Temps:          0       4       0       0       0       0
  5269 ;;      Totals:         2      10       0       0       0       0
  5270 ;;Total ram usage:       12 bytes
  5271 ;; Hardware stack levels used: 1
  5272 ;; Hardware stack levels required when called: 1
  5273 ;; This function calls:
  5274 ;;		_readADCRaw
  5275 ;; This function is called by:
  5276 ;;		_Tick490Hz
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280  078C                     _readFilteredFreqPot:	
  5281                           ;psect for function _readFilteredFreqPot
  5282                           
  5283  078C                     i1l2503:	
  5284                           ;incstack = 0
  5285                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5286                           
  5287                           
  5288                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5289  078C  0020               	movlb	0	; select bank0
  5290  078D  01A9               	clrf	readFilteredFreqPot@i
  5291  078E                     i1l2509:
  5292  078E  3529               	lslf	readFilteredFreqPot@i,w
  5293  078F  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5294  0790  0086               	movwf	6
  5295  0791  3001               	movlw	1	; select bank3/4
  5296  0792  0087               	movwf	7
  5297  0793  3529               	lslf	readFilteredFreqPot@i,w
  5298  0794  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5299  0795  0084               	movwf	4
  5300  0796  3001               	movlw	1	; select bank3/4
  5301  0797  0085               	movwf	5
  5302  0798  3F40               	moviw [0]fsr1
  5303  0799  3F80               	movwi [0]fsr0
  5304  079A  3F41               	moviw [1]fsr1
  5305  079B  3F81               	movwi [1]fsr0
  5306  079C                     i1l2511:
  5307  079C  3001               	movlw	1
  5308  079D  00A0               	movwf	??_readFilteredFreqPot
  5309  079E  0820               	movf	??_readFilteredFreqPot,w
  5310  079F  07A9               	addwf	readFilteredFreqPot@i,f
  5311  07A0                     i1l2513:
  5312  07A0  300F               	movlw	15
  5313  07A1  0229               	subwf	readFilteredFreqPot@i,w
  5314  07A2  1C03               	skipc
  5315  07A3  2FA5               	goto	u243_21
  5316  07A4  2FA6               	goto	u243_20
  5317  07A5                     u243_21:
  5318  07A5  2F8E               	goto	i1l2509
  5319  07A6                     u243_20:
  5320  07A6                     i1l2515:
  5321                           
  5322                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5323  07A6  300A               	movlw	10
  5324  07A7  318E  26F0  3187   	fcall	_readADCRaw
  5325  07AA  0871               	movf	?_readADCRaw+1,w
  5326  07AB  0023               	movlb	3	; select bank3
  5327  07AC  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5328  07AD  0870               	movf	?_readADCRaw,w
  5329  07AE  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5330  07AF                     i1l2517:
  5331                           
  5332                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5333  07AF  3000               	movlw	0
  5334  07B0  0020               	movlb	0	; select bank0
  5335  07B1  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5336  07B2  3000               	movlw	0
  5337  07B3  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5338  07B4  3000               	movlw	0
  5339  07B5  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5340  07B6  3000               	movlw	0
  5341  07B7  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5342  07B8                     i1l2519:
  5343                           
  5344                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5345  07B8  01A8               	clrf	readFilteredFreqPot@i_758
  5346  07B9                     i1l2525:
  5347  07B9  3528               	lslf	readFilteredFreqPot@i_758,w
  5348  07BA  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5349  07BB  0086               	movwf	6
  5350  07BC  3001               	movlw	1	; select bank3/4
  5351  07BD  0087               	movwf	7
  5352  07BE  3F40               	moviw [0]fsr1
  5353  07BF  00A0               	movwf	??_readFilteredFreqPot
  5354  07C0  3F41               	moviw [1]fsr1
  5355  07C1  00A1               	movwf	??_readFilteredFreqPot+1
  5356  07C2  0820               	movf	??_readFilteredFreqPot,w
  5357  07C3  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5358  07C4  0821               	movf	??_readFilteredFreqPot+1,w
  5359  07C5  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5360  07C6  3000               	movlw	0
  5361  07C7  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5362  07C8  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5363  07C9                     i1l2527:
  5364  07C9  3001               	movlw	1
  5365  07CA  00A0               	movwf	??_readFilteredFreqPot
  5366  07CB  0820               	movf	??_readFilteredFreqPot,w
  5367  07CC  07A8               	addwf	readFilteredFreqPot@i_758,f
  5368  07CD                     i1l2529:
  5369  07CD  3010               	movlw	16
  5370  07CE  0228               	subwf	readFilteredFreqPot@i_758,w
  5371  07CF  1C03               	skipc
  5372  07D0  2FD2               	goto	u244_21
  5373  07D1  2FD3               	goto	u244_20
  5374  07D2                     u244_21:
  5375  07D2  2FB9               	goto	i1l2525
  5376  07D3                     u244_20:
  5377  07D3                     i1l2531:
  5378                           
  5379                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5380  07D3  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5381  07D4  00A0               	movwf	??_readFilteredFreqPot
  5382  07D5  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5383  07D6  00A1               	movwf	??_readFilteredFreqPot+1
  5384  07D7  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5385  07D8  00A2               	movwf	??_readFilteredFreqPot+2
  5386  07D9  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5387  07DA  00A3               	movwf	??_readFilteredFreqPot+3
  5388  07DB  3004               	movlw	4
  5389  07DC                     u245_25:
  5390  07DC  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5391  07DD  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5392  07DE  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5393  07DF  0CA0               	rrf	??_readFilteredFreqPot,f
  5394  07E0                     u245_20:
  5395  07E0  0B89               	decfsz	9,f
  5396  07E1  2FDC               	goto	u245_25
  5397  07E2  0821               	movf	??_readFilteredFreqPot+1,w
  5398  07E3  00FB               	movwf	?_readFilteredFreqPot+1
  5399  07E4  0820               	movf	??_readFilteredFreqPot,w
  5400  07E5  00FA               	movwf	?_readFilteredFreqPot
  5401  07E6                     i1l372:
  5402  07E6  0008               	return
  5403  07E7                     __end_of_readFilteredFreqPot:
  5404                           
  5405                           	psect	text23
  5406  0FA5                     __ptext23:	
  5407 ;; *************** function _readFilteredDutyPot *****************
  5408 ;; Defined at:
  5409 ;;		line 25 in file "Potentiometer.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  i               1    8[BANK0 ] unsigned char 
  5414 ;;  i               1    9[BANK0 ] unsigned char 
  5415 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  2   10[COMMON] unsigned short 
  5418 ;; Registers used:
  5419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5425 ;;      Params:         2       0       0       0       0       0
  5426 ;;      Locals:         0       6       0       0       0       0
  5427 ;;      Temps:          0       4       0       0       0       0
  5428 ;;      Totals:         2      10       0       0       0       0
  5429 ;;Total ram usage:       12 bytes
  5430 ;; Hardware stack levels used: 1
  5431 ;; Hardware stack levels required when called: 1
  5432 ;; This function calls:
  5433 ;;		_readADCRaw
  5434 ;; This function is called by:
  5435 ;;		_Tick490Hz
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439  0FA5                     _readFilteredDutyPot:	
  5440                           ;psect for function _readFilteredDutyPot
  5441                           
  5442  0FA5                     i1l2471:	
  5443                           ;incstack = 0
  5444                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5445                           
  5446                           
  5447                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5448  0FA5  0020               	movlb	0	; select bank0
  5449  0FA6  01A9               	clrf	readFilteredDutyPot@i
  5450  0FA7                     i1l2477:
  5451  0FA7  3529               	lslf	readFilteredDutyPot@i,w
  5452  0FA8  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5453  0FA9  0086               	movwf	6
  5454  0FAA  3002               	movlw	2	; select bank4/5
  5455  0FAB  0087               	movwf	7
  5456  0FAC  3529               	lslf	readFilteredDutyPot@i,w
  5457  0FAD  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5458  0FAE  0084               	movwf	4
  5459  0FAF  3002               	movlw	2	; select bank4/5
  5460  0FB0  0085               	movwf	5
  5461  0FB1  3F40               	moviw [0]fsr1
  5462  0FB2  3F80               	movwi [0]fsr0
  5463  0FB3  3F41               	moviw [1]fsr1
  5464  0FB4  3F81               	movwi [1]fsr0
  5465  0FB5                     i1l2479:
  5466  0FB5  3001               	movlw	1
  5467  0FB6  00A0               	movwf	??_readFilteredDutyPot
  5468  0FB7  0820               	movf	??_readFilteredDutyPot,w
  5469  0FB8  07A9               	addwf	readFilteredDutyPot@i,f
  5470  0FB9                     i1l2481:
  5471  0FB9  300F               	movlw	15
  5472  0FBA  0229               	subwf	readFilteredDutyPot@i,w
  5473  0FBB  1C03               	skipc
  5474  0FBC  2FBE               	goto	u240_21
  5475  0FBD  2FBF               	goto	u240_20
  5476  0FBE                     u240_21:
  5477  0FBE  2FA7               	goto	i1l2477
  5478  0FBF                     u240_20:
  5479  0FBF                     i1l2483:
  5480                           
  5481                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5482  0FBF  3009               	movlw	9
  5483  0FC0  318E  26F0  318F   	fcall	_readADCRaw
  5484  0FC3  0871               	movf	?_readADCRaw+1,w
  5485  0FC4  0024               	movlb	4	; select bank4
  5486  0FC5  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5487  0FC6  0870               	movf	?_readADCRaw,w
  5488  0FC7  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5489  0FC8                     i1l2485:
  5490                           
  5491                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5492  0FC8  3000               	movlw	0
  5493  0FC9  0020               	movlb	0	; select bank0
  5494  0FCA  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5495  0FCB  3000               	movlw	0
  5496  0FCC  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5497  0FCD  3000               	movlw	0
  5498  0FCE  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5499  0FCF  3000               	movlw	0
  5500  0FD0  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5501  0FD1                     i1l2487:
  5502                           
  5503                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5504  0FD1  01A8               	clrf	readFilteredDutyPot@i_754
  5505  0FD2                     i1l2493:
  5506  0FD2  3528               	lslf	readFilteredDutyPot@i_754,w
  5507  0FD3  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5508  0FD4  0086               	movwf	6
  5509  0FD5  3002               	movlw	2	; select bank4/5
  5510  0FD6  0087               	movwf	7
  5511  0FD7  3F40               	moviw [0]fsr1
  5512  0FD8  00A0               	movwf	??_readFilteredDutyPot
  5513  0FD9  3F41               	moviw [1]fsr1
  5514  0FDA  00A1               	movwf	??_readFilteredDutyPot+1
  5515  0FDB  0820               	movf	??_readFilteredDutyPot,w
  5516  0FDC  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5517  0FDD  0821               	movf	??_readFilteredDutyPot+1,w
  5518  0FDE  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5519  0FDF  3000               	movlw	0
  5520  0FE0  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5521  0FE1  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5522  0FE2                     i1l2495:
  5523  0FE2  3001               	movlw	1
  5524  0FE3  00A0               	movwf	??_readFilteredDutyPot
  5525  0FE4  0820               	movf	??_readFilteredDutyPot,w
  5526  0FE5  07A8               	addwf	readFilteredDutyPot@i_754,f
  5527  0FE6                     i1l2497:
  5528  0FE6  3010               	movlw	16
  5529  0FE7  0228               	subwf	readFilteredDutyPot@i_754,w
  5530  0FE8  1C03               	skipc
  5531  0FE9  2FEB               	goto	u241_21
  5532  0FEA  2FEC               	goto	u241_20
  5533  0FEB                     u241_21:
  5534  0FEB  2FD2               	goto	i1l2493
  5535  0FEC                     u241_20:
  5536  0FEC                     i1l2499:
  5537                           
  5538                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5539  0FEC  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5540  0FED  00A0               	movwf	??_readFilteredDutyPot
  5541  0FEE  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5542  0FEF  00A1               	movwf	??_readFilteredDutyPot+1
  5543  0FF0  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5544  0FF1  00A2               	movwf	??_readFilteredDutyPot+2
  5545  0FF2  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5546  0FF3  00A3               	movwf	??_readFilteredDutyPot+3
  5547  0FF4  3004               	movlw	4
  5548  0FF5                     u242_25:
  5549  0FF5  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5550  0FF6  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5551  0FF7  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5552  0FF8  0CA0               	rrf	??_readFilteredDutyPot,f
  5553  0FF9                     u242_20:
  5554  0FF9  0B89               	decfsz	9,f
  5555  0FFA  2FF5               	goto	u242_25
  5556  0FFB  0821               	movf	??_readFilteredDutyPot+1,w
  5557  0FFC  00FB               	movwf	?_readFilteredDutyPot+1
  5558  0FFD  0820               	movf	??_readFilteredDutyPot,w
  5559  0FFE  00FA               	movwf	?_readFilteredDutyPot
  5560  0FFF                     i1l365:
  5561  0FFF  0008               	return
  5562  1000                     __end_of_readFilteredDutyPot:
  5563                           
  5564                           	psect	text24
  5565  0EF0                     __ptext24:	
  5566 ;; *************** function _readADCRaw *****************
  5567 ;; Defined at:
  5568 ;;		line 71 in file "ADC.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  gpioNumber      1    wreg     const enum E2798
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5573 ;;  i               1    8[COMMON] unsigned char 
  5574 ;;  returnValue     2    4[COMMON] unsigned int 
  5575 ;;  gpioValid       1    7[COMMON] unsigned char 
  5576 ;;  channel         1    6[COMMON] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2    0[COMMON] unsigned short 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5586 ;;      Params:         2       0       0       0       0       0
  5587 ;;      Locals:         6       0       0       0       0       0
  5588 ;;      Temps:          2       0       0       0       0       0
  5589 ;;      Totals:        10       0       0       0       0       0
  5590 ;;Total ram usage:       10 bytes
  5591 ;; Hardware stack levels used: 1
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_readFilteredDutyPot
  5596 ;;		_readFilteredFreqPot
  5597 ;;		_readFilteredVout
  5598 ;;		_readFilteredIDS
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602  0EF0                     _readADCRaw:	
  5603                           ;psect for function _readADCRaw
  5604                           
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5608                           ;readADCRaw@gpioNumber stored from wreg
  5609  0EF0  00F9               	movwf	readADCRaw@gpioNumber
  5610  0EF1                     i1l2203:
  5611                           
  5612                           ;ADC.c: 72:     uint8_t channel = 0;
  5613  0EF1  01F6               	clrf	readADCRaw@channel
  5614                           
  5615                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5616  0EF2  01F7               	clrf	readADCRaw@gpioValid
  5617  0EF3                     i1l2205:
  5618                           
  5619                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5620  0EF3  3005               	movlw	5
  5621  0EF4  0279               	subwf	readADCRaw@gpioNumber,w
  5622  0EF5  1803               	skipnc
  5623  0EF6  2EF8               	goto	u185_21
  5624  0EF7  2EF9               	goto	u185_20
  5625  0EF8                     u185_21:
  5626  0EF8  2EFF               	goto	i1l246
  5627  0EF9                     u185_20:
  5628  0EF9                     i1l2207:
  5629                           
  5630                           ;ADC.c: 76:         channel = gpioNumber;
  5631  0EF9  0879               	movf	readADCRaw@gpioNumber,w
  5632  0EFA  00F2               	movwf	??_readADCRaw
  5633  0EFB  0872               	movf	??_readADCRaw,w
  5634  0EFC  00F6               	movwf	readADCRaw@channel
  5635  0EFD                     i1l2209:
  5636                           
  5637                           ;ADC.c: 77:         gpioValid = 1;
  5638  0EFD  01F7               	clrf	readADCRaw@gpioValid
  5639  0EFE  0AF7               	incf	readADCRaw@gpioValid,f
  5640  0EFF                     i1l246:	
  5641                           ;ADC.c: 78:     }
  5642                           
  5643                           
  5644                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5645  0EFF  3009               	movlw	9
  5646  0F00  0279               	subwf	readADCRaw@gpioNumber,w
  5647  0F01  1C03               	skipc
  5648  0F02  2F04               	goto	u186_21
  5649  0F03  2F05               	goto	u186_20
  5650  0F04                     u186_21:
  5651  0F04  2F12               	goto	i1l247
  5652  0F05                     u186_20:
  5653  0F05                     i1l2211:
  5654  0F05  3010               	movlw	16
  5655  0F06  0279               	subwf	readADCRaw@gpioNumber,w
  5656  0F07  1803               	skipnc
  5657  0F08  2F0A               	goto	u187_21
  5658  0F09  2F0B               	goto	u187_20
  5659  0F0A                     u187_21:
  5660  0F0A  2F12               	goto	i1l247
  5661  0F0B                     u187_20:
  5662  0F0B                     i1l2213:
  5663                           
  5664                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5665  0F0B  0879               	movf	readADCRaw@gpioNumber,w
  5666  0F0C  3C14               	sublw	20
  5667  0F0D  00F2               	movwf	??_readADCRaw
  5668  0F0E  0872               	movf	??_readADCRaw,w
  5669  0F0F  00F6               	movwf	readADCRaw@channel
  5670  0F10                     i1l2215:
  5671                           
  5672                           ;ADC.c: 81:         gpioValid = 1;
  5673  0F10  01F7               	clrf	readADCRaw@gpioValid
  5674  0F11  0AF7               	incf	readADCRaw@gpioValid,f
  5675  0F12                     i1l247:	
  5676                           ;ADC.c: 82:     }
  5677                           
  5678                           
  5679                           ;ADC.c: 83:     if(gpioValid){
  5680  0F12  0877               	movf	readADCRaw@gpioValid,w
  5681  0F13  1903               	btfsc	3,2
  5682  0F14  2F16               	goto	u188_21
  5683  0F15  2F17               	goto	u188_20
  5684  0F16                     u188_21:
  5685  0F16  2F47               	goto	i1l2243
  5686  0F17                     u188_20:
  5687  0F17                     i1l2217:
  5688                           
  5689                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5690  0F17  0021               	movlb	1	; select bank1
  5691  0F18  081D               	movf	29,w	;volatile
  5692  0F19                     i1l2219:
  5693                           
  5694                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5695  0F19  3083               	movlw	131
  5696  0F1A  00F2               	movwf	??_readADCRaw
  5697  0F1B  0872               	movf	??_readADCRaw,w
  5698  0F1C  059D               	andwf	29,f	;volatile
  5699  0F1D                     i1l2221:
  5700                           
  5701                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5702  0F1D  0876               	movf	readADCRaw@channel,w	;volatile
  5703  0F1E  00F2               	movwf	??_readADCRaw
  5704  0F1F  3001               	movlw	1
  5705  0F20                     u189_25:
  5706  0F20  35F2               	lslf	??_readADCRaw,f
  5707  0F21  3EFF               	addlw	-1
  5708  0F22  1D03               	skipz
  5709  0F23  2F20               	goto	u189_25
  5710  0F24  3572               	lslf	??_readADCRaw,w
  5711  0F25  00F3               	movwf	??_readADCRaw+1
  5712  0F26  0873               	movf	??_readADCRaw+1,w
  5713  0F27  049D               	iorwf	29,f	;volatile
  5714  0F28                     i1l2223:
  5715                           
  5716                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5717  0F28  01F8               	clrf	readADCRaw@i
  5718  0F29                     i1l2229:
  5719  0F29  3001               	movlw	1
  5720  0F2A  00F2               	movwf	??_readADCRaw
  5721  0F2B  0872               	movf	??_readADCRaw,w
  5722  0F2C  07F8               	addwf	readADCRaw@i,f
  5723  0F2D                     i1l2231:
  5724  0F2D  3010               	movlw	16
  5725  0F2E  0278               	subwf	readADCRaw@i,w
  5726  0F2F  1C03               	skipc
  5727  0F30  2F32               	goto	u190_21
  5728  0F31  2F33               	goto	u190_20
  5729  0F32                     u190_21:
  5730  0F32  2F29               	goto	i1l2229
  5731  0F33                     u190_20:
  5732  0F33                     i1l251:
  5733                           
  5734                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5735  0F33  0021               	movlb	1	; select bank1
  5736  0F34  149D               	bsf	29,1	;volatile
  5737  0F35                     i1l252:	
  5738                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5739                           
  5740  0F35  189D               	btfsc	29,1	;volatile
  5741  0F36  2F38               	goto	u191_21
  5742  0F37  2F39               	goto	u191_20
  5743  0F38                     u191_21:
  5744  0F38  2F35               	goto	i1l252
  5745  0F39                     u191_20:
  5746  0F39                     i1l2233:
  5747                           
  5748                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5749  0F39  081C               	movf	28,w	;volatile
  5750  0F3A  00F5               	movwf	readADCRaw@returnValue+1
  5751  0F3B  081B               	movf	27,w	;volatile
  5752  0F3C  00F4               	movwf	readADCRaw@returnValue
  5753  0F3D                     i1l2235:
  5754                           
  5755                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5756  0F3D  3083               	movlw	131
  5757  0F3E  00F2               	movwf	??_readADCRaw
  5758  0F3F  0872               	movf	??_readADCRaw,w
  5759  0F40  059D               	andwf	29,f	;volatile
  5760  0F41                     i1l2237:
  5761                           
  5762                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5763  0F41  159D               	bsf	29,3	;volatile
  5764  0F42                     i1l2239:
  5765                           
  5766                           ;ADC.c: 98:             return returnValue;
  5767  0F42  0875               	movf	readADCRaw@returnValue+1,w
  5768  0F43  00F1               	movwf	?_readADCRaw+1
  5769  0F44  0874               	movf	readADCRaw@returnValue,w
  5770  0F45  00F0               	movwf	?_readADCRaw
  5771  0F46  2F49               	goto	i1l255
  5772  0F47                     i1l2243:
  5773  0F47  01F0               	clrf	?_readADCRaw
  5774  0F48  01F1               	clrf	?_readADCRaw+1
  5775  0F49                     i1l255:
  5776  0F49  0008               	return
  5777  0F4A                     __end_of_readADCRaw:
  5778                           
  5779                           	psect	text25
  5780  0C99                     __ptext25:	
  5781 ;; *************** function _currentTripMonitor *****************
  5782 ;; Defined at:
  5783 ;;		line 94 in file "CurrentSensor.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  2    4[None  ] int 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, pclath, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5797 ;;      Params:         0       0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0
  5799 ;;      Temps:          1       0       0       0       0       0
  5800 ;;      Totals:         1       0       0       0       0       0
  5801 ;;Total ram usage:        1 bytes
  5802 ;; Hardware stack levels used: 1
  5803 ;; Hardware stack levels required when called: 2
  5804 ;; This function calls:
  5805 ;;		_currentTripRead
  5806 ;;		_transToOverCurrentFault
  5807 ;;		i1_currentTripReset
  5808 ;; This function is called by:
  5809 ;;		_Tick490Hz
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813  0C99                     _currentTripMonitor:	
  5814                           ;psect for function _currentTripMonitor
  5815                           
  5816  0C99                     i1l2343:	
  5817                           ;incstack = 0
  5818                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5819                           
  5820                           
  5821                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5822  0C99  318C  24E8  318C   	fcall	_currentTripRead
  5823  0C9C  3A01               	xorlw	1
  5824  0C9D  1D03               	skipz
  5825  0C9E  2CA0               	goto	u216_21
  5826  0C9F  2CA1               	goto	u216_20
  5827  0CA0                     u216_21:
  5828  0CA0  2CB4               	goto	i1l2351
  5829  0CA1                     u216_20:
  5830  0CA1                     i1l2345:
  5831                           
  5832                           ;CurrentSensor.c: 97:         currentTripCount++;
  5833  0CA1  3001               	movlw	1
  5834  0CA2  00FB               	movwf	??_currentTripMonitor
  5835  0CA3  087B               	movf	??_currentTripMonitor,w
  5836  0CA4  0020               	movlb	0	; select bank0
  5837  0CA5  07E9               	addwf	_currentTripCount,f
  5838                           
  5839                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5840  0CA6  3003               	movlw	3
  5841  0CA7  0669               	xorwf	_currentTripCount,w
  5842  0CA8  1D03               	btfss	3,2
  5843  0CA9  2CAB               	goto	u217_21
  5844  0CAA  2CAC               	goto	u217_20
  5845  0CAB                     u217_21:
  5846  0CAB  2CB0               	goto	i1l2349
  5847  0CAC                     u217_20:
  5848  0CAC                     i1l2347:
  5849                           
  5850                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5851  0CAC  318B  23DB  318C   	fcall	_transToOverCurrentFault
  5852                           
  5853                           ;CurrentSensor.c: 100:         }
  5854  0CAF  2CBC               	goto	i1l545
  5855  0CB0                     i1l2349:
  5856                           
  5857                           ;CurrentSensor.c: 102:             currentTripReset();
  5858  0CB0  318B  23ED  318C   	fcall	i1_currentTripReset
  5859  0CB3  2CBC               	goto	i1l545
  5860  0CB4                     i1l2351:
  5861                           
  5862                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5863  0CB4  0020               	movlb	0	; select bank0
  5864  0CB5  0869               	movf	_currentTripCount,w
  5865  0CB6  1903               	btfsc	3,2
  5866  0CB7  2CB9               	goto	u218_21
  5867  0CB8  2CBA               	goto	u218_20
  5868  0CB9                     u218_21:
  5869  0CB9  2CBC               	goto	i1l545
  5870  0CBA                     u218_20:
  5871  0CBA                     i1l2353:
  5872                           
  5873                           ;CurrentSensor.c: 107:             currentTripCount--;
  5874  0CBA  3001               	movlw	1
  5875  0CBB  02E9               	subwf	_currentTripCount,f
  5876  0CBC                     i1l545:
  5877  0CBC  0008               	return
  5878  0CBD                     __end_of_currentTripMonitor:
  5879                           
  5880                           	psect	text26
  5881  0BED                     __ptext26:	
  5882 ;; *************** function i1_currentTripReset *****************
  5883 ;; Defined at:
  5884 ;;		line 71 in file "CurrentSensor.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0, pclath, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5898 ;;      Params:         0       0       0       0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0
  5901 ;;      Totals:         0       0       0       0       0       0
  5902 ;;Total ram usage:        0 bytes
  5903 ;; Hardware stack levels used: 1
  5904 ;; Hardware stack levels required when called: 1
  5905 ;; This function calls:
  5906 ;;		i1_writeGPIO
  5907 ;; This function is called by:
  5908 ;;		_currentTripMonitor
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912  0BED                     i1_currentTripReset:	
  5913                           ;psect for function i1_currentTripReset
  5914                           
  5915  0BED                     i1l2339:	
  5916                           ;incstack = 0
  5917                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5918                           
  5919                           
  5920                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5921  0BED  01F0               	clrf	i1writeGPIO@writeValue
  5922  0BEE  300B               	movlw	11
  5923  0BEF  3186  26D2  318B   	fcall	i1_writeGPIO
  5924  0BF2                     i1l2341:
  5925                           
  5926                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5927                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5928  0BF2  01F0               	clrf	i1writeGPIO@writeValue
  5929  0BF3  0AF0               	incf	i1writeGPIO@writeValue,f
  5930  0BF4  300B               	movlw	11
  5931  0BF5  3186  26D2  318B   	fcall	i1_writeGPIO
  5932  0BF8                     i1l534:
  5933  0BF8  0008               	return
  5934  0BF9                     __end_ofi1_currentTripReset:
  5935                           
  5936                           	psect	text27
  5937  06D2                     __ptext27:	
  5938 ;; *************** function i1_writeGPIO *****************
  5939 ;; Defined at:
  5940 ;;		line 52 in file "GPIO.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  gpioNumber      1    wreg     const enum E2798
  5943 ;;  writeValue      1    0[COMMON] unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5946 ;;  portNumber      1    5[COMMON] unsigned char 
  5947 ;;  portType        1    3[COMMON] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2, status,0
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5957 ;;      Params:         1       0       0       0       0       0
  5958 ;;      Locals:         3       0       0       0       0       0
  5959 ;;      Temps:          2       0       0       0       0       0
  5960 ;;      Totals:         6       0       0       0       0       0
  5961 ;;Total ram usage:        6 bytes
  5962 ;; Hardware stack levels used: 1
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_Tick490Hz
  5967 ;;		i1_currentTripReset
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971  06D2                     i1_writeGPIO:	
  5972                           ;psect for function i1_writeGPIO
  5973                           
  5974                           
  5975                           ;incstack = 0
  5976                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5977                           ;i1writeGPIO@gpioNumber stored from wreg
  5978  06D2  00F4               	movwf	i1writeGPIO@gpioNumber
  5979  06D3                     i1l2079:
  5980                           
  5981                           ;GPIO.c: 54:     uint8_t portType = 0;
  5982  06D3  01F3               	clrf	i1writeGPIO@portType
  5983  06D4                     i1l2081:
  5984                           
  5985                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5986  06D4  3008               	movlw	8
  5987  06D5  0274               	subwf	i1writeGPIO@gpioNumber,w
  5988  06D6  1C03               	skipc
  5989  06D7  2ED9               	goto	u150_21
  5990  06D8  2EDA               	goto	u150_20
  5991  06D9                     u150_21:
  5992  06D9  2EE2               	goto	i1l2087
  5993  06DA                     u150_20:
  5994  06DA                     i1l2083:
  5995                           
  5996                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  5997  06DA  0874               	movf	i1writeGPIO@gpioNumber,w
  5998  06DB  3EF8               	addlw	248
  5999  06DC  00F1               	movwf	??i1_writeGPIO
  6000  06DD  0871               	movf	??i1_writeGPIO,w
  6001  06DE  00F5               	movwf	i1writeGPIO@portNumber
  6002  06DF                     i1l2085:
  6003                           
  6004                           ;GPIO.c: 57:         portType = 1;
  6005  06DF  01F3               	clrf	i1writeGPIO@portType
  6006  06E0  0AF3               	incf	i1writeGPIO@portType,f
  6007                           
  6008                           ;GPIO.c: 58:     }
  6009  06E1  2EE7               	goto	i1l2091
  6010  06E2                     i1l2087:
  6011                           
  6012                           ;GPIO.c: 60:         portNumber = gpioNumber;
  6013  06E2  0874               	movf	i1writeGPIO@gpioNumber,w
  6014  06E3  00F1               	movwf	??i1_writeGPIO
  6015  06E4  0871               	movf	??i1_writeGPIO,w
  6016  06E5  00F5               	movwf	i1writeGPIO@portNumber
  6017  06E6                     i1l2089:
  6018                           
  6019                           ;GPIO.c: 61:         portType = 0;
  6020  06E6  01F3               	clrf	i1writeGPIO@portType
  6021  06E7                     i1l2091:
  6022                           
  6023                           ;GPIO.c: 64:     if(portType == 0){
  6024  06E7  0873               	movf	i1writeGPIO@portType,w
  6025  06E8  1D03               	btfss	3,2
  6026  06E9  2EEB               	goto	u151_21
  6027  06EA  2EEC               	goto	u151_20
  6028  06EB                     u151_21:
  6029  06EB  2F0C               	goto	i1l2099
  6030  06EC                     u151_20:
  6031  06EC                     i1l2093:
  6032                           
  6033                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  6034  06EC  0870               	movf	i1writeGPIO@writeValue,w
  6035  06ED  1903               	btfsc	3,2
  6036  06EE  2EF0               	goto	u152_21
  6037  06EF  2EF1               	goto	u152_20
  6038  06F0                     u152_21:
  6039  06F0  2EFE               	goto	i1l2097
  6040  06F1                     u152_20:
  6041  06F1                     i1l2095:
  6042  06F1  3001               	movlw	1
  6043  06F2  00F1               	movwf	??i1_writeGPIO
  6044  06F3  0A75               	incf	i1writeGPIO@portNumber,w
  6045  06F4  2EF6               	goto	u153_24
  6046  06F5                     u153_25:
  6047  06F5  35F1               	lslf	??i1_writeGPIO,f
  6048  06F6                     u153_24:
  6049  06F6  0B89               	decfsz	9,f
  6050  06F7  2EF5               	goto	u153_25
  6051  06F8  0871               	movf	??i1_writeGPIO,w
  6052  06F9  00F2               	movwf	??i1_writeGPIO+1
  6053  06FA  0872               	movf	??i1_writeGPIO+1,w
  6054  06FB  0022               	movlb	2	; select bank2
  6055  06FC  048C               	iorwf	12,f	;volatile
  6056  06FD  2F30               	goto	i1l320
  6057  06FE                     i1l2097:
  6058  06FE  3001               	movlw	1
  6059  06FF  00F1               	movwf	??i1_writeGPIO
  6060  0700  0A75               	incf	i1writeGPIO@portNumber,w
  6061  0701  2F03               	goto	u154_24
  6062  0702                     u154_25:
  6063  0702  35F1               	lslf	??i1_writeGPIO,f
  6064  0703                     u154_24:
  6065  0703  0B89               	decfsz	9,f
  6066  0704  2F02               	goto	u154_25
  6067  0705  0871               	movf	??i1_writeGPIO,w
  6068  0706  3AFF               	xorlw	255
  6069  0707  00F2               	movwf	??i1_writeGPIO+1
  6070  0708  0872               	movf	??i1_writeGPIO+1,w
  6071  0709  0022               	movlb	2	; select bank2
  6072  070A  058C               	andwf	12,f	;volatile
  6073  070B  2F30               	goto	i1l320
  6074  070C                     i1l2099:
  6075  070C  0373               	decf	i1writeGPIO@portType,w
  6076  070D  1D03               	btfss	3,2
  6077  070E  2F10               	goto	u155_21
  6078  070F  2F11               	goto	u155_20
  6079  0710                     u155_21:
  6080  0710  2F30               	goto	i1l320
  6081  0711                     u155_20:
  6082  0711                     i1l2101:
  6083                           
  6084                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6085  0711  0870               	movf	i1writeGPIO@writeValue,w
  6086  0712  1903               	btfsc	3,2
  6087  0713  2F15               	goto	u156_21
  6088  0714  2F16               	goto	u156_20
  6089  0715                     u156_21:
  6090  0715  2F23               	goto	i1l2105
  6091  0716                     u156_20:
  6092  0716                     i1l2103:
  6093  0716  3001               	movlw	1
  6094  0717  00F1               	movwf	??i1_writeGPIO
  6095  0718  0A75               	incf	i1writeGPIO@portNumber,w
  6096  0719  2F1B               	goto	u157_24
  6097  071A                     u157_25:
  6098  071A  35F1               	lslf	??i1_writeGPIO,f
  6099  071B                     u157_24:
  6100  071B  0B89               	decfsz	9,f
  6101  071C  2F1A               	goto	u157_25
  6102  071D  0871               	movf	??i1_writeGPIO,w
  6103  071E  00F2               	movwf	??i1_writeGPIO+1
  6104  071F  0872               	movf	??i1_writeGPIO+1,w
  6105  0720  0022               	movlb	2	; select bank2
  6106  0721  048D               	iorwf	13,f	;volatile
  6107  0722  2F30               	goto	i1l320
  6108  0723                     i1l2105:
  6109  0723  3001               	movlw	1
  6110  0724  00F1               	movwf	??i1_writeGPIO
  6111  0725  0A75               	incf	i1writeGPIO@portNumber,w
  6112  0726  2F28               	goto	u158_24
  6113  0727                     u158_25:
  6114  0727  35F1               	lslf	??i1_writeGPIO,f
  6115  0728                     u158_24:
  6116  0728  0B89               	decfsz	9,f
  6117  0729  2F27               	goto	u158_25
  6118  072A  0871               	movf	??i1_writeGPIO,w
  6119  072B  3AFF               	xorlw	255
  6120  072C  00F2               	movwf	??i1_writeGPIO+1
  6121  072D  0872               	movf	??i1_writeGPIO+1,w
  6122  072E  0022               	movlb	2	; select bank2
  6123  072F  058D               	andwf	13,f	;volatile
  6124  0730                     i1l320:
  6125  0730  0008               	return
  6126  0731                     __end_ofi1_writeGPIO:
  6127                           
  6128                           	psect	text28
  6129  0BDB                     __ptext28:	
  6130 ;; *************** function _transToOverCurrentFault *****************
  6131 ;; Defined at:
  6132 ;;		line 53 in file "StateMachine.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  1    wreg      void 
  6139 ;; Registers used:
  6140 ;;		wreg, status,2
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6146 ;;      Params:         0       0       0       0       0       0
  6147 ;;      Locals:         0       0       0       0       0       0
  6148 ;;      Temps:          1       0       0       0       0       0
  6149 ;;      Totals:         1       0       0       0       0       0
  6150 ;;Total ram usage:        1 bytes
  6151 ;; Hardware stack levels used: 1
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_currentTripMonitor
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159  0BDB                     _transToOverCurrentFault:	
  6160                           ;psect for function _transToOverCurrentFault
  6161                           
  6162  0BDB                     i1l2297:	
  6163                           ;incstack = 0
  6164                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6165                           
  6166                           
  6167                           ;StateMachine.c: 54:     setDuty = 0;
  6168  0BDB  0020               	movlb	0	; select bank0
  6169  0BDC  01E3               	clrf	_setDuty
  6170  0BDD  01E4               	clrf	_setDuty+1
  6171                           
  6172                           ;StateMachine.c: 55:     setPeriod = 0;
  6173  0BDE  01EE               	clrf	_setPeriod
  6174  0BDF                     i1l2299:
  6175                           
  6176                           ;StateMachine.c: 56:     currentState = overCurrentFault;
  6177  0BDF  3004               	movlw	4
  6178  0BE0  00F0               	movwf	??_transToOverCurrentFault
  6179  0BE1  0870               	movf	??_transToOverCurrentFault,w
  6180  0BE2  00EC               	movwf	_currentState
  6181  0BE3                     i1l572:
  6182  0BE3  0008               	return
  6183  0BE4                     __end_of_transToOverCurrentFault:
  6184                           
  6185                           	psect	text29
  6186  0CE8                     __ptext29:	
  6187 ;; *************** function _currentTripRead *****************
  6188 ;; Defined at:
  6189 ;;		line 31 in file "CurrentSensor.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      _Bool 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6203 ;;      Params:         0       0       0       0       0       0
  6204 ;;      Locals:         1       0       0       0       0       0
  6205 ;;      Temps:          1       0       0       0       0       0
  6206 ;;      Totals:         2       0       0       0       0       0
  6207 ;;Total ram usage:        2 bytes
  6208 ;; Hardware stack levels used: 1
  6209 ;; Hardware stack levels required when called: 1
  6210 ;; This function calls:
  6211 ;;		i1_readGPIO
  6212 ;; This function is called by:
  6213 ;;		_currentTripMonitor
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217  0CE8                     _currentTripRead:	
  6218                           ;psect for function _currentTripRead
  6219                           
  6220  0CE8                     i1l2283:	
  6221                           ;incstack = 0
  6222                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6223                           
  6224                           
  6225                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6226  0CE8  3001               	movlw	1
  6227  0CE9  318D  25BB  318C   	fcall	i1_readGPIO
  6228  0CEC  3A01               	xorlw	1
  6229  0CED  1D03               	skipz
  6230  0CEE  2CF0               	goto	u199_21
  6231  0CEF  2CF2               	goto	u199_20
  6232  0CF0                     u199_21:
  6233  0CF0  3001               	movlw	1
  6234  0CF1  2CF3               	goto	u200_20
  6235  0CF2                     u199_20:
  6236  0CF2  3000               	movlw	0
  6237  0CF3                     u200_20:
  6238  0CF3  00F9               	movwf	??_currentTripRead
  6239  0CF4  0879               	movf	??_currentTripRead,w
  6240  0CF5  0020               	movlb	0	; select bank0
  6241  0CF6  00EB               	movwf	_tripIDS
  6242                           
  6243                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6244  0CF7  3003               	movlw	3
  6245  0CF8  318D  25BB  318C   	fcall	i1_readGPIO
  6246  0CFB  3A01               	xorlw	1
  6247  0CFC  1D03               	skipz
  6248  0CFD  2CFF               	goto	u201_21
  6249  0CFE  2D01               	goto	u201_20
  6250  0CFF                     u201_21:
  6251  0CFF  3001               	movlw	1
  6252  0D00  2D02               	goto	u202_20
  6253  0D01                     u201_20:
  6254  0D01  3000               	movlw	0
  6255  0D02                     u202_20:
  6256  0D02  00F9               	movwf	??_currentTripRead
  6257  0D03  0879               	movf	??_currentTripRead,w
  6258  0D04  0020               	movlb	0	; select bank0
  6259  0D05  00EA               	movwf	_tripIL
  6260  0D06                     i1l2285:
  6261                           
  6262                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6263  0D06  01FA               	clrf	_currentTripRead$917
  6264  0D07  0AFA               	incf	_currentTripRead$917,f
  6265  0D08                     i1l2287:
  6266  0D08  086A               	movf	_tripIL,w
  6267  0D09  1D03               	btfss	3,2
  6268  0D0A  2D0C               	goto	u203_21
  6269  0D0B  2D0D               	goto	u203_20
  6270  0D0C                     u203_21:
  6271  0D0C  2D13               	goto	i1l2293
  6272  0D0D                     u203_20:
  6273  0D0D                     i1l2289:
  6274  0D0D  086B               	movf	_tripIDS,w
  6275  0D0E  1D03               	btfss	3,2
  6276  0D0F  2D11               	goto	u204_21
  6277  0D10  2D12               	goto	u204_20
  6278  0D11                     u204_21:
  6279  0D11  2D13               	goto	i1l2293
  6280  0D12                     u204_20:
  6281  0D12                     i1l2291:
  6282  0D12  01FA               	clrf	_currentTripRead$917
  6283  0D13                     i1l2293:
  6284  0D13  087A               	movf	_currentTripRead$917,w
  6285  0D14                     i1l517:
  6286  0D14  0008               	return
  6287  0D15                     __end_of_currentTripRead:
  6288                           
  6289                           	psect	text30
  6290  03FB                     __ptext30:	
  6291 ;; *************** function _controlRoutine *****************
  6292 ;; Defined at:
  6293 ;;		line 65 in file "Controller.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;		None
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  setDuty_unre    2   60[BANK0 ] short 
  6298 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6299 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6309 ;;      Params:         0       0       0       0       0       0
  6310 ;;      Locals:         0       6       0       0       0       0
  6311 ;;      Temps:          0       6       0       0       0       0
  6312 ;;      Totals:         0      12       0       0       0       0
  6313 ;;Total ram usage:       12 bytes
  6314 ;; Hardware stack levels used: 1
  6315 ;; Hardware stack levels required when called: 3
  6316 ;; This function calls:
  6317 ;;		___lldiv
  6318 ;;		___wmul
  6319 ;;		_runVoltageModeControl
  6320 ;; This function is called by:
  6321 ;;		_Tick490Hz
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325  03FB                     _controlRoutine:	
  6326                           ;psect for function _controlRoutine
  6327                           
  6328  03FB                     i1l2361:	
  6329                           ;incstack = 0
  6330                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6331                           
  6332                           
  6333                           ;Controller.c: 67:     if((currentState == voltageModeControl) || (currentState == curre
      +                          ntModeControl)){
  6334  03FB  3002               	movlw	2
  6335  03FC  0020               	movlb	0	; select bank0
  6336  03FD  066C               	xorwf	_currentState,w
  6337  03FE  1903               	btfsc	3,2
  6338  03FF  2C01               	goto	u221_21
  6339  0400  2C02               	goto	u221_20
  6340  0401                     u221_21:
  6341  0401  2C08               	goto	i1l2365
  6342  0402                     u221_20:
  6343  0402                     i1l2363:
  6344  0402  3003               	movlw	3
  6345  0403  066C               	xorwf	_currentState,w
  6346  0404  1D03               	btfss	3,2
  6347  0405  2C07               	goto	u222_21
  6348  0406  2C08               	goto	u222_20
  6349  0407                     u222_21:
  6350  0407  2CD0               	goto	i1l454
  6351  0408                     u222_20:
  6352  0408                     i1l2365:
  6353                           
  6354                           ;Controller.c: 68:         int16_t setDuty_unreg = 0;
  6355  0408  01DC               	clrf	controlRoutine@setDuty_unreg
  6356  0409  01DD               	clrf	controlRoutine@setDuty_unreg+1
  6357  040A                     i1l2367:
  6358                           
  6359                           ;Controller.c: 71:         if(currentState == voltageModeControl){
  6360  040A  3002               	movlw	2
  6361  040B  066C               	xorwf	_currentState,w
  6362  040C  1D03               	btfss	3,2
  6363  040D  2C0F               	goto	u223_21
  6364  040E  2C10               	goto	u223_20
  6365  040F                     u223_21:
  6366  040F  2C4B               	goto	i1l2377
  6367  0410                     u223_20:
  6368  0410                     i1l2369:
  6369                           
  6370                           ;Controller.c: 73:             runVoltageModeControl();
  6371  0410  3180  20B4  3183   	fcall	_runVoltageModeControl
  6372  0413                     i1l2371:
  6373                           
  6374                           ;Controller.c: 74:             setPeriod = 79u;
  6375  0413  304F               	movlw	79
  6376  0414  0020               	movlb	0	; select bank0
  6377  0415  00D2               	movwf	??_controlRoutine
  6378  0416  0852               	movf	??_controlRoutine,w
  6379  0417  00EE               	movwf	_setPeriod
  6380  0418                     i1l2373:
  6381                           
  6382                           ;Controller.c: 76:             setDuty_unreg = (int16_t) (((uint32_t)(((uint16_t) 50u) *
      +                           setPeriod)) / 25) + voltageModeVariables.sumOutput;
  6383  0418  3016               	movlw	22
  6384  0419  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6385  041A  0086               	movwf	6
  6386  041B  0187               	clrf	7
  6387  041C  3000               	movlw	0
  6388  041D  00F9               	movwf	___lldiv@divisor+3
  6389  041E  3000               	movlw	0
  6390  041F  00F8               	movwf	___lldiv@divisor+2
  6391  0420  3000               	movlw	0
  6392  0421  00F7               	movwf	___lldiv@divisor+1
  6393  0422  3019               	movlw	25
  6394  0423  00F6               	movwf	___lldiv@divisor
  6395  0424  3032               	movlw	50
  6396  0425  00F2               	movwf	___wmul@multiplicand
  6397  0426  3000               	movlw	0
  6398  0427  00F3               	movwf	___wmul@multiplicand+1
  6399  0428  086E               	movf	_setPeriod,w
  6400  0429  00D2               	movwf	??_controlRoutine
  6401  042A  01D3               	clrf	??_controlRoutine+1
  6402  042B  0852               	movf	??_controlRoutine,w
  6403  042C  00F0               	movwf	___wmul@multiplier
  6404  042D  0853               	movf	??_controlRoutine+1,w
  6405  042E  00F1               	movwf	___wmul@multiplier+1
  6406  042F  318C  245A  3183   	fcall	___wmul
  6407  0432  0870               	movf	?___wmul,w
  6408  0433  0020               	movlb	0	; select bank0
  6409  0434  00D4               	movwf	??_controlRoutine+2
  6410  0435  0871               	movf	?___wmul+1,w
  6411  0436  00D5               	movwf	??_controlRoutine+3
  6412  0437  01D6               	clrf	??_controlRoutine+4
  6413  0438  01D7               	clrf	??_controlRoutine+5
  6414  0439  0857               	movf	??_controlRoutine+5,w
  6415  043A  00FD               	movwf	___lldiv@dividend+3
  6416  043B  0856               	movf	??_controlRoutine+4,w
  6417  043C  00FC               	movwf	___lldiv@dividend+2
  6418  043D  0855               	movf	??_controlRoutine+3,w
  6419  043E  00FB               	movwf	___lldiv@dividend+1
  6420  043F  0854               	movf	??_controlRoutine+2,w
  6421  0440  00FA               	movwf	___lldiv@dividend
  6422  0441  318F  274A  3183   	fcall	___lldiv
  6423  0444  3F40               	moviw [0]fsr1
  6424  0445  0776               	addwf	?___lldiv,w
  6425  0446  0020               	movlb	0	; select bank0
  6426  0447  00DC               	movwf	controlRoutine@setDuty_unreg
  6427  0448  3F41               	moviw [1]fsr1
  6428  0449  3D77               	addwfc	?___lldiv+1,w
  6429  044A  00DD               	movwf	controlRoutine@setDuty_unreg+1
  6430  044B                     i1l2377:
  6431                           
  6432                           ;Controller.c: 88:         uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * 
      +                          setPeriod)) / 25);
  6433  044B  3000               	movlw	0
  6434  044C  00F9               	movwf	___lldiv@divisor+3
  6435  044D  3000               	movlw	0
  6436  044E  00F8               	movwf	___lldiv@divisor+2
  6437  044F  3000               	movlw	0
  6438  0450  00F7               	movwf	___lldiv@divisor+1
  6439  0451  3019               	movlw	25
  6440  0452  00F6               	movwf	___lldiv@divisor
  6441  0453  305A               	movlw	90
  6442  0454  00F2               	movwf	___wmul@multiplicand
  6443  0455  3000               	movlw	0
  6444  0456  00F3               	movwf	___wmul@multiplicand+1
  6445  0457  086E               	movf	_setPeriod,w
  6446  0458  00D2               	movwf	??_controlRoutine
  6447  0459  01D3               	clrf	??_controlRoutine+1
  6448  045A  0852               	movf	??_controlRoutine,w
  6449  045B  00F0               	movwf	___wmul@multiplier
  6450  045C  0853               	movf	??_controlRoutine+1,w
  6451  045D  00F1               	movwf	___wmul@multiplier+1
  6452  045E  318C  245A  3183   	fcall	___wmul
  6453  0461  0870               	movf	?___wmul,w
  6454  0462  0020               	movlb	0	; select bank0
  6455  0463  00D4               	movwf	??_controlRoutine+2
  6456  0464  0871               	movf	?___wmul+1,w
  6457  0465  00D5               	movwf	??_controlRoutine+3
  6458  0466  01D6               	clrf	??_controlRoutine+4
  6459  0467  01D7               	clrf	??_controlRoutine+5
  6460  0468  0857               	movf	??_controlRoutine+5,w
  6461  0469  00FD               	movwf	___lldiv@dividend+3
  6462  046A  0856               	movf	??_controlRoutine+4,w
  6463  046B  00FC               	movwf	___lldiv@dividend+2
  6464  046C  0855               	movf	??_controlRoutine+3,w
  6465  046D  00FB               	movwf	___lldiv@dividend+1
  6466  046E  0854               	movf	??_controlRoutine+2,w
  6467  046F  00FA               	movwf	___lldiv@dividend
  6468  0470  318F  274A  3183   	fcall	___lldiv
  6469  0473  0877               	movf	?___lldiv+1,w
  6470  0474  0020               	movlb	0	; select bank0
  6471  0475  00D9               	movwf	controlRoutine@maxDuty+1
  6472  0476  0876               	movf	?___lldiv,w
  6473  0477  00D8               	movwf	controlRoutine@maxDuty
  6474                           
  6475                           ;Controller.c: 89:         uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * 
      +                          setPeriod)) / 25);
  6476  0478  3000               	movlw	0
  6477  0479  00F9               	movwf	___lldiv@divisor+3
  6478  047A  3000               	movlw	0
  6479  047B  00F8               	movwf	___lldiv@divisor+2
  6480  047C  3000               	movlw	0
  6481  047D  00F7               	movwf	___lldiv@divisor+1
  6482  047E  3019               	movlw	25
  6483  047F  00F6               	movwf	___lldiv@divisor
  6484  0480  300A               	movlw	10
  6485  0481  00F2               	movwf	___wmul@multiplicand
  6486  0482  3000               	movlw	0
  6487  0483  00F3               	movwf	___wmul@multiplicand+1
  6488  0484  086E               	movf	_setPeriod,w
  6489  0485  00D2               	movwf	??_controlRoutine
  6490  0486  01D3               	clrf	??_controlRoutine+1
  6491  0487  0852               	movf	??_controlRoutine,w
  6492  0488  00F0               	movwf	___wmul@multiplier
  6493  0489  0853               	movf	??_controlRoutine+1,w
  6494  048A  00F1               	movwf	___wmul@multiplier+1
  6495  048B  318C  245A  3183   	fcall	___wmul
  6496  048E  0870               	movf	?___wmul,w
  6497  048F  0020               	movlb	0	; select bank0
  6498  0490  00D4               	movwf	??_controlRoutine+2
  6499  0491  0871               	movf	?___wmul+1,w
  6500  0492  00D5               	movwf	??_controlRoutine+3
  6501  0493  01D6               	clrf	??_controlRoutine+4
  6502  0494  01D7               	clrf	??_controlRoutine+5
  6503  0495  0857               	movf	??_controlRoutine+5,w
  6504  0496  00FD               	movwf	___lldiv@dividend+3
  6505  0497  0856               	movf	??_controlRoutine+4,w
  6506  0498  00FC               	movwf	___lldiv@dividend+2
  6507  0499  0855               	movf	??_controlRoutine+3,w
  6508  049A  00FB               	movwf	___lldiv@dividend+1
  6509  049B  0854               	movf	??_controlRoutine+2,w
  6510  049C  00FA               	movwf	___lldiv@dividend
  6511  049D  318F  274A  3183   	fcall	___lldiv
  6512  04A0  0877               	movf	?___lldiv+1,w
  6513  04A1  0020               	movlb	0	; select bank0
  6514  04A2  00DB               	movwf	controlRoutine@minDuty+1
  6515  04A3  0876               	movf	?___lldiv,w
  6516  04A4  00DA               	movwf	controlRoutine@minDuty
  6517  04A5                     i1l2379:
  6518                           
  6519                           ;Controller.c: 91:         setDuty = setDuty_unreg;
  6520  04A5  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6521  04A6  00E4               	movwf	_setDuty+1
  6522  04A7  085C               	movf	controlRoutine@setDuty_unreg,w
  6523  04A8  00E3               	movwf	_setDuty
  6524  04A9                     i1l2381:
  6525                           
  6526                           ;Controller.c: 93:         if(setDuty_unreg < 0) setDuty = minDuty;
  6527  04A9  1FDD               	btfss	controlRoutine@setDuty_unreg+1,7
  6528  04AA  2CAC               	goto	u224_21
  6529  04AB  2CAD               	goto	u224_20
  6530  04AC                     u224_21:
  6531  04AC  2CB2               	goto	i1l448
  6532  04AD                     u224_20:
  6533  04AD                     i1l2383:
  6534  04AD  085B               	movf	controlRoutine@minDuty+1,w
  6535  04AE  00E4               	movwf	_setDuty+1
  6536  04AF  085A               	movf	controlRoutine@minDuty,w
  6537  04B0  00E3               	movwf	_setDuty
  6538  04B1  2CD0               	goto	i1l454
  6539  04B2                     i1l448:	
  6540                           ;Controller.c: 94:         else if(setDuty_unreg >= 0){
  6541                           
  6542  04B2  1BDD               	btfsc	controlRoutine@setDuty_unreg+1,7
  6543  04B3  2CB5               	goto	u225_21
  6544  04B4  2CB6               	goto	u225_20
  6545  04B5                     u225_21:
  6546  04B5  2CD0               	goto	i1l454
  6547  04B6                     u225_20:
  6548  04B6                     i1l2385:
  6549                           
  6550                           ;Controller.c: 95:             if(setDuty_unreg < minDuty) setDuty = minDuty;
  6551  04B6  085B               	movf	controlRoutine@minDuty+1,w
  6552  04B7  025D               	subwf	controlRoutine@setDuty_unreg+1,w
  6553  04B8  1D03               	skipz
  6554  04B9  2CBC               	goto	u226_25
  6555  04BA  085A               	movf	controlRoutine@minDuty,w
  6556  04BB  025C               	subwf	controlRoutine@setDuty_unreg,w
  6557  04BC                     u226_25:
  6558  04BC  1803               	skipnc
  6559  04BD  2CBF               	goto	u226_21
  6560  04BE  2CC0               	goto	u226_20
  6561  04BF                     u226_21:
  6562  04BF  2CC1               	goto	i1l2389
  6563  04C0                     u226_20:
  6564  04C0  2CAD               	goto	i1l2383
  6565  04C1                     i1l2389:
  6566  04C1  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6567  04C2  0259               	subwf	controlRoutine@maxDuty+1,w
  6568  04C3  1D03               	skipz
  6569  04C4  2CC7               	goto	u227_25
  6570  04C5  085C               	movf	controlRoutine@setDuty_unreg,w
  6571  04C6  0258               	subwf	controlRoutine@maxDuty,w
  6572  04C7                     u227_25:
  6573  04C7  1803               	skipnc
  6574  04C8  2CCA               	goto	u227_21
  6575  04C9  2CCB               	goto	u227_20
  6576  04CA                     u227_21:
  6577  04CA  2CD0               	goto	i1l449
  6578  04CB                     u227_20:
  6579  04CB                     i1l2391:
  6580  04CB  0859               	movf	controlRoutine@maxDuty+1,w
  6581  04CC  00E4               	movwf	_setDuty+1
  6582  04CD  0858               	movf	controlRoutine@maxDuty,w
  6583  04CE  00E3               	movwf	_setDuty
  6584  04CF  2CD0               	goto	i1l454
  6585  04D0                     i1l449:
  6586  04D0                     i1l454:
  6587  04D0  0008               	return
  6588  04D1                     __end_of_controlRoutine:
  6589                           
  6590                           	psect	text31
  6591  00B4                     __ptext31:	
  6592 ;; *************** function _runVoltageModeControl *****************
  6593 ;; Defined at:
  6594 ;;		line 106 in file "Controller.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  propMult        8   40[BANK0 ] long long 
  6599 ;;  integralMult    8   32[BANK0 ] long long 
  6600 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6610 ;;      Params:         0       0       0       0       0       0
  6611 ;;      Locals:         0      18       0       0       0       0
  6612 ;;      Temps:          0      16       0       0       0       0
  6613 ;;      Totals:         0      34       0       0       0       0
  6614 ;;Total ram usage:       34 bytes
  6615 ;; Hardware stack levels used: 1
  6616 ;; Hardware stack levels required when called: 2
  6617 ;; This function calls:
  6618 ;;		___omul
  6619 ;;		_abs
  6620 ;;		_convertRawToMilliVolts
  6621 ;;		i1_readGPIO
  6622 ;; This function is called by:
  6623 ;;		_controlRoutine
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627  00B4                     _runVoltageModeControl:	
  6628                           ;psect for function _runVoltageModeControl
  6629                           
  6630  00B4                     i1l2247:	
  6631                           ;incstack = 0
  6632                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6633                           
  6634                           
  6635                           ;Controller.c: 111:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6636  00B4  0020               	movlb	0	; select bank0
  6637  00B5  0860               	movf	_filteredVout+1,w
  6638  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6639  00B7  085F               	movf	_filteredVout,w
  6640  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6641  00B9  318D  2580  3180   	fcall	_convertRawToMilliVolts
  6642  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6643  00BD  0020               	movlb	0	; select bank0
  6644  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6645  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6646  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6647                           
  6648                           ;Controller.c: 114:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6649  00C1  3008               	movlw	8
  6650  00C2  318D  25BB  3180   	fcall	i1_readGPIO
  6651  00C5  3A00               	xorlw	0
  6652  00C6  1903               	skipnz
  6653  00C7  28C9               	goto	u192_21
  6654  00C8  28CA               	goto	u192_20
  6655  00C9                     u192_21:
  6656  00C9  28D9               	goto	i1l2251
  6657  00CA                     u192_20:
  6658  00CA                     i1l2249:
  6659  00CA  3080               	movlw	128
  6660  00CB  0020               	movlb	0	; select bank0
  6661  00CC  00B0               	movwf	??_runVoltageModeControl
  6662  00CD  303E               	movlw	62
  6663  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6664  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6665  00D0  0230               	subwf	??_runVoltageModeControl,w
  6666  00D1  0021               	movlb	1	; select bank1
  6667  00D2  00B6               	movwf	_voltageModeVariables^(0+128)
  6668  00D3  0020               	movlb	0	; select bank0
  6669  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6670  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6671  00D6  0021               	movlb	1	; select bank1
  6672  00D7  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6673  00D8  28E7               	goto	i1l2253
  6674  00D9                     i1l2251:
  6675  00D9  30E0               	movlw	224
  6676  00DA  0020               	movlb	0	; select bank0
  6677  00DB  00B0               	movwf	??_runVoltageModeControl
  6678  00DC  302E               	movlw	46
  6679  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6680  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6681  00DF  0230               	subwf	??_runVoltageModeControl,w
  6682  00E0  0021               	movlb	1	; select bank1
  6683  00E1  00B6               	movwf	_voltageModeVariables^(0+128)
  6684  00E2  0020               	movlb	0	; select bank0
  6685  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6686  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6687  00E5  0021               	movlb	1	; select bank1
  6688  00E6  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6689  00E7                     i1l2253:
  6690                           
  6691                           ;Controller.c: 118:    int64_t integralMult = ((int64_t) (36u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6692  00E7  0836               	movf	_voltageModeVariables^(0+128),w
  6693  00E8  0020               	movlb	0	; select bank0
  6694  00E9  00A0               	movwf	___omul@multiplier
  6695  00EA  0021               	movlb	1	; select bank1
  6696  00EB  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  6697  00EC  0020               	movlb	0	; select bank0
  6698  00ED  00A1               	movwf	___omul@multiplier+1
  6699  00EE  0D89               	rlf	9,f
  6700  00EF  3B89               	subwfb	9,f
  6701  00F0  0989               	comf	9,f
  6702  00F1  00A2               	movwf	___omul@multiplier+2
  6703  00F2  00A3               	movwf	___omul@multiplier+3
  6704  00F3  00A4               	movwf	___omul@multiplier+4
  6705  00F4  00A5               	movwf	___omul@multiplier+5
  6706  00F5  00A6               	movwf	___omul@multiplier+6
  6707  00F6  00A7               	movwf	___omul@multiplier+7
  6708  00F7  3000               	movlw	0
  6709  00F8  00AF               	movwf	___omul@multiplicand+7
  6710  00F9  3000               	movlw	0
  6711  00FA  00AE               	movwf	___omul@multiplicand+6
  6712  00FB  3000               	movlw	0
  6713  00FC  00AD               	movwf	___omul@multiplicand+5
  6714  00FD  3000               	movlw	0
  6715  00FE  00AC               	movwf	___omul@multiplicand+4
  6716  00FF  3000               	movlw	0
  6717  0100  00AB               	movwf	___omul@multiplicand+3
  6718  0101  3000               	movlw	0
  6719  0102  00AA               	movwf	___omul@multiplicand+2
  6720  0103  3025               	movlw	37
  6721  0104  00A9               	movwf	___omul@multiplicand+1
  6722  0105  308C               	movlw	140
  6723  0106  00A8               	movwf	___omul@multiplicand
  6724  0107  318E  264C  3180   	fcall	___omul
  6725  010A  0020               	movlb	0	; select bank0
  6726  010B  0820               	movf	?___omul,w
  6727  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6728  010D  0821               	movf	?___omul+1,w
  6729  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6730  010F  0822               	movf	?___omul+2,w
  6731  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6732  0111  0823               	movf	?___omul+3,w
  6733  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6734  0113  0824               	movf	?___omul+4,w
  6735  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6736  0115  0825               	movf	?___omul+5,w
  6737  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6738  0117  0826               	movf	?___omul+6,w
  6739  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6740  0119  0827               	movf	?___omul+7,w
  6741  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6742  011B                     i1l2255:
  6743                           
  6744                           ;Controller.c: 120:    voltageModeVariables.integral = integralMult;
  6745  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6746  011C  0021               	movlb	1	; select bank1
  6747  011D  00BB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6748  011E  0020               	movlb	0	; select bank0
  6749  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6750  0120  0021               	movlb	1	; select bank1
  6751  0121  00BA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6752  0122  0020               	movlb	0	; select bank0
  6753  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6754  0124  0021               	movlb	1	; select bank1
  6755  0125  00B9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6756  0126  0020               	movlb	0	; select bank0
  6757  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6758  0128  0021               	movlb	1	; select bank1
  6759  0129  00B8               	movwf	(_voltageModeVariables^(0+128)+2)
  6760  012A                     i1l2257:
  6761                           
  6762                           ;Controller.c: 121:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6763  012A  300E               	movlw	14
  6764  012B  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6765  012C  0086               	movwf	6
  6766  012D  0187               	clrf	7
  6767  012E  3F40               	moviw [0]fsr1
  6768  012F  0020               	movlb	0	; select bank0
  6769  0130  00B0               	movwf	??_runVoltageModeControl
  6770  0131  3F41               	moviw [1]fsr1
  6771  0132  00B1               	movwf	??_runVoltageModeControl+1
  6772  0133  3F42               	moviw [2]fsr1
  6773  0134  00B2               	movwf	??_runVoltageModeControl+2
  6774  0135  3F43               	moviw [3]fsr1
  6775  0136  00B3               	movwf	??_runVoltageModeControl+3
  6776  0137  3F44               	moviw [4]fsr1
  6777  0138  00B4               	movwf	??_runVoltageModeControl+4
  6778  0139  3F45               	moviw [5]fsr1
  6779  013A  00B5               	movwf	??_runVoltageModeControl+5
  6780  013B  3F46               	moviw [6]fsr1
  6781  013C  00B6               	movwf	??_runVoltageModeControl+6
  6782  013D  3F47               	moviw [7]fsr1
  6783  013E  00B7               	movwf	??_runVoltageModeControl+7
  6784  013F  0021               	movlb	1	; select bank1
  6785  0140  0838               	movf	(_voltageModeVariables^(0+128)+2),w
  6786  0141  0020               	movlb	0	; select bank0
  6787  0142  00B8               	movwf	??_runVoltageModeControl+8
  6788  0143  0021               	movlb	1	; select bank1
  6789  0144  0839               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6790  0145  0020               	movlb	0	; select bank0
  6791  0146  00B9               	movwf	??_runVoltageModeControl+9
  6792  0147  0021               	movlb	1	; select bank1
  6793  0148  083A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6794  0149  0020               	movlb	0	; select bank0
  6795  014A  00BA               	movwf	??_runVoltageModeControl+10
  6796  014B  0021               	movlb	1	; select bank1
  6797  014C  083B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6798  014D  0020               	movlb	0	; select bank0
  6799  014E  00BB               	movwf	??_runVoltageModeControl+11
  6800  014F  3000               	movlw	0
  6801  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6802  0151  30FF               	movlw	255
  6803  0152  00BC               	movwf	??_runVoltageModeControl+12
  6804  0153  00BD               	movwf	??_runVoltageModeControl+13
  6805  0154  00BE               	movwf	??_runVoltageModeControl+14
  6806  0155  00BF               	movwf	??_runVoltageModeControl+15
  6807  0156  0838               	movf	??_runVoltageModeControl+8,w
  6808  0157  07B0               	addwf	??_runVoltageModeControl,f
  6809  0158  0839               	movf	??_runVoltageModeControl+9,w
  6810  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6811  015A  083A               	movf	??_runVoltageModeControl+10,w
  6812  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6813  015C  083B               	movf	??_runVoltageModeControl+11,w
  6814  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6815  015E  083C               	movf	??_runVoltageModeControl+12,w
  6816  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6817  0160  083D               	movf	??_runVoltageModeControl+13,w
  6818  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6819  0162  083E               	movf	??_runVoltageModeControl+14,w
  6820  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6821  0164  083F               	movf	??_runVoltageModeControl+15,w
  6822  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6823  0166  0837               	movf	??_runVoltageModeControl+7,w
  6824  0167  0021               	movlb	1	; select bank1
  6825  0168  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6826  0169  0020               	movlb	0	; select bank0
  6827  016A  0836               	movf	??_runVoltageModeControl+6,w
  6828  016B  0021               	movlb	1	; select bank1
  6829  016C  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6830  016D  0020               	movlb	0	; select bank0
  6831  016E  0835               	movf	??_runVoltageModeControl+5,w
  6832  016F  0021               	movlb	1	; select bank1
  6833  0170  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6834  0171  0020               	movlb	0	; select bank0
  6835  0172  0834               	movf	??_runVoltageModeControl+4,w
  6836  0173  0021               	movlb	1	; select bank1
  6837  0174  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6838  0175  0020               	movlb	0	; select bank0
  6839  0176  0833               	movf	??_runVoltageModeControl+3,w
  6840  0177  0021               	movlb	1	; select bank1
  6841  0178  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6842  0179  0020               	movlb	0	; select bank0
  6843  017A  0832               	movf	??_runVoltageModeControl+2,w
  6844  017B  0021               	movlb	1	; select bank1
  6845  017C  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6846  017D  0020               	movlb	0	; select bank0
  6847  017E  0831               	movf	??_runVoltageModeControl+1,w
  6848  017F  0021               	movlb	1	; select bank1
  6849  0180  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6850  0181  0020               	movlb	0	; select bank0
  6851  0182  0830               	movf	??_runVoltageModeControl,w
  6852  0183  0021               	movlb	1	; select bank1
  6853  0184  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6854  0185                     i1l2259:
  6855                           
  6856                           ;Controller.c: 124:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6857  0185  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6858  0186  3A80               	xorlw	128
  6859  0187  0020               	movlb	0	; select bank0
  6860  0188  00B0               	movwf	??_runVoltageModeControl
  6861  0189  0021               	movlb	1	; select bank1
  6862  018A  084B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6863  018B  3A80               	xorlw	128
  6864  018C  0020               	movlb	0	; select bank0
  6865  018D  0230               	subwf	??_runVoltageModeControl,w
  6866  018E  0021               	movlb	1	; select bank1
  6867  018F  1D03               	skipz
  6868  0190  29AB               	goto	u193_23
  6869  0191  084A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6870  0192  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6871  0193  1D03               	skipz
  6872  0194  29AB               	goto	u193_23
  6873  0195  0849               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6874  0196  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6875  0197  1D03               	skipz
  6876  0198  29AB               	goto	u193_23
  6877  0199  0848               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6878  019A  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6879  019B  1D03               	skipz
  6880  019C  29AB               	goto	u193_23
  6881  019D  0847               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6882  019E  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6883  019F  1D03               	skipz
  6884  01A0  29AB               	goto	u193_23
  6885  01A1  0846               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6886  01A2  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6887  01A3  1D03               	skipz
  6888  01A4  29AB               	goto	u193_23
  6889  01A5  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6890  01A6  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6891  01A7  1D03               	skipz
  6892  01A8  29AB               	goto	u193_23
  6893  01A9  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6894  01AA  0220               	subwf	_integratorScaledLimit^(0+128),w
  6895  01AB                     u193_23:
  6896  01AB  1803               	skipnc
  6897  01AC  29AE               	goto	u193_21
  6898  01AD  29AF               	goto	u193_20
  6899  01AE                     u193_21:
  6900  01AE  29BF               	goto	i1l2263
  6901  01AF                     u193_20:
  6902  01AF                     i1l2261:
  6903                           
  6904                           ;Controller.c: 125:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6905  01AF  0820               	movf	_integratorScaledLimit^(0+128),w
  6906  01B0  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6907  01B1  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6908  01B2  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6909  01B3  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6910  01B4  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6911  01B5  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6912  01B6  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6913  01B7  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6914  01B8  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6915  01B9  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6916  01BA  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6917  01BB  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6918  01BC  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6919  01BD  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6920  01BE  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6921  01BF                     i1l2263:
  6922                           
  6923                           ;Controller.c: 128:    if(voltageModeVariables.integralOutputScaled < 0){
  6924  01BF  300E               	movlw	14
  6925  01C0  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6926  01C1  0086               	movwf	6
  6927  01C2  0187               	clrf	7
  6928  01C3  3F47               	moviw [7]fsr1
  6929  01C4  0020               	movlb	0	; select bank0
  6930  01C5  00B0               	movwf	??_runVoltageModeControl
  6931  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  6932  01C7  29C9               	goto	u194_21
  6933  01C8  29CA               	goto	u194_20
  6934  01C9                     u194_21:
  6935  01C9  2A67               	goto	i1l2269
  6936  01CA                     u194_20:
  6937  01CA                     i1l2265:
  6938                           
  6939                           ;Controller.c: 129:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  6940  01CA  0021               	movlb	1	; select bank1
  6941  01CB  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6942  01CC  00F1               	movwf	abs@a+1
  6943  01CD  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6944  01CE  00F0               	movwf	abs@a
  6945  01CF  318C  2407  3180   	fcall	_abs
  6946  01D2  0870               	movf	?_abs,w
  6947  01D3  0020               	movlb	0	; select bank0
  6948  01D4  00B0               	movwf	??_runVoltageModeControl
  6949  01D5  0871               	movf	?_abs+1,w
  6950  01D6  00B1               	movwf	??_runVoltageModeControl+1
  6951  01D7  3000               	movlw	0
  6952  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6953  01D9  30FF               	movlw	255
  6954  01DA  00B2               	movwf	??_runVoltageModeControl+2
  6955  01DB  00B3               	movwf	??_runVoltageModeControl+3
  6956  01DC  00B4               	movwf	??_runVoltageModeControl+4
  6957  01DD  00B5               	movwf	??_runVoltageModeControl+5
  6958  01DE  00B6               	movwf	??_runVoltageModeControl+6
  6959  01DF  00B7               	movwf	??_runVoltageModeControl+7
  6960  01E0  0021               	movlb	1	; select bank1
  6961  01E1  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6962  01E2  3A80               	xorlw	128
  6963  01E3  0020               	movlb	0	; select bank0
  6964  01E4  00B8               	movwf	??_runVoltageModeControl+8
  6965  01E5  0837               	movf	??_runVoltageModeControl+7,w
  6966  01E6  3A80               	xorlw	128
  6967  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  6968  01E8  0021               	movlb	1	; select bank1
  6969  01E9  1D03               	skipz
  6970  01EA  2A13               	goto	u195_23
  6971  01EB  0020               	movlb	0	; select bank0
  6972  01EC  0836               	movf	??_runVoltageModeControl+6,w
  6973  01ED  0021               	movlb	1	; select bank1
  6974  01EE  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6975  01EF  1D03               	skipz
  6976  01F0  2A13               	goto	u195_23
  6977  01F1  0020               	movlb	0	; select bank0
  6978  01F2  0835               	movf	??_runVoltageModeControl+5,w
  6979  01F3  0021               	movlb	1	; select bank1
  6980  01F4  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6981  01F5  1D03               	skipz
  6982  01F6  2A13               	goto	u195_23
  6983  01F7  0020               	movlb	0	; select bank0
  6984  01F8  0834               	movf	??_runVoltageModeControl+4,w
  6985  01F9  0021               	movlb	1	; select bank1
  6986  01FA  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6987  01FB  1D03               	skipz
  6988  01FC  2A13               	goto	u195_23
  6989  01FD  0020               	movlb	0	; select bank0
  6990  01FE  0833               	movf	??_runVoltageModeControl+3,w
  6991  01FF  0021               	movlb	1	; select bank1
  6992  0200  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6993  0201  1D03               	skipz
  6994  0202  2A13               	goto	u195_23
  6995  0203  0020               	movlb	0	; select bank0
  6996  0204  0832               	movf	??_runVoltageModeControl+2,w
  6997  0205  0021               	movlb	1	; select bank1
  6998  0206  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6999  0207  1D03               	skipz
  7000  0208  2A13               	goto	u195_23
  7001  0209  0020               	movlb	0	; select bank0
  7002  020A  0831               	movf	??_runVoltageModeControl+1,w
  7003  020B  0021               	movlb	1	; select bank1
  7004  020C  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  7005  020D  1D03               	skipz
  7006  020E  2A13               	goto	u195_23
  7007  020F  0020               	movlb	0	; select bank0
  7008  0210  0830               	movf	??_runVoltageModeControl,w
  7009  0211  0021               	movlb	1	; select bank1
  7010  0212  0220               	subwf	_integratorScaledLimit^(0+128),w
  7011  0213                     u195_23:
  7012  0213  1803               	skipnc
  7013  0214  2A16               	goto	u195_21
  7014  0215  2A17               	goto	u195_20
  7015  0216                     u195_21:
  7016  0216  2A67               	goto	i1l2269
  7017  0217                     u195_20:
  7018  0217                     i1l2267:
  7019                           
  7020                           ;Controller.c: 130:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  7021  0217  3000               	movlw	0
  7022  0218  0020               	movlb	0	; select bank0
  7023  0219  00B0               	movwf	??_runVoltageModeControl
  7024  021A  3000               	movlw	0
  7025  021B  00B1               	movwf	??_runVoltageModeControl+1
  7026  021C  3000               	movlw	0
  7027  021D  00B2               	movwf	??_runVoltageModeControl+2
  7028  021E  3000               	movlw	0
  7029  021F  00B3               	movwf	??_runVoltageModeControl+3
  7030  0220  3000               	movlw	0
  7031  0221  00B4               	movwf	??_runVoltageModeControl+4
  7032  0222  3000               	movlw	0
  7033  0223  00B5               	movwf	??_runVoltageModeControl+5
  7034  0224  3000               	movlw	0
  7035  0225  00B6               	movwf	??_runVoltageModeControl+6
  7036  0226  3000               	movlw	0
  7037  0227  00B7               	movwf	??_runVoltageModeControl+7
  7038  0228  0021               	movlb	1	; select bank1
  7039  0229  0820               	movf	_integratorScaledLimit^(0+128),w
  7040  022A  0020               	movlb	0	; select bank0
  7041  022B  02B0               	subwf	??_runVoltageModeControl,f
  7042  022C  0021               	movlb	1	; select bank1
  7043  022D  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  7044  022E  0020               	movlb	0	; select bank0
  7045  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  7046  0230  0021               	movlb	1	; select bank1
  7047  0231  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  7048  0232  0020               	movlb	0	; select bank0
  7049  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  7050  0234  0021               	movlb	1	; select bank1
  7051  0235  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  7052  0236  0020               	movlb	0	; select bank0
  7053  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7054  0238  0021               	movlb	1	; select bank1
  7055  0239  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7056  023A  0020               	movlb	0	; select bank0
  7057  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7058  023C  0021               	movlb	1	; select bank1
  7059  023D  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7060  023E  0020               	movlb	0	; select bank0
  7061  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7062  0240  0021               	movlb	1	; select bank1
  7063  0241  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7064  0242  0020               	movlb	0	; select bank0
  7065  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7066  0244  0021               	movlb	1	; select bank1
  7067  0245  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7068  0246  0020               	movlb	0	; select bank0
  7069  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7070  0248  0837               	movf	??_runVoltageModeControl+7,w
  7071  0249  0021               	movlb	1	; select bank1
  7072  024A  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7073  024B  0020               	movlb	0	; select bank0
  7074  024C  0836               	movf	??_runVoltageModeControl+6,w
  7075  024D  0021               	movlb	1	; select bank1
  7076  024E  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7077  024F  0020               	movlb	0	; select bank0
  7078  0250  0835               	movf	??_runVoltageModeControl+5,w
  7079  0251  0021               	movlb	1	; select bank1
  7080  0252  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7081  0253  0020               	movlb	0	; select bank0
  7082  0254  0834               	movf	??_runVoltageModeControl+4,w
  7083  0255  0021               	movlb	1	; select bank1
  7084  0256  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7085  0257  0020               	movlb	0	; select bank0
  7086  0258  0833               	movf	??_runVoltageModeControl+3,w
  7087  0259  0021               	movlb	1	; select bank1
  7088  025A  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7089  025B  0020               	movlb	0	; select bank0
  7090  025C  0832               	movf	??_runVoltageModeControl+2,w
  7091  025D  0021               	movlb	1	; select bank1
  7092  025E  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7093  025F  0020               	movlb	0	; select bank0
  7094  0260  0831               	movf	??_runVoltageModeControl+1,w
  7095  0261  0021               	movlb	1	; select bank1
  7096  0262  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7097  0263  0020               	movlb	0	; select bank0
  7098  0264  0830               	movf	??_runVoltageModeControl,w
  7099  0265  0021               	movlb	1	; select bank1
  7100  0266  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7101  0267                     i1l2269:
  7102                           
  7103                           ;Controller.c: 135:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 7u);
  7104  0267  300E               	movlw	14
  7105  0268  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7106  0269  0086               	movwf	6
  7107  026A  0187               	clrf	7
  7108  026B  3F40               	moviw [0]fsr1
  7109  026C  0020               	movlb	0	; select bank0
  7110  026D  00B0               	movwf	??_runVoltageModeControl
  7111  026E  3F41               	moviw [1]fsr1
  7112  026F  00B1               	movwf	??_runVoltageModeControl+1
  7113  0270  3F42               	moviw [2]fsr1
  7114  0271  00B2               	movwf	??_runVoltageModeControl+2
  7115  0272  3F43               	moviw [3]fsr1
  7116  0273  00B3               	movwf	??_runVoltageModeControl+3
  7117  0274  3F44               	moviw [4]fsr1
  7118  0275  00B4               	movwf	??_runVoltageModeControl+4
  7119  0276  3F45               	moviw [5]fsr1
  7120  0277  00B5               	movwf	??_runVoltageModeControl+5
  7121  0278  3F46               	moviw [6]fsr1
  7122  0279  00B6               	movwf	??_runVoltageModeControl+6
  7123  027A  3F47               	moviw [7]fsr1
  7124  027B  00B7               	movwf	??_runVoltageModeControl+7
  7125  027C  3017               	movlw	23
  7126  027D  00B8               	movwf	??_runVoltageModeControl+8
  7127  027E                     u196_25:
  7128  027E  0020               	movlb	0	; select bank0
  7129  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7130  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7131  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7132  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7133  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7134  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7135  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7136  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7137  0287                     u196_20:
  7138  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7139  0288  2A7E               	goto	u196_25
  7140  0289  0020               	movlb	0	; select bank0
  7141  028A  0833               	movf	??_runVoltageModeControl+3,w
  7142  028B  0021               	movlb	1	; select bank1
  7143  028C  00C3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7144  028D  0020               	movlb	0	; select bank0
  7145  028E  0832               	movf	??_runVoltageModeControl+2,w
  7146  028F  0021               	movlb	1	; select bank1
  7147  0290  00C2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7148  0291  0020               	movlb	0	; select bank0
  7149  0292  0831               	movf	??_runVoltageModeControl+1,w
  7150  0293  0021               	movlb	1	; select bank1
  7151  0294  00C1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7152  0295  0020               	movlb	0	; select bank0
  7153  0296  0830               	movf	??_runVoltageModeControl,w
  7154  0297  0021               	movlb	1	; select bank1
  7155  0298  00C0               	movwf	(_voltageModeVariables^(0+128)+10)
  7156  0299                     i1l2271:
  7157                           
  7158                           ;Controller.c: 138:    int64_t propMult = (int32_t) (2u * ((int32_t) voltageModeVariable
      +                          s.error));
  7159  0299  0836               	movf	_voltageModeVariables^(0+128),w
  7160  029A  0020               	movlb	0	; select bank0
  7161  029B  00B0               	movwf	??_runVoltageModeControl
  7162  029C  0021               	movlb	1	; select bank1
  7163  029D  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7164  029E  0020               	movlb	0	; select bank0
  7165  029F  00B1               	movwf	??_runVoltageModeControl+1
  7166  02A0  3000               	movlw	0
  7167  02A1  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7168  02A2  30FF               	movlw	255
  7169  02A3  00B2               	movwf	??_runVoltageModeControl+2
  7170  02A4  00B3               	movwf	??_runVoltageModeControl+3
  7171  02A5  3001               	movlw	1
  7172  02A6                     u197_25:
  7173  02A6  35B0               	lslf	??_runVoltageModeControl,f
  7174  02A7  0DB1               	rlf	??_runVoltageModeControl+1,f
  7175  02A8  0DB2               	rlf	??_runVoltageModeControl+2,f
  7176  02A9  0DB3               	rlf	??_runVoltageModeControl+3,f
  7177  02AA                     u197_20:
  7178  02AA  0B89               	decfsz	9,f
  7179  02AB  2AA6               	goto	u197_25
  7180  02AC  0830               	movf	??_runVoltageModeControl,w
  7181  02AD  00C8               	movwf	runVoltageModeControl@propMult
  7182  02AE  0831               	movf	??_runVoltageModeControl+1,w
  7183  02AF  00C9               	movwf	runVoltageModeControl@propMult+1
  7184  02B0  0832               	movf	??_runVoltageModeControl+2,w
  7185  02B1  00CA               	movwf	runVoltageModeControl@propMult+2
  7186  02B2  0833               	movf	??_runVoltageModeControl+3,w
  7187  02B3  00CB               	movwf	runVoltageModeControl@propMult+3
  7188  02B4  3000               	movlw	0
  7189  02B5  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7190  02B6  30FF               	movlw	255
  7191  02B7  00CC               	movwf	runVoltageModeControl@propMult+4
  7192  02B8  00CD               	movwf	runVoltageModeControl@propMult+5
  7193  02B9  00CE               	movwf	runVoltageModeControl@propMult+6
  7194  02BA  00CF               	movwf	runVoltageModeControl@propMult+7
  7195  02BB                     i1l2273:
  7196                           
  7197                           ;Controller.c: 139:    voltageModeVariables.proportionalOutput = propMult >> 9u;
  7198  02BB  3048               	movlw	low runVoltageModeControl@propMult
  7199  02BC  0086               	movwf	6
  7200  02BD  3000               	movlw	high runVoltageModeControl@propMult
  7201  02BE  0087               	movwf	7
  7202  02BF  3F40               	moviw [0]fsr1
  7203  02C0  00B0               	movwf	??_runVoltageModeControl
  7204  02C1  3F41               	moviw [1]fsr1
  7205  02C2  00B1               	movwf	??_runVoltageModeControl+1
  7206  02C3  3F42               	moviw [2]fsr1
  7207  02C4  00B2               	movwf	??_runVoltageModeControl+2
  7208  02C5  3F43               	moviw [3]fsr1
  7209  02C6  00B3               	movwf	??_runVoltageModeControl+3
  7210  02C7  3F44               	moviw [4]fsr1
  7211  02C8  00B4               	movwf	??_runVoltageModeControl+4
  7212  02C9  3F45               	moviw [5]fsr1
  7213  02CA  00B5               	movwf	??_runVoltageModeControl+5
  7214  02CB  3F46               	moviw [6]fsr1
  7215  02CC  00B6               	movwf	??_runVoltageModeControl+6
  7216  02CD  3F47               	moviw [7]fsr1
  7217  02CE  00B7               	movwf	??_runVoltageModeControl+7
  7218  02CF  3009               	movlw	9
  7219  02D0  00B8               	movwf	??_runVoltageModeControl+8
  7220  02D1                     u198_25:
  7221  02D1  0020               	movlb	0	; select bank0
  7222  02D2  37B7               	asrf	??_runVoltageModeControl+7,f
  7223  02D3  0CB6               	rrf	??_runVoltageModeControl+6,f
  7224  02D4  0CB5               	rrf	??_runVoltageModeControl+5,f
  7225  02D5  0CB4               	rrf	??_runVoltageModeControl+4,f
  7226  02D6  0CB3               	rrf	??_runVoltageModeControl+3,f
  7227  02D7  0CB2               	rrf	??_runVoltageModeControl+2,f
  7228  02D8  0CB1               	rrf	??_runVoltageModeControl+1,f
  7229  02D9  0CB0               	rrf	??_runVoltageModeControl,f
  7230  02DA                     u198_20:
  7231  02DA  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7232  02DB  2AD1               	goto	u198_25
  7233  02DC  0020               	movlb	0	; select bank0
  7234  02DD  0833               	movf	??_runVoltageModeControl+3,w
  7235  02DE  0021               	movlb	1	; select bank1
  7236  02DF  00BF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7237  02E0  0020               	movlb	0	; select bank0
  7238  02E1  0832               	movf	??_runVoltageModeControl+2,w
  7239  02E2  0021               	movlb	1	; select bank1
  7240  02E3  00BE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7241  02E4  0020               	movlb	0	; select bank0
  7242  02E5  0831               	movf	??_runVoltageModeControl+1,w
  7243  02E6  0021               	movlb	1	; select bank1
  7244  02E7  00BD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7245  02E8  0020               	movlb	0	; select bank0
  7246  02E9  0830               	movf	??_runVoltageModeControl,w
  7247  02EA  0021               	movlb	1	; select bank1
  7248  02EB  00BC               	movwf	(_voltageModeVariables^(0+128)+6)
  7249  02EC                     i1l2275:
  7250                           
  7251                           ;Controller.c: 141:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7252  02EC  0840               	movf	(_voltageModeVariables^(0+128)+10),w
  7253  02ED  073C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7254  02EE  0020               	movlb	0	; select bank0
  7255  02EF  00B0               	movwf	??_runVoltageModeControl
  7256  02F0  0021               	movlb	1	; select bank1
  7257  02F1  0841               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7258  02F2  3D3D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7259  02F3  0020               	movlb	0	; select bank0
  7260  02F4  00B1               	movwf	??_runVoltageModeControl+1
  7261  02F5  0021               	movlb	1	; select bank1
  7262  02F6  0842               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7263  02F7  3D3E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7264  02F8  0020               	movlb	0	; select bank0
  7265  02F9  00B2               	movwf	??_runVoltageModeControl+2
  7266  02FA  0021               	movlb	1	; select bank1
  7267  02FB  0843               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7268  02FC  3D3F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7269  02FD  0020               	movlb	0	; select bank0
  7270  02FE  00B3               	movwf	??_runVoltageModeControl+3
  7271  02FF  0833               	movf	??_runVoltageModeControl+3,w
  7272  0300  0021               	movlb	1	; select bank1
  7273  0301  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7274  0302  0020               	movlb	0	; select bank0
  7275  0303  0832               	movf	??_runVoltageModeControl+2,w
  7276  0304  0021               	movlb	1	; select bank1
  7277  0305  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7278  0306  0020               	movlb	0	; select bank0
  7279  0307  0831               	movf	??_runVoltageModeControl+1,w
  7280  0308  0021               	movlb	1	; select bank1
  7281  0309  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7282  030A  0020               	movlb	0	; select bank0
  7283  030B  0830               	movf	??_runVoltageModeControl,w
  7284  030C  0021               	movlb	1	; select bank1
  7285  030D  00CC               	movwf	(_voltageModeVariables^(0+128)+22)
  7286  030E                     i1l2277:
  7287                           
  7288                           ;Controller.c: 142:    voltageModeVariables.previousError = voltageModeVariables.error;
  7289  030E  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7290  030F  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7291  0310  0836               	movf	_voltageModeVariables^(0+128),w
  7292  0311  00D0               	movwf	(_voltageModeVariables^(0+128)+26)
  7293  0312                     i1l462:
  7294  0312  0008               	return
  7295  0313                     __end_of_runVoltageModeControl:
  7296                           
  7297                           	psect	text32
  7298  0DBB                     __ptext32:	
  7299 ;; *************** function i1_readGPIO *****************
  7300 ;; Defined at:
  7301 ;;		line 79 in file "GPIO.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  gpioNumber      1    wreg     const enum E2798
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7306 ;;  portType        1    7[COMMON] unsigned char 
  7307 ;;  portNumber      1    6[COMMON] unsigned char 
  7308 ;;  returnValueB    1    5[COMMON] unsigned char 
  7309 ;;  readB           1    4[COMMON] unsigned char 
  7310 ;;  returnValueA    1    3[COMMON] unsigned char 
  7311 ;;  readA           1    2[COMMON] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      _Bool 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7321 ;;      Params:         0       0       0       0       0       0
  7322 ;;      Locals:         7       0       0       0       0       0
  7323 ;;      Temps:          2       0       0       0       0       0
  7324 ;;      Totals:         9       0       0       0       0       0
  7325 ;;Total ram usage:        9 bytes
  7326 ;; Hardware stack levels used: 1
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_runVoltageModeControl
  7331 ;;		_currentTripRead
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335  0DBB                     i1_readGPIO:	
  7336                           ;psect for function i1_readGPIO
  7337                           
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7341                           ;i1readGPIO@gpioNumber stored from wreg
  7342  0DBB  00F8               	movwf	i1readGPIO@gpioNumber
  7343  0DBC                     i1l2107:
  7344                           
  7345                           ;GPIO.c: 81:     uint8_t portType = 0;
  7346  0DBC  01F7               	clrf	i1readGPIO@portType
  7347  0DBD                     i1l2109:
  7348                           
  7349                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7350  0DBD  3008               	movlw	8
  7351  0DBE  0278               	subwf	i1readGPIO@gpioNumber,w
  7352  0DBF  1C03               	skipc
  7353  0DC0  2DC2               	goto	u159_21
  7354  0DC1  2DC3               	goto	u159_20
  7355  0DC2                     u159_21:
  7356  0DC2  2DCB               	goto	i1l2115
  7357  0DC3                     u159_20:
  7358  0DC3                     i1l2111:
  7359                           
  7360                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7361  0DC3  0878               	movf	i1readGPIO@gpioNumber,w
  7362  0DC4  3EF8               	addlw	248
  7363  0DC5  00F0               	movwf	??i1_readGPIO
  7364  0DC6  0870               	movf	??i1_readGPIO,w
  7365  0DC7  00F6               	movwf	i1readGPIO@portNumber
  7366  0DC8                     i1l2113:
  7367                           
  7368                           ;GPIO.c: 84:         portType = 1;
  7369  0DC8  01F7               	clrf	i1readGPIO@portType
  7370  0DC9  0AF7               	incf	i1readGPIO@portType,f
  7371                           
  7372                           ;GPIO.c: 85:     }
  7373  0DCA  2DD0               	goto	i1l2119
  7374  0DCB                     i1l2115:
  7375                           
  7376                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7377  0DCB  0878               	movf	i1readGPIO@gpioNumber,w
  7378  0DCC  00F0               	movwf	??i1_readGPIO
  7379  0DCD  0870               	movf	??i1_readGPIO,w
  7380  0DCE  00F6               	movwf	i1readGPIO@portNumber
  7381  0DCF                     i1l2117:
  7382                           
  7383                           ;GPIO.c: 88:         portType = 0;
  7384  0DCF  01F7               	clrf	i1readGPIO@portType
  7385  0DD0                     i1l2119:
  7386                           
  7387                           ;GPIO.c: 91:     if(portType == 0){
  7388  0DD0  0877               	movf	i1readGPIO@portType,w
  7389  0DD1  1D03               	btfss	3,2
  7390  0DD2  2DD4               	goto	u160_21
  7391  0DD3  2DD5               	goto	u160_20
  7392  0DD4                     u160_21:
  7393  0DD4  2DE8               	goto	i1l2131
  7394  0DD5                     u160_20:
  7395  0DD5                     i1l2121:
  7396                           
  7397                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7398  0DD5  0020               	movlb	0	; select bank0
  7399  0DD6  080C               	movf	12,w	;volatile
  7400  0DD7  00F0               	movwf	??i1_readGPIO
  7401  0DD8  0870               	movf	??i1_readGPIO,w
  7402  0DD9  00F2               	movwf	i1readGPIO@readA
  7403  0DDA                     i1l2123:
  7404                           
  7405                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7406  0DDA  0872               	movf	i1readGPIO@readA,w
  7407  0DDB  00F0               	movwf	??i1_readGPIO
  7408  0DDC  0A76               	incf	i1readGPIO@portNumber,w
  7409  0DDD  2DDF               	goto	u161_24
  7410  0DDE                     u161_25:
  7411  0DDE  36F0               	lsrf	??i1_readGPIO,f
  7412  0DDF                     u161_24:
  7413  0DDF  0B89               	decfsz	9,f
  7414  0DE0  2DDE               	goto	u161_25
  7415  0DE1  0870               	movf	??i1_readGPIO,w
  7416  0DE2  3901               	andlw	1
  7417  0DE3  00F1               	movwf	??i1_readGPIO+1
  7418  0DE4  0871               	movf	??i1_readGPIO+1,w
  7419  0DE5  00F3               	movwf	i1readGPIO@returnValueA
  7420  0DE6                     i1l2125:
  7421                           
  7422                           ;GPIO.c: 94:         return returnValueA;
  7423  0DE6  0873               	movf	i1readGPIO@returnValueA,w
  7424  0DE7  2E01               	goto	i1l326
  7425  0DE8                     i1l2131:
  7426  0DE8  0377               	decf	i1readGPIO@portType,w
  7427  0DE9  1D03               	btfss	3,2
  7428  0DEA  2DEC               	goto	u162_21
  7429  0DEB  2DED               	goto	u162_20
  7430  0DEC                     u162_21:
  7431  0DEC  2E00               	goto	i1l2143
  7432  0DED                     u162_20:
  7433  0DED                     i1l2133:
  7434                           
  7435                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7436  0DED  0020               	movlb	0	; select bank0
  7437  0DEE  080D               	movf	13,w	;volatile
  7438  0DEF  00F0               	movwf	??i1_readGPIO
  7439  0DF0  0870               	movf	??i1_readGPIO,w
  7440  0DF1  00F4               	movwf	i1readGPIO@readB
  7441  0DF2                     i1l2135:
  7442                           
  7443                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7444  0DF2  0874               	movf	i1readGPIO@readB,w
  7445  0DF3  00F0               	movwf	??i1_readGPIO
  7446  0DF4  0A76               	incf	i1readGPIO@portNumber,w
  7447  0DF5  2DF7               	goto	u163_24
  7448  0DF6                     u163_25:
  7449  0DF6  36F0               	lsrf	??i1_readGPIO,f
  7450  0DF7                     u163_24:
  7451  0DF7  0B89               	decfsz	9,f
  7452  0DF8  2DF6               	goto	u163_25
  7453  0DF9  0870               	movf	??i1_readGPIO,w
  7454  0DFA  3901               	andlw	1
  7455  0DFB  00F1               	movwf	??i1_readGPIO+1
  7456  0DFC  0871               	movf	??i1_readGPIO+1,w
  7457  0DFD  00F5               	movwf	i1readGPIO@returnValueB
  7458  0DFE                     i1l2137:
  7459                           
  7460                           ;GPIO.c: 99:         return returnValueB;
  7461  0DFE  0875               	movf	i1readGPIO@returnValueB,w
  7462  0DFF  2E01               	goto	i1l326
  7463  0E00                     i1l2143:
  7464  0E00  3000               	movlw	0
  7465  0E01                     i1l326:
  7466  0E01  0008               	return
  7467  0E02                     __end_ofi1_readGPIO:
  7468                           
  7469                           	psect	text33
  7470  0D80                     __ptext33:	
  7471 ;; *************** function _convertRawToMilliVolts *****************
  7472 ;; Defined at:
  7473 ;;		line 53 in file "Controller.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  rawValue        2   12[COMMON] unsigned short 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  vsenseMult      4    5[BANK0 ] long 
  7478 ;;  returnValued    2   11[BANK0 ] short 
  7479 ;;  offsetted       2    9[BANK0 ] short 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  2   12[COMMON] short 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0, pclath, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7489 ;;      Params:         2       0       0       0       0       0
  7490 ;;      Locals:         0       8       0       0       0       0
  7491 ;;      Temps:          0       5       0       0       0       0
  7492 ;;      Totals:         2      13       0       0       0       0
  7493 ;;Total ram usage:       15 bytes
  7494 ;; Hardware stack levels used: 1
  7495 ;; Hardware stack levels required when called: 1
  7496 ;; This function calls:
  7497 ;;		___lmul
  7498 ;; This function is called by:
  7499 ;;		_runVoltageModeControl
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503  0D80                     _convertRawToMilliVolts:	
  7504                           ;psect for function _convertRawToMilliVolts
  7505                           
  7506  0D80                     i1l2055:	
  7507                           ;incstack = 0
  7508                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7509                           
  7510                           
  7511                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7512  0D80  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7513  0D81  0020               	movlb	0	; select bank0
  7514  0D82  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7515  0D83  087C               	movf	convertRawToMilliVolts@rawValue,w
  7516  0D84  00A9               	movwf	convertRawToMilliVolts@offsetted
  7517  0D85                     i1l2057:
  7518                           
  7519                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7520  0D85  0829               	movf	convertRawToMilliVolts@offsetted,w
  7521  0D86  00F0               	movwf	___lmul@multiplier
  7522  0D87  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7523  0D88  00F1               	movwf	___lmul@multiplier+1
  7524  0D89  0D89               	rlf	9,f
  7525  0D8A  3B89               	subwfb	9,f
  7526  0D8B  0989               	comf	9,f
  7527  0D8C  00F2               	movwf	___lmul@multiplier+2
  7528  0D8D  00F3               	movwf	___lmul@multiplier+3
  7529  0D8E  3000               	movlw	0
  7530  0D8F  00F7               	movwf	___lmul@multiplicand+3
  7531  0D90  3000               	movlw	0
  7532  0D91  00F6               	movwf	___lmul@multiplicand+2
  7533  0D92  3017               	movlw	23
  7534  0D93  00F5               	movwf	___lmul@multiplicand+1
  7535  0D94  30D4               	movlw	212
  7536  0D95  00F4               	movwf	___lmul@multiplicand
  7537  0D96  318D  2515  318D   	fcall	___lmul
  7538  0D99  0873               	movf	?___lmul+3,w
  7539  0D9A  0020               	movlb	0	; select bank0
  7540  0D9B  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7541  0D9C  0872               	movf	?___lmul+2,w
  7542  0D9D  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7543  0D9E  0871               	movf	?___lmul+1,w
  7544  0D9F  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7545  0DA0  0870               	movf	?___lmul,w
  7546  0DA1  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7547  0DA2                     i1l2059:
  7548                           
  7549                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7550  0DA2  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7551  0DA3  00A0               	movwf	??_convertRawToMilliVolts
  7552  0DA4  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7553  0DA5  00A1               	movwf	??_convertRawToMilliVolts+1
  7554  0DA6  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7555  0DA7  00A2               	movwf	??_convertRawToMilliVolts+2
  7556  0DA8  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7557  0DA9  00A3               	movwf	??_convertRawToMilliVolts+3
  7558  0DAA  3008               	movlw	8
  7559  0DAB  00A4               	movwf	??_convertRawToMilliVolts+4
  7560  0DAC                     u145_25:
  7561  0DAC  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7562  0DAD  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7563  0DAE  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7564  0DAF  0CA0               	rrf	??_convertRawToMilliVolts,f
  7565  0DB0                     u145_20:
  7566  0DB0  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7567  0DB1  2DAC               	goto	u145_25
  7568  0DB2  0821               	movf	??_convertRawToMilliVolts+1,w
  7569  0DB3  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7570  0DB4  0820               	movf	??_convertRawToMilliVolts,w
  7571  0DB5  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7572  0DB6                     i1l2061:
  7573                           
  7574                           ;Controller.c: 57:     return returnValuedV;
  7575  0DB6  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7576  0DB7  00FD               	movwf	?_convertRawToMilliVolts+1
  7577  0DB8  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7578  0DB9  00FC               	movwf	?_convertRawToMilliVolts
  7579  0DBA                     i1l440:
  7580  0DBA  0008               	return
  7581  0DBB                     __end_of_convertRawToMilliVolts:
  7582                           
  7583                           	psect	text34
  7584  0D15                     __ptext34:	
  7585 ;; *************** function ___lmul *****************
  7586 ;; Defined at:
  7587 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  multiplier      4    0[COMMON] unsigned long 
  7590 ;;  multiplicand    4    4[COMMON] unsigned long 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  product         4    8[COMMON] unsigned long 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  4    0[COMMON] unsigned long 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7602 ;;      Params:         8       0       0       0       0       0
  7603 ;;      Locals:         4       0       0       0       0       0
  7604 ;;      Temps:          0       0       0       0       0       0
  7605 ;;      Totals:        12       0       0       0       0       0
  7606 ;;Total ram usage:       12 bytes
  7607 ;; Hardware stack levels used: 1
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_runPotScaling
  7612 ;;		_convertRawToMilliVolts
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616  0D15                     ___lmul:	
  7617                           ;psect for function ___lmul
  7618                           
  7619  0D15                     i1l2013:	
  7620                           ;incstack = 0
  7621                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7622                           
  7623  0D15  3000               	movlw	0
  7624  0D16  00FB               	movwf	___lmul@product+3
  7625  0D17  3000               	movlw	0
  7626  0D18  00FA               	movwf	___lmul@product+2
  7627  0D19  3000               	movlw	0
  7628  0D1A  00F9               	movwf	___lmul@product+1
  7629  0D1B  3000               	movlw	0
  7630  0D1C  00F8               	movwf	___lmul@product
  7631  0D1D                     i1l2015:
  7632  0D1D  1C70               	btfss	___lmul@multiplier,0
  7633  0D1E  2D20               	goto	u132_21
  7634  0D1F  2D21               	goto	u132_20
  7635  0D20                     u132_21:
  7636  0D20  2D29               	goto	i1l2019
  7637  0D21                     u132_20:
  7638  0D21                     i1l2017:
  7639  0D21  0874               	movf	___lmul@multiplicand,w
  7640  0D22  07F8               	addwf	___lmul@product,f
  7641  0D23  0875               	movf	___lmul@multiplicand+1,w
  7642  0D24  3DF9               	addwfc	___lmul@product+1,f
  7643  0D25  0876               	movf	___lmul@multiplicand+2,w
  7644  0D26  3DFA               	addwfc	___lmul@product+2,f
  7645  0D27  0877               	movf	___lmul@multiplicand+3,w
  7646  0D28  3DFB               	addwfc	___lmul@product+3,f
  7647  0D29                     i1l2019:
  7648  0D29  3001               	movlw	1
  7649  0D2A                     u133_25:
  7650  0D2A  35F4               	lslf	___lmul@multiplicand,f
  7651  0D2B  0DF5               	rlf	___lmul@multiplicand+1,f
  7652  0D2C  0DF6               	rlf	___lmul@multiplicand+2,f
  7653  0D2D  0DF7               	rlf	___lmul@multiplicand+3,f
  7654  0D2E  0B89               	decfsz	9,f
  7655  0D2F  2D2A               	goto	u133_25
  7656  0D30                     i1l2021:
  7657  0D30  3001               	movlw	1
  7658  0D31                     u134_25:
  7659  0D31  36F3               	lsrf	___lmul@multiplier+3,f
  7660  0D32  0CF2               	rrf	___lmul@multiplier+2,f
  7661  0D33  0CF1               	rrf	___lmul@multiplier+1,f
  7662  0D34  0CF0               	rrf	___lmul@multiplier,f
  7663  0D35  0B89               	decfsz	9,f
  7664  0D36  2D31               	goto	u134_25
  7665  0D37  0873               	movf	___lmul@multiplier+3,w
  7666  0D38  0472               	iorwf	___lmul@multiplier+2,w
  7667  0D39  0471               	iorwf	___lmul@multiplier+1,w
  7668  0D3A  0470               	iorwf	___lmul@multiplier,w
  7669  0D3B  1D03               	skipz
  7670  0D3C  2D3E               	goto	u135_21
  7671  0D3D  2D3F               	goto	u135_20
  7672  0D3E                     u135_21:
  7673  0D3E  2D1D               	goto	i1l2015
  7674  0D3F                     u135_20:
  7675  0D3F                     i1l2023:
  7676  0D3F  087B               	movf	___lmul@product+3,w
  7677  0D40  00F3               	movwf	?___lmul+3
  7678  0D41  087A               	movf	___lmul@product+2,w
  7679  0D42  00F2               	movwf	?___lmul+2
  7680  0D43  0879               	movf	___lmul@product+1,w
  7681  0D44  00F1               	movwf	?___lmul+1
  7682  0D45  0878               	movf	___lmul@product,w
  7683  0D46  00F0               	movwf	?___lmul
  7684  0D47                     i1l736:
  7685  0D47  0008               	return
  7686  0D48                     __end_of___lmul:
  7687                           
  7688                           	psect	text35
  7689  0C07                     __ptext35:	
  7690 ;; *************** function _abs *****************
  7691 ;; Defined at:
  7692 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;  a               2    0[COMMON] int 
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  2    0[COMMON] int 
  7699 ;; Registers used:
  7700 ;;		wreg, status,2, status,0
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7706 ;;      Params:         2       0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0
  7708 ;;      Temps:          2       0       0       0       0       0
  7709 ;;      Totals:         4       0       0       0       0       0
  7710 ;;Total ram usage:        4 bytes
  7711 ;; Hardware stack levels used: 1
  7712 ;; This function calls:
  7713 ;;		Nothing
  7714 ;; This function is called by:
  7715 ;;		_runVoltageModeControl
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719  0C07                     _abs:	
  7720                           ;psect for function _abs
  7721                           
  7722  0C07                     i1l2065:	
  7723                           ;incstack = 0
  7724                           ; Regs used in _abs: [wreg+status,2+status,0]
  7725                           
  7726  0C07  0871               	movf	abs@a+1,w
  7727  0C08  3A80               	xorlw	128
  7728  0C09  00F2               	movwf	??_abs
  7729  0C0A  3080               	movlw	128
  7730  0C0B  0272               	subwf	??_abs,w
  7731  0C0C  1D03               	skipz
  7732  0C0D  2C10               	goto	u146_25
  7733  0C0E  3001               	movlw	1
  7734  0C0F  0270               	subwf	abs@a,w
  7735  0C10                     u146_25:
  7736  0C10  1803               	skipnc
  7737  0C11  2C13               	goto	u146_21
  7738  0C12  2C14               	goto	u146_20
  7739  0C13                     u146_21:
  7740  0C13  2C20               	goto	i1l1182
  7741  0C14                     u146_20:
  7742  0C14                     i1l2067:
  7743  0C14  0970               	comf	abs@a,w
  7744  0C15  00F2               	movwf	??_abs
  7745  0C16  0971               	comf	abs@a+1,w
  7746  0C17  00F3               	movwf	??_abs+1
  7747  0C18  0AF2               	incf	??_abs,f
  7748  0C19  1903               	skipnz
  7749  0C1A  0AF3               	incf	??_abs+1,f
  7750  0C1B  0872               	movf	??_abs,w
  7751  0C1C  00F0               	movwf	?_abs
  7752  0C1D  0873               	movf	??_abs+1,w
  7753  0C1E  00F1               	movwf	?_abs+1
  7754  0C1F  2C20               	goto	i1l1185
  7755  0C20                     i1l1182:
  7756  0C20                     i1l1185:
  7757  0C20  0008               	return
  7758  0C21                     __end_of_abs:
  7759                           
  7760                           	psect	text36
  7761  0E4C                     __ptext36:	
  7762 ;; *************** function ___omul *****************
  7763 ;; Defined at:
  7764 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7767 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  product         8    1[COMMON] unsigned long long 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  8    0[BANK0 ] unsigned long long 
  7772 ;; Registers used:
  7773 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7779 ;;      Params:         0      16       0       0       0       0
  7780 ;;      Locals:         8       0       0       0       0       0
  7781 ;;      Temps:          1       0       0       0       0       0
  7782 ;;      Totals:         9      16       0       0       0       0
  7783 ;;Total ram usage:       25 bytes
  7784 ;; Hardware stack levels used: 1
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_runVoltageModeControl
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792  0E4C                     ___omul:	
  7793                           ;psect for function ___omul
  7794                           
  7795  0E4C                     i1l2069:	
  7796                           ;incstack = 0
  7797                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7798                           
  7799  0E4C  3071               	movlw	low ___omul@product
  7800  0E4D  0086               	movwf	6
  7801  0E4E  3000               	movlw	high ___omul@product
  7802  0E4F  0087               	movwf	7
  7803  0E50  3008               	movlw	8
  7804  0E51  00F0               	movwf	??___omul
  7805  0E52  3000               	movlw	0
  7806  0E53                     u147_20:
  7807  0E53  001E               	movwi fsr1++
  7808  0E54  0BF0               	decfsz	??___omul,f
  7809  0E55  2E53               	goto	u147_20
  7810  0E56                     i1l2071:
  7811  0E56  0020               	movlb	0	; select bank0
  7812  0E57  1C20               	btfss	___omul@multiplier,0
  7813  0E58  2E5A               	goto	u148_21
  7814  0E59  2E5B               	goto	u148_20
  7815  0E5A                     u148_21:
  7816  0E5A  2E6B               	goto	i1l2075
  7817  0E5B                     u148_20:
  7818  0E5B                     i1l2073:
  7819  0E5B  0828               	movf	___omul@multiplicand,w
  7820  0E5C  07F1               	addwf	___omul@product,f
  7821  0E5D  0829               	movf	___omul@multiplicand+1,w
  7822  0E5E  3DF2               	addwfc	___omul@product+1,f
  7823  0E5F  082A               	movf	___omul@multiplicand+2,w
  7824  0E60  3DF3               	addwfc	___omul@product+2,f
  7825  0E61  082B               	movf	___omul@multiplicand+3,w
  7826  0E62  3DF4               	addwfc	___omul@product+3,f
  7827  0E63  082C               	movf	___omul@multiplicand+4,w
  7828  0E64  3DF5               	addwfc	___omul@product+4,f
  7829  0E65  082D               	movf	___omul@multiplicand+5,w
  7830  0E66  3DF6               	addwfc	___omul@product+5,f
  7831  0E67  082E               	movf	___omul@multiplicand+6,w
  7832  0E68  3DF7               	addwfc	___omul@product+6,f
  7833  0E69  082F               	movf	___omul@multiplicand+7,w
  7834  0E6A  3DF8               	addwfc	___omul@product+7,f
  7835  0E6B                     i1l2075:
  7836  0E6B  35A8               	lslf	___omul@multiplicand,f
  7837  0E6C  0DA9               	rlf	___omul@multiplicand+1,f
  7838  0E6D  0DAA               	rlf	___omul@multiplicand+2,f
  7839  0E6E  0DAB               	rlf	___omul@multiplicand+3,f
  7840  0E6F  0DAC               	rlf	___omul@multiplicand+4,f
  7841  0E70  0DAD               	rlf	___omul@multiplicand+5,f
  7842  0E71  0DAE               	rlf	___omul@multiplicand+6,f
  7843  0E72  0DAF               	rlf	___omul@multiplicand+7,f
  7844  0E73                     i1l2077:
  7845  0E73  36A7               	lsrf	___omul@multiplier+7,f
  7846  0E74  0CA6               	rrf	___omul@multiplier+6,f
  7847  0E75  0CA5               	rrf	___omul@multiplier+5,f
  7848  0E76  0CA4               	rrf	___omul@multiplier+4,f
  7849  0E77  0CA3               	rrf	___omul@multiplier+3,f
  7850  0E78  0CA2               	rrf	___omul@multiplier+2,f
  7851  0E79  0CA1               	rrf	___omul@multiplier+1,f
  7852  0E7A  0CA0               	rrf	___omul@multiplier,f
  7853  0E7B  0820               	movf	___omul@multiplier,w
  7854  0E7C  0421               	iorwf	___omul@multiplier+1,w
  7855  0E7D  0422               	iorwf	___omul@multiplier+2,w
  7856  0E7E  0423               	iorwf	___omul@multiplier+3,w
  7857  0E7F  0424               	iorwf	___omul@multiplier+4,w
  7858  0E80  0425               	iorwf	___omul@multiplier+5,w
  7859  0E81  0426               	iorwf	___omul@multiplier+6,w
  7860  0E82  0427               	iorwf	___omul@multiplier+7,w
  7861  0E83  1D03               	skipz
  7862  0E84  2E86               	goto	u149_21
  7863  0E85  2E87               	goto	u149_20
  7864  0E86                     u149_21:
  7865  0E86  2E56               	goto	i1l2071
  7866  0E87                     u149_20:
  7867  0E87                     i1l741:
  7868  0E87  0871               	movf	___omul@product,w
  7869  0E88  00A0               	movwf	?___omul
  7870  0E89  0872               	movf	___omul@product+1,w
  7871  0E8A  00A1               	movwf	?___omul+1
  7872  0E8B  0873               	movf	___omul@product+2,w
  7873  0E8C  00A2               	movwf	?___omul+2
  7874  0E8D  0874               	movf	___omul@product+3,w
  7875  0E8E  00A3               	movwf	?___omul+3
  7876  0E8F  0875               	movf	___omul@product+4,w
  7877  0E90  00A4               	movwf	?___omul+4
  7878  0E91  0876               	movf	___omul@product+5,w
  7879  0E92  00A5               	movwf	?___omul+5
  7880  0E93  0877               	movf	___omul@product+6,w
  7881  0E94  00A6               	movwf	?___omul+6
  7882  0E95  0878               	movf	___omul@product+7,w
  7883  0E96  00A7               	movwf	?___omul+7
  7884  0E97                     i1l742:
  7885  0E97  0008               	return
  7886  0E98                     __end_of___omul:
  7887                           
  7888                           	psect	text37
  7889  0C5A                     __ptext37:	
  7890 ;; *************** function ___wmul *****************
  7891 ;; Defined at:
  7892 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  multiplier      2    0[COMMON] unsigned int 
  7895 ;;  multiplicand    2    2[COMMON] unsigned int 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  product         2    4[COMMON] unsigned int 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  2    0[COMMON] unsigned int 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7907 ;;      Params:         4       0       0       0       0       0
  7908 ;;      Locals:         2       0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0
  7910 ;;      Totals:         6       0       0       0       0       0
  7911 ;;Total ram usage:        6 bytes
  7912 ;; Hardware stack levels used: 1
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		_runPotScaling
  7917 ;;		_controlRoutine
  7918 ;;		_convertRawToMilliAmps
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922  0C5A                     ___wmul:	
  7923                           ;psect for function ___wmul
  7924                           
  7925  0C5A                     i1l2301:	
  7926                           ;incstack = 0
  7927                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7928                           
  7929  0C5A  01F4               	clrf	___wmul@product
  7930  0C5B  01F5               	clrf	___wmul@product+1
  7931  0C5C                     i1l2303:
  7932  0C5C  1C70               	btfss	___wmul@multiplier,0
  7933  0C5D  2C5F               	goto	u205_21
  7934  0C5E  2C60               	goto	u205_20
  7935  0C5F                     u205_21:
  7936  0C5F  2C64               	goto	i1l722
  7937  0C60                     u205_20:
  7938  0C60                     i1l2305:
  7939  0C60  0872               	movf	___wmul@multiplicand,w
  7940  0C61  07F4               	addwf	___wmul@product,f
  7941  0C62  0873               	movf	___wmul@multiplicand+1,w
  7942  0C63  3DF5               	addwfc	___wmul@product+1,f
  7943  0C64                     i1l722:
  7944  0C64  3001               	movlw	1
  7945  0C65                     u206_25:
  7946  0C65  35F2               	lslf	___wmul@multiplicand,f
  7947  0C66  0DF3               	rlf	___wmul@multiplicand+1,f
  7948  0C67  0B89               	decfsz	9,f
  7949  0C68  2C65               	goto	u206_25
  7950  0C69                     i1l2307:
  7951  0C69  3001               	movlw	1
  7952  0C6A                     u207_25:
  7953  0C6A  36F1               	lsrf	___wmul@multiplier+1,f
  7954  0C6B  0CF0               	rrf	___wmul@multiplier,f
  7955  0C6C  0B89               	decfsz	9,f
  7956  0C6D  2C6A               	goto	u207_25
  7957  0C6E                     i1l2309:
  7958  0C6E  0870               	movf	___wmul@multiplier,w
  7959  0C6F  0471               	iorwf	___wmul@multiplier+1,w
  7960  0C70  1D03               	btfss	3,2
  7961  0C71  2C73               	goto	u208_21
  7962  0C72  2C74               	goto	u208_20
  7963  0C73                     u208_21:
  7964  0C73  2C5C               	goto	i1l2303
  7965  0C74                     u208_20:
  7966  0C74                     i1l2311:
  7967  0C74  0875               	movf	___wmul@product+1,w
  7968  0C75  00F1               	movwf	?___wmul+1
  7969  0C76  0874               	movf	___wmul@product,w
  7970  0C77  00F0               	movwf	?___wmul
  7971  0C78                     i1l724:
  7972  0C78  0008               	return
  7973  0C79                     __end_of___wmul:
  7974                           
  7975                           	psect	text38
  7976  0F4A                     __ptext38:	
  7977 ;; *************** function ___lldiv *****************
  7978 ;; Defined at:
  7979 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  divisor         4    6[COMMON] unsigned long 
  7982 ;;  dividend        4   10[COMMON] unsigned long 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  quotient        4    1[BANK0 ] unsigned long 
  7985 ;;  counter         1    5[BANK0 ] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  4    6[COMMON] unsigned long 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7995 ;;      Params:         8       0       0       0       0       0
  7996 ;;      Locals:         0       5       0       0       0       0
  7997 ;;      Temps:          0       1       0       0       0       0
  7998 ;;      Totals:         8       6       0       0       0       0
  7999 ;;Total ram usage:       14 bytes
  8000 ;; Hardware stack levels used: 1
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_runPotScaling
  8005 ;;		_controlRoutine
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009  0F4A                     ___lldiv:	
  8010                           ;psect for function ___lldiv
  8011                           
  8012  0F4A                     i1l2315:	
  8013                           ;incstack = 0
  8014                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8015                           
  8016  0F4A  3000               	movlw	0
  8017  0F4B  0020               	movlb	0	; select bank0
  8018  0F4C  00A4               	movwf	___lldiv@quotient+3
  8019  0F4D  3000               	movlw	0
  8020  0F4E  00A3               	movwf	___lldiv@quotient+2
  8021  0F4F  3000               	movlw	0
  8022  0F50  00A2               	movwf	___lldiv@quotient+1
  8023  0F51  3000               	movlw	0
  8024  0F52  00A1               	movwf	___lldiv@quotient
  8025  0F53  0879               	movf	___lldiv@divisor+3,w
  8026  0F54  0478               	iorwf	___lldiv@divisor+2,w
  8027  0F55  0477               	iorwf	___lldiv@divisor+1,w
  8028  0F56  0476               	iorwf	___lldiv@divisor,w
  8029  0F57  1903               	skipnz
  8030  0F58  2F5A               	goto	u209_21
  8031  0F59  2F5B               	goto	u209_20
  8032  0F5A                     u209_21:
  8033  0F5A  2F9C               	goto	i1l2335
  8034  0F5B                     u209_20:
  8035  0F5B                     i1l2317:
  8036  0F5B  01A5               	clrf	___lldiv@counter
  8037  0F5C  0AA5               	incf	___lldiv@counter,f
  8038  0F5D  2F69               	goto	i1l2321
  8039  0F5E                     i1l2319:
  8040  0F5E  3001               	movlw	1
  8041  0F5F                     u210_25:
  8042  0F5F  35F6               	lslf	___lldiv@divisor,f
  8043  0F60  0DF7               	rlf	___lldiv@divisor+1,f
  8044  0F61  0DF8               	rlf	___lldiv@divisor+2,f
  8045  0F62  0DF9               	rlf	___lldiv@divisor+3,f
  8046  0F63  0B89               	decfsz	9,f
  8047  0F64  2F5F               	goto	u210_25
  8048  0F65  3001               	movlw	1
  8049  0F66  00A0               	movwf	??___lldiv
  8050  0F67  0820               	movf	??___lldiv,w
  8051  0F68  07A5               	addwf	___lldiv@counter,f
  8052  0F69                     i1l2321:
  8053  0F69  1FF9               	btfss	___lldiv@divisor+3,7
  8054  0F6A  2F6C               	goto	u211_21
  8055  0F6B  2F6D               	goto	u211_20
  8056  0F6C                     u211_21:
  8057  0F6C  2F5E               	goto	i1l2319
  8058  0F6D                     u211_20:
  8059  0F6D                     i1l2323:
  8060  0F6D  3001               	movlw	1
  8061  0F6E                     u212_25:
  8062  0F6E  35A1               	lslf	___lldiv@quotient,f
  8063  0F6F  0DA2               	rlf	___lldiv@quotient+1,f
  8064  0F70  0DA3               	rlf	___lldiv@quotient+2,f
  8065  0F71  0DA4               	rlf	___lldiv@quotient+3,f
  8066  0F72  0B89               	decfsz	9,f
  8067  0F73  2F6E               	goto	u212_25
  8068  0F74                     i1l2325:
  8069  0F74  0879               	movf	___lldiv@divisor+3,w
  8070  0F75  027D               	subwf	___lldiv@dividend+3,w
  8071  0F76  1D03               	skipz
  8072  0F77  2F82               	goto	u213_25
  8073  0F78  0878               	movf	___lldiv@divisor+2,w
  8074  0F79  027C               	subwf	___lldiv@dividend+2,w
  8075  0F7A  1D03               	skipz
  8076  0F7B  2F82               	goto	u213_25
  8077  0F7C  0877               	movf	___lldiv@divisor+1,w
  8078  0F7D  027B               	subwf	___lldiv@dividend+1,w
  8079  0F7E  1D03               	skipz
  8080  0F7F  2F82               	goto	u213_25
  8081  0F80  0876               	movf	___lldiv@divisor,w
  8082  0F81  027A               	subwf	___lldiv@dividend,w
  8083  0F82                     u213_25:
  8084  0F82  1C03               	skipc
  8085  0F83  2F85               	goto	u213_21
  8086  0F84  2F86               	goto	u213_20
  8087  0F85                     u213_21:
  8088  0F85  2F8F               	goto	i1l2331
  8089  0F86                     u213_20:
  8090  0F86                     i1l2327:
  8091  0F86  0876               	movf	___lldiv@divisor,w
  8092  0F87  02FA               	subwf	___lldiv@dividend,f
  8093  0F88  0877               	movf	___lldiv@divisor+1,w
  8094  0F89  3BFB               	subwfb	___lldiv@dividend+1,f
  8095  0F8A  0878               	movf	___lldiv@divisor+2,w
  8096  0F8B  3BFC               	subwfb	___lldiv@dividend+2,f
  8097  0F8C  0879               	movf	___lldiv@divisor+3,w
  8098  0F8D  3BFD               	subwfb	___lldiv@dividend+3,f
  8099  0F8E                     i1l2329:
  8100  0F8E  1421               	bsf	___lldiv@quotient,0
  8101  0F8F                     i1l2331:
  8102  0F8F  3001               	movlw	1
  8103  0F90                     u214_25:
  8104  0F90  36F9               	lsrf	___lldiv@divisor+3,f
  8105  0F91  0CF8               	rrf	___lldiv@divisor+2,f
  8106  0F92  0CF7               	rrf	___lldiv@divisor+1,f
  8107  0F93  0CF6               	rrf	___lldiv@divisor,f
  8108  0F94  0B89               	decfsz	9,f
  8109  0F95  2F90               	goto	u214_25
  8110  0F96                     i1l2333:
  8111  0F96  3001               	movlw	1
  8112  0F97  02A5               	subwf	___lldiv@counter,f
  8113  0F98  1D03               	btfss	3,2
  8114  0F99  2F9B               	goto	u215_21
  8115  0F9A  2F9C               	goto	u215_20
  8116  0F9B                     u215_21:
  8117  0F9B  2F6D               	goto	i1l2323
  8118  0F9C                     u215_20:
  8119  0F9C                     i1l2335:
  8120  0F9C  0824               	movf	___lldiv@quotient+3,w
  8121  0F9D  00F9               	movwf	?___lldiv+3
  8122  0F9E  0823               	movf	___lldiv@quotient+2,w
  8123  0F9F  00F8               	movwf	?___lldiv+2
  8124  0FA0  0822               	movf	___lldiv@quotient+1,w
  8125  0FA1  00F7               	movwf	?___lldiv+1
  8126  0FA2  0821               	movf	___lldiv@quotient,w
  8127  0FA3  00F6               	movwf	?___lldiv
  8128  0FA4                     i1l758:
  8129  0FA4  0008               	return
  8130  0FA5                     __end_of___lldiv:
  8131  007E                     btemp	set	126	;btemp
  8132  007E                     int$flags	set	126
  8133  007E                     wtemp0	set	126
  8134                           
  8135                           	psect	idloc
  8136                           
  8137                           ;Config register IDLOC0 @ 0x8000
  8138                           ;	unspecified, using default values
  8139  8000                     	org	32768
  8140  8000  3FFF               	dw	16383
  8141                           
  8142                           ;Config register IDLOC1 @ 0x8001
  8143                           ;	unspecified, using default values
  8144  8001                     	org	32769
  8145  8001  3FFF               	dw	16383
  8146                           
  8147                           ;Config register IDLOC2 @ 0x8002
  8148                           ;	unspecified, using default values
  8149  8002                     	org	32770
  8150  8002  3FFF               	dw	16383
  8151                           
  8152                           ;Config register IDLOC3 @ 0x8003
  8153                           ;	unspecified, using default values
  8154  8003                     	org	32771
  8155  8003  3FFF               	dw	16383
  8156                           
  8157                           	psect	config
  8158                           
  8159                           ;Config register CONFIG1 @ 0x8007
  8160                           ;	Oscillator Selection
  8161                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8162                           ;	Watchdog Timer Enable
  8163                           ;	WDTE = OFF, WDT disabled
  8164                           ;	Power-up Timer Enable
  8165                           ;	PWRTE = OFF, PWRT disabled
  8166                           ;	MCLR Pin Function Select
  8167                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8168                           ;	Flash Program Memory Code Protection
  8169                           ;	CP = OFF, Program memory code protection is disabled
  8170                           ;	Data Memory Code Protection
  8171                           ;	CPD = OFF, Data memory code protection is disabled
  8172                           ;	Brown-out Reset Enable
  8173                           ;	BOREN = ON, Brown-out Reset enabled
  8174                           ;	Clock Out Enable
  8175                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8176                           ;	Internal/External Switchover
  8177                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8178                           ;	Fail-Safe Clock Monitor Enable
  8179                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8180  8007                     	org	32775
  8181  8007  0FA4               	dw	4004
  8182                           
  8183                           ;Config register CONFIG2 @ 0x8008
  8184                           ;	Flash Memory Self-Write Protection
  8185                           ;	WRT = OFF, Write protection off
  8186                           ;	PLL Enable
  8187                           ;	PLLEN = OFF, 4x PLL disabled
  8188                           ;	Stack Overflow/Underflow Reset Enable
  8189                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8190                           ;	Brown-out Reset Voltage Selection
  8191                           ;	BORV = 0x1, unprogrammed default
  8192                           ;	Low-Voltage Programming Enable
  8193                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8194  8008                     	org	32776
  8195  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      79
    BANK1            80     13      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                _transToInitialising
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToInitialising                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    9059
                                             62 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       10    10      0    2674
                                              6 BANK0     10    10      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      12    12      0    3594
                                             50 BANK0     12    12      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    1444
                                             16 BANK0     34    34      0
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     715
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     548
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToInitialising
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Aug 15 11:19:28 2023

              ??_transToInitialising 00D2                  ___wmul@multiplicand 0072  
                                l120 0D7D                                  l201 0BDA  
                                l320 06D1                                  l234 0BC5  
                                l306 060B                                  l243 0671  
                                l139 0595                                  l238 0633  
                                l430 0C59                                  l326 0E4B  
                                l174 0C3C                                  l512 0C98  
                                l534 0C06                                  l358 0BEC  
                                l560 0BBB                                  l563 0BBF  
                                l566 07FF                                  l569 0BD2  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C07                                  wreg 0009  
                __end_ofi1_writeGPIO 0731                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D3                           i1_readGPIO 0DBB  
                               ?_abs 0070                                 l2031 067B  
                               l2201 065A                                 l2041 068D  
                               l2033 0680                                 l2051 06B7  
                               l2043 0692                                 l2035 0683  
                               l2027 0674                                 l2053 06C4  
                               l2045 069F                                 l2037 0687  
                               l2029 0675                                 l2151 059F  
                               l2047 06AD                                 l2039 0688  
                               l2161 05B1                                 l2153 05A4  
                               l2049 06B2                                 l2171 05E6  
                               l2163 05B6                                 l2155 05A7  
                               l2147 0598                                 l2181 061B  
                               l2173 05FF                                 l2165 05CF  
                               l2157 05AB                                 l2149 0599  
                               l2191 062F                                 l2183 061C  
                               l2175 060E                                 l2167 05DC  
                               l2159 05AC                                 l2193 0631  
                               l2185 061E                                 l2177 0611  
                               l2169 05E1                                 l2281 0BFF  
                               l2601 0560                                 l2195 0638  
                               l2187 0624                                 l2179 0617  
                               l2603 0561                                 l2197 063D  
                               l2189 062A                                 l2541 04D6  
                               l2621 0C28                                 l2199 0655  
                               l2279 0BF9                                 l2551 04EE  
                               l2543 04D7                                 l2607 056A  
                               l2631 0C32                                 l2623 0C2A  
                               l2615 0C21                                 l2535 0BB9  
                               l2561 0501                                 l2553 04F2  
                               l2545 04E0                                 l2537 04D3  
                               l2633 0C34                                 l2625 0C2C  
                               l2617 0C24                                 l2641 0BD8  
                               l2643 0BC0                                 l2651 0C48  
                               l2571 051C                                 l2563 050A  
                               l2555 04F3                                 l2547 04E4  
                               l2539 04D4                                 l2635 0C35  
                               l2627 0C2D                                 l2619 0C26  
                               l2645 0C79                                 l2661 0E13  
                               l2653 0E04                                 l2581 0534  
                               l2573 051D                                 l2565 050E  
                               l2557 04FC                                 l2549 04E5  
                               l2637 0C37                                 l2629 0C30  
                               l2741 0D55                                 l2733 0D48  
                               l2647 0BE4                                 l2671 0E2F  
                               l2663 0E17                                 l2655 0E05  
                               l2591 0547                                 l2583 0538  
                               l2575 0526                                 l2567 050F  
                               l2559 0500                                 l2639 0BD3  
                               l2751 0D67                                 l2743 0D58  
                               l2735 0D4B                                 l2649 0C3D  
                               l2681 0E3C                                 l2665 0E18  
                               l2657 0E0B                                 l2593 0550  
                               l2585 0539                                 l2577 052A  
                               l2569 0518                                 l2761 0D7A  
                               l2753 0D6D                                 l2745 0D5B  
                               l2737 0D4F                                 l2683 0E48  
                               l2667 0E1D                                 l2659 0E10  
                               l2827 0572                                 l2595 0552  
                               l2587 0542                                 l2579 052B  
                               l2755 0D6D                                 l2747 0D5E  
                               l2739 0D52                                 l2669 0E23  
                               l2677 0E31                                 l2597 0553  
                               l2589 0546                                 l2693 07F9  
                               l2757 0D76                                 l2749 0D61  
                               l2679 0E36                                 l2599 055C  
                               l2695 0BCC                                 l2689 0E4A  
                               l2697 0BBC                                 STR_1 07E7  
                               u1410 06B2                                 u1411 06B1  
                               u1420 06B7                                 u1404 06A4  
                               u1421 06B6                                 u1405 06A3  
                               _LATA 010C                                 _LATB 010D  
                               u1360 067B                                 u1361 067A  
                               u1434 06BC                                 u1370 068D  
                               u1435 06BB                                 u1371 068C  
                               u1700 05E1                                 u1444 06C9  
                               u1380 0692                                 u1701 05E0  
                               u1445 06C8                                 u1381 0691  
                               u1710 05E6                                 u1711 05E5  
                               u1640 059F                                 u2504 0E41  
                               u1641 059E                                 u2505 0E40  
                               u1650 05B1                                 u1394 0697  
                               u1651 05B0                                 u1395 0696  
                               u1820 065A                                 u1804 0642  
                               u1724 05EB                                 u1660 05B6  
                               u2460 0E0B                                 u1821 0659  
                               u1805 0641                                 u1725 05EA  
                               u1661 05B5                                 u2461 0E0A  
                               u1814 064D                                 u1750 0617  
                               u1734 05F6                                 u2470 0E1D  
                               u1815 064C                                 u1751 0616  
                               u1735 05F5                                 u2471 0E1C  
                               u1760 0624                                 u1744 0604  
                               u1761 0623                                 u1745 0603  
                               u1834 065F                                 u1770 062A  
                               u1674 05BB                                 u2490 0E36  
                               u1835 065E                                 u1771 0629  
                               u1675 05BA                                 u2491 0E35  
                               u1844 066A                                 u1780 0638  
                               u1684 05C6                                 u2484 0E28  
                               u1845 0669                                 u1781 0637  
                               u1685 05C5                                 u2485 0E27  
                               u1790 063D                                 u1694 05D4  
                               u2590 0D76                                 u1791 063C  
                               u1695 05D3                                 u2591 0D75  
          _transToVoltageModeControl 07F9                      _filteredFreqPot 00AE  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0D48                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0086            ??_setupInternalOscillator 00D2  
                              ??_abs 0072                                ?_main 00DB  
                    __end_of___lldiv 0FA5                                i1l110 0084  
                              i1l320 0730                                i1l251 0F33  
                              i1l252 0F35                                i1l326 0E01  
                              i1l246 0EFF                                i1l255 0F49  
                              i1l247 0F12                                i1l440 0DBA  
                              i1l177 0CE7                                i1l531 0EEF  
                              i1l372 07E6                                i1l517 0D14  
                              i1l365 0FFF                                i1l437 078B  
                              i1l462 0312                                i1l454 04D0  
                              i1l534 0BF8                                i1l448 04B2  
                              i1l449 04D0                                i1l545 0CBC  
                              i1l377 03EB                                i1l722 0C64  
                              i1l379 03FA                                i1l724 0C78  
                              i1l572 0BE3                                i1l741 0E87  
                              i1l742 0E97                                i1l736 0D47  
                              i1l758 0FA4                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_754 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00D5  
                _initialiseADCModule 0BC0                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00D7                      __initialization 0088  
                       __end_of_main 0D80                    ?_initialiseADCPin 0070  
              _integratorScaledLimit 00A0                          i1_writeGPIO 06D2  
                             ??_main 00DF                   ??_initialiseADCPin 00D2  
           __end_of_readFilteredVout 078C                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00D8      __end_of_setupInternalOscillator 0596  
setupInternalOscillator@selectedFreq 00D4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2021 0D30  
                             i1l2013 0D15                               i1l2101 0711  
                             i1l2023 0D3F                               i1l2015 0D1D  
                             i1l2111 0DC3                               i1l2103 0716  
                             i1l2017 0D21                               i1l2121 0DD5  
                             i1l2113 0DC8                               i1l2105 0723  
                             i1l2019 0D29                               i1l2123 0DDA  
                             i1l2131 0DE8                               i1l2115 0DCB  
                             i1l2107 0DBC                               i1l2211 0F05  
                             i1l2203 0EF1                               i1l2301 0C5A  
                             i1l2061 0DB6                               i1l2133 0DED  
                             i1l2125 0DE6                               i1l2117 0DCF  
                             i1l2109 0DBD                               i1l2221 0F1D  
                             i1l2213 0F0B                               i1l2205 0EF3  
                             i1l1182 0C20                               i1l2311 0C74  
                             i1l2303 0C5C                               i1l2071 0E56  
                             i1l2055 0D80                               i1l2135 0DF2  
                             i1l2143 0E00                               i1l2119 0DD0  
                             i1l2231 0F2D                               i1l2223 0F28  
                             i1l2215 0F10                               i1l2207 0EF9  
                             u200_20 0CF3                               i1l2321 0F69  
                             i1l2305 0C60                               i1l2073 0E5B  
                             i1l1185 0C20                               i1l2065 0C07  
                             i1l2057 0D85                               i1l2137 0DFE  
                             i1l2081 06D4                               i1l2233 0F39  
                             i1l2217 0F17                               i1l2209 0EFD  
                             i1l2401 0EA7                               i1l2331 0F8F  
                             i1l2323 0F6D                               i1l2315 0F4A  
                             i1l2307 0C69                               i1l2075 0E6B  
                             i1l2067 0C14                               i1l2059 0DA2  
                             i1l2251 00D9                               i1l2091 06E7  
                             i1l2083 06DA                               i1l2235 0F3D  
                             i1l2219 0F19                               i1l2243 0F47  
                             i1l2403 0EAB                               i1l2333 0F96  
                             i1l2325 0F74                               i1l2317 0F5B  
                             i1l2309 0C6E                               i1l2077 0E73  
                             i1l2069 0E4C                               i1l2261 01AF  
                             i1l2253 00E7                               i1l2093 06EC  
                             i1l2085 06DF                               i1l2341 0BF2  
                             i1l2237 0F41                               i1l2229 0F29  
                             i1l2413 0EC2                               i1l2405 0EB1  
                             i1l2327 0F86                               i1l2319 0F5E  
                             i1l2335 0F9C                               i1l2271 0299  
                             i1l2263 01BF                               i1l2255 011B  
                             i1l2247 00B4                               i1l2095 06F1  
                             i1l2087 06E2                               i1l2079 06D3  
                             i1l2351 0CB4                               i1l2343 0C99  
                             i1l2239 0F42                               i1l2511 079C  
                             i1l2503 078C                               i1l2415 0ED2  
                             i1l2407 0EC1                               i1l2431 0741  
                             i1l2423 0731                               u201_20 0D01  
                             i1l2329 0F8E                               i1l2273 02BB  
                             i1l2265 01CA                               i1l2257 012A  
                             i1l2249 00CA                               i1l2361 03FB  
                             u201_21 0CFF                               i1l2097 06FE  
                             i1l2089 06E6                               i1l2353 0CBA  
                             i1l2345 0CA1                               i1l2513 07A0  
                             i1l2417 0ED6                               i1l2433 0745  
                             i1l2275 02EC                               i1l2267 0217  
                             i1l2259 0185                               i1l2371 0413  
                             i1l2363 0402                               i1l2291 0D12  
                             i1l2283 0CE8                               i1l2099 070C  
                             i1l2339 0BED                               i1l2347 0CAC  
                             i1l2531 07D3                               i1l2515 07A6  
                             i1l2419 0EDC                               i1l2451 0778  
                             i1l2435 074B                               i1l2355 0CBD  
                             i1l2277 030E                               i1l2269 0267  
                             i1l2381 04A9                               i1l2373 0418  
                             i1l2365 0408                               i1l2293 0D13  
                             i1l2285 0D06                               i1l2349 0CB0  
                             i1l2525 07B9                               i1l2517 07AF  
                             i1l2509 078E                               i1l2445 075E  
                             i1l2437 0754                               i1l2429 0733  
                             i1l2461 03D1                               i1l2357 0CC0  
                             i1l2701 001B                               i1l2391 04CB  
                             i1l2383 04AD                               i1l2367 040A  
                             i1l2287 0D08                               i1l2471 0FA5  
                             i1l2527 07C9                               i1l2519 07B8  
                             i1l2447 076E                               i1l2439 075D  
                             i1l2463 03DD                               i1l2455 0313  
                             i1l2359 0CCB                               i1l2711 0035  
                             i1l2703 0021                               u202_20 0D02  
                             i1l2385 04B6                               i1l2369 0410  
                             i1l2377 044B                               i1l2289 0D0D  
                             i1l2297 0BDB                               i1l2481 0FB9  
                             i1l2529 07CD                               i1l2393 0E98  
                             i1l2449 0772                               i1l2465 03E7  
                             i1l2457 0319                               i1l2721 0053  
                             i1l2713 003D                               i1l2705 0024  
                             i1l2379 04A5                               i1l2299 0BDF  
                             i1l2483 0FBF                               i1l2467 03F5  
                             i1l2459 0323                               i1l2731 0083  
                             i1l2723 0063                               i1l2715 0045  
                             i1l2707 0029                               u210_25 0F5F  
                             i1l2389 04C1                               i1l2493 0FD2  
                             i1l2485 0FC8                               i1l2477 0FA7  
                             i1l2469 03F9                               i1l2725 006E  
                             i1l2717 004A                               i1l2709 002F  
                             i1l2495 0FE2                               i1l2487 0FD1  
                             i1l2479 0FB5                               i1l2399 0E99  
                             i1l2727 0073                               i1l2719 004D  
                             u211_20 0F6D                               u203_20 0D0D  
                             u211_21 0F6C                               u203_21 0D0C  
                             i1l2497 0FE6                               i1l2729 0078  
                             i1l2499 0FEC                               u132_20 0D21  
                             u204_20 0D12                               u132_21 0D20  
                             u204_21 0D11                               i1l2699 0006  
                             u220_24 0CE7                               u212_25 0F6E  
                             u213_20 0F86                               u205_20 0C60  
                             u221_20 0402                               u213_21 0F85  
                             u205_21 0C5F                               u221_21 0401  
                             u213_25 0F82                               u133_25 0D2A  
                             u222_20 0408                               u150_20 06DA  
                             u230_20 0EE9                               u222_21 0407  
                             u150_21 06D9                               u214_25 0F90  
                             u206_25 0C65                               u134_25 0D31  
                             u230_25 0EE5                               u215_20 0F9C  
                             u135_20 0D3F                               u223_20 0410  
                             u151_20 06EC                               u231_20 074B  
                             u215_21 0F9B                               u135_21 0D3E  
                             u223_21 040F                               u151_21 06EB  
                             u231_21 074A                               u207_25 0C6A  
                             u208_20 0C74                               u160_20 0DD5  
                             u224_20 04AD                               u152_20 06F1  
                             u216_20 0CA1                               u240_20 0FBF  
                             u232_20 0778                               u208_21 0C73  
                             u160_21 0DD4                               u224_21 04AC  
                             u152_21 06F0                               u216_21 0CA0  
                             u240_21 0FBE                               u232_21 0777  
                             u209_20 0F5B                               u145_20 0DB0  
                             u225_20 04B6                               u217_20 0CAC  
                             u241_20 0FEC                               u233_20 0785  
                             u209_21 0F5A                               u225_21 04B5  
                             u217_21 0CAB                               u241_21 0FEB  
                             u161_24 0DDF                               u153_24 06F6  
                             u145_25 0DAC                               u161_25 0DDE  
                             u153_25 06F5                               u233_25 0781  
                             u146_20 0C14                               u162_20 0DED  
                             u226_20 04C0                               u218_20 0CBA  
                             u242_20 0FF9                               u234_20 0319  
                             u146_21 0C13                               u162_21 0DEC  
                             u226_21 04BF                               u218_21 0CB9  
                             u234_21 0318                               u154_24 0703  
                             u146_25 0C10                               u226_25 04BC  
                             u154_25 0702                               u242_25 0FF5  
                             u147_20 0E53                               u227_20 04CB  
                             u155_20 0711                               u243_20 07A6  
                             u235_20 0323                               u219_20 0CE5  
                             u251_20 0021                               u227_21 04CA  
                             u155_21 0710                               u243_21 07A5  
                             u235_21 0322                               u219_21 0CE2  
                             u251_21 0020                               u163_24 0DF7  
                             u163_25 0DF6                               u227_25 04C7  
                             u148_20 0E5B                               u156_20 0716  
                             u244_20 07D3                               u228_20 0EB1  
                             u236_20 0345                               u252_20 002F  
                             u148_21 0E5A                               u156_21 0715  
                             u244_21 07D2                               u228_21 0EB0  
                             u252_21 002E                               u236_25 0341  
                             u149_20 0E87                               u245_20 07E0  
                             u229_20 0EDC                               u237_20 03C9  
                             u253_20 004A                               u149_21 0E86  
                             u229_21 0EDB                               u253_21 0049  
                             u157_24 071B                               u157_25 071A  
                             u245_25 07DC                               u237_25 03C5  
                             u190_20 0F33                               u238_20 03E7  
                             u254_20 0053                               u190_21 0F32  
                             u238_21 03E6                               u254_21 0052  
                             u158_24 0728                               u158_25 0727  
                             u238_25 03E3                               u159_20 0DC3  
                             u191_20 0F39                               u239_20 03F5  
                             u255_20 006A                               u159_21 0DC2  
                             u191_21 0F38                               u239_21 03F4  
                             u255_21 0068                               u239_25 03F1  
                             u192_20 00CA                               u256_20 006B  
                             u192_21 00C9                               u193_20 01AF  
                             u185_20 0EF9                               u257_20 007F  
                             u193_21 01AE                               u185_21 0EF8  
                             u257_21 007D                               u193_23 01AB  
                             u194_20 01CA                               u186_20 0F05  
                             u258_20 0080                               u194_21 01C9  
                             u186_21 0F04                               u195_20 0217  
                             u187_20 0F0B                               u195_21 0216  
                             u187_21 0F0A                               u195_23 0213  
                             u196_20 0287                               u188_20 0F17  
                             u188_21 0F16                      ??_runPotScaling 0026  
                             u196_25 027E                               u197_20 02AA  
                             u197_25 02A6                               u189_25 0F20  
                             u198_20 02DA                               u198_25 02D1  
                             u199_20 0CF2                               u199_21 0CF0  
            initialiseGPIO@direction 00D2                     readGPIO@portType 00D9  
                readADCRaw@gpioValid 0077                               ___lmul 0D15  
                             ___omul 0E4C                               ___wmul 0C5A  
                          ??___lldiv 0020                     __end_of_readGPIO 0E4C  
                     _controlRoutine 03FB                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D2             _initialisePotentiometers 0BE4  
         initialiseADCPin@portNumber 00D6                     __end_of_setupPWM 0C3D  
                    _currentTripRead 0CE8           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00B0               __end_of_controlRoutine 04D1  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00D4  
              i1writeGPIO@gpioNumber 0074                        _currentILFIFO 0120  
                     _OPTION_REGbits 0095                    __end_of_Tick490Hz 0086  
              _runVoltageModeControl 00B4                           __pbssBANK0 005F  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
        __end_of_transToInitialising 0BBC                           __pmaintext 0D48  
                    ?_controlRoutine 0070                              ?___lmul 0070  
                            ?___omul 0020                              ?___wmul 0070  
  __end_of_transToVoltageModeControl 0800             ??_convertRawToMilliVolts 0020  
                         __pintentry 0004                              _CCP1CON 0293  
                ___omul@multiplicand 0028                       ___lmul@product 0078  
            __end_of_currentTripRead 0D15          __end_of_setPWMDutyandPeriod 0CE8  
   __end_of_initialiseCurrentSensors 0C99           __end_ofi1_currentTripReset 0BF9  
           initialiseADCPin@portType 00D5              _transToOverCurrentFault 0BDB  
                 i1readGPIO@portType 0077                readFilteredVout@i_835 0028  
              i1writeGPIO@portNumber 0075                           _filteredIL 00B0  
                          ?_readGPIO 0070                           _readADCRaw 0EF0  
                _readFilteredFreqPot 078C                 i1readGPIO@gpioNumber 0078  
                _readFilteredDutyPot 0FA5                            ?_setupPWM 0070  
               readADCRaw@gpioNumber 0079             initialiseGPIO@gpioNumber 00D6  
                            ___lldiv 0F4A                         ?i1_writeGPIO 0070  
               ?_readFilteredFreqPot 007A                              __ptext1 07F9  
                            __ptext2 0BBC                              __ptext3 0BB9  
                            __ptext4 0BCC                              __ptext5 0BD3  
                            __ptext6 0C21                              __ptext7 04D1  
                            __ptext8 0E02                              __ptext9 0BE4  
               ?_readFilteredDutyPot 007A         __end_of_initialiseController 0C5A  
                          _T2CONbits 001C                    ?_readFilteredVout 007A  
                            _setDuty 0063                i1writeGPIO@writeValue 0070  
             ?_runVoltageModeControl 0070                              _tripIDS 006B  
                 ??_readFilteredVout 0020                         ??i1_readGPIO 0070  
                            clrloop0 0BC7                 end_of_initialization 00B0  
    convertRawToMilliVolts@offsetted 0029                           ??_readGPIO 00D2  
                     ___omul@product 0071             ?_setupInternalOscillator 0070  
                    ___lldiv@divisor 0076                      ___lldiv@counter 0025  
                   _currentTripCount 0069                           ??_setupPWM 00D8  
                   _currentTripReset 0BF9           ??_initialisePotentiometers 00D8  
                         _prevPeriod 006D                    writeGPIO@portType 00D5  
                     _readFilteredIL 0E98                   __end_ofi1_readGPIO 0E02  
              ??_readFilteredFreqPot 0020                ??_readFilteredDutyPot 0020  
               i1readGPIO@portNumber 0076                     ?_currentTripRead 0070  
                  __end_of_writeGPIO 06D2            ??_transToOverCurrentFault 0070  
           initialiseGPIO@portNumber 00D7                         _filteredVout 005F  
        ??_transToCurrentModeControl 00D2                          ?_readADCRaw 0070  
                  _transToPotControl 0BBC                          _CCP1CONbits 0293  
                      readGPIO@readA 00D4                        readGPIO@readB 00D6  
              __end_of_runPotScaling 03FB                   ?_transToPotControl 0070  
          ?_initialiseCurrentSensors 0070                 _voltageModeVariables 00B6  
             __end_of_readFilteredIL 0EF0                  ??_transToPotControl 00D2  
                     __end_of___lmul 0D48          __end_of_initialiseADCModule 0BC6  
                     __end_of___omul 0E98                controlRoutine@maxDuty 0058  
                     __end_of___wmul 0C79                controlRoutine@minDuty 005A  
                     _clockFrequency 00A8                  start_initialization 0088  
       __end_of_setupTimer0Interrupt 0BDB                       _currentIDSFIFO 0140  
                        __end_of_abs 0C21                            _Tick490Hz 0004  
             _convertRawToMilliVolts 0D80            __end_of_transToPotControl 0BC0  
   convertRawToMilliVolts@vsenseMult 0025                     ??_controlRoutine 0052  
                  ___omul@multiplier 0020      __end_of_transToOverCurrentFault 0BE4  
         __end_of_currentTripMonitor 0CBD                 _initialiseController 0C3D  
                        _APFCON0bits 011D                             ??___lmul 0078  
                           ??___omul 0070                             ??___wmul 0074  
                    ?_readFilteredIL 0070            _transToCurrentModeControl 0BCC  
                          ___latbits 0001                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D2                           ?_Tick490Hz 0070  
                   _initialiseADCPin 060C                         _currentState 006C  
                 i1_currentTripReset 0BED                   readGPIO@gpioNumber 00DA  
              ?_initialiseController 0070                       _initialiseGPIO 0596  
                    i1readGPIO@readA 0072                      i1readGPIO@readB 0074  
   __end_of_initialisePotentiometers 0BED                  ?i1_currentTripReset 0070  
                           ?___lldiv 0076           ?_transToVoltageModeControl 0070  
    runVoltageModeControl@newVoltage 0050        runVoltageModeControl@propMult 0048  
            ??_runVoltageModeControl 0030                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0C07      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 060C  
                          clear_ram0 0BC6                            _setPeriod 006E  
                           _PIE1bits 0091         setPWMDutyandPeriod@dutyCycle 0070  
               _setupTimer0Interrupt 0BD3    runVoltageModeControl@integralMult 0040  
                _currentTripRead$917 007A                          _filteredIDS 00B2  
                         _ADCON0bits 009D                    ___wmul@multiplier 0070  
                 readGPIO@portNumber 00D8                          _freqPotFIFO 01A0  
                          _writeGPIO 0672                          ??_Tick490Hz 005E  
                  ___lmul@multiplier 0070                         ??_readADCRaw 0072  
             ??_initialiseController 00D8                      ?_initialiseGPIO 00D2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
              ?_setupTimer0Interrupt 0070          __end_of_readFilteredFreqPot 07E7  
        __end_of_readFilteredDutyPot 1000                 runPotScaling@maxDuty 002C  
               runPotScaling@minDuty 002E                  writeGPIO@gpioNumber 00D6  
convertRawToMilliVolts@returnValuedV 002B                   __end_of_readADCRaw 0F4A  
           readFilteredFreqPot@i_758 0028              ?_convertRawToMilliVolts 007C  
                         ?_writeGPIO 00D2                             __ptext10 0C79  
                           __ptext11 0BF9                             __ptext20 0731  
                           __ptext12 0672                             __ptext21 0E98  
                           __ptext13 0C3D                             __ptext30 03FB  
                           __ptext22 078C                             __ptext14 0596  
                           __ptext31 00B4                             __ptext23 0FA5  
                           __ptext15 060C                             __ptext32 0DBB  
                           __ptext24 0EF0                             __ptext16 0BC0  
                           __ptext33 0D80                             __ptext25 0C99  
                           __ptext34 0D15                             __ptext26 0BED  
                           __ptext18 0CBD                             __ptext35 0C07  
                           __ptext27 06D2                             __ptext19 0313  
                           __ptext36 0E4C                             __ptext28 0BDB  
                           __ptext37 0C5A                             __ptext29 0CE8  
                           __ptext38 0F4A            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0E02  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00B4                             _setupPWM 0C21  
                           int$flags 007E                             _slotTest 0065  
           __end_of_initialiseADCPin 0672                             main@argc 00DB  
           ?_transToOverCurrentFault 0070                             main@argv 00DD  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                 _currentTripMonitor 0C99                     _timerSlotQuarter 0066  
     __end_of_convertRawToMilliVolts 0DBB                           _INTCONbits 000B  
                ?_currentTripMonitor 0070    __end_of_transToCurrentModeControl 0BD3  
                _transToInitialising 0BB9                  writeGPIO@portNumber 00D7  
                           intlevel1 0000             _initialiseCurrentSensors 0C79  
                   ___lldiv@dividend 007A               i1readGPIO@returnValueA 0073  
             i1readGPIO@returnValueB 0075                     _readFilteredVout 0731  
             ??_setupTimer0Interrupt 00D2                           _OSCCONbits 0099  
        controlRoutine@setDuty_unreg 005C                 ??_currentTripMonitor 007B  
                        _potSetCount 0068                 ?_transToInitialising 0070  
                _setPWMDutyandPeriod 0CBD              _setupInternalOscillator 04D1  
        ??_transToVoltageModeControl 00D2                        ??i1_writeGPIO 0071  
                      __pstringtext1 07E7                        __pstringtext2 0000  
                         _OPTION_REG 0095                     ___lldiv@quotient 0021  
      __end_of_runVoltageModeControl 0313                  writeGPIO@writeValue 00D2  
                        ??_writeGPIO 00D3                 ?_setPWMDutyandPeriod 0070  
                  ?_currentTripReset 0070                   ??_currentTripReset 00D8  
              readADCRaw@returnValue 0074                    ??_currentTripRead 0079  
                      _runPotScaling 0313                 readGPIO@returnValueA 00D5  
               readGPIO@returnValueB 00D7                  readFilteredIL@i_925 007A  
                    readFilteredIL@i 007B  
