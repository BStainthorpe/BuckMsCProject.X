

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Aug 11 11:06:17 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 2.40
    59                           ; Generated 17/11/2021 GMT
    60                           ; 
    61                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F1827 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  0111                     	;# 
   142  0112                     	;# 
   143  0113                     	;# 
   144  0114                     	;# 
   145  0115                     	;# 
   146  0116                     	;# 
   147  0117                     	;# 
   148  0118                     	;# 
   149  0119                     	;# 
   150  011A                     	;# 
   151  011B                     	;# 
   152  011D                     	;# 
   153  011E                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0194                     	;# 
   163  0195                     	;# 
   164  0196                     	;# 
   165  0199                     	;# 
   166  019A                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  0219                     	;# 
   194  021A                     	;# 
   195  021B                     	;# 
   196  021C                     	;# 
   197  021D                     	;# 
   198  021E                     	;# 
   199  021F                     	;# 
   200  0291                     	;# 
   201  0291                     	;# 
   202  0292                     	;# 
   203  0293                     	;# 
   204  0294                     	;# 
   205  0295                     	;# 
   206  0295                     	;# 
   207  0296                     	;# 
   208  0298                     	;# 
   209  0298                     	;# 
   210  0299                     	;# 
   211  029A                     	;# 
   212  029B                     	;# 
   213  029C                     	;# 
   214  029C                     	;# 
   215  029D                     	;# 
   216  029E                     	;# 
   217  029E                     	;# 
   218  0311                     	;# 
   219  0311                     	;# 
   220  0312                     	;# 
   221  0313                     	;# 
   222  0318                     	;# 
   223  0318                     	;# 
   224  0319                     	;# 
   225  031A                     	;# 
   226  0394                     	;# 
   227  0395                     	;# 
   228  0396                     	;# 
   229  039A                     	;# 
   230  039C                     	;# 
   231  039D                     	;# 
   232  039E                     	;# 
   233  039F                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000D                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0014                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  001E                     	;# 
   279  001F                     	;# 
   280  008C                     	;# 
   281  008D                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0093                     	;# 
   285  0094                     	;# 
   286  0095                     	;# 
   287  0096                     	;# 
   288  0097                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009A                     	;# 
   292  009B                     	;# 
   293  009B                     	;# 
   294  009C                     	;# 
   295  009D                     	;# 
   296  009E                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  0111                     	;# 
   300  0112                     	;# 
   301  0113                     	;# 
   302  0114                     	;# 
   303  0115                     	;# 
   304  0116                     	;# 
   305  0117                     	;# 
   306  0118                     	;# 
   307  0119                     	;# 
   308  011A                     	;# 
   309  011B                     	;# 
   310  011D                     	;# 
   311  011E                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  0191                     	;# 
   315  0191                     	;# 
   316  0192                     	;# 
   317  0193                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0199                     	;# 
   324  019A                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019C                     	;# 
   330  019C                     	;# 
   331  019D                     	;# 
   332  019E                     	;# 
   333  019F                     	;# 
   334  020C                     	;# 
   335  020D                     	;# 
   336  0211                     	;# 
   337  0211                     	;# 
   338  0212                     	;# 
   339  0212                     	;# 
   340  0213                     	;# 
   341  0213                     	;# 
   342  0214                     	;# 
   343  0214                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0216                     	;# 
   348  0216                     	;# 
   349  0217                     	;# 
   350  0217                     	;# 
   351  0219                     	;# 
   352  021A                     	;# 
   353  021B                     	;# 
   354  021C                     	;# 
   355  021D                     	;# 
   356  021E                     	;# 
   357  021F                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0294                     	;# 
   363  0295                     	;# 
   364  0295                     	;# 
   365  0296                     	;# 
   366  0298                     	;# 
   367  0298                     	;# 
   368  0299                     	;# 
   369  029A                     	;# 
   370  029B                     	;# 
   371  029C                     	;# 
   372  029C                     	;# 
   373  029D                     	;# 
   374  029E                     	;# 
   375  029E                     	;# 
   376  0311                     	;# 
   377  0311                     	;# 
   378  0312                     	;# 
   379  0313                     	;# 
   380  0318                     	;# 
   381  0318                     	;# 
   382  0319                     	;# 
   383  031A                     	;# 
   384  0394                     	;# 
   385  0395                     	;# 
   386  0396                     	;# 
   387  039A                     	;# 
   388  039C                     	;# 
   389  039D                     	;# 
   390  039E                     	;# 
   391  039F                     	;# 
   392  0415                     	;# 
   393  0416                     	;# 
   394  0417                     	;# 
   395  041C                     	;# 
   396  041D                     	;# 
   397  041E                     	;# 
   398  0FE4                     	;# 
   399  0FE5                     	;# 
   400  0FE6                     	;# 
   401  0FE7                     	;# 
   402  0FE8                     	;# 
   403  0FE9                     	;# 
   404  0FEA                     	;# 
   405  0FEB                     	;# 
   406  0FED                     	;# 
   407  0FEE                     	;# 
   408  0FEF                     	;# 
   409  0000                     	;# 
   410  0001                     	;# 
   411  0002                     	;# 
   412  0003                     	;# 
   413  0004                     	;# 
   414  0005                     	;# 
   415  0006                     	;# 
   416  0007                     	;# 
   417  0008                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  0011                     	;# 
   424  0012                     	;# 
   425  0013                     	;# 
   426  0014                     	;# 
   427  0015                     	;# 
   428  0016                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001C                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  008C                     	;# 
   439  008D                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0093                     	;# 
   443  0094                     	;# 
   444  0095                     	;# 
   445  0096                     	;# 
   446  0097                     	;# 
   447  0098                     	;# 
   448  0099                     	;# 
   449  009A                     	;# 
   450  009B                     	;# 
   451  009B                     	;# 
   452  009C                     	;# 
   453  009D                     	;# 
   454  009E                     	;# 
   455  010C                     	;# 
   456  010D                     	;# 
   457  0111                     	;# 
   458  0112                     	;# 
   459  0113                     	;# 
   460  0114                     	;# 
   461  0115                     	;# 
   462  0116                     	;# 
   463  0117                     	;# 
   464  0118                     	;# 
   465  0119                     	;# 
   466  011A                     	;# 
   467  011B                     	;# 
   468  011D                     	;# 
   469  011E                     	;# 
   470  018C                     	;# 
   471  018D                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0194                     	;# 
   479  0195                     	;# 
   480  0196                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019C                     	;# 
   488  019C                     	;# 
   489  019D                     	;# 
   490  019E                     	;# 
   491  019F                     	;# 
   492  020C                     	;# 
   493  020D                     	;# 
   494  0211                     	;# 
   495  0211                     	;# 
   496  0212                     	;# 
   497  0212                     	;# 
   498  0213                     	;# 
   499  0213                     	;# 
   500  0214                     	;# 
   501  0214                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0216                     	;# 
   506  0216                     	;# 
   507  0217                     	;# 
   508  0217                     	;# 
   509  0219                     	;# 
   510  021A                     	;# 
   511  021B                     	;# 
   512  021C                     	;# 
   513  021D                     	;# 
   514  021E                     	;# 
   515  021F                     	;# 
   516  0291                     	;# 
   517  0291                     	;# 
   518  0292                     	;# 
   519  0293                     	;# 
   520  0294                     	;# 
   521  0295                     	;# 
   522  0295                     	;# 
   523  0296                     	;# 
   524  0298                     	;# 
   525  0298                     	;# 
   526  0299                     	;# 
   527  029A                     	;# 
   528  029B                     	;# 
   529  029C                     	;# 
   530  029C                     	;# 
   531  029D                     	;# 
   532  029E                     	;# 
   533  029E                     	;# 
   534  0311                     	;# 
   535  0311                     	;# 
   536  0312                     	;# 
   537  0313                     	;# 
   538  0318                     	;# 
   539  0318                     	;# 
   540  0319                     	;# 
   541  031A                     	;# 
   542  0394                     	;# 
   543  0395                     	;# 
   544  0396                     	;# 
   545  039A                     	;# 
   546  039C                     	;# 
   547  039D                     	;# 
   548  039E                     	;# 
   549  039F                     	;# 
   550  0415                     	;# 
   551  0416                     	;# 
   552  0417                     	;# 
   553  041C                     	;# 
   554  041D                     	;# 
   555  041E                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0098                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011A                     	;# 
   625  011B                     	;# 
   626  011D                     	;# 
   627  011E                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0191                     	;# 
   631  0191                     	;# 
   632  0192                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0194                     	;# 
   637  0195                     	;# 
   638  0196                     	;# 
   639  0199                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  020D                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  0219                     	;# 
   668  021A                     	;# 
   669  021B                     	;# 
   670  021C                     	;# 
   671  021D                     	;# 
   672  021E                     	;# 
   673  021F                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0294                     	;# 
   679  0295                     	;# 
   680  0295                     	;# 
   681  0296                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029B                     	;# 
   687  029C                     	;# 
   688  029C                     	;# 
   689  029D                     	;# 
   690  029E                     	;# 
   691  029E                     	;# 
   692  0311                     	;# 
   693  0311                     	;# 
   694  0312                     	;# 
   695  0313                     	;# 
   696  0318                     	;# 
   697  0318                     	;# 
   698  0319                     	;# 
   699  031A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  039A                     	;# 
   704  039C                     	;# 
   705  039D                     	;# 
   706  039E                     	;# 
   707  039F                     	;# 
   708  0415                     	;# 
   709  0416                     	;# 
   710  0417                     	;# 
   711  041C                     	;# 
   712  041D                     	;# 
   713  041E                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0013                     	;# 
   742  0014                     	;# 
   743  0015                     	;# 
   744  0016                     	;# 
   745  0016                     	;# 
   746  0017                     	;# 
   747  0018                     	;# 
   748  0019                     	;# 
   749  001A                     	;# 
   750  001B                     	;# 
   751  001C                     	;# 
   752  001E                     	;# 
   753  001F                     	;# 
   754  008C                     	;# 
   755  008D                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0094                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  0111                     	;# 
   774  0112                     	;# 
   775  0113                     	;# 
   776  0114                     	;# 
   777  0115                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  0118                     	;# 
   781  0119                     	;# 
   782  011A                     	;# 
   783  011B                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788  0191                     	;# 
   789  0191                     	;# 
   790  0192                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0194                     	;# 
   795  0195                     	;# 
   796  0196                     	;# 
   797  0199                     	;# 
   798  019A                     	;# 
   799  019B                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019C                     	;# 
   804  019C                     	;# 
   805  019D                     	;# 
   806  019E                     	;# 
   807  019F                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  0211                     	;# 
   811  0211                     	;# 
   812  0212                     	;# 
   813  0212                     	;# 
   814  0213                     	;# 
   815  0213                     	;# 
   816  0214                     	;# 
   817  0214                     	;# 
   818  0215                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0216                     	;# 
   822  0216                     	;# 
   823  0217                     	;# 
   824  0217                     	;# 
   825  0219                     	;# 
   826  021A                     	;# 
   827  021B                     	;# 
   828  021C                     	;# 
   829  021D                     	;# 
   830  021E                     	;# 
   831  021F                     	;# 
   832  0291                     	;# 
   833  0291                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0294                     	;# 
   837  0295                     	;# 
   838  0295                     	;# 
   839  0296                     	;# 
   840  0298                     	;# 
   841  0298                     	;# 
   842  0299                     	;# 
   843  029A                     	;# 
   844  029B                     	;# 
   845  029C                     	;# 
   846  029C                     	;# 
   847  029D                     	;# 
   848  029E                     	;# 
   849  029E                     	;# 
   850  0311                     	;# 
   851  0311                     	;# 
   852  0312                     	;# 
   853  0313                     	;# 
   854  0318                     	;# 
   855  0318                     	;# 
   856  0319                     	;# 
   857  031A                     	;# 
   858  0394                     	;# 
   859  0395                     	;# 
   860  0396                     	;# 
   861  039A                     	;# 
   862  039C                     	;# 
   863  039D                     	;# 
   864  039E                     	;# 
   865  039F                     	;# 
   866  0415                     	;# 
   867  0416                     	;# 
   868  0417                     	;# 
   869  041C                     	;# 
   870  041D                     	;# 
   871  041E                     	;# 
   872  0FE4                     	;# 
   873  0FE5                     	;# 
   874  0FE6                     	;# 
   875  0FE7                     	;# 
   876  0FE8                     	;# 
   877  0FE9                     	;# 
   878  0FEA                     	;# 
   879  0FEB                     	;# 
   880  0FED                     	;# 
   881  0FEE                     	;# 
   882  0FEF                     	;# 
   883  0000                     	;# 
   884  0001                     	;# 
   885  0002                     	;# 
   886  0003                     	;# 
   887  0004                     	;# 
   888  0005                     	;# 
   889  0006                     	;# 
   890  0007                     	;# 
   891  0008                     	;# 
   892  0009                     	;# 
   893  000A                     	;# 
   894  000B                     	;# 
   895  000C                     	;# 
   896  000D                     	;# 
   897  0011                     	;# 
   898  0012                     	;# 
   899  0013                     	;# 
   900  0014                     	;# 
   901  0015                     	;# 
   902  0016                     	;# 
   903  0016                     	;# 
   904  0017                     	;# 
   905  0018                     	;# 
   906  0019                     	;# 
   907  001A                     	;# 
   908  001B                     	;# 
   909  001C                     	;# 
   910  001E                     	;# 
   911  001F                     	;# 
   912  008C                     	;# 
   913  008D                     	;# 
   914  0091                     	;# 
   915  0092                     	;# 
   916  0093                     	;# 
   917  0094                     	;# 
   918  0095                     	;# 
   919  0096                     	;# 
   920  0097                     	;# 
   921  0098                     	;# 
   922  0099                     	;# 
   923  009A                     	;# 
   924  009B                     	;# 
   925  009B                     	;# 
   926  009C                     	;# 
   927  009D                     	;# 
   928  009E                     	;# 
   929  010C                     	;# 
   930  010D                     	;# 
   931  0111                     	;# 
   932  0112                     	;# 
   933  0113                     	;# 
   934  0114                     	;# 
   935  0115                     	;# 
   936  0116                     	;# 
   937  0117                     	;# 
   938  0118                     	;# 
   939  0119                     	;# 
   940  011A                     	;# 
   941  011B                     	;# 
   942  011D                     	;# 
   943  011E                     	;# 
   944  018C                     	;# 
   945  018D                     	;# 
   946  0191                     	;# 
   947  0191                     	;# 
   948  0192                     	;# 
   949  0193                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0194                     	;# 
   953  0195                     	;# 
   954  0196                     	;# 
   955  0199                     	;# 
   956  019A                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019C                     	;# 
   962  019C                     	;# 
   963  019D                     	;# 
   964  019E                     	;# 
   965  019F                     	;# 
   966  020C                     	;# 
   967  020D                     	;# 
   968  0211                     	;# 
   969  0211                     	;# 
   970  0212                     	;# 
   971  0212                     	;# 
   972  0213                     	;# 
   973  0213                     	;# 
   974  0214                     	;# 
   975  0214                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0216                     	;# 
   980  0216                     	;# 
   981  0217                     	;# 
   982  0217                     	;# 
   983  0219                     	;# 
   984  021A                     	;# 
   985  021B                     	;# 
   986  021C                     	;# 
   987  021D                     	;# 
   988  021E                     	;# 
   989  021F                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0294                     	;# 
   995  0295                     	;# 
   996  0295                     	;# 
   997  0296                     	;# 
   998  0298                     	;# 
   999  0298                     	;# 
  1000  0299                     	;# 
  1001  029A                     	;# 
  1002  029B                     	;# 
  1003  029C                     	;# 
  1004  029C                     	;# 
  1005  029D                     	;# 
  1006  029E                     	;# 
  1007  029E                     	;# 
  1008  0311                     	;# 
  1009  0311                     	;# 
  1010  0312                     	;# 
  1011  0313                     	;# 
  1012  0318                     	;# 
  1013  0318                     	;# 
  1014  0319                     	;# 
  1015  031A                     	;# 
  1016  0394                     	;# 
  1017  0395                     	;# 
  1018  0396                     	;# 
  1019  039A                     	;# 
  1020  039C                     	;# 
  1021  039D                     	;# 
  1022  039E                     	;# 
  1023  039F                     	;# 
  1024  0415                     	;# 
  1025  0416                     	;# 
  1026  0417                     	;# 
  1027  041C                     	;# 
  1028  041D                     	;# 
  1029  041E                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0013                     	;# 
  1058  0014                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0093                     	;# 
  1075  0094                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0098                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011A                     	;# 
  1099  011B                     	;# 
  1100  011D                     	;# 
  1101  011E                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020C                     	;# 
  1125  020D                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0219                     	;# 
  1142  021A                     	;# 
  1143  021B                     	;# 
  1144  021C                     	;# 
  1145  021D                     	;# 
  1146  021E                     	;# 
  1147  021F                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0294                     	;# 
  1153  0295                     	;# 
  1154  0295                     	;# 
  1155  0296                     	;# 
  1156  0298                     	;# 
  1157  0298                     	;# 
  1158  0299                     	;# 
  1159  029A                     	;# 
  1160  029B                     	;# 
  1161  029C                     	;# 
  1162  029C                     	;# 
  1163  029D                     	;# 
  1164  029E                     	;# 
  1165  029E                     	;# 
  1166  0311                     	;# 
  1167  0311                     	;# 
  1168  0312                     	;# 
  1169  0313                     	;# 
  1170  0318                     	;# 
  1171  0318                     	;# 
  1172  0319                     	;# 
  1173  031A                     	;# 
  1174  0394                     	;# 
  1175  0395                     	;# 
  1176  0396                     	;# 
  1177  039A                     	;# 
  1178  039C                     	;# 
  1179  039D                     	;# 
  1180  039E                     	;# 
  1181  039F                     	;# 
  1182  0415                     	;# 
  1183  0416                     	;# 
  1184  0417                     	;# 
  1185  041C                     	;# 
  1186  041D                     	;# 
  1187  041E                     	;# 
  1188  0FE4                     	;# 
  1189  0FE5                     	;# 
  1190  0FE6                     	;# 
  1191  0FE7                     	;# 
  1192  0FE8                     	;# 
  1193  0FE9                     	;# 
  1194  0FEA                     	;# 
  1195  0FEB                     	;# 
  1196  0FED                     	;# 
  1197  0FEE                     	;# 
  1198  0FEF                     	;# 
  1199  0000                     	;# 
  1200  0001                     	;# 
  1201  0002                     	;# 
  1202  0003                     	;# 
  1203  0004                     	;# 
  1204  0005                     	;# 
  1205  0006                     	;# 
  1206  0007                     	;# 
  1207  0008                     	;# 
  1208  0009                     	;# 
  1209  000A                     	;# 
  1210  000B                     	;# 
  1211  000C                     	;# 
  1212  000D                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0013                     	;# 
  1216  0014                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0016                     	;# 
  1220  0017                     	;# 
  1221  0018                     	;# 
  1222  0019                     	;# 
  1223  001A                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001E                     	;# 
  1227  001F                     	;# 
  1228  008C                     	;# 
  1229  008D                     	;# 
  1230  0091                     	;# 
  1231  0092                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0097                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  0111                     	;# 
  1248  0112                     	;# 
  1249  0113                     	;# 
  1250  0114                     	;# 
  1251  0115                     	;# 
  1252  0116                     	;# 
  1253  0117                     	;# 
  1254  0118                     	;# 
  1255  0119                     	;# 
  1256  011A                     	;# 
  1257  011B                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  018C                     	;# 
  1261  018D                     	;# 
  1262  0191                     	;# 
  1263  0191                     	;# 
  1264  0192                     	;# 
  1265  0193                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0194                     	;# 
  1269  0195                     	;# 
  1270  0196                     	;# 
  1271  0199                     	;# 
  1272  019A                     	;# 
  1273  019B                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019C                     	;# 
  1278  019C                     	;# 
  1279  019D                     	;# 
  1280  019E                     	;# 
  1281  019F                     	;# 
  1282  020C                     	;# 
  1283  020D                     	;# 
  1284  0211                     	;# 
  1285  0211                     	;# 
  1286  0212                     	;# 
  1287  0212                     	;# 
  1288  0213                     	;# 
  1289  0213                     	;# 
  1290  0214                     	;# 
  1291  0214                     	;# 
  1292  0215                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0216                     	;# 
  1296  0216                     	;# 
  1297  0217                     	;# 
  1298  0217                     	;# 
  1299  0219                     	;# 
  1300  021A                     	;# 
  1301  021B                     	;# 
  1302  021C                     	;# 
  1303  021D                     	;# 
  1304  021E                     	;# 
  1305  021F                     	;# 
  1306  0291                     	;# 
  1307  0291                     	;# 
  1308  0292                     	;# 
  1309  0293                     	;# 
  1310  0294                     	;# 
  1311  0295                     	;# 
  1312  0295                     	;# 
  1313  0296                     	;# 
  1314  0298                     	;# 
  1315  0298                     	;# 
  1316  0299                     	;# 
  1317  029A                     	;# 
  1318  029B                     	;# 
  1319  029C                     	;# 
  1320  029C                     	;# 
  1321  029D                     	;# 
  1322  029E                     	;# 
  1323  029E                     	;# 
  1324  0311                     	;# 
  1325  0311                     	;# 
  1326  0312                     	;# 
  1327  0313                     	;# 
  1328  0318                     	;# 
  1329  0318                     	;# 
  1330  0319                     	;# 
  1331  031A                     	;# 
  1332  0394                     	;# 
  1333  0395                     	;# 
  1334  0396                     	;# 
  1335  039A                     	;# 
  1336  039C                     	;# 
  1337  039D                     	;# 
  1338  039E                     	;# 
  1339  039F                     	;# 
  1340  0415                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  041C                     	;# 
  1344  041D                     	;# 
  1345  041E                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0013                     	;# 
  1374  0014                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  001E                     	;# 
  1385  001F                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0093                     	;# 
  1391  0094                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0098                     	;# 
  1396  0099                     	;# 
  1397  009A                     	;# 
  1398  009B                     	;# 
  1399  009B                     	;# 
  1400  009C                     	;# 
  1401  009D                     	;# 
  1402  009E                     	;# 
  1403  010C                     	;# 
  1404  010D                     	;# 
  1405  0111                     	;# 
  1406  0112                     	;# 
  1407  0113                     	;# 
  1408  0114                     	;# 
  1409  0115                     	;# 
  1410  0116                     	;# 
  1411  0117                     	;# 
  1412  0118                     	;# 
  1413  0119                     	;# 
  1414  011A                     	;# 
  1415  011B                     	;# 
  1416  011D                     	;# 
  1417  011E                     	;# 
  1418  018C                     	;# 
  1419  018D                     	;# 
  1420  0191                     	;# 
  1421  0191                     	;# 
  1422  0192                     	;# 
  1423  0193                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0194                     	;# 
  1427  0195                     	;# 
  1428  0196                     	;# 
  1429  0199                     	;# 
  1430  019A                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019C                     	;# 
  1436  019C                     	;# 
  1437  019D                     	;# 
  1438  019E                     	;# 
  1439  019F                     	;# 
  1440  020C                     	;# 
  1441  020D                     	;# 
  1442  0211                     	;# 
  1443  0211                     	;# 
  1444  0212                     	;# 
  1445  0212                     	;# 
  1446  0213                     	;# 
  1447  0213                     	;# 
  1448  0214                     	;# 
  1449  0214                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0216                     	;# 
  1454  0216                     	;# 
  1455  0217                     	;# 
  1456  0217                     	;# 
  1457  0219                     	;# 
  1458  021A                     	;# 
  1459  021B                     	;# 
  1460  021C                     	;# 
  1461  021D                     	;# 
  1462  021E                     	;# 
  1463  021F                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0294                     	;# 
  1469  0295                     	;# 
  1470  0295                     	;# 
  1471  0296                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  029B                     	;# 
  1477  029C                     	;# 
  1478  029C                     	;# 
  1479  029D                     	;# 
  1480  029E                     	;# 
  1481  029E                     	;# 
  1482  0311                     	;# 
  1483  0311                     	;# 
  1484  0312                     	;# 
  1485  0313                     	;# 
  1486  0318                     	;# 
  1487  0318                     	;# 
  1488  0319                     	;# 
  1489  031A                     	;# 
  1490  0394                     	;# 
  1491  0395                     	;# 
  1492  0396                     	;# 
  1493  039A                     	;# 
  1494  039C                     	;# 
  1495  039D                     	;# 
  1496  039E                     	;# 
  1497  039F                     	;# 
  1498  0415                     	;# 
  1499  0416                     	;# 
  1500  0417                     	;# 
  1501  041C                     	;# 
  1502  041D                     	;# 
  1503  041E                     	;# 
  1504  0FE4                     	;# 
  1505  0FE5                     	;# 
  1506  0FE6                     	;# 
  1507  0FE7                     	;# 
  1508  0FE8                     	;# 
  1509  0FE9                     	;# 
  1510  0FEA                     	;# 
  1511  0FEB                     	;# 
  1512  0FED                     	;# 
  1513  0FEE                     	;# 
  1514  0FEF                     	;# 
  1515  0000                     	;# 
  1516  0001                     	;# 
  1517  0002                     	;# 
  1518  0003                     	;# 
  1519  0004                     	;# 
  1520  0005                     	;# 
  1521  0006                     	;# 
  1522  0007                     	;# 
  1523  0008                     	;# 
  1524  0009                     	;# 
  1525  000A                     	;# 
  1526  000B                     	;# 
  1527  000C                     	;# 
  1528  000D                     	;# 
  1529  0011                     	;# 
  1530  0012                     	;# 
  1531  0013                     	;# 
  1532  0014                     	;# 
  1533  0015                     	;# 
  1534  0016                     	;# 
  1535  0016                     	;# 
  1536  0017                     	;# 
  1537  0018                     	;# 
  1538  0019                     	;# 
  1539  001A                     	;# 
  1540  001B                     	;# 
  1541  001C                     	;# 
  1542  001E                     	;# 
  1543  001F                     	;# 
  1544  008C                     	;# 
  1545  008D                     	;# 
  1546  0091                     	;# 
  1547  0092                     	;# 
  1548  0093                     	;# 
  1549  0094                     	;# 
  1550  0095                     	;# 
  1551  0096                     	;# 
  1552  0097                     	;# 
  1553  0098                     	;# 
  1554  0099                     	;# 
  1555  009A                     	;# 
  1556  009B                     	;# 
  1557  009B                     	;# 
  1558  009C                     	;# 
  1559  009D                     	;# 
  1560  009E                     	;# 
  1561  010C                     	;# 
  1562  010D                     	;# 
  1563  0111                     	;# 
  1564  0112                     	;# 
  1565  0113                     	;# 
  1566  0114                     	;# 
  1567  0115                     	;# 
  1568  0116                     	;# 
  1569  0117                     	;# 
  1570  0118                     	;# 
  1571  0119                     	;# 
  1572  011A                     	;# 
  1573  011B                     	;# 
  1574  011D                     	;# 
  1575  011E                     	;# 
  1576  018C                     	;# 
  1577  018D                     	;# 
  1578  0191                     	;# 
  1579  0191                     	;# 
  1580  0192                     	;# 
  1581  0193                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0194                     	;# 
  1585  0195                     	;# 
  1586  0196                     	;# 
  1587  0199                     	;# 
  1588  019A                     	;# 
  1589  019B                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019C                     	;# 
  1594  019C                     	;# 
  1595  019D                     	;# 
  1596  019E                     	;# 
  1597  019F                     	;# 
  1598  020C                     	;# 
  1599  020D                     	;# 
  1600  0211                     	;# 
  1601  0211                     	;# 
  1602  0212                     	;# 
  1603  0212                     	;# 
  1604  0213                     	;# 
  1605  0213                     	;# 
  1606  0214                     	;# 
  1607  0214                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  0219                     	;# 
  1616  021A                     	;# 
  1617  021B                     	;# 
  1618  021C                     	;# 
  1619  021D                     	;# 
  1620  021E                     	;# 
  1621  021F                     	;# 
  1622  0291                     	;# 
  1623  0291                     	;# 
  1624  0292                     	;# 
  1625  0293                     	;# 
  1626  0294                     	;# 
  1627  0295                     	;# 
  1628  0295                     	;# 
  1629  0296                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  029B                     	;# 
  1635  029C                     	;# 
  1636  029C                     	;# 
  1637  029D                     	;# 
  1638  029E                     	;# 
  1639  029E                     	;# 
  1640  0311                     	;# 
  1641  0311                     	;# 
  1642  0312                     	;# 
  1643  0313                     	;# 
  1644  0318                     	;# 
  1645  0318                     	;# 
  1646  0319                     	;# 
  1647  031A                     	;# 
  1648  0394                     	;# 
  1649  0395                     	;# 
  1650  0396                     	;# 
  1651  039A                     	;# 
  1652  039C                     	;# 
  1653  039D                     	;# 
  1654  039E                     	;# 
  1655  039F                     	;# 
  1656  0415                     	;# 
  1657  0416                     	;# 
  1658  0417                     	;# 
  1659  041C                     	;# 
  1660  041D                     	;# 
  1661  041E                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  000D                     _PORTB	set	13
  1674  000C                     _PORTA	set	12
  1675  001C                     _T2CONbits	set	28
  1676  001B                     _PR2	set	27
  1677  000B                     _INTCONbits	set	11
  1678  009B                     _ADRESL	set	155
  1679  009C                     _ADRESH	set	156
  1680  009D                     _ADCON0bits	set	157
  1681  008D                     _TRISB	set	141
  1682  008C                     _TRISA	set	140
  1683  009E                     _ADCON1	set	158
  1684  009D                     _ADCON0	set	157
  1685  0095                     _OPTION_REG	set	149
  1686  0095                     _OPTION_REGbits	set	149
  1687  0091                     _PIE1bits	set	145
  1688  0099                     _OSCCONbits	set	153
  1689  010D                     _LATB	set	269
  1690  010C                     _LATA	set	268
  1691  011D                     _APFCON0bits	set	285
  1692  018D                     _ANSELB	set	397
  1693  018C                     _ANSELA	set	396
  1694  0293                     _CCP1CONbits	set	659
  1695  0296                     _PSTR1CONbits	set	662
  1696  0291                     _CCPR1L	set	657
  1697  0293                     _CCP1CON	set	659
  1698                           
  1699                           	psect	stringtext1
  1700  07EB                     __pstringtext1:
  1701  07EB                     STR_1:
  1702  07EB  3428               	retlw	40	;'('
  1703  07EC  3428               	retlw	40	;'('
  1704  07ED  3449               	retlw	73	;'I'
  1705  07EE  344E               	retlw	78	;'N'
  1706  07EF  3454               	retlw	84	;'T'
  1707  07F0  3443               	retlw	67	;'C'
  1708  07F1  344F               	retlw	79	;'O'
  1709  07F2  344E               	retlw	78	;'N'
  1710  07F3  3429               	retlw	41	;')'
  1711  07F4  3426               	retlw	38	;'&'
  1712  07F5  3430               	retlw	48	;'0'
  1713  07F6  3437               	retlw	55	;'7'
  1714  07F7  3446               	retlw	70	;'F'
  1715  07F8  3468               	retlw	104	;'h'
  1716  07F9  3429               	retlw	41	;')'
  1717  07FA  342C               	retlw	44	;','
  1718  07FB  3432               	retlw	50	;'2'
  1719  07FC  3400               	retlw	0
  1720                           
  1721                           	psect	stringtext2
  1722  0000                     __pstringtext2:
  1723  07EB                     
  1724                           	psect	cinit
  1725  0088                     start_initialization:	
  1726                           ; #config settings
  1727                           
  1728  0088                     __initialization:
  1729                           
  1730                           ; Clear objects allocated to BANK0
  1731  0088  305F               	movlw	low __pbssBANK0
  1732  0089  0084               	movwf	4
  1733  008A  3000               	movlw	high __pbssBANK0
  1734  008B  0085               	movwf	5
  1735  008C  3010               	movlw	16
  1736  008D  318B  23C2  3180   	fcall	clear_ram0
  1737                           
  1738                           ; Clear objects allocated to BANK1
  1739  0090  30A0               	movlw	low __pbssBANK1
  1740  0091  0084               	movwf	4
  1741  0092  3000               	movlw	high __pbssBANK1
  1742  0093  0085               	movwf	5
  1743  0094  3032               	movlw	50
  1744  0095  318B  23C2  3180   	fcall	clear_ram0
  1745                           
  1746                           ; Clear objects allocated to BANK2
  1747  0098  3020               	movlw	low __pbssBANK2
  1748  0099  0084               	movwf	4
  1749  009A  3001               	movlw	high __pbssBANK2
  1750  009B  0085               	movwf	5
  1751  009C  3040               	movlw	64
  1752  009D  318B  23C2  3180   	fcall	clear_ram0
  1753                           
  1754                           ; Clear objects allocated to BANK3
  1755  00A0  30A0               	movlw	low __pbssBANK3
  1756  00A1  0084               	movwf	4
  1757  00A2  3001               	movlw	high __pbssBANK3
  1758  00A3  0085               	movwf	5
  1759  00A4  3040               	movlw	64
  1760  00A5  318B  23C2  3180   	fcall	clear_ram0
  1761                           
  1762                           ; Clear objects allocated to BANK4
  1763  00A8  3020               	movlw	low __pbssBANK4
  1764  00A9  0084               	movwf	4
  1765  00AA  3002               	movlw	high __pbssBANK4
  1766  00AB  0085               	movwf	5
  1767  00AC  3020               	movlw	32
  1768  00AD  318B  23C2  3180   	fcall	clear_ram0
  1769  00B0                     end_of_initialization:	
  1770                           ;End of C runtime variable initialization code
  1771                           
  1772  00B0                     __end_of__initialization:
  1773  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1774  00B1  0020               	movlb	0
  1775  00B2  318D  2D4B         	ljmp	_main	;jump to C main() function
  1776                           
  1777                           	psect	bssBANK0
  1778  005F                     __pbssBANK0:
  1779  005F                     _filteredVout:
  1780  005F                     	ds	2
  1781  0061                     _latestIL:
  1782  0061                     	ds	2
  1783  0063                     _setDuty:
  1784  0063                     	ds	2
  1785  0065                     _slotTest:
  1786  0065                     	ds	1
  1787  0066                     _timerSlotQuarter:
  1788  0066                     	ds	1
  1789  0067                     _timerSlotHalf:
  1790  0067                     	ds	1
  1791  0068                     _potSetCount:
  1792  0068                     	ds	1
  1793  0069                     _currentTripCount:
  1794  0069                     	ds	1
  1795  006A                     _tripIL:
  1796  006A                     	ds	1
  1797  006B                     _tripIDS:
  1798  006B                     	ds	1
  1799  006C                     _currentState:
  1800  006C                     	ds	1
  1801  006D                     _prevPeriod:
  1802  006D                     	ds	1
  1803  006E                     _setPeriod:
  1804  006E                     	ds	1
  1805                           
  1806                           	psect	bssBANK1
  1807  00A0                     __pbssBANK1:
  1808  00A0                     _integratorScaledLimit:
  1809  00A0                     	ds	8
  1810  00A8                     _clockFrequency:
  1811  00A8                     	ds	4
  1812  00AC                     _filteredDutyPot:
  1813  00AC                     	ds	2
  1814  00AE                     _filteredFreqPot:
  1815  00AE                     	ds	2
  1816  00B0                     _filteredIL:
  1817  00B0                     	ds	2
  1818  00B2                     _filteredIDS:
  1819  00B2                     	ds	2
  1820  00B4                     _prevDuty:
  1821  00B4                     	ds	2
  1822  00B6                     _voltageModeVariables:
  1823  00B6                     	ds	28
  1824                           
  1825                           	psect	bssBANK2
  1826  0120                     __pbssBANK2:
  1827  0120                     _currentILFIFO:
  1828  0120                     	ds	32
  1829  0140                     _currentIDSFIFO:
  1830  0140                     	ds	32
  1831                           
  1832                           	psect	bssBANK3
  1833  01A0                     __pbssBANK3:
  1834  01A0                     _freqPotFIFO:
  1835  01A0                     	ds	32
  1836  01C0                     _voutFIFO:
  1837  01C0                     	ds	32
  1838                           
  1839                           	psect	bssBANK4
  1840  0220                     __pbssBANK4:
  1841  0220                     _dutyPotFIFO:
  1842  0220                     	ds	32
  1843                           
  1844                           	psect	clrtext
  1845  0BC2                     clear_ram0:	
  1846                           ;	Called with FSR0 containing the base address, and
  1847                           ;	WREG with the size to clear
  1848                           
  1849  0BC2  0064               	clrwdt	;clear the watchdog before getting into this loop
  1850  0BC3                     clrloop0:
  1851  0BC3  0180               	clrf	0	;clear RAM location pointed to by FSR
  1852  0BC4  3101               	addfsr 0,1
  1853  0BC5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1854  0BC6  2BC3               	goto	clrloop0	;have we reached the end yet?
  1855  0BC7  3400               	retlw	0	;all done for this memory range, return
  1856                           
  1857                           	psect	cstackBANK1
  1858  00D2                     __pcstackBANK1:
  1859  00D2                     ?_writeGPIO:
  1860  00D2                     ??_setupInternalOscillator:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  00D2                     ??_setupTimer0Interrupt:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  00D2                     ??_initialiseADCModule:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  00D2                     ?_initialiseGPIO:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  00D2                     ??_readGPIO:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  00D2                     ??_transToVoltageModeControl:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  00D2                     ??_transToCurrentModeControl:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  00D2                     ??_transToPotControl:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  00D2                     ??_initialiseADCPin:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  00D2                     initialiseGPIO@direction:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  00D2                     writeGPIO@writeValue:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893                           
  1894                           ; 1 bytes @ 0x0
  1895  00D2                     	ds	1
  1896  00D3                     ??_writeGPIO:
  1897  00D3                     ??_initialiseGPIO:	
  1898                           ; 1 bytes @ 0x1
  1899                           
  1900                           
  1901                           ; 1 bytes @ 0x1
  1902  00D3                     	ds	1
  1903  00D4                     setupInternalOscillator@selectedFreq:
  1904  00D4                     initialiseADCPin@gpioValid:	
  1905                           ; 1 bytes @ 0x2
  1906                           
  1907  00D4                     readGPIO@readA:	
  1908                           ; 1 bytes @ 0x2
  1909                           
  1910                           
  1911                           ; 1 bytes @ 0x2
  1912  00D4                     	ds	1
  1913  00D5                     initialiseADCPin@portType:
  1914  00D5                     initialiseGPIO@portType:	
  1915                           ; 1 bytes @ 0x3
  1916                           
  1917  00D5                     writeGPIO@portType:	
  1918                           ; 1 bytes @ 0x3
  1919                           
  1920  00D5                     readGPIO@returnValueA:	
  1921                           ; 1 bytes @ 0x3
  1922                           
  1923                           
  1924                           ; 1 bytes @ 0x3
  1925  00D5                     	ds	1
  1926  00D6                     initialiseADCPin@portNumber:
  1927  00D6                     initialiseGPIO@gpioNumber:	
  1928                           ; 1 bytes @ 0x4
  1929                           
  1930  00D6                     writeGPIO@gpioNumber:	
  1931                           ; 1 bytes @ 0x4
  1932                           
  1933  00D6                     readGPIO@readB:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936                           
  1937                           ; 1 bytes @ 0x4
  1938  00D6                     	ds	1
  1939  00D7                     initialiseADCPin@gpioNumber:
  1940  00D7                     initialiseGPIO@portNumber:	
  1941                           ; 1 bytes @ 0x5
  1942                           
  1943  00D7                     writeGPIO@portNumber:	
  1944                           ; 1 bytes @ 0x5
  1945                           
  1946  00D7                     readGPIO@returnValueB:	
  1947                           ; 1 bytes @ 0x5
  1948                           
  1949                           
  1950                           ; 1 bytes @ 0x5
  1951  00D7                     	ds	1
  1952  00D8                     ??_setupPWM:
  1953  00D8                     ??_initialiseCurrentSensors:	
  1954                           ; 1 bytes @ 0x6
  1955                           
  1956  00D8                     ??_initialisePotentiometers:	
  1957                           ; 1 bytes @ 0x6
  1958                           
  1959  00D8                     ??_initialiseController:	
  1960                           ; 1 bytes @ 0x6
  1961                           
  1962  00D8                     ??_currentTripReset:	
  1963                           ; 1 bytes @ 0x6
  1964                           
  1965  00D8                     readGPIO@portNumber:	
  1966                           ; 1 bytes @ 0x6
  1967                           
  1968                           
  1969                           ; 1 bytes @ 0x6
  1970  00D8                     	ds	1
  1971  00D9                     readGPIO@portType:
  1972                           
  1973                           ; 1 bytes @ 0x7
  1974  00D9                     	ds	1
  1975  00DA                     readGPIO@gpioNumber:
  1976                           
  1977                           ; 1 bytes @ 0x8
  1978  00DA                     	ds	1
  1979  00DB                     ?_main:
  1980  00DB                     main@argc:	
  1981                           ; 2 bytes @ 0x9
  1982                           
  1983                           
  1984                           ; 2 bytes @ 0x9
  1985  00DB                     	ds	2
  1986  00DD                     main@argv:
  1987                           
  1988                           ; 2 bytes @ 0xB
  1989  00DD                     	ds	2
  1990  00DF                     ??_main:
  1991                           
  1992                           	psect	cstackCOMMON
  1993  0070                     __pcstackCOMMON:	
  1994                           ; 1 bytes @ 0xD
  1995                           
  1996  0070                     ?_setPWMDutyandPeriod:
  1997  0070                     ?_controlRoutine:	
  1998                           ; 1 bytes @ 0x0
  1999                           
  2000  0070                     ?_runPotScaling:	
  2001                           ; 1 bytes @ 0x0
  2002                           
  2003  0070                     ?_setupInternalOscillator:	
  2004                           ; 1 bytes @ 0x0
  2005                           
  2006  0070                     ?_setupPWM:	
  2007                           ; 1 bytes @ 0x0
  2008                           
  2009  0070                     ?_setupTimer0Interrupt:	
  2010                           ; 1 bytes @ 0x0
  2011                           
  2012  0070                     ?_initialiseADCModule:	
  2013                           ; 1 bytes @ 0x0
  2014                           
  2015  0070                     ?_initialiseCurrentSensors:	
  2016                           ; 1 bytes @ 0x0
  2017                           
  2018  0070                     ?_initialisePotentiometers:	
  2019                           ; 1 bytes @ 0x0
  2020                           
  2021  0070                     ?_initialiseController:	
  2022                           ; 1 bytes @ 0x0
  2023                           
  2024  0070                     ?_readGPIO:	
  2025                           ; 1 bytes @ 0x0
  2026                           
  2027  0070                     ?_transToVoltageModeControl:	
  2028                           ; 1 bytes @ 0x0
  2029                           
  2030  0070                     ?_transToCurrentModeControl:	
  2031                           ; 1 bytes @ 0x0
  2032                           
  2033  0070                     ?_transToPotControl:	
  2034                           ; 1 bytes @ 0x0
  2035                           
  2036  0070                     ?_runVoltageModeControl:	
  2037                           ; 1 bytes @ 0x0
  2038                           
  2039  0070                     ?_currentTripReset:	
  2040                           ; 1 bytes @ 0x0
  2041                           
  2042  0070                     ?_transToOverCurrentFault:	
  2043                           ; 1 bytes @ 0x0
  2044                           
  2045  0070                     ??_transToOverCurrentFault:	
  2046                           ; 1 bytes @ 0x0
  2047                           
  2048  0070                     ?_Tick490Hz:	
  2049                           ; 1 bytes @ 0x0
  2050                           
  2051  0070                     ?_initialiseADCPin:	
  2052                           ; 1 bytes @ 0x0
  2053                           
  2054  0070                     ?_currentTripRead:	
  2055                           ; 1 bytes @ 0x0
  2056                           
  2057  0070                     ??___omul:	
  2058                           ; 1 bytes @ 0x0
  2059                           
  2060  0070                     ?i1_writeGPIO:	
  2061                           ; 1 bytes @ 0x0
  2062                           
  2063  0070                     ?i1_readGPIO:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066  0070                     ??i1_readGPIO:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069  0070                     ?i1_currentTripReset:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072  0070                     ?_currentTripMonitor:	
  2073                           ; 1 bytes @ 0x0
  2074                           
  2075  0070                     ?_readFilteredIL:	
  2076                           ; 2 bytes @ 0x0
  2077                           
  2078  0070                     ?_abs:	
  2079                           ; 2 bytes @ 0x0
  2080                           
  2081  0070                     ?_readADCRaw:	
  2082                           ; 2 bytes @ 0x0
  2083                           
  2084  0070                     ?___wmul:	
  2085                           ; 2 bytes @ 0x0
  2086                           
  2087  0070                     ?___lmul:	
  2088                           ; 2 bytes @ 0x0
  2089                           
  2090  0070                     i1writeGPIO@writeValue:	
  2091                           ; 4 bytes @ 0x0
  2092                           
  2093  0070                     setPWMDutyandPeriod@dutyCycle:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ___wmul@multiplier:	
  2097                           ; 2 bytes @ 0x0
  2098                           
  2099  0070                     abs@a:	
  2100                           ; 2 bytes @ 0x0
  2101                           
  2102  0070                     ___lmul@multiplier:	
  2103                           ; 2 bytes @ 0x0
  2104                           
  2105                           
  2106                           ; 4 bytes @ 0x0
  2107  0070                     	ds	1
  2108  0071                     ??i1_writeGPIO:
  2109  0071                     ___omul@product:	
  2110                           ; 1 bytes @ 0x1
  2111                           
  2112                           
  2113                           ; 8 bytes @ 0x1
  2114  0071                     	ds	1
  2115  0072                     ??_readFilteredIL:
  2116  0072                     ??_abs:	
  2117                           ; 1 bytes @ 0x2
  2118                           
  2119  0072                     ??_readADCRaw:	
  2120                           ; 1 bytes @ 0x2
  2121                           
  2122  0072                     setPWMDutyandPeriod@period:	
  2123                           ; 1 bytes @ 0x2
  2124                           
  2125  0072                     i1readGPIO@readA:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128  0072                     ___wmul@multiplicand:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131                           
  2132                           ; 2 bytes @ 0x2
  2133  0072                     	ds	1
  2134  0073                     ??_setPWMDutyandPeriod:
  2135  0073                     i1writeGPIO@portType:	
  2136                           ; 1 bytes @ 0x3
  2137                           
  2138  0073                     i1readGPIO@returnValueA:	
  2139                           ; 1 bytes @ 0x3
  2140                           
  2141                           
  2142                           ; 1 bytes @ 0x3
  2143  0073                     	ds	1
  2144  0074                     ??___wmul:
  2145  0074                     i1writeGPIO@gpioNumber:	
  2146                           ; 1 bytes @ 0x4
  2147                           
  2148  0074                     i1readGPIO@readB:	
  2149                           ; 1 bytes @ 0x4
  2150                           
  2151  0074                     readADCRaw@returnValue:	
  2152                           ; 1 bytes @ 0x4
  2153                           
  2154  0074                     ___wmul@product:	
  2155                           ; 2 bytes @ 0x4
  2156                           
  2157  0074                     ___lmul@multiplicand:	
  2158                           ; 2 bytes @ 0x4
  2159                           
  2160                           
  2161                           ; 4 bytes @ 0x4
  2162  0074                     	ds	1
  2163  0075                     i1writeGPIO@portNumber:
  2164  0075                     i1readGPIO@returnValueB:	
  2165                           ; 1 bytes @ 0x5
  2166                           
  2167                           
  2168                           ; 1 bytes @ 0x5
  2169  0075                     	ds	1
  2170  0076                     ??i1_currentTripReset:
  2171  0076                     ?___lldiv:	
  2172                           ; 1 bytes @ 0x6
  2173                           
  2174  0076                     readADCRaw@channel:	
  2175                           ; 4 bytes @ 0x6
  2176                           
  2177  0076                     i1readGPIO@portNumber:	
  2178                           ; 1 bytes @ 0x6
  2179                           
  2180  0076                     readFilteredIL@sumOfSamples:	
  2181                           ; 1 bytes @ 0x6
  2182                           
  2183  0076                     ___lldiv@divisor:	
  2184                           ; 4 bytes @ 0x6
  2185                           
  2186                           
  2187                           ; 4 bytes @ 0x6
  2188  0076                     	ds	1
  2189  0077                     readADCRaw@gpioValid:
  2190  0077                     i1readGPIO@portType:	
  2191                           ; 1 bytes @ 0x7
  2192                           
  2193                           
  2194                           ; 1 bytes @ 0x7
  2195  0077                     	ds	1
  2196  0078                     ??___lmul:
  2197  0078                     readADCRaw@i:	
  2198                           ; 1 bytes @ 0x8
  2199                           
  2200  0078                     i1readGPIO@gpioNumber:	
  2201                           ; 1 bytes @ 0x8
  2202                           
  2203  0078                     ___lmul@product:	
  2204                           ; 1 bytes @ 0x8
  2205                           
  2206                           
  2207                           ; 4 bytes @ 0x8
  2208  0078                     	ds	1
  2209  0079                     ??_currentTripRead:
  2210  0079                     readADCRaw@gpioNumber:	
  2211                           ; 1 bytes @ 0x9
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0x9
  2215  0079                     	ds	1
  2216  007A                     ?_readFilteredVout:
  2217  007A                     ?_readFilteredDutyPot:	
  2218                           ; 2 bytes @ 0xA
  2219                           
  2220  007A                     ?_readFilteredFreqPot:	
  2221                           ; 2 bytes @ 0xA
  2222                           
  2223  007A                     _currentTripRead$913:	
  2224                           ; 2 bytes @ 0xA
  2225                           
  2226  007A                     readFilteredIL@i_921:	
  2227                           ; 1 bytes @ 0xA
  2228                           
  2229  007A                     ___lldiv@dividend:	
  2230                           ; 1 bytes @ 0xA
  2231                           
  2232                           
  2233                           ; 4 bytes @ 0xA
  2234  007A                     	ds	1
  2235  007B                     ??_currentTripMonitor:
  2236  007B                     readFilteredIL@i:	
  2237                           ; 1 bytes @ 0xB
  2238                           
  2239                           
  2240                           ; 1 bytes @ 0xB
  2241  007B                     	ds	1
  2242  007C                     ?_convertRawToMilliVolts:
  2243  007C                     convertRawToMilliVolts@rawValue:	
  2244                           ; 2 bytes @ 0xC
  2245                           
  2246                           
  2247                           ; 2 bytes @ 0xC
  2248  007C                     	ds	2
  2249                           
  2250                           	psect	cstackBANK0
  2251  0020                     __pcstackBANK0:
  2252  0020                     ??_readFilteredVout:
  2253  0020                     ??_readFilteredDutyPot:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0020                     ??_readFilteredFreqPot:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0020                     ??_convertRawToMilliVolts:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0020                     ??___lldiv:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0020                     ?___omul:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0020                     ___omul@multiplier:	
  2269                           ; 8 bytes @ 0x0
  2270                           
  2271                           
  2272                           ; 8 bytes @ 0x0
  2273  0020                     	ds	1
  2274  0021                     ___lldiv@quotient:
  2275                           
  2276                           ; 4 bytes @ 0x1
  2277  0021                     	ds	3
  2278  0024                     readFilteredDutyPot@sumOfSamples:
  2279  0024                     readFilteredFreqPot@sumOfSamples:	
  2280                           ; 4 bytes @ 0x4
  2281                           
  2282  0024                     readFilteredVout@sumOfSamples:	
  2283                           ; 4 bytes @ 0x4
  2284                           
  2285                           
  2286                           ; 4 bytes @ 0x4
  2287  0024                     	ds	1
  2288  0025                     ___lldiv@counter:
  2289  0025                     convertRawToMilliVolts@vsenseMult:	
  2290                           ; 1 bytes @ 0x5
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x5
  2294  0025                     	ds	1
  2295  0026                     ??_runPotScaling:
  2296                           
  2297                           ; 1 bytes @ 0x6
  2298  0026                     	ds	2
  2299  0028                     readFilteredDutyPot@i_750:
  2300  0028                     readFilteredFreqPot@i_754:	
  2301                           ; 1 bytes @ 0x8
  2302                           
  2303  0028                     readFilteredVout@i_831:	
  2304                           ; 1 bytes @ 0x8
  2305                           
  2306  0028                     ___omul@multiplicand:	
  2307                           ; 1 bytes @ 0x8
  2308                           
  2309                           
  2310                           ; 8 bytes @ 0x8
  2311  0028                     	ds	1
  2312  0029                     readFilteredDutyPot@i:
  2313  0029                     readFilteredFreqPot@i:	
  2314                           ; 1 bytes @ 0x9
  2315                           
  2316  0029                     readFilteredVout@i:	
  2317                           ; 1 bytes @ 0x9
  2318                           
  2319  0029                     convertRawToMilliVolts@offsetted:	
  2320                           ; 1 bytes @ 0x9
  2321                           
  2322                           
  2323                           ; 2 bytes @ 0x9
  2324  0029                     	ds	2
  2325  002B                     convertRawToMilliVolts@returnValuedV:
  2326                           
  2327                           ; 2 bytes @ 0xB
  2328  002B                     	ds	3
  2329  002E                     runPotScaling@maxDuty:
  2330                           
  2331                           ; 2 bytes @ 0xE
  2332  002E                     	ds	2
  2333  0030                     ??_runVoltageModeControl:
  2334  0030                     runPotScaling@minDuty:	
  2335                           ; 1 bytes @ 0x10
  2336                           
  2337                           
  2338                           ; 2 bytes @ 0x10
  2339  0030                     	ds	16
  2340  0040                     runVoltageModeControl@integralMult:
  2341                           
  2342                           ; 8 bytes @ 0x20
  2343  0040                     	ds	8
  2344  0048                     runVoltageModeControl@propMult:
  2345                           
  2346                           ; 8 bytes @ 0x28
  2347  0048                     	ds	8
  2348  0050                     runVoltageModeControl@newVoltage:
  2349                           
  2350                           ; 2 bytes @ 0x30
  2351  0050                     	ds	2
  2352  0052                     ??_controlRoutine:
  2353                           
  2354                           ; 1 bytes @ 0x32
  2355  0052                     	ds	6
  2356  0058                     controlRoutine@maxDuty:
  2357                           
  2358                           ; 2 bytes @ 0x38
  2359  0058                     	ds	2
  2360  005A                     controlRoutine@minDuty:
  2361                           
  2362                           ; 2 bytes @ 0x3A
  2363  005A                     	ds	2
  2364  005C                     controlRoutine@setDuty_unreg:
  2365                           
  2366                           ; 2 bytes @ 0x3C
  2367  005C                     	ds	2
  2368  005E                     ??_Tick490Hz:
  2369                           
  2370                           ; 1 bytes @ 0x3E
  2371  005E                     	ds	1
  2372                           
  2373                           	psect	maintext
  2374  0D4B                     __pmaintext:	
  2375 ;;
  2376 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2377 ;;
  2378 ;; *************** function _main *****************
  2379 ;; Defined at:
  2380 ;;		line 107 in file "main.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  argc            2    9[BANK1 ] int 
  2383 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  2    9[BANK1 ] int 
  2388 ;; Registers used:
  2389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : B1F/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2395 ;;      Params:         0       0       4       0       0       0
  2396 ;;      Locals:         0       0       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0       0
  2398 ;;      Totals:         0       0       4       0       0       0
  2399 ;;Total ram usage:        4 bytes
  2400 ;; Hardware stack levels required when called: 8
  2401 ;; This function calls:
  2402 ;;		_initialiseADCModule
  2403 ;;		_initialiseController
  2404 ;;		_initialiseCurrentSensors
  2405 ;;		_initialiseGPIO
  2406 ;;		_initialisePotentiometers
  2407 ;;		_readGPIO
  2408 ;;		_setupInternalOscillator
  2409 ;;		_setupPWM
  2410 ;;		_setupTimer0Interrupt
  2411 ;;		_transToCurrentModeControl
  2412 ;;		_transToPotControl
  2413 ;;		_transToVoltageModeControl
  2414 ;; This function is called by:
  2415 ;;		Startup code after reset
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419  0D4B                     _main:	
  2420                           ;psect for function _main
  2421                           
  2422  0D4B                     l2730:	
  2423                           ;incstack = 0
  2424                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2425                           
  2426                           
  2427                           ;main.c: 109:     setupInternalOscillator(freq32M);
  2428  0D4B  300A               	movlw	10
  2429  0D4C  3184  24D5  318D   	fcall	_setupInternalOscillator
  2430  0D4F                     l2732:
  2431                           
  2432                           ;main.c: 111:     setupPWM();
  2433  0D4F  318C  2424  318D   	fcall	_setupPWM
  2434  0D52                     l2734:
  2435                           
  2436                           ;main.c: 112:     setupTimer0Interrupt();
  2437  0D52  318B  23D6  318D   	fcall	_setupTimer0Interrupt
  2438  0D55                     l2736:
  2439                           
  2440                           ;main.c: 113:     initialiseADCModule();
  2441  0D55  318B  23BC  318D   	fcall	_initialiseADCModule
  2442  0D58                     l2738:
  2443                           
  2444                           ;main.c: 114:     initialiseCurrentSensors();
  2445  0D58  318C  247C  318D   	fcall	_initialiseCurrentSensors
  2446  0D5B                     l2740:
  2447                           
  2448                           ;main.c: 115:     initialisePotentiometers();
  2449  0D5B  318B  23E7  318D   	fcall	_initialisePotentiometers
  2450  0D5E                     l2742:
  2451                           
  2452                           ;main.c: 116:     initialiseController();
  2453  0D5E  318C  2440  318D   	fcall	_initialiseController
  2454  0D61                     l2744:
  2455                           
  2456                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2457  0D61  0021               	movlb	1	; select bank1
  2458  0D62  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2459  0D63  300C               	movlw	12
  2460  0D64  3185  259A  318D   	fcall	_initialiseGPIO
  2461  0D67                     l2746:
  2462                           
  2463                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2464  0D67  0021               	movlb	1	; select bank1
  2465  0D68  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2466  0D69  300D               	movlw	13
  2467  0D6A  3185  259A  318D   	fcall	_initialiseGPIO
  2468  0D6D                     l2748:
  2469  0D6D                     l2750:	
  2470                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2471                           
  2472                           
  2473                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2474  0D6D  3008               	movlw	8
  2475  0D6E  318E  2602  318D   	fcall	_readGPIO
  2476  0D71  3A01               	xorlw	1
  2477  0D72  1903               	skipnz
  2478  0D73  2D75               	goto	u2591
  2479  0D74  2D76               	goto	u2590
  2480  0D75                     u2591:
  2481  0D75  2D7A               	goto	l2756
  2482  0D76                     u2590:
  2483  0D76                     l2752:
  2484  0D76  318B  23CF  318D   	fcall	_transToVoltageModeControl
  2485  0D79  2D7D               	goto	l118
  2486  0D7A                     l2756:
  2487  0D7A  318B  23B8  318D   	fcall	_transToPotControl
  2488  0D7D                     l118:	
  2489                           ;main.c: 129:     while(1){
  2490                           
  2491  0D7D  2D7D               	goto	l118
  2492  0D7E  3180  2886         	ljmp	start
  2493  0D80                     __end_of_main:
  2494                           
  2495                           	psect	text1
  2496  0BCF                     __ptext1:	
  2497 ;; *************** function _transToVoltageModeControl *****************
  2498 ;; Defined at:
  2499 ;;		line 27 in file "StateMachine.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2513 ;;      Params:         0       0       0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0
  2515 ;;      Temps:          0       0       1       0       0       0
  2516 ;;      Totals:         0       0       1       0       0       0
  2517 ;;Total ram usage:        1 bytes
  2518 ;; Hardware stack levels used: 1
  2519 ;; Hardware stack levels required when called: 5
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527  0BCF                     _transToVoltageModeControl:	
  2528                           ;psect for function _transToVoltageModeControl
  2529                           
  2530  0BCF                     l2690:	
  2531                           ;incstack = 0
  2532                           ; Regs used in _transToVoltageModeControl: [wreg]
  2533                           
  2534                           
  2535                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2536  0BCF  3002               	movlw	2
  2537  0BD0  0021               	movlb	1	; select bank1
  2538  0BD1  00D2               	movwf	??_transToVoltageModeControl^(0+128)
  2539  0BD2  0852               	movf	??_transToVoltageModeControl^(0+128),w
  2540  0BD3  0020               	movlb	0	; select bank0
  2541  0BD4  00EC               	movwf	_currentState
  2542  0BD5                     l561:
  2543  0BD5  0008               	return
  2544  0BD6                     __end_of_transToVoltageModeControl:
  2545                           
  2546                           	psect	text2
  2547  0BB8                     __ptext2:	
  2548 ;; *************** function _transToPotControl *****************
  2549 ;; Defined at:
  2550 ;;		line 18 in file "StateMachine.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		None
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2564 ;;      Params:         0       0       0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0
  2567 ;;      Totals:         0       0       0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; Hardware stack levels required when called: 5
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_main
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578  0BB8                     _transToPotControl:	
  2579                           ;psect for function _transToPotControl
  2580                           
  2581  0BB8                     l2694:	
  2582                           ;incstack = 0
  2583                           ; Regs used in _transToPotControl: []
  2584                           
  2585                           
  2586                           ;StateMachine.c: 19:     currentState = potControl;
  2587  0BB8  0020               	movlb	0	; select bank0
  2588  0BB9  01EC               	clrf	_currentState
  2589  0BBA  0AEC               	incf	_currentState,f
  2590  0BBB                     l558:
  2591  0BBB  0008               	return
  2592  0BBC                     __end_of_transToPotControl:
  2593                           
  2594                           	psect	text3
  2595  0BC8                     __ptext3:	
  2596 ;; *************** function _transToCurrentModeControl *****************
  2597 ;; Defined at:
  2598 ;;		line 36 in file "StateMachine.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2612 ;;      Params:         0       0       0       0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0
  2614 ;;      Temps:          0       0       1       0       0       0
  2615 ;;      Totals:         0       0       1       0       0       0
  2616 ;;Total ram usage:        1 bytes
  2617 ;; Hardware stack levels used: 1
  2618 ;; Hardware stack levels required when called: 5
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626  0BC8                     _transToCurrentModeControl:	
  2627                           ;psect for function _transToCurrentModeControl
  2628                           
  2629  0BC8                     l2692:	
  2630                           ;incstack = 0
  2631                           ; Regs used in _transToCurrentModeControl: [wreg]
  2632                           
  2633                           
  2634                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2635  0BC8  3003               	movlw	3
  2636  0BC9  0021               	movlb	1	; select bank1
  2637  0BCA  00D2               	movwf	??_transToCurrentModeControl^(0+128)
  2638  0BCB  0852               	movf	??_transToCurrentModeControl^(0+128),w
  2639  0BCC  0020               	movlb	0	; select bank0
  2640  0BCD  00EC               	movwf	_currentState
  2641  0BCE                     l564:
  2642  0BCE  0008               	return
  2643  0BCF                     __end_of_transToCurrentModeControl:
  2644                           
  2645                           	psect	text4
  2646  0BD6                     __ptext4:	
  2647 ;; *************** function _setupTimer0Interrupt *****************
  2648 ;; Defined at:
  2649 ;;		line 17 in file "Timer0.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2663 ;;      Params:         0       0       0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0
  2666 ;;      Totals:         0       0       0       0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 5
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677  0BD6                     _setupTimer0Interrupt:	
  2678                           ;psect for function _setupTimer0Interrupt
  2679                           
  2680  0BD6                     l2636:	
  2681                           ;incstack = 0
  2682                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2683                           
  2684                           
  2685                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2686  0BD6  178B               	bsf	11,7	;volatile
  2687                           
  2688                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2689  0BD7  168B               	bsf	11,5	;volatile
  2690                           
  2691                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2692  0BD8  0021               	movlb	1	; select bank1
  2693  0BD9  1295               	bcf	21,5	;volatile
  2694                           
  2695                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2696  0BDA  1195               	bcf	21,3	;volatile
  2697  0BDB                     l2638:
  2698                           
  2699                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2700  0BDB  3005               	movlw	5
  2701  0BDC  0095               	movwf	21	;volatile
  2702  0BDD                     l199:
  2703  0BDD  0008               	return
  2704  0BDE                     __end_of_setupTimer0Interrupt:
  2705                           
  2706                           	psect	text5
  2707  0C24                     __ptext5:	
  2708 ;; *************** function _setupPWM *****************
  2709 ;; Defined at:
  2710 ;;		line 16 in file "PWM.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;		None
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0, pclath, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2724 ;;      Params:         0       0       0       0       0       0
  2725 ;;      Locals:         0       0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0
  2727 ;;      Totals:         0       0       0       0       0       0
  2728 ;;Total ram usage:        0 bytes
  2729 ;; Hardware stack levels used: 1
  2730 ;; Hardware stack levels required when called: 6
  2731 ;; This function calls:
  2732 ;;		_initialiseGPIO
  2733 ;; This function is called by:
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738  0C24                     _setupPWM:	
  2739                           ;psect for function _setupPWM
  2740                           
  2741  0C24                     l2612:	
  2742                           ;incstack = 0
  2743                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2744                           
  2745                           
  2746                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2747  0C24  300C               	movlw	12
  2748  0C25  0025               	movlb	5	; select bank5
  2749  0C26  0093               	movwf	19	;volatile
  2750  0C27                     l2614:
  2751                           
  2752                           ;PWM.c: 20:     PR2 = 0;
  2753  0C27  0020               	movlb	0	; select bank0
  2754  0C28  019B               	clrf	27	;volatile
  2755  0C29                     l2616:
  2756                           
  2757                           ;PWM.c: 21:     CCPR1L = 0;
  2758  0C29  0025               	movlb	5	; select bank5
  2759  0C2A  0191               	clrf	17	;volatile
  2760  0C2B                     l2618:
  2761                           
  2762                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2763  0C2B  0022               	movlb	2	; select bank2
  2764  0C2C  151D               	bsf	29,2	;volatile
  2765  0C2D                     l2620:
  2766                           
  2767                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2768  0C2D  0025               	movlb	5	; select bank5
  2769  0C2E  1596               	bsf	22,3	;volatile
  2770  0C2F                     l2622:
  2771                           
  2772                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2773  0C2F  1016               	bcf	22,0	;volatile
  2774  0C30                     l2624:
  2775                           
  2776                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2777  0C30  30FC               	movlw	-4
  2778  0C31  0020               	movlb	0	; select bank0
  2779  0C32  059C               	andwf	28,f	;volatile
  2780  0C33                     l2626:
  2781                           
  2782                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2783  0C33  0021               	movlb	1	; select bank1
  2784  0C34  1091               	bcf	17,1	;volatile
  2785  0C35                     l2628:
  2786                           
  2787                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2788  0C35  0020               	movlb	0	; select bank0
  2789  0C36  151C               	bsf	28,2	;volatile
  2790  0C37                     l2630:
  2791                           
  2792                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2793  0C37  170B               	bsf	11,6	;volatile
  2794  0C38                     l2632:
  2795                           
  2796                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2797  0C38  0021               	movlb	1	; select bank1
  2798  0C39  1511               	bsf	17,2	;volatile
  2799  0C3A                     l2634:
  2800                           
  2801                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2802  0C3A  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2803  0C3B  3006               	movlw	6
  2804  0C3C  3185  259A  318C   	fcall	_initialiseGPIO
  2805  0C3F                     l172:
  2806  0C3F  0008               	return
  2807  0C40                     __end_of_setupPWM:
  2808                           
  2809                           	psect	text6
  2810  04D5                     __ptext6:	
  2811 ;; *************** function _setupInternalOscillator *****************
  2812 ;; Defined at:
  2813 ;;		line 140 in file "main.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  selectedFreq    1    wreg     const enum E2845
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2827 ;;      Params:         0       0       0       0       0       0
  2828 ;;      Locals:         0       0       1       0       0       0
  2829 ;;      Temps:          0       0       2       0       0       0
  2830 ;;      Totals:         0       0       3       0       0       0
  2831 ;;Total ram usage:        3 bytes
  2832 ;; Hardware stack levels used: 1
  2833 ;; Hardware stack levels required when called: 5
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841  04D5                     _setupInternalOscillator:	
  2842                           ;psect for function _setupInternalOscillator
  2843                           
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2847                           ;setupInternalOscillator@selectedFreq stored from wreg
  2848  04D5  0021               	movlb	1	; select bank1
  2849  04D6  00D4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2850  04D7                     l2534:
  2851                           
  2852                           ;main.c: 144:     switch(selectedFreq){
  2853  04D7  2D6E               	goto	l2604
  2854  04D8                     l2536:
  2855  04D8  3087               	movlw	-121
  2856  04D9  0599               	andwf	25,f	;volatile
  2857  04DA                     l2538:
  2858  04DA  1399               	bcf	25,7	;volatile
  2859  04DB                     l2540:
  2860  04DB  3000               	movlw	0
  2861  04DC  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2862  04DD  3000               	movlw	0
  2863  04DE  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2864  04DF  3079               	movlw	121
  2865  04E0  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2866  04E1  3018               	movlw	24
  2867  04E2  00A8               	movwf	_clockFrequency^(0+128)
  2868  04E3  2D99               	goto	l137
  2869  04E4                     l2542:
  2870  04E4  0819               	movf	25,w	;volatile
  2871  04E5  3987               	andlw	-121
  2872  04E6  3820               	iorlw	32
  2873  04E7  0099               	movwf	25	;volatile
  2874  04E8                     l2544:
  2875  04E8  1399               	bcf	25,7	;volatile
  2876  04E9                     l2546:
  2877  04E9  3000               	movlw	0
  2878  04EA  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2879  04EB  3000               	movlw	0
  2880  04EC  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2881  04ED  30F4               	movlw	244
  2882  04EE  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2883  04EF  3024               	movlw	36
  2884  04F0  00A8               	movwf	_clockFrequency^(0+128)
  2885  04F1  2D99               	goto	l137
  2886  04F2                     l2548:
  2887  04F2  0819               	movf	25,w	;volatile
  2888  04F3  3987               	andlw	-121
  2889  04F4  3828               	iorlw	40
  2890  04F5  0099               	movwf	25	;volatile
  2891  04F6                     l2550:
  2892  04F6  1399               	bcf	25,7	;volatile
  2893  04F7                     l2552:
  2894  04F7  3000               	movlw	0
  2895  04F8  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2896  04F9  3001               	movlw	1
  2897  04FA  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2898  04FB  30E8               	movlw	232
  2899  04FC  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2900  04FD  3048               	movlw	72
  2901  04FE  00A8               	movwf	_clockFrequency^(0+128)
  2902  04FF  2D99               	goto	l137
  2903  0500                     l2554:
  2904  0500  0819               	movf	25,w	;volatile
  2905  0501  3987               	andlw	-121
  2906  0502  3830               	iorlw	48
  2907  0503  0099               	movwf	25	;volatile
  2908  0504                     l2556:
  2909  0504  1399               	bcf	25,7	;volatile
  2910  0505                     l2558:
  2911  0505  3000               	movlw	0
  2912  0506  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2913  0507  3003               	movlw	3
  2914  0508  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2915  0509  30D0               	movlw	208
  2916  050A  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2917  050B  3090               	movlw	144
  2918  050C  00A8               	movwf	_clockFrequency^(0+128)
  2919  050D  2D99               	goto	l137
  2920  050E                     l2560:
  2921  050E  0819               	movf	25,w	;volatile
  2922  050F  3987               	andlw	-121
  2923  0510  3838               	iorlw	56
  2924  0511  0099               	movwf	25	;volatile
  2925  0512                     l2562:
  2926  0512  1399               	bcf	25,7	;volatile
  2927  0513                     l2564:
  2928  0513  3000               	movlw	0
  2929  0514  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2930  0515  3007               	movlw	7
  2931  0516  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2932  0517  30A1               	movlw	161
  2933  0518  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2934  0519  3020               	movlw	32
  2935  051A  00A8               	movwf	_clockFrequency^(0+128)
  2936  051B  2D99               	goto	l137
  2937  051C                     l2566:
  2938  051C  0819               	movf	25,w	;volatile
  2939  051D  3987               	andlw	-121
  2940  051E  3858               	iorlw	88
  2941  051F  0099               	movwf	25	;volatile
  2942  0520                     l2568:
  2943  0520  1399               	bcf	25,7	;volatile
  2944  0521                     l2570:
  2945  0521  3000               	movlw	0
  2946  0522  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2947  0523  300F               	movlw	15
  2948  0524  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2949  0525  3042               	movlw	66
  2950  0526  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2951  0527  3040               	movlw	64
  2952  0528  00A8               	movwf	_clockFrequency^(0+128)
  2953  0529  2D99               	goto	l137
  2954  052A                     l2572:
  2955  052A  0819               	movf	25,w	;volatile
  2956  052B  3987               	andlw	-121
  2957  052C  3860               	iorlw	96
  2958  052D  0099               	movwf	25	;volatile
  2959  052E                     l2574:
  2960  052E  1399               	bcf	25,7	;volatile
  2961  052F                     l2576:
  2962  052F  3000               	movlw	0
  2963  0530  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2964  0531  301E               	movlw	30
  2965  0532  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2966  0533  3084               	movlw	132
  2967  0534  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2968  0535  3080               	movlw	128
  2969  0536  00A8               	movwf	_clockFrequency^(0+128)
  2970  0537  2D99               	goto	l137
  2971  0538                     l2578:
  2972  0538  0819               	movf	25,w	;volatile
  2973  0539  3987               	andlw	-121
  2974  053A  3868               	iorlw	104
  2975  053B  0099               	movwf	25	;volatile
  2976  053C                     l2580:
  2977  053C  1399               	bcf	25,7	;volatile
  2978  053D                     l2582:
  2979  053D  3000               	movlw	0
  2980  053E  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2981  053F  303D               	movlw	61
  2982  0540  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2983  0541  3009               	movlw	9
  2984  0542  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2985  0543  3000               	movlw	0
  2986  0544  00A8               	movwf	_clockFrequency^(0+128)
  2987  0545  2D99               	goto	l137
  2988  0546                     l2584:
  2989  0546  0819               	movf	25,w	;volatile
  2990  0547  3987               	andlw	-121
  2991  0548  3870               	iorlw	112
  2992  0549  0099               	movwf	25	;volatile
  2993  054A                     l2586:
  2994  054A  1399               	bcf	25,7	;volatile
  2995  054B                     l2588:
  2996  054B  3000               	movlw	0
  2997  054C  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2998  054D  307A               	movlw	122
  2999  054E  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3000  054F  3012               	movlw	18
  3001  0550  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3002  0551  3000               	movlw	0
  3003  0552  00A8               	movwf	_clockFrequency^(0+128)
  3004  0553  2D99               	goto	l137
  3005  0554                     l2590:
  3006  0554  3078               	movlw	120
  3007  0555  0499               	iorwf	25,f	;volatile
  3008  0556                     l2592:
  3009  0556  1399               	bcf	25,7	;volatile
  3010  0557                     l2594:
  3011  0557  3000               	movlw	0
  3012  0558  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3013  0559  30F4               	movlw	244
  3014  055A  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3015  055B  3024               	movlw	36
  3016  055C  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3017  055D  3000               	movlw	0
  3018  055E  00A8               	movwf	_clockFrequency^(0+128)
  3019  055F  2D99               	goto	l137
  3020  0560                     l2596:
  3021  0560  0819               	movf	25,w	;volatile
  3022  0561  3987               	andlw	-121
  3023  0562  3870               	iorlw	112
  3024  0563  0099               	movwf	25	;volatile
  3025  0564                     l2598:
  3026  0564  1799               	bsf	25,7	;volatile
  3027  0565                     l2600:
  3028  0565  3001               	movlw	1
  3029  0566  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3030  0567  30E8               	movlw	232
  3031  0568  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3032  0569  3048               	movlw	72
  3033  056A  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3034  056B  3000               	movlw	0
  3035  056C  00A8               	movwf	_clockFrequency^(0+128)
  3036  056D  2D99               	goto	l137
  3037  056E                     l2604:
  3038  056E  0854               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3039  056F  00D2               	movwf	??_setupInternalOscillator^(0+128)
  3040  0570  01D3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3041                           
  3042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3043                           ; Switch size 1, requested type "simple"
  3044                           ; Number of cases is 1, Range of values is 0 to 0
  3045                           ; switch strategies available:
  3046                           ; Name         Instructions Cycles
  3047                           ; simple_byte            4     3 (average)
  3048                           ; direct_byte            8     6 (fixed)
  3049                           ; jumptable            260     6 (fixed)
  3050                           ;	Chosen strategy is simple_byte
  3051  0571  0853               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3052  0572  3A00               	xorlw	0	; case 0
  3053  0573  1903               	skipnz
  3054  0574  2D76               	goto	l2822
  3055  0575  2D99               	goto	l137
  3056  0576                     l2822:
  3057                           
  3058                           ; Switch size 1, requested type "simple"
  3059                           ; Number of cases is 11, Range of values is 0 to 10
  3060                           ; switch strategies available:
  3061                           ; Name         Instructions Cycles
  3062                           ; direct_byte           28     6 (fixed)
  3063                           ; simple_byte           34    18 (average)
  3064                           ; jumptable            260     6 (fixed)
  3065                           ;	Chosen strategy is simple_byte
  3066  0576  0852               	movf	??_setupInternalOscillator^(0+128),w
  3067  0577  3A00               	xorlw	0	; case 0
  3068  0578  1903               	skipnz
  3069  0579  2CD8               	goto	l2536
  3070  057A  3A01               	xorlw	1	; case 1
  3071  057B  1903               	skipnz
  3072  057C  2CE4               	goto	l2542
  3073  057D  3A03               	xorlw	3	; case 2
  3074  057E  1903               	skipnz
  3075  057F  2CF2               	goto	l2548
  3076  0580  3A01               	xorlw	1	; case 3
  3077  0581  1903               	skipnz
  3078  0582  2D00               	goto	l2554
  3079  0583  3A07               	xorlw	7	; case 4
  3080  0584  1903               	skipnz
  3081  0585  2D0E               	goto	l2560
  3082  0586  3A01               	xorlw	1	; case 5
  3083  0587  1903               	skipnz
  3084  0588  2D1C               	goto	l2566
  3085  0589  3A03               	xorlw	3	; case 6
  3086  058A  1903               	skipnz
  3087  058B  2D2A               	goto	l2572
  3088  058C  3A01               	xorlw	1	; case 7
  3089  058D  1903               	skipnz
  3090  058E  2D38               	goto	l2578
  3091  058F  3A0F               	xorlw	15	; case 8
  3092  0590  1903               	skipnz
  3093  0591  2D46               	goto	l2584
  3094  0592  3A01               	xorlw	1	; case 9
  3095  0593  1903               	skipnz
  3096  0594  2D54               	goto	l2590
  3097  0595  3A03               	xorlw	3	; case 10
  3098  0596  1903               	skipnz
  3099  0597  2D60               	goto	l2596
  3100  0598  2D99               	goto	l137
  3101  0599                     l137:
  3102  0599  0008               	return
  3103  059A                     __end_of_setupInternalOscillator:
  3104                           
  3105                           	psect	text7
  3106  0E02                     __ptext7:	
  3107 ;; *************** function _readGPIO *****************
  3108 ;; Defined at:
  3109 ;;		line 79 in file "GPIO.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  gpioNumber      1    wreg     const enum E2798
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3114 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3115 ;;  readB           1    4[BANK1 ] unsigned char 
  3116 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3117 ;;  readA           1    2[BANK1 ] unsigned char 
  3118 ;;  portType        1    7[BANK1 ] unsigned char 
  3119 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      _Bool 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3129 ;;      Params:         0       0       0       0       0       0
  3130 ;;      Locals:         0       0       7       0       0       0
  3131 ;;      Temps:          0       0       2       0       0       0
  3132 ;;      Totals:         0       0       9       0       0       0
  3133 ;;Total ram usage:        9 bytes
  3134 ;; Hardware stack levels used: 1
  3135 ;; Hardware stack levels required when called: 5
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143  0E02                     _readGPIO:	
  3144                           ;psect for function _readGPIO
  3145                           
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3149                           ;readGPIO@gpioNumber stored from wreg
  3150  0E02  0021               	movlb	1	; select bank1
  3151  0E03  00DA               	movwf	readGPIO@gpioNumber^(0+128)
  3152  0E04                     l2650:
  3153                           
  3154                           ;GPIO.c: 81:     uint8_t portType = 0;
  3155  0E04  01D9               	clrf	readGPIO@portType^(0+128)
  3156  0E05                     l2652:
  3157                           
  3158                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3159  0E05  3008               	movlw	8
  3160  0E06  025A               	subwf	readGPIO@gpioNumber^(0+128),w
  3161  0E07  1C03               	skipc
  3162  0E08  2E0A               	goto	u2461
  3163  0E09  2E0B               	goto	u2460
  3164  0E0A                     u2461:
  3165  0E0A  2E13               	goto	l2658
  3166  0E0B                     u2460:
  3167  0E0B                     l2654:
  3168                           
  3169                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3170  0E0B  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3171  0E0C  3EF8               	addlw	248
  3172  0E0D  00D2               	movwf	??_readGPIO^(0+128)
  3173  0E0E  0852               	movf	??_readGPIO^(0+128),w
  3174  0E0F  00D8               	movwf	readGPIO@portNumber^(0+128)
  3175  0E10                     l2656:
  3176                           
  3177                           ;GPIO.c: 84:         portType = 1;
  3178  0E10  01D9               	clrf	readGPIO@portType^(0+128)
  3179  0E11  0AD9               	incf	readGPIO@portType^(0+128),f
  3180                           
  3181                           ;GPIO.c: 85:     }
  3182  0E12  2E18               	goto	l2662
  3183  0E13                     l2658:
  3184                           
  3185                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3186  0E13  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3187  0E14  00D2               	movwf	??_readGPIO^(0+128)
  3188  0E15  0852               	movf	??_readGPIO^(0+128),w
  3189  0E16  00D8               	movwf	readGPIO@portNumber^(0+128)
  3190  0E17                     l2660:
  3191                           
  3192                           ;GPIO.c: 88:         portType = 0;
  3193  0E17  01D9               	clrf	readGPIO@portType^(0+128)
  3194  0E18                     l2662:
  3195                           
  3196                           ;GPIO.c: 91:     if(portType == 0){
  3197  0E18  0859               	movf	readGPIO@portType^(0+128),w
  3198  0E19  1D03               	btfss	3,2
  3199  0E1A  2E1C               	goto	u2471
  3200  0E1B  2E1D               	goto	u2470
  3201  0E1C                     u2471:
  3202  0E1C  2E31               	goto	l2674
  3203  0E1D                     u2470:
  3204  0E1D                     l2664:
  3205                           
  3206                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3207  0E1D  0020               	movlb	0	; select bank0
  3208  0E1E  080C               	movf	12,w	;volatile
  3209  0E1F  0021               	movlb	1	; select bank1
  3210  0E20  00D2               	movwf	??_readGPIO^(0+128)
  3211  0E21  0852               	movf	??_readGPIO^(0+128),w
  3212  0E22  00D4               	movwf	readGPIO@readA^(0+128)
  3213  0E23                     l2666:
  3214                           
  3215                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3216  0E23  0854               	movf	readGPIO@readA^(0+128),w
  3217  0E24  00D2               	movwf	??_readGPIO^(0+128)
  3218  0E25  0A58               	incf	readGPIO@portNumber^(0+128),w
  3219  0E26  2E28               	goto	u2484
  3220  0E27                     u2485:
  3221  0E27  36D2               	lsrf	??_readGPIO^(0+128),f
  3222  0E28                     u2484:
  3223  0E28  0B89               	decfsz	9,f
  3224  0E29  2E27               	goto	u2485
  3225  0E2A  0852               	movf	??_readGPIO^(0+128),w
  3226  0E2B  3901               	andlw	1
  3227  0E2C  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3228  0E2D  0853               	movf	(??_readGPIO+1)^(0+128),w
  3229  0E2E  00D5               	movwf	readGPIO@returnValueA^(0+128)
  3230  0E2F                     l2668:
  3231                           
  3232                           ;GPIO.c: 94:         return returnValueA;
  3233  0E2F  0855               	movf	readGPIO@returnValueA^(0+128),w
  3234  0E30  2E4B               	goto	l324
  3235  0E31                     l2674:
  3236  0E31  0359               	decf	readGPIO@portType^(0+128),w
  3237  0E32  1D03               	btfss	3,2
  3238  0E33  2E35               	goto	u2491
  3239  0E34  2E36               	goto	u2490
  3240  0E35                     u2491:
  3241  0E35  2E4A               	goto	l2686
  3242  0E36                     u2490:
  3243  0E36                     l2676:
  3244                           
  3245                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3246  0E36  0020               	movlb	0	; select bank0
  3247  0E37  080D               	movf	13,w	;volatile
  3248  0E38  0021               	movlb	1	; select bank1
  3249  0E39  00D2               	movwf	??_readGPIO^(0+128)
  3250  0E3A  0852               	movf	??_readGPIO^(0+128),w
  3251  0E3B  00D6               	movwf	readGPIO@readB^(0+128)
  3252  0E3C                     l2678:
  3253                           
  3254                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3255  0E3C  0856               	movf	readGPIO@readB^(0+128),w
  3256  0E3D  00D2               	movwf	??_readGPIO^(0+128)
  3257  0E3E  0A58               	incf	readGPIO@portNumber^(0+128),w
  3258  0E3F  2E41               	goto	u2504
  3259  0E40                     u2505:
  3260  0E40  36D2               	lsrf	??_readGPIO^(0+128),f
  3261  0E41                     u2504:
  3262  0E41  0B89               	decfsz	9,f
  3263  0E42  2E40               	goto	u2505
  3264  0E43  0852               	movf	??_readGPIO^(0+128),w
  3265  0E44  3901               	andlw	1
  3266  0E45  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3267  0E46  0853               	movf	(??_readGPIO+1)^(0+128),w
  3268  0E47  00D7               	movwf	readGPIO@returnValueB^(0+128)
  3269  0E48                     l2680:
  3270                           
  3271                           ;GPIO.c: 99:         return returnValueB;
  3272  0E48  0857               	movf	readGPIO@returnValueB^(0+128),w
  3273  0E49  2E4B               	goto	l324
  3274  0E4A                     l2686:
  3275  0E4A  3000               	movlw	0
  3276  0E4B                     l324:
  3277  0E4B  0008               	return
  3278  0E4C                     __end_of_readGPIO:
  3279                           
  3280                           	psect	text8
  3281  0BE7                     __ptext8:	
  3282 ;; *************** function _initialisePotentiometers *****************
  3283 ;; Defined at:
  3284 ;;		line 15 in file "Potentiometer.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, pclath, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3298 ;;      Params:         0       0       0       0       0       0
  3299 ;;      Locals:         0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0
  3301 ;;      Totals:         0       0       0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used: 1
  3304 ;; Hardware stack levels required when called: 6
  3305 ;; This function calls:
  3306 ;;		_initialiseADCPin
  3307 ;; This function is called by:
  3308 ;;		_main
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312  0BE7                     _initialisePotentiometers:	
  3313                           ;psect for function _initialisePotentiometers
  3314                           
  3315  0BE7                     l2644:	
  3316                           ;incstack = 0
  3317                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3318                           
  3319                           
  3320                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3321  0BE7  3009               	movlw	9
  3322  0BE8  3186  2610  318B   	fcall	_initialiseADCPin
  3323                           
  3324                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3325  0BEB  300A               	movlw	10
  3326  0BEC  3186  2610  318B   	fcall	_initialiseADCPin
  3327  0BEF                     l356:
  3328  0BEF  0008               	return
  3329  0BF0                     __end_of_initialisePotentiometers:
  3330                           
  3331                           	psect	text9
  3332  0C7C                     __ptext9:	
  3333 ;; *************** function _initialiseCurrentSensors *****************
  3334 ;; Defined at:
  3335 ;;		line 18 in file "CurrentSensor.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0, pclath, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3349 ;;      Params:         0       0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0
  3352 ;;      Totals:         0       0       0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used: 1
  3355 ;; Hardware stack levels required when called: 7
  3356 ;; This function calls:
  3357 ;;		_currentTripReset
  3358 ;;		_initialiseADCPin
  3359 ;;		_initialiseGPIO
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365  0C7C                     _initialiseCurrentSensors:	
  3366                           ;psect for function _initialiseCurrentSensors
  3367                           
  3368  0C7C                     l2642:	
  3369                           ;incstack = 0
  3370                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3371                           
  3372                           
  3373                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3374  0C7C  0021               	movlb	1	; select bank1
  3375  0C7D  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3376  0C7E  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3377  0C7F  3003               	movlw	3
  3378  0C80  3185  259A  318C   	fcall	_initialiseGPIO
  3379                           
  3380                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3381  0C83  0021               	movlb	1	; select bank1
  3382  0C84  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3383  0C85  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3384  0C86  3001               	movlw	1
  3385  0C87  3185  259A  318C   	fcall	_initialiseGPIO
  3386                           
  3387                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3388  0C8A  3000               	movlw	0
  3389  0C8B  3186  2610  318C   	fcall	_initialiseADCPin
  3390                           
  3391                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3392  0C8E  3002               	movlw	2
  3393  0C8F  3186  2610  318C   	fcall	_initialiseADCPin
  3394                           
  3395                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3396  0C92  0021               	movlb	1	; select bank1
  3397  0C93  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3398  0C94  300B               	movlw	11
  3399  0C95  3185  259A  318C   	fcall	_initialiseGPIO
  3400                           
  3401                           ;CurrentSensor.c: 24:     currentTripReset();
  3402  0C98  318B  23FC  318C   	fcall	_currentTripReset
  3403  0C9B                     l510:
  3404  0C9B  0008               	return
  3405  0C9C                     __end_of_initialiseCurrentSensors:
  3406                           
  3407                           	psect	text10
  3408  0BFC                     __ptext10:	
  3409 ;; *************** function _currentTripReset *****************
  3410 ;; Defined at:
  3411 ;;		line 71 in file "CurrentSensor.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3425 ;;      Params:         0       0       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0
  3428 ;;      Totals:         0       0       0       0       0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 6
  3432 ;; This function calls:
  3433 ;;		_writeGPIO
  3434 ;; This function is called by:
  3435 ;;		_initialiseCurrentSensors
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439  0BFC                     _currentTripReset:	
  3440                           ;psect for function _currentTripReset
  3441                           
  3442  0BFC                     l2274:	
  3443                           ;incstack = 0
  3444                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3445                           
  3446                           
  3447                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3448  0BFC  0021               	movlb	1	; select bank1
  3449  0BFD  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3450  0BFE  300B               	movlw	11
  3451  0BFF  3186  2676  318B   	fcall	_writeGPIO
  3452  0C02                     l2276:
  3453                           
  3454                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3455                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3456  0C02  0021               	movlb	1	; select bank1
  3457  0C03  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3458  0C04  0AD2               	incf	writeGPIO@writeValue^(0+128),f
  3459  0C05  300B               	movlw	11
  3460  0C06  3186  2676  318B   	fcall	_writeGPIO
  3461  0C09                     l532:
  3462  0C09  0008               	return
  3463  0C0A                     __end_of_currentTripReset:
  3464                           
  3465                           	psect	text11
  3466  0676                     __ptext11:	
  3467 ;; *************** function _writeGPIO *****************
  3468 ;; Defined at:
  3469 ;;		line 52 in file "GPIO.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  gpioNumber      1    wreg     const enum E2798
  3472 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3475 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3476 ;;  portType        1    3[BANK1 ] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3486 ;;      Params:         0       0       1       0       0       0
  3487 ;;      Locals:         0       0       3       0       0       0
  3488 ;;      Temps:          0       0       2       0       0       0
  3489 ;;      Totals:         0       0       6       0       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 5
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_currentTripReset
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500  0676                     _writeGPIO:	
  3501                           ;psect for function _writeGPIO
  3502                           
  3503                           
  3504                           ;incstack = 0
  3505                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3506                           ;writeGPIO@gpioNumber stored from wreg
  3507  0676  0021               	movlb	1	; select bank1
  3508  0677  00D6               	movwf	writeGPIO@gpioNumber^(0+128)
  3509  0678                     l2022:
  3510                           
  3511                           ;GPIO.c: 54:     uint8_t portType = 0;
  3512  0678  01D5               	clrf	writeGPIO@portType^(0+128)
  3513  0679                     l2024:
  3514                           
  3515                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3516  0679  3008               	movlw	8
  3517  067A  0256               	subwf	writeGPIO@gpioNumber^(0+128),w
  3518  067B  1C03               	skipc
  3519  067C  2E7E               	goto	u1361
  3520  067D  2E7F               	goto	u1360
  3521  067E                     u1361:
  3522  067E  2E87               	goto	l2030
  3523  067F                     u1360:
  3524  067F                     l2026:
  3525                           
  3526                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3527  067F  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3528  0680  3EF8               	addlw	248
  3529  0681  00D3               	movwf	??_writeGPIO^(0+128)
  3530  0682  0853               	movf	??_writeGPIO^(0+128),w
  3531  0683  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3532  0684                     l2028:
  3533                           
  3534                           ;GPIO.c: 57:         portType = 1;
  3535  0684  01D5               	clrf	writeGPIO@portType^(0+128)
  3536  0685  0AD5               	incf	writeGPIO@portType^(0+128),f
  3537                           
  3538                           ;GPIO.c: 58:     }
  3539  0686  2E8C               	goto	l2034
  3540  0687                     l2030:
  3541                           
  3542                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3543  0687  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3544  0688  00D3               	movwf	??_writeGPIO^(0+128)
  3545  0689  0853               	movf	??_writeGPIO^(0+128),w
  3546  068A  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3547  068B                     l2032:
  3548                           
  3549                           ;GPIO.c: 61:         portType = 0;
  3550  068B  01D5               	clrf	writeGPIO@portType^(0+128)
  3551  068C                     l2034:
  3552                           
  3553                           ;GPIO.c: 64:     if(portType == 0){
  3554  068C  0855               	movf	writeGPIO@portType^(0+128),w
  3555  068D  1D03               	btfss	3,2
  3556  068E  2E90               	goto	u1371
  3557  068F  2E91               	goto	u1370
  3558  0690                     u1371:
  3559  0690  2EB1               	goto	l2042
  3560  0691                     u1370:
  3561  0691                     l2036:
  3562                           
  3563                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3564  0691  0852               	movf	writeGPIO@writeValue^(0+128),w
  3565  0692  1903               	btfsc	3,2
  3566  0693  2E95               	goto	u1381
  3567  0694  2E96               	goto	u1380
  3568  0695                     u1381:
  3569  0695  2EA3               	goto	l2040
  3570  0696                     u1380:
  3571  0696                     l2038:
  3572  0696  3001               	movlw	1
  3573  0697  00D3               	movwf	??_writeGPIO^(0+128)
  3574  0698  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3575  0699  2E9B               	goto	u1394
  3576  069A                     u1395:
  3577  069A  35D3               	lslf	??_writeGPIO^(0+128),f
  3578  069B                     u1394:
  3579  069B  0B89               	decfsz	9,f
  3580  069C  2E9A               	goto	u1395
  3581  069D  0853               	movf	??_writeGPIO^(0+128),w
  3582  069E  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3583  069F  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3584  06A0  0022               	movlb	2	; select bank2
  3585  06A1  048C               	iorwf	12,f	;volatile
  3586  06A2  2ED5               	goto	l318
  3587  06A3                     l2040:
  3588  06A3  3001               	movlw	1
  3589  06A4  00D3               	movwf	??_writeGPIO^(0+128)
  3590  06A5  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3591  06A6  2EA8               	goto	u1404
  3592  06A7                     u1405:
  3593  06A7  35D3               	lslf	??_writeGPIO^(0+128),f
  3594  06A8                     u1404:
  3595  06A8  0B89               	decfsz	9,f
  3596  06A9  2EA7               	goto	u1405
  3597  06AA  0853               	movf	??_writeGPIO^(0+128),w
  3598  06AB  3AFF               	xorlw	255
  3599  06AC  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3600  06AD  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3601  06AE  0022               	movlb	2	; select bank2
  3602  06AF  058C               	andwf	12,f	;volatile
  3603  06B0  2ED5               	goto	l318
  3604  06B1                     l2042:
  3605  06B1  0355               	decf	writeGPIO@portType^(0+128),w
  3606  06B2  1D03               	btfss	3,2
  3607  06B3  2EB5               	goto	u1411
  3608  06B4  2EB6               	goto	u1410
  3609  06B5                     u1411:
  3610  06B5  2ED5               	goto	l318
  3611  06B6                     u1410:
  3612  06B6                     l2044:
  3613                           
  3614                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3615  06B6  0852               	movf	writeGPIO@writeValue^(0+128),w
  3616  06B7  1903               	btfsc	3,2
  3617  06B8  2EBA               	goto	u1421
  3618  06B9  2EBB               	goto	u1420
  3619  06BA                     u1421:
  3620  06BA  2EC8               	goto	l2048
  3621  06BB                     u1420:
  3622  06BB                     l2046:
  3623  06BB  3001               	movlw	1
  3624  06BC  00D3               	movwf	??_writeGPIO^(0+128)
  3625  06BD  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3626  06BE  2EC0               	goto	u1434
  3627  06BF                     u1435:
  3628  06BF  35D3               	lslf	??_writeGPIO^(0+128),f
  3629  06C0                     u1434:
  3630  06C0  0B89               	decfsz	9,f
  3631  06C1  2EBF               	goto	u1435
  3632  06C2  0853               	movf	??_writeGPIO^(0+128),w
  3633  06C3  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3634  06C4  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3635  06C5  0022               	movlb	2	; select bank2
  3636  06C6  048D               	iorwf	13,f	;volatile
  3637  06C7  2ED5               	goto	l318
  3638  06C8                     l2048:
  3639  06C8  3001               	movlw	1
  3640  06C9  00D3               	movwf	??_writeGPIO^(0+128)
  3641  06CA  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3642  06CB  2ECD               	goto	u1444
  3643  06CC                     u1445:
  3644  06CC  35D3               	lslf	??_writeGPIO^(0+128),f
  3645  06CD                     u1444:
  3646  06CD  0B89               	decfsz	9,f
  3647  06CE  2ECC               	goto	u1445
  3648  06CF  0853               	movf	??_writeGPIO^(0+128),w
  3649  06D0  3AFF               	xorlw	255
  3650  06D1  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3651  06D2  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3652  06D3  0022               	movlb	2	; select bank2
  3653  06D4  058D               	andwf	13,f	;volatile
  3654  06D5                     l318:
  3655  06D5  0008               	return
  3656  06D6                     __end_of_writeGPIO:
  3657                           
  3658                           	psect	text12
  3659  0C40                     __ptext12:	
  3660 ;; *************** function _initialiseController *****************
  3661 ;; Defined at:
  3662 ;;		line 28 in file "Controller.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0, pclath, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3676 ;;      Params:         0       0       0       0       0       0
  3677 ;;      Locals:         0       0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0
  3679 ;;      Totals:         0       0       0       0       0       0
  3680 ;;Total ram usage:        0 bytes
  3681 ;; Hardware stack levels used: 1
  3682 ;; Hardware stack levels required when called: 6
  3683 ;; This function calls:
  3684 ;;		_initialiseADCPin
  3685 ;;		_initialiseGPIO
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691  0C40                     _initialiseController:	
  3692                           ;psect for function _initialiseController
  3693                           
  3694  0C40                     l2646:	
  3695                           ;incstack = 0
  3696                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3697                           
  3698                           
  3699                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3700  0C40  0021               	movlb	1	; select bank1
  3701  0C41  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3702  0C42  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3703  0C43  3004               	movlw	4
  3704  0C44  3185  259A  318C   	fcall	_initialiseGPIO
  3705                           
  3706                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3707  0C47  3004               	movlw	4
  3708  0C48  3186  2610  318C   	fcall	_initialiseADCPin
  3709  0C4B                     l2648:
  3710                           
  3711                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (7u + 16u)
      +                          );
  3712  0C4B  3000               	movlw	0
  3713  0C4C  0021               	movlb	1	; select bank1
  3714  0C4D  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3715  0C4E  3000               	movlw	0
  3716  0C4F  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3717  0C50  3000               	movlw	0
  3718  0C51  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3719  0C52  3001               	movlw	1
  3720  0C53  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3721  0C54  3000               	movlw	0
  3722  0C55  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3723  0C56  3000               	movlw	0
  3724  0C57  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3725  0C58  3000               	movlw	0
  3726  0C59  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3727  0C5A  3000               	movlw	0
  3728  0C5B  00A0               	movwf	_integratorScaledLimit^(0+128)
  3729  0C5C                     l428:
  3730  0C5C  0008               	return
  3731  0C5D                     __end_of_initialiseController:
  3732                           
  3733                           	psect	text13
  3734  059A                     __ptext13:	
  3735 ;; *************** function _initialiseGPIO *****************
  3736 ;; Defined at:
  3737 ;;		line 18 in file "GPIO.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  gpioNumber      1    wreg     const enum E2798
  3740 ;;  direction       1    0[BANK1 ] unsigned char 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3743 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3744 ;;  portType        1    3[BANK1 ] unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3754 ;;      Params:         0       0       1       0       0       0
  3755 ;;      Locals:         0       0       3       0       0       0
  3756 ;;      Temps:          0       0       2       0       0       0
  3757 ;;      Totals:         0       0       6       0       0       0
  3758 ;;Total ram usage:        6 bytes
  3759 ;; Hardware stack levels used: 1
  3760 ;; Hardware stack levels required when called: 5
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		_main
  3765 ;;		_setupPWM
  3766 ;;		_initialiseController
  3767 ;;		_initialiseCurrentSensors
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771  059A                     _initialiseGPIO:	
  3772                           ;psect for function _initialiseGPIO
  3773                           
  3774                           
  3775                           ;incstack = 0
  3776                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3777                           ;initialiseGPIO@gpioNumber stored from wreg
  3778  059A  0021               	movlb	1	; select bank1
  3779  059B  00D6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3780  059C                     l2142:
  3781                           
  3782                           ;GPIO.c: 20:     uint8_t portType = 0;
  3783  059C  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3784  059D                     l2144:
  3785                           
  3786                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3787  059D  3008               	movlw	8
  3788  059E  0256               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3789  059F  1C03               	skipc
  3790  05A0  2DA2               	goto	u1641
  3791  05A1  2DA3               	goto	u1640
  3792  05A2                     u1641:
  3793  05A2  2DAB               	goto	l2150
  3794  05A3                     u1640:
  3795  05A3                     l2146:
  3796                           
  3797                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3798  05A3  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3799  05A4  3EF8               	addlw	248
  3800  05A5  00D3               	movwf	??_initialiseGPIO^(0+128)
  3801  05A6  0853               	movf	??_initialiseGPIO^(0+128),w
  3802  05A7  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3803  05A8                     l2148:
  3804                           
  3805                           ;GPIO.c: 23:         portType = 1;
  3806  05A8  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3807  05A9  0AD5               	incf	initialiseGPIO@portType^(0+128),f
  3808                           
  3809                           ;GPIO.c: 24:     }
  3810  05AA  2DB0               	goto	l2154
  3811  05AB                     l2150:
  3812                           
  3813                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3814  05AB  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3815  05AC  00D3               	movwf	??_initialiseGPIO^(0+128)
  3816  05AD  0853               	movf	??_initialiseGPIO^(0+128),w
  3817  05AE  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3818  05AF                     l2152:
  3819                           
  3820                           ;GPIO.c: 27:         portType = 0;
  3821  05AF  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3822  05B0                     l2154:
  3823                           
  3824                           ;GPIO.c: 30:     if(portType == 0){
  3825  05B0  0855               	movf	initialiseGPIO@portType^(0+128),w
  3826  05B1  1D03               	btfss	3,2
  3827  05B2  2DB4               	goto	u1651
  3828  05B3  2DB5               	goto	u1650
  3829  05B4                     u1651:
  3830  05B4  2DE0               	goto	l2162
  3831  05B5                     u1650:
  3832  05B5                     l2156:
  3833                           
  3834                           ;GPIO.c: 31:         if(direction){
  3835  05B5  0852               	movf	initialiseGPIO@direction^(0+128),w
  3836  05B6  1903               	btfsc	3,2
  3837  05B7  2DB9               	goto	u1661
  3838  05B8  2DBA               	goto	u1660
  3839  05B9                     u1661:
  3840  05B9  2DD3               	goto	l2160
  3841  05BA                     u1660:
  3842  05BA                     l2158:
  3843                           
  3844                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3845  05BA  3001               	movlw	1
  3846  05BB  00D3               	movwf	??_initialiseGPIO^(0+128)
  3847  05BC  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3848  05BD  2DBF               	goto	u1674
  3849  05BE                     u1675:
  3850  05BE  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3851  05BF                     u1674:
  3852  05BF  0B89               	decfsz	9,f
  3853  05C0  2DBE               	goto	u1675
  3854  05C1  0853               	movf	??_initialiseGPIO^(0+128),w
  3855  05C2  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3856  05C3  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3857  05C4  048C               	iorwf	12,f	;volatile
  3858                           
  3859                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3860  05C5  3001               	movlw	1
  3861  05C6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3862  05C7  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3863  05C8  2DCA               	goto	u1684
  3864  05C9                     u1685:
  3865  05C9  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3866  05CA                     u1684:
  3867  05CA  0B89               	decfsz	9,f
  3868  05CB  2DC9               	goto	u1685
  3869  05CC  0853               	movf	??_initialiseGPIO^(0+128),w
  3870  05CD  3AFF               	xorlw	255
  3871  05CE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3872  05CF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3873  05D0  0023               	movlb	3	; select bank3
  3874  05D1  058C               	andwf	12,f	;volatile
  3875                           
  3876                           ;GPIO.c: 34:         }
  3877  05D2  2E0F               	goto	l304
  3878  05D3                     l2160:
  3879  05D3  3001               	movlw	1
  3880  05D4  00D3               	movwf	??_initialiseGPIO^(0+128)
  3881  05D5  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3882  05D6  2DD8               	goto	u1694
  3883  05D7                     u1695:
  3884  05D7  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3885  05D8                     u1694:
  3886  05D8  0B89               	decfsz	9,f
  3887  05D9  2DD7               	goto	u1695
  3888  05DA  0853               	movf	??_initialiseGPIO^(0+128),w
  3889  05DB  3AFF               	xorlw	255
  3890  05DC  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3891  05DD  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3892  05DE  058C               	andwf	12,f	;volatile
  3893  05DF  2E0F               	goto	l304
  3894  05E0                     l2162:
  3895  05E0  0355               	decf	initialiseGPIO@portType^(0+128),w
  3896  05E1  1D03               	btfss	3,2
  3897  05E2  2DE4               	goto	u1701
  3898  05E3  2DE5               	goto	u1700
  3899  05E4                     u1701:
  3900  05E4  2E0F               	goto	l304
  3901  05E5                     u1700:
  3902  05E5                     l2164:
  3903                           
  3904                           ;GPIO.c: 38:         if(direction){
  3905  05E5  0852               	movf	initialiseGPIO@direction^(0+128),w
  3906  05E6  1903               	btfsc	3,2
  3907  05E7  2DE9               	goto	u1711
  3908  05E8  2DEA               	goto	u1710
  3909  05E9                     u1711:
  3910  05E9  2E03               	goto	l2168
  3911  05EA                     u1710:
  3912  05EA                     l2166:
  3913                           
  3914                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3915  05EA  3001               	movlw	1
  3916  05EB  00D3               	movwf	??_initialiseGPIO^(0+128)
  3917  05EC  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3918  05ED  2DEF               	goto	u1724
  3919  05EE                     u1725:
  3920  05EE  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3921  05EF                     u1724:
  3922  05EF  0B89               	decfsz	9,f
  3923  05F0  2DEE               	goto	u1725
  3924  05F1  0853               	movf	??_initialiseGPIO^(0+128),w
  3925  05F2  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3926  05F3  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3927  05F4  048D               	iorwf	13,f	;volatile
  3928                           
  3929                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3930  05F5  3001               	movlw	1
  3931  05F6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3932  05F7  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3933  05F8  2DFA               	goto	u1734
  3934  05F9                     u1735:
  3935  05F9  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3936  05FA                     u1734:
  3937  05FA  0B89               	decfsz	9,f
  3938  05FB  2DF9               	goto	u1735
  3939  05FC  0853               	movf	??_initialiseGPIO^(0+128),w
  3940  05FD  3AFF               	xorlw	255
  3941  05FE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3942  05FF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3943  0600  0023               	movlb	3	; select bank3
  3944  0601  058D               	andwf	13,f	;volatile
  3945                           
  3946                           ;GPIO.c: 41:         }
  3947  0602  2E0F               	goto	l304
  3948  0603                     l2168:
  3949  0603  3001               	movlw	1
  3950  0604  00D3               	movwf	??_initialiseGPIO^(0+128)
  3951  0605  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3952  0606  2E08               	goto	u1744
  3953  0607                     u1745:
  3954  0607  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3955  0608                     u1744:
  3956  0608  0B89               	decfsz	9,f
  3957  0609  2E07               	goto	u1745
  3958  060A  0853               	movf	??_initialiseGPIO^(0+128),w
  3959  060B  3AFF               	xorlw	255
  3960  060C  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3961  060D  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3962  060E  058D               	andwf	13,f	;volatile
  3963  060F                     l304:
  3964  060F  0008               	return
  3965  0610                     __end_of_initialiseGPIO:
  3966                           
  3967                           	psect	text14
  3968  0610                     __ptext14:	
  3969 ;; *************** function _initialiseADCPin *****************
  3970 ;; Defined at:
  3971 ;;		line 37 in file "ADC.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  gpioNumber      1    wreg     const enum E2798
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  3976 ;;  portNumber      1    4[BANK1 ] unsigned char 
  3977 ;;  portType        1    3[BANK1 ] unsigned char 
  3978 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3988 ;;      Params:         0       0       0       0       0       0
  3989 ;;      Locals:         0       0       4       0       0       0
  3990 ;;      Temps:          0       0       2       0       0       0
  3991 ;;      Totals:         0       0       6       0       0       0
  3992 ;;Total ram usage:        6 bytes
  3993 ;; Hardware stack levels used: 1
  3994 ;; Hardware stack levels required when called: 5
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_initialisePotentiometers
  3999 ;;		_initialiseController
  4000 ;;		_initialiseCurrentSensors
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004  0610                     _initialiseADCPin:	
  4005                           ;psect for function _initialiseADCPin
  4006                           
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4010                           ;initialiseADCPin@gpioNumber stored from wreg
  4011  0610  0021               	movlb	1	; select bank1
  4012  0611  00D7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4013  0612                     l2170:
  4014                           
  4015                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4016  0612  01D6               	clrf	initialiseADCPin@portNumber^(0+128)
  4017                           
  4018                           ;ADC.c: 40:     uint8_t portType = 0;
  4019  0613  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4020                           
  4021                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4022  0614  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4023  0615                     l2172:
  4024                           
  4025                           ;ADC.c: 43:     if(gpioNumber < 4){
  4026  0615  3004               	movlw	4
  4027  0616  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4028  0617  1803               	skipnc
  4029  0618  2E1A               	goto	u1751
  4030  0619  2E1B               	goto	u1750
  4031  061A                     u1751:
  4032  061A  2E22               	goto	l2180
  4033  061B                     u1750:
  4034  061B                     l2174:
  4035                           
  4036                           ;ADC.c: 44:         portNumber = gpioNumber;
  4037  061B  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4038  061C  00D2               	movwf	??_initialiseADCPin^(0+128)
  4039  061D  0852               	movf	??_initialiseADCPin^(0+128),w
  4040  061E  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4041  061F                     l2176:
  4042                           
  4043                           ;ADC.c: 45:         portType = 0;
  4044  061F  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4045  0620                     l2178:
  4046                           
  4047                           ;ADC.c: 46:         gpioValid = 1;
  4048  0620  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4049  0621  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4050  0622                     l2180:
  4051                           
  4052                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4053  0622  3009               	movlw	9
  4054  0623  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4055  0624  1C03               	skipc
  4056  0625  2E27               	goto	u1761
  4057  0626  2E28               	goto	u1760
  4058  0627                     u1761:
  4059  0627  2E37               	goto	l236
  4060  0628                     u1760:
  4061  0628                     l2182:
  4062  0628  3010               	movlw	16
  4063  0629  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4064  062A  1803               	skipnc
  4065  062B  2E2D               	goto	u1771
  4066  062C  2E2E               	goto	u1770
  4067  062D                     u1771:
  4068  062D  2E37               	goto	l236
  4069  062E                     u1770:
  4070  062E                     l2184:
  4071                           
  4072                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4073  062E  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4074  062F  3EF8               	addlw	248
  4075  0630  00D2               	movwf	??_initialiseADCPin^(0+128)
  4076  0631  0852               	movf	??_initialiseADCPin^(0+128),w
  4077  0632  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4078  0633                     l2186:
  4079                           
  4080                           ;ADC.c: 51:         portType = 1;
  4081  0633  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4082  0634  0AD5               	incf	initialiseADCPin@portType^(0+128),f
  4083  0635                     l2188:
  4084                           
  4085                           ;ADC.c: 52:         gpioValid = 1;
  4086  0635  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4087  0636  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4088  0637                     l236:	
  4089                           ;ADC.c: 53:     }
  4090                           
  4091                           
  4092                           ;ADC.c: 55:     if(gpioValid){
  4093  0637  0854               	movf	initialiseADCPin@gpioValid^(0+128),w
  4094  0638  1903               	btfsc	3,2
  4095  0639  2E3B               	goto	u1781
  4096  063A  2E3C               	goto	u1780
  4097  063B                     u1781:
  4098  063B  2E75               	goto	l241
  4099  063C                     u1780:
  4100  063C                     l2190:
  4101                           
  4102                           ;ADC.c: 56:         if(portType == 0){
  4103  063C  0855               	movf	initialiseADCPin@portType^(0+128),w
  4104  063D  1D03               	btfss	3,2
  4105  063E  2E40               	goto	u1791
  4106  063F  2E41               	goto	u1790
  4107  0640                     u1791:
  4108  0640  2E59               	goto	l2194
  4109  0641                     u1790:
  4110  0641                     l2192:
  4111                           
  4112                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4113  0641  3001               	movlw	1
  4114  0642  00D2               	movwf	??_initialiseADCPin^(0+128)
  4115  0643  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4116  0644  2E46               	goto	u1804
  4117  0645                     u1805:
  4118  0645  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4119  0646                     u1804:
  4120  0646  0B89               	decfsz	9,f
  4121  0647  2E45               	goto	u1805
  4122  0648  0852               	movf	??_initialiseADCPin^(0+128),w
  4123  0649  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4124  064A  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4125  064B  048C               	iorwf	12,f	;volatile
  4126                           
  4127                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4128  064C  3001               	movlw	1
  4129  064D  00D2               	movwf	??_initialiseADCPin^(0+128)
  4130  064E  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4131  064F  2E51               	goto	u1814
  4132  0650                     u1815:
  4133  0650  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4134  0651                     u1814:
  4135  0651  0B89               	decfsz	9,f
  4136  0652  2E50               	goto	u1815
  4137  0653  0852               	movf	??_initialiseADCPin^(0+128),w
  4138  0654  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4139  0655  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4140  0656  0023               	movlb	3	; select bank3
  4141  0657  048C               	iorwf	12,f	;volatile
  4142                           
  4143                           ;ADC.c: 59:         }
  4144  0658  2E75               	goto	l241
  4145  0659                     l2194:
  4146  0659  0355               	decf	initialiseADCPin@portType^(0+128),w
  4147  065A  1D03               	btfss	3,2
  4148  065B  2E5D               	goto	u1821
  4149  065C  2E5E               	goto	u1820
  4150  065D                     u1821:
  4151  065D  2E75               	goto	l241
  4152  065E                     u1820:
  4153  065E                     l2196:
  4154                           
  4155                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4156  065E  3001               	movlw	1
  4157  065F  00D2               	movwf	??_initialiseADCPin^(0+128)
  4158  0660  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4159  0661  2E63               	goto	u1834
  4160  0662                     u1835:
  4161  0662  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4162  0663                     u1834:
  4163  0663  0B89               	decfsz	9,f
  4164  0664  2E62               	goto	u1835
  4165  0665  0852               	movf	??_initialiseADCPin^(0+128),w
  4166  0666  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4167  0667  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4168  0668  048D               	iorwf	13,f	;volatile
  4169                           
  4170                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4171  0669  3001               	movlw	1
  4172  066A  00D2               	movwf	??_initialiseADCPin^(0+128)
  4173  066B  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4174  066C  2E6E               	goto	u1844
  4175  066D                     u1845:
  4176  066D  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4177  066E                     u1844:
  4178  066E  0B89               	decfsz	9,f
  4179  066F  2E6D               	goto	u1845
  4180  0670  0852               	movf	??_initialiseADCPin^(0+128),w
  4181  0671  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4182  0672  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4183  0673  0023               	movlb	3	; select bank3
  4184  0674  048D               	iorwf	13,f	;volatile
  4185  0675                     l241:
  4186  0675  0008               	return
  4187  0676                     __end_of_initialiseADCPin:
  4188                           
  4189                           	psect	text15
  4190  0BBC                     __ptext15:	
  4191 ;; *************** function _initialiseADCModule *****************
  4192 ;; Defined at:
  4193 ;;		line 14 in file "ADC.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4207 ;;      Params:         0       0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used: 1
  4213 ;; Hardware stack levels required when called: 5
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221  0BBC                     _initialiseADCModule:	
  4222                           ;psect for function _initialiseADCModule
  4223                           
  4224  0BBC                     l2640:	
  4225                           ;incstack = 0
  4226                           ; Regs used in _initialiseADCModule: [wreg]
  4227                           
  4228                           
  4229                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4230  0BBC  3001               	movlw	1
  4231  0BBD  0021               	movlb	1	; select bank1
  4232  0BBE  009D               	movwf	29	;volatile
  4233                           
  4234                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4235  0BBF  3090               	movlw	144
  4236  0BC0  009E               	movwf	30	;volatile
  4237  0BC1                     l232:
  4238  0BC1  0008               	return
  4239  0BC2                     __end_of_initialiseADCModule:
  4240                           
  4241                           	psect	intentry
  4242  0004                     __pintentry:	
  4243 ;; *************** function _Tick490Hz *****************
  4244 ;; Defined at:
  4245 ;;		line 42 in file "main.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4259 ;;      Params:         0       0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0
  4261 ;;      Temps:          0       1       0       0       0       0
  4262 ;;      Totals:         0       1       0       0       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used: 1
  4265 ;; Hardware stack levels required when called: 4
  4266 ;; This function calls:
  4267 ;;		_controlRoutine
  4268 ;;		_currentTripMonitor
  4269 ;;		_readFilteredDutyPot
  4270 ;;		_readFilteredFreqPot
  4271 ;;		_readFilteredIL
  4272 ;;		_readFilteredVout
  4273 ;;		_runPotScaling
  4274 ;;		_setPWMDutyandPeriod
  4275 ;;		i1_writeGPIO
  4276 ;; This function is called by:
  4277 ;;		Interrupt level 1
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281  0004                     _Tick490Hz:
  4282                           
  4283                           ;incstack = 0
  4284  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4285                           
  4286                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4287  0005  3180               	pagesel	$
  4288  0006                     i1l2696:
  4289                           
  4290                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4291  0006  01F0               	clrf	i1writeGPIO@writeValue
  4292  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4293  0008  300C               	movlw	12
  4294  0009  3186  26D6  3180   	fcall	i1_writeGPIO
  4295                           
  4296                           ;main.c: 54:         currentTripMonitor();
  4297  000C  318C  249C  3180   	fcall	_currentTripMonitor
  4298                           
  4299                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4300  000F  0020               	movlb	0	; select bank0
  4301  0010  0864               	movf	_setDuty+1,w
  4302  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4303  0012  0863               	movf	_setDuty,w
  4304  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4305  0014  086E               	movf	_setPeriod,w
  4306  0015  00DE               	movwf	??_Tick490Hz
  4307  0016  085E               	movf	??_Tick490Hz,w
  4308  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4309  0018  318C  24C0  3180   	fcall	_setPWMDutyandPeriod
  4310  001B                     i1l2698:
  4311                           
  4312                           ;main.c: 58:         if(timerSlotHalf == 0){
  4313  001B  0020               	movlb	0	; select bank0
  4314  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4315  001D  1D03               	btfss	3,2
  4316  001E  2820               	goto	u251_21
  4317  001F  2821               	goto	u251_20
  4318  0020                     u251_21:
  4319  0020  2829               	goto	i1l2704
  4320  0021                     u251_20:
  4321  0021                     i1l2700:
  4322                           
  4323                           ;main.c: 60:             controlRoutine();
  4324  0021  3183  23FF  3180   	fcall	_controlRoutine
  4325  0024                     i1l2702:
  4326                           
  4327                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4328  0024  01F0               	clrf	i1writeGPIO@writeValue
  4329  0025  300C               	movlw	12
  4330  0026  3186  26D6  3180   	fcall	i1_writeGPIO
  4331  0029                     i1l2704:
  4332                           
  4333                           ;main.c: 64:         if(timerSlotHalf == 1){
  4334  0029  0020               	movlb	0	; select bank0
  4335  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4336  002B  1D03               	btfss	3,2
  4337  002C  282E               	goto	u252_21
  4338  002D  282F               	goto	u252_20
  4339  002E                     u252_21:
  4340  002E  2878               	goto	i1l2726
  4341  002F                     u252_20:
  4342  002F                     i1l2706:
  4343                           
  4344                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4345  002F  01F0               	clrf	i1writeGPIO@writeValue
  4346  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4347  0031  300D               	movlw	13
  4348  0032  3186  26D6  3180   	fcall	i1_writeGPIO
  4349  0035                     i1l2708:
  4350                           
  4351                           ;main.c: 67:             filteredIL = readFilteredIL();
  4352  0035  318E  2698  3180   	fcall	_readFilteredIL
  4353  0038  0871               	movf	?_readFilteredIL+1,w
  4354  0039  0021               	movlb	1	; select bank1
  4355  003A  00B1               	movwf	(_filteredIL+1)^(0+128)
  4356  003B  0870               	movf	?_readFilteredIL,w
  4357  003C  00B0               	movwf	_filteredIL^(0+128)
  4358  003D                     i1l2710:
  4359                           
  4360                           ;main.c: 69:             filteredVout = readFilteredVout();
  4361  003D  3187  2735  3180   	fcall	_readFilteredVout
  4362  0040  087B               	movf	?_readFilteredVout+1,w
  4363  0041  0020               	movlb	0	; select bank0
  4364  0042  00E0               	movwf	_filteredVout+1
  4365  0043  087A               	movf	?_readFilteredVout,w
  4366  0044  00DF               	movwf	_filteredVout
  4367  0045                     i1l2712:
  4368                           
  4369                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4370  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4371  0046  1D03               	btfss	3,2
  4372  0047  2849               	goto	u253_21
  4373  0048  284A               	goto	u253_20
  4374  0049                     u253_21:
  4375  0049  284D               	goto	i1l2716
  4376  004A                     u253_20:
  4377  004A                     i1l2714:
  4378                           
  4379                           ;main.c: 74:                 runPotScaling();
  4380  004A  3183  2313  3180   	fcall	_runPotScaling
  4381  004D                     i1l2716:
  4382                           
  4383                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4384  004D  0020               	movlb	0	; select bank0
  4385  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4386  004F  1D03               	btfss	3,2
  4387  0050  2852               	goto	u254_21
  4388  0051  2853               	goto	u254_20
  4389  0052                     u254_21:
  4390  0052  2863               	goto	i1l2720
  4391  0053                     u254_20:
  4392  0053                     i1l2718:
  4393                           
  4394                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4395  0053  318F  27A5  3180   	fcall	_readFilteredDutyPot
  4396  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4397  0057  0021               	movlb	1	; select bank1
  4398  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4399  0059  087A               	movf	?_readFilteredDutyPot,w
  4400  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4401                           
  4402                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4403  005B  3187  2790  3180   	fcall	_readFilteredFreqPot
  4404  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4405  005F  0021               	movlb	1	; select bank1
  4406  0060  00AF               	movwf	(_filteredFreqPot+1)^(0+128)
  4407  0061  087A               	movf	?_readFilteredFreqPot,w
  4408  0062  00AE               	movwf	_filteredFreqPot^(0+128)
  4409  0063                     i1l2720:
  4410                           
  4411                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4412  0063  0020               	movlb	0	; select bank0
  4413  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4414  0065  1D03               	btfss	3,2
  4415  0066  2868               	goto	u255_21
  4416  0067  286A               	goto	u255_20
  4417  0068                     u255_21:
  4418  0068  3001               	movlw	1
  4419  0069  286B               	goto	u256_20
  4420  006A                     u255_20:
  4421  006A  3000               	movlw	0
  4422  006B                     u256_20:
  4423  006B  00DE               	movwf	??_Tick490Hz
  4424  006C  085E               	movf	??_Tick490Hz,w
  4425  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4426  006E                     i1l2722:
  4427                           
  4428                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4429  006E  01F0               	clrf	i1writeGPIO@writeValue
  4430  006F  300C               	movlw	12
  4431  0070  3186  26D6  3180   	fcall	i1_writeGPIO
  4432  0073                     i1l2724:
  4433                           
  4434                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4435  0073  01F0               	clrf	i1writeGPIO@writeValue
  4436  0074  300D               	movlw	13
  4437  0075  3186  26D6  3180   	fcall	i1_writeGPIO
  4438  0078                     i1l2726:
  4439                           
  4440                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4441  0078  0020               	movlb	0	; select bank0
  4442  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4443  007A  1D03               	btfss	3,2
  4444  007B  287D               	goto	u257_21
  4445  007C  287F               	goto	u257_20
  4446  007D                     u257_21:
  4447  007D  3001               	movlw	1
  4448  007E  2880               	goto	u258_20
  4449  007F                     u257_20:
  4450  007F  3000               	movlw	0
  4451  0080                     u258_20:
  4452  0080  00DE               	movwf	??_Tick490Hz
  4453  0081  085E               	movf	??_Tick490Hz,w
  4454  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4455  0083                     i1l2728:
  4456                           
  4457                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4458  0083  110B               	bcf	11,2	;volatile
  4459  0084                     i1l108:
  4460  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4461  0085  0009               	retfie
  4462  0086                     __end_of_Tick490Hz:
  4463                           
  4464                           	psect	text17
  4465  0CC0                     __ptext17:	
  4466 ;; *************** function _setPWMDutyandPeriod *****************
  4467 ;; Defined at:
  4468 ;;		line 49 in file "PWM.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4471 ;;  period          1    2[COMMON] unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4483 ;;      Params:         3       0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0
  4485 ;;      Temps:          2       0       0       0       0       0
  4486 ;;      Totals:         5       0       0       0       0       0
  4487 ;;Total ram usage:        5 bytes
  4488 ;; Hardware stack levels used: 1
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_Tick490Hz
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496  0CC0                     _setPWMDutyandPeriod:	
  4497                           ;psect for function _setPWMDutyandPeriod
  4498                           
  4499  0CC0                     i1l2350:	
  4500                           ;incstack = 0
  4501                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4502                           
  4503                           
  4504                           ;PWM.c: 50:     PR2 = period;
  4505  0CC0  0872               	movf	setPWMDutyandPeriod@period,w
  4506  0CC1  0020               	movlb	0	; select bank0
  4507  0CC2  009B               	movwf	27	;volatile
  4508  0CC3                     i1l2352:
  4509                           
  4510                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4511  0CC3  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4512  0CC4  00F4               	movwf	??_setPWMDutyandPeriod+1
  4513  0CC5  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4514  0CC6  00F3               	movwf	??_setPWMDutyandPeriod
  4515  0CC7  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4516  0CC8  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4517  0CC9  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4518  0CCA  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4519  0CCB  0873               	movf	??_setPWMDutyandPeriod,w
  4520  0CCC  0025               	movlb	5	; select bank5
  4521  0CCD  0091               	movwf	17	;volatile
  4522  0CCE                     i1l2354:
  4523                           
  4524                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4525  0CCE  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4526  0CCF  3901               	andlw	1
  4527  0CD0  00F3               	movwf	??_setPWMDutyandPeriod
  4528  0CD1  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4529  0CD2  0813               	movf	19,w	;volatile
  4530  0CD3  0673               	xorwf	??_setPWMDutyandPeriod,w
  4531  0CD4  39EF               	andlw	-17
  4532  0CD5  0673               	xorwf	??_setPWMDutyandPeriod,w
  4533  0CD6  0093               	movwf	19	;volatile
  4534                           
  4535                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4536  0CD7  3002               	movlw	2
  4537  0CD8  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4538  0CD9  00F3               	movwf	??_setPWMDutyandPeriod
  4539  0CDA  3000               	movlw	0
  4540  0CDB  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4541  0CDC  00F4               	movwf	??_setPWMDutyandPeriod+1
  4542  0CDD  3000               	movlw	0
  4543  0CDE  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4544  0CDF  3002               	movlw	2
  4545  0CE0  1903               	skipnz
  4546  0CE1  0273               	subwf	??_setPWMDutyandPeriod,w
  4547  0CE2  1803               	skipnc
  4548  0CE3  2CE5               	goto	u219_21
  4549  0CE4  2CE8               	goto	u219_20
  4550  0CE5                     u219_21:
  4551  0CE5  0025               	movlb	5	; select bank5
  4552  0CE6  1693               	bsf	19,5	;volatile
  4553  0CE7  2CEA               	goto	u220_24
  4554  0CE8                     u219_20:
  4555  0CE8  0025               	movlb	5	; select bank5
  4556  0CE9  1293               	bcf	19,5	;volatile
  4557  0CEA                     u220_24:
  4558  0CEA                     i1l175:
  4559  0CEA  0008               	return
  4560  0CEB                     __end_of_setPWMDutyandPeriod:
  4561                           
  4562                           	psect	text18
  4563  0313                     __ptext18:	
  4564 ;; *************** function _runPotScaling *****************
  4565 ;; Defined at:
  4566 ;;		line 55 in file "Potentiometer.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4571 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0, pclath, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4581 ;;      Params:         0       0       0       0       0       0
  4582 ;;      Locals:         0       4       0       0       0       0
  4583 ;;      Temps:          0       8       0       0       0       0
  4584 ;;      Totals:         0      12       0       0       0       0
  4585 ;;Total ram usage:       12 bytes
  4586 ;; Hardware stack levels used: 1
  4587 ;; Hardware stack levels required when called: 1
  4588 ;; This function calls:
  4589 ;;		___lldiv
  4590 ;;		___lmul
  4591 ;;		___wmul
  4592 ;; This function is called by:
  4593 ;;		_Tick490Hz
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597  0313                     _runPotScaling:	
  4598                           ;psect for function _runPotScaling
  4599                           
  4600  0313                     i1l2450:	
  4601                           ;incstack = 0
  4602                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4603                           
  4604                           
  4605                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4606  0313  0020               	movlb	0	; select bank0
  4607  0314  036C               	decf	_currentState,w
  4608  0315  1D03               	btfss	3,2
  4609  0316  2B18               	goto	u234_21
  4610  0317  2B19               	goto	u234_20
  4611  0318                     u234_21:
  4612  0318  2BFE               	goto	i1l377
  4613  0319                     u234_20:
  4614  0319                     i1l2452:
  4615                           
  4616                           ;Potentiometer.c: 58:         potSetCount++;
  4617  0319  3001               	movlw	1
  4618  031A  00A6               	movwf	??_runPotScaling
  4619  031B  0826               	movf	??_runPotScaling,w
  4620  031C  07E8               	addwf	_potSetCount,f
  4621                           
  4622                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4623  031D  3020               	movlw	32
  4624  031E  0668               	xorwf	_potSetCount,w
  4625  031F  1D03               	btfss	3,2
  4626  0320  2B22               	goto	u235_21
  4627  0321  2B23               	goto	u235_20
  4628  0322                     u235_21:
  4629  0322  2BFE               	goto	i1l377
  4630  0323                     u235_20:
  4631  0323                     i1l2454:
  4632                           
  4633                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 51) * (uint
      +                          32_t)(180u - 15u)) >> 10 ) + 15u;
  4634  0323  0021               	movlb	1	; select bank1
  4635  0324  082E               	movf	_filteredFreqPot^(0+128),w
  4636  0325  3ECD               	addlw	205
  4637  0326  00F0               	movwf	___lmul@multiplier
  4638  0327  30FF               	movlw	255
  4639  0328  3D2F               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4640  0329  00F1               	movwf	___lmul@multiplier+1
  4641  032A  01F2               	clrf	___lmul@multiplier+2
  4642  032B  01F3               	clrf	___lmul@multiplier+3
  4643  032C  3000               	movlw	0
  4644  032D  00F7               	movwf	___lmul@multiplicand+3
  4645  032E  3000               	movlw	0
  4646  032F  00F6               	movwf	___lmul@multiplicand+2
  4647  0330  3000               	movlw	0
  4648  0331  00F5               	movwf	___lmul@multiplicand+1
  4649  0332  30A5               	movlw	165
  4650  0333  00F4               	movwf	___lmul@multiplicand
  4651  0334  318D  2518  3183   	fcall	___lmul
  4652  0337  0870               	movf	?___lmul,w
  4653  0338  0020               	movlb	0	; select bank0
  4654  0339  00A6               	movwf	??_runPotScaling
  4655  033A  0871               	movf	?___lmul+1,w
  4656  033B  00A7               	movwf	??_runPotScaling+1
  4657  033C  0872               	movf	?___lmul+2,w
  4658  033D  00A8               	movwf	??_runPotScaling+2
  4659  033E  0873               	movf	?___lmul+3,w
  4660  033F  00A9               	movwf	??_runPotScaling+3
  4661  0340  300A               	movlw	10
  4662  0341                     u236_25:
  4663  0341  36A9               	lsrf	??_runPotScaling+3,f
  4664  0342  0CA8               	rrf	??_runPotScaling+2,f
  4665  0343  0CA7               	rrf	??_runPotScaling+1,f
  4666  0344  0CA6               	rrf	??_runPotScaling,f
  4667  0345                     u236_20:
  4668  0345  0B89               	decfsz	9,f
  4669  0346  2B41               	goto	u236_25
  4670  0347  0826               	movf	??_runPotScaling,w
  4671  0348  3E0F               	addlw	15
  4672  0349  00AA               	movwf	??_runPotScaling+4
  4673  034A  082A               	movf	??_runPotScaling+4,w
  4674  034B  00EE               	movwf	_setPeriod
  4675                           
  4676                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-51) *
      +                           (uint32_t)setPeriod )) >> 8;
  4677  034C  0021               	movlb	1	; select bank1
  4678  034D  082C               	movf	_filteredDutyPot^(0+128),w
  4679  034E  3ECD               	addlw	205
  4680  034F  00F0               	movwf	___lmul@multiplier
  4681  0350  30FF               	movlw	255
  4682  0351  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4683  0352  00F1               	movwf	___lmul@multiplier+1
  4684  0353  01F2               	clrf	___lmul@multiplier+2
  4685  0354  01F3               	clrf	___lmul@multiplier+3
  4686  0355  0020               	movlb	0	; select bank0
  4687  0356  086E               	movf	_setPeriod,w
  4688  0357  00A6               	movwf	??_runPotScaling
  4689  0358  01A7               	clrf	??_runPotScaling+1
  4690  0359  01A8               	clrf	??_runPotScaling+2
  4691  035A  01A9               	clrf	??_runPotScaling+3
  4692  035B  0829               	movf	??_runPotScaling+3,w
  4693  035C  00F7               	movwf	___lmul@multiplicand+3
  4694  035D  0828               	movf	??_runPotScaling+2,w
  4695  035E  00F6               	movwf	___lmul@multiplicand+2
  4696  035F  0827               	movf	??_runPotScaling+1,w
  4697  0360  00F5               	movwf	___lmul@multiplicand+1
  4698  0361  0826               	movf	??_runPotScaling,w
  4699  0362  00F4               	movwf	___lmul@multiplicand
  4700  0363  318D  2518  3183   	fcall	___lmul
  4701  0366  0870               	movf	?___lmul,w
  4702  0367  0020               	movlb	0	; select bank0
  4703  0368  00AA               	movwf	??_runPotScaling+4
  4704  0369  0871               	movf	?___lmul+1,w
  4705  036A  00AB               	movwf	??_runPotScaling+5
  4706  036B  0872               	movf	?___lmul+2,w
  4707  036C  00AC               	movwf	??_runPotScaling+6
  4708  036D  0873               	movf	?___lmul+3,w
  4709  036E  00AD               	movwf	??_runPotScaling+7
  4710  036F  3008               	movlw	8
  4711  0370                     u237_25:
  4712  0370  36AD               	lsrf	??_runPotScaling+7,f
  4713  0371  0CAC               	rrf	??_runPotScaling+6,f
  4714  0372  0CAB               	rrf	??_runPotScaling+5,f
  4715  0373  0CAA               	rrf	??_runPotScaling+4,f
  4716  0374                     u237_20:
  4717  0374  0B89               	decfsz	9,f
  4718  0375  2B70               	goto	u237_25
  4719  0376  082B               	movf	??_runPotScaling+5,w
  4720  0377  00E4               	movwf	_setDuty+1
  4721  0378  082A               	movf	??_runPotScaling+4,w
  4722  0379  00E3               	movwf	_setDuty
  4723  037A                     i1l2456:
  4724                           
  4725                           ;Potentiometer.c: 65:             setDuty = (4*setPeriod) - setDuty;
  4726  037A  086E               	movf	_setPeriod,w
  4727  037B  00A6               	movwf	??_runPotScaling
  4728  037C  01A7               	clrf	??_runPotScaling+1
  4729  037D  35A6               	lslf	??_runPotScaling,f
  4730  037E  0DA7               	rlf	??_runPotScaling+1,f
  4731  037F  35A6               	lslf	??_runPotScaling,f
  4732  0380  0DA7               	rlf	??_runPotScaling+1,f
  4733  0381  0863               	movf	_setDuty,w
  4734  0382  0226               	subwf	??_runPotScaling,w
  4735  0383  00E3               	movwf	_setDuty
  4736  0384  0864               	movf	_setDuty+1,w
  4737  0385  3B27               	subwfb	??_runPotScaling+1,w
  4738  0386  00E4               	movwf	_setDuty+1
  4739  0387                     i1l2458:
  4740                           
  4741                           ;Potentiometer.c: 68:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4742  0387  3000               	movlw	0
  4743  0388  00F9               	movwf	___lldiv@divisor+3
  4744  0389  3000               	movlw	0
  4745  038A  00F8               	movwf	___lldiv@divisor+2
  4746  038B  3000               	movlw	0
  4747  038C  00F7               	movwf	___lldiv@divisor+1
  4748  038D  3019               	movlw	25
  4749  038E  00F6               	movwf	___lldiv@divisor
  4750  038F  305A               	movlw	90
  4751  0390  00F2               	movwf	___wmul@multiplicand
  4752  0391  3000               	movlw	0
  4753  0392  00F3               	movwf	___wmul@multiplicand+1
  4754  0393  086E               	movf	_setPeriod,w
  4755  0394  00A6               	movwf	??_runPotScaling
  4756  0395  01A7               	clrf	??_runPotScaling+1
  4757  0396  0826               	movf	??_runPotScaling,w
  4758  0397  00F0               	movwf	___wmul@multiplier
  4759  0398  0827               	movf	??_runPotScaling+1,w
  4760  0399  00F1               	movwf	___wmul@multiplier+1
  4761  039A  318C  245D  3183   	fcall	___wmul
  4762  039D  0870               	movf	?___wmul,w
  4763  039E  0020               	movlb	0	; select bank0
  4764  039F  00A8               	movwf	??_runPotScaling+2
  4765  03A0  0871               	movf	?___wmul+1,w
  4766  03A1  00A9               	movwf	??_runPotScaling+3
  4767  03A2  01AA               	clrf	??_runPotScaling+4
  4768  03A3  01AB               	clrf	??_runPotScaling+5
  4769  03A4  082B               	movf	??_runPotScaling+5,w
  4770  03A5  00FD               	movwf	___lldiv@dividend+3
  4771  03A6  082A               	movf	??_runPotScaling+4,w
  4772  03A7  00FC               	movwf	___lldiv@dividend+2
  4773  03A8  0829               	movf	??_runPotScaling+3,w
  4774  03A9  00FB               	movwf	___lldiv@dividend+1
  4775  03AA  0828               	movf	??_runPotScaling+2,w
  4776  03AB  00FA               	movwf	___lldiv@dividend
  4777  03AC  318F  274A  3183   	fcall	___lldiv
  4778  03AF  0877               	movf	?___lldiv+1,w
  4779  03B0  0020               	movlb	0	; select bank0
  4780  03B1  00AF               	movwf	runPotScaling@maxDuty+1
  4781  03B2  0876               	movf	?___lldiv,w
  4782  03B3  00AE               	movwf	runPotScaling@maxDuty
  4783  03B4                     i1l2460:
  4784                           
  4785                           ;Potentiometer.c: 69:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4786  03B4  3000               	movlw	0
  4787  03B5  00F9               	movwf	___lldiv@divisor+3
  4788  03B6  3000               	movlw	0
  4789  03B7  00F8               	movwf	___lldiv@divisor+2
  4790  03B8  3000               	movlw	0
  4791  03B9  00F7               	movwf	___lldiv@divisor+1
  4792  03BA  3019               	movlw	25
  4793  03BB  00F6               	movwf	___lldiv@divisor
  4794  03BC  300A               	movlw	10
  4795  03BD  00F2               	movwf	___wmul@multiplicand
  4796  03BE  3000               	movlw	0
  4797  03BF  00F3               	movwf	___wmul@multiplicand+1
  4798  03C0  086E               	movf	_setPeriod,w
  4799  03C1  00A6               	movwf	??_runPotScaling
  4800  03C2  01A7               	clrf	??_runPotScaling+1
  4801  03C3  0826               	movf	??_runPotScaling,w
  4802  03C4  00F0               	movwf	___wmul@multiplier
  4803  03C5  0827               	movf	??_runPotScaling+1,w
  4804  03C6  00F1               	movwf	___wmul@multiplier+1
  4805  03C7  318C  245D  3183   	fcall	___wmul
  4806  03CA  0870               	movf	?___wmul,w
  4807  03CB  0020               	movlb	0	; select bank0
  4808  03CC  00A8               	movwf	??_runPotScaling+2
  4809  03CD  0871               	movf	?___wmul+1,w
  4810  03CE  00A9               	movwf	??_runPotScaling+3
  4811  03CF  01AA               	clrf	??_runPotScaling+4
  4812  03D0  01AB               	clrf	??_runPotScaling+5
  4813  03D1  082B               	movf	??_runPotScaling+5,w
  4814  03D2  00FD               	movwf	___lldiv@dividend+3
  4815  03D3  082A               	movf	??_runPotScaling+4,w
  4816  03D4  00FC               	movwf	___lldiv@dividend+2
  4817  03D5  0829               	movf	??_runPotScaling+3,w
  4818  03D6  00FB               	movwf	___lldiv@dividend+1
  4819  03D7  0828               	movf	??_runPotScaling+2,w
  4820  03D8  00FA               	movwf	___lldiv@dividend
  4821  03D9  318F  274A  3183   	fcall	___lldiv
  4822  03DC  0877               	movf	?___lldiv+1,w
  4823  03DD  0020               	movlb	0	; select bank0
  4824  03DE  00B1               	movwf	runPotScaling@minDuty+1
  4825  03DF  0876               	movf	?___lldiv,w
  4826  03E0  00B0               	movwf	runPotScaling@minDuty
  4827  03E1                     i1l2462:
  4828                           
  4829                           ;Potentiometer.c: 70:             if(setDuty > maxDuty) setDuty = maxDuty;
  4830  03E1  0864               	movf	_setDuty+1,w
  4831  03E2  022F               	subwf	runPotScaling@maxDuty+1,w
  4832  03E3  1D03               	skipz
  4833  03E4  2BE7               	goto	u238_25
  4834  03E5  0863               	movf	_setDuty,w
  4835  03E6  022E               	subwf	runPotScaling@maxDuty,w
  4836  03E7                     u238_25:
  4837  03E7  1803               	skipnc
  4838  03E8  2BEA               	goto	u238_21
  4839  03E9  2BEB               	goto	u238_20
  4840  03EA                     u238_21:
  4841  03EA  2BEF               	goto	i1l375
  4842  03EB                     u238_20:
  4843  03EB                     i1l2464:
  4844  03EB  082F               	movf	runPotScaling@maxDuty+1,w
  4845  03EC  00E4               	movwf	_setDuty+1
  4846  03ED  082E               	movf	runPotScaling@maxDuty,w
  4847  03EE  00E3               	movwf	_setDuty
  4848  03EF                     i1l375:
  4849                           
  4850                           ;Potentiometer.c: 71:             if(setDuty < minDuty) setDuty = minDuty;
  4851  03EF  0831               	movf	runPotScaling@minDuty+1,w
  4852  03F0  0264               	subwf	_setDuty+1,w
  4853  03F1  1D03               	skipz
  4854  03F2  2BF5               	goto	u239_25
  4855  03F3  0830               	movf	runPotScaling@minDuty,w
  4856  03F4  0263               	subwf	_setDuty,w
  4857  03F5                     u239_25:
  4858  03F5  1803               	skipnc
  4859  03F6  2BF8               	goto	u239_21
  4860  03F7  2BF9               	goto	u239_20
  4861  03F8                     u239_21:
  4862  03F8  2BFD               	goto	i1l2468
  4863  03F9                     u239_20:
  4864  03F9                     i1l2466:
  4865  03F9  0831               	movf	runPotScaling@minDuty+1,w
  4866  03FA  00E4               	movwf	_setDuty+1
  4867  03FB  0830               	movf	runPotScaling@minDuty,w
  4868  03FC  00E3               	movwf	_setDuty
  4869  03FD                     i1l2468:
  4870                           
  4871                           ;Potentiometer.c: 73:             potSetCount = 0;
  4872  03FD  01E8               	clrf	_potSetCount
  4873  03FE                     i1l377:
  4874  03FE  0008               	return
  4875  03FF                     __end_of_runPotScaling:
  4876                           
  4877                           	psect	text19
  4878  0735                     __ptext19:	
  4879 ;; *************** function _readFilteredVout *****************
  4880 ;; Defined at:
  4881 ;;		line 39 in file "Controller.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  i               1    8[BANK0 ] unsigned char 
  4886 ;;  i               1    9[BANK0 ] unsigned char 
  4887 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  2   10[COMMON] unsigned short 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4897 ;;      Params:         2       0       0       0       0       0
  4898 ;;      Locals:         0       6       0       0       0       0
  4899 ;;      Temps:          0       4       0       0       0       0
  4900 ;;      Totals:         2      10       0       0       0       0
  4901 ;;Total ram usage:       12 bytes
  4902 ;; Hardware stack levels used: 1
  4903 ;; Hardware stack levels required when called: 1
  4904 ;; This function calls:
  4905 ;;		_readADCRaw
  4906 ;; This function is called by:
  4907 ;;		_Tick490Hz
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911  0735                     _readFilteredVout:	
  4912                           ;psect for function _readFilteredVout
  4913                           
  4914  0735                     i1l2418:	
  4915                           ;incstack = 0
  4916                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4917                           
  4918                           
  4919                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4920  0735  0020               	movlb	0	; select bank0
  4921  0736  01A9               	clrf	readFilteredVout@i
  4922  0737                     i1l2424:
  4923  0737  3529               	lslf	readFilteredVout@i,w
  4924  0738  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4925  0739  0086               	movwf	6
  4926  073A  3001               	movlw	1	; select bank3/4
  4927  073B  0087               	movwf	7
  4928  073C  3529               	lslf	readFilteredVout@i,w
  4929  073D  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4930  073E  0084               	movwf	4
  4931  073F  3001               	movlw	1	; select bank3/4
  4932  0740  0085               	movwf	5
  4933  0741  3F40               	moviw [0]fsr1
  4934  0742  3F80               	movwi [0]fsr0
  4935  0743  3F41               	moviw [1]fsr1
  4936  0744  3F81               	movwi [1]fsr0
  4937  0745                     i1l2426:
  4938  0745  3001               	movlw	1
  4939  0746  00A0               	movwf	??_readFilteredVout
  4940  0747  0820               	movf	??_readFilteredVout,w
  4941  0748  07A9               	addwf	readFilteredVout@i,f
  4942  0749                     i1l2428:
  4943  0749  300F               	movlw	15
  4944  074A  0229               	subwf	readFilteredVout@i,w
  4945  074B  1C03               	skipc
  4946  074C  2F4E               	goto	u231_21
  4947  074D  2F4F               	goto	u231_20
  4948  074E                     u231_21:
  4949  074E  2F37               	goto	i1l2424
  4950  074F                     u231_20:
  4951  074F                     i1l2430:
  4952                           
  4953                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  4954  074F  3004               	movlw	4
  4955  0750  318E  26F0  3187   	fcall	_readADCRaw
  4956  0753  0871               	movf	?_readADCRaw+1,w
  4957  0754  0023               	movlb	3	; select bank3
  4958  0755  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  4959  0756  0870               	movf	?_readADCRaw,w
  4960  0757  00DE               	movwf	(_voutFIFO^(0+384)+30)
  4961  0758                     i1l2432:
  4962                           
  4963                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  4964  0758  3000               	movlw	0
  4965  0759  0020               	movlb	0	; select bank0
  4966  075A  00A7               	movwf	readFilteredVout@sumOfSamples+3
  4967  075B  3000               	movlw	0
  4968  075C  00A6               	movwf	readFilteredVout@sumOfSamples+2
  4969  075D  3000               	movlw	0
  4970  075E  00A5               	movwf	readFilteredVout@sumOfSamples+1
  4971  075F  3000               	movlw	0
  4972  0760  00A4               	movwf	readFilteredVout@sumOfSamples
  4973  0761                     i1l2434:
  4974                           
  4975                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  4976  0761  01A8               	clrf	readFilteredVout@i_831
  4977  0762                     i1l2440:
  4978  0762  3528               	lslf	readFilteredVout@i_831,w
  4979  0763  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4980  0764  0086               	movwf	6
  4981  0765  3001               	movlw	1	; select bank3/4
  4982  0766  0087               	movwf	7
  4983  0767  3F40               	moviw [0]fsr1
  4984  0768  00A0               	movwf	??_readFilteredVout
  4985  0769  3F41               	moviw [1]fsr1
  4986  076A  00A1               	movwf	??_readFilteredVout+1
  4987  076B  0820               	movf	??_readFilteredVout,w
  4988  076C  07A4               	addwf	readFilteredVout@sumOfSamples,f
  4989  076D  0821               	movf	??_readFilteredVout+1,w
  4990  076E  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  4991  076F  3000               	movlw	0
  4992  0770  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  4993  0771  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  4994  0772                     i1l2442:
  4995  0772  3001               	movlw	1
  4996  0773  00A0               	movwf	??_readFilteredVout
  4997  0774  0820               	movf	??_readFilteredVout,w
  4998  0775  07A8               	addwf	readFilteredVout@i_831,f
  4999  0776                     i1l2444:
  5000  0776  3010               	movlw	16
  5001  0777  0228               	subwf	readFilteredVout@i_831,w
  5002  0778  1C03               	skipc
  5003  0779  2F7B               	goto	u232_21
  5004  077A  2F7C               	goto	u232_20
  5005  077B                     u232_21:
  5006  077B  2F62               	goto	i1l2440
  5007  077C                     u232_20:
  5008  077C                     i1l2446:
  5009                           
  5010                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  5011  077C  0824               	movf	readFilteredVout@sumOfSamples,w
  5012  077D  00A0               	movwf	??_readFilteredVout
  5013  077E  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5014  077F  00A1               	movwf	??_readFilteredVout+1
  5015  0780  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5016  0781  00A2               	movwf	??_readFilteredVout+2
  5017  0782  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5018  0783  00A3               	movwf	??_readFilteredVout+3
  5019  0784  3004               	movlw	4
  5020  0785                     u233_25:
  5021  0785  36A3               	lsrf	??_readFilteredVout+3,f
  5022  0786  0CA2               	rrf	??_readFilteredVout+2,f
  5023  0787  0CA1               	rrf	??_readFilteredVout+1,f
  5024  0788  0CA0               	rrf	??_readFilteredVout,f
  5025  0789                     u233_20:
  5026  0789  0B89               	decfsz	9,f
  5027  078A  2F85               	goto	u233_25
  5028  078B  0821               	movf	??_readFilteredVout+1,w
  5029  078C  00FB               	movwf	?_readFilteredVout+1
  5030  078D  0820               	movf	??_readFilteredVout,w
  5031  078E  00FA               	movwf	?_readFilteredVout
  5032  078F                     i1l435:
  5033  078F  0008               	return
  5034  0790                     __end_of_readFilteredVout:
  5035                           
  5036                           	psect	text20
  5037  0E98                     __ptext20:	
  5038 ;; *************** function _readFilteredIL *****************
  5039 ;; Defined at:
  5040 ;;		line 56 in file "CurrentSensor.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;		None
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  i               1   10[COMMON] unsigned char 
  5045 ;;  i               1   11[COMMON] unsigned char 
  5046 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  2    0[COMMON] unsigned short 
  5049 ;; Registers used:
  5050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5056 ;;      Params:         2       0       0       0       0       0
  5057 ;;      Locals:         6       0       0       0       0       0
  5058 ;;      Temps:          4       0       0       0       0       0
  5059 ;;      Totals:        12       0       0       0       0       0
  5060 ;;Total ram usage:       12 bytes
  5061 ;; Hardware stack levels used: 1
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_Tick490Hz
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069  0E98                     _readFilteredIL:	
  5070                           ;psect for function _readFilteredIL
  5071                           
  5072  0E98                     i1l2388:	
  5073                           ;incstack = 0
  5074                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5075                           
  5076                           
  5077                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5078  0E98  01FB               	clrf	readFilteredIL@i
  5079  0E99                     i1l2394:
  5080  0E99  357B               	lslf	readFilteredIL@i,w
  5081  0E9A  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5082  0E9B  0086               	movwf	6
  5083  0E9C  3001               	movlw	1	; select bank2/3
  5084  0E9D  0087               	movwf	7
  5085  0E9E  357B               	lslf	readFilteredIL@i,w
  5086  0E9F  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5087  0EA0  0084               	movwf	4
  5088  0EA1  3001               	movlw	1	; select bank2/3
  5089  0EA2  0085               	movwf	5
  5090  0EA3  3F40               	moviw [0]fsr1
  5091  0EA4  3F80               	movwi [0]fsr0
  5092  0EA5  3F41               	moviw [1]fsr1
  5093  0EA6  3F81               	movwi [1]fsr0
  5094  0EA7                     i1l2396:
  5095  0EA7  3001               	movlw	1
  5096  0EA8  00F2               	movwf	??_readFilteredIL
  5097  0EA9  0872               	movf	??_readFilteredIL,w
  5098  0EAA  07FB               	addwf	readFilteredIL@i,f
  5099  0EAB                     i1l2398:
  5100  0EAB  300F               	movlw	15
  5101  0EAC  027B               	subwf	readFilteredIL@i,w
  5102  0EAD  1C03               	skipc
  5103  0EAE  2EB0               	goto	u228_21
  5104  0EAF  2EB1               	goto	u228_20
  5105  0EB0                     u228_21:
  5106  0EB0  2E99               	goto	i1l2394
  5107  0EB1                     u228_20:
  5108  0EB1                     i1l2400:
  5109                           
  5110                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5111  0EB1  0020               	movlb	0	; select bank0
  5112  0EB2  0862               	movf	_latestIL+1,w	;volatile
  5113  0EB3  0022               	movlb	2	; select bank2
  5114  0EB4  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5115  0EB5  0020               	movlb	0	; select bank0
  5116  0EB6  0861               	movf	_latestIL,w	;volatile
  5117  0EB7  0022               	movlb	2	; select bank2
  5118  0EB8  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5119                           
  5120                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5121  0EB9  3000               	movlw	0
  5122  0EBA  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5123  0EBB  3000               	movlw	0
  5124  0EBC  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5125  0EBD  3000               	movlw	0
  5126  0EBE  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5127  0EBF  3000               	movlw	0
  5128  0EC0  00F6               	movwf	readFilteredIL@sumOfSamples
  5129  0EC1                     i1l2402:
  5130                           
  5131                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5132  0EC1  01FA               	clrf	readFilteredIL@i_921
  5133  0EC2                     i1l2408:
  5134  0EC2  357A               	lslf	readFilteredIL@i_921,w
  5135  0EC3  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5136  0EC4  0086               	movwf	6
  5137  0EC5  3001               	movlw	1	; select bank2/3
  5138  0EC6  0087               	movwf	7
  5139  0EC7  3F40               	moviw [0]fsr1
  5140  0EC8  00F2               	movwf	??_readFilteredIL
  5141  0EC9  3F41               	moviw [1]fsr1
  5142  0ECA  00F3               	movwf	??_readFilteredIL+1
  5143  0ECB  0872               	movf	??_readFilteredIL,w
  5144  0ECC  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5145  0ECD  0873               	movf	??_readFilteredIL+1,w
  5146  0ECE  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5147  0ECF  3000               	movlw	0
  5148  0ED0  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5149  0ED1  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5150  0ED2                     i1l2410:
  5151  0ED2  3001               	movlw	1
  5152  0ED3  00F2               	movwf	??_readFilteredIL
  5153  0ED4  0872               	movf	??_readFilteredIL,w
  5154  0ED5  07FA               	addwf	readFilteredIL@i_921,f
  5155  0ED6                     i1l2412:
  5156  0ED6  3010               	movlw	16
  5157  0ED7  027A               	subwf	readFilteredIL@i_921,w
  5158  0ED8  1C03               	skipc
  5159  0ED9  2EDB               	goto	u229_21
  5160  0EDA  2EDC               	goto	u229_20
  5161  0EDB                     u229_21:
  5162  0EDB  2EC2               	goto	i1l2408
  5163  0EDC                     u229_20:
  5164  0EDC                     i1l2414:
  5165                           
  5166                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5167  0EDC  0876               	movf	readFilteredIL@sumOfSamples,w
  5168  0EDD  00F2               	movwf	??_readFilteredIL
  5169  0EDE  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5170  0EDF  00F3               	movwf	??_readFilteredIL+1
  5171  0EE0  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5172  0EE1  00F4               	movwf	??_readFilteredIL+2
  5173  0EE2  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5174  0EE3  00F5               	movwf	??_readFilteredIL+3
  5175  0EE4  3004               	movlw	4
  5176  0EE5                     u230_25:
  5177  0EE5  36F5               	lsrf	??_readFilteredIL+3,f
  5178  0EE6  0CF4               	rrf	??_readFilteredIL+2,f
  5179  0EE7  0CF3               	rrf	??_readFilteredIL+1,f
  5180  0EE8  0CF2               	rrf	??_readFilteredIL,f
  5181  0EE9                     u230_20:
  5182  0EE9  0B89               	decfsz	9,f
  5183  0EEA  2EE5               	goto	u230_25
  5184  0EEB  0873               	movf	??_readFilteredIL+1,w
  5185  0EEC  00F1               	movwf	?_readFilteredIL+1
  5186  0EED  0872               	movf	??_readFilteredIL,w
  5187  0EEE  00F0               	movwf	?_readFilteredIL
  5188  0EEF                     i1l529:
  5189  0EEF  0008               	return
  5190  0EF0                     __end_of_readFilteredIL:
  5191                           
  5192                           	psect	text21
  5193  0790                     __ptext21:	
  5194 ;; *************** function _readFilteredFreqPot *****************
  5195 ;; Defined at:
  5196 ;;		line 39 in file "Potentiometer.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;		None
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  i               1    8[BANK0 ] unsigned char 
  5201 ;;  i               1    9[BANK0 ] unsigned char 
  5202 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  2   10[COMMON] unsigned short 
  5205 ;; Registers used:
  5206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5212 ;;      Params:         2       0       0       0       0       0
  5213 ;;      Locals:         0       6       0       0       0       0
  5214 ;;      Temps:          0       4       0       0       0       0
  5215 ;;      Totals:         2      10       0       0       0       0
  5216 ;;Total ram usage:       12 bytes
  5217 ;; Hardware stack levels used: 1
  5218 ;; Hardware stack levels required when called: 1
  5219 ;; This function calls:
  5220 ;;		_readADCRaw
  5221 ;; This function is called by:
  5222 ;;		_Tick490Hz
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226  0790                     _readFilteredFreqPot:	
  5227                           ;psect for function _readFilteredFreqPot
  5228                           
  5229  0790                     i1l2502:	
  5230                           ;incstack = 0
  5231                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5232                           
  5233                           
  5234                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5235  0790  0020               	movlb	0	; select bank0
  5236  0791  01A9               	clrf	readFilteredFreqPot@i
  5237  0792                     i1l2508:
  5238  0792  3529               	lslf	readFilteredFreqPot@i,w
  5239  0793  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5240  0794  0086               	movwf	6
  5241  0795  3001               	movlw	1	; select bank3/4
  5242  0796  0087               	movwf	7
  5243  0797  3529               	lslf	readFilteredFreqPot@i,w
  5244  0798  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5245  0799  0084               	movwf	4
  5246  079A  3001               	movlw	1	; select bank3/4
  5247  079B  0085               	movwf	5
  5248  079C  3F40               	moviw [0]fsr1
  5249  079D  3F80               	movwi [0]fsr0
  5250  079E  3F41               	moviw [1]fsr1
  5251  079F  3F81               	movwi [1]fsr0
  5252  07A0                     i1l2510:
  5253  07A0  3001               	movlw	1
  5254  07A1  00A0               	movwf	??_readFilteredFreqPot
  5255  07A2  0820               	movf	??_readFilteredFreqPot,w
  5256  07A3  07A9               	addwf	readFilteredFreqPot@i,f
  5257  07A4                     i1l2512:
  5258  07A4  300F               	movlw	15
  5259  07A5  0229               	subwf	readFilteredFreqPot@i,w
  5260  07A6  1C03               	skipc
  5261  07A7  2FA9               	goto	u243_21
  5262  07A8  2FAA               	goto	u243_20
  5263  07A9                     u243_21:
  5264  07A9  2F92               	goto	i1l2508
  5265  07AA                     u243_20:
  5266  07AA                     i1l2514:
  5267                           
  5268                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5269  07AA  300A               	movlw	10
  5270  07AB  318E  26F0  3187   	fcall	_readADCRaw
  5271  07AE  0871               	movf	?_readADCRaw+1,w
  5272  07AF  0023               	movlb	3	; select bank3
  5273  07B0  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5274  07B1  0870               	movf	?_readADCRaw,w
  5275  07B2  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5276  07B3                     i1l2516:
  5277                           
  5278                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5279  07B3  3000               	movlw	0
  5280  07B4  0020               	movlb	0	; select bank0
  5281  07B5  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5282  07B6  3000               	movlw	0
  5283  07B7  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5284  07B8  3000               	movlw	0
  5285  07B9  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5286  07BA  3000               	movlw	0
  5287  07BB  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5288  07BC                     i1l2518:
  5289                           
  5290                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5291  07BC  01A8               	clrf	readFilteredFreqPot@i_754
  5292  07BD                     i1l2524:
  5293  07BD  3528               	lslf	readFilteredFreqPot@i_754,w
  5294  07BE  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5295  07BF  0086               	movwf	6
  5296  07C0  3001               	movlw	1	; select bank3/4
  5297  07C1  0087               	movwf	7
  5298  07C2  3F40               	moviw [0]fsr1
  5299  07C3  00A0               	movwf	??_readFilteredFreqPot
  5300  07C4  3F41               	moviw [1]fsr1
  5301  07C5  00A1               	movwf	??_readFilteredFreqPot+1
  5302  07C6  0820               	movf	??_readFilteredFreqPot,w
  5303  07C7  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5304  07C8  0821               	movf	??_readFilteredFreqPot+1,w
  5305  07C9  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5306  07CA  3000               	movlw	0
  5307  07CB  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5308  07CC  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5309  07CD                     i1l2526:
  5310  07CD  3001               	movlw	1
  5311  07CE  00A0               	movwf	??_readFilteredFreqPot
  5312  07CF  0820               	movf	??_readFilteredFreqPot,w
  5313  07D0  07A8               	addwf	readFilteredFreqPot@i_754,f
  5314  07D1                     i1l2528:
  5315  07D1  3010               	movlw	16
  5316  07D2  0228               	subwf	readFilteredFreqPot@i_754,w
  5317  07D3  1C03               	skipc
  5318  07D4  2FD6               	goto	u244_21
  5319  07D5  2FD7               	goto	u244_20
  5320  07D6                     u244_21:
  5321  07D6  2FBD               	goto	i1l2524
  5322  07D7                     u244_20:
  5323  07D7                     i1l2530:
  5324                           
  5325                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5326  07D7  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5327  07D8  00A0               	movwf	??_readFilteredFreqPot
  5328  07D9  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5329  07DA  00A1               	movwf	??_readFilteredFreqPot+1
  5330  07DB  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5331  07DC  00A2               	movwf	??_readFilteredFreqPot+2
  5332  07DD  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5333  07DE  00A3               	movwf	??_readFilteredFreqPot+3
  5334  07DF  3004               	movlw	4
  5335  07E0                     u245_25:
  5336  07E0  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5337  07E1  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5338  07E2  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5339  07E3  0CA0               	rrf	??_readFilteredFreqPot,f
  5340  07E4                     u245_20:
  5341  07E4  0B89               	decfsz	9,f
  5342  07E5  2FE0               	goto	u245_25
  5343  07E6  0821               	movf	??_readFilteredFreqPot+1,w
  5344  07E7  00FB               	movwf	?_readFilteredFreqPot+1
  5345  07E8  0820               	movf	??_readFilteredFreqPot,w
  5346  07E9  00FA               	movwf	?_readFilteredFreqPot
  5347  07EA                     i1l370:
  5348  07EA  0008               	return
  5349  07EB                     __end_of_readFilteredFreqPot:
  5350                           
  5351                           	psect	text22
  5352  0FA5                     __ptext22:	
  5353 ;; *************** function _readFilteredDutyPot *****************
  5354 ;; Defined at:
  5355 ;;		line 25 in file "Potentiometer.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  i               1    8[BANK0 ] unsigned char 
  5360 ;;  i               1    9[BANK0 ] unsigned char 
  5361 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  2   10[COMMON] unsigned short 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5371 ;;      Params:         2       0       0       0       0       0
  5372 ;;      Locals:         0       6       0       0       0       0
  5373 ;;      Temps:          0       4       0       0       0       0
  5374 ;;      Totals:         2      10       0       0       0       0
  5375 ;;Total ram usage:       12 bytes
  5376 ;; Hardware stack levels used: 1
  5377 ;; Hardware stack levels required when called: 1
  5378 ;; This function calls:
  5379 ;;		_readADCRaw
  5380 ;; This function is called by:
  5381 ;;		_Tick490Hz
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385  0FA5                     _readFilteredDutyPot:	
  5386                           ;psect for function _readFilteredDutyPot
  5387                           
  5388  0FA5                     i1l2470:	
  5389                           ;incstack = 0
  5390                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5391                           
  5392                           
  5393                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5394  0FA5  0020               	movlb	0	; select bank0
  5395  0FA6  01A9               	clrf	readFilteredDutyPot@i
  5396  0FA7                     i1l2476:
  5397  0FA7  3529               	lslf	readFilteredDutyPot@i,w
  5398  0FA8  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5399  0FA9  0086               	movwf	6
  5400  0FAA  3002               	movlw	2	; select bank4/5
  5401  0FAB  0087               	movwf	7
  5402  0FAC  3529               	lslf	readFilteredDutyPot@i,w
  5403  0FAD  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5404  0FAE  0084               	movwf	4
  5405  0FAF  3002               	movlw	2	; select bank4/5
  5406  0FB0  0085               	movwf	5
  5407  0FB1  3F40               	moviw [0]fsr1
  5408  0FB2  3F80               	movwi [0]fsr0
  5409  0FB3  3F41               	moviw [1]fsr1
  5410  0FB4  3F81               	movwi [1]fsr0
  5411  0FB5                     i1l2478:
  5412  0FB5  3001               	movlw	1
  5413  0FB6  00A0               	movwf	??_readFilteredDutyPot
  5414  0FB7  0820               	movf	??_readFilteredDutyPot,w
  5415  0FB8  07A9               	addwf	readFilteredDutyPot@i,f
  5416  0FB9                     i1l2480:
  5417  0FB9  300F               	movlw	15
  5418  0FBA  0229               	subwf	readFilteredDutyPot@i,w
  5419  0FBB  1C03               	skipc
  5420  0FBC  2FBE               	goto	u240_21
  5421  0FBD  2FBF               	goto	u240_20
  5422  0FBE                     u240_21:
  5423  0FBE  2FA7               	goto	i1l2476
  5424  0FBF                     u240_20:
  5425  0FBF                     i1l2482:
  5426                           
  5427                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5428  0FBF  3009               	movlw	9
  5429  0FC0  318E  26F0  318F   	fcall	_readADCRaw
  5430  0FC3  0871               	movf	?_readADCRaw+1,w
  5431  0FC4  0024               	movlb	4	; select bank4
  5432  0FC5  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5433  0FC6  0870               	movf	?_readADCRaw,w
  5434  0FC7  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5435  0FC8                     i1l2484:
  5436                           
  5437                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5438  0FC8  3000               	movlw	0
  5439  0FC9  0020               	movlb	0	; select bank0
  5440  0FCA  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5441  0FCB  3000               	movlw	0
  5442  0FCC  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5443  0FCD  3000               	movlw	0
  5444  0FCE  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5445  0FCF  3000               	movlw	0
  5446  0FD0  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5447  0FD1                     i1l2486:
  5448                           
  5449                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5450  0FD1  01A8               	clrf	readFilteredDutyPot@i_750
  5451  0FD2                     i1l2492:
  5452  0FD2  3528               	lslf	readFilteredDutyPot@i_750,w
  5453  0FD3  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5454  0FD4  0086               	movwf	6
  5455  0FD5  3002               	movlw	2	; select bank4/5
  5456  0FD6  0087               	movwf	7
  5457  0FD7  3F40               	moviw [0]fsr1
  5458  0FD8  00A0               	movwf	??_readFilteredDutyPot
  5459  0FD9  3F41               	moviw [1]fsr1
  5460  0FDA  00A1               	movwf	??_readFilteredDutyPot+1
  5461  0FDB  0820               	movf	??_readFilteredDutyPot,w
  5462  0FDC  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5463  0FDD  0821               	movf	??_readFilteredDutyPot+1,w
  5464  0FDE  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5465  0FDF  3000               	movlw	0
  5466  0FE0  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5467  0FE1  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5468  0FE2                     i1l2494:
  5469  0FE2  3001               	movlw	1
  5470  0FE3  00A0               	movwf	??_readFilteredDutyPot
  5471  0FE4  0820               	movf	??_readFilteredDutyPot,w
  5472  0FE5  07A8               	addwf	readFilteredDutyPot@i_750,f
  5473  0FE6                     i1l2496:
  5474  0FE6  3010               	movlw	16
  5475  0FE7  0228               	subwf	readFilteredDutyPot@i_750,w
  5476  0FE8  1C03               	skipc
  5477  0FE9  2FEB               	goto	u241_21
  5478  0FEA  2FEC               	goto	u241_20
  5479  0FEB                     u241_21:
  5480  0FEB  2FD2               	goto	i1l2492
  5481  0FEC                     u241_20:
  5482  0FEC                     i1l2498:
  5483                           
  5484                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5485  0FEC  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5486  0FED  00A0               	movwf	??_readFilteredDutyPot
  5487  0FEE  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5488  0FEF  00A1               	movwf	??_readFilteredDutyPot+1
  5489  0FF0  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5490  0FF1  00A2               	movwf	??_readFilteredDutyPot+2
  5491  0FF2  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5492  0FF3  00A3               	movwf	??_readFilteredDutyPot+3
  5493  0FF4  3004               	movlw	4
  5494  0FF5                     u242_25:
  5495  0FF5  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5496  0FF6  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5497  0FF7  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5498  0FF8  0CA0               	rrf	??_readFilteredDutyPot,f
  5499  0FF9                     u242_20:
  5500  0FF9  0B89               	decfsz	9,f
  5501  0FFA  2FF5               	goto	u242_25
  5502  0FFB  0821               	movf	??_readFilteredDutyPot+1,w
  5503  0FFC  00FB               	movwf	?_readFilteredDutyPot+1
  5504  0FFD  0820               	movf	??_readFilteredDutyPot,w
  5505  0FFE  00FA               	movwf	?_readFilteredDutyPot
  5506  0FFF                     i1l363:
  5507  0FFF  0008               	return
  5508  1000                     __end_of_readFilteredDutyPot:
  5509                           
  5510                           	psect	text23
  5511  0EF0                     __ptext23:	
  5512 ;; *************** function _readADCRaw *****************
  5513 ;; Defined at:
  5514 ;;		line 71 in file "ADC.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  gpioNumber      1    wreg     const enum E2798
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5519 ;;  i               1    8[COMMON] unsigned char 
  5520 ;;  returnValue     2    4[COMMON] unsigned int 
  5521 ;;  gpioValid       1    7[COMMON] unsigned char 
  5522 ;;  channel         1    6[COMMON] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  2    0[COMMON] unsigned short 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5532 ;;      Params:         2       0       0       0       0       0
  5533 ;;      Locals:         6       0       0       0       0       0
  5534 ;;      Temps:          2       0       0       0       0       0
  5535 ;;      Totals:        10       0       0       0       0       0
  5536 ;;Total ram usage:       10 bytes
  5537 ;; Hardware stack levels used: 1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_readFilteredDutyPot
  5542 ;;		_readFilteredFreqPot
  5543 ;;		_readFilteredVout
  5544 ;;		_readFilteredIDS
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548  0EF0                     _readADCRaw:	
  5549                           ;psect for function _readADCRaw
  5550                           
  5551                           
  5552                           ;incstack = 0
  5553                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5554                           ;readADCRaw@gpioNumber stored from wreg
  5555  0EF0  00F9               	movwf	readADCRaw@gpioNumber
  5556  0EF1                     i1l2198:
  5557                           
  5558                           ;ADC.c: 72:     uint8_t channel = 0;
  5559  0EF1  01F6               	clrf	readADCRaw@channel
  5560                           
  5561                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5562  0EF2  01F7               	clrf	readADCRaw@gpioValid
  5563  0EF3                     i1l2200:
  5564                           
  5565                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5566  0EF3  3005               	movlw	5
  5567  0EF4  0279               	subwf	readADCRaw@gpioNumber,w
  5568  0EF5  1803               	skipnc
  5569  0EF6  2EF8               	goto	u185_21
  5570  0EF7  2EF9               	goto	u185_20
  5571  0EF8                     u185_21:
  5572  0EF8  2EFF               	goto	i1l244
  5573  0EF9                     u185_20:
  5574  0EF9                     i1l2202:
  5575                           
  5576                           ;ADC.c: 76:         channel = gpioNumber;
  5577  0EF9  0879               	movf	readADCRaw@gpioNumber,w
  5578  0EFA  00F2               	movwf	??_readADCRaw
  5579  0EFB  0872               	movf	??_readADCRaw,w
  5580  0EFC  00F6               	movwf	readADCRaw@channel
  5581  0EFD                     i1l2204:
  5582                           
  5583                           ;ADC.c: 77:         gpioValid = 1;
  5584  0EFD  01F7               	clrf	readADCRaw@gpioValid
  5585  0EFE  0AF7               	incf	readADCRaw@gpioValid,f
  5586  0EFF                     i1l244:	
  5587                           ;ADC.c: 78:     }
  5588                           
  5589                           
  5590                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5591  0EFF  3009               	movlw	9
  5592  0F00  0279               	subwf	readADCRaw@gpioNumber,w
  5593  0F01  1C03               	skipc
  5594  0F02  2F04               	goto	u186_21
  5595  0F03  2F05               	goto	u186_20
  5596  0F04                     u186_21:
  5597  0F04  2F12               	goto	i1l245
  5598  0F05                     u186_20:
  5599  0F05                     i1l2206:
  5600  0F05  3010               	movlw	16
  5601  0F06  0279               	subwf	readADCRaw@gpioNumber,w
  5602  0F07  1803               	skipnc
  5603  0F08  2F0A               	goto	u187_21
  5604  0F09  2F0B               	goto	u187_20
  5605  0F0A                     u187_21:
  5606  0F0A  2F12               	goto	i1l245
  5607  0F0B                     u187_20:
  5608  0F0B                     i1l2208:
  5609                           
  5610                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5611  0F0B  0879               	movf	readADCRaw@gpioNumber,w
  5612  0F0C  3C14               	sublw	20
  5613  0F0D  00F2               	movwf	??_readADCRaw
  5614  0F0E  0872               	movf	??_readADCRaw,w
  5615  0F0F  00F6               	movwf	readADCRaw@channel
  5616  0F10                     i1l2210:
  5617                           
  5618                           ;ADC.c: 81:         gpioValid = 1;
  5619  0F10  01F7               	clrf	readADCRaw@gpioValid
  5620  0F11  0AF7               	incf	readADCRaw@gpioValid,f
  5621  0F12                     i1l245:	
  5622                           ;ADC.c: 82:     }
  5623                           
  5624                           
  5625                           ;ADC.c: 83:     if(gpioValid){
  5626  0F12  0877               	movf	readADCRaw@gpioValid,w
  5627  0F13  1903               	btfsc	3,2
  5628  0F14  2F16               	goto	u188_21
  5629  0F15  2F17               	goto	u188_20
  5630  0F16                     u188_21:
  5631  0F16  2F47               	goto	i1l2238
  5632  0F17                     u188_20:
  5633  0F17                     i1l2212:
  5634                           
  5635                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5636  0F17  0021               	movlb	1	; select bank1
  5637  0F18  081D               	movf	29,w	;volatile
  5638  0F19                     i1l2214:
  5639                           
  5640                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5641  0F19  3083               	movlw	131
  5642  0F1A  00F2               	movwf	??_readADCRaw
  5643  0F1B  0872               	movf	??_readADCRaw,w
  5644  0F1C  059D               	andwf	29,f	;volatile
  5645  0F1D                     i1l2216:
  5646                           
  5647                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5648  0F1D  0876               	movf	readADCRaw@channel,w	;volatile
  5649  0F1E  00F2               	movwf	??_readADCRaw
  5650  0F1F  3001               	movlw	1
  5651  0F20                     u189_25:
  5652  0F20  35F2               	lslf	??_readADCRaw,f
  5653  0F21  3EFF               	addlw	-1
  5654  0F22  1D03               	skipz
  5655  0F23  2F20               	goto	u189_25
  5656  0F24  3572               	lslf	??_readADCRaw,w
  5657  0F25  00F3               	movwf	??_readADCRaw+1
  5658  0F26  0873               	movf	??_readADCRaw+1,w
  5659  0F27  049D               	iorwf	29,f	;volatile
  5660  0F28                     i1l2218:
  5661                           
  5662                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5663  0F28  01F8               	clrf	readADCRaw@i
  5664  0F29                     i1l2224:
  5665  0F29  3001               	movlw	1
  5666  0F2A  00F2               	movwf	??_readADCRaw
  5667  0F2B  0872               	movf	??_readADCRaw,w
  5668  0F2C  07F8               	addwf	readADCRaw@i,f
  5669  0F2D                     i1l2226:
  5670  0F2D  3010               	movlw	16
  5671  0F2E  0278               	subwf	readADCRaw@i,w
  5672  0F2F  1C03               	skipc
  5673  0F30  2F32               	goto	u190_21
  5674  0F31  2F33               	goto	u190_20
  5675  0F32                     u190_21:
  5676  0F32  2F29               	goto	i1l2224
  5677  0F33                     u190_20:
  5678  0F33                     i1l249:
  5679                           
  5680                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5681  0F33  0021               	movlb	1	; select bank1
  5682  0F34  149D               	bsf	29,1	;volatile
  5683  0F35                     i1l250:	
  5684                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5685                           
  5686  0F35  189D               	btfsc	29,1	;volatile
  5687  0F36  2F38               	goto	u191_21
  5688  0F37  2F39               	goto	u191_20
  5689  0F38                     u191_21:
  5690  0F38  2F35               	goto	i1l250
  5691  0F39                     u191_20:
  5692  0F39                     i1l2228:
  5693                           
  5694                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5695  0F39  081C               	movf	28,w	;volatile
  5696  0F3A  00F5               	movwf	readADCRaw@returnValue+1
  5697  0F3B  081B               	movf	27,w	;volatile
  5698  0F3C  00F4               	movwf	readADCRaw@returnValue
  5699  0F3D                     i1l2230:
  5700                           
  5701                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5702  0F3D  3083               	movlw	131
  5703  0F3E  00F2               	movwf	??_readADCRaw
  5704  0F3F  0872               	movf	??_readADCRaw,w
  5705  0F40  059D               	andwf	29,f	;volatile
  5706  0F41                     i1l2232:
  5707                           
  5708                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5709  0F41  159D               	bsf	29,3	;volatile
  5710  0F42                     i1l2234:
  5711                           
  5712                           ;ADC.c: 98:             return returnValue;
  5713  0F42  0875               	movf	readADCRaw@returnValue+1,w
  5714  0F43  00F1               	movwf	?_readADCRaw+1
  5715  0F44  0874               	movf	readADCRaw@returnValue,w
  5716  0F45  00F0               	movwf	?_readADCRaw
  5717  0F46  2F49               	goto	i1l253
  5718  0F47                     i1l2238:
  5719  0F47  01F0               	clrf	?_readADCRaw
  5720  0F48  01F1               	clrf	?_readADCRaw+1
  5721  0F49                     i1l253:
  5722  0F49  0008               	return
  5723  0F4A                     __end_of_readADCRaw:
  5724                           
  5725                           	psect	text24
  5726  0C9C                     __ptext24:	
  5727 ;; *************** function _currentTripMonitor *****************
  5728 ;; Defined at:
  5729 ;;		line 94 in file "CurrentSensor.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  2    4[None  ] int 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, pclath, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5743 ;;      Params:         0       0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0
  5745 ;;      Temps:          1       0       0       0       0       0
  5746 ;;      Totals:         1       0       0       0       0       0
  5747 ;;Total ram usage:        1 bytes
  5748 ;; Hardware stack levels used: 1
  5749 ;; Hardware stack levels required when called: 2
  5750 ;; This function calls:
  5751 ;;		_currentTripRead
  5752 ;;		_transToOverCurrentFault
  5753 ;;		i1_currentTripReset
  5754 ;; This function is called by:
  5755 ;;		_Tick490Hz
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759  0C9C                     _currentTripMonitor:	
  5760                           ;psect for function _currentTripMonitor
  5761                           
  5762  0C9C                     i1l2338:	
  5763                           ;incstack = 0
  5764                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5765                           
  5766                           
  5767                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5768  0C9C  318C  24EB  318C   	fcall	_currentTripRead
  5769  0C9F  3A01               	xorlw	1
  5770  0CA0  1D03               	skipz
  5771  0CA1  2CA3               	goto	u216_21
  5772  0CA2  2CA4               	goto	u216_20
  5773  0CA3                     u216_21:
  5774  0CA3  2CB7               	goto	i1l2346
  5775  0CA4                     u216_20:
  5776  0CA4                     i1l2340:
  5777                           
  5778                           ;CurrentSensor.c: 97:         currentTripCount++;
  5779  0CA4  3001               	movlw	1
  5780  0CA5  00FB               	movwf	??_currentTripMonitor
  5781  0CA6  087B               	movf	??_currentTripMonitor,w
  5782  0CA7  0020               	movlb	0	; select bank0
  5783  0CA8  07E9               	addwf	_currentTripCount,f
  5784                           
  5785                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5786  0CA9  3003               	movlw	3
  5787  0CAA  0669               	xorwf	_currentTripCount,w
  5788  0CAB  1D03               	btfss	3,2
  5789  0CAC  2CAE               	goto	u217_21
  5790  0CAD  2CAF               	goto	u217_20
  5791  0CAE                     u217_21:
  5792  0CAE  2CB3               	goto	i1l2344
  5793  0CAF                     u217_20:
  5794  0CAF                     i1l2342:
  5795                           
  5796                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5797  0CAF  318B  23DE  318C   	fcall	_transToOverCurrentFault
  5798                           
  5799                           ;CurrentSensor.c: 100:         }
  5800  0CB2  2CBF               	goto	i1l543
  5801  0CB3                     i1l2344:
  5802                           
  5803                           ;CurrentSensor.c: 102:             currentTripReset();
  5804  0CB3  318B  23F0  318C   	fcall	i1_currentTripReset
  5805  0CB6  2CBF               	goto	i1l543
  5806  0CB7                     i1l2346:
  5807                           
  5808                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5809  0CB7  0020               	movlb	0	; select bank0
  5810  0CB8  0869               	movf	_currentTripCount,w
  5811  0CB9  1903               	btfsc	3,2
  5812  0CBA  2CBC               	goto	u218_21
  5813  0CBB  2CBD               	goto	u218_20
  5814  0CBC                     u218_21:
  5815  0CBC  2CBF               	goto	i1l543
  5816  0CBD                     u218_20:
  5817  0CBD                     i1l2348:
  5818                           
  5819                           ;CurrentSensor.c: 107:             currentTripCount--;
  5820  0CBD  3001               	movlw	1
  5821  0CBE  02E9               	subwf	_currentTripCount,f
  5822  0CBF                     i1l543:
  5823  0CBF  0008               	return
  5824  0CC0                     __end_of_currentTripMonitor:
  5825                           
  5826                           	psect	text25
  5827  0BF0                     __ptext25:	
  5828 ;; *************** function i1_currentTripReset *****************
  5829 ;; Defined at:
  5830 ;;		line 71 in file "CurrentSensor.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5844 ;;      Params:         0       0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0       0
  5846 ;;      Temps:          0       0       0       0       0       0
  5847 ;;      Totals:         0       0       0       0       0       0
  5848 ;;Total ram usage:        0 bytes
  5849 ;; Hardware stack levels used: 1
  5850 ;; Hardware stack levels required when called: 1
  5851 ;; This function calls:
  5852 ;;		i1_writeGPIO
  5853 ;; This function is called by:
  5854 ;;		_currentTripMonitor
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858  0BF0                     i1_currentTripReset:	
  5859                           ;psect for function i1_currentTripReset
  5860                           
  5861  0BF0                     i1l2334:	
  5862                           ;incstack = 0
  5863                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5864                           
  5865                           
  5866                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5867  0BF0  01F0               	clrf	i1writeGPIO@writeValue
  5868  0BF1  300B               	movlw	11
  5869  0BF2  3186  26D6  318B   	fcall	i1_writeGPIO
  5870  0BF5                     i1l2336:
  5871                           
  5872                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5873                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5874  0BF5  01F0               	clrf	i1writeGPIO@writeValue
  5875  0BF6  0AF0               	incf	i1writeGPIO@writeValue,f
  5876  0BF7  300B               	movlw	11
  5877  0BF8  3186  26D6  318B   	fcall	i1_writeGPIO
  5878  0BFB                     i1l532:
  5879  0BFB  0008               	return
  5880  0BFC                     __end_ofi1_currentTripReset:
  5881                           
  5882                           	psect	text26
  5883  06D6                     __ptext26:	
  5884 ;; *************** function i1_writeGPIO *****************
  5885 ;; Defined at:
  5886 ;;		line 52 in file "GPIO.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  gpioNumber      1    wreg     const enum E2798
  5889 ;;  writeValue      1    0[COMMON] unsigned char 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5892 ;;  portNumber      1    5[COMMON] unsigned char 
  5893 ;;  portType        1    3[COMMON] unsigned char 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5903 ;;      Params:         1       0       0       0       0       0
  5904 ;;      Locals:         3       0       0       0       0       0
  5905 ;;      Temps:          2       0       0       0       0       0
  5906 ;;      Totals:         6       0       0       0       0       0
  5907 ;;Total ram usage:        6 bytes
  5908 ;; Hardware stack levels used: 1
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_Tick490Hz
  5913 ;;		i1_currentTripReset
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917  06D6                     i1_writeGPIO:	
  5918                           ;psect for function i1_writeGPIO
  5919                           
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5923                           ;i1writeGPIO@gpioNumber stored from wreg
  5924  06D6  00F4               	movwf	i1writeGPIO@gpioNumber
  5925  06D7                     i1l2074:
  5926                           
  5927                           ;GPIO.c: 54:     uint8_t portType = 0;
  5928  06D7  01F3               	clrf	i1writeGPIO@portType
  5929  06D8                     i1l2076:
  5930                           
  5931                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5932  06D8  3008               	movlw	8
  5933  06D9  0274               	subwf	i1writeGPIO@gpioNumber,w
  5934  06DA  1C03               	skipc
  5935  06DB  2EDD               	goto	u150_21
  5936  06DC  2EDE               	goto	u150_20
  5937  06DD                     u150_21:
  5938  06DD  2EE6               	goto	i1l2082
  5939  06DE                     u150_20:
  5940  06DE                     i1l2078:
  5941                           
  5942                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  5943  06DE  0874               	movf	i1writeGPIO@gpioNumber,w
  5944  06DF  3EF8               	addlw	248
  5945  06E0  00F1               	movwf	??i1_writeGPIO
  5946  06E1  0871               	movf	??i1_writeGPIO,w
  5947  06E2  00F5               	movwf	i1writeGPIO@portNumber
  5948  06E3                     i1l2080:
  5949                           
  5950                           ;GPIO.c: 57:         portType = 1;
  5951  06E3  01F3               	clrf	i1writeGPIO@portType
  5952  06E4  0AF3               	incf	i1writeGPIO@portType,f
  5953                           
  5954                           ;GPIO.c: 58:     }
  5955  06E5  2EEB               	goto	i1l2086
  5956  06E6                     i1l2082:
  5957                           
  5958                           ;GPIO.c: 60:         portNumber = gpioNumber;
  5959  06E6  0874               	movf	i1writeGPIO@gpioNumber,w
  5960  06E7  00F1               	movwf	??i1_writeGPIO
  5961  06E8  0871               	movf	??i1_writeGPIO,w
  5962  06E9  00F5               	movwf	i1writeGPIO@portNumber
  5963  06EA                     i1l2084:
  5964                           
  5965                           ;GPIO.c: 61:         portType = 0;
  5966  06EA  01F3               	clrf	i1writeGPIO@portType
  5967  06EB                     i1l2086:
  5968                           
  5969                           ;GPIO.c: 64:     if(portType == 0){
  5970  06EB  0873               	movf	i1writeGPIO@portType,w
  5971  06EC  1D03               	btfss	3,2
  5972  06ED  2EEF               	goto	u151_21
  5973  06EE  2EF0               	goto	u151_20
  5974  06EF                     u151_21:
  5975  06EF  2F10               	goto	i1l2094
  5976  06F0                     u151_20:
  5977  06F0                     i1l2088:
  5978                           
  5979                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  5980  06F0  0870               	movf	i1writeGPIO@writeValue,w
  5981  06F1  1903               	btfsc	3,2
  5982  06F2  2EF4               	goto	u152_21
  5983  06F3  2EF5               	goto	u152_20
  5984  06F4                     u152_21:
  5985  06F4  2F02               	goto	i1l2092
  5986  06F5                     u152_20:
  5987  06F5                     i1l2090:
  5988  06F5  3001               	movlw	1
  5989  06F6  00F1               	movwf	??i1_writeGPIO
  5990  06F7  0A75               	incf	i1writeGPIO@portNumber,w
  5991  06F8  2EFA               	goto	u153_24
  5992  06F9                     u153_25:
  5993  06F9  35F1               	lslf	??i1_writeGPIO,f
  5994  06FA                     u153_24:
  5995  06FA  0B89               	decfsz	9,f
  5996  06FB  2EF9               	goto	u153_25
  5997  06FC  0871               	movf	??i1_writeGPIO,w
  5998  06FD  00F2               	movwf	??i1_writeGPIO+1
  5999  06FE  0872               	movf	??i1_writeGPIO+1,w
  6000  06FF  0022               	movlb	2	; select bank2
  6001  0700  048C               	iorwf	12,f	;volatile
  6002  0701  2F34               	goto	i1l318
  6003  0702                     i1l2092:
  6004  0702  3001               	movlw	1
  6005  0703  00F1               	movwf	??i1_writeGPIO
  6006  0704  0A75               	incf	i1writeGPIO@portNumber,w
  6007  0705  2F07               	goto	u154_24
  6008  0706                     u154_25:
  6009  0706  35F1               	lslf	??i1_writeGPIO,f
  6010  0707                     u154_24:
  6011  0707  0B89               	decfsz	9,f
  6012  0708  2F06               	goto	u154_25
  6013  0709  0871               	movf	??i1_writeGPIO,w
  6014  070A  3AFF               	xorlw	255
  6015  070B  00F2               	movwf	??i1_writeGPIO+1
  6016  070C  0872               	movf	??i1_writeGPIO+1,w
  6017  070D  0022               	movlb	2	; select bank2
  6018  070E  058C               	andwf	12,f	;volatile
  6019  070F  2F34               	goto	i1l318
  6020  0710                     i1l2094:
  6021  0710  0373               	decf	i1writeGPIO@portType,w
  6022  0711  1D03               	btfss	3,2
  6023  0712  2F14               	goto	u155_21
  6024  0713  2F15               	goto	u155_20
  6025  0714                     u155_21:
  6026  0714  2F34               	goto	i1l318
  6027  0715                     u155_20:
  6028  0715                     i1l2096:
  6029                           
  6030                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6031  0715  0870               	movf	i1writeGPIO@writeValue,w
  6032  0716  1903               	btfsc	3,2
  6033  0717  2F19               	goto	u156_21
  6034  0718  2F1A               	goto	u156_20
  6035  0719                     u156_21:
  6036  0719  2F27               	goto	i1l2100
  6037  071A                     u156_20:
  6038  071A                     i1l2098:
  6039  071A  3001               	movlw	1
  6040  071B  00F1               	movwf	??i1_writeGPIO
  6041  071C  0A75               	incf	i1writeGPIO@portNumber,w
  6042  071D  2F1F               	goto	u157_24
  6043  071E                     u157_25:
  6044  071E  35F1               	lslf	??i1_writeGPIO,f
  6045  071F                     u157_24:
  6046  071F  0B89               	decfsz	9,f
  6047  0720  2F1E               	goto	u157_25
  6048  0721  0871               	movf	??i1_writeGPIO,w
  6049  0722  00F2               	movwf	??i1_writeGPIO+1
  6050  0723  0872               	movf	??i1_writeGPIO+1,w
  6051  0724  0022               	movlb	2	; select bank2
  6052  0725  048D               	iorwf	13,f	;volatile
  6053  0726  2F34               	goto	i1l318
  6054  0727                     i1l2100:
  6055  0727  3001               	movlw	1
  6056  0728  00F1               	movwf	??i1_writeGPIO
  6057  0729  0A75               	incf	i1writeGPIO@portNumber,w
  6058  072A  2F2C               	goto	u158_24
  6059  072B                     u158_25:
  6060  072B  35F1               	lslf	??i1_writeGPIO,f
  6061  072C                     u158_24:
  6062  072C  0B89               	decfsz	9,f
  6063  072D  2F2B               	goto	u158_25
  6064  072E  0871               	movf	??i1_writeGPIO,w
  6065  072F  3AFF               	xorlw	255
  6066  0730  00F2               	movwf	??i1_writeGPIO+1
  6067  0731  0872               	movf	??i1_writeGPIO+1,w
  6068  0732  0022               	movlb	2	; select bank2
  6069  0733  058D               	andwf	13,f	;volatile
  6070  0734                     i1l318:
  6071  0734  0008               	return
  6072  0735                     __end_ofi1_writeGPIO:
  6073                           
  6074                           	psect	text27
  6075  0BDE                     __ptext27:	
  6076 ;; *************** function _transToOverCurrentFault *****************
  6077 ;; Defined at:
  6078 ;;		line 45 in file "StateMachine.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6092 ;;      Params:         0       0       0       0       0       0
  6093 ;;      Locals:         0       0       0       0       0       0
  6094 ;;      Temps:          1       0       0       0       0       0
  6095 ;;      Totals:         1       0       0       0       0       0
  6096 ;;Total ram usage:        1 bytes
  6097 ;; Hardware stack levels used: 1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_currentTripMonitor
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105  0BDE                     _transToOverCurrentFault:	
  6106                           ;psect for function _transToOverCurrentFault
  6107                           
  6108  0BDE                     i1l2292:	
  6109                           ;incstack = 0
  6110                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6111                           
  6112                           
  6113                           ;StateMachine.c: 46:     setDuty = 0;
  6114  0BDE  0020               	movlb	0	; select bank0
  6115  0BDF  01E3               	clrf	_setDuty
  6116  0BE0  01E4               	clrf	_setDuty+1
  6117                           
  6118                           ;StateMachine.c: 47:     setPeriod = 0;
  6119  0BE1  01EE               	clrf	_setPeriod
  6120  0BE2                     i1l2294:
  6121                           
  6122                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  6123  0BE2  3004               	movlw	4
  6124  0BE3  00F0               	movwf	??_transToOverCurrentFault
  6125  0BE4  0870               	movf	??_transToOverCurrentFault,w
  6126  0BE5  00EC               	movwf	_currentState
  6127  0BE6                     i1l567:
  6128  0BE6  0008               	return
  6129  0BE7                     __end_of_transToOverCurrentFault:
  6130                           
  6131                           	psect	text28
  6132  0CEB                     __ptext28:	
  6133 ;; *************** function _currentTripRead *****************
  6134 ;; Defined at:
  6135 ;;		line 31 in file "CurrentSensor.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      _Bool 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0, pclath, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6149 ;;      Params:         0       0       0       0       0       0
  6150 ;;      Locals:         1       0       0       0       0       0
  6151 ;;      Temps:          1       0       0       0       0       0
  6152 ;;      Totals:         2       0       0       0       0       0
  6153 ;;Total ram usage:        2 bytes
  6154 ;; Hardware stack levels used: 1
  6155 ;; Hardware stack levels required when called: 1
  6156 ;; This function calls:
  6157 ;;		i1_readGPIO
  6158 ;; This function is called by:
  6159 ;;		_currentTripMonitor
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163  0CEB                     _currentTripRead:	
  6164                           ;psect for function _currentTripRead
  6165                           
  6166  0CEB                     i1l2278:	
  6167                           ;incstack = 0
  6168                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6169                           
  6170                           
  6171                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6172  0CEB  3001               	movlw	1
  6173  0CEC  318D  25BB  318C   	fcall	i1_readGPIO
  6174  0CEF  3A01               	xorlw	1
  6175  0CF0  1D03               	skipz
  6176  0CF1  2CF3               	goto	u199_21
  6177  0CF2  2CF5               	goto	u199_20
  6178  0CF3                     u199_21:
  6179  0CF3  3001               	movlw	1
  6180  0CF4  2CF6               	goto	u200_20
  6181  0CF5                     u199_20:
  6182  0CF5  3000               	movlw	0
  6183  0CF6                     u200_20:
  6184  0CF6  00F9               	movwf	??_currentTripRead
  6185  0CF7  0879               	movf	??_currentTripRead,w
  6186  0CF8  0020               	movlb	0	; select bank0
  6187  0CF9  00EB               	movwf	_tripIDS
  6188                           
  6189                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6190  0CFA  3003               	movlw	3
  6191  0CFB  318D  25BB  318C   	fcall	i1_readGPIO
  6192  0CFE  3A01               	xorlw	1
  6193  0CFF  1D03               	skipz
  6194  0D00  2D02               	goto	u201_21
  6195  0D01  2D04               	goto	u201_20
  6196  0D02                     u201_21:
  6197  0D02  3001               	movlw	1
  6198  0D03  2D05               	goto	u202_20
  6199  0D04                     u201_20:
  6200  0D04  3000               	movlw	0
  6201  0D05                     u202_20:
  6202  0D05  00F9               	movwf	??_currentTripRead
  6203  0D06  0879               	movf	??_currentTripRead,w
  6204  0D07  0020               	movlb	0	; select bank0
  6205  0D08  00EA               	movwf	_tripIL
  6206  0D09                     i1l2280:
  6207                           
  6208                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6209  0D09  01FA               	clrf	_currentTripRead$913
  6210  0D0A  0AFA               	incf	_currentTripRead$913,f
  6211  0D0B                     i1l2282:
  6212  0D0B  086A               	movf	_tripIL,w
  6213  0D0C  1D03               	btfss	3,2
  6214  0D0D  2D0F               	goto	u203_21
  6215  0D0E  2D10               	goto	u203_20
  6216  0D0F                     u203_21:
  6217  0D0F  2D16               	goto	i1l2288
  6218  0D10                     u203_20:
  6219  0D10                     i1l2284:
  6220  0D10  086B               	movf	_tripIDS,w
  6221  0D11  1D03               	btfss	3,2
  6222  0D12  2D14               	goto	u204_21
  6223  0D13  2D15               	goto	u204_20
  6224  0D14                     u204_21:
  6225  0D14  2D16               	goto	i1l2288
  6226  0D15                     u204_20:
  6227  0D15                     i1l2286:
  6228  0D15  01FA               	clrf	_currentTripRead$913
  6229  0D16                     i1l2288:
  6230  0D16  087A               	movf	_currentTripRead$913,w
  6231  0D17                     i1l515:
  6232  0D17  0008               	return
  6233  0D18                     __end_of_currentTripRead:
  6234                           
  6235                           	psect	text29
  6236  03FF                     __ptext29:	
  6237 ;; *************** function _controlRoutine *****************
  6238 ;; Defined at:
  6239 ;;		line 65 in file "Controller.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  setDuty_unre    2   60[BANK0 ] short 
  6244 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6245 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6255 ;;      Params:         0       0       0       0       0       0
  6256 ;;      Locals:         0       6       0       0       0       0
  6257 ;;      Temps:          0       6       0       0       0       0
  6258 ;;      Totals:         0      12       0       0       0       0
  6259 ;;Total ram usage:       12 bytes
  6260 ;; Hardware stack levels used: 1
  6261 ;; Hardware stack levels required when called: 3
  6262 ;; This function calls:
  6263 ;;		___lldiv
  6264 ;;		___wmul
  6265 ;;		_runVoltageModeControl
  6266 ;; This function is called by:
  6267 ;;		_Tick490Hz
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271  03FF                     _controlRoutine:	
  6272                           ;psect for function _controlRoutine
  6273                           
  6274  03FF                     i1l2356:	
  6275                           ;incstack = 0
  6276                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6277                           
  6278                           
  6279                           ;Controller.c: 67:     if((currentState == voltageModeControl) || (currentState == curre
      +                          ntModeControl)){
  6280  03FF  3002               	movlw	2
  6281  0400  0020               	movlb	0	; select bank0
  6282  0401  066C               	xorwf	_currentState,w
  6283  0402  1903               	btfsc	3,2
  6284  0403  2C05               	goto	u221_21
  6285  0404  2C06               	goto	u221_20
  6286  0405                     u221_21:
  6287  0405  2C0C               	goto	i1l2360
  6288  0406                     u221_20:
  6289  0406                     i1l2358:
  6290  0406  3003               	movlw	3
  6291  0407  066C               	xorwf	_currentState,w
  6292  0408  1D03               	btfss	3,2
  6293  0409  2C0B               	goto	u222_21
  6294  040A  2C0C               	goto	u222_20
  6295  040B                     u222_21:
  6296  040B  2CD4               	goto	i1l452
  6297  040C                     u222_20:
  6298  040C                     i1l2360:
  6299                           
  6300                           ;Controller.c: 68:         int16_t setDuty_unreg = 0;
  6301  040C  01DC               	clrf	controlRoutine@setDuty_unreg
  6302  040D  01DD               	clrf	controlRoutine@setDuty_unreg+1
  6303  040E                     i1l2362:
  6304                           
  6305                           ;Controller.c: 71:         if(currentState == voltageModeControl){
  6306  040E  3002               	movlw	2
  6307  040F  066C               	xorwf	_currentState,w
  6308  0410  1D03               	btfss	3,2
  6309  0411  2C13               	goto	u223_21
  6310  0412  2C14               	goto	u223_20
  6311  0413                     u223_21:
  6312  0413  2C4F               	goto	i1l2372
  6313  0414                     u223_20:
  6314  0414                     i1l2364:
  6315                           
  6316                           ;Controller.c: 73:             runVoltageModeControl();
  6317  0414  3180  20B4  3183   	fcall	_runVoltageModeControl
  6318  0417                     i1l2366:
  6319                           
  6320                           ;Controller.c: 74:             setPeriod = 79u;
  6321  0417  304F               	movlw	79
  6322  0418  0020               	movlb	0	; select bank0
  6323  0419  00D2               	movwf	??_controlRoutine
  6324  041A  0852               	movf	??_controlRoutine,w
  6325  041B  00EE               	movwf	_setPeriod
  6326  041C                     i1l2368:
  6327                           
  6328                           ;Controller.c: 76:             setDuty_unreg = (int16_t) (((uint32_t)(((uint16_t) 50u) *
      +                           setPeriod)) / 25) + voltageModeVariables.sumOutput;
  6329  041C  3016               	movlw	22
  6330  041D  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6331  041E  0086               	movwf	6
  6332  041F  0187               	clrf	7
  6333  0420  3000               	movlw	0
  6334  0421  00F9               	movwf	___lldiv@divisor+3
  6335  0422  3000               	movlw	0
  6336  0423  00F8               	movwf	___lldiv@divisor+2
  6337  0424  3000               	movlw	0
  6338  0425  00F7               	movwf	___lldiv@divisor+1
  6339  0426  3019               	movlw	25
  6340  0427  00F6               	movwf	___lldiv@divisor
  6341  0428  3032               	movlw	50
  6342  0429  00F2               	movwf	___wmul@multiplicand
  6343  042A  3000               	movlw	0
  6344  042B  00F3               	movwf	___wmul@multiplicand+1
  6345  042C  086E               	movf	_setPeriod,w
  6346  042D  00D2               	movwf	??_controlRoutine
  6347  042E  01D3               	clrf	??_controlRoutine+1
  6348  042F  0852               	movf	??_controlRoutine,w
  6349  0430  00F0               	movwf	___wmul@multiplier
  6350  0431  0853               	movf	??_controlRoutine+1,w
  6351  0432  00F1               	movwf	___wmul@multiplier+1
  6352  0433  318C  245D  3183   	fcall	___wmul
  6353  0436  0870               	movf	?___wmul,w
  6354  0437  0020               	movlb	0	; select bank0
  6355  0438  00D4               	movwf	??_controlRoutine+2
  6356  0439  0871               	movf	?___wmul+1,w
  6357  043A  00D5               	movwf	??_controlRoutine+3
  6358  043B  01D6               	clrf	??_controlRoutine+4
  6359  043C  01D7               	clrf	??_controlRoutine+5
  6360  043D  0857               	movf	??_controlRoutine+5,w
  6361  043E  00FD               	movwf	___lldiv@dividend+3
  6362  043F  0856               	movf	??_controlRoutine+4,w
  6363  0440  00FC               	movwf	___lldiv@dividend+2
  6364  0441  0855               	movf	??_controlRoutine+3,w
  6365  0442  00FB               	movwf	___lldiv@dividend+1
  6366  0443  0854               	movf	??_controlRoutine+2,w
  6367  0444  00FA               	movwf	___lldiv@dividend
  6368  0445  318F  274A  3183   	fcall	___lldiv
  6369  0448  3F40               	moviw [0]fsr1
  6370  0449  0776               	addwf	?___lldiv,w
  6371  044A  0020               	movlb	0	; select bank0
  6372  044B  00DC               	movwf	controlRoutine@setDuty_unreg
  6373  044C  3F41               	moviw [1]fsr1
  6374  044D  3D77               	addwfc	?___lldiv+1,w
  6375  044E  00DD               	movwf	controlRoutine@setDuty_unreg+1
  6376  044F                     i1l2372:
  6377                           
  6378                           ;Controller.c: 88:         uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * 
      +                          setPeriod)) / 25);
  6379  044F  3000               	movlw	0
  6380  0450  00F9               	movwf	___lldiv@divisor+3
  6381  0451  3000               	movlw	0
  6382  0452  00F8               	movwf	___lldiv@divisor+2
  6383  0453  3000               	movlw	0
  6384  0454  00F7               	movwf	___lldiv@divisor+1
  6385  0455  3019               	movlw	25
  6386  0456  00F6               	movwf	___lldiv@divisor
  6387  0457  305A               	movlw	90
  6388  0458  00F2               	movwf	___wmul@multiplicand
  6389  0459  3000               	movlw	0
  6390  045A  00F3               	movwf	___wmul@multiplicand+1
  6391  045B  086E               	movf	_setPeriod,w
  6392  045C  00D2               	movwf	??_controlRoutine
  6393  045D  01D3               	clrf	??_controlRoutine+1
  6394  045E  0852               	movf	??_controlRoutine,w
  6395  045F  00F0               	movwf	___wmul@multiplier
  6396  0460  0853               	movf	??_controlRoutine+1,w
  6397  0461  00F1               	movwf	___wmul@multiplier+1
  6398  0462  318C  245D  3183   	fcall	___wmul
  6399  0465  0870               	movf	?___wmul,w
  6400  0466  0020               	movlb	0	; select bank0
  6401  0467  00D4               	movwf	??_controlRoutine+2
  6402  0468  0871               	movf	?___wmul+1,w
  6403  0469  00D5               	movwf	??_controlRoutine+3
  6404  046A  01D6               	clrf	??_controlRoutine+4
  6405  046B  01D7               	clrf	??_controlRoutine+5
  6406  046C  0857               	movf	??_controlRoutine+5,w
  6407  046D  00FD               	movwf	___lldiv@dividend+3
  6408  046E  0856               	movf	??_controlRoutine+4,w
  6409  046F  00FC               	movwf	___lldiv@dividend+2
  6410  0470  0855               	movf	??_controlRoutine+3,w
  6411  0471  00FB               	movwf	___lldiv@dividend+1
  6412  0472  0854               	movf	??_controlRoutine+2,w
  6413  0473  00FA               	movwf	___lldiv@dividend
  6414  0474  318F  274A  3183   	fcall	___lldiv
  6415  0477  0877               	movf	?___lldiv+1,w
  6416  0478  0020               	movlb	0	; select bank0
  6417  0479  00D9               	movwf	controlRoutine@maxDuty+1
  6418  047A  0876               	movf	?___lldiv,w
  6419  047B  00D8               	movwf	controlRoutine@maxDuty
  6420                           
  6421                           ;Controller.c: 89:         uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * 
      +                          setPeriod)) / 25);
  6422  047C  3000               	movlw	0
  6423  047D  00F9               	movwf	___lldiv@divisor+3
  6424  047E  3000               	movlw	0
  6425  047F  00F8               	movwf	___lldiv@divisor+2
  6426  0480  3000               	movlw	0
  6427  0481  00F7               	movwf	___lldiv@divisor+1
  6428  0482  3019               	movlw	25
  6429  0483  00F6               	movwf	___lldiv@divisor
  6430  0484  300A               	movlw	10
  6431  0485  00F2               	movwf	___wmul@multiplicand
  6432  0486  3000               	movlw	0
  6433  0487  00F3               	movwf	___wmul@multiplicand+1
  6434  0488  086E               	movf	_setPeriod,w
  6435  0489  00D2               	movwf	??_controlRoutine
  6436  048A  01D3               	clrf	??_controlRoutine+1
  6437  048B  0852               	movf	??_controlRoutine,w
  6438  048C  00F0               	movwf	___wmul@multiplier
  6439  048D  0853               	movf	??_controlRoutine+1,w
  6440  048E  00F1               	movwf	___wmul@multiplier+1
  6441  048F  318C  245D  3183   	fcall	___wmul
  6442  0492  0870               	movf	?___wmul,w
  6443  0493  0020               	movlb	0	; select bank0
  6444  0494  00D4               	movwf	??_controlRoutine+2
  6445  0495  0871               	movf	?___wmul+1,w
  6446  0496  00D5               	movwf	??_controlRoutine+3
  6447  0497  01D6               	clrf	??_controlRoutine+4
  6448  0498  01D7               	clrf	??_controlRoutine+5
  6449  0499  0857               	movf	??_controlRoutine+5,w
  6450  049A  00FD               	movwf	___lldiv@dividend+3
  6451  049B  0856               	movf	??_controlRoutine+4,w
  6452  049C  00FC               	movwf	___lldiv@dividend+2
  6453  049D  0855               	movf	??_controlRoutine+3,w
  6454  049E  00FB               	movwf	___lldiv@dividend+1
  6455  049F  0854               	movf	??_controlRoutine+2,w
  6456  04A0  00FA               	movwf	___lldiv@dividend
  6457  04A1  318F  274A  3183   	fcall	___lldiv
  6458  04A4  0877               	movf	?___lldiv+1,w
  6459  04A5  0020               	movlb	0	; select bank0
  6460  04A6  00DB               	movwf	controlRoutine@minDuty+1
  6461  04A7  0876               	movf	?___lldiv,w
  6462  04A8  00DA               	movwf	controlRoutine@minDuty
  6463  04A9                     i1l2374:
  6464                           
  6465                           ;Controller.c: 91:         setDuty = setDuty_unreg;
  6466  04A9  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6467  04AA  00E4               	movwf	_setDuty+1
  6468  04AB  085C               	movf	controlRoutine@setDuty_unreg,w
  6469  04AC  00E3               	movwf	_setDuty
  6470  04AD                     i1l2376:
  6471                           
  6472                           ;Controller.c: 93:         if(setDuty_unreg < 0) setDuty = minDuty;
  6473  04AD  1FDD               	btfss	controlRoutine@setDuty_unreg+1,7
  6474  04AE  2CB0               	goto	u224_21
  6475  04AF  2CB1               	goto	u224_20
  6476  04B0                     u224_21:
  6477  04B0  2CB6               	goto	i1l446
  6478  04B1                     u224_20:
  6479  04B1                     i1l2378:
  6480  04B1  085B               	movf	controlRoutine@minDuty+1,w
  6481  04B2  00E4               	movwf	_setDuty+1
  6482  04B3  085A               	movf	controlRoutine@minDuty,w
  6483  04B4  00E3               	movwf	_setDuty
  6484  04B5  2CD4               	goto	i1l452
  6485  04B6                     i1l446:	
  6486                           ;Controller.c: 94:         else if(setDuty_unreg >= 0){
  6487                           
  6488  04B6  1BDD               	btfsc	controlRoutine@setDuty_unreg+1,7
  6489  04B7  2CB9               	goto	u225_21
  6490  04B8  2CBA               	goto	u225_20
  6491  04B9                     u225_21:
  6492  04B9  2CD4               	goto	i1l452
  6493  04BA                     u225_20:
  6494  04BA                     i1l2380:
  6495                           
  6496                           ;Controller.c: 95:             if(setDuty_unreg < minDuty) setDuty = minDuty;
  6497  04BA  085B               	movf	controlRoutine@minDuty+1,w
  6498  04BB  025D               	subwf	controlRoutine@setDuty_unreg+1,w
  6499  04BC  1D03               	skipz
  6500  04BD  2CC0               	goto	u226_25
  6501  04BE  085A               	movf	controlRoutine@minDuty,w
  6502  04BF  025C               	subwf	controlRoutine@setDuty_unreg,w
  6503  04C0                     u226_25:
  6504  04C0  1803               	skipnc
  6505  04C1  2CC3               	goto	u226_21
  6506  04C2  2CC4               	goto	u226_20
  6507  04C3                     u226_21:
  6508  04C3  2CC5               	goto	i1l2384
  6509  04C4                     u226_20:
  6510  04C4  2CB1               	goto	i1l2378
  6511  04C5                     i1l2384:
  6512  04C5  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6513  04C6  0259               	subwf	controlRoutine@maxDuty+1,w
  6514  04C7  1D03               	skipz
  6515  04C8  2CCB               	goto	u227_25
  6516  04C9  085C               	movf	controlRoutine@setDuty_unreg,w
  6517  04CA  0258               	subwf	controlRoutine@maxDuty,w
  6518  04CB                     u227_25:
  6519  04CB  1803               	skipnc
  6520  04CC  2CCE               	goto	u227_21
  6521  04CD  2CCF               	goto	u227_20
  6522  04CE                     u227_21:
  6523  04CE  2CD4               	goto	i1l447
  6524  04CF                     u227_20:
  6525  04CF                     i1l2386:
  6526  04CF  0859               	movf	controlRoutine@maxDuty+1,w
  6527  04D0  00E4               	movwf	_setDuty+1
  6528  04D1  0858               	movf	controlRoutine@maxDuty,w
  6529  04D2  00E3               	movwf	_setDuty
  6530  04D3  2CD4               	goto	i1l452
  6531  04D4                     i1l447:
  6532  04D4                     i1l452:
  6533  04D4  0008               	return
  6534  04D5                     __end_of_controlRoutine:
  6535                           
  6536                           	psect	text30
  6537  00B4                     __ptext30:	
  6538 ;; *************** function _runVoltageModeControl *****************
  6539 ;; Defined at:
  6540 ;;		line 106 in file "Controller.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  propMult        8   40[BANK0 ] long long 
  6545 ;;  integralMult    8   32[BANK0 ] long long 
  6546 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6556 ;;      Params:         0       0       0       0       0       0
  6557 ;;      Locals:         0      18       0       0       0       0
  6558 ;;      Temps:          0      16       0       0       0       0
  6559 ;;      Totals:         0      34       0       0       0       0
  6560 ;;Total ram usage:       34 bytes
  6561 ;; Hardware stack levels used: 1
  6562 ;; Hardware stack levels required when called: 2
  6563 ;; This function calls:
  6564 ;;		___omul
  6565 ;;		_abs
  6566 ;;		_convertRawToMilliVolts
  6567 ;;		i1_readGPIO
  6568 ;; This function is called by:
  6569 ;;		_controlRoutine
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573  00B4                     _runVoltageModeControl:	
  6574                           ;psect for function _runVoltageModeControl
  6575                           
  6576  00B4                     i1l2242:	
  6577                           ;incstack = 0
  6578                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6579                           
  6580                           
  6581                           ;Controller.c: 111:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6582  00B4  0020               	movlb	0	; select bank0
  6583  00B5  0860               	movf	_filteredVout+1,w
  6584  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6585  00B7  085F               	movf	_filteredVout,w
  6586  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6587  00B9  318D  2580  3180   	fcall	_convertRawToMilliVolts
  6588  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6589  00BD  0020               	movlb	0	; select bank0
  6590  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6591  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6592  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6593                           
  6594                           ;Controller.c: 114:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6595  00C1  3008               	movlw	8
  6596  00C2  318D  25BB  3180   	fcall	i1_readGPIO
  6597  00C5  3A00               	xorlw	0
  6598  00C6  1903               	skipnz
  6599  00C7  28C9               	goto	u192_21
  6600  00C8  28CA               	goto	u192_20
  6601  00C9                     u192_21:
  6602  00C9  28D9               	goto	i1l2246
  6603  00CA                     u192_20:
  6604  00CA                     i1l2244:
  6605  00CA  3080               	movlw	128
  6606  00CB  0020               	movlb	0	; select bank0
  6607  00CC  00B0               	movwf	??_runVoltageModeControl
  6608  00CD  303E               	movlw	62
  6609  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6610  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6611  00D0  0230               	subwf	??_runVoltageModeControl,w
  6612  00D1  0021               	movlb	1	; select bank1
  6613  00D2  00B6               	movwf	_voltageModeVariables^(0+128)
  6614  00D3  0020               	movlb	0	; select bank0
  6615  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6616  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6617  00D6  0021               	movlb	1	; select bank1
  6618  00D7  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6619  00D8  28E7               	goto	i1l2248
  6620  00D9                     i1l2246:
  6621  00D9  30E0               	movlw	224
  6622  00DA  0020               	movlb	0	; select bank0
  6623  00DB  00B0               	movwf	??_runVoltageModeControl
  6624  00DC  302E               	movlw	46
  6625  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6626  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6627  00DF  0230               	subwf	??_runVoltageModeControl,w
  6628  00E0  0021               	movlb	1	; select bank1
  6629  00E1  00B6               	movwf	_voltageModeVariables^(0+128)
  6630  00E2  0020               	movlb	0	; select bank0
  6631  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6632  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6633  00E5  0021               	movlb	1	; select bank1
  6634  00E6  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6635  00E7                     i1l2248:
  6636                           
  6637                           ;Controller.c: 118:    int64_t integralMult = ((int64_t) (36u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6638  00E7  0836               	movf	_voltageModeVariables^(0+128),w
  6639  00E8  0020               	movlb	0	; select bank0
  6640  00E9  00A0               	movwf	___omul@multiplier
  6641  00EA  0021               	movlb	1	; select bank1
  6642  00EB  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  6643  00EC  0020               	movlb	0	; select bank0
  6644  00ED  00A1               	movwf	___omul@multiplier+1
  6645  00EE  0D89               	rlf	9,f
  6646  00EF  3B89               	subwfb	9,f
  6647  00F0  0989               	comf	9,f
  6648  00F1  00A2               	movwf	___omul@multiplier+2
  6649  00F2  00A3               	movwf	___omul@multiplier+3
  6650  00F3  00A4               	movwf	___omul@multiplier+4
  6651  00F4  00A5               	movwf	___omul@multiplier+5
  6652  00F5  00A6               	movwf	___omul@multiplier+6
  6653  00F6  00A7               	movwf	___omul@multiplier+7
  6654  00F7  3000               	movlw	0
  6655  00F8  00AF               	movwf	___omul@multiplicand+7
  6656  00F9  3000               	movlw	0
  6657  00FA  00AE               	movwf	___omul@multiplicand+6
  6658  00FB  3000               	movlw	0
  6659  00FC  00AD               	movwf	___omul@multiplicand+5
  6660  00FD  3000               	movlw	0
  6661  00FE  00AC               	movwf	___omul@multiplicand+4
  6662  00FF  3000               	movlw	0
  6663  0100  00AB               	movwf	___omul@multiplicand+3
  6664  0101  3000               	movlw	0
  6665  0102  00AA               	movwf	___omul@multiplicand+2
  6666  0103  3025               	movlw	37
  6667  0104  00A9               	movwf	___omul@multiplicand+1
  6668  0105  308C               	movlw	140
  6669  0106  00A8               	movwf	___omul@multiplicand
  6670  0107  318E  264C  3180   	fcall	___omul
  6671  010A  0020               	movlb	0	; select bank0
  6672  010B  0820               	movf	?___omul,w
  6673  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6674  010D  0821               	movf	?___omul+1,w
  6675  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6676  010F  0822               	movf	?___omul+2,w
  6677  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6678  0111  0823               	movf	?___omul+3,w
  6679  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6680  0113  0824               	movf	?___omul+4,w
  6681  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6682  0115  0825               	movf	?___omul+5,w
  6683  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6684  0117  0826               	movf	?___omul+6,w
  6685  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6686  0119  0827               	movf	?___omul+7,w
  6687  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6688  011B                     i1l2250:
  6689                           
  6690                           ;Controller.c: 120:    voltageModeVariables.integral = integralMult;
  6691  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6692  011C  0021               	movlb	1	; select bank1
  6693  011D  00BB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6694  011E  0020               	movlb	0	; select bank0
  6695  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6696  0120  0021               	movlb	1	; select bank1
  6697  0121  00BA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6698  0122  0020               	movlb	0	; select bank0
  6699  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6700  0124  0021               	movlb	1	; select bank1
  6701  0125  00B9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6702  0126  0020               	movlb	0	; select bank0
  6703  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6704  0128  0021               	movlb	1	; select bank1
  6705  0129  00B8               	movwf	(_voltageModeVariables^(0+128)+2)
  6706  012A                     i1l2252:
  6707                           
  6708                           ;Controller.c: 121:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6709  012A  300E               	movlw	14
  6710  012B  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6711  012C  0086               	movwf	6
  6712  012D  0187               	clrf	7
  6713  012E  3F40               	moviw [0]fsr1
  6714  012F  0020               	movlb	0	; select bank0
  6715  0130  00B0               	movwf	??_runVoltageModeControl
  6716  0131  3F41               	moviw [1]fsr1
  6717  0132  00B1               	movwf	??_runVoltageModeControl+1
  6718  0133  3F42               	moviw [2]fsr1
  6719  0134  00B2               	movwf	??_runVoltageModeControl+2
  6720  0135  3F43               	moviw [3]fsr1
  6721  0136  00B3               	movwf	??_runVoltageModeControl+3
  6722  0137  3F44               	moviw [4]fsr1
  6723  0138  00B4               	movwf	??_runVoltageModeControl+4
  6724  0139  3F45               	moviw [5]fsr1
  6725  013A  00B5               	movwf	??_runVoltageModeControl+5
  6726  013B  3F46               	moviw [6]fsr1
  6727  013C  00B6               	movwf	??_runVoltageModeControl+6
  6728  013D  3F47               	moviw [7]fsr1
  6729  013E  00B7               	movwf	??_runVoltageModeControl+7
  6730  013F  0021               	movlb	1	; select bank1
  6731  0140  0838               	movf	(_voltageModeVariables^(0+128)+2),w
  6732  0141  0020               	movlb	0	; select bank0
  6733  0142  00B8               	movwf	??_runVoltageModeControl+8
  6734  0143  0021               	movlb	1	; select bank1
  6735  0144  0839               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6736  0145  0020               	movlb	0	; select bank0
  6737  0146  00B9               	movwf	??_runVoltageModeControl+9
  6738  0147  0021               	movlb	1	; select bank1
  6739  0148  083A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6740  0149  0020               	movlb	0	; select bank0
  6741  014A  00BA               	movwf	??_runVoltageModeControl+10
  6742  014B  0021               	movlb	1	; select bank1
  6743  014C  083B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6744  014D  0020               	movlb	0	; select bank0
  6745  014E  00BB               	movwf	??_runVoltageModeControl+11
  6746  014F  3000               	movlw	0
  6747  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6748  0151  30FF               	movlw	255
  6749  0152  00BC               	movwf	??_runVoltageModeControl+12
  6750  0153  00BD               	movwf	??_runVoltageModeControl+13
  6751  0154  00BE               	movwf	??_runVoltageModeControl+14
  6752  0155  00BF               	movwf	??_runVoltageModeControl+15
  6753  0156  0838               	movf	??_runVoltageModeControl+8,w
  6754  0157  07B0               	addwf	??_runVoltageModeControl,f
  6755  0158  0839               	movf	??_runVoltageModeControl+9,w
  6756  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6757  015A  083A               	movf	??_runVoltageModeControl+10,w
  6758  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6759  015C  083B               	movf	??_runVoltageModeControl+11,w
  6760  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6761  015E  083C               	movf	??_runVoltageModeControl+12,w
  6762  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6763  0160  083D               	movf	??_runVoltageModeControl+13,w
  6764  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6765  0162  083E               	movf	??_runVoltageModeControl+14,w
  6766  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6767  0164  083F               	movf	??_runVoltageModeControl+15,w
  6768  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6769  0166  0837               	movf	??_runVoltageModeControl+7,w
  6770  0167  0021               	movlb	1	; select bank1
  6771  0168  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6772  0169  0020               	movlb	0	; select bank0
  6773  016A  0836               	movf	??_runVoltageModeControl+6,w
  6774  016B  0021               	movlb	1	; select bank1
  6775  016C  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6776  016D  0020               	movlb	0	; select bank0
  6777  016E  0835               	movf	??_runVoltageModeControl+5,w
  6778  016F  0021               	movlb	1	; select bank1
  6779  0170  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6780  0171  0020               	movlb	0	; select bank0
  6781  0172  0834               	movf	??_runVoltageModeControl+4,w
  6782  0173  0021               	movlb	1	; select bank1
  6783  0174  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6784  0175  0020               	movlb	0	; select bank0
  6785  0176  0833               	movf	??_runVoltageModeControl+3,w
  6786  0177  0021               	movlb	1	; select bank1
  6787  0178  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6788  0179  0020               	movlb	0	; select bank0
  6789  017A  0832               	movf	??_runVoltageModeControl+2,w
  6790  017B  0021               	movlb	1	; select bank1
  6791  017C  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6792  017D  0020               	movlb	0	; select bank0
  6793  017E  0831               	movf	??_runVoltageModeControl+1,w
  6794  017F  0021               	movlb	1	; select bank1
  6795  0180  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6796  0181  0020               	movlb	0	; select bank0
  6797  0182  0830               	movf	??_runVoltageModeControl,w
  6798  0183  0021               	movlb	1	; select bank1
  6799  0184  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6800  0185                     i1l2254:
  6801                           
  6802                           ;Controller.c: 124:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6803  0185  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6804  0186  3A80               	xorlw	128
  6805  0187  0020               	movlb	0	; select bank0
  6806  0188  00B0               	movwf	??_runVoltageModeControl
  6807  0189  0021               	movlb	1	; select bank1
  6808  018A  084B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6809  018B  3A80               	xorlw	128
  6810  018C  0020               	movlb	0	; select bank0
  6811  018D  0230               	subwf	??_runVoltageModeControl,w
  6812  018E  0021               	movlb	1	; select bank1
  6813  018F  1D03               	skipz
  6814  0190  29AB               	goto	u193_23
  6815  0191  084A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6816  0192  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6817  0193  1D03               	skipz
  6818  0194  29AB               	goto	u193_23
  6819  0195  0849               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6820  0196  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6821  0197  1D03               	skipz
  6822  0198  29AB               	goto	u193_23
  6823  0199  0848               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6824  019A  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6825  019B  1D03               	skipz
  6826  019C  29AB               	goto	u193_23
  6827  019D  0847               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6828  019E  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6829  019F  1D03               	skipz
  6830  01A0  29AB               	goto	u193_23
  6831  01A1  0846               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6832  01A2  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6833  01A3  1D03               	skipz
  6834  01A4  29AB               	goto	u193_23
  6835  01A5  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6836  01A6  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6837  01A7  1D03               	skipz
  6838  01A8  29AB               	goto	u193_23
  6839  01A9  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6840  01AA  0220               	subwf	_integratorScaledLimit^(0+128),w
  6841  01AB                     u193_23:
  6842  01AB  1803               	skipnc
  6843  01AC  29AE               	goto	u193_21
  6844  01AD  29AF               	goto	u193_20
  6845  01AE                     u193_21:
  6846  01AE  29BF               	goto	i1l2258
  6847  01AF                     u193_20:
  6848  01AF                     i1l2256:
  6849                           
  6850                           ;Controller.c: 125:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6851  01AF  0820               	movf	_integratorScaledLimit^(0+128),w
  6852  01B0  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6853  01B1  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6854  01B2  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6855  01B3  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6856  01B4  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6857  01B5  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6858  01B6  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6859  01B7  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6860  01B8  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6861  01B9  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6862  01BA  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6863  01BB  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6864  01BC  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6865  01BD  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6866  01BE  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6867  01BF                     i1l2258:
  6868                           
  6869                           ;Controller.c: 128:    if(voltageModeVariables.integralOutputScaled < 0){
  6870  01BF  300E               	movlw	14
  6871  01C0  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6872  01C1  0086               	movwf	6
  6873  01C2  0187               	clrf	7
  6874  01C3  3F47               	moviw [7]fsr1
  6875  01C4  0020               	movlb	0	; select bank0
  6876  01C5  00B0               	movwf	??_runVoltageModeControl
  6877  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  6878  01C7  29C9               	goto	u194_21
  6879  01C8  29CA               	goto	u194_20
  6880  01C9                     u194_21:
  6881  01C9  2A67               	goto	i1l2264
  6882  01CA                     u194_20:
  6883  01CA                     i1l2260:
  6884                           
  6885                           ;Controller.c: 129:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  6886  01CA  0021               	movlb	1	; select bank1
  6887  01CB  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6888  01CC  00F1               	movwf	abs@a+1
  6889  01CD  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6890  01CE  00F0               	movwf	abs@a
  6891  01CF  318C  240A  3180   	fcall	_abs
  6892  01D2  0870               	movf	?_abs,w
  6893  01D3  0020               	movlb	0	; select bank0
  6894  01D4  00B0               	movwf	??_runVoltageModeControl
  6895  01D5  0871               	movf	?_abs+1,w
  6896  01D6  00B1               	movwf	??_runVoltageModeControl+1
  6897  01D7  3000               	movlw	0
  6898  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6899  01D9  30FF               	movlw	255
  6900  01DA  00B2               	movwf	??_runVoltageModeControl+2
  6901  01DB  00B3               	movwf	??_runVoltageModeControl+3
  6902  01DC  00B4               	movwf	??_runVoltageModeControl+4
  6903  01DD  00B5               	movwf	??_runVoltageModeControl+5
  6904  01DE  00B6               	movwf	??_runVoltageModeControl+6
  6905  01DF  00B7               	movwf	??_runVoltageModeControl+7
  6906  01E0  0021               	movlb	1	; select bank1
  6907  01E1  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6908  01E2  3A80               	xorlw	128
  6909  01E3  0020               	movlb	0	; select bank0
  6910  01E4  00B8               	movwf	??_runVoltageModeControl+8
  6911  01E5  0837               	movf	??_runVoltageModeControl+7,w
  6912  01E6  3A80               	xorlw	128
  6913  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  6914  01E8  0021               	movlb	1	; select bank1
  6915  01E9  1D03               	skipz
  6916  01EA  2A13               	goto	u195_23
  6917  01EB  0020               	movlb	0	; select bank0
  6918  01EC  0836               	movf	??_runVoltageModeControl+6,w
  6919  01ED  0021               	movlb	1	; select bank1
  6920  01EE  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6921  01EF  1D03               	skipz
  6922  01F0  2A13               	goto	u195_23
  6923  01F1  0020               	movlb	0	; select bank0
  6924  01F2  0835               	movf	??_runVoltageModeControl+5,w
  6925  01F3  0021               	movlb	1	; select bank1
  6926  01F4  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6927  01F5  1D03               	skipz
  6928  01F6  2A13               	goto	u195_23
  6929  01F7  0020               	movlb	0	; select bank0
  6930  01F8  0834               	movf	??_runVoltageModeControl+4,w
  6931  01F9  0021               	movlb	1	; select bank1
  6932  01FA  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6933  01FB  1D03               	skipz
  6934  01FC  2A13               	goto	u195_23
  6935  01FD  0020               	movlb	0	; select bank0
  6936  01FE  0833               	movf	??_runVoltageModeControl+3,w
  6937  01FF  0021               	movlb	1	; select bank1
  6938  0200  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6939  0201  1D03               	skipz
  6940  0202  2A13               	goto	u195_23
  6941  0203  0020               	movlb	0	; select bank0
  6942  0204  0832               	movf	??_runVoltageModeControl+2,w
  6943  0205  0021               	movlb	1	; select bank1
  6944  0206  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6945  0207  1D03               	skipz
  6946  0208  2A13               	goto	u195_23
  6947  0209  0020               	movlb	0	; select bank0
  6948  020A  0831               	movf	??_runVoltageModeControl+1,w
  6949  020B  0021               	movlb	1	; select bank1
  6950  020C  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6951  020D  1D03               	skipz
  6952  020E  2A13               	goto	u195_23
  6953  020F  0020               	movlb	0	; select bank0
  6954  0210  0830               	movf	??_runVoltageModeControl,w
  6955  0211  0021               	movlb	1	; select bank1
  6956  0212  0220               	subwf	_integratorScaledLimit^(0+128),w
  6957  0213                     u195_23:
  6958  0213  1803               	skipnc
  6959  0214  2A16               	goto	u195_21
  6960  0215  2A17               	goto	u195_20
  6961  0216                     u195_21:
  6962  0216  2A67               	goto	i1l2264
  6963  0217                     u195_20:
  6964  0217                     i1l2262:
  6965                           
  6966                           ;Controller.c: 130:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  6967  0217  3000               	movlw	0
  6968  0218  0020               	movlb	0	; select bank0
  6969  0219  00B0               	movwf	??_runVoltageModeControl
  6970  021A  3000               	movlw	0
  6971  021B  00B1               	movwf	??_runVoltageModeControl+1
  6972  021C  3000               	movlw	0
  6973  021D  00B2               	movwf	??_runVoltageModeControl+2
  6974  021E  3000               	movlw	0
  6975  021F  00B3               	movwf	??_runVoltageModeControl+3
  6976  0220  3000               	movlw	0
  6977  0221  00B4               	movwf	??_runVoltageModeControl+4
  6978  0222  3000               	movlw	0
  6979  0223  00B5               	movwf	??_runVoltageModeControl+5
  6980  0224  3000               	movlw	0
  6981  0225  00B6               	movwf	??_runVoltageModeControl+6
  6982  0226  3000               	movlw	0
  6983  0227  00B7               	movwf	??_runVoltageModeControl+7
  6984  0228  0021               	movlb	1	; select bank1
  6985  0229  0820               	movf	_integratorScaledLimit^(0+128),w
  6986  022A  0020               	movlb	0	; select bank0
  6987  022B  02B0               	subwf	??_runVoltageModeControl,f
  6988  022C  0021               	movlb	1	; select bank1
  6989  022D  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6990  022E  0020               	movlb	0	; select bank0
  6991  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  6992  0230  0021               	movlb	1	; select bank1
  6993  0231  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6994  0232  0020               	movlb	0	; select bank0
  6995  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  6996  0234  0021               	movlb	1	; select bank1
  6997  0235  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6998  0236  0020               	movlb	0	; select bank0
  6999  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7000  0238  0021               	movlb	1	; select bank1
  7001  0239  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7002  023A  0020               	movlb	0	; select bank0
  7003  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7004  023C  0021               	movlb	1	; select bank1
  7005  023D  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7006  023E  0020               	movlb	0	; select bank0
  7007  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7008  0240  0021               	movlb	1	; select bank1
  7009  0241  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7010  0242  0020               	movlb	0	; select bank0
  7011  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7012  0244  0021               	movlb	1	; select bank1
  7013  0245  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7014  0246  0020               	movlb	0	; select bank0
  7015  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7016  0248  0837               	movf	??_runVoltageModeControl+7,w
  7017  0249  0021               	movlb	1	; select bank1
  7018  024A  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7019  024B  0020               	movlb	0	; select bank0
  7020  024C  0836               	movf	??_runVoltageModeControl+6,w
  7021  024D  0021               	movlb	1	; select bank1
  7022  024E  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7023  024F  0020               	movlb	0	; select bank0
  7024  0250  0835               	movf	??_runVoltageModeControl+5,w
  7025  0251  0021               	movlb	1	; select bank1
  7026  0252  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7027  0253  0020               	movlb	0	; select bank0
  7028  0254  0834               	movf	??_runVoltageModeControl+4,w
  7029  0255  0021               	movlb	1	; select bank1
  7030  0256  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7031  0257  0020               	movlb	0	; select bank0
  7032  0258  0833               	movf	??_runVoltageModeControl+3,w
  7033  0259  0021               	movlb	1	; select bank1
  7034  025A  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7035  025B  0020               	movlb	0	; select bank0
  7036  025C  0832               	movf	??_runVoltageModeControl+2,w
  7037  025D  0021               	movlb	1	; select bank1
  7038  025E  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7039  025F  0020               	movlb	0	; select bank0
  7040  0260  0831               	movf	??_runVoltageModeControl+1,w
  7041  0261  0021               	movlb	1	; select bank1
  7042  0262  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7043  0263  0020               	movlb	0	; select bank0
  7044  0264  0830               	movf	??_runVoltageModeControl,w
  7045  0265  0021               	movlb	1	; select bank1
  7046  0266  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7047  0267                     i1l2264:
  7048                           
  7049                           ;Controller.c: 135:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 7u);
  7050  0267  300E               	movlw	14
  7051  0268  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7052  0269  0086               	movwf	6
  7053  026A  0187               	clrf	7
  7054  026B  3F40               	moviw [0]fsr1
  7055  026C  0020               	movlb	0	; select bank0
  7056  026D  00B0               	movwf	??_runVoltageModeControl
  7057  026E  3F41               	moviw [1]fsr1
  7058  026F  00B1               	movwf	??_runVoltageModeControl+1
  7059  0270  3F42               	moviw [2]fsr1
  7060  0271  00B2               	movwf	??_runVoltageModeControl+2
  7061  0272  3F43               	moviw [3]fsr1
  7062  0273  00B3               	movwf	??_runVoltageModeControl+3
  7063  0274  3F44               	moviw [4]fsr1
  7064  0275  00B4               	movwf	??_runVoltageModeControl+4
  7065  0276  3F45               	moviw [5]fsr1
  7066  0277  00B5               	movwf	??_runVoltageModeControl+5
  7067  0278  3F46               	moviw [6]fsr1
  7068  0279  00B6               	movwf	??_runVoltageModeControl+6
  7069  027A  3F47               	moviw [7]fsr1
  7070  027B  00B7               	movwf	??_runVoltageModeControl+7
  7071  027C  3017               	movlw	23
  7072  027D  00B8               	movwf	??_runVoltageModeControl+8
  7073  027E                     u196_25:
  7074  027E  0020               	movlb	0	; select bank0
  7075  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7076  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7077  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7078  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7079  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7080  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7081  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7082  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7083  0287                     u196_20:
  7084  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7085  0288  2A7E               	goto	u196_25
  7086  0289  0020               	movlb	0	; select bank0
  7087  028A  0833               	movf	??_runVoltageModeControl+3,w
  7088  028B  0021               	movlb	1	; select bank1
  7089  028C  00C3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7090  028D  0020               	movlb	0	; select bank0
  7091  028E  0832               	movf	??_runVoltageModeControl+2,w
  7092  028F  0021               	movlb	1	; select bank1
  7093  0290  00C2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7094  0291  0020               	movlb	0	; select bank0
  7095  0292  0831               	movf	??_runVoltageModeControl+1,w
  7096  0293  0021               	movlb	1	; select bank1
  7097  0294  00C1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7098  0295  0020               	movlb	0	; select bank0
  7099  0296  0830               	movf	??_runVoltageModeControl,w
  7100  0297  0021               	movlb	1	; select bank1
  7101  0298  00C0               	movwf	(_voltageModeVariables^(0+128)+10)
  7102  0299                     i1l2266:
  7103                           
  7104                           ;Controller.c: 138:    int64_t propMult = (int32_t) (2u * ((int32_t) voltageModeVariable
      +                          s.error));
  7105  0299  0836               	movf	_voltageModeVariables^(0+128),w
  7106  029A  0020               	movlb	0	; select bank0
  7107  029B  00B0               	movwf	??_runVoltageModeControl
  7108  029C  0021               	movlb	1	; select bank1
  7109  029D  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7110  029E  0020               	movlb	0	; select bank0
  7111  029F  00B1               	movwf	??_runVoltageModeControl+1
  7112  02A0  3000               	movlw	0
  7113  02A1  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7114  02A2  30FF               	movlw	255
  7115  02A3  00B2               	movwf	??_runVoltageModeControl+2
  7116  02A4  00B3               	movwf	??_runVoltageModeControl+3
  7117  02A5  3001               	movlw	1
  7118  02A6                     u197_25:
  7119  02A6  35B0               	lslf	??_runVoltageModeControl,f
  7120  02A7  0DB1               	rlf	??_runVoltageModeControl+1,f
  7121  02A8  0DB2               	rlf	??_runVoltageModeControl+2,f
  7122  02A9  0DB3               	rlf	??_runVoltageModeControl+3,f
  7123  02AA                     u197_20:
  7124  02AA  0B89               	decfsz	9,f
  7125  02AB  2AA6               	goto	u197_25
  7126  02AC  0830               	movf	??_runVoltageModeControl,w
  7127  02AD  00C8               	movwf	runVoltageModeControl@propMult
  7128  02AE  0831               	movf	??_runVoltageModeControl+1,w
  7129  02AF  00C9               	movwf	runVoltageModeControl@propMult+1
  7130  02B0  0832               	movf	??_runVoltageModeControl+2,w
  7131  02B1  00CA               	movwf	runVoltageModeControl@propMult+2
  7132  02B2  0833               	movf	??_runVoltageModeControl+3,w
  7133  02B3  00CB               	movwf	runVoltageModeControl@propMult+3
  7134  02B4  3000               	movlw	0
  7135  02B5  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7136  02B6  30FF               	movlw	255
  7137  02B7  00CC               	movwf	runVoltageModeControl@propMult+4
  7138  02B8  00CD               	movwf	runVoltageModeControl@propMult+5
  7139  02B9  00CE               	movwf	runVoltageModeControl@propMult+6
  7140  02BA  00CF               	movwf	runVoltageModeControl@propMult+7
  7141  02BB                     i1l2268:
  7142                           
  7143                           ;Controller.c: 139:    voltageModeVariables.proportionalOutput = propMult >> 9u;
  7144  02BB  3048               	movlw	low runVoltageModeControl@propMult
  7145  02BC  0086               	movwf	6
  7146  02BD  3000               	movlw	high runVoltageModeControl@propMult
  7147  02BE  0087               	movwf	7
  7148  02BF  3F40               	moviw [0]fsr1
  7149  02C0  00B0               	movwf	??_runVoltageModeControl
  7150  02C1  3F41               	moviw [1]fsr1
  7151  02C2  00B1               	movwf	??_runVoltageModeControl+1
  7152  02C3  3F42               	moviw [2]fsr1
  7153  02C4  00B2               	movwf	??_runVoltageModeControl+2
  7154  02C5  3F43               	moviw [3]fsr1
  7155  02C6  00B3               	movwf	??_runVoltageModeControl+3
  7156  02C7  3F44               	moviw [4]fsr1
  7157  02C8  00B4               	movwf	??_runVoltageModeControl+4
  7158  02C9  3F45               	moviw [5]fsr1
  7159  02CA  00B5               	movwf	??_runVoltageModeControl+5
  7160  02CB  3F46               	moviw [6]fsr1
  7161  02CC  00B6               	movwf	??_runVoltageModeControl+6
  7162  02CD  3F47               	moviw [7]fsr1
  7163  02CE  00B7               	movwf	??_runVoltageModeControl+7
  7164  02CF  3009               	movlw	9
  7165  02D0  00B8               	movwf	??_runVoltageModeControl+8
  7166  02D1                     u198_25:
  7167  02D1  0020               	movlb	0	; select bank0
  7168  02D2  37B7               	asrf	??_runVoltageModeControl+7,f
  7169  02D3  0CB6               	rrf	??_runVoltageModeControl+6,f
  7170  02D4  0CB5               	rrf	??_runVoltageModeControl+5,f
  7171  02D5  0CB4               	rrf	??_runVoltageModeControl+4,f
  7172  02D6  0CB3               	rrf	??_runVoltageModeControl+3,f
  7173  02D7  0CB2               	rrf	??_runVoltageModeControl+2,f
  7174  02D8  0CB1               	rrf	??_runVoltageModeControl+1,f
  7175  02D9  0CB0               	rrf	??_runVoltageModeControl,f
  7176  02DA                     u198_20:
  7177  02DA  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7178  02DB  2AD1               	goto	u198_25
  7179  02DC  0020               	movlb	0	; select bank0
  7180  02DD  0833               	movf	??_runVoltageModeControl+3,w
  7181  02DE  0021               	movlb	1	; select bank1
  7182  02DF  00BF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7183  02E0  0020               	movlb	0	; select bank0
  7184  02E1  0832               	movf	??_runVoltageModeControl+2,w
  7185  02E2  0021               	movlb	1	; select bank1
  7186  02E3  00BE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7187  02E4  0020               	movlb	0	; select bank0
  7188  02E5  0831               	movf	??_runVoltageModeControl+1,w
  7189  02E6  0021               	movlb	1	; select bank1
  7190  02E7  00BD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7191  02E8  0020               	movlb	0	; select bank0
  7192  02E9  0830               	movf	??_runVoltageModeControl,w
  7193  02EA  0021               	movlb	1	; select bank1
  7194  02EB  00BC               	movwf	(_voltageModeVariables^(0+128)+6)
  7195  02EC                     i1l2270:
  7196                           
  7197                           ;Controller.c: 141:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7198  02EC  0840               	movf	(_voltageModeVariables^(0+128)+10),w
  7199  02ED  073C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7200  02EE  0020               	movlb	0	; select bank0
  7201  02EF  00B0               	movwf	??_runVoltageModeControl
  7202  02F0  0021               	movlb	1	; select bank1
  7203  02F1  0841               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7204  02F2  3D3D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7205  02F3  0020               	movlb	0	; select bank0
  7206  02F4  00B1               	movwf	??_runVoltageModeControl+1
  7207  02F5  0021               	movlb	1	; select bank1
  7208  02F6  0842               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7209  02F7  3D3E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7210  02F8  0020               	movlb	0	; select bank0
  7211  02F9  00B2               	movwf	??_runVoltageModeControl+2
  7212  02FA  0021               	movlb	1	; select bank1
  7213  02FB  0843               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7214  02FC  3D3F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7215  02FD  0020               	movlb	0	; select bank0
  7216  02FE  00B3               	movwf	??_runVoltageModeControl+3
  7217  02FF  0833               	movf	??_runVoltageModeControl+3,w
  7218  0300  0021               	movlb	1	; select bank1
  7219  0301  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7220  0302  0020               	movlb	0	; select bank0
  7221  0303  0832               	movf	??_runVoltageModeControl+2,w
  7222  0304  0021               	movlb	1	; select bank1
  7223  0305  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7224  0306  0020               	movlb	0	; select bank0
  7225  0307  0831               	movf	??_runVoltageModeControl+1,w
  7226  0308  0021               	movlb	1	; select bank1
  7227  0309  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7228  030A  0020               	movlb	0	; select bank0
  7229  030B  0830               	movf	??_runVoltageModeControl,w
  7230  030C  0021               	movlb	1	; select bank1
  7231  030D  00CC               	movwf	(_voltageModeVariables^(0+128)+22)
  7232  030E                     i1l2272:
  7233                           
  7234                           ;Controller.c: 142:    voltageModeVariables.previousError = voltageModeVariables.error;
  7235  030E  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7236  030F  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7237  0310  0836               	movf	_voltageModeVariables^(0+128),w
  7238  0311  00D0               	movwf	(_voltageModeVariables^(0+128)+26)
  7239  0312                     i1l460:
  7240  0312  0008               	return
  7241  0313                     __end_of_runVoltageModeControl:
  7242                           
  7243                           	psect	text31
  7244  0DBB                     __ptext31:	
  7245 ;; *************** function i1_readGPIO *****************
  7246 ;; Defined at:
  7247 ;;		line 79 in file "GPIO.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;  gpioNumber      1    wreg     const enum E2798
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7252 ;;  portType        1    7[COMMON] unsigned char 
  7253 ;;  portNumber      1    6[COMMON] unsigned char 
  7254 ;;  returnValueB    1    5[COMMON] unsigned char 
  7255 ;;  readB           1    4[COMMON] unsigned char 
  7256 ;;  returnValueA    1    3[COMMON] unsigned char 
  7257 ;;  readA           1    2[COMMON] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      _Bool 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7267 ;;      Params:         0       0       0       0       0       0
  7268 ;;      Locals:         7       0       0       0       0       0
  7269 ;;      Temps:          2       0       0       0       0       0
  7270 ;;      Totals:         9       0       0       0       0       0
  7271 ;;Total ram usage:        9 bytes
  7272 ;; Hardware stack levels used: 1
  7273 ;; This function calls:
  7274 ;;		Nothing
  7275 ;; This function is called by:
  7276 ;;		_runVoltageModeControl
  7277 ;;		_currentTripRead
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281  0DBB                     i1_readGPIO:	
  7282                           ;psect for function i1_readGPIO
  7283                           
  7284                           
  7285                           ;incstack = 0
  7286                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7287                           ;i1readGPIO@gpioNumber stored from wreg
  7288  0DBB  00F8               	movwf	i1readGPIO@gpioNumber
  7289  0DBC                     i1l2102:
  7290                           
  7291                           ;GPIO.c: 81:     uint8_t portType = 0;
  7292  0DBC  01F7               	clrf	i1readGPIO@portType
  7293  0DBD                     i1l2104:
  7294                           
  7295                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7296  0DBD  3008               	movlw	8
  7297  0DBE  0278               	subwf	i1readGPIO@gpioNumber,w
  7298  0DBF  1C03               	skipc
  7299  0DC0  2DC2               	goto	u159_21
  7300  0DC1  2DC3               	goto	u159_20
  7301  0DC2                     u159_21:
  7302  0DC2  2DCB               	goto	i1l2110
  7303  0DC3                     u159_20:
  7304  0DC3                     i1l2106:
  7305                           
  7306                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7307  0DC3  0878               	movf	i1readGPIO@gpioNumber,w
  7308  0DC4  3EF8               	addlw	248
  7309  0DC5  00F0               	movwf	??i1_readGPIO
  7310  0DC6  0870               	movf	??i1_readGPIO,w
  7311  0DC7  00F6               	movwf	i1readGPIO@portNumber
  7312  0DC8                     i1l2108:
  7313                           
  7314                           ;GPIO.c: 84:         portType = 1;
  7315  0DC8  01F7               	clrf	i1readGPIO@portType
  7316  0DC9  0AF7               	incf	i1readGPIO@portType,f
  7317                           
  7318                           ;GPIO.c: 85:     }
  7319  0DCA  2DD0               	goto	i1l2114
  7320  0DCB                     i1l2110:
  7321                           
  7322                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7323  0DCB  0878               	movf	i1readGPIO@gpioNumber,w
  7324  0DCC  00F0               	movwf	??i1_readGPIO
  7325  0DCD  0870               	movf	??i1_readGPIO,w
  7326  0DCE  00F6               	movwf	i1readGPIO@portNumber
  7327  0DCF                     i1l2112:
  7328                           
  7329                           ;GPIO.c: 88:         portType = 0;
  7330  0DCF  01F7               	clrf	i1readGPIO@portType
  7331  0DD0                     i1l2114:
  7332                           
  7333                           ;GPIO.c: 91:     if(portType == 0){
  7334  0DD0  0877               	movf	i1readGPIO@portType,w
  7335  0DD1  1D03               	btfss	3,2
  7336  0DD2  2DD4               	goto	u160_21
  7337  0DD3  2DD5               	goto	u160_20
  7338  0DD4                     u160_21:
  7339  0DD4  2DE8               	goto	i1l2126
  7340  0DD5                     u160_20:
  7341  0DD5                     i1l2116:
  7342                           
  7343                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7344  0DD5  0020               	movlb	0	; select bank0
  7345  0DD6  080C               	movf	12,w	;volatile
  7346  0DD7  00F0               	movwf	??i1_readGPIO
  7347  0DD8  0870               	movf	??i1_readGPIO,w
  7348  0DD9  00F2               	movwf	i1readGPIO@readA
  7349  0DDA                     i1l2118:
  7350                           
  7351                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7352  0DDA  0872               	movf	i1readGPIO@readA,w
  7353  0DDB  00F0               	movwf	??i1_readGPIO
  7354  0DDC  0A76               	incf	i1readGPIO@portNumber,w
  7355  0DDD  2DDF               	goto	u161_24
  7356  0DDE                     u161_25:
  7357  0DDE  36F0               	lsrf	??i1_readGPIO,f
  7358  0DDF                     u161_24:
  7359  0DDF  0B89               	decfsz	9,f
  7360  0DE0  2DDE               	goto	u161_25
  7361  0DE1  0870               	movf	??i1_readGPIO,w
  7362  0DE2  3901               	andlw	1
  7363  0DE3  00F1               	movwf	??i1_readGPIO+1
  7364  0DE4  0871               	movf	??i1_readGPIO+1,w
  7365  0DE5  00F3               	movwf	i1readGPIO@returnValueA
  7366  0DE6                     i1l2120:
  7367                           
  7368                           ;GPIO.c: 94:         return returnValueA;
  7369  0DE6  0873               	movf	i1readGPIO@returnValueA,w
  7370  0DE7  2E01               	goto	i1l324
  7371  0DE8                     i1l2126:
  7372  0DE8  0377               	decf	i1readGPIO@portType,w
  7373  0DE9  1D03               	btfss	3,2
  7374  0DEA  2DEC               	goto	u162_21
  7375  0DEB  2DED               	goto	u162_20
  7376  0DEC                     u162_21:
  7377  0DEC  2E00               	goto	i1l2138
  7378  0DED                     u162_20:
  7379  0DED                     i1l2128:
  7380                           
  7381                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7382  0DED  0020               	movlb	0	; select bank0
  7383  0DEE  080D               	movf	13,w	;volatile
  7384  0DEF  00F0               	movwf	??i1_readGPIO
  7385  0DF0  0870               	movf	??i1_readGPIO,w
  7386  0DF1  00F4               	movwf	i1readGPIO@readB
  7387  0DF2                     i1l2130:
  7388                           
  7389                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7390  0DF2  0874               	movf	i1readGPIO@readB,w
  7391  0DF3  00F0               	movwf	??i1_readGPIO
  7392  0DF4  0A76               	incf	i1readGPIO@portNumber,w
  7393  0DF5  2DF7               	goto	u163_24
  7394  0DF6                     u163_25:
  7395  0DF6  36F0               	lsrf	??i1_readGPIO,f
  7396  0DF7                     u163_24:
  7397  0DF7  0B89               	decfsz	9,f
  7398  0DF8  2DF6               	goto	u163_25
  7399  0DF9  0870               	movf	??i1_readGPIO,w
  7400  0DFA  3901               	andlw	1
  7401  0DFB  00F1               	movwf	??i1_readGPIO+1
  7402  0DFC  0871               	movf	??i1_readGPIO+1,w
  7403  0DFD  00F5               	movwf	i1readGPIO@returnValueB
  7404  0DFE                     i1l2132:
  7405                           
  7406                           ;GPIO.c: 99:         return returnValueB;
  7407  0DFE  0875               	movf	i1readGPIO@returnValueB,w
  7408  0DFF  2E01               	goto	i1l324
  7409  0E00                     i1l2138:
  7410  0E00  3000               	movlw	0
  7411  0E01                     i1l324:
  7412  0E01  0008               	return
  7413  0E02                     __end_ofi1_readGPIO:
  7414                           
  7415                           	psect	text32
  7416  0D80                     __ptext32:	
  7417 ;; *************** function _convertRawToMilliVolts *****************
  7418 ;; Defined at:
  7419 ;;		line 53 in file "Controller.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  rawValue        2   12[COMMON] unsigned short 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  vsenseMult      4    5[BANK0 ] long 
  7424 ;;  returnValued    2   11[BANK0 ] short 
  7425 ;;  offsetted       2    9[BANK0 ] short 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  2   12[COMMON] short 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7435 ;;      Params:         2       0       0       0       0       0
  7436 ;;      Locals:         0       8       0       0       0       0
  7437 ;;      Temps:          0       5       0       0       0       0
  7438 ;;      Totals:         2      13       0       0       0       0
  7439 ;;Total ram usage:       15 bytes
  7440 ;; Hardware stack levels used: 1
  7441 ;; Hardware stack levels required when called: 1
  7442 ;; This function calls:
  7443 ;;		___lmul
  7444 ;; This function is called by:
  7445 ;;		_runVoltageModeControl
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449  0D80                     _convertRawToMilliVolts:	
  7450                           ;psect for function _convertRawToMilliVolts
  7451                           
  7452  0D80                     i1l2050:	
  7453                           ;incstack = 0
  7454                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7455                           
  7456                           
  7457                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7458  0D80  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7459  0D81  0020               	movlb	0	; select bank0
  7460  0D82  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7461  0D83  087C               	movf	convertRawToMilliVolts@rawValue,w
  7462  0D84  00A9               	movwf	convertRawToMilliVolts@offsetted
  7463  0D85                     i1l2052:
  7464                           
  7465                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7466  0D85  0829               	movf	convertRawToMilliVolts@offsetted,w
  7467  0D86  00F0               	movwf	___lmul@multiplier
  7468  0D87  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7469  0D88  00F1               	movwf	___lmul@multiplier+1
  7470  0D89  0D89               	rlf	9,f
  7471  0D8A  3B89               	subwfb	9,f
  7472  0D8B  0989               	comf	9,f
  7473  0D8C  00F2               	movwf	___lmul@multiplier+2
  7474  0D8D  00F3               	movwf	___lmul@multiplier+3
  7475  0D8E  3000               	movlw	0
  7476  0D8F  00F7               	movwf	___lmul@multiplicand+3
  7477  0D90  3000               	movlw	0
  7478  0D91  00F6               	movwf	___lmul@multiplicand+2
  7479  0D92  3017               	movlw	23
  7480  0D93  00F5               	movwf	___lmul@multiplicand+1
  7481  0D94  30D4               	movlw	212
  7482  0D95  00F4               	movwf	___lmul@multiplicand
  7483  0D96  318D  2518  318D   	fcall	___lmul
  7484  0D99  0873               	movf	?___lmul+3,w
  7485  0D9A  0020               	movlb	0	; select bank0
  7486  0D9B  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7487  0D9C  0872               	movf	?___lmul+2,w
  7488  0D9D  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7489  0D9E  0871               	movf	?___lmul+1,w
  7490  0D9F  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7491  0DA0  0870               	movf	?___lmul,w
  7492  0DA1  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7493  0DA2                     i1l2054:
  7494                           
  7495                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7496  0DA2  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7497  0DA3  00A0               	movwf	??_convertRawToMilliVolts
  7498  0DA4  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7499  0DA5  00A1               	movwf	??_convertRawToMilliVolts+1
  7500  0DA6  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7501  0DA7  00A2               	movwf	??_convertRawToMilliVolts+2
  7502  0DA8  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7503  0DA9  00A3               	movwf	??_convertRawToMilliVolts+3
  7504  0DAA  3008               	movlw	8
  7505  0DAB  00A4               	movwf	??_convertRawToMilliVolts+4
  7506  0DAC                     u145_25:
  7507  0DAC  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7508  0DAD  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7509  0DAE  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7510  0DAF  0CA0               	rrf	??_convertRawToMilliVolts,f
  7511  0DB0                     u145_20:
  7512  0DB0  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7513  0DB1  2DAC               	goto	u145_25
  7514  0DB2  0821               	movf	??_convertRawToMilliVolts+1,w
  7515  0DB3  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7516  0DB4  0820               	movf	??_convertRawToMilliVolts,w
  7517  0DB5  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7518  0DB6                     i1l2056:
  7519                           
  7520                           ;Controller.c: 57:     return returnValuedV;
  7521  0DB6  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7522  0DB7  00FD               	movwf	?_convertRawToMilliVolts+1
  7523  0DB8  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7524  0DB9  00FC               	movwf	?_convertRawToMilliVolts
  7525  0DBA                     i1l438:
  7526  0DBA  0008               	return
  7527  0DBB                     __end_of_convertRawToMilliVolts:
  7528                           
  7529                           	psect	text33
  7530  0D18                     __ptext33:	
  7531 ;; *************** function ___lmul *****************
  7532 ;; Defined at:
  7533 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  multiplier      4    0[COMMON] unsigned long 
  7536 ;;  multiplicand    4    4[COMMON] unsigned long 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  product         4    8[COMMON] unsigned long 
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  4    0[COMMON] unsigned long 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2, status,0
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7548 ;;      Params:         8       0       0       0       0       0
  7549 ;;      Locals:         4       0       0       0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0
  7551 ;;      Totals:        12       0       0       0       0       0
  7552 ;;Total ram usage:       12 bytes
  7553 ;; Hardware stack levels used: 1
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_runPotScaling
  7558 ;;		_convertRawToMilliVolts
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562  0D18                     ___lmul:	
  7563                           ;psect for function ___lmul
  7564                           
  7565  0D18                     i1l2008:	
  7566                           ;incstack = 0
  7567                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7568                           
  7569  0D18  3000               	movlw	0
  7570  0D19  00FB               	movwf	___lmul@product+3
  7571  0D1A  3000               	movlw	0
  7572  0D1B  00FA               	movwf	___lmul@product+2
  7573  0D1C  3000               	movlw	0
  7574  0D1D  00F9               	movwf	___lmul@product+1
  7575  0D1E  3000               	movlw	0
  7576  0D1F  00F8               	movwf	___lmul@product
  7577  0D20                     i1l2010:
  7578  0D20  1C70               	btfss	___lmul@multiplier,0
  7579  0D21  2D23               	goto	u132_21
  7580  0D22  2D24               	goto	u132_20
  7581  0D23                     u132_21:
  7582  0D23  2D2C               	goto	i1l2014
  7583  0D24                     u132_20:
  7584  0D24                     i1l2012:
  7585  0D24  0874               	movf	___lmul@multiplicand,w
  7586  0D25  07F8               	addwf	___lmul@product,f
  7587  0D26  0875               	movf	___lmul@multiplicand+1,w
  7588  0D27  3DF9               	addwfc	___lmul@product+1,f
  7589  0D28  0876               	movf	___lmul@multiplicand+2,w
  7590  0D29  3DFA               	addwfc	___lmul@product+2,f
  7591  0D2A  0877               	movf	___lmul@multiplicand+3,w
  7592  0D2B  3DFB               	addwfc	___lmul@product+3,f
  7593  0D2C                     i1l2014:
  7594  0D2C  3001               	movlw	1
  7595  0D2D                     u133_25:
  7596  0D2D  35F4               	lslf	___lmul@multiplicand,f
  7597  0D2E  0DF5               	rlf	___lmul@multiplicand+1,f
  7598  0D2F  0DF6               	rlf	___lmul@multiplicand+2,f
  7599  0D30  0DF7               	rlf	___lmul@multiplicand+3,f
  7600  0D31  0B89               	decfsz	9,f
  7601  0D32  2D2D               	goto	u133_25
  7602  0D33                     i1l2016:
  7603  0D33  3001               	movlw	1
  7604  0D34                     u134_25:
  7605  0D34  36F3               	lsrf	___lmul@multiplier+3,f
  7606  0D35  0CF2               	rrf	___lmul@multiplier+2,f
  7607  0D36  0CF1               	rrf	___lmul@multiplier+1,f
  7608  0D37  0CF0               	rrf	___lmul@multiplier,f
  7609  0D38  0B89               	decfsz	9,f
  7610  0D39  2D34               	goto	u134_25
  7611  0D3A  0873               	movf	___lmul@multiplier+3,w
  7612  0D3B  0472               	iorwf	___lmul@multiplier+2,w
  7613  0D3C  0471               	iorwf	___lmul@multiplier+1,w
  7614  0D3D  0470               	iorwf	___lmul@multiplier,w
  7615  0D3E  1D03               	skipz
  7616  0D3F  2D41               	goto	u135_21
  7617  0D40  2D42               	goto	u135_20
  7618  0D41                     u135_21:
  7619  0D41  2D20               	goto	i1l2010
  7620  0D42                     u135_20:
  7621  0D42                     i1l2018:
  7622  0D42  087B               	movf	___lmul@product+3,w
  7623  0D43  00F3               	movwf	?___lmul+3
  7624  0D44  087A               	movf	___lmul@product+2,w
  7625  0D45  00F2               	movwf	?___lmul+2
  7626  0D46  0879               	movf	___lmul@product+1,w
  7627  0D47  00F1               	movwf	?___lmul+1
  7628  0D48  0878               	movf	___lmul@product,w
  7629  0D49  00F0               	movwf	?___lmul
  7630  0D4A                     i1l731:
  7631  0D4A  0008               	return
  7632  0D4B                     __end_of___lmul:
  7633                           
  7634                           	psect	text34
  7635  0C0A                     __ptext34:	
  7636 ;; *************** function _abs *****************
  7637 ;; Defined at:
  7638 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  a               2    0[COMMON] int 
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  2    0[COMMON] int 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2, status,0
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7652 ;;      Params:         2       0       0       0       0       0
  7653 ;;      Locals:         0       0       0       0       0       0
  7654 ;;      Temps:          2       0       0       0       0       0
  7655 ;;      Totals:         4       0       0       0       0       0
  7656 ;;Total ram usage:        4 bytes
  7657 ;; Hardware stack levels used: 1
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_runVoltageModeControl
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665  0C0A                     _abs:	
  7666                           ;psect for function _abs
  7667                           
  7668  0C0A                     i1l2060:	
  7669                           ;incstack = 0
  7670                           ; Regs used in _abs: [wreg+status,2+status,0]
  7671                           
  7672  0C0A  0871               	movf	abs@a+1,w
  7673  0C0B  3A80               	xorlw	128
  7674  0C0C  00F2               	movwf	??_abs
  7675  0C0D  3080               	movlw	128
  7676  0C0E  0272               	subwf	??_abs,w
  7677  0C0F  1D03               	skipz
  7678  0C10  2C13               	goto	u146_25
  7679  0C11  3001               	movlw	1
  7680  0C12  0270               	subwf	abs@a,w
  7681  0C13                     u146_25:
  7682  0C13  1803               	skipnc
  7683  0C14  2C16               	goto	u146_21
  7684  0C15  2C17               	goto	u146_20
  7685  0C16                     u146_21:
  7686  0C16  2C23               	goto	i1l1177
  7687  0C17                     u146_20:
  7688  0C17                     i1l2062:
  7689  0C17  0970               	comf	abs@a,w
  7690  0C18  00F2               	movwf	??_abs
  7691  0C19  0971               	comf	abs@a+1,w
  7692  0C1A  00F3               	movwf	??_abs+1
  7693  0C1B  0AF2               	incf	??_abs,f
  7694  0C1C  1903               	skipnz
  7695  0C1D  0AF3               	incf	??_abs+1,f
  7696  0C1E  0872               	movf	??_abs,w
  7697  0C1F  00F0               	movwf	?_abs
  7698  0C20  0873               	movf	??_abs+1,w
  7699  0C21  00F1               	movwf	?_abs+1
  7700  0C22  2C23               	goto	i1l1180
  7701  0C23                     i1l1177:
  7702  0C23                     i1l1180:
  7703  0C23  0008               	return
  7704  0C24                     __end_of_abs:
  7705                           
  7706                           	psect	text35
  7707  0E4C                     __ptext35:	
  7708 ;; *************** function ___omul *****************
  7709 ;; Defined at:
  7710 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7713 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  product         8    1[COMMON] unsigned long long 
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  8    0[BANK0 ] unsigned long long 
  7718 ;; Registers used:
  7719 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7725 ;;      Params:         0      16       0       0       0       0
  7726 ;;      Locals:         8       0       0       0       0       0
  7727 ;;      Temps:          1       0       0       0       0       0
  7728 ;;      Totals:         9      16       0       0       0       0
  7729 ;;Total ram usage:       25 bytes
  7730 ;; Hardware stack levels used: 1
  7731 ;; This function calls:
  7732 ;;		Nothing
  7733 ;; This function is called by:
  7734 ;;		_runVoltageModeControl
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738  0E4C                     ___omul:	
  7739                           ;psect for function ___omul
  7740                           
  7741  0E4C                     i1l2064:	
  7742                           ;incstack = 0
  7743                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7744                           
  7745  0E4C  3071               	movlw	low ___omul@product
  7746  0E4D  0086               	movwf	6
  7747  0E4E  3000               	movlw	high ___omul@product
  7748  0E4F  0087               	movwf	7
  7749  0E50  3008               	movlw	8
  7750  0E51  00F0               	movwf	??___omul
  7751  0E52  3000               	movlw	0
  7752  0E53                     u147_20:
  7753  0E53  001E               	movwi fsr1++
  7754  0E54  0BF0               	decfsz	??___omul,f
  7755  0E55  2E53               	goto	u147_20
  7756  0E56                     i1l2066:
  7757  0E56  0020               	movlb	0	; select bank0
  7758  0E57  1C20               	btfss	___omul@multiplier,0
  7759  0E58  2E5A               	goto	u148_21
  7760  0E59  2E5B               	goto	u148_20
  7761  0E5A                     u148_21:
  7762  0E5A  2E6B               	goto	i1l2070
  7763  0E5B                     u148_20:
  7764  0E5B                     i1l2068:
  7765  0E5B  0828               	movf	___omul@multiplicand,w
  7766  0E5C  07F1               	addwf	___omul@product,f
  7767  0E5D  0829               	movf	___omul@multiplicand+1,w
  7768  0E5E  3DF2               	addwfc	___omul@product+1,f
  7769  0E5F  082A               	movf	___omul@multiplicand+2,w
  7770  0E60  3DF3               	addwfc	___omul@product+2,f
  7771  0E61  082B               	movf	___omul@multiplicand+3,w
  7772  0E62  3DF4               	addwfc	___omul@product+3,f
  7773  0E63  082C               	movf	___omul@multiplicand+4,w
  7774  0E64  3DF5               	addwfc	___omul@product+4,f
  7775  0E65  082D               	movf	___omul@multiplicand+5,w
  7776  0E66  3DF6               	addwfc	___omul@product+5,f
  7777  0E67  082E               	movf	___omul@multiplicand+6,w
  7778  0E68  3DF7               	addwfc	___omul@product+6,f
  7779  0E69  082F               	movf	___omul@multiplicand+7,w
  7780  0E6A  3DF8               	addwfc	___omul@product+7,f
  7781  0E6B                     i1l2070:
  7782  0E6B  35A8               	lslf	___omul@multiplicand,f
  7783  0E6C  0DA9               	rlf	___omul@multiplicand+1,f
  7784  0E6D  0DAA               	rlf	___omul@multiplicand+2,f
  7785  0E6E  0DAB               	rlf	___omul@multiplicand+3,f
  7786  0E6F  0DAC               	rlf	___omul@multiplicand+4,f
  7787  0E70  0DAD               	rlf	___omul@multiplicand+5,f
  7788  0E71  0DAE               	rlf	___omul@multiplicand+6,f
  7789  0E72  0DAF               	rlf	___omul@multiplicand+7,f
  7790  0E73                     i1l2072:
  7791  0E73  36A7               	lsrf	___omul@multiplier+7,f
  7792  0E74  0CA6               	rrf	___omul@multiplier+6,f
  7793  0E75  0CA5               	rrf	___omul@multiplier+5,f
  7794  0E76  0CA4               	rrf	___omul@multiplier+4,f
  7795  0E77  0CA3               	rrf	___omul@multiplier+3,f
  7796  0E78  0CA2               	rrf	___omul@multiplier+2,f
  7797  0E79  0CA1               	rrf	___omul@multiplier+1,f
  7798  0E7A  0CA0               	rrf	___omul@multiplier,f
  7799  0E7B  0820               	movf	___omul@multiplier,w
  7800  0E7C  0421               	iorwf	___omul@multiplier+1,w
  7801  0E7D  0422               	iorwf	___omul@multiplier+2,w
  7802  0E7E  0423               	iorwf	___omul@multiplier+3,w
  7803  0E7F  0424               	iorwf	___omul@multiplier+4,w
  7804  0E80  0425               	iorwf	___omul@multiplier+5,w
  7805  0E81  0426               	iorwf	___omul@multiplier+6,w
  7806  0E82  0427               	iorwf	___omul@multiplier+7,w
  7807  0E83  1D03               	skipz
  7808  0E84  2E86               	goto	u149_21
  7809  0E85  2E87               	goto	u149_20
  7810  0E86                     u149_21:
  7811  0E86  2E56               	goto	i1l2066
  7812  0E87                     u149_20:
  7813  0E87                     i1l736:
  7814  0E87  0871               	movf	___omul@product,w
  7815  0E88  00A0               	movwf	?___omul
  7816  0E89  0872               	movf	___omul@product+1,w
  7817  0E8A  00A1               	movwf	?___omul+1
  7818  0E8B  0873               	movf	___omul@product+2,w
  7819  0E8C  00A2               	movwf	?___omul+2
  7820  0E8D  0874               	movf	___omul@product+3,w
  7821  0E8E  00A3               	movwf	?___omul+3
  7822  0E8F  0875               	movf	___omul@product+4,w
  7823  0E90  00A4               	movwf	?___omul+4
  7824  0E91  0876               	movf	___omul@product+5,w
  7825  0E92  00A5               	movwf	?___omul+5
  7826  0E93  0877               	movf	___omul@product+6,w
  7827  0E94  00A6               	movwf	?___omul+6
  7828  0E95  0878               	movf	___omul@product+7,w
  7829  0E96  00A7               	movwf	?___omul+7
  7830  0E97                     i1l737:
  7831  0E97  0008               	return
  7832  0E98                     __end_of___omul:
  7833                           
  7834                           	psect	text36
  7835  0C5D                     __ptext36:	
  7836 ;; *************** function ___wmul *****************
  7837 ;; Defined at:
  7838 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  multiplier      2    0[COMMON] unsigned int 
  7841 ;;  multiplicand    2    2[COMMON] unsigned int 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  product         2    4[COMMON] unsigned int 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  2    0[COMMON] unsigned int 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7853 ;;      Params:         4       0       0       0       0       0
  7854 ;;      Locals:         2       0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0
  7856 ;;      Totals:         6       0       0       0       0       0
  7857 ;;Total ram usage:        6 bytes
  7858 ;; Hardware stack levels used: 1
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_runPotScaling
  7863 ;;		_controlRoutine
  7864 ;;		_convertRawToMilliAmps
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868  0C5D                     ___wmul:	
  7869                           ;psect for function ___wmul
  7870                           
  7871  0C5D                     i1l2296:	
  7872                           ;incstack = 0
  7873                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7874                           
  7875  0C5D  01F4               	clrf	___wmul@product
  7876  0C5E  01F5               	clrf	___wmul@product+1
  7877  0C5F                     i1l2298:
  7878  0C5F  1C70               	btfss	___wmul@multiplier,0
  7879  0C60  2C62               	goto	u205_21
  7880  0C61  2C63               	goto	u205_20
  7881  0C62                     u205_21:
  7882  0C62  2C67               	goto	i1l717
  7883  0C63                     u205_20:
  7884  0C63                     i1l2300:
  7885  0C63  0872               	movf	___wmul@multiplicand,w
  7886  0C64  07F4               	addwf	___wmul@product,f
  7887  0C65  0873               	movf	___wmul@multiplicand+1,w
  7888  0C66  3DF5               	addwfc	___wmul@product+1,f
  7889  0C67                     i1l717:
  7890  0C67  3001               	movlw	1
  7891  0C68                     u206_25:
  7892  0C68  35F2               	lslf	___wmul@multiplicand,f
  7893  0C69  0DF3               	rlf	___wmul@multiplicand+1,f
  7894  0C6A  0B89               	decfsz	9,f
  7895  0C6B  2C68               	goto	u206_25
  7896  0C6C                     i1l2302:
  7897  0C6C  3001               	movlw	1
  7898  0C6D                     u207_25:
  7899  0C6D  36F1               	lsrf	___wmul@multiplier+1,f
  7900  0C6E  0CF0               	rrf	___wmul@multiplier,f
  7901  0C6F  0B89               	decfsz	9,f
  7902  0C70  2C6D               	goto	u207_25
  7903  0C71                     i1l2304:
  7904  0C71  0870               	movf	___wmul@multiplier,w
  7905  0C72  0471               	iorwf	___wmul@multiplier+1,w
  7906  0C73  1D03               	btfss	3,2
  7907  0C74  2C76               	goto	u208_21
  7908  0C75  2C77               	goto	u208_20
  7909  0C76                     u208_21:
  7910  0C76  2C5F               	goto	i1l2298
  7911  0C77                     u208_20:
  7912  0C77                     i1l2306:
  7913  0C77  0875               	movf	___wmul@product+1,w
  7914  0C78  00F1               	movwf	?___wmul+1
  7915  0C79  0874               	movf	___wmul@product,w
  7916  0C7A  00F0               	movwf	?___wmul
  7917  0C7B                     i1l719:
  7918  0C7B  0008               	return
  7919  0C7C                     __end_of___wmul:
  7920                           
  7921                           	psect	text37
  7922  0F4A                     __ptext37:	
  7923 ;; *************** function ___lldiv *****************
  7924 ;; Defined at:
  7925 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  divisor         4    6[COMMON] unsigned long 
  7928 ;;  dividend        4   10[COMMON] unsigned long 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  quotient        4    1[BANK0 ] unsigned long 
  7931 ;;  counter         1    5[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  4    6[COMMON] unsigned long 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7941 ;;      Params:         8       0       0       0       0       0
  7942 ;;      Locals:         0       5       0       0       0       0
  7943 ;;      Temps:          0       1       0       0       0       0
  7944 ;;      Totals:         8       6       0       0       0       0
  7945 ;;Total ram usage:       14 bytes
  7946 ;; Hardware stack levels used: 1
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		_runPotScaling
  7951 ;;		_controlRoutine
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955  0F4A                     ___lldiv:	
  7956                           ;psect for function ___lldiv
  7957                           
  7958  0F4A                     i1l2310:	
  7959                           ;incstack = 0
  7960                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7961                           
  7962  0F4A  3000               	movlw	0
  7963  0F4B  0020               	movlb	0	; select bank0
  7964  0F4C  00A4               	movwf	___lldiv@quotient+3
  7965  0F4D  3000               	movlw	0
  7966  0F4E  00A3               	movwf	___lldiv@quotient+2
  7967  0F4F  3000               	movlw	0
  7968  0F50  00A2               	movwf	___lldiv@quotient+1
  7969  0F51  3000               	movlw	0
  7970  0F52  00A1               	movwf	___lldiv@quotient
  7971  0F53  0879               	movf	___lldiv@divisor+3,w
  7972  0F54  0478               	iorwf	___lldiv@divisor+2,w
  7973  0F55  0477               	iorwf	___lldiv@divisor+1,w
  7974  0F56  0476               	iorwf	___lldiv@divisor,w
  7975  0F57  1903               	skipnz
  7976  0F58  2F5A               	goto	u209_21
  7977  0F59  2F5B               	goto	u209_20
  7978  0F5A                     u209_21:
  7979  0F5A  2F9C               	goto	i1l2330
  7980  0F5B                     u209_20:
  7981  0F5B                     i1l2312:
  7982  0F5B  01A5               	clrf	___lldiv@counter
  7983  0F5C  0AA5               	incf	___lldiv@counter,f
  7984  0F5D  2F69               	goto	i1l2316
  7985  0F5E                     i1l2314:
  7986  0F5E  3001               	movlw	1
  7987  0F5F                     u210_25:
  7988  0F5F  35F6               	lslf	___lldiv@divisor,f
  7989  0F60  0DF7               	rlf	___lldiv@divisor+1,f
  7990  0F61  0DF8               	rlf	___lldiv@divisor+2,f
  7991  0F62  0DF9               	rlf	___lldiv@divisor+3,f
  7992  0F63  0B89               	decfsz	9,f
  7993  0F64  2F5F               	goto	u210_25
  7994  0F65  3001               	movlw	1
  7995  0F66  00A0               	movwf	??___lldiv
  7996  0F67  0820               	movf	??___lldiv,w
  7997  0F68  07A5               	addwf	___lldiv@counter,f
  7998  0F69                     i1l2316:
  7999  0F69  1FF9               	btfss	___lldiv@divisor+3,7
  8000  0F6A  2F6C               	goto	u211_21
  8001  0F6B  2F6D               	goto	u211_20
  8002  0F6C                     u211_21:
  8003  0F6C  2F5E               	goto	i1l2314
  8004  0F6D                     u211_20:
  8005  0F6D                     i1l2318:
  8006  0F6D  3001               	movlw	1
  8007  0F6E                     u212_25:
  8008  0F6E  35A1               	lslf	___lldiv@quotient,f
  8009  0F6F  0DA2               	rlf	___lldiv@quotient+1,f
  8010  0F70  0DA3               	rlf	___lldiv@quotient+2,f
  8011  0F71  0DA4               	rlf	___lldiv@quotient+3,f
  8012  0F72  0B89               	decfsz	9,f
  8013  0F73  2F6E               	goto	u212_25
  8014  0F74                     i1l2320:
  8015  0F74  0879               	movf	___lldiv@divisor+3,w
  8016  0F75  027D               	subwf	___lldiv@dividend+3,w
  8017  0F76  1D03               	skipz
  8018  0F77  2F82               	goto	u213_25
  8019  0F78  0878               	movf	___lldiv@divisor+2,w
  8020  0F79  027C               	subwf	___lldiv@dividend+2,w
  8021  0F7A  1D03               	skipz
  8022  0F7B  2F82               	goto	u213_25
  8023  0F7C  0877               	movf	___lldiv@divisor+1,w
  8024  0F7D  027B               	subwf	___lldiv@dividend+1,w
  8025  0F7E  1D03               	skipz
  8026  0F7F  2F82               	goto	u213_25
  8027  0F80  0876               	movf	___lldiv@divisor,w
  8028  0F81  027A               	subwf	___lldiv@dividend,w
  8029  0F82                     u213_25:
  8030  0F82  1C03               	skipc
  8031  0F83  2F85               	goto	u213_21
  8032  0F84  2F86               	goto	u213_20
  8033  0F85                     u213_21:
  8034  0F85  2F8F               	goto	i1l2326
  8035  0F86                     u213_20:
  8036  0F86                     i1l2322:
  8037  0F86  0876               	movf	___lldiv@divisor,w
  8038  0F87  02FA               	subwf	___lldiv@dividend,f
  8039  0F88  0877               	movf	___lldiv@divisor+1,w
  8040  0F89  3BFB               	subwfb	___lldiv@dividend+1,f
  8041  0F8A  0878               	movf	___lldiv@divisor+2,w
  8042  0F8B  3BFC               	subwfb	___lldiv@dividend+2,f
  8043  0F8C  0879               	movf	___lldiv@divisor+3,w
  8044  0F8D  3BFD               	subwfb	___lldiv@dividend+3,f
  8045  0F8E                     i1l2324:
  8046  0F8E  1421               	bsf	___lldiv@quotient,0
  8047  0F8F                     i1l2326:
  8048  0F8F  3001               	movlw	1
  8049  0F90                     u214_25:
  8050  0F90  36F9               	lsrf	___lldiv@divisor+3,f
  8051  0F91  0CF8               	rrf	___lldiv@divisor+2,f
  8052  0F92  0CF7               	rrf	___lldiv@divisor+1,f
  8053  0F93  0CF6               	rrf	___lldiv@divisor,f
  8054  0F94  0B89               	decfsz	9,f
  8055  0F95  2F90               	goto	u214_25
  8056  0F96                     i1l2328:
  8057  0F96  3001               	movlw	1
  8058  0F97  02A5               	subwf	___lldiv@counter,f
  8059  0F98  1D03               	btfss	3,2
  8060  0F99  2F9B               	goto	u215_21
  8061  0F9A  2F9C               	goto	u215_20
  8062  0F9B                     u215_21:
  8063  0F9B  2F6D               	goto	i1l2318
  8064  0F9C                     u215_20:
  8065  0F9C                     i1l2330:
  8066  0F9C  0824               	movf	___lldiv@quotient+3,w
  8067  0F9D  00F9               	movwf	?___lldiv+3
  8068  0F9E  0823               	movf	___lldiv@quotient+2,w
  8069  0F9F  00F8               	movwf	?___lldiv+2
  8070  0FA0  0822               	movf	___lldiv@quotient+1,w
  8071  0FA1  00F7               	movwf	?___lldiv+1
  8072  0FA2  0821               	movf	___lldiv@quotient,w
  8073  0FA3  00F6               	movwf	?___lldiv
  8074  0FA4                     i1l753:
  8075  0FA4  0008               	return
  8076  0FA5                     __end_of___lldiv:
  8077  007E                     btemp	set	126	;btemp
  8078  007E                     int$flags	set	126
  8079  007E                     wtemp0	set	126
  8080                           
  8081                           	psect	idloc
  8082                           
  8083                           ;Config register IDLOC0 @ 0x8000
  8084                           ;	unspecified, using default values
  8085  8000                     	org	32768
  8086  8000  3FFF               	dw	16383
  8087                           
  8088                           ;Config register IDLOC1 @ 0x8001
  8089                           ;	unspecified, using default values
  8090  8001                     	org	32769
  8091  8001  3FFF               	dw	16383
  8092                           
  8093                           ;Config register IDLOC2 @ 0x8002
  8094                           ;	unspecified, using default values
  8095  8002                     	org	32770
  8096  8002  3FFF               	dw	16383
  8097                           
  8098                           ;Config register IDLOC3 @ 0x8003
  8099                           ;	unspecified, using default values
  8100  8003                     	org	32771
  8101  8003  3FFF               	dw	16383
  8102                           
  8103                           	psect	config
  8104                           
  8105                           ;Config register CONFIG1 @ 0x8007
  8106                           ;	Oscillator Selection
  8107                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8108                           ;	Watchdog Timer Enable
  8109                           ;	WDTE = OFF, WDT disabled
  8110                           ;	Power-up Timer Enable
  8111                           ;	PWRTE = OFF, PWRT disabled
  8112                           ;	MCLR Pin Function Select
  8113                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8114                           ;	Flash Program Memory Code Protection
  8115                           ;	CP = OFF, Program memory code protection is disabled
  8116                           ;	Data Memory Code Protection
  8117                           ;	CPD = OFF, Data memory code protection is disabled
  8118                           ;	Brown-out Reset Enable
  8119                           ;	BOREN = ON, Brown-out Reset enabled
  8120                           ;	Clock Out Enable
  8121                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8122                           ;	Internal/External Switchover
  8123                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8124                           ;	Fail-Safe Clock Monitor Enable
  8125                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8126  8007                     	org	32775
  8127  8007  0FA4               	dw	4004
  8128                           
  8129                           ;Config register CONFIG2 @ 0x8008
  8130                           ;	Flash Memory Self-Write Protection
  8131                           ;	WRT = OFF, Write protection off
  8132                           ;	PLL Enable
  8133                           ;	PLLEN = OFF, 4x PLL disabled
  8134                           ;	Stack Overflow/Underflow Reset Enable
  8135                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8136                           ;	Brown-out Reset Voltage Selection
  8137                           ;	BORV = 0x1, unprogrammed default
  8138                           ;	Low-Voltage Programming Enable
  8139                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8140  8008                     	org	32776
  8141  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      79
    BANK1            80     13      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    8949
                                             62 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    2564
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      12    12      0    3594
                                             50 BANK0     12    12      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    1444
                                             16 BANK0     34    34      0
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     715
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     548
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Aug 11 11:06:17 2023

                ___wmul@multiplicand 0072                                  l118 0D7D  
                                l232 0BC1                                  l304 060F  
                                l241 0675                                  l137 0599  
                                l236 0637                                  l324 0E4B  
                                l172 0C3F                                  l318 06D5  
                                l510 0C9B                                  l428 0C5C  
                                l532 0C09                                  l356 0BEF  
                                l199 0BDD                                  l561 0BD5  
                                l564 0BCE                                  l558 0BBB  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C0A                                  wreg 0009  
                __end_ofi1_writeGPIO 0735                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D3                           i1_readGPIO 0DBB  
                               ?_abs 0070                                 l2030 0687  
                               l2022 0678                                 l2040 06A3  
                               l2032 068B                                 l2024 0679  
                               l2042 06B1                                 l2034 068C  
                               l2026 067F                                 l2044 06B6  
                               l2036 0691                                 l2028 0684  
                               l2150 05AB                                 l2142 059C  
                               l2046 06BB                                 l2038 0696  
                               l2160 05D3                                 l2152 05AF  
                               l2144 059D                                 l2048 06C8  
                               l2170 0612                                 l2162 05E0  
                               l2154 05B0                                 l2146 05A3  
                               l2180 0622                                 l2172 0615  
                               l2164 05E5                                 l2156 05B5  
                               l2148 05A8                                 l2190 063C  
                               l2182 0628                                 l2174 061B  
                               l2166 05EA                                 l2158 05BA  
                               l2192 0641                                 l2184 062E  
                               l2176 061F                                 l2168 0603  
                               l2600 0565                                 l2194 0659  
                               l2186 0633                                 l2178 0620  
                               l2274 0BFC                                 l2196 065E  
                               l2188 0635                                 l2276 0C02  
                               l2540 04DB                                 l2604 056E  
                               l2620 0C2D                                 l2612 0C24  
                               l2550 04F6                                 l2542 04E4  
                               l2534 04D7                                 l2630 0C37  
                               l2622 0C2F                                 l2614 0C27  
                               l2640 0BBC                                 l2560 050E  
                               l2552 04F7                                 l2544 04E8  
                               l2536 04D8                                 l2632 0C38  
                               l2624 0C30                                 l2616 0C29  
                               l2642 0C7C                                 l2650 0E04  
                               l2570 0521                                 l2562 0512  
                               l2554 0500                                 l2546 04E9  
                               l2538 04DA                                 l2634 0C3A  
                               l2626 0C33                                 l2618 0C2B  
                               l2730 0D4B                                 l2644 0BE7  
                               l2660 0E17                                 l2652 0E05  
                               l2580 053C                                 l2572 052A  
                               l2564 0513                                 l2556 0504  
                               l2548 04F2                                 l2628 0C35  
                               l2636 0BD6                                 l2740 0D5B  
                               l2732 0D4F                                 l2646 0C40  
                               l2662 0E18                                 l2654 0E0B  
                               l2822 0576                                 l2590 0554  
                               l2582 053D                                 l2574 052E  
                               l2566 051C                                 l2558 0505  
                               l2638 0BDB                                 l2750 0D6D  
                               l2742 0D5E                                 l2734 0D52  
                               l2648 0C4B                                 l2680 0E48  
                               l2664 0E1D                                 l2656 0E10  
                               l2592 0556                                 l2584 0546  
                               l2576 052F                                 l2568 0520  
                               l2752 0D76                                 l2744 0D61  
                               l2736 0D55                                 l2666 0E23  
                               l2674 0E31                                 l2658 0E13  
                               l2594 0557                                 l2586 054A  
                               l2578 0538                                 l2690 0BCF  
                               l2746 0D67                                 l2738 0D58  
                               l2676 0E36                                 l2668 0E2F  
                               l2596 0560                                 l2588 054B  
                               l2692 0BC8                                 l2756 0D7A  
                               l2748 0D6D                                 l2678 0E3C  
                               l2686 0E4A                                 l2598 0564  
                               l2694 0BB8                                 STR_1 07EB  
                               u1410 06B6                                 u1411 06B5  
                               u1420 06BB                                 u1404 06A8  
                               u1421 06BA                                 u1405 06A7  
                               _LATA 010C                                 _LATB 010D  
                               u1360 067F                                 u1361 067E  
                               u1434 06C0                                 u1370 0691  
                               u1435 06BF                                 u1371 0690  
                               u1700 05E5                                 u1444 06CD  
                               u1380 0696                                 u1701 05E4  
                               u1445 06CC                                 u1381 0695  
                               u1710 05EA                                 u1711 05E9  
                               u1640 05A3                                 u2504 0E41  
                               u1641 05A2                                 u2505 0E40  
                               u1650 05B5                                 u1394 069B  
                               u1651 05B4                                 u1395 069A  
                               u1820 065E                                 u1804 0646  
                               u1724 05EF                                 u1660 05BA  
                               u2460 0E0B                                 u1821 065D  
                               u1805 0645                                 u1725 05EE  
                               u1661 05B9                                 u2461 0E0A  
                               u1814 0651                                 u1750 061B  
                               u1734 05FA                                 u2470 0E1D  
                               u1815 0650                                 u1751 061A  
                               u1735 05F9                                 u2471 0E1C  
                               u1760 0628                                 u1744 0608  
                               u1761 0627                                 u1745 0607  
                               u1834 0663                                 u1770 062E  
                               u1674 05BF                                 u2490 0E36  
                               u1835 0662                                 u1771 062D  
                               u1675 05BE                                 u2491 0E35  
                               u1844 066E                                 u1780 063C  
                               u1684 05CA                                 u2484 0E28  
                               u1845 066D                                 u1781 063B  
                               u1685 05C9                                 u2485 0E27  
                               u1790 0641                                 u1694 05D8  
                               u2590 0D76                                 u1791 0640  
                               u1695 05D7                                 u2591 0D75  
          _transToVoltageModeControl 0BCF                      _filteredFreqPot 00AE  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0D4B                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0086            ??_setupInternalOscillator 00D2  
                              ??_abs 0072                                ?_main 00DB  
                    __end_of___lldiv 0FA5                                i1l108 0084  
                              i1l250 0F35                                i1l324 0E01  
                              i1l244 0EFF                                i1l253 0F49  
                              i1l245 0F12                                i1l318 0734  
                              i1l175 0CEA                                i1l249 0F33  
                              i1l370 07EA                                i1l515 0D17  
                              i1l363 0FFF                                i1l435 078F  
                              i1l460 0312                                i1l452 04D4  
                              i1l532 0BFB                                i1l438 0DBA  
                              i1l446 04B6                                i1l447 04D4  
                              i1l543 0CBF                                i1l375 03EF  
                              i1l529 0EEF                                i1l377 03FE  
                              i1l731 0D4A                                i1l717 0C67  
                              i1l719 0C7B                                i1l567 0BE6  
                              i1l736 0E87                                i1l753 0FA4  
                              i1l737 0E97                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_750 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00D5  
                _initialiseADCModule 0BBC                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00D7                      __initialization 0088  
                       __end_of_main 0D80                    ?_initialiseADCPin 0070  
              _integratorScaledLimit 00A0                          i1_writeGPIO 06D6  
                             ??_main 00DF                   ??_initialiseADCPin 00D2  
           __end_of_readFilteredVout 0790                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00D8      __end_of_setupInternalOscillator 059A  
setupInternalOscillator@selectedFreq 00D4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2010 0D20  
                             i1l2012 0D24                               i1l2100 0727  
                             i1l2014 0D2C                               i1l2110 0DCB  
                             i1l2102 0DBC                               i1l2016 0D33  
                             i1l2008 0D18                               i1l2120 0DE6  
                             i1l2112 0DCF                               i1l2104 0DBD  
                             i1l2200 0EF3                               i1l2018 0D42  
                             i1l2050 0D80                               i1l2130 0DF2  
                             i1l2114 0DD0                               i1l2106 0DC3  
                             i1l2210 0F10                               i1l2202 0EF9  
                             i1l2300 0C63                               i1l1180 0C23  
                             i1l2060 0C0A                               i1l2052 0D85  
                             i1l2132 0DFE                               i1l2116 0DD5  
                             i1l2108 0DC8                               i1l2212 0F17  
                             i1l2204 0EFD                               i1l2310 0F4A  
                             i1l2302 0C6C                               i1l2070 0E6B  
                             i1l2062 0C17                               i1l2054 0DA2  
                             i1l2118 0DDA                               i1l2126 0DE8  
                             i1l2230 0F3D                               i1l2214 0F19  
                             i1l2206 0F05                               i1l2320 0F74  
                             i1l2312 0F5B                               i1l2304 0C71  
                             i1l2072 0E73                               i1l2064 0E4C  
                             i1l2056 0DB6                               i1l2128 0DED  
                             u200_20 0CF6                               i1l2080 06E3  
                             i1l2232 0F41                               i1l2224 0F29  
                             i1l2216 0F1D                               i1l2208 0F0B  
                             i1l2400 0EB1                               i1l1177 0C23  
                             i1l2322 0F86                               i1l2314 0F5E  
                             i1l2330 0F9C                               i1l2306 0C77  
                             i1l2066 0E56                               i1l2138 0E00  
                             i1l2250 011B                               i1l2242 00B4  
                             i1l2090 06F5                               i1l2082 06E6  
                             i1l2074 06D7                               i1l2234 0F42  
                             i1l2226 0F2D                               i1l2218 0F28  
                             i1l2410 0ED2                               i1l2402 0EC1  
                             i1l2324 0F8E                               i1l2316 0F69  
                             i1l2068 0E5B                               i1l2260 01CA  
                             i1l2252 012A                               i1l2244 00CA  
                             i1l2092 0702                               i1l2084 06EA  
                             i1l2076 06D8                               i1l2340 0CA4  
                             i1l2228 0F39                               i1l2412 0ED6  
                             i1l2326 0F8F                               i1l2318 0F6D  
                             i1l2270 02EC                               i1l2262 0217  
                             i1l2254 0185                               i1l2246 00D9  
                             i1l2094 0710                               i1l2086 06EB  
                             i1l2078 06DE                               i1l2334 0BF0  
                             i1l2342 0CAF                               i1l2238 0F47  
                             i1l2510 07A0                               i1l2502 0790  
                             i1l2414 0EDC                               i1l2430 074F  
                             i1l2350 0CC0                               i1l2328 0F96  
                             i1l2272 030E                               i1l2264 0267  
                             i1l2256 01AF                               i1l2248 00E7  
                             i1l2360 040C                               i1l2280 0D09  
                             u201_20 0D04                               i1l2096 0715  
                             i1l2088 06F0                               i1l2336 0BF5  
                             i1l2344 0CB3                               i1l2512 07A4  
                             i1l2408 0EC2                               i1l2440 0762  
                             i1l2432 0758                               i1l2424 0737  
                             i1l2352 0CC3                               u201_21 0D02  
                             i1l2266 0299                               i1l2258 01BF  
                             i1l2362 040E                               i1l2282 0D0B  
                             i1l2098 071A                               i1l2346 0CB7  
                             i1l2338 0C9C                               i1l2530 07D7  
                             i1l2514 07AA                               i1l2442 0772  
                             i1l2434 0761                               i1l2426 0745  
                             i1l2418 0735                               i1l2450 0313  
                             i1l2354 0CCE                               i1l2268 02BB  
                             i1l2380 04BA                               i1l2364 0414  
                             i1l2372 044F                               i1l2356 03FF  
                             i1l2284 0D10                               i1l2292 0BDE  
                             i1l2348 0CBD                               i1l2524 07BD  
                             i1l2516 07B3                               i1l2508 0792  
                             i1l2444 0776                               i1l2428 0749  
                             i1l2460 03B4                               i1l2452 0319  
                             i1l2700 0021                               i1l2374 04A9  
                             i1l2366 0417                               i1l2358 0406  
                             i1l2286 0D15                               i1l2278 0CEB  
                             i1l2294 0BE2                               i1l2198 0EF1  
                             i1l2470 0FA5                               i1l2526 07CD  
                             i1l2518 07BC                               i1l2446 077C  
                             i1l2462 03E1                               i1l2454 0323  
                             i1l2710 003D                               i1l2702 0024  
                             i1l2296 0C5D                               i1l2384 04C5  
                             i1l2376 04AD                               i1l2368 041C  
                             i1l2288 0D16                               u202_20 0D05  
                             i1l2480 0FB9                               i1l2528 07D1  
                             i1l2464 03EB                               i1l2456 037A  
                             i1l2720 0063                               i1l2712 0045  
                             i1l2704 0029                               i1l2298 0C5F  
                             i1l2386 04CF                               i1l2378 04B1  
                             i1l2482 0FBF                               i1l2394 0E99  
                             i1l2466 03F9                               i1l2458 0387  
                             i1l2722 006E                               i1l2714 004A  
                             i1l2706 002F                               i1l2492 0FD2  
                             i1l2484 0FC8                               i1l2476 0FA7  
                             i1l2396 0EA7                               i1l2388 0E98  
                             i1l2468 03FD                               i1l2724 0073  
                             i1l2716 004D                               i1l2708 0035  
                             u210_25 0F5F                               i1l2494 0FE2  
                             i1l2486 0FD1                               i1l2478 0FB5  
                             i1l2398 0EAB                               i1l2718 0053  
                             i1l2726 0078                               u211_20 0F6D  
                             u203_20 0D10                               i1l2496 0FE6  
                             i1l2728 0083                               u211_21 0F6C  
                             u203_21 0D0F                               i1l2498 0FEC  
                             u132_20 0D24                               u204_20 0D15  
                             i1l2696 0006                               u132_21 0D23  
                             u204_21 0D14                               i1l2698 001B  
                             u220_24 0CEA                               u212_25 0F6E  
                             u213_20 0F86                               u205_20 0C63  
                             u221_20 0406                               u213_21 0F85  
                             u205_21 0C62                               u221_21 0405  
                             u213_25 0F82                               u133_25 0D2D  
                             u222_20 040C                               u150_20 06DE  
                             u230_20 0EE9                               u222_21 040B  
                             u150_21 06DD                               u214_25 0F90  
                             u206_25 0C68                               u134_25 0D34  
                             u230_25 0EE5                               u215_20 0F9C  
                             u135_20 0D42                               u223_20 0414  
                             u151_20 06F0                               u231_20 074F  
                             u215_21 0F9B                               u135_21 0D41  
                             u223_21 0413                               u151_21 06EF  
                             u231_21 074E                               u207_25 0C6D  
                             u208_20 0C77                               u160_20 0DD5  
                             u224_20 04B1                               u152_20 06F5  
                             u216_20 0CA4                               u240_20 0FBF  
                             u232_20 077C                               u208_21 0C76  
                             u160_21 0DD4                               u224_21 04B0  
                             u152_21 06F4                               u216_21 0CA3  
                             u240_21 0FBE                               u232_21 077B  
                             u209_20 0F5B                               u145_20 0DB0  
                             u225_20 04BA                               u217_20 0CAF  
                             u241_20 0FEC                               u233_20 0789  
                             u209_21 0F5A                               u225_21 04B9  
                             u217_21 0CAE                               u241_21 0FEB  
                             u161_24 0DDF                               u153_24 06FA  
                             u145_25 0DAC                               u161_25 0DDE  
                             u153_25 06F9                               u233_25 0785  
                             u146_20 0C17                               u162_20 0DED  
                             u226_20 04C4                               u218_20 0CBD  
                             u242_20 0FF9                               u234_20 0319  
                             u146_21 0C16                               u162_21 0DEC  
                             u226_21 04C3                               u218_21 0CBC  
                             u234_21 0318                               u154_24 0707  
                             u146_25 0C13                               u226_25 04C0  
                             u154_25 0706                               u242_25 0FF5  
                             u147_20 0E53                               u227_20 04CF  
                             u155_20 0715                               u243_20 07AA  
                             u235_20 0323                               u219_20 0CE8  
                             u251_20 0021                               u227_21 04CE  
                             u155_21 0714                               u243_21 07A9  
                             u235_21 0322                               u219_21 0CE5  
                             u251_21 0020                               u163_24 0DF7  
                             u163_25 0DF6                               u227_25 04CB  
                             u148_20 0E5B                               u156_20 071A  
                             u244_20 07D7                               u228_20 0EB1  
                             u236_20 0345                               u252_20 002F  
                             u148_21 0E5A                               u156_21 0719  
                             u244_21 07D6                               u228_21 0EB0  
                             u252_21 002E                               u236_25 0341  
                             u149_20 0E87                               u245_20 07E4  
                             u229_20 0EDC                               u237_20 0374  
                             u253_20 004A                               u149_21 0E86  
                             u229_21 0EDB                               u253_21 0049  
                             u157_24 071F                               u157_25 071E  
                             u245_25 07E0                               u237_25 0370  
                             u190_20 0F33                               u238_20 03EB  
                             u254_20 0053                               u190_21 0F32  
                             u238_21 03EA                               u254_21 0052  
                             u158_24 072C                               u158_25 072B  
                             u238_25 03E7                               u159_20 0DC3  
                             u191_20 0F39                               u239_20 03F9  
                             u255_20 006A                               u159_21 0DC2  
                             u191_21 0F38                               u239_21 03F8  
                             u255_21 0068                               u239_25 03F5  
                             u192_20 00CA                               u256_20 006B  
                             u192_21 00C9                               u193_20 01AF  
                             u185_20 0EF9                               u257_20 007F  
                             u193_21 01AE                               u185_21 0EF8  
                             u257_21 007D                               u193_23 01AB  
                             u194_20 01CA                               u186_20 0F05  
                             u258_20 0080                               u194_21 01C9  
                             u186_21 0F04                               u195_20 0217  
                             u187_20 0F0B                               u195_21 0216  
                             u187_21 0F0A                               u195_23 0213  
                             u196_20 0287                               u188_20 0F17  
                             u188_21 0F16                      ??_runPotScaling 0026  
                             u196_25 027E                               u197_20 02AA  
                             u197_25 02A6                               u189_25 0F20  
                             u198_20 02DA                               u198_25 02D1  
                             u199_20 0CF5                               u199_21 0CF3  
            initialiseGPIO@direction 00D2                     readGPIO@portType 00D9  
                readADCRaw@gpioValid 0077                               ___lmul 0D18  
                             ___omul 0E4C                               ___wmul 0C5D  
                          ??___lldiv 0020                     __end_of_readGPIO 0E4C  
                     _controlRoutine 03FF                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D2             _initialisePotentiometers 0BE7  
         initialiseADCPin@portNumber 00D6                     __end_of_setupPWM 0C40  
                    _currentTripRead 0CEB           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00B0               __end_of_controlRoutine 04D5  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00D4  
              i1writeGPIO@gpioNumber 0074                        _currentILFIFO 0120  
                     _OPTION_REGbits 0095                    __end_of_Tick490Hz 0086  
              _runVoltageModeControl 00B4                           __pbssBANK0 005F  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pmaintext 0D4B                      ?_controlRoutine 0070  
                            ?___lmul 0070                              ?___omul 0020  
                            ?___wmul 0070    __end_of_transToVoltageModeControl 0BD6  
           ??_convertRawToMilliVolts 0020                           __pintentry 0004  
                            _CCP1CON 0293                  ___omul@multiplicand 0028  
                     ___lmul@product 0078              __end_of_currentTripRead 0D18  
        __end_of_setPWMDutyandPeriod 0CEB     __end_of_initialiseCurrentSensors 0C9C  
         __end_ofi1_currentTripReset 0BFC             initialiseADCPin@portType 00D5  
            _transToOverCurrentFault 0BDE                   i1readGPIO@portType 0077  
              readFilteredVout@i_831 0028                i1writeGPIO@portNumber 0075  
                         _filteredIL 00B0                            ?_readGPIO 0070  
                         _readADCRaw 0EF0                  _readFilteredFreqPot 0790  
               i1readGPIO@gpioNumber 0078                  _readFilteredDutyPot 0FA5  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00D6                              ___lldiv 0F4A  
                       ?i1_writeGPIO 0070                 ?_readFilteredFreqPot 007A  
                            __ptext1 0BCF                              __ptext2 0BB8  
                            __ptext3 0BC8                              __ptext4 0BD6  
                            __ptext5 0C24                              __ptext6 04D5  
                            __ptext7 0E02                              __ptext8 0BE7  
                            __ptext9 0C7C                 ?_readFilteredDutyPot 007A  
       __end_of_initialiseController 0C5D                            _T2CONbits 001C  
                  ?_readFilteredVout 007A                              _setDuty 0063  
              i1writeGPIO@writeValue 0070               ?_runVoltageModeControl 0070  
                            _tripIDS 006B                   ??_readFilteredVout 0020  
                       ??i1_readGPIO 0070                              clrloop0 0BC3  
               end_of_initialization 00B0      convertRawToMilliVolts@offsetted 0029  
                         ??_readGPIO 00D2                       ___omul@product 0071  
           ?_setupInternalOscillator 0070                      ___lldiv@divisor 0076  
                    ___lldiv@counter 0025                     _currentTripCount 0069  
                         ??_setupPWM 00D8                     _currentTripReset 0BFC  
         ??_initialisePotentiometers 00D8                           _prevPeriod 006D  
                  writeGPIO@portType 00D5                       _readFilteredIL 0E98  
                 __end_ofi1_readGPIO 0E02                ??_readFilteredFreqPot 0020  
              ??_readFilteredDutyPot 0020                 i1readGPIO@portNumber 0076  
                   ?_currentTripRead 0070                    __end_of_writeGPIO 06D6  
          ??_transToOverCurrentFault 0070             initialiseGPIO@portNumber 00D7  
                       _filteredVout 005F          ??_transToCurrentModeControl 00D2  
                        ?_readADCRaw 0070                    _transToPotControl 0BB8  
                        _CCP1CONbits 0293                        readGPIO@readA 00D4  
                      readGPIO@readB 00D6                __end_of_runPotScaling 03FF  
                 ?_transToPotControl 0070            ?_initialiseCurrentSensors 0070  
               _voltageModeVariables 00B6               __end_of_readFilteredIL 0EF0  
                ??_transToPotControl 00D2                       __end_of___lmul 0D4B  
        __end_of_initialiseADCModule 0BC2                       __end_of___omul 0E98  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0C7C  
              controlRoutine@minDuty 005A                       _clockFrequency 00A8  
                start_initialization 0088         __end_of_setupTimer0Interrupt 0BDE  
                     _currentIDSFIFO 0140                          __end_of_abs 0C24  
                          _Tick490Hz 0004               _convertRawToMilliVolts 0D80  
          __end_of_transToPotControl 0BBC     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0BE7           __end_of_currentTripMonitor 0CC0  
               _initialiseController 0C40                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0BC8                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D2  
                         ?_Tick490Hz 0070                     _initialiseADCPin 0610  
                       _currentState 006C                   i1_currentTripReset 0BF0  
                 readGPIO@gpioNumber 00DA                ?_initialiseController 0070  
                     _initialiseGPIO 059A                      i1readGPIO@readA 0072  
                    i1readGPIO@readB 0074     __end_of_initialisePotentiometers 0BF0  
                ?i1_currentTripReset 0070                             ?___lldiv 0076  
         ?_transToVoltageModeControl 0070      runVoltageModeControl@newVoltage 0050  
      runVoltageModeControl@propMult 0048              ??_runVoltageModeControl 0030  
               ??i1_currentTripReset 0076             __end_of_currentTripReset 0C0A  
    readFilteredDutyPot@sumOfSamples 0024                       ___wmul@product 0074  
             __end_of_initialiseGPIO 0610                            clear_ram0 0BC2  
                          _setPeriod 006E                             _PIE1bits 0091  
       setPWMDutyandPeriod@dutyCycle 0070                 _setupTimer0Interrupt 0BD6  
  runVoltageModeControl@integralMult 0040                  _currentTripRead$913 007A  
                        _filteredIDS 00B2                           _ADCON0bits 009D  
                  ___wmul@multiplier 0070                   readGPIO@portNumber 00D8  
                        _freqPotFIFO 01A0                            _writeGPIO 0676  
                        ??_Tick490Hz 005E                    ___lmul@multiplier 0070  
                       ??_readADCRaw 0072               ??_initialiseController 00D8  
                    ?_initialiseGPIO 00D2         readFilteredVout@sumOfSamples 0024  
                  readADCRaw@channel 0076                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 07EB          __end_of_readFilteredDutyPot 1000  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
                writeGPIO@gpioNumber 00D6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0F4A             readFilteredFreqPot@i_754 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00D2  
                           __ptext10 0BFC                             __ptext11 0676  
                           __ptext20 0E98                             __ptext12 0C40  
                           __ptext21 0790                             __ptext13 059A  
                           __ptext30 00B4                             __ptext22 0FA5  
                           __ptext14 0610                             __ptext31 0DBB  
                           __ptext23 0EF0                             __ptext15 0BBC  
                           __ptext32 0D80                             __ptext24 0C9C  
                           __ptext33 0D18                             __ptext25 0BF0  
                           __ptext17 0CC0                             __ptext34 0C0A  
                           __ptext26 06D6                             __ptext18 0313  
                           __ptext35 0E4C                             __ptext27 0BDE  
                           __ptext19 0735                             __ptext36 0C5D  
                           __ptext28 0CEB                             __ptext37 0F4A  
                           __ptext29 03FF            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0E02  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00B4                             _setupPWM 0C24  
                           int$flags 007E                             _slotTest 0065  
           __end_of_initialiseADCPin 0676                             main@argc 00DB  
           ?_transToOverCurrentFault 0070                             main@argv 00DD  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                 _currentTripMonitor 0C9C                     _timerSlotQuarter 0066  
     __end_of_convertRawToMilliVolts 0DBB                           _INTCONbits 000B  
                ?_currentTripMonitor 0070    __end_of_transToCurrentModeControl 0BCF  
                writeGPIO@portNumber 00D7                             intlevel1 0000  
           _initialiseCurrentSensors 0C7C                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 0735               ??_setupTimer0Interrupt 00D2  
                         _OSCCONbits 0099          controlRoutine@setDuty_unreg 005C  
               ??_currentTripMonitor 007B                          _potSetCount 0068  
                _setPWMDutyandPeriod 0CC0              _setupInternalOscillator 04D5  
        ??_transToVoltageModeControl 00D2                        ??i1_writeGPIO 0071  
                      __pstringtext1 07EB                        __pstringtext2 0000  
                         _OPTION_REG 0095                     ___lldiv@quotient 0021  
      __end_of_runVoltageModeControl 0313                  writeGPIO@writeValue 00D2  
                        ??_writeGPIO 00D3                 ?_setPWMDutyandPeriod 0070  
                  ?_currentTripReset 0070                   ??_currentTripReset 00D8  
              readADCRaw@returnValue 0074                    ??_currentTripRead 0079  
                      _runPotScaling 0313                 readGPIO@returnValueA 00D5  
               readGPIO@returnValueB 00D7                  readFilteredIL@i_921 007A  
                    readFilteredIL@i 007B  
