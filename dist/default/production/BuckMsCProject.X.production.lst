

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Aug 14 17:15:52 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.40
    60                           ; Generated 17/11/2021 GMT
    61                           ; 
    62                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1827 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0212                     	;# 
   183  0213                     	;# 
   184  0213                     	;# 
   185  0214                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0219                     	;# 
   195  021A                     	;# 
   196  021B                     	;# 
   197  021C                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029E                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0318                     	;# 
   224  0318                     	;# 
   225  0319                     	;# 
   226  031A                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  0111                     	;# 
   301  0112                     	;# 
   302  0113                     	;# 
   303  0114                     	;# 
   304  0115                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011D                     	;# 
   312  011E                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0219                     	;# 
   353  021A                     	;# 
   354  021B                     	;# 
   355  021C                     	;# 
   356  021D                     	;# 
   357  021E                     	;# 
   358  021F                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  039A                     	;# 
   389  039C                     	;# 
   390  039D                     	;# 
   391  039E                     	;# 
   392  039F                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  041C                     	;# 
   397  041D                     	;# 
   398  041E                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0219                     	;# 
   511  021A                     	;# 
   512  021B                     	;# 
   513  021C                     	;# 
   514  021D                     	;# 
   515  021E                     	;# 
   516  021F                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0294                     	;# 
   522  0295                     	;# 
   523  0295                     	;# 
   524  0296                     	;# 
   525  0298                     	;# 
   526  0298                     	;# 
   527  0299                     	;# 
   528  029A                     	;# 
   529  029B                     	;# 
   530  029C                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0219                     	;# 
   669  021A                     	;# 
   670  021B                     	;# 
   671  021C                     	;# 
   672  021D                     	;# 
   673  021E                     	;# 
   674  021F                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0294                     	;# 
   680  0295                     	;# 
   681  0295                     	;# 
   682  0296                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029B                     	;# 
   688  029C                     	;# 
   689  029C                     	;# 
   690  029D                     	;# 
   691  029E                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0415                     	;# 
   710  0416                     	;# 
   711  0417                     	;# 
   712  041C                     	;# 
   713  041D                     	;# 
   714  041E                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  001E                     	;# 
   754  001F                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0219                     	;# 
   827  021A                     	;# 
   828  021B                     	;# 
   829  021C                     	;# 
   830  021D                     	;# 
   831  021E                     	;# 
   832  021F                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0295                     	;# 
   840  0296                     	;# 
   841  0298                     	;# 
   842  0298                     	;# 
   843  0299                     	;# 
   844  029A                     	;# 
   845  029B                     	;# 
   846  029C                     	;# 
   847  029C                     	;# 
   848  029D                     	;# 
   849  029E                     	;# 
   850  029E                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0016                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001C                     	;# 
   911  001E                     	;# 
   912  001F                     	;# 
   913  008C                     	;# 
   914  008D                     	;# 
   915  0091                     	;# 
   916  0092                     	;# 
   917  0093                     	;# 
   918  0094                     	;# 
   919  0095                     	;# 
   920  0096                     	;# 
   921  0097                     	;# 
   922  0098                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  0111                     	;# 
   933  0112                     	;# 
   934  0113                     	;# 
   935  0114                     	;# 
   936  0115                     	;# 
   937  0116                     	;# 
   938  0117                     	;# 
   939  0118                     	;# 
   940  0119                     	;# 
   941  011A                     	;# 
   942  011B                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019C                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  0211                     	;# 
   970  0211                     	;# 
   971  0212                     	;# 
   972  0212                     	;# 
   973  0213                     	;# 
   974  0213                     	;# 
   975  0214                     	;# 
   976  0214                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0216                     	;# 
   981  0216                     	;# 
   982  0217                     	;# 
   983  0217                     	;# 
   984  0219                     	;# 
   985  021A                     	;# 
   986  021B                     	;# 
   987  021C                     	;# 
   988  021D                     	;# 
   989  021E                     	;# 
   990  021F                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  039A                     	;# 
  1021  039C                     	;# 
  1022  039D                     	;# 
  1023  039E                     	;# 
  1024  039F                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  041C                     	;# 
  1029  041D                     	;# 
  1030  041E                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011A                     	;# 
  1100  011B                     	;# 
  1101  011D                     	;# 
  1102  011E                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0219                     	;# 
  1143  021A                     	;# 
  1144  021B                     	;# 
  1145  021C                     	;# 
  1146  021D                     	;# 
  1147  021E                     	;# 
  1148  021F                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029C                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  029E                     	;# 
  1167  0311                     	;# 
  1168  0311                     	;# 
  1169  0312                     	;# 
  1170  0313                     	;# 
  1171  0318                     	;# 
  1172  0318                     	;# 
  1173  0319                     	;# 
  1174  031A                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  041C                     	;# 
  1187  041D                     	;# 
  1188  041E                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  0011                     	;# 
  1215  0012                     	;# 
  1216  0013                     	;# 
  1217  0014                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0016                     	;# 
  1221  0017                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  0111                     	;# 
  1249  0112                     	;# 
  1250  0113                     	;# 
  1251  0114                     	;# 
  1252  0115                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0118                     	;# 
  1256  0119                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011D                     	;# 
  1260  011E                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  0191                     	;# 
  1264  0191                     	;# 
  1265  0192                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019D                     	;# 
  1281  019E                     	;# 
  1282  019F                     	;# 
  1283  020C                     	;# 
  1284  020D                     	;# 
  1285  0211                     	;# 
  1286  0211                     	;# 
  1287  0212                     	;# 
  1288  0212                     	;# 
  1289  0213                     	;# 
  1290  0213                     	;# 
  1291  0214                     	;# 
  1292  0214                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  0219                     	;# 
  1301  021A                     	;# 
  1302  021B                     	;# 
  1303  021C                     	;# 
  1304  021D                     	;# 
  1305  021E                     	;# 
  1306  021F                     	;# 
  1307  0291                     	;# 
  1308  0291                     	;# 
  1309  0292                     	;# 
  1310  0293                     	;# 
  1311  0294                     	;# 
  1312  0295                     	;# 
  1313  0295                     	;# 
  1314  0296                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029B                     	;# 
  1320  029C                     	;# 
  1321  029C                     	;# 
  1322  029D                     	;# 
  1323  029E                     	;# 
  1324  029E                     	;# 
  1325  0311                     	;# 
  1326  0311                     	;# 
  1327  0312                     	;# 
  1328  0313                     	;# 
  1329  0318                     	;# 
  1330  0318                     	;# 
  1331  0319                     	;# 
  1332  031A                     	;# 
  1333  0394                     	;# 
  1334  0395                     	;# 
  1335  0396                     	;# 
  1336  039A                     	;# 
  1337  039C                     	;# 
  1338  039D                     	;# 
  1339  039E                     	;# 
  1340  039F                     	;# 
  1341  0415                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  041C                     	;# 
  1345  041D                     	;# 
  1346  041E                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0013                     	;# 
  1375  0014                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008D                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0094                     	;# 
  1393  0095                     	;# 
  1394  0096                     	;# 
  1395  0097                     	;# 
  1396  0098                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  0111                     	;# 
  1407  0112                     	;# 
  1408  0113                     	;# 
  1409  0114                     	;# 
  1410  0115                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  0118                     	;# 
  1414  0119                     	;# 
  1415  011A                     	;# 
  1416  011B                     	;# 
  1417  011D                     	;# 
  1418  011E                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0219                     	;# 
  1459  021A                     	;# 
  1460  021B                     	;# 
  1461  021C                     	;# 
  1462  021D                     	;# 
  1463  021E                     	;# 
  1464  021F                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0294                     	;# 
  1470  0295                     	;# 
  1471  0295                     	;# 
  1472  0296                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029B                     	;# 
  1478  029C                     	;# 
  1479  029C                     	;# 
  1480  029D                     	;# 
  1481  029E                     	;# 
  1482  029E                     	;# 
  1483  0311                     	;# 
  1484  0311                     	;# 
  1485  0312                     	;# 
  1486  0313                     	;# 
  1487  0318                     	;# 
  1488  0318                     	;# 
  1489  0319                     	;# 
  1490  031A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  039A                     	;# 
  1495  039C                     	;# 
  1496  039D                     	;# 
  1497  039E                     	;# 
  1498  039F                     	;# 
  1499  0415                     	;# 
  1500  0416                     	;# 
  1501  0417                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  0011                     	;# 
  1531  0012                     	;# 
  1532  0013                     	;# 
  1533  0014                     	;# 
  1534  0015                     	;# 
  1535  0016                     	;# 
  1536  0016                     	;# 
  1537  0017                     	;# 
  1538  0018                     	;# 
  1539  0019                     	;# 
  1540  001A                     	;# 
  1541  001B                     	;# 
  1542  001C                     	;# 
  1543  001E                     	;# 
  1544  001F                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0098                     	;# 
  1555  0099                     	;# 
  1556  009A                     	;# 
  1557  009B                     	;# 
  1558  009B                     	;# 
  1559  009C                     	;# 
  1560  009D                     	;# 
  1561  009E                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  0111                     	;# 
  1565  0112                     	;# 
  1566  0113                     	;# 
  1567  0114                     	;# 
  1568  0115                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  0118                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011B                     	;# 
  1575  011D                     	;# 
  1576  011E                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  0191                     	;# 
  1580  0191                     	;# 
  1581  0192                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0199                     	;# 
  1589  019A                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  020C                     	;# 
  1600  020D                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  0219                     	;# 
  1617  021A                     	;# 
  1618  021B                     	;# 
  1619  021C                     	;# 
  1620  021D                     	;# 
  1621  021E                     	;# 
  1622  021F                     	;# 
  1623  0291                     	;# 
  1624  0291                     	;# 
  1625  0292                     	;# 
  1626  0293                     	;# 
  1627  0294                     	;# 
  1628  0295                     	;# 
  1629  0295                     	;# 
  1630  0296                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  029B                     	;# 
  1636  029C                     	;# 
  1637  029C                     	;# 
  1638  029D                     	;# 
  1639  029E                     	;# 
  1640  029E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0318                     	;# 
  1646  0318                     	;# 
  1647  0319                     	;# 
  1648  031A                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  039A                     	;# 
  1653  039C                     	;# 
  1654  039D                     	;# 
  1655  039E                     	;# 
  1656  039F                     	;# 
  1657  0415                     	;# 
  1658  0416                     	;# 
  1659  0417                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  000D                     _PORTB	set	13
  1675  000C                     _PORTA	set	12
  1676  001C                     _T2CONbits	set	28
  1677  001B                     _PR2	set	27
  1678  000B                     _INTCONbits	set	11
  1679  009B                     _ADRESL	set	155
  1680  009C                     _ADRESH	set	156
  1681  009D                     _ADCON0bits	set	157
  1682  008D                     _TRISB	set	141
  1683  008C                     _TRISA	set	140
  1684  009E                     _ADCON1	set	158
  1685  009D                     _ADCON0	set	157
  1686  0095                     _OPTION_REG	set	149
  1687  0095                     _OPTION_REGbits	set	149
  1688  0091                     _PIE1bits	set	145
  1689  0099                     _OSCCONbits	set	153
  1690  010D                     _LATB	set	269
  1691  010C                     _LATA	set	268
  1692  011D                     _APFCON0bits	set	285
  1693  018D                     _ANSELB	set	397
  1694  018C                     _ANSELA	set	396
  1695  0293                     _CCP1CONbits	set	659
  1696  0296                     _PSTR1CONbits	set	662
  1697  0291                     _CCPR1L	set	657
  1698  0293                     _CCP1CON	set	659
  1699                           
  1700                           	psect	stringtext1
  1701  07EB                     __pstringtext1:
  1702  07EB                     STR_1:
  1703  07EB  3428               	retlw	40	;'('
  1704  07EC  3428               	retlw	40	;'('
  1705  07ED  3449               	retlw	73	;'I'
  1706  07EE  344E               	retlw	78	;'N'
  1707  07EF  3454               	retlw	84	;'T'
  1708  07F0  3443               	retlw	67	;'C'
  1709  07F1  344F               	retlw	79	;'O'
  1710  07F2  344E               	retlw	78	;'N'
  1711  07F3  3429               	retlw	41	;')'
  1712  07F4  3426               	retlw	38	;'&'
  1713  07F5  3430               	retlw	48	;'0'
  1714  07F6  3437               	retlw	55	;'7'
  1715  07F7  3446               	retlw	70	;'F'
  1716  07F8  3468               	retlw	104	;'h'
  1717  07F9  3429               	retlw	41	;')'
  1718  07FA  342C               	retlw	44	;','
  1719  07FB  3432               	retlw	50	;'2'
  1720  07FC  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext2
  1723  0000                     __pstringtext2:
  1724  07EB                     
  1725                           	psect	cinit
  1726  0088                     start_initialization:	
  1727                           ; #config settings
  1728                           
  1729  0088                     __initialization:
  1730                           
  1731                           ; Clear objects allocated to BANK0
  1732  0088  305F               	movlw	low __pbssBANK0
  1733  0089  0084               	movwf	4
  1734  008A  3000               	movlw	high __pbssBANK0
  1735  008B  0085               	movwf	5
  1736  008C  3010               	movlw	16
  1737  008D  318B  23BF  3180   	fcall	clear_ram0
  1738                           
  1739                           ; Clear objects allocated to BANK1
  1740  0090  30A0               	movlw	low __pbssBANK1
  1741  0091  0084               	movwf	4
  1742  0092  3000               	movlw	high __pbssBANK1
  1743  0093  0085               	movwf	5
  1744  0094  3032               	movlw	50
  1745  0095  318B  23BF  3180   	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK2
  1748  0098  3020               	movlw	low __pbssBANK2
  1749  0099  0084               	movwf	4
  1750  009A  3001               	movlw	high __pbssBANK2
  1751  009B  0085               	movwf	5
  1752  009C  3040               	movlw	64
  1753  009D  318B  23BF  3180   	fcall	clear_ram0
  1754                           
  1755                           ; Clear objects allocated to BANK3
  1756  00A0  30A0               	movlw	low __pbssBANK3
  1757  00A1  0084               	movwf	4
  1758  00A2  3001               	movlw	high __pbssBANK3
  1759  00A3  0085               	movwf	5
  1760  00A4  3040               	movlw	64
  1761  00A5  318B  23BF  3180   	fcall	clear_ram0
  1762                           
  1763                           ; Clear objects allocated to BANK4
  1764  00A8  3020               	movlw	low __pbssBANK4
  1765  00A9  0084               	movwf	4
  1766  00AA  3002               	movlw	high __pbssBANK4
  1767  00AB  0085               	movwf	5
  1768  00AC  3020               	movlw	32
  1769  00AD  318B  23BF  3180   	fcall	clear_ram0
  1770  00B0                     end_of_initialization:	
  1771                           ;End of C runtime variable initialization code
  1772                           
  1773  00B0                     __end_of__initialization:
  1774  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1775  00B1  0020               	movlb	0
  1776  00B2  318D  2D48         	ljmp	_main	;jump to C main() function
  1777                           
  1778                           	psect	bssBANK0
  1779  005F                     __pbssBANK0:
  1780  005F                     _filteredVout:
  1781  005F                     	ds	2
  1782  0061                     _latestIL:
  1783  0061                     	ds	2
  1784  0063                     _setDuty:
  1785  0063                     	ds	2
  1786  0065                     _slotTest:
  1787  0065                     	ds	1
  1788  0066                     _timerSlotQuarter:
  1789  0066                     	ds	1
  1790  0067                     _timerSlotHalf:
  1791  0067                     	ds	1
  1792  0068                     _potSetCount:
  1793  0068                     	ds	1
  1794  0069                     _currentTripCount:
  1795  0069                     	ds	1
  1796  006A                     _tripIL:
  1797  006A                     	ds	1
  1798  006B                     _tripIDS:
  1799  006B                     	ds	1
  1800  006C                     _currentState:
  1801  006C                     	ds	1
  1802  006D                     _prevPeriod:
  1803  006D                     	ds	1
  1804  006E                     _setPeriod:
  1805  006E                     	ds	1
  1806                           
  1807                           	psect	bssBANK1
  1808  00A0                     __pbssBANK1:
  1809  00A0                     _integratorScaledLimit:
  1810  00A0                     	ds	8
  1811  00A8                     _clockFrequency:
  1812  00A8                     	ds	4
  1813  00AC                     _filteredDutyPot:
  1814  00AC                     	ds	2
  1815  00AE                     _filteredFreqPot:
  1816  00AE                     	ds	2
  1817  00B0                     _filteredIL:
  1818  00B0                     	ds	2
  1819  00B2                     _filteredIDS:
  1820  00B2                     	ds	2
  1821  00B4                     _prevDuty:
  1822  00B4                     	ds	2
  1823  00B6                     _voltageModeVariables:
  1824  00B6                     	ds	28
  1825                           
  1826                           	psect	bssBANK2
  1827  0120                     __pbssBANK2:
  1828  0120                     _currentILFIFO:
  1829  0120                     	ds	32
  1830  0140                     _currentIDSFIFO:
  1831  0140                     	ds	32
  1832                           
  1833                           	psect	bssBANK3
  1834  01A0                     __pbssBANK3:
  1835  01A0                     _freqPotFIFO:
  1836  01A0                     	ds	32
  1837  01C0                     _voutFIFO:
  1838  01C0                     	ds	32
  1839                           
  1840                           	psect	bssBANK4
  1841  0220                     __pbssBANK4:
  1842  0220                     _dutyPotFIFO:
  1843  0220                     	ds	32
  1844                           
  1845                           	psect	clrtext
  1846  0BBF                     clear_ram0:	
  1847                           ;	Called with FSR0 containing the base address, and
  1848                           ;	WREG with the size to clear
  1849                           
  1850  0BBF  0064               	clrwdt	;clear the watchdog before getting into this loop
  1851  0BC0                     clrloop0:
  1852  0BC0  0180               	clrf	0	;clear RAM location pointed to by FSR
  1853  0BC1  3101               	addfsr 0,1
  1854  0BC2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1855  0BC3  2BC0               	goto	clrloop0	;have we reached the end yet?
  1856  0BC4  3400               	retlw	0	;all done for this memory range, return
  1857                           
  1858                           	psect	cstackBANK1
  1859  00D2                     __pcstackBANK1:
  1860  00D2                     ?_writeGPIO:
  1861  00D2                     ??_transToInitialising:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  00D2                     ??_setupInternalOscillator:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00D2                     ??_setupTimer0Interrupt:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00D2                     ??_initialiseADCModule:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00D2                     ?_initialiseGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00D2                     ??_readGPIO:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00D2                     ??_transToVoltageModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00D2                     ??_transToCurrentModeControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00D2                     ??_transToPotControl:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00D2                     ??_initialiseADCPin:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00D2                     initialiseGPIO@direction:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00D2                     writeGPIO@writeValue:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x0
  1899  00D2                     	ds	1
  1900  00D3                     ??_writeGPIO:
  1901  00D3                     ??_initialiseGPIO:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1
  1906  00D3                     	ds	1
  1907  00D4                     setupInternalOscillator@selectedFreq:
  1908  00D4                     initialiseADCPin@gpioValid:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911  00D4                     readGPIO@readA:	
  1912                           ; 1 bytes @ 0x2
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x2
  1916  00D4                     	ds	1
  1917  00D5                     initialiseADCPin@portType:
  1918  00D5                     initialiseGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00D5                     writeGPIO@portType:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924  00D5                     readGPIO@returnValueA:	
  1925                           ; 1 bytes @ 0x3
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x3
  1929  00D5                     	ds	1
  1930  00D6                     initialiseADCPin@portNumber:
  1931  00D6                     initialiseGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00D6                     writeGPIO@gpioNumber:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937  00D6                     readGPIO@readB:	
  1938                           ; 1 bytes @ 0x4
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x4
  1942  00D6                     	ds	1
  1943  00D7                     initialiseADCPin@gpioNumber:
  1944  00D7                     initialiseGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00D7                     writeGPIO@portNumber:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  00D7                     readGPIO@returnValueB:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  00D7                     	ds	1
  1956  00D8                     ??_setupPWM:
  1957  00D8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00D8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00D8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00D8                     ??_currentTripReset:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969  00D8                     readGPIO@portNumber:	
  1970                           ; 1 bytes @ 0x6
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x6
  1974  00D8                     	ds	1
  1975  00D9                     readGPIO@portType:
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  00D9                     	ds	1
  1979  00DA                     readGPIO@gpioNumber:
  1980                           
  1981                           ; 1 bytes @ 0x8
  1982  00DA                     	ds	1
  1983  00DB                     ?_main:
  1984  00DB                     main@argc:	
  1985                           ; 2 bytes @ 0x9
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00DB                     	ds	2
  1990  00DD                     main@argv:
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  00DD                     	ds	2
  1994  00DF                     ??_main:
  1995                           
  1996                           	psect	cstackCOMMON
  1997  0070                     __pcstackCOMMON:	
  1998                           ; 1 bytes @ 0xD
  1999                           
  2000  0070                     ?_setPWMDutyandPeriod:
  2001  0070                     ?_controlRoutine:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_runPotScaling:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_transToInitialising:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_setupInternalOscillator:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_setupPWM:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_setupTimer0Interrupt:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_initialiseADCModule:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_initialiseCurrentSensors:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialisePotentiometers:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_initialiseController:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_readGPIO:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_transToVoltageModeControl:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_transToCurrentModeControl:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_transToPotControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_runVoltageModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_currentTripReset:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_transToOverCurrentFault:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_transToOverCurrentFault:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick490Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_currentTripRead:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ??___omul:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_writeGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_readGPIO:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1_currentTripReset:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_currentTripMonitor:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_readFilteredIL:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?_abs:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?_readADCRaw:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?___wmul:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?___lmul:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097  0070                     i1writeGPIO@writeValue:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     setPWMDutyandPeriod@dutyCycle:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___wmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     abs@a:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ___lmul@multiplier:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112                           
  2113                           ; 4 bytes @ 0x0
  2114  0070                     	ds	1
  2115  0071                     ??i1_writeGPIO:
  2116  0071                     ___omul@product:	
  2117                           ; 1 bytes @ 0x1
  2118                           
  2119                           
  2120                           ; 8 bytes @ 0x1
  2121  0071                     	ds	1
  2122  0072                     ??_readFilteredIL:
  2123  0072                     ??_abs:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     ??_readADCRaw:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     setPWMDutyandPeriod@period:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132  0072                     i1readGPIO@readA:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     ___wmul@multiplicand:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x2
  2140  0072                     	ds	1
  2141  0073                     ??_setPWMDutyandPeriod:
  2142  0073                     i1writeGPIO@portType:	
  2143                           ; 1 bytes @ 0x3
  2144                           
  2145  0073                     i1readGPIO@returnValueA:	
  2146                           ; 1 bytes @ 0x3
  2147                           
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  0073                     	ds	1
  2151  0074                     ??___wmul:
  2152  0074                     i1writeGPIO@gpioNumber:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     i1readGPIO@readB:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     readADCRaw@returnValue:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161  0074                     ___wmul@product:	
  2162                           ; 2 bytes @ 0x4
  2163                           
  2164  0074                     ___lmul@multiplicand:	
  2165                           ; 2 bytes @ 0x4
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1writeGPIO@portNumber:
  2171  0075                     i1readGPIO@returnValueB:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174                           
  2175                           ; 1 bytes @ 0x5
  2176  0075                     	ds	1
  2177  0076                     ??i1_currentTripReset:
  2178  0076                     ?___lldiv:	
  2179                           ; 1 bytes @ 0x6
  2180                           
  2181  0076                     readADCRaw@channel:	
  2182                           ; 4 bytes @ 0x6
  2183                           
  2184  0076                     i1readGPIO@portNumber:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187  0076                     readFilteredIL@sumOfSamples:	
  2188                           ; 1 bytes @ 0x6
  2189                           
  2190  0076                     ___lldiv@divisor:	
  2191                           ; 4 bytes @ 0x6
  2192                           
  2193                           
  2194                           ; 4 bytes @ 0x6
  2195  0076                     	ds	1
  2196  0077                     readADCRaw@gpioValid:
  2197  0077                     i1readGPIO@portType:	
  2198                           ; 1 bytes @ 0x7
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x7
  2202  0077                     	ds	1
  2203  0078                     ??___lmul:
  2204  0078                     readADCRaw@i:	
  2205                           ; 1 bytes @ 0x8
  2206                           
  2207  0078                     i1readGPIO@gpioNumber:	
  2208                           ; 1 bytes @ 0x8
  2209                           
  2210  0078                     ___lmul@product:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213                           
  2214                           ; 4 bytes @ 0x8
  2215  0078                     	ds	1
  2216  0079                     ??_currentTripRead:
  2217  0079                     readADCRaw@gpioNumber:	
  2218                           ; 1 bytes @ 0x9
  2219                           
  2220                           
  2221                           ; 1 bytes @ 0x9
  2222  0079                     	ds	1
  2223  007A                     ?_readFilteredVout:
  2224  007A                     ?_readFilteredDutyPot:	
  2225                           ; 2 bytes @ 0xA
  2226                           
  2227  007A                     ?_readFilteredFreqPot:	
  2228                           ; 2 bytes @ 0xA
  2229                           
  2230  007A                     _currentTripRead$917:	
  2231                           ; 2 bytes @ 0xA
  2232                           
  2233  007A                     readFilteredIL@i_925:	
  2234                           ; 1 bytes @ 0xA
  2235                           
  2236  007A                     ___lldiv@dividend:	
  2237                           ; 1 bytes @ 0xA
  2238                           
  2239                           
  2240                           ; 4 bytes @ 0xA
  2241  007A                     	ds	1
  2242  007B                     ??_currentTripMonitor:
  2243  007B                     readFilteredIL@i:	
  2244                           ; 1 bytes @ 0xB
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0xB
  2248  007B                     	ds	1
  2249  007C                     ?_convertRawToMilliVolts:
  2250  007C                     convertRawToMilliVolts@rawValue:	
  2251                           ; 2 bytes @ 0xC
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0xC
  2255  007C                     	ds	2
  2256                           
  2257                           	psect	cstackBANK0
  2258  0020                     __pcstackBANK0:
  2259  0020                     ??_readFilteredVout:
  2260  0020                     ??_readFilteredDutyPot:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0020                     ??_readFilteredFreqPot:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0020                     ??_convertRawToMilliVolts:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0020                     ??___lldiv:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0020                     ?___omul:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0020                     ___omul@multiplier:	
  2276                           ; 8 bytes @ 0x0
  2277                           
  2278                           
  2279                           ; 8 bytes @ 0x0
  2280  0020                     	ds	1
  2281  0021                     ___lldiv@quotient:
  2282                           
  2283                           ; 4 bytes @ 0x1
  2284  0021                     	ds	3
  2285  0024                     readFilteredDutyPot@sumOfSamples:
  2286  0024                     readFilteredFreqPot@sumOfSamples:	
  2287                           ; 4 bytes @ 0x4
  2288                           
  2289  0024                     readFilteredVout@sumOfSamples:	
  2290                           ; 4 bytes @ 0x4
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x4
  2294  0024                     	ds	1
  2295  0025                     ___lldiv@counter:
  2296  0025                     convertRawToMilliVolts@vsenseMult:	
  2297                           ; 1 bytes @ 0x5
  2298                           
  2299                           
  2300                           ; 4 bytes @ 0x5
  2301  0025                     	ds	1
  2302  0026                     ??_runPotScaling:
  2303                           
  2304                           ; 1 bytes @ 0x6
  2305  0026                     	ds	2
  2306  0028                     readFilteredDutyPot@i_754:
  2307  0028                     readFilteredFreqPot@i_758:	
  2308                           ; 1 bytes @ 0x8
  2309                           
  2310  0028                     readFilteredVout@i_835:	
  2311                           ; 1 bytes @ 0x8
  2312                           
  2313  0028                     ___omul@multiplicand:	
  2314                           ; 1 bytes @ 0x8
  2315                           
  2316                           
  2317                           ; 8 bytes @ 0x8
  2318  0028                     	ds	1
  2319  0029                     readFilteredDutyPot@i:
  2320  0029                     readFilteredFreqPot@i:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0029                     readFilteredVout@i:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0029                     convertRawToMilliVolts@offsetted:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 2 bytes @ 0x9
  2331  0029                     	ds	2
  2332  002B                     convertRawToMilliVolts@returnValuedV:
  2333                           
  2334                           ; 2 bytes @ 0xB
  2335  002B                     	ds	3
  2336  002E                     runPotScaling@maxDuty:
  2337                           
  2338                           ; 2 bytes @ 0xE
  2339  002E                     	ds	2
  2340  0030                     ??_runVoltageModeControl:
  2341  0030                     runPotScaling@minDuty:	
  2342                           ; 1 bytes @ 0x10
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x10
  2346  0030                     	ds	16
  2347  0040                     runVoltageModeControl@integralMult:
  2348                           
  2349                           ; 8 bytes @ 0x20
  2350  0040                     	ds	8
  2351  0048                     runVoltageModeControl@propMult:
  2352                           
  2353                           ; 8 bytes @ 0x28
  2354  0048                     	ds	8
  2355  0050                     runVoltageModeControl@newVoltage:
  2356                           
  2357                           ; 2 bytes @ 0x30
  2358  0050                     	ds	2
  2359  0052                     ??_controlRoutine:
  2360                           
  2361                           ; 1 bytes @ 0x32
  2362  0052                     	ds	6
  2363  0058                     controlRoutine@maxDuty:
  2364                           
  2365                           ; 2 bytes @ 0x38
  2366  0058                     	ds	2
  2367  005A                     controlRoutine@minDuty:
  2368                           
  2369                           ; 2 bytes @ 0x3A
  2370  005A                     	ds	2
  2371  005C                     controlRoutine@setDuty_unreg:
  2372                           
  2373                           ; 2 bytes @ 0x3C
  2374  005C                     	ds	2
  2375  005E                     ??_Tick490Hz:
  2376                           
  2377                           ; 1 bytes @ 0x3E
  2378  005E                     	ds	1
  2379                           
  2380                           	psect	maintext
  2381  0D48                     __pmaintext:	
  2382 ;;
  2383 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2384 ;;
  2385 ;; *************** function _main *****************
  2386 ;; Defined at:
  2387 ;;		line 107 in file "main.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  argc            2    9[BANK1 ] int 
  2390 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2    9[BANK1 ] int 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : B1F/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2402 ;;      Params:         0       0       4       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0
  2405 ;;      Totals:         0       0       4       0       0       0
  2406 ;;Total ram usage:        4 bytes
  2407 ;; Hardware stack levels required when called: 8
  2408 ;; This function calls:
  2409 ;;		_initialiseADCModule
  2410 ;;		_initialiseController
  2411 ;;		_initialiseCurrentSensors
  2412 ;;		_initialiseGPIO
  2413 ;;		_initialisePotentiometers
  2414 ;;		_readGPIO
  2415 ;;		_setupInternalOscillator
  2416 ;;		_setupPWM
  2417 ;;		_setupTimer0Interrupt
  2418 ;;		_transToCurrentModeControl
  2419 ;;		_transToInitialising
  2420 ;;		_transToPotControl
  2421 ;;		_transToVoltageModeControl
  2422 ;; This function is called by:
  2423 ;;		Startup code after reset
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427  0D48                     _main:	
  2428                           ;psect for function _main
  2429                           
  2430  0D48                     l2741:	
  2431                           ;incstack = 0
  2432                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2433                           
  2434                           
  2435                           ;main.c: 109:     transToInitialising();
  2436  0D48  3187  27FD  318D   	fcall	_transToInitialising
  2437  0D4B                     l2743:
  2438                           
  2439                           ;main.c: 110:     setupInternalOscillator(freq32M);
  2440  0D4B  300A               	movlw	10
  2441  0D4C  3184  24D5  318D   	fcall	_setupInternalOscillator
  2442  0D4F                     l2745:
  2443                           
  2444                           ;main.c: 111:     setupPWM();
  2445  0D4F  318C  2421  318D   	fcall	_setupPWM
  2446  0D52                     l2747:
  2447                           
  2448                           ;main.c: 112:     setupTimer0Interrupt();
  2449  0D52  318B  23D3  318D   	fcall	_setupTimer0Interrupt
  2450  0D55                     l2749:
  2451                           
  2452                           ;main.c: 113:     initialiseADCModule();
  2453  0D55  318B  23B9  318D   	fcall	_initialiseADCModule
  2454  0D58                     l2751:
  2455                           
  2456                           ;main.c: 114:     initialiseCurrentSensors();
  2457  0D58  318C  2479  318D   	fcall	_initialiseCurrentSensors
  2458  0D5B                     l2753:
  2459                           
  2460                           ;main.c: 115:     initialisePotentiometers();
  2461  0D5B  318B  23E4  318D   	fcall	_initialisePotentiometers
  2462  0D5E                     l2755:
  2463                           
  2464                           ;main.c: 116:     initialiseController();
  2465  0D5E  318C  243D  318D   	fcall	_initialiseController
  2466  0D61                     l2757:
  2467                           
  2468                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2469  0D61  0021               	movlb	1	; select bank1
  2470  0D62  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2471  0D63  300C               	movlw	12
  2472  0D64  3185  259A  318D   	fcall	_initialiseGPIO
  2473  0D67                     l2759:
  2474                           
  2475                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2476  0D67  0021               	movlb	1	; select bank1
  2477  0D68  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2478  0D69  300D               	movlw	13
  2479  0D6A  3185  259A  318D   	fcall	_initialiseGPIO
  2480  0D6D                     l2761:
  2481  0D6D                     l2763:	
  2482                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2483                           
  2484                           
  2485                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2486  0D6D  3008               	movlw	8
  2487  0D6E  318E  2602  318D   	fcall	_readGPIO
  2488  0D71  3A01               	xorlw	1
  2489  0D72  1903               	skipnz
  2490  0D73  2D75               	goto	u2591
  2491  0D74  2D76               	goto	u2590
  2492  0D75                     u2591:
  2493  0D75  2D7A               	goto	l2769
  2494  0D76                     u2590:
  2495  0D76                     l2765:
  2496  0D76  318B  23CC  318D   	fcall	_transToVoltageModeControl
  2497  0D79  2D7D               	goto	l120
  2498  0D7A                     l2769:
  2499  0D7A  318B  23B5  318D   	fcall	_transToPotControl
  2500  0D7D                     l120:	
  2501                           ;main.c: 129:     while(1){
  2502                           
  2503  0D7D  2D7D               	goto	l120
  2504  0D7E  3180  2886         	ljmp	start
  2505  0D80                     __end_of_main:
  2506                           
  2507                           	psect	text1
  2508  0BCC                     __ptext1:	
  2509 ;; *************** function _transToVoltageModeControl *****************
  2510 ;; Defined at:
  2511 ;;		line 35 in file "StateMachine.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2525 ;;      Params:         0       0       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0
  2527 ;;      Temps:          0       0       1       0       0       0
  2528 ;;      Totals:         0       0       1       0       0       0
  2529 ;;Total ram usage:        1 bytes
  2530 ;; Hardware stack levels used: 1
  2531 ;; Hardware stack levels required when called: 5
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539  0BCC                     _transToVoltageModeControl:	
  2540                           ;psect for function _transToVoltageModeControl
  2541                           
  2542  0BCC                     l2701:	
  2543                           ;incstack = 0
  2544                           ; Regs used in _transToVoltageModeControl: [wreg]
  2545                           
  2546                           
  2547                           ;StateMachine.c: 36:     currentState = voltageModeControl;
  2548  0BCC  3002               	movlw	2
  2549  0BCD  0021               	movlb	1	; select bank1
  2550  0BCE  00D2               	movwf	??_transToVoltageModeControl^(0+128)
  2551  0BCF  0852               	movf	??_transToVoltageModeControl^(0+128),w
  2552  0BD0  0020               	movlb	0	; select bank0
  2553  0BD1  00EC               	movwf	_currentState
  2554  0BD2                     l566:
  2555  0BD2  0008               	return
  2556  0BD3                     __end_of_transToVoltageModeControl:
  2557                           
  2558                           	psect	text2
  2559  0BB5                     __ptext2:	
  2560 ;; *************** function _transToPotControl *****************
  2561 ;; Defined at:
  2562 ;;		line 26 in file "StateMachine.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		None
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2576 ;;      Params:         0       0       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0       0
  2579 ;;      Totals:         0       0       0       0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels used: 1
  2582 ;; Hardware stack levels required when called: 5
  2583 ;; This function calls:
  2584 ;;		Nothing
  2585 ;; This function is called by:
  2586 ;;		_main
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590  0BB5                     _transToPotControl:	
  2591                           ;psect for function _transToPotControl
  2592                           
  2593  0BB5                     l2705:	
  2594                           ;incstack = 0
  2595                           ; Regs used in _transToPotControl: []
  2596                           
  2597                           
  2598                           ;StateMachine.c: 27:     currentState = potControl;
  2599  0BB5  0020               	movlb	0	; select bank0
  2600  0BB6  01EC               	clrf	_currentState
  2601  0BB7  0AEC               	incf	_currentState,f
  2602  0BB8                     l563:
  2603  0BB8  0008               	return
  2604  0BB9                     __end_of_transToPotControl:
  2605                           
  2606                           	psect	text3
  2607  07FD                     __ptext3:	
  2608 ;; *************** function _transToInitialising *****************
  2609 ;; Defined at:
  2610 ;;		line 18 in file "StateMachine.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		status,2
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2624 ;;      Params:         0       0       0       0       0       0
  2625 ;;      Locals:         0       0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0
  2627 ;;      Totals:         0       0       0       0       0       0
  2628 ;;Total ram usage:        0 bytes
  2629 ;; Hardware stack levels used: 1
  2630 ;; Hardware stack levels required when called: 5
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_main
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638  07FD                     _transToInitialising:	
  2639                           ;psect for function _transToInitialising
  2640                           
  2641  07FD                     l2543:	
  2642                           ;incstack = 0
  2643                           ; Regs used in _transToInitialising: [status,2]
  2644                           
  2645                           
  2646                           ;StateMachine.c: 19:     currentState = initialising;
  2647  07FD  0020               	movlb	0	; select bank0
  2648  07FE  01EC               	clrf	_currentState
  2649  07FF                     l560:
  2650  07FF  0008               	return
  2651  0800                     __end_of_transToInitialising:
  2652                           
  2653                           	psect	text4
  2654  0BC5                     __ptext4:	
  2655 ;; *************** function _transToCurrentModeControl *****************
  2656 ;; Defined at:
  2657 ;;		line 44 in file "StateMachine.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2671 ;;      Params:         0       0       0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0       0
  2673 ;;      Temps:          0       0       1       0       0       0
  2674 ;;      Totals:         0       0       1       0       0       0
  2675 ;;Total ram usage:        1 bytes
  2676 ;; Hardware stack levels used: 1
  2677 ;; Hardware stack levels required when called: 5
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685  0BC5                     _transToCurrentModeControl:	
  2686                           ;psect for function _transToCurrentModeControl
  2687                           
  2688  0BC5                     l2703:	
  2689                           ;incstack = 0
  2690                           ; Regs used in _transToCurrentModeControl: [wreg]
  2691                           
  2692                           
  2693                           ;StateMachine.c: 45:     currentState = currentModeControl;
  2694  0BC5  3003               	movlw	3
  2695  0BC6  0021               	movlb	1	; select bank1
  2696  0BC7  00D2               	movwf	??_transToCurrentModeControl^(0+128)
  2697  0BC8  0852               	movf	??_transToCurrentModeControl^(0+128),w
  2698  0BC9  0020               	movlb	0	; select bank0
  2699  0BCA  00EC               	movwf	_currentState
  2700  0BCB                     l569:
  2701  0BCB  0008               	return
  2702  0BCC                     __end_of_transToCurrentModeControl:
  2703                           
  2704                           	psect	text5
  2705  0BD3                     __ptext5:	
  2706 ;; *************** function _setupTimer0Interrupt *****************
  2707 ;; Defined at:
  2708 ;;		line 17 in file "Timer0.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2722 ;;      Params:         0       0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0
  2725 ;;      Totals:         0       0       0       0       0       0
  2726 ;;Total ram usage:        0 bytes
  2727 ;; Hardware stack levels used: 1
  2728 ;; Hardware stack levels required when called: 5
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736  0BD3                     _setupTimer0Interrupt:	
  2737                           ;psect for function _setupTimer0Interrupt
  2738                           
  2739  0BD3                     l2647:	
  2740                           ;incstack = 0
  2741                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2742                           
  2743                           
  2744                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2745  0BD3  178B               	bsf	11,7	;volatile
  2746                           
  2747                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2748  0BD4  168B               	bsf	11,5	;volatile
  2749                           
  2750                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2751  0BD5  0021               	movlb	1	; select bank1
  2752  0BD6  1295               	bcf	21,5	;volatile
  2753                           
  2754                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2755  0BD7  1195               	bcf	21,3	;volatile
  2756  0BD8                     l2649:
  2757                           
  2758                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2759  0BD8  3005               	movlw	5
  2760  0BD9  0095               	movwf	21	;volatile
  2761  0BDA                     l201:
  2762  0BDA  0008               	return
  2763  0BDB                     __end_of_setupTimer0Interrupt:
  2764                           
  2765                           	psect	text6
  2766  0C21                     __ptext6:	
  2767 ;; *************** function _setupPWM *****************
  2768 ;; Defined at:
  2769 ;;		line 16 in file "PWM.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0, pclath, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2783 ;;      Params:         0       0       0       0       0       0
  2784 ;;      Locals:         0       0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0
  2786 ;;      Totals:         0       0       0       0       0       0
  2787 ;;Total ram usage:        0 bytes
  2788 ;; Hardware stack levels used: 1
  2789 ;; Hardware stack levels required when called: 6
  2790 ;; This function calls:
  2791 ;;		_initialiseGPIO
  2792 ;; This function is called by:
  2793 ;;		_main
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797  0C21                     _setupPWM:	
  2798                           ;psect for function _setupPWM
  2799                           
  2800  0C21                     l2623:	
  2801                           ;incstack = 0
  2802                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2803                           
  2804                           
  2805                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2806  0C21  300C               	movlw	12
  2807  0C22  0025               	movlb	5	; select bank5
  2808  0C23  0093               	movwf	19	;volatile
  2809  0C24                     l2625:
  2810                           
  2811                           ;PWM.c: 20:     PR2 = 0;
  2812  0C24  0020               	movlb	0	; select bank0
  2813  0C25  019B               	clrf	27	;volatile
  2814  0C26                     l2627:
  2815                           
  2816                           ;PWM.c: 21:     CCPR1L = 0;
  2817  0C26  0025               	movlb	5	; select bank5
  2818  0C27  0191               	clrf	17	;volatile
  2819  0C28                     l2629:
  2820                           
  2821                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2822  0C28  0022               	movlb	2	; select bank2
  2823  0C29  151D               	bsf	29,2	;volatile
  2824  0C2A                     l2631:
  2825                           
  2826                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2827  0C2A  0025               	movlb	5	; select bank5
  2828  0C2B  1596               	bsf	22,3	;volatile
  2829  0C2C                     l2633:
  2830                           
  2831                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2832  0C2C  1016               	bcf	22,0	;volatile
  2833  0C2D                     l2635:
  2834                           
  2835                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2836  0C2D  30FC               	movlw	-4
  2837  0C2E  0020               	movlb	0	; select bank0
  2838  0C2F  059C               	andwf	28,f	;volatile
  2839  0C30                     l2637:
  2840                           
  2841                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2842  0C30  0021               	movlb	1	; select bank1
  2843  0C31  1091               	bcf	17,1	;volatile
  2844  0C32                     l2639:
  2845                           
  2846                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2847  0C32  0020               	movlb	0	; select bank0
  2848  0C33  151C               	bsf	28,2	;volatile
  2849  0C34                     l2641:
  2850                           
  2851                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2852  0C34  170B               	bsf	11,6	;volatile
  2853  0C35                     l2643:
  2854                           
  2855                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2856  0C35  0021               	movlb	1	; select bank1
  2857  0C36  1511               	bsf	17,2	;volatile
  2858  0C37                     l2645:
  2859                           
  2860                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2861  0C37  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2862  0C38  3006               	movlw	6
  2863  0C39  3185  259A  318C   	fcall	_initialiseGPIO
  2864  0C3C                     l174:
  2865  0C3C  0008               	return
  2866  0C3D                     __end_of_setupPWM:
  2867                           
  2868                           	psect	text7
  2869  04D5                     __ptext7:	
  2870 ;; *************** function _setupInternalOscillator *****************
  2871 ;; Defined at:
  2872 ;;		line 140 in file "main.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  selectedFreq    1    wreg     const enum E2846
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  selectedFreq    1    2[BANK1 ] const enum E2846
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2886 ;;      Params:         0       0       0       0       0       0
  2887 ;;      Locals:         0       0       1       0       0       0
  2888 ;;      Temps:          0       0       2       0       0       0
  2889 ;;      Totals:         0       0       3       0       0       0
  2890 ;;Total ram usage:        3 bytes
  2891 ;; Hardware stack levels used: 1
  2892 ;; Hardware stack levels required when called: 5
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900  04D5                     _setupInternalOscillator:	
  2901                           ;psect for function _setupInternalOscillator
  2902                           
  2903                           
  2904                           ;incstack = 0
  2905                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2906                           ;setupInternalOscillator@selectedFreq stored from wreg
  2907  04D5  0021               	movlb	1	; select bank1
  2908  04D6  00D4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2909  04D7                     l2545:
  2910                           
  2911                           ;main.c: 144:     switch(selectedFreq){
  2912  04D7  2D6E               	goto	l2615
  2913  04D8                     l2547:
  2914  04D8  3087               	movlw	-121
  2915  04D9  0599               	andwf	25,f	;volatile
  2916  04DA                     l2549:
  2917  04DA  1399               	bcf	25,7	;volatile
  2918  04DB                     l2551:
  2919  04DB  3000               	movlw	0
  2920  04DC  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2921  04DD  3000               	movlw	0
  2922  04DE  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2923  04DF  3079               	movlw	121
  2924  04E0  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2925  04E1  3018               	movlw	24
  2926  04E2  00A8               	movwf	_clockFrequency^(0+128)
  2927  04E3  2D99               	goto	l139
  2928  04E4                     l2553:
  2929  04E4  0819               	movf	25,w	;volatile
  2930  04E5  3987               	andlw	-121
  2931  04E6  3820               	iorlw	32
  2932  04E7  0099               	movwf	25	;volatile
  2933  04E8                     l2555:
  2934  04E8  1399               	bcf	25,7	;volatile
  2935  04E9                     l2557:
  2936  04E9  3000               	movlw	0
  2937  04EA  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2938  04EB  3000               	movlw	0
  2939  04EC  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2940  04ED  30F4               	movlw	244
  2941  04EE  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2942  04EF  3024               	movlw	36
  2943  04F0  00A8               	movwf	_clockFrequency^(0+128)
  2944  04F1  2D99               	goto	l139
  2945  04F2                     l2559:
  2946  04F2  0819               	movf	25,w	;volatile
  2947  04F3  3987               	andlw	-121
  2948  04F4  3828               	iorlw	40
  2949  04F5  0099               	movwf	25	;volatile
  2950  04F6                     l2561:
  2951  04F6  1399               	bcf	25,7	;volatile
  2952  04F7                     l2563:
  2953  04F7  3000               	movlw	0
  2954  04F8  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2955  04F9  3001               	movlw	1
  2956  04FA  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2957  04FB  30E8               	movlw	232
  2958  04FC  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2959  04FD  3048               	movlw	72
  2960  04FE  00A8               	movwf	_clockFrequency^(0+128)
  2961  04FF  2D99               	goto	l139
  2962  0500                     l2565:
  2963  0500  0819               	movf	25,w	;volatile
  2964  0501  3987               	andlw	-121
  2965  0502  3830               	iorlw	48
  2966  0503  0099               	movwf	25	;volatile
  2967  0504                     l2567:
  2968  0504  1399               	bcf	25,7	;volatile
  2969  0505                     l2569:
  2970  0505  3000               	movlw	0
  2971  0506  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2972  0507  3003               	movlw	3
  2973  0508  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2974  0509  30D0               	movlw	208
  2975  050A  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2976  050B  3090               	movlw	144
  2977  050C  00A8               	movwf	_clockFrequency^(0+128)
  2978  050D  2D99               	goto	l139
  2979  050E                     l2571:
  2980  050E  0819               	movf	25,w	;volatile
  2981  050F  3987               	andlw	-121
  2982  0510  3838               	iorlw	56
  2983  0511  0099               	movwf	25	;volatile
  2984  0512                     l2573:
  2985  0512  1399               	bcf	25,7	;volatile
  2986  0513                     l2575:
  2987  0513  3000               	movlw	0
  2988  0514  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2989  0515  3007               	movlw	7
  2990  0516  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2991  0517  30A1               	movlw	161
  2992  0518  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2993  0519  3020               	movlw	32
  2994  051A  00A8               	movwf	_clockFrequency^(0+128)
  2995  051B  2D99               	goto	l139
  2996  051C                     l2577:
  2997  051C  0819               	movf	25,w	;volatile
  2998  051D  3987               	andlw	-121
  2999  051E  3858               	iorlw	88
  3000  051F  0099               	movwf	25	;volatile
  3001  0520                     l2579:
  3002  0520  1399               	bcf	25,7	;volatile
  3003  0521                     l2581:
  3004  0521  3000               	movlw	0
  3005  0522  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3006  0523  300F               	movlw	15
  3007  0524  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3008  0525  3042               	movlw	66
  3009  0526  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3010  0527  3040               	movlw	64
  3011  0528  00A8               	movwf	_clockFrequency^(0+128)
  3012  0529  2D99               	goto	l139
  3013  052A                     l2583:
  3014  052A  0819               	movf	25,w	;volatile
  3015  052B  3987               	andlw	-121
  3016  052C  3860               	iorlw	96
  3017  052D  0099               	movwf	25	;volatile
  3018  052E                     l2585:
  3019  052E  1399               	bcf	25,7	;volatile
  3020  052F                     l2587:
  3021  052F  3000               	movlw	0
  3022  0530  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3023  0531  301E               	movlw	30
  3024  0532  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3025  0533  3084               	movlw	132
  3026  0534  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3027  0535  3080               	movlw	128
  3028  0536  00A8               	movwf	_clockFrequency^(0+128)
  3029  0537  2D99               	goto	l139
  3030  0538                     l2589:
  3031  0538  0819               	movf	25,w	;volatile
  3032  0539  3987               	andlw	-121
  3033  053A  3868               	iorlw	104
  3034  053B  0099               	movwf	25	;volatile
  3035  053C                     l2591:
  3036  053C  1399               	bcf	25,7	;volatile
  3037  053D                     l2593:
  3038  053D  3000               	movlw	0
  3039  053E  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3040  053F  303D               	movlw	61
  3041  0540  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3042  0541  3009               	movlw	9
  3043  0542  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3044  0543  3000               	movlw	0
  3045  0544  00A8               	movwf	_clockFrequency^(0+128)
  3046  0545  2D99               	goto	l139
  3047  0546                     l2595:
  3048  0546  0819               	movf	25,w	;volatile
  3049  0547  3987               	andlw	-121
  3050  0548  3870               	iorlw	112
  3051  0549  0099               	movwf	25	;volatile
  3052  054A                     l2597:
  3053  054A  1399               	bcf	25,7	;volatile
  3054  054B                     l2599:
  3055  054B  3000               	movlw	0
  3056  054C  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3057  054D  307A               	movlw	122
  3058  054E  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3059  054F  3012               	movlw	18
  3060  0550  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3061  0551  3000               	movlw	0
  3062  0552  00A8               	movwf	_clockFrequency^(0+128)
  3063  0553  2D99               	goto	l139
  3064  0554                     l2601:
  3065  0554  3078               	movlw	120
  3066  0555  0499               	iorwf	25,f	;volatile
  3067  0556                     l2603:
  3068  0556  1399               	bcf	25,7	;volatile
  3069  0557                     l2605:
  3070  0557  3000               	movlw	0
  3071  0558  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3072  0559  30F4               	movlw	244
  3073  055A  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3074  055B  3024               	movlw	36
  3075  055C  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3076  055D  3000               	movlw	0
  3077  055E  00A8               	movwf	_clockFrequency^(0+128)
  3078  055F  2D99               	goto	l139
  3079  0560                     l2607:
  3080  0560  0819               	movf	25,w	;volatile
  3081  0561  3987               	andlw	-121
  3082  0562  3870               	iorlw	112
  3083  0563  0099               	movwf	25	;volatile
  3084  0564                     l2609:
  3085  0564  1799               	bsf	25,7	;volatile
  3086  0565                     l2611:
  3087  0565  3001               	movlw	1
  3088  0566  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3089  0567  30E8               	movlw	232
  3090  0568  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3091  0569  3048               	movlw	72
  3092  056A  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3093  056B  3000               	movlw	0
  3094  056C  00A8               	movwf	_clockFrequency^(0+128)
  3095  056D  2D99               	goto	l139
  3096  056E                     l2615:
  3097  056E  0854               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3098  056F  00D2               	movwf	??_setupInternalOscillator^(0+128)
  3099  0570  01D3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3100                           
  3101                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3102                           ; Switch size 1, requested type "simple"
  3103                           ; Number of cases is 1, Range of values is 0 to 0
  3104                           ; switch strategies available:
  3105                           ; Name         Instructions Cycles
  3106                           ; simple_byte            4     3 (average)
  3107                           ; direct_byte            8     6 (fixed)
  3108                           ; jumptable            260     6 (fixed)
  3109                           ;	Chosen strategy is simple_byte
  3110  0571  0853               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3111  0572  3A00               	xorlw	0	; case 0
  3112  0573  1903               	skipnz
  3113  0574  2D76               	goto	l2835
  3114  0575  2D99               	goto	l139
  3115  0576                     l2835:
  3116                           
  3117                           ; Switch size 1, requested type "simple"
  3118                           ; Number of cases is 11, Range of values is 0 to 10
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; direct_byte           28     6 (fixed)
  3122                           ; simple_byte           34    18 (average)
  3123                           ; jumptable            260     6 (fixed)
  3124                           ;	Chosen strategy is simple_byte
  3125  0576  0852               	movf	??_setupInternalOscillator^(0+128),w
  3126  0577  3A00               	xorlw	0	; case 0
  3127  0578  1903               	skipnz
  3128  0579  2CD8               	goto	l2547
  3129  057A  3A01               	xorlw	1	; case 1
  3130  057B  1903               	skipnz
  3131  057C  2CE4               	goto	l2553
  3132  057D  3A03               	xorlw	3	; case 2
  3133  057E  1903               	skipnz
  3134  057F  2CF2               	goto	l2559
  3135  0580  3A01               	xorlw	1	; case 3
  3136  0581  1903               	skipnz
  3137  0582  2D00               	goto	l2565
  3138  0583  3A07               	xorlw	7	; case 4
  3139  0584  1903               	skipnz
  3140  0585  2D0E               	goto	l2571
  3141  0586  3A01               	xorlw	1	; case 5
  3142  0587  1903               	skipnz
  3143  0588  2D1C               	goto	l2577
  3144  0589  3A03               	xorlw	3	; case 6
  3145  058A  1903               	skipnz
  3146  058B  2D2A               	goto	l2583
  3147  058C  3A01               	xorlw	1	; case 7
  3148  058D  1903               	skipnz
  3149  058E  2D38               	goto	l2589
  3150  058F  3A0F               	xorlw	15	; case 8
  3151  0590  1903               	skipnz
  3152  0591  2D46               	goto	l2595
  3153  0592  3A01               	xorlw	1	; case 9
  3154  0593  1903               	skipnz
  3155  0594  2D54               	goto	l2601
  3156  0595  3A03               	xorlw	3	; case 10
  3157  0596  1903               	skipnz
  3158  0597  2D60               	goto	l2607
  3159  0598  2D99               	goto	l139
  3160  0599                     l139:
  3161  0599  0008               	return
  3162  059A                     __end_of_setupInternalOscillator:
  3163                           
  3164                           	psect	text8
  3165  0E02                     __ptext8:	
  3166 ;; *************** function _readGPIO *****************
  3167 ;; Defined at:
  3168 ;;		line 79 in file "GPIO.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  gpioNumber      1    wreg     const enum E2798
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3173 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3174 ;;  readB           1    4[BANK1 ] unsigned char 
  3175 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3176 ;;  readA           1    2[BANK1 ] unsigned char 
  3177 ;;  portType        1    7[BANK1 ] unsigned char 
  3178 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      _Bool 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3188 ;;      Params:         0       0       0       0       0       0
  3189 ;;      Locals:         0       0       7       0       0       0
  3190 ;;      Temps:          0       0       2       0       0       0
  3191 ;;      Totals:         0       0       9       0       0       0
  3192 ;;Total ram usage:        9 bytes
  3193 ;; Hardware stack levels used: 1
  3194 ;; Hardware stack levels required when called: 5
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202  0E02                     _readGPIO:	
  3203                           ;psect for function _readGPIO
  3204                           
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3208                           ;readGPIO@gpioNumber stored from wreg
  3209  0E02  0021               	movlb	1	; select bank1
  3210  0E03  00DA               	movwf	readGPIO@gpioNumber^(0+128)
  3211  0E04                     l2661:
  3212                           
  3213                           ;GPIO.c: 81:     uint8_t portType = 0;
  3214  0E04  01D9               	clrf	readGPIO@portType^(0+128)
  3215  0E05                     l2663:
  3216                           
  3217                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3218  0E05  3008               	movlw	8
  3219  0E06  025A               	subwf	readGPIO@gpioNumber^(0+128),w
  3220  0E07  1C03               	skipc
  3221  0E08  2E0A               	goto	u2461
  3222  0E09  2E0B               	goto	u2460
  3223  0E0A                     u2461:
  3224  0E0A  2E13               	goto	l2669
  3225  0E0B                     u2460:
  3226  0E0B                     l2665:
  3227                           
  3228                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3229  0E0B  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3230  0E0C  3EF8               	addlw	248
  3231  0E0D  00D2               	movwf	??_readGPIO^(0+128)
  3232  0E0E  0852               	movf	??_readGPIO^(0+128),w
  3233  0E0F  00D8               	movwf	readGPIO@portNumber^(0+128)
  3234  0E10                     l2667:
  3235                           
  3236                           ;GPIO.c: 84:         portType = 1;
  3237  0E10  01D9               	clrf	readGPIO@portType^(0+128)
  3238  0E11  0AD9               	incf	readGPIO@portType^(0+128),f
  3239                           
  3240                           ;GPIO.c: 85:     }
  3241  0E12  2E18               	goto	l2673
  3242  0E13                     l2669:
  3243                           
  3244                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3245  0E13  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3246  0E14  00D2               	movwf	??_readGPIO^(0+128)
  3247  0E15  0852               	movf	??_readGPIO^(0+128),w
  3248  0E16  00D8               	movwf	readGPIO@portNumber^(0+128)
  3249  0E17                     l2671:
  3250                           
  3251                           ;GPIO.c: 88:         portType = 0;
  3252  0E17  01D9               	clrf	readGPIO@portType^(0+128)
  3253  0E18                     l2673:
  3254                           
  3255                           ;GPIO.c: 91:     if(portType == 0){
  3256  0E18  0859               	movf	readGPIO@portType^(0+128),w
  3257  0E19  1D03               	btfss	3,2
  3258  0E1A  2E1C               	goto	u2471
  3259  0E1B  2E1D               	goto	u2470
  3260  0E1C                     u2471:
  3261  0E1C  2E31               	goto	l2685
  3262  0E1D                     u2470:
  3263  0E1D                     l2675:
  3264                           
  3265                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3266  0E1D  0020               	movlb	0	; select bank0
  3267  0E1E  080C               	movf	12,w	;volatile
  3268  0E1F  0021               	movlb	1	; select bank1
  3269  0E20  00D2               	movwf	??_readGPIO^(0+128)
  3270  0E21  0852               	movf	??_readGPIO^(0+128),w
  3271  0E22  00D4               	movwf	readGPIO@readA^(0+128)
  3272  0E23                     l2677:
  3273                           
  3274                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3275  0E23  0854               	movf	readGPIO@readA^(0+128),w
  3276  0E24  00D2               	movwf	??_readGPIO^(0+128)
  3277  0E25  0A58               	incf	readGPIO@portNumber^(0+128),w
  3278  0E26  2E28               	goto	u2484
  3279  0E27                     u2485:
  3280  0E27  36D2               	lsrf	??_readGPIO^(0+128),f
  3281  0E28                     u2484:
  3282  0E28  0B89               	decfsz	9,f
  3283  0E29  2E27               	goto	u2485
  3284  0E2A  0852               	movf	??_readGPIO^(0+128),w
  3285  0E2B  3901               	andlw	1
  3286  0E2C  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3287  0E2D  0853               	movf	(??_readGPIO+1)^(0+128),w
  3288  0E2E  00D5               	movwf	readGPIO@returnValueA^(0+128)
  3289  0E2F                     l2679:
  3290                           
  3291                           ;GPIO.c: 94:         return returnValueA;
  3292  0E2F  0855               	movf	readGPIO@returnValueA^(0+128),w
  3293  0E30  2E4B               	goto	l326
  3294  0E31                     l2685:
  3295  0E31  0359               	decf	readGPIO@portType^(0+128),w
  3296  0E32  1D03               	btfss	3,2
  3297  0E33  2E35               	goto	u2491
  3298  0E34  2E36               	goto	u2490
  3299  0E35                     u2491:
  3300  0E35  2E4A               	goto	l2697
  3301  0E36                     u2490:
  3302  0E36                     l2687:
  3303                           
  3304                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3305  0E36  0020               	movlb	0	; select bank0
  3306  0E37  080D               	movf	13,w	;volatile
  3307  0E38  0021               	movlb	1	; select bank1
  3308  0E39  00D2               	movwf	??_readGPIO^(0+128)
  3309  0E3A  0852               	movf	??_readGPIO^(0+128),w
  3310  0E3B  00D6               	movwf	readGPIO@readB^(0+128)
  3311  0E3C                     l2689:
  3312                           
  3313                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3314  0E3C  0856               	movf	readGPIO@readB^(0+128),w
  3315  0E3D  00D2               	movwf	??_readGPIO^(0+128)
  3316  0E3E  0A58               	incf	readGPIO@portNumber^(0+128),w
  3317  0E3F  2E41               	goto	u2504
  3318  0E40                     u2505:
  3319  0E40  36D2               	lsrf	??_readGPIO^(0+128),f
  3320  0E41                     u2504:
  3321  0E41  0B89               	decfsz	9,f
  3322  0E42  2E40               	goto	u2505
  3323  0E43  0852               	movf	??_readGPIO^(0+128),w
  3324  0E44  3901               	andlw	1
  3325  0E45  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3326  0E46  0853               	movf	(??_readGPIO+1)^(0+128),w
  3327  0E47  00D7               	movwf	readGPIO@returnValueB^(0+128)
  3328  0E48                     l2691:
  3329                           
  3330                           ;GPIO.c: 99:         return returnValueB;
  3331  0E48  0857               	movf	readGPIO@returnValueB^(0+128),w
  3332  0E49  2E4B               	goto	l326
  3333  0E4A                     l2697:
  3334  0E4A  3000               	movlw	0
  3335  0E4B                     l326:
  3336  0E4B  0008               	return
  3337  0E4C                     __end_of_readGPIO:
  3338                           
  3339                           	psect	text9
  3340  0BE4                     __ptext9:	
  3341 ;; *************** function _initialisePotentiometers *****************
  3342 ;; Defined at:
  3343 ;;		line 15 in file "Potentiometer.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      void 
  3350 ;; Registers used:
  3351 ;;		wreg, status,2, status,0, pclath, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3357 ;;      Params:         0       0       0       0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0
  3360 ;;      Totals:         0       0       0       0       0       0
  3361 ;;Total ram usage:        0 bytes
  3362 ;; Hardware stack levels used: 1
  3363 ;; Hardware stack levels required when called: 6
  3364 ;; This function calls:
  3365 ;;		_initialiseADCPin
  3366 ;; This function is called by:
  3367 ;;		_main
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371  0BE4                     _initialisePotentiometers:	
  3372                           ;psect for function _initialisePotentiometers
  3373                           
  3374  0BE4                     l2655:	
  3375                           ;incstack = 0
  3376                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3377                           
  3378                           
  3379                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3380  0BE4  3009               	movlw	9
  3381  0BE5  3186  2610  318B   	fcall	_initialiseADCPin
  3382                           
  3383                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3384  0BE8  300A               	movlw	10
  3385  0BE9  3186  2610  318B   	fcall	_initialiseADCPin
  3386  0BEC                     l358:
  3387  0BEC  0008               	return
  3388  0BED                     __end_of_initialisePotentiometers:
  3389                           
  3390                           	psect	text10
  3391  0C79                     __ptext10:	
  3392 ;; *************** function _initialiseCurrentSensors *****************
  3393 ;; Defined at:
  3394 ;;		line 18 in file "CurrentSensor.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;		None
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3408 ;;      Params:         0       0       0       0       0       0
  3409 ;;      Locals:         0       0       0       0       0       0
  3410 ;;      Temps:          0       0       0       0       0       0
  3411 ;;      Totals:         0       0       0       0       0       0
  3412 ;;Total ram usage:        0 bytes
  3413 ;; Hardware stack levels used: 1
  3414 ;; Hardware stack levels required when called: 7
  3415 ;; This function calls:
  3416 ;;		_currentTripReset
  3417 ;;		_initialiseADCPin
  3418 ;;		_initialiseGPIO
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424  0C79                     _initialiseCurrentSensors:	
  3425                           ;psect for function _initialiseCurrentSensors
  3426                           
  3427  0C79                     l2653:	
  3428                           ;incstack = 0
  3429                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3430                           
  3431                           
  3432                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3433  0C79  0021               	movlb	1	; select bank1
  3434  0C7A  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3435  0C7B  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3436  0C7C  3003               	movlw	3
  3437  0C7D  3185  259A  318C   	fcall	_initialiseGPIO
  3438                           
  3439                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3440  0C80  0021               	movlb	1	; select bank1
  3441  0C81  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3442  0C82  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3443  0C83  3001               	movlw	1
  3444  0C84  3185  259A  318C   	fcall	_initialiseGPIO
  3445                           
  3446                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3447  0C87  3000               	movlw	0
  3448  0C88  3186  2610  318C   	fcall	_initialiseADCPin
  3449                           
  3450                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3451  0C8B  3002               	movlw	2
  3452  0C8C  3186  2610  318C   	fcall	_initialiseADCPin
  3453                           
  3454                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3455  0C8F  0021               	movlb	1	; select bank1
  3456  0C90  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3457  0C91  300B               	movlw	11
  3458  0C92  3185  259A  318C   	fcall	_initialiseGPIO
  3459                           
  3460                           ;CurrentSensor.c: 24:     currentTripReset();
  3461  0C95  318B  23F9  318C   	fcall	_currentTripReset
  3462  0C98                     l512:
  3463  0C98  0008               	return
  3464  0C99                     __end_of_initialiseCurrentSensors:
  3465                           
  3466                           	psect	text11
  3467  0BF9                     __ptext11:	
  3468 ;; *************** function _currentTripReset *****************
  3469 ;; Defined at:
  3470 ;;		line 71 in file "CurrentSensor.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0, pclath, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3484 ;;      Params:         0       0       0       0       0       0
  3485 ;;      Locals:         0       0       0       0       0       0
  3486 ;;      Temps:          0       0       0       0       0       0
  3487 ;;      Totals:         0       0       0       0       0       0
  3488 ;;Total ram usage:        0 bytes
  3489 ;; Hardware stack levels used: 1
  3490 ;; Hardware stack levels required when called: 6
  3491 ;; This function calls:
  3492 ;;		_writeGPIO
  3493 ;; This function is called by:
  3494 ;;		_initialiseCurrentSensors
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498  0BF9                     _currentTripReset:	
  3499                           ;psect for function _currentTripReset
  3500                           
  3501  0BF9                     l2283:	
  3502                           ;incstack = 0
  3503                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3504                           
  3505                           
  3506                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3507  0BF9  0021               	movlb	1	; select bank1
  3508  0BFA  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3509  0BFB  300B               	movlw	11
  3510  0BFC  3186  2676  318B   	fcall	_writeGPIO
  3511  0BFF                     l2285:
  3512                           
  3513                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3514                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3515  0BFF  0021               	movlb	1	; select bank1
  3516  0C00  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3517  0C01  0AD2               	incf	writeGPIO@writeValue^(0+128),f
  3518  0C02  300B               	movlw	11
  3519  0C03  3186  2676  318B   	fcall	_writeGPIO
  3520  0C06                     l534:
  3521  0C06  0008               	return
  3522  0C07                     __end_of_currentTripReset:
  3523                           
  3524                           	psect	text12
  3525  0676                     __ptext12:	
  3526 ;; *************** function _writeGPIO *****************
  3527 ;; Defined at:
  3528 ;;		line 52 in file "GPIO.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  gpioNumber      1    wreg     const enum E2798
  3531 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3534 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3535 ;;  portType        1    3[BANK1 ] unsigned char 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3545 ;;      Params:         0       0       1       0       0       0
  3546 ;;      Locals:         0       0       3       0       0       0
  3547 ;;      Temps:          0       0       2       0       0       0
  3548 ;;      Totals:         0       0       6       0       0       0
  3549 ;;Total ram usage:        6 bytes
  3550 ;; Hardware stack levels used: 1
  3551 ;; Hardware stack levels required when called: 5
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_currentTripReset
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559  0676                     _writeGPIO:	
  3560                           ;psect for function _writeGPIO
  3561                           
  3562                           
  3563                           ;incstack = 0
  3564                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3565                           ;writeGPIO@gpioNumber stored from wreg
  3566  0676  0021               	movlb	1	; select bank1
  3567  0677  00D6               	movwf	writeGPIO@gpioNumber^(0+128)
  3568  0678                     l2031:
  3569                           
  3570                           ;GPIO.c: 54:     uint8_t portType = 0;
  3571  0678  01D5               	clrf	writeGPIO@portType^(0+128)
  3572  0679                     l2033:
  3573                           
  3574                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3575  0679  3008               	movlw	8
  3576  067A  0256               	subwf	writeGPIO@gpioNumber^(0+128),w
  3577  067B  1C03               	skipc
  3578  067C  2E7E               	goto	u1361
  3579  067D  2E7F               	goto	u1360
  3580  067E                     u1361:
  3581  067E  2E87               	goto	l2039
  3582  067F                     u1360:
  3583  067F                     l2035:
  3584                           
  3585                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3586  067F  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3587  0680  3EF8               	addlw	248
  3588  0681  00D3               	movwf	??_writeGPIO^(0+128)
  3589  0682  0853               	movf	??_writeGPIO^(0+128),w
  3590  0683  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3591  0684                     l2037:
  3592                           
  3593                           ;GPIO.c: 57:         portType = 1;
  3594  0684  01D5               	clrf	writeGPIO@portType^(0+128)
  3595  0685  0AD5               	incf	writeGPIO@portType^(0+128),f
  3596                           
  3597                           ;GPIO.c: 58:     }
  3598  0686  2E8C               	goto	l2043
  3599  0687                     l2039:
  3600                           
  3601                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3602  0687  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3603  0688  00D3               	movwf	??_writeGPIO^(0+128)
  3604  0689  0853               	movf	??_writeGPIO^(0+128),w
  3605  068A  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3606  068B                     l2041:
  3607                           
  3608                           ;GPIO.c: 61:         portType = 0;
  3609  068B  01D5               	clrf	writeGPIO@portType^(0+128)
  3610  068C                     l2043:
  3611                           
  3612                           ;GPIO.c: 64:     if(portType == 0){
  3613  068C  0855               	movf	writeGPIO@portType^(0+128),w
  3614  068D  1D03               	btfss	3,2
  3615  068E  2E90               	goto	u1371
  3616  068F  2E91               	goto	u1370
  3617  0690                     u1371:
  3618  0690  2EB1               	goto	l2051
  3619  0691                     u1370:
  3620  0691                     l2045:
  3621                           
  3622                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3623  0691  0852               	movf	writeGPIO@writeValue^(0+128),w
  3624  0692  1903               	btfsc	3,2
  3625  0693  2E95               	goto	u1381
  3626  0694  2E96               	goto	u1380
  3627  0695                     u1381:
  3628  0695  2EA3               	goto	l2049
  3629  0696                     u1380:
  3630  0696                     l2047:
  3631  0696  3001               	movlw	1
  3632  0697  00D3               	movwf	??_writeGPIO^(0+128)
  3633  0698  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3634  0699  2E9B               	goto	u1394
  3635  069A                     u1395:
  3636  069A  35D3               	lslf	??_writeGPIO^(0+128),f
  3637  069B                     u1394:
  3638  069B  0B89               	decfsz	9,f
  3639  069C  2E9A               	goto	u1395
  3640  069D  0853               	movf	??_writeGPIO^(0+128),w
  3641  069E  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3642  069F  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3643  06A0  0022               	movlb	2	; select bank2
  3644  06A1  048C               	iorwf	12,f	;volatile
  3645  06A2  2ED5               	goto	l320
  3646  06A3                     l2049:
  3647  06A3  3001               	movlw	1
  3648  06A4  00D3               	movwf	??_writeGPIO^(0+128)
  3649  06A5  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3650  06A6  2EA8               	goto	u1404
  3651  06A7                     u1405:
  3652  06A7  35D3               	lslf	??_writeGPIO^(0+128),f
  3653  06A8                     u1404:
  3654  06A8  0B89               	decfsz	9,f
  3655  06A9  2EA7               	goto	u1405
  3656  06AA  0853               	movf	??_writeGPIO^(0+128),w
  3657  06AB  3AFF               	xorlw	255
  3658  06AC  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3659  06AD  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3660  06AE  0022               	movlb	2	; select bank2
  3661  06AF  058C               	andwf	12,f	;volatile
  3662  06B0  2ED5               	goto	l320
  3663  06B1                     l2051:
  3664  06B1  0355               	decf	writeGPIO@portType^(0+128),w
  3665  06B2  1D03               	btfss	3,2
  3666  06B3  2EB5               	goto	u1411
  3667  06B4  2EB6               	goto	u1410
  3668  06B5                     u1411:
  3669  06B5  2ED5               	goto	l320
  3670  06B6                     u1410:
  3671  06B6                     l2053:
  3672                           
  3673                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3674  06B6  0852               	movf	writeGPIO@writeValue^(0+128),w
  3675  06B7  1903               	btfsc	3,2
  3676  06B8  2EBA               	goto	u1421
  3677  06B9  2EBB               	goto	u1420
  3678  06BA                     u1421:
  3679  06BA  2EC8               	goto	l2057
  3680  06BB                     u1420:
  3681  06BB                     l2055:
  3682  06BB  3001               	movlw	1
  3683  06BC  00D3               	movwf	??_writeGPIO^(0+128)
  3684  06BD  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3685  06BE  2EC0               	goto	u1434
  3686  06BF                     u1435:
  3687  06BF  35D3               	lslf	??_writeGPIO^(0+128),f
  3688  06C0                     u1434:
  3689  06C0  0B89               	decfsz	9,f
  3690  06C1  2EBF               	goto	u1435
  3691  06C2  0853               	movf	??_writeGPIO^(0+128),w
  3692  06C3  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3693  06C4  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3694  06C5  0022               	movlb	2	; select bank2
  3695  06C6  048D               	iorwf	13,f	;volatile
  3696  06C7  2ED5               	goto	l320
  3697  06C8                     l2057:
  3698  06C8  3001               	movlw	1
  3699  06C9  00D3               	movwf	??_writeGPIO^(0+128)
  3700  06CA  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3701  06CB  2ECD               	goto	u1444
  3702  06CC                     u1445:
  3703  06CC  35D3               	lslf	??_writeGPIO^(0+128),f
  3704  06CD                     u1444:
  3705  06CD  0B89               	decfsz	9,f
  3706  06CE  2ECC               	goto	u1445
  3707  06CF  0853               	movf	??_writeGPIO^(0+128),w
  3708  06D0  3AFF               	xorlw	255
  3709  06D1  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3710  06D2  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3711  06D3  0022               	movlb	2	; select bank2
  3712  06D4  058D               	andwf	13,f	;volatile
  3713  06D5                     l320:
  3714  06D5  0008               	return
  3715  06D6                     __end_of_writeGPIO:
  3716                           
  3717                           	psect	text13
  3718  0C3D                     __ptext13:	
  3719 ;; *************** function _initialiseController *****************
  3720 ;; Defined at:
  3721 ;;		line 28 in file "Controller.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0, pclath, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3735 ;;      Params:         0       0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used: 1
  3741 ;; Hardware stack levels required when called: 6
  3742 ;; This function calls:
  3743 ;;		_initialiseADCPin
  3744 ;;		_initialiseGPIO
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750  0C3D                     _initialiseController:	
  3751                           ;psect for function _initialiseController
  3752                           
  3753  0C3D                     l2657:	
  3754                           ;incstack = 0
  3755                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3756                           
  3757                           
  3758                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3759  0C3D  0021               	movlb	1	; select bank1
  3760  0C3E  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3761  0C3F  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3762  0C40  3004               	movlw	4
  3763  0C41  3185  259A  318C   	fcall	_initialiseGPIO
  3764                           
  3765                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3766  0C44  3004               	movlw	4
  3767  0C45  3186  2610  318C   	fcall	_initialiseADCPin
  3768  0C48                     l2659:
  3769                           
  3770                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (7u + 16u)
      +                          );
  3771  0C48  3000               	movlw	0
  3772  0C49  0021               	movlb	1	; select bank1
  3773  0C4A  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3774  0C4B  3000               	movlw	0
  3775  0C4C  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3776  0C4D  3000               	movlw	0
  3777  0C4E  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3778  0C4F  3001               	movlw	1
  3779  0C50  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3780  0C51  3000               	movlw	0
  3781  0C52  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3782  0C53  3000               	movlw	0
  3783  0C54  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3784  0C55  3000               	movlw	0
  3785  0C56  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3786  0C57  3000               	movlw	0
  3787  0C58  00A0               	movwf	_integratorScaledLimit^(0+128)
  3788  0C59                     l430:
  3789  0C59  0008               	return
  3790  0C5A                     __end_of_initialiseController:
  3791                           
  3792                           	psect	text14
  3793  059A                     __ptext14:	
  3794 ;; *************** function _initialiseGPIO *****************
  3795 ;; Defined at:
  3796 ;;		line 18 in file "GPIO.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  gpioNumber      1    wreg     const enum E2798
  3799 ;;  direction       1    0[BANK1 ] unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3802 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3803 ;;  portType        1    3[BANK1 ] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3813 ;;      Params:         0       0       1       0       0       0
  3814 ;;      Locals:         0       0       3       0       0       0
  3815 ;;      Temps:          0       0       2       0       0       0
  3816 ;;      Totals:         0       0       6       0       0       0
  3817 ;;Total ram usage:        6 bytes
  3818 ;; Hardware stack levels used: 1
  3819 ;; Hardware stack levels required when called: 5
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_main
  3824 ;;		_setupPWM
  3825 ;;		_initialiseController
  3826 ;;		_initialiseCurrentSensors
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830  059A                     _initialiseGPIO:	
  3831                           ;psect for function _initialiseGPIO
  3832                           
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3836                           ;initialiseGPIO@gpioNumber stored from wreg
  3837  059A  0021               	movlb	1	; select bank1
  3838  059B  00D6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3839  059C                     l2151:
  3840                           
  3841                           ;GPIO.c: 20:     uint8_t portType = 0;
  3842  059C  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3843  059D                     l2153:
  3844                           
  3845                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3846  059D  3008               	movlw	8
  3847  059E  0256               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3848  059F  1C03               	skipc
  3849  05A0  2DA2               	goto	u1641
  3850  05A1  2DA3               	goto	u1640
  3851  05A2                     u1641:
  3852  05A2  2DAB               	goto	l2159
  3853  05A3                     u1640:
  3854  05A3                     l2155:
  3855                           
  3856                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3857  05A3  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3858  05A4  3EF8               	addlw	248
  3859  05A5  00D3               	movwf	??_initialiseGPIO^(0+128)
  3860  05A6  0853               	movf	??_initialiseGPIO^(0+128),w
  3861  05A7  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3862  05A8                     l2157:
  3863                           
  3864                           ;GPIO.c: 23:         portType = 1;
  3865  05A8  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3866  05A9  0AD5               	incf	initialiseGPIO@portType^(0+128),f
  3867                           
  3868                           ;GPIO.c: 24:     }
  3869  05AA  2DB0               	goto	l2163
  3870  05AB                     l2159:
  3871                           
  3872                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3873  05AB  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3874  05AC  00D3               	movwf	??_initialiseGPIO^(0+128)
  3875  05AD  0853               	movf	??_initialiseGPIO^(0+128),w
  3876  05AE  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3877  05AF                     l2161:
  3878                           
  3879                           ;GPIO.c: 27:         portType = 0;
  3880  05AF  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3881  05B0                     l2163:
  3882                           
  3883                           ;GPIO.c: 30:     if(portType == 0){
  3884  05B0  0855               	movf	initialiseGPIO@portType^(0+128),w
  3885  05B1  1D03               	btfss	3,2
  3886  05B2  2DB4               	goto	u1651
  3887  05B3  2DB5               	goto	u1650
  3888  05B4                     u1651:
  3889  05B4  2DE0               	goto	l2171
  3890  05B5                     u1650:
  3891  05B5                     l2165:
  3892                           
  3893                           ;GPIO.c: 31:         if(direction){
  3894  05B5  0852               	movf	initialiseGPIO@direction^(0+128),w
  3895  05B6  1903               	btfsc	3,2
  3896  05B7  2DB9               	goto	u1661
  3897  05B8  2DBA               	goto	u1660
  3898  05B9                     u1661:
  3899  05B9  2DD3               	goto	l2169
  3900  05BA                     u1660:
  3901  05BA                     l2167:
  3902                           
  3903                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3904  05BA  3001               	movlw	1
  3905  05BB  00D3               	movwf	??_initialiseGPIO^(0+128)
  3906  05BC  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3907  05BD  2DBF               	goto	u1674
  3908  05BE                     u1675:
  3909  05BE  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3910  05BF                     u1674:
  3911  05BF  0B89               	decfsz	9,f
  3912  05C0  2DBE               	goto	u1675
  3913  05C1  0853               	movf	??_initialiseGPIO^(0+128),w
  3914  05C2  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3915  05C3  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3916  05C4  048C               	iorwf	12,f	;volatile
  3917                           
  3918                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3919  05C5  3001               	movlw	1
  3920  05C6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3921  05C7  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3922  05C8  2DCA               	goto	u1684
  3923  05C9                     u1685:
  3924  05C9  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3925  05CA                     u1684:
  3926  05CA  0B89               	decfsz	9,f
  3927  05CB  2DC9               	goto	u1685
  3928  05CC  0853               	movf	??_initialiseGPIO^(0+128),w
  3929  05CD  3AFF               	xorlw	255
  3930  05CE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3931  05CF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3932  05D0  0023               	movlb	3	; select bank3
  3933  05D1  058C               	andwf	12,f	;volatile
  3934                           
  3935                           ;GPIO.c: 34:         }
  3936  05D2  2E0F               	goto	l306
  3937  05D3                     l2169:
  3938  05D3  3001               	movlw	1
  3939  05D4  00D3               	movwf	??_initialiseGPIO^(0+128)
  3940  05D5  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3941  05D6  2DD8               	goto	u1694
  3942  05D7                     u1695:
  3943  05D7  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3944  05D8                     u1694:
  3945  05D8  0B89               	decfsz	9,f
  3946  05D9  2DD7               	goto	u1695
  3947  05DA  0853               	movf	??_initialiseGPIO^(0+128),w
  3948  05DB  3AFF               	xorlw	255
  3949  05DC  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3950  05DD  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3951  05DE  058C               	andwf	12,f	;volatile
  3952  05DF  2E0F               	goto	l306
  3953  05E0                     l2171:
  3954  05E0  0355               	decf	initialiseGPIO@portType^(0+128),w
  3955  05E1  1D03               	btfss	3,2
  3956  05E2  2DE4               	goto	u1701
  3957  05E3  2DE5               	goto	u1700
  3958  05E4                     u1701:
  3959  05E4  2E0F               	goto	l306
  3960  05E5                     u1700:
  3961  05E5                     l2173:
  3962                           
  3963                           ;GPIO.c: 38:         if(direction){
  3964  05E5  0852               	movf	initialiseGPIO@direction^(0+128),w
  3965  05E6  1903               	btfsc	3,2
  3966  05E7  2DE9               	goto	u1711
  3967  05E8  2DEA               	goto	u1710
  3968  05E9                     u1711:
  3969  05E9  2E03               	goto	l2177
  3970  05EA                     u1710:
  3971  05EA                     l2175:
  3972                           
  3973                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3974  05EA  3001               	movlw	1
  3975  05EB  00D3               	movwf	??_initialiseGPIO^(0+128)
  3976  05EC  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3977  05ED  2DEF               	goto	u1724
  3978  05EE                     u1725:
  3979  05EE  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3980  05EF                     u1724:
  3981  05EF  0B89               	decfsz	9,f
  3982  05F0  2DEE               	goto	u1725
  3983  05F1  0853               	movf	??_initialiseGPIO^(0+128),w
  3984  05F2  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3985  05F3  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3986  05F4  048D               	iorwf	13,f	;volatile
  3987                           
  3988                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3989  05F5  3001               	movlw	1
  3990  05F6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3991  05F7  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3992  05F8  2DFA               	goto	u1734
  3993  05F9                     u1735:
  3994  05F9  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3995  05FA                     u1734:
  3996  05FA  0B89               	decfsz	9,f
  3997  05FB  2DF9               	goto	u1735
  3998  05FC  0853               	movf	??_initialiseGPIO^(0+128),w
  3999  05FD  3AFF               	xorlw	255
  4000  05FE  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4001  05FF  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4002  0600  0023               	movlb	3	; select bank3
  4003  0601  058D               	andwf	13,f	;volatile
  4004                           
  4005                           ;GPIO.c: 41:         }
  4006  0602  2E0F               	goto	l306
  4007  0603                     l2177:
  4008  0603  3001               	movlw	1
  4009  0604  00D3               	movwf	??_initialiseGPIO^(0+128)
  4010  0605  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  4011  0606  2E08               	goto	u1744
  4012  0607                     u1745:
  4013  0607  35D3               	lslf	??_initialiseGPIO^(0+128),f
  4014  0608                     u1744:
  4015  0608  0B89               	decfsz	9,f
  4016  0609  2E07               	goto	u1745
  4017  060A  0853               	movf	??_initialiseGPIO^(0+128),w
  4018  060B  3AFF               	xorlw	255
  4019  060C  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4020  060D  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4021  060E  058D               	andwf	13,f	;volatile
  4022  060F                     l306:
  4023  060F  0008               	return
  4024  0610                     __end_of_initialiseGPIO:
  4025                           
  4026                           	psect	text15
  4027  0610                     __ptext15:	
  4028 ;; *************** function _initialiseADCPin *****************
  4029 ;; Defined at:
  4030 ;;		line 37 in file "ADC.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  gpioNumber      1    wreg     const enum E2798
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  4035 ;;  portNumber      1    4[BANK1 ] unsigned char 
  4036 ;;  portType        1    3[BANK1 ] unsigned char 
  4037 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4047 ;;      Params:         0       0       0       0       0       0
  4048 ;;      Locals:         0       0       4       0       0       0
  4049 ;;      Temps:          0       0       2       0       0       0
  4050 ;;      Totals:         0       0       6       0       0       0
  4051 ;;Total ram usage:        6 bytes
  4052 ;; Hardware stack levels used: 1
  4053 ;; Hardware stack levels required when called: 5
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_initialisePotentiometers
  4058 ;;		_initialiseController
  4059 ;;		_initialiseCurrentSensors
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063  0610                     _initialiseADCPin:	
  4064                           ;psect for function _initialiseADCPin
  4065                           
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4069                           ;initialiseADCPin@gpioNumber stored from wreg
  4070  0610  0021               	movlb	1	; select bank1
  4071  0611  00D7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4072  0612                     l2179:
  4073                           
  4074                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4075  0612  01D6               	clrf	initialiseADCPin@portNumber^(0+128)
  4076                           
  4077                           ;ADC.c: 40:     uint8_t portType = 0;
  4078  0613  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4079                           
  4080                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4081  0614  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4082  0615                     l2181:
  4083                           
  4084                           ;ADC.c: 43:     if(gpioNumber < 4){
  4085  0615  3004               	movlw	4
  4086  0616  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4087  0617  1803               	skipnc
  4088  0618  2E1A               	goto	u1751
  4089  0619  2E1B               	goto	u1750
  4090  061A                     u1751:
  4091  061A  2E22               	goto	l2189
  4092  061B                     u1750:
  4093  061B                     l2183:
  4094                           
  4095                           ;ADC.c: 44:         portNumber = gpioNumber;
  4096  061B  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4097  061C  00D2               	movwf	??_initialiseADCPin^(0+128)
  4098  061D  0852               	movf	??_initialiseADCPin^(0+128),w
  4099  061E  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4100  061F                     l2185:
  4101                           
  4102                           ;ADC.c: 45:         portType = 0;
  4103  061F  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4104  0620                     l2187:
  4105                           
  4106                           ;ADC.c: 46:         gpioValid = 1;
  4107  0620  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4108  0621  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4109  0622                     l2189:
  4110                           
  4111                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4112  0622  3009               	movlw	9
  4113  0623  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4114  0624  1C03               	skipc
  4115  0625  2E27               	goto	u1761
  4116  0626  2E28               	goto	u1760
  4117  0627                     u1761:
  4118  0627  2E37               	goto	l238
  4119  0628                     u1760:
  4120  0628                     l2191:
  4121  0628  3010               	movlw	16
  4122  0629  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4123  062A  1803               	skipnc
  4124  062B  2E2D               	goto	u1771
  4125  062C  2E2E               	goto	u1770
  4126  062D                     u1771:
  4127  062D  2E37               	goto	l238
  4128  062E                     u1770:
  4129  062E                     l2193:
  4130                           
  4131                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4132  062E  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4133  062F  3EF8               	addlw	248
  4134  0630  00D2               	movwf	??_initialiseADCPin^(0+128)
  4135  0631  0852               	movf	??_initialiseADCPin^(0+128),w
  4136  0632  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4137  0633                     l2195:
  4138                           
  4139                           ;ADC.c: 51:         portType = 1;
  4140  0633  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4141  0634  0AD5               	incf	initialiseADCPin@portType^(0+128),f
  4142  0635                     l2197:
  4143                           
  4144                           ;ADC.c: 52:         gpioValid = 1;
  4145  0635  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4146  0636  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4147  0637                     l238:	
  4148                           ;ADC.c: 53:     }
  4149                           
  4150                           
  4151                           ;ADC.c: 55:     if(gpioValid){
  4152  0637  0854               	movf	initialiseADCPin@gpioValid^(0+128),w
  4153  0638  1903               	btfsc	3,2
  4154  0639  2E3B               	goto	u1781
  4155  063A  2E3C               	goto	u1780
  4156  063B                     u1781:
  4157  063B  2E75               	goto	l243
  4158  063C                     u1780:
  4159  063C                     l2199:
  4160                           
  4161                           ;ADC.c: 56:         if(portType == 0){
  4162  063C  0855               	movf	initialiseADCPin@portType^(0+128),w
  4163  063D  1D03               	btfss	3,2
  4164  063E  2E40               	goto	u1791
  4165  063F  2E41               	goto	u1790
  4166  0640                     u1791:
  4167  0640  2E59               	goto	l2203
  4168  0641                     u1790:
  4169  0641                     l2201:
  4170                           
  4171                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4172  0641  3001               	movlw	1
  4173  0642  00D2               	movwf	??_initialiseADCPin^(0+128)
  4174  0643  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4175  0644  2E46               	goto	u1804
  4176  0645                     u1805:
  4177  0645  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4178  0646                     u1804:
  4179  0646  0B89               	decfsz	9,f
  4180  0647  2E45               	goto	u1805
  4181  0648  0852               	movf	??_initialiseADCPin^(0+128),w
  4182  0649  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4183  064A  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4184  064B  048C               	iorwf	12,f	;volatile
  4185                           
  4186                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4187  064C  3001               	movlw	1
  4188  064D  00D2               	movwf	??_initialiseADCPin^(0+128)
  4189  064E  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4190  064F  2E51               	goto	u1814
  4191  0650                     u1815:
  4192  0650  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4193  0651                     u1814:
  4194  0651  0B89               	decfsz	9,f
  4195  0652  2E50               	goto	u1815
  4196  0653  0852               	movf	??_initialiseADCPin^(0+128),w
  4197  0654  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4198  0655  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4199  0656  0023               	movlb	3	; select bank3
  4200  0657  048C               	iorwf	12,f	;volatile
  4201                           
  4202                           ;ADC.c: 59:         }
  4203  0658  2E75               	goto	l243
  4204  0659                     l2203:
  4205  0659  0355               	decf	initialiseADCPin@portType^(0+128),w
  4206  065A  1D03               	btfss	3,2
  4207  065B  2E5D               	goto	u1821
  4208  065C  2E5E               	goto	u1820
  4209  065D                     u1821:
  4210  065D  2E75               	goto	l243
  4211  065E                     u1820:
  4212  065E                     l2205:
  4213                           
  4214                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4215  065E  3001               	movlw	1
  4216  065F  00D2               	movwf	??_initialiseADCPin^(0+128)
  4217  0660  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4218  0661  2E63               	goto	u1834
  4219  0662                     u1835:
  4220  0662  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4221  0663                     u1834:
  4222  0663  0B89               	decfsz	9,f
  4223  0664  2E62               	goto	u1835
  4224  0665  0852               	movf	??_initialiseADCPin^(0+128),w
  4225  0666  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4226  0667  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4227  0668  048D               	iorwf	13,f	;volatile
  4228                           
  4229                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4230  0669  3001               	movlw	1
  4231  066A  00D2               	movwf	??_initialiseADCPin^(0+128)
  4232  066B  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4233  066C  2E6E               	goto	u1844
  4234  066D                     u1845:
  4235  066D  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4236  066E                     u1844:
  4237  066E  0B89               	decfsz	9,f
  4238  066F  2E6D               	goto	u1845
  4239  0670  0852               	movf	??_initialiseADCPin^(0+128),w
  4240  0671  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4241  0672  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4242  0673  0023               	movlb	3	; select bank3
  4243  0674  048D               	iorwf	13,f	;volatile
  4244  0675                     l243:
  4245  0675  0008               	return
  4246  0676                     __end_of_initialiseADCPin:
  4247                           
  4248                           	psect	text16
  4249  0BB9                     __ptext16:	
  4250 ;; *************** function _initialiseADCModule *****************
  4251 ;; Defined at:
  4252 ;;		line 14 in file "ADC.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;		None
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;		None
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		wreg
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4266 ;;      Params:         0       0       0       0       0       0
  4267 ;;      Locals:         0       0       0       0       0       0
  4268 ;;      Temps:          0       0       0       0       0       0
  4269 ;;      Totals:         0       0       0       0       0       0
  4270 ;;Total ram usage:        0 bytes
  4271 ;; Hardware stack levels used: 1
  4272 ;; Hardware stack levels required when called: 5
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_main
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280  0BB9                     _initialiseADCModule:	
  4281                           ;psect for function _initialiseADCModule
  4282                           
  4283  0BB9                     l2651:	
  4284                           ;incstack = 0
  4285                           ; Regs used in _initialiseADCModule: [wreg]
  4286                           
  4287                           
  4288                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4289  0BB9  3001               	movlw	1
  4290  0BBA  0021               	movlb	1	; select bank1
  4291  0BBB  009D               	movwf	29	;volatile
  4292                           
  4293                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4294  0BBC  3090               	movlw	144
  4295  0BBD  009E               	movwf	30	;volatile
  4296  0BBE                     l234:
  4297  0BBE  0008               	return
  4298  0BBF                     __end_of_initialiseADCModule:
  4299                           
  4300                           	psect	intentry
  4301  0004                     __pintentry:	
  4302 ;; *************** function _Tick490Hz *****************
  4303 ;; Defined at:
  4304 ;;		line 42 in file "main.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4318 ;;      Params:         0       0       0       0       0       0
  4319 ;;      Locals:         0       0       0       0       0       0
  4320 ;;      Temps:          0       1       0       0       0       0
  4321 ;;      Totals:         0       1       0       0       0       0
  4322 ;;Total ram usage:        1 bytes
  4323 ;; Hardware stack levels used: 1
  4324 ;; Hardware stack levels required when called: 4
  4325 ;; This function calls:
  4326 ;;		_controlRoutine
  4327 ;;		_currentTripMonitor
  4328 ;;		_readFilteredDutyPot
  4329 ;;		_readFilteredFreqPot
  4330 ;;		_readFilteredIL
  4331 ;;		_readFilteredVout
  4332 ;;		_runPotScaling
  4333 ;;		_setPWMDutyandPeriod
  4334 ;;		i1_writeGPIO
  4335 ;; This function is called by:
  4336 ;;		Interrupt level 1
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340  0004                     _Tick490Hz:
  4341                           
  4342                           ;incstack = 0
  4343  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4344                           
  4345                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4346  0005  3180               	pagesel	$
  4347  0006                     i1l2707:
  4348                           
  4349                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4350  0006  01F0               	clrf	i1writeGPIO@writeValue
  4351  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4352  0008  300C               	movlw	12
  4353  0009  3186  26D6  3180   	fcall	i1_writeGPIO
  4354                           
  4355                           ;main.c: 54:         currentTripMonitor();
  4356  000C  318C  2499  3180   	fcall	_currentTripMonitor
  4357                           
  4358                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4359  000F  0020               	movlb	0	; select bank0
  4360  0010  0864               	movf	_setDuty+1,w
  4361  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4362  0012  0863               	movf	_setDuty,w
  4363  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4364  0014  086E               	movf	_setPeriod,w
  4365  0015  00DE               	movwf	??_Tick490Hz
  4366  0016  085E               	movf	??_Tick490Hz,w
  4367  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4368  0018  318C  24BD  3180   	fcall	_setPWMDutyandPeriod
  4369  001B                     i1l2709:
  4370                           
  4371                           ;main.c: 58:         if(timerSlotHalf == 0){
  4372  001B  0020               	movlb	0	; select bank0
  4373  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4374  001D  1D03               	btfss	3,2
  4375  001E  2820               	goto	u251_21
  4376  001F  2821               	goto	u251_20
  4377  0020                     u251_21:
  4378  0020  2829               	goto	i1l2715
  4379  0021                     u251_20:
  4380  0021                     i1l2711:
  4381                           
  4382                           ;main.c: 60:             controlRoutine();
  4383  0021  3183  23FF  3180   	fcall	_controlRoutine
  4384  0024                     i1l2713:
  4385                           
  4386                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4387  0024  01F0               	clrf	i1writeGPIO@writeValue
  4388  0025  300C               	movlw	12
  4389  0026  3186  26D6  3180   	fcall	i1_writeGPIO
  4390  0029                     i1l2715:
  4391                           
  4392                           ;main.c: 64:         if(timerSlotHalf == 1){
  4393  0029  0020               	movlb	0	; select bank0
  4394  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4395  002B  1D03               	btfss	3,2
  4396  002C  282E               	goto	u252_21
  4397  002D  282F               	goto	u252_20
  4398  002E                     u252_21:
  4399  002E  2878               	goto	i1l2737
  4400  002F                     u252_20:
  4401  002F                     i1l2717:
  4402                           
  4403                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4404  002F  01F0               	clrf	i1writeGPIO@writeValue
  4405  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4406  0031  300D               	movlw	13
  4407  0032  3186  26D6  3180   	fcall	i1_writeGPIO
  4408  0035                     i1l2719:
  4409                           
  4410                           ;main.c: 67:             filteredIL = readFilteredIL();
  4411  0035  318E  2698  3180   	fcall	_readFilteredIL
  4412  0038  0871               	movf	?_readFilteredIL+1,w
  4413  0039  0021               	movlb	1	; select bank1
  4414  003A  00B1               	movwf	(_filteredIL+1)^(0+128)
  4415  003B  0870               	movf	?_readFilteredIL,w
  4416  003C  00B0               	movwf	_filteredIL^(0+128)
  4417  003D                     i1l2721:
  4418                           
  4419                           ;main.c: 69:             filteredVout = readFilteredVout();
  4420  003D  3187  2735  3180   	fcall	_readFilteredVout
  4421  0040  087B               	movf	?_readFilteredVout+1,w
  4422  0041  0020               	movlb	0	; select bank0
  4423  0042  00E0               	movwf	_filteredVout+1
  4424  0043  087A               	movf	?_readFilteredVout,w
  4425  0044  00DF               	movwf	_filteredVout
  4426  0045                     i1l2723:
  4427                           
  4428                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4429  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4430  0046  1D03               	btfss	3,2
  4431  0047  2849               	goto	u253_21
  4432  0048  284A               	goto	u253_20
  4433  0049                     u253_21:
  4434  0049  284D               	goto	i1l2727
  4435  004A                     u253_20:
  4436  004A                     i1l2725:
  4437                           
  4438                           ;main.c: 74:                 runPotScaling();
  4439  004A  3183  2313  3180   	fcall	_runPotScaling
  4440  004D                     i1l2727:
  4441                           
  4442                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4443  004D  0020               	movlb	0	; select bank0
  4444  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4445  004F  1D03               	btfss	3,2
  4446  0050  2852               	goto	u254_21
  4447  0051  2853               	goto	u254_20
  4448  0052                     u254_21:
  4449  0052  2863               	goto	i1l2731
  4450  0053                     u254_20:
  4451  0053                     i1l2729:
  4452                           
  4453                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4454  0053  318F  27A5  3180   	fcall	_readFilteredDutyPot
  4455  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4456  0057  0021               	movlb	1	; select bank1
  4457  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4458  0059  087A               	movf	?_readFilteredDutyPot,w
  4459  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4460                           
  4461                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4462  005B  3187  2790  3180   	fcall	_readFilteredFreqPot
  4463  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4464  005F  0021               	movlb	1	; select bank1
  4465  0060  00AF               	movwf	(_filteredFreqPot+1)^(0+128)
  4466  0061  087A               	movf	?_readFilteredFreqPot,w
  4467  0062  00AE               	movwf	_filteredFreqPot^(0+128)
  4468  0063                     i1l2731:
  4469                           
  4470                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4471  0063  0020               	movlb	0	; select bank0
  4472  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4473  0065  1D03               	btfss	3,2
  4474  0066  2868               	goto	u255_21
  4475  0067  286A               	goto	u255_20
  4476  0068                     u255_21:
  4477  0068  3001               	movlw	1
  4478  0069  286B               	goto	u256_20
  4479  006A                     u255_20:
  4480  006A  3000               	movlw	0
  4481  006B                     u256_20:
  4482  006B  00DE               	movwf	??_Tick490Hz
  4483  006C  085E               	movf	??_Tick490Hz,w
  4484  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4485  006E                     i1l2733:
  4486                           
  4487                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4488  006E  01F0               	clrf	i1writeGPIO@writeValue
  4489  006F  300C               	movlw	12
  4490  0070  3186  26D6  3180   	fcall	i1_writeGPIO
  4491  0073                     i1l2735:
  4492                           
  4493                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4494  0073  01F0               	clrf	i1writeGPIO@writeValue
  4495  0074  300D               	movlw	13
  4496  0075  3186  26D6  3180   	fcall	i1_writeGPIO
  4497  0078                     i1l2737:
  4498                           
  4499                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4500  0078  0020               	movlb	0	; select bank0
  4501  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4502  007A  1D03               	btfss	3,2
  4503  007B  287D               	goto	u257_21
  4504  007C  287F               	goto	u257_20
  4505  007D                     u257_21:
  4506  007D  3001               	movlw	1
  4507  007E  2880               	goto	u258_20
  4508  007F                     u257_20:
  4509  007F  3000               	movlw	0
  4510  0080                     u258_20:
  4511  0080  00DE               	movwf	??_Tick490Hz
  4512  0081  085E               	movf	??_Tick490Hz,w
  4513  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4514  0083                     i1l2739:
  4515                           
  4516                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4517  0083  110B               	bcf	11,2	;volatile
  4518  0084                     i1l110:
  4519  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4520  0085  0009               	retfie
  4521  0086                     __end_of_Tick490Hz:
  4522                           
  4523                           	psect	text18
  4524  0CBD                     __ptext18:	
  4525 ;; *************** function _setPWMDutyandPeriod *****************
  4526 ;; Defined at:
  4527 ;;		line 49 in file "PWM.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4530 ;;  period          1    2[COMMON] unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4542 ;;      Params:         3       0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0
  4544 ;;      Temps:          2       0       0       0       0       0
  4545 ;;      Totals:         5       0       0       0       0       0
  4546 ;;Total ram usage:        5 bytes
  4547 ;; Hardware stack levels used: 1
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		_Tick490Hz
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555  0CBD                     _setPWMDutyandPeriod:	
  4556                           ;psect for function _setPWMDutyandPeriod
  4557                           
  4558  0CBD                     i1l2359:	
  4559                           ;incstack = 0
  4560                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4561                           
  4562                           
  4563                           ;PWM.c: 50:     PR2 = period;
  4564  0CBD  0872               	movf	setPWMDutyandPeriod@period,w
  4565  0CBE  0020               	movlb	0	; select bank0
  4566  0CBF  009B               	movwf	27	;volatile
  4567  0CC0                     i1l2361:
  4568                           
  4569                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4570  0CC0  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4571  0CC1  00F4               	movwf	??_setPWMDutyandPeriod+1
  4572  0CC2  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4573  0CC3  00F3               	movwf	??_setPWMDutyandPeriod
  4574  0CC4  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4575  0CC5  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4576  0CC6  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4577  0CC7  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4578  0CC8  0873               	movf	??_setPWMDutyandPeriod,w
  4579  0CC9  0025               	movlb	5	; select bank5
  4580  0CCA  0091               	movwf	17	;volatile
  4581  0CCB                     i1l2363:
  4582                           
  4583                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4584  0CCB  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4585  0CCC  3901               	andlw	1
  4586  0CCD  00F3               	movwf	??_setPWMDutyandPeriod
  4587  0CCE  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4588  0CCF  0813               	movf	19,w	;volatile
  4589  0CD0  0673               	xorwf	??_setPWMDutyandPeriod,w
  4590  0CD1  39EF               	andlw	-17
  4591  0CD2  0673               	xorwf	??_setPWMDutyandPeriod,w
  4592  0CD3  0093               	movwf	19	;volatile
  4593                           
  4594                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4595  0CD4  3002               	movlw	2
  4596  0CD5  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4597  0CD6  00F3               	movwf	??_setPWMDutyandPeriod
  4598  0CD7  3000               	movlw	0
  4599  0CD8  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4600  0CD9  00F4               	movwf	??_setPWMDutyandPeriod+1
  4601  0CDA  3000               	movlw	0
  4602  0CDB  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4603  0CDC  3002               	movlw	2
  4604  0CDD  1903               	skipnz
  4605  0CDE  0273               	subwf	??_setPWMDutyandPeriod,w
  4606  0CDF  1803               	skipnc
  4607  0CE0  2CE2               	goto	u219_21
  4608  0CE1  2CE5               	goto	u219_20
  4609  0CE2                     u219_21:
  4610  0CE2  0025               	movlb	5	; select bank5
  4611  0CE3  1693               	bsf	19,5	;volatile
  4612  0CE4  2CE7               	goto	u220_24
  4613  0CE5                     u219_20:
  4614  0CE5  0025               	movlb	5	; select bank5
  4615  0CE6  1293               	bcf	19,5	;volatile
  4616  0CE7                     u220_24:
  4617  0CE7                     i1l177:
  4618  0CE7  0008               	return
  4619  0CE8                     __end_of_setPWMDutyandPeriod:
  4620                           
  4621                           	psect	text19
  4622  0313                     __ptext19:	
  4623 ;; *************** function _runPotScaling *****************
  4624 ;; Defined at:
  4625 ;;		line 55 in file "Potentiometer.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4630 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0, pclath, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4640 ;;      Params:         0       0       0       0       0       0
  4641 ;;      Locals:         0       4       0       0       0       0
  4642 ;;      Temps:          0       8       0       0       0       0
  4643 ;;      Totals:         0      12       0       0       0       0
  4644 ;;Total ram usage:       12 bytes
  4645 ;; Hardware stack levels used: 1
  4646 ;; Hardware stack levels required when called: 1
  4647 ;; This function calls:
  4648 ;;		___lldiv
  4649 ;;		___lmul
  4650 ;;		___wmul
  4651 ;; This function is called by:
  4652 ;;		_Tick490Hz
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656  0313                     _runPotScaling:	
  4657                           ;psect for function _runPotScaling
  4658                           
  4659  0313                     i1l2459:	
  4660                           ;incstack = 0
  4661                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4662                           
  4663                           
  4664                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4665  0313  0020               	movlb	0	; select bank0
  4666  0314  036C               	decf	_currentState,w
  4667  0315  1D03               	btfss	3,2
  4668  0316  2B18               	goto	u234_21
  4669  0317  2B19               	goto	u234_20
  4670  0318                     u234_21:
  4671  0318  2BFE               	goto	i1l379
  4672  0319                     u234_20:
  4673  0319                     i1l2461:
  4674                           
  4675                           ;Potentiometer.c: 58:         potSetCount++;
  4676  0319  3001               	movlw	1
  4677  031A  00A6               	movwf	??_runPotScaling
  4678  031B  0826               	movf	??_runPotScaling,w
  4679  031C  07E8               	addwf	_potSetCount,f
  4680                           
  4681                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4682  031D  3020               	movlw	32
  4683  031E  0668               	xorwf	_potSetCount,w
  4684  031F  1D03               	btfss	3,2
  4685  0320  2B22               	goto	u235_21
  4686  0321  2B23               	goto	u235_20
  4687  0322                     u235_21:
  4688  0322  2BFE               	goto	i1l379
  4689  0323                     u235_20:
  4690  0323                     i1l2463:
  4691                           
  4692                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 51) * (uint
      +                          32_t)(180u - 15u)) >> 10 ) + 15u;
  4693  0323  0021               	movlb	1	; select bank1
  4694  0324  082E               	movf	_filteredFreqPot^(0+128),w
  4695  0325  3ECD               	addlw	205
  4696  0326  00F0               	movwf	___lmul@multiplier
  4697  0327  30FF               	movlw	255
  4698  0328  3D2F               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4699  0329  00F1               	movwf	___lmul@multiplier+1
  4700  032A  01F2               	clrf	___lmul@multiplier+2
  4701  032B  01F3               	clrf	___lmul@multiplier+3
  4702  032C  3000               	movlw	0
  4703  032D  00F7               	movwf	___lmul@multiplicand+3
  4704  032E  3000               	movlw	0
  4705  032F  00F6               	movwf	___lmul@multiplicand+2
  4706  0330  3000               	movlw	0
  4707  0331  00F5               	movwf	___lmul@multiplicand+1
  4708  0332  30A5               	movlw	165
  4709  0333  00F4               	movwf	___lmul@multiplicand
  4710  0334  318D  2515  3183   	fcall	___lmul
  4711  0337  0870               	movf	?___lmul,w
  4712  0338  0020               	movlb	0	; select bank0
  4713  0339  00A6               	movwf	??_runPotScaling
  4714  033A  0871               	movf	?___lmul+1,w
  4715  033B  00A7               	movwf	??_runPotScaling+1
  4716  033C  0872               	movf	?___lmul+2,w
  4717  033D  00A8               	movwf	??_runPotScaling+2
  4718  033E  0873               	movf	?___lmul+3,w
  4719  033F  00A9               	movwf	??_runPotScaling+3
  4720  0340  300A               	movlw	10
  4721  0341                     u236_25:
  4722  0341  36A9               	lsrf	??_runPotScaling+3,f
  4723  0342  0CA8               	rrf	??_runPotScaling+2,f
  4724  0343  0CA7               	rrf	??_runPotScaling+1,f
  4725  0344  0CA6               	rrf	??_runPotScaling,f
  4726  0345                     u236_20:
  4727  0345  0B89               	decfsz	9,f
  4728  0346  2B41               	goto	u236_25
  4729  0347  0826               	movf	??_runPotScaling,w
  4730  0348  3E0F               	addlw	15
  4731  0349  00AA               	movwf	??_runPotScaling+4
  4732  034A  082A               	movf	??_runPotScaling+4,w
  4733  034B  00EE               	movwf	_setPeriod
  4734                           
  4735                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-51) *
      +                           (uint32_t)setPeriod )) >> 8;
  4736  034C  0021               	movlb	1	; select bank1
  4737  034D  082C               	movf	_filteredDutyPot^(0+128),w
  4738  034E  3ECD               	addlw	205
  4739  034F  00F0               	movwf	___lmul@multiplier
  4740  0350  30FF               	movlw	255
  4741  0351  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4742  0352  00F1               	movwf	___lmul@multiplier+1
  4743  0353  01F2               	clrf	___lmul@multiplier+2
  4744  0354  01F3               	clrf	___lmul@multiplier+3
  4745  0355  0020               	movlb	0	; select bank0
  4746  0356  086E               	movf	_setPeriod,w
  4747  0357  00A6               	movwf	??_runPotScaling
  4748  0358  01A7               	clrf	??_runPotScaling+1
  4749  0359  01A8               	clrf	??_runPotScaling+2
  4750  035A  01A9               	clrf	??_runPotScaling+3
  4751  035B  0829               	movf	??_runPotScaling+3,w
  4752  035C  00F7               	movwf	___lmul@multiplicand+3
  4753  035D  0828               	movf	??_runPotScaling+2,w
  4754  035E  00F6               	movwf	___lmul@multiplicand+2
  4755  035F  0827               	movf	??_runPotScaling+1,w
  4756  0360  00F5               	movwf	___lmul@multiplicand+1
  4757  0361  0826               	movf	??_runPotScaling,w
  4758  0362  00F4               	movwf	___lmul@multiplicand
  4759  0363  318D  2515  3183   	fcall	___lmul
  4760  0366  0870               	movf	?___lmul,w
  4761  0367  0020               	movlb	0	; select bank0
  4762  0368  00AA               	movwf	??_runPotScaling+4
  4763  0369  0871               	movf	?___lmul+1,w
  4764  036A  00AB               	movwf	??_runPotScaling+5
  4765  036B  0872               	movf	?___lmul+2,w
  4766  036C  00AC               	movwf	??_runPotScaling+6
  4767  036D  0873               	movf	?___lmul+3,w
  4768  036E  00AD               	movwf	??_runPotScaling+7
  4769  036F  3008               	movlw	8
  4770  0370                     u237_25:
  4771  0370  36AD               	lsrf	??_runPotScaling+7,f
  4772  0371  0CAC               	rrf	??_runPotScaling+6,f
  4773  0372  0CAB               	rrf	??_runPotScaling+5,f
  4774  0373  0CAA               	rrf	??_runPotScaling+4,f
  4775  0374                     u237_20:
  4776  0374  0B89               	decfsz	9,f
  4777  0375  2B70               	goto	u237_25
  4778  0376  082B               	movf	??_runPotScaling+5,w
  4779  0377  00E4               	movwf	_setDuty+1
  4780  0378  082A               	movf	??_runPotScaling+4,w
  4781  0379  00E3               	movwf	_setDuty
  4782  037A                     i1l2465:
  4783                           
  4784                           ;Potentiometer.c: 65:             setDuty = (4*setPeriod) - setDuty;
  4785  037A  086E               	movf	_setPeriod,w
  4786  037B  00A6               	movwf	??_runPotScaling
  4787  037C  01A7               	clrf	??_runPotScaling+1
  4788  037D  35A6               	lslf	??_runPotScaling,f
  4789  037E  0DA7               	rlf	??_runPotScaling+1,f
  4790  037F  35A6               	lslf	??_runPotScaling,f
  4791  0380  0DA7               	rlf	??_runPotScaling+1,f
  4792  0381  0863               	movf	_setDuty,w
  4793  0382  0226               	subwf	??_runPotScaling,w
  4794  0383  00E3               	movwf	_setDuty
  4795  0384  0864               	movf	_setDuty+1,w
  4796  0385  3B27               	subwfb	??_runPotScaling+1,w
  4797  0386  00E4               	movwf	_setDuty+1
  4798  0387                     i1l2467:
  4799                           
  4800                           ;Potentiometer.c: 68:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4801  0387  3000               	movlw	0
  4802  0388  00F9               	movwf	___lldiv@divisor+3
  4803  0389  3000               	movlw	0
  4804  038A  00F8               	movwf	___lldiv@divisor+2
  4805  038B  3000               	movlw	0
  4806  038C  00F7               	movwf	___lldiv@divisor+1
  4807  038D  3019               	movlw	25
  4808  038E  00F6               	movwf	___lldiv@divisor
  4809  038F  305A               	movlw	90
  4810  0390  00F2               	movwf	___wmul@multiplicand
  4811  0391  3000               	movlw	0
  4812  0392  00F3               	movwf	___wmul@multiplicand+1
  4813  0393  086E               	movf	_setPeriod,w
  4814  0394  00A6               	movwf	??_runPotScaling
  4815  0395  01A7               	clrf	??_runPotScaling+1
  4816  0396  0826               	movf	??_runPotScaling,w
  4817  0397  00F0               	movwf	___wmul@multiplier
  4818  0398  0827               	movf	??_runPotScaling+1,w
  4819  0399  00F1               	movwf	___wmul@multiplier+1
  4820  039A  318C  245A  3183   	fcall	___wmul
  4821  039D  0870               	movf	?___wmul,w
  4822  039E  0020               	movlb	0	; select bank0
  4823  039F  00A8               	movwf	??_runPotScaling+2
  4824  03A0  0871               	movf	?___wmul+1,w
  4825  03A1  00A9               	movwf	??_runPotScaling+3
  4826  03A2  01AA               	clrf	??_runPotScaling+4
  4827  03A3  01AB               	clrf	??_runPotScaling+5
  4828  03A4  082B               	movf	??_runPotScaling+5,w
  4829  03A5  00FD               	movwf	___lldiv@dividend+3
  4830  03A6  082A               	movf	??_runPotScaling+4,w
  4831  03A7  00FC               	movwf	___lldiv@dividend+2
  4832  03A8  0829               	movf	??_runPotScaling+3,w
  4833  03A9  00FB               	movwf	___lldiv@dividend+1
  4834  03AA  0828               	movf	??_runPotScaling+2,w
  4835  03AB  00FA               	movwf	___lldiv@dividend
  4836  03AC  318F  274A  3183   	fcall	___lldiv
  4837  03AF  0877               	movf	?___lldiv+1,w
  4838  03B0  0020               	movlb	0	; select bank0
  4839  03B1  00AF               	movwf	runPotScaling@maxDuty+1
  4840  03B2  0876               	movf	?___lldiv,w
  4841  03B3  00AE               	movwf	runPotScaling@maxDuty
  4842  03B4                     i1l2469:
  4843                           
  4844                           ;Potentiometer.c: 69:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4845  03B4  3000               	movlw	0
  4846  03B5  00F9               	movwf	___lldiv@divisor+3
  4847  03B6  3000               	movlw	0
  4848  03B7  00F8               	movwf	___lldiv@divisor+2
  4849  03B8  3000               	movlw	0
  4850  03B9  00F7               	movwf	___lldiv@divisor+1
  4851  03BA  3019               	movlw	25
  4852  03BB  00F6               	movwf	___lldiv@divisor
  4853  03BC  300A               	movlw	10
  4854  03BD  00F2               	movwf	___wmul@multiplicand
  4855  03BE  3000               	movlw	0
  4856  03BF  00F3               	movwf	___wmul@multiplicand+1
  4857  03C0  086E               	movf	_setPeriod,w
  4858  03C1  00A6               	movwf	??_runPotScaling
  4859  03C2  01A7               	clrf	??_runPotScaling+1
  4860  03C3  0826               	movf	??_runPotScaling,w
  4861  03C4  00F0               	movwf	___wmul@multiplier
  4862  03C5  0827               	movf	??_runPotScaling+1,w
  4863  03C6  00F1               	movwf	___wmul@multiplier+1
  4864  03C7  318C  245A  3183   	fcall	___wmul
  4865  03CA  0870               	movf	?___wmul,w
  4866  03CB  0020               	movlb	0	; select bank0
  4867  03CC  00A8               	movwf	??_runPotScaling+2
  4868  03CD  0871               	movf	?___wmul+1,w
  4869  03CE  00A9               	movwf	??_runPotScaling+3
  4870  03CF  01AA               	clrf	??_runPotScaling+4
  4871  03D0  01AB               	clrf	??_runPotScaling+5
  4872  03D1  082B               	movf	??_runPotScaling+5,w
  4873  03D2  00FD               	movwf	___lldiv@dividend+3
  4874  03D3  082A               	movf	??_runPotScaling+4,w
  4875  03D4  00FC               	movwf	___lldiv@dividend+2
  4876  03D5  0829               	movf	??_runPotScaling+3,w
  4877  03D6  00FB               	movwf	___lldiv@dividend+1
  4878  03D7  0828               	movf	??_runPotScaling+2,w
  4879  03D8  00FA               	movwf	___lldiv@dividend
  4880  03D9  318F  274A  3183   	fcall	___lldiv
  4881  03DC  0877               	movf	?___lldiv+1,w
  4882  03DD  0020               	movlb	0	; select bank0
  4883  03DE  00B1               	movwf	runPotScaling@minDuty+1
  4884  03DF  0876               	movf	?___lldiv,w
  4885  03E0  00B0               	movwf	runPotScaling@minDuty
  4886  03E1                     i1l2471:
  4887                           
  4888                           ;Potentiometer.c: 70:             if(setDuty > maxDuty) setDuty = maxDuty;
  4889  03E1  0864               	movf	_setDuty+1,w
  4890  03E2  022F               	subwf	runPotScaling@maxDuty+1,w
  4891  03E3  1D03               	skipz
  4892  03E4  2BE7               	goto	u238_25
  4893  03E5  0863               	movf	_setDuty,w
  4894  03E6  022E               	subwf	runPotScaling@maxDuty,w
  4895  03E7                     u238_25:
  4896  03E7  1803               	skipnc
  4897  03E8  2BEA               	goto	u238_21
  4898  03E9  2BEB               	goto	u238_20
  4899  03EA                     u238_21:
  4900  03EA  2BEF               	goto	i1l377
  4901  03EB                     u238_20:
  4902  03EB                     i1l2473:
  4903  03EB  082F               	movf	runPotScaling@maxDuty+1,w
  4904  03EC  00E4               	movwf	_setDuty+1
  4905  03ED  082E               	movf	runPotScaling@maxDuty,w
  4906  03EE  00E3               	movwf	_setDuty
  4907  03EF                     i1l377:
  4908                           
  4909                           ;Potentiometer.c: 71:             if(setDuty < minDuty) setDuty = minDuty;
  4910  03EF  0831               	movf	runPotScaling@minDuty+1,w
  4911  03F0  0264               	subwf	_setDuty+1,w
  4912  03F1  1D03               	skipz
  4913  03F2  2BF5               	goto	u239_25
  4914  03F3  0830               	movf	runPotScaling@minDuty,w
  4915  03F4  0263               	subwf	_setDuty,w
  4916  03F5                     u239_25:
  4917  03F5  1803               	skipnc
  4918  03F6  2BF8               	goto	u239_21
  4919  03F7  2BF9               	goto	u239_20
  4920  03F8                     u239_21:
  4921  03F8  2BFD               	goto	i1l2477
  4922  03F9                     u239_20:
  4923  03F9                     i1l2475:
  4924  03F9  0831               	movf	runPotScaling@minDuty+1,w
  4925  03FA  00E4               	movwf	_setDuty+1
  4926  03FB  0830               	movf	runPotScaling@minDuty,w
  4927  03FC  00E3               	movwf	_setDuty
  4928  03FD                     i1l2477:
  4929                           
  4930                           ;Potentiometer.c: 73:             potSetCount = 0;
  4931  03FD  01E8               	clrf	_potSetCount
  4932  03FE                     i1l379:
  4933  03FE  0008               	return
  4934  03FF                     __end_of_runPotScaling:
  4935                           
  4936                           	psect	text20
  4937  0735                     __ptext20:	
  4938 ;; *************** function _readFilteredVout *****************
  4939 ;; Defined at:
  4940 ;;		line 39 in file "Controller.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;		None
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  i               1    8[BANK0 ] unsigned char 
  4945 ;;  i               1    9[BANK0 ] unsigned char 
  4946 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  2   10[COMMON] unsigned short 
  4949 ;; Registers used:
  4950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4956 ;;      Params:         2       0       0       0       0       0
  4957 ;;      Locals:         0       6       0       0       0       0
  4958 ;;      Temps:          0       4       0       0       0       0
  4959 ;;      Totals:         2      10       0       0       0       0
  4960 ;;Total ram usage:       12 bytes
  4961 ;; Hardware stack levels used: 1
  4962 ;; Hardware stack levels required when called: 1
  4963 ;; This function calls:
  4964 ;;		_readADCRaw
  4965 ;; This function is called by:
  4966 ;;		_Tick490Hz
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970  0735                     _readFilteredVout:	
  4971                           ;psect for function _readFilteredVout
  4972                           
  4973  0735                     i1l2427:	
  4974                           ;incstack = 0
  4975                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4976                           
  4977                           
  4978                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4979  0735  0020               	movlb	0	; select bank0
  4980  0736  01A9               	clrf	readFilteredVout@i
  4981  0737                     i1l2433:
  4982  0737  3529               	lslf	readFilteredVout@i,w
  4983  0738  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4984  0739  0086               	movwf	6
  4985  073A  3001               	movlw	1	; select bank3/4
  4986  073B  0087               	movwf	7
  4987  073C  3529               	lslf	readFilteredVout@i,w
  4988  073D  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4989  073E  0084               	movwf	4
  4990  073F  3001               	movlw	1	; select bank3/4
  4991  0740  0085               	movwf	5
  4992  0741  3F40               	moviw [0]fsr1
  4993  0742  3F80               	movwi [0]fsr0
  4994  0743  3F41               	moviw [1]fsr1
  4995  0744  3F81               	movwi [1]fsr0
  4996  0745                     i1l2435:
  4997  0745  3001               	movlw	1
  4998  0746  00A0               	movwf	??_readFilteredVout
  4999  0747  0820               	movf	??_readFilteredVout,w
  5000  0748  07A9               	addwf	readFilteredVout@i,f
  5001  0749                     i1l2437:
  5002  0749  300F               	movlw	15
  5003  074A  0229               	subwf	readFilteredVout@i,w
  5004  074B  1C03               	skipc
  5005  074C  2F4E               	goto	u231_21
  5006  074D  2F4F               	goto	u231_20
  5007  074E                     u231_21:
  5008  074E  2F37               	goto	i1l2433
  5009  074F                     u231_20:
  5010  074F                     i1l2439:
  5011                           
  5012                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  5013  074F  3004               	movlw	4
  5014  0750  318E  26F0  3187   	fcall	_readADCRaw
  5015  0753  0871               	movf	?_readADCRaw+1,w
  5016  0754  0023               	movlb	3	; select bank3
  5017  0755  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5018  0756  0870               	movf	?_readADCRaw,w
  5019  0757  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5020  0758                     i1l2441:
  5021                           
  5022                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  5023  0758  3000               	movlw	0
  5024  0759  0020               	movlb	0	; select bank0
  5025  075A  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5026  075B  3000               	movlw	0
  5027  075C  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5028  075D  3000               	movlw	0
  5029  075E  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5030  075F  3000               	movlw	0
  5031  0760  00A4               	movwf	readFilteredVout@sumOfSamples
  5032  0761                     i1l2443:
  5033                           
  5034                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  5035  0761  01A8               	clrf	readFilteredVout@i_835
  5036  0762                     i1l2449:
  5037  0762  3528               	lslf	readFilteredVout@i_835,w
  5038  0763  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5039  0764  0086               	movwf	6
  5040  0765  3001               	movlw	1	; select bank3/4
  5041  0766  0087               	movwf	7
  5042  0767  3F40               	moviw [0]fsr1
  5043  0768  00A0               	movwf	??_readFilteredVout
  5044  0769  3F41               	moviw [1]fsr1
  5045  076A  00A1               	movwf	??_readFilteredVout+1
  5046  076B  0820               	movf	??_readFilteredVout,w
  5047  076C  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5048  076D  0821               	movf	??_readFilteredVout+1,w
  5049  076E  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5050  076F  3000               	movlw	0
  5051  0770  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5052  0771  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5053  0772                     i1l2451:
  5054  0772  3001               	movlw	1
  5055  0773  00A0               	movwf	??_readFilteredVout
  5056  0774  0820               	movf	??_readFilteredVout,w
  5057  0775  07A8               	addwf	readFilteredVout@i_835,f
  5058  0776                     i1l2453:
  5059  0776  3010               	movlw	16
  5060  0777  0228               	subwf	readFilteredVout@i_835,w
  5061  0778  1C03               	skipc
  5062  0779  2F7B               	goto	u232_21
  5063  077A  2F7C               	goto	u232_20
  5064  077B                     u232_21:
  5065  077B  2F62               	goto	i1l2449
  5066  077C                     u232_20:
  5067  077C                     i1l2455:
  5068                           
  5069                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  5070  077C  0824               	movf	readFilteredVout@sumOfSamples,w
  5071  077D  00A0               	movwf	??_readFilteredVout
  5072  077E  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5073  077F  00A1               	movwf	??_readFilteredVout+1
  5074  0780  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5075  0781  00A2               	movwf	??_readFilteredVout+2
  5076  0782  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5077  0783  00A3               	movwf	??_readFilteredVout+3
  5078  0784  3004               	movlw	4
  5079  0785                     u233_25:
  5080  0785  36A3               	lsrf	??_readFilteredVout+3,f
  5081  0786  0CA2               	rrf	??_readFilteredVout+2,f
  5082  0787  0CA1               	rrf	??_readFilteredVout+1,f
  5083  0788  0CA0               	rrf	??_readFilteredVout,f
  5084  0789                     u233_20:
  5085  0789  0B89               	decfsz	9,f
  5086  078A  2F85               	goto	u233_25
  5087  078B  0821               	movf	??_readFilteredVout+1,w
  5088  078C  00FB               	movwf	?_readFilteredVout+1
  5089  078D  0820               	movf	??_readFilteredVout,w
  5090  078E  00FA               	movwf	?_readFilteredVout
  5091  078F                     i1l437:
  5092  078F  0008               	return
  5093  0790                     __end_of_readFilteredVout:
  5094                           
  5095                           	psect	text21
  5096  0E98                     __ptext21:	
  5097 ;; *************** function _readFilteredIL *****************
  5098 ;; Defined at:
  5099 ;;		line 56 in file "CurrentSensor.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  i               1   10[COMMON] unsigned char 
  5104 ;;  i               1   11[COMMON] unsigned char 
  5105 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  2    0[COMMON] unsigned short 
  5108 ;; Registers used:
  5109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5115 ;;      Params:         2       0       0       0       0       0
  5116 ;;      Locals:         6       0       0       0       0       0
  5117 ;;      Temps:          4       0       0       0       0       0
  5118 ;;      Totals:        12       0       0       0       0       0
  5119 ;;Total ram usage:       12 bytes
  5120 ;; Hardware stack levels used: 1
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_Tick490Hz
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128  0E98                     _readFilteredIL:	
  5129                           ;psect for function _readFilteredIL
  5130                           
  5131  0E98                     i1l2397:	
  5132                           ;incstack = 0
  5133                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5134                           
  5135                           
  5136                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5137  0E98  01FB               	clrf	readFilteredIL@i
  5138  0E99                     i1l2403:
  5139  0E99  357B               	lslf	readFilteredIL@i,w
  5140  0E9A  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5141  0E9B  0086               	movwf	6
  5142  0E9C  3001               	movlw	1	; select bank2/3
  5143  0E9D  0087               	movwf	7
  5144  0E9E  357B               	lslf	readFilteredIL@i,w
  5145  0E9F  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5146  0EA0  0084               	movwf	4
  5147  0EA1  3001               	movlw	1	; select bank2/3
  5148  0EA2  0085               	movwf	5
  5149  0EA3  3F40               	moviw [0]fsr1
  5150  0EA4  3F80               	movwi [0]fsr0
  5151  0EA5  3F41               	moviw [1]fsr1
  5152  0EA6  3F81               	movwi [1]fsr0
  5153  0EA7                     i1l2405:
  5154  0EA7  3001               	movlw	1
  5155  0EA8  00F2               	movwf	??_readFilteredIL
  5156  0EA9  0872               	movf	??_readFilteredIL,w
  5157  0EAA  07FB               	addwf	readFilteredIL@i,f
  5158  0EAB                     i1l2407:
  5159  0EAB  300F               	movlw	15
  5160  0EAC  027B               	subwf	readFilteredIL@i,w
  5161  0EAD  1C03               	skipc
  5162  0EAE  2EB0               	goto	u228_21
  5163  0EAF  2EB1               	goto	u228_20
  5164  0EB0                     u228_21:
  5165  0EB0  2E99               	goto	i1l2403
  5166  0EB1                     u228_20:
  5167  0EB1                     i1l2409:
  5168                           
  5169                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5170  0EB1  0020               	movlb	0	; select bank0
  5171  0EB2  0862               	movf	_latestIL+1,w	;volatile
  5172  0EB3  0022               	movlb	2	; select bank2
  5173  0EB4  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5174  0EB5  0020               	movlb	0	; select bank0
  5175  0EB6  0861               	movf	_latestIL,w	;volatile
  5176  0EB7  0022               	movlb	2	; select bank2
  5177  0EB8  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5178                           
  5179                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5180  0EB9  3000               	movlw	0
  5181  0EBA  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5182  0EBB  3000               	movlw	0
  5183  0EBC  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5184  0EBD  3000               	movlw	0
  5185  0EBE  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5186  0EBF  3000               	movlw	0
  5187  0EC0  00F6               	movwf	readFilteredIL@sumOfSamples
  5188  0EC1                     i1l2411:
  5189                           
  5190                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5191  0EC1  01FA               	clrf	readFilteredIL@i_925
  5192  0EC2                     i1l2417:
  5193  0EC2  357A               	lslf	readFilteredIL@i_925,w
  5194  0EC3  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5195  0EC4  0086               	movwf	6
  5196  0EC5  3001               	movlw	1	; select bank2/3
  5197  0EC6  0087               	movwf	7
  5198  0EC7  3F40               	moviw [0]fsr1
  5199  0EC8  00F2               	movwf	??_readFilteredIL
  5200  0EC9  3F41               	moviw [1]fsr1
  5201  0ECA  00F3               	movwf	??_readFilteredIL+1
  5202  0ECB  0872               	movf	??_readFilteredIL,w
  5203  0ECC  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5204  0ECD  0873               	movf	??_readFilteredIL+1,w
  5205  0ECE  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5206  0ECF  3000               	movlw	0
  5207  0ED0  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5208  0ED1  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5209  0ED2                     i1l2419:
  5210  0ED2  3001               	movlw	1
  5211  0ED3  00F2               	movwf	??_readFilteredIL
  5212  0ED4  0872               	movf	??_readFilteredIL,w
  5213  0ED5  07FA               	addwf	readFilteredIL@i_925,f
  5214  0ED6                     i1l2421:
  5215  0ED6  3010               	movlw	16
  5216  0ED7  027A               	subwf	readFilteredIL@i_925,w
  5217  0ED8  1C03               	skipc
  5218  0ED9  2EDB               	goto	u229_21
  5219  0EDA  2EDC               	goto	u229_20
  5220  0EDB                     u229_21:
  5221  0EDB  2EC2               	goto	i1l2417
  5222  0EDC                     u229_20:
  5223  0EDC                     i1l2423:
  5224                           
  5225                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5226  0EDC  0876               	movf	readFilteredIL@sumOfSamples,w
  5227  0EDD  00F2               	movwf	??_readFilteredIL
  5228  0EDE  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5229  0EDF  00F3               	movwf	??_readFilteredIL+1
  5230  0EE0  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5231  0EE1  00F4               	movwf	??_readFilteredIL+2
  5232  0EE2  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5233  0EE3  00F5               	movwf	??_readFilteredIL+3
  5234  0EE4  3004               	movlw	4
  5235  0EE5                     u230_25:
  5236  0EE5  36F5               	lsrf	??_readFilteredIL+3,f
  5237  0EE6  0CF4               	rrf	??_readFilteredIL+2,f
  5238  0EE7  0CF3               	rrf	??_readFilteredIL+1,f
  5239  0EE8  0CF2               	rrf	??_readFilteredIL,f
  5240  0EE9                     u230_20:
  5241  0EE9  0B89               	decfsz	9,f
  5242  0EEA  2EE5               	goto	u230_25
  5243  0EEB  0873               	movf	??_readFilteredIL+1,w
  5244  0EEC  00F1               	movwf	?_readFilteredIL+1
  5245  0EED  0872               	movf	??_readFilteredIL,w
  5246  0EEE  00F0               	movwf	?_readFilteredIL
  5247  0EEF                     i1l531:
  5248  0EEF  0008               	return
  5249  0EF0                     __end_of_readFilteredIL:
  5250                           
  5251                           	psect	text22
  5252  0790                     __ptext22:	
  5253 ;; *************** function _readFilteredFreqPot *****************
  5254 ;; Defined at:
  5255 ;;		line 39 in file "Potentiometer.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  i               1    8[BANK0 ] unsigned char 
  5260 ;;  i               1    9[BANK0 ] unsigned char 
  5261 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  2   10[COMMON] unsigned short 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5271 ;;      Params:         2       0       0       0       0       0
  5272 ;;      Locals:         0       6       0       0       0       0
  5273 ;;      Temps:          0       4       0       0       0       0
  5274 ;;      Totals:         2      10       0       0       0       0
  5275 ;;Total ram usage:       12 bytes
  5276 ;; Hardware stack levels used: 1
  5277 ;; Hardware stack levels required when called: 1
  5278 ;; This function calls:
  5279 ;;		_readADCRaw
  5280 ;; This function is called by:
  5281 ;;		_Tick490Hz
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285  0790                     _readFilteredFreqPot:	
  5286                           ;psect for function _readFilteredFreqPot
  5287                           
  5288  0790                     i1l2511:	
  5289                           ;incstack = 0
  5290                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5291                           
  5292                           
  5293                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5294  0790  0020               	movlb	0	; select bank0
  5295  0791  01A9               	clrf	readFilteredFreqPot@i
  5296  0792                     i1l2517:
  5297  0792  3529               	lslf	readFilteredFreqPot@i,w
  5298  0793  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5299  0794  0086               	movwf	6
  5300  0795  3001               	movlw	1	; select bank3/4
  5301  0796  0087               	movwf	7
  5302  0797  3529               	lslf	readFilteredFreqPot@i,w
  5303  0798  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5304  0799  0084               	movwf	4
  5305  079A  3001               	movlw	1	; select bank3/4
  5306  079B  0085               	movwf	5
  5307  079C  3F40               	moviw [0]fsr1
  5308  079D  3F80               	movwi [0]fsr0
  5309  079E  3F41               	moviw [1]fsr1
  5310  079F  3F81               	movwi [1]fsr0
  5311  07A0                     i1l2519:
  5312  07A0  3001               	movlw	1
  5313  07A1  00A0               	movwf	??_readFilteredFreqPot
  5314  07A2  0820               	movf	??_readFilteredFreqPot,w
  5315  07A3  07A9               	addwf	readFilteredFreqPot@i,f
  5316  07A4                     i1l2521:
  5317  07A4  300F               	movlw	15
  5318  07A5  0229               	subwf	readFilteredFreqPot@i,w
  5319  07A6  1C03               	skipc
  5320  07A7  2FA9               	goto	u243_21
  5321  07A8  2FAA               	goto	u243_20
  5322  07A9                     u243_21:
  5323  07A9  2F92               	goto	i1l2517
  5324  07AA                     u243_20:
  5325  07AA                     i1l2523:
  5326                           
  5327                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5328  07AA  300A               	movlw	10
  5329  07AB  318E  26F0  3187   	fcall	_readADCRaw
  5330  07AE  0871               	movf	?_readADCRaw+1,w
  5331  07AF  0023               	movlb	3	; select bank3
  5332  07B0  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5333  07B1  0870               	movf	?_readADCRaw,w
  5334  07B2  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5335  07B3                     i1l2525:
  5336                           
  5337                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5338  07B3  3000               	movlw	0
  5339  07B4  0020               	movlb	0	; select bank0
  5340  07B5  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5341  07B6  3000               	movlw	0
  5342  07B7  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5343  07B8  3000               	movlw	0
  5344  07B9  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5345  07BA  3000               	movlw	0
  5346  07BB  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5347  07BC                     i1l2527:
  5348                           
  5349                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5350  07BC  01A8               	clrf	readFilteredFreqPot@i_758
  5351  07BD                     i1l2533:
  5352  07BD  3528               	lslf	readFilteredFreqPot@i_758,w
  5353  07BE  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5354  07BF  0086               	movwf	6
  5355  07C0  3001               	movlw	1	; select bank3/4
  5356  07C1  0087               	movwf	7
  5357  07C2  3F40               	moviw [0]fsr1
  5358  07C3  00A0               	movwf	??_readFilteredFreqPot
  5359  07C4  3F41               	moviw [1]fsr1
  5360  07C5  00A1               	movwf	??_readFilteredFreqPot+1
  5361  07C6  0820               	movf	??_readFilteredFreqPot,w
  5362  07C7  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5363  07C8  0821               	movf	??_readFilteredFreqPot+1,w
  5364  07C9  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5365  07CA  3000               	movlw	0
  5366  07CB  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5367  07CC  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5368  07CD                     i1l2535:
  5369  07CD  3001               	movlw	1
  5370  07CE  00A0               	movwf	??_readFilteredFreqPot
  5371  07CF  0820               	movf	??_readFilteredFreqPot,w
  5372  07D0  07A8               	addwf	readFilteredFreqPot@i_758,f
  5373  07D1                     i1l2537:
  5374  07D1  3010               	movlw	16
  5375  07D2  0228               	subwf	readFilteredFreqPot@i_758,w
  5376  07D3  1C03               	skipc
  5377  07D4  2FD6               	goto	u244_21
  5378  07D5  2FD7               	goto	u244_20
  5379  07D6                     u244_21:
  5380  07D6  2FBD               	goto	i1l2533
  5381  07D7                     u244_20:
  5382  07D7                     i1l2539:
  5383                           
  5384                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5385  07D7  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5386  07D8  00A0               	movwf	??_readFilteredFreqPot
  5387  07D9  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5388  07DA  00A1               	movwf	??_readFilteredFreqPot+1
  5389  07DB  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5390  07DC  00A2               	movwf	??_readFilteredFreqPot+2
  5391  07DD  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5392  07DE  00A3               	movwf	??_readFilteredFreqPot+3
  5393  07DF  3004               	movlw	4
  5394  07E0                     u245_25:
  5395  07E0  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5396  07E1  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5397  07E2  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5398  07E3  0CA0               	rrf	??_readFilteredFreqPot,f
  5399  07E4                     u245_20:
  5400  07E4  0B89               	decfsz	9,f
  5401  07E5  2FE0               	goto	u245_25
  5402  07E6  0821               	movf	??_readFilteredFreqPot+1,w
  5403  07E7  00FB               	movwf	?_readFilteredFreqPot+1
  5404  07E8  0820               	movf	??_readFilteredFreqPot,w
  5405  07E9  00FA               	movwf	?_readFilteredFreqPot
  5406  07EA                     i1l372:
  5407  07EA  0008               	return
  5408  07EB                     __end_of_readFilteredFreqPot:
  5409                           
  5410                           	psect	text23
  5411  0FA5                     __ptext23:	
  5412 ;; *************** function _readFilteredDutyPot *****************
  5413 ;; Defined at:
  5414 ;;		line 25 in file "Potentiometer.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  i               1    8[BANK0 ] unsigned char 
  5419 ;;  i               1    9[BANK0 ] unsigned char 
  5420 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  2   10[COMMON] unsigned short 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5430 ;;      Params:         2       0       0       0       0       0
  5431 ;;      Locals:         0       6       0       0       0       0
  5432 ;;      Temps:          0       4       0       0       0       0
  5433 ;;      Totals:         2      10       0       0       0       0
  5434 ;;Total ram usage:       12 bytes
  5435 ;; Hardware stack levels used: 1
  5436 ;; Hardware stack levels required when called: 1
  5437 ;; This function calls:
  5438 ;;		_readADCRaw
  5439 ;; This function is called by:
  5440 ;;		_Tick490Hz
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444  0FA5                     _readFilteredDutyPot:	
  5445                           ;psect for function _readFilteredDutyPot
  5446                           
  5447  0FA5                     i1l2479:	
  5448                           ;incstack = 0
  5449                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5450                           
  5451                           
  5452                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5453  0FA5  0020               	movlb	0	; select bank0
  5454  0FA6  01A9               	clrf	readFilteredDutyPot@i
  5455  0FA7                     i1l2485:
  5456  0FA7  3529               	lslf	readFilteredDutyPot@i,w
  5457  0FA8  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5458  0FA9  0086               	movwf	6
  5459  0FAA  3002               	movlw	2	; select bank4/5
  5460  0FAB  0087               	movwf	7
  5461  0FAC  3529               	lslf	readFilteredDutyPot@i,w
  5462  0FAD  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5463  0FAE  0084               	movwf	4
  5464  0FAF  3002               	movlw	2	; select bank4/5
  5465  0FB0  0085               	movwf	5
  5466  0FB1  3F40               	moviw [0]fsr1
  5467  0FB2  3F80               	movwi [0]fsr0
  5468  0FB3  3F41               	moviw [1]fsr1
  5469  0FB4  3F81               	movwi [1]fsr0
  5470  0FB5                     i1l2487:
  5471  0FB5  3001               	movlw	1
  5472  0FB6  00A0               	movwf	??_readFilteredDutyPot
  5473  0FB7  0820               	movf	??_readFilteredDutyPot,w
  5474  0FB8  07A9               	addwf	readFilteredDutyPot@i,f
  5475  0FB9                     i1l2489:
  5476  0FB9  300F               	movlw	15
  5477  0FBA  0229               	subwf	readFilteredDutyPot@i,w
  5478  0FBB  1C03               	skipc
  5479  0FBC  2FBE               	goto	u240_21
  5480  0FBD  2FBF               	goto	u240_20
  5481  0FBE                     u240_21:
  5482  0FBE  2FA7               	goto	i1l2485
  5483  0FBF                     u240_20:
  5484  0FBF                     i1l2491:
  5485                           
  5486                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5487  0FBF  3009               	movlw	9
  5488  0FC0  318E  26F0  318F   	fcall	_readADCRaw
  5489  0FC3  0871               	movf	?_readADCRaw+1,w
  5490  0FC4  0024               	movlb	4	; select bank4
  5491  0FC5  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5492  0FC6  0870               	movf	?_readADCRaw,w
  5493  0FC7  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5494  0FC8                     i1l2493:
  5495                           
  5496                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5497  0FC8  3000               	movlw	0
  5498  0FC9  0020               	movlb	0	; select bank0
  5499  0FCA  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5500  0FCB  3000               	movlw	0
  5501  0FCC  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5502  0FCD  3000               	movlw	0
  5503  0FCE  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5504  0FCF  3000               	movlw	0
  5505  0FD0  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5506  0FD1                     i1l2495:
  5507                           
  5508                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5509  0FD1  01A8               	clrf	readFilteredDutyPot@i_754
  5510  0FD2                     i1l2501:
  5511  0FD2  3528               	lslf	readFilteredDutyPot@i_754,w
  5512  0FD3  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5513  0FD4  0086               	movwf	6
  5514  0FD5  3002               	movlw	2	; select bank4/5
  5515  0FD6  0087               	movwf	7
  5516  0FD7  3F40               	moviw [0]fsr1
  5517  0FD8  00A0               	movwf	??_readFilteredDutyPot
  5518  0FD9  3F41               	moviw [1]fsr1
  5519  0FDA  00A1               	movwf	??_readFilteredDutyPot+1
  5520  0FDB  0820               	movf	??_readFilteredDutyPot,w
  5521  0FDC  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5522  0FDD  0821               	movf	??_readFilteredDutyPot+1,w
  5523  0FDE  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5524  0FDF  3000               	movlw	0
  5525  0FE0  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5526  0FE1  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5527  0FE2                     i1l2503:
  5528  0FE2  3001               	movlw	1
  5529  0FE3  00A0               	movwf	??_readFilteredDutyPot
  5530  0FE4  0820               	movf	??_readFilteredDutyPot,w
  5531  0FE5  07A8               	addwf	readFilteredDutyPot@i_754,f
  5532  0FE6                     i1l2505:
  5533  0FE6  3010               	movlw	16
  5534  0FE7  0228               	subwf	readFilteredDutyPot@i_754,w
  5535  0FE8  1C03               	skipc
  5536  0FE9  2FEB               	goto	u241_21
  5537  0FEA  2FEC               	goto	u241_20
  5538  0FEB                     u241_21:
  5539  0FEB  2FD2               	goto	i1l2501
  5540  0FEC                     u241_20:
  5541  0FEC                     i1l2507:
  5542                           
  5543                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5544  0FEC  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5545  0FED  00A0               	movwf	??_readFilteredDutyPot
  5546  0FEE  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5547  0FEF  00A1               	movwf	??_readFilteredDutyPot+1
  5548  0FF0  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5549  0FF1  00A2               	movwf	??_readFilteredDutyPot+2
  5550  0FF2  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5551  0FF3  00A3               	movwf	??_readFilteredDutyPot+3
  5552  0FF4  3004               	movlw	4
  5553  0FF5                     u242_25:
  5554  0FF5  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5555  0FF6  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5556  0FF7  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5557  0FF8  0CA0               	rrf	??_readFilteredDutyPot,f
  5558  0FF9                     u242_20:
  5559  0FF9  0B89               	decfsz	9,f
  5560  0FFA  2FF5               	goto	u242_25
  5561  0FFB  0821               	movf	??_readFilteredDutyPot+1,w
  5562  0FFC  00FB               	movwf	?_readFilteredDutyPot+1
  5563  0FFD  0820               	movf	??_readFilteredDutyPot,w
  5564  0FFE  00FA               	movwf	?_readFilteredDutyPot
  5565  0FFF                     i1l365:
  5566  0FFF  0008               	return
  5567  1000                     __end_of_readFilteredDutyPot:
  5568                           
  5569                           	psect	text24
  5570  0EF0                     __ptext24:	
  5571 ;; *************** function _readADCRaw *****************
  5572 ;; Defined at:
  5573 ;;		line 71 in file "ADC.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  gpioNumber      1    wreg     const enum E2798
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5578 ;;  i               1    8[COMMON] unsigned char 
  5579 ;;  returnValue     2    4[COMMON] unsigned int 
  5580 ;;  gpioValid       1    7[COMMON] unsigned char 
  5581 ;;  channel         1    6[COMMON] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  2    0[COMMON] unsigned short 
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5591 ;;      Params:         2       0       0       0       0       0
  5592 ;;      Locals:         6       0       0       0       0       0
  5593 ;;      Temps:          2       0       0       0       0       0
  5594 ;;      Totals:        10       0       0       0       0       0
  5595 ;;Total ram usage:       10 bytes
  5596 ;; Hardware stack levels used: 1
  5597 ;; This function calls:
  5598 ;;		Nothing
  5599 ;; This function is called by:
  5600 ;;		_readFilteredDutyPot
  5601 ;;		_readFilteredFreqPot
  5602 ;;		_readFilteredVout
  5603 ;;		_readFilteredIDS
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607  0EF0                     _readADCRaw:	
  5608                           ;psect for function _readADCRaw
  5609                           
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5613                           ;readADCRaw@gpioNumber stored from wreg
  5614  0EF0  00F9               	movwf	readADCRaw@gpioNumber
  5615  0EF1                     i1l2207:
  5616                           
  5617                           ;ADC.c: 72:     uint8_t channel = 0;
  5618  0EF1  01F6               	clrf	readADCRaw@channel
  5619                           
  5620                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5621  0EF2  01F7               	clrf	readADCRaw@gpioValid
  5622  0EF3                     i1l2209:
  5623                           
  5624                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5625  0EF3  3005               	movlw	5
  5626  0EF4  0279               	subwf	readADCRaw@gpioNumber,w
  5627  0EF5  1803               	skipnc
  5628  0EF6  2EF8               	goto	u185_21
  5629  0EF7  2EF9               	goto	u185_20
  5630  0EF8                     u185_21:
  5631  0EF8  2EFF               	goto	i1l246
  5632  0EF9                     u185_20:
  5633  0EF9                     i1l2211:
  5634                           
  5635                           ;ADC.c: 76:         channel = gpioNumber;
  5636  0EF9  0879               	movf	readADCRaw@gpioNumber,w
  5637  0EFA  00F2               	movwf	??_readADCRaw
  5638  0EFB  0872               	movf	??_readADCRaw,w
  5639  0EFC  00F6               	movwf	readADCRaw@channel
  5640  0EFD                     i1l2213:
  5641                           
  5642                           ;ADC.c: 77:         gpioValid = 1;
  5643  0EFD  01F7               	clrf	readADCRaw@gpioValid
  5644  0EFE  0AF7               	incf	readADCRaw@gpioValid,f
  5645  0EFF                     i1l246:	
  5646                           ;ADC.c: 78:     }
  5647                           
  5648                           
  5649                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5650  0EFF  3009               	movlw	9
  5651  0F00  0279               	subwf	readADCRaw@gpioNumber,w
  5652  0F01  1C03               	skipc
  5653  0F02  2F04               	goto	u186_21
  5654  0F03  2F05               	goto	u186_20
  5655  0F04                     u186_21:
  5656  0F04  2F12               	goto	i1l247
  5657  0F05                     u186_20:
  5658  0F05                     i1l2215:
  5659  0F05  3010               	movlw	16
  5660  0F06  0279               	subwf	readADCRaw@gpioNumber,w
  5661  0F07  1803               	skipnc
  5662  0F08  2F0A               	goto	u187_21
  5663  0F09  2F0B               	goto	u187_20
  5664  0F0A                     u187_21:
  5665  0F0A  2F12               	goto	i1l247
  5666  0F0B                     u187_20:
  5667  0F0B                     i1l2217:
  5668                           
  5669                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5670  0F0B  0879               	movf	readADCRaw@gpioNumber,w
  5671  0F0C  3C14               	sublw	20
  5672  0F0D  00F2               	movwf	??_readADCRaw
  5673  0F0E  0872               	movf	??_readADCRaw,w
  5674  0F0F  00F6               	movwf	readADCRaw@channel
  5675  0F10                     i1l2219:
  5676                           
  5677                           ;ADC.c: 81:         gpioValid = 1;
  5678  0F10  01F7               	clrf	readADCRaw@gpioValid
  5679  0F11  0AF7               	incf	readADCRaw@gpioValid,f
  5680  0F12                     i1l247:	
  5681                           ;ADC.c: 82:     }
  5682                           
  5683                           
  5684                           ;ADC.c: 83:     if(gpioValid){
  5685  0F12  0877               	movf	readADCRaw@gpioValid,w
  5686  0F13  1903               	btfsc	3,2
  5687  0F14  2F16               	goto	u188_21
  5688  0F15  2F17               	goto	u188_20
  5689  0F16                     u188_21:
  5690  0F16  2F47               	goto	i1l2247
  5691  0F17                     u188_20:
  5692  0F17                     i1l2221:
  5693                           
  5694                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5695  0F17  0021               	movlb	1	; select bank1
  5696  0F18  081D               	movf	29,w	;volatile
  5697  0F19                     i1l2223:
  5698                           
  5699                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5700  0F19  3083               	movlw	131
  5701  0F1A  00F2               	movwf	??_readADCRaw
  5702  0F1B  0872               	movf	??_readADCRaw,w
  5703  0F1C  059D               	andwf	29,f	;volatile
  5704  0F1D                     i1l2225:
  5705                           
  5706                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5707  0F1D  0876               	movf	readADCRaw@channel,w	;volatile
  5708  0F1E  00F2               	movwf	??_readADCRaw
  5709  0F1F  3001               	movlw	1
  5710  0F20                     u189_25:
  5711  0F20  35F2               	lslf	??_readADCRaw,f
  5712  0F21  3EFF               	addlw	-1
  5713  0F22  1D03               	skipz
  5714  0F23  2F20               	goto	u189_25
  5715  0F24  3572               	lslf	??_readADCRaw,w
  5716  0F25  00F3               	movwf	??_readADCRaw+1
  5717  0F26  0873               	movf	??_readADCRaw+1,w
  5718  0F27  049D               	iorwf	29,f	;volatile
  5719  0F28                     i1l2227:
  5720                           
  5721                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5722  0F28  01F8               	clrf	readADCRaw@i
  5723  0F29                     i1l2233:
  5724  0F29  3001               	movlw	1
  5725  0F2A  00F2               	movwf	??_readADCRaw
  5726  0F2B  0872               	movf	??_readADCRaw,w
  5727  0F2C  07F8               	addwf	readADCRaw@i,f
  5728  0F2D                     i1l2235:
  5729  0F2D  3010               	movlw	16
  5730  0F2E  0278               	subwf	readADCRaw@i,w
  5731  0F2F  1C03               	skipc
  5732  0F30  2F32               	goto	u190_21
  5733  0F31  2F33               	goto	u190_20
  5734  0F32                     u190_21:
  5735  0F32  2F29               	goto	i1l2233
  5736  0F33                     u190_20:
  5737  0F33                     i1l251:
  5738                           
  5739                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5740  0F33  0021               	movlb	1	; select bank1
  5741  0F34  149D               	bsf	29,1	;volatile
  5742  0F35                     i1l252:	
  5743                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5744                           
  5745  0F35  189D               	btfsc	29,1	;volatile
  5746  0F36  2F38               	goto	u191_21
  5747  0F37  2F39               	goto	u191_20
  5748  0F38                     u191_21:
  5749  0F38  2F35               	goto	i1l252
  5750  0F39                     u191_20:
  5751  0F39                     i1l2237:
  5752                           
  5753                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5754  0F39  081C               	movf	28,w	;volatile
  5755  0F3A  00F5               	movwf	readADCRaw@returnValue+1
  5756  0F3B  081B               	movf	27,w	;volatile
  5757  0F3C  00F4               	movwf	readADCRaw@returnValue
  5758  0F3D                     i1l2239:
  5759                           
  5760                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5761  0F3D  3083               	movlw	131
  5762  0F3E  00F2               	movwf	??_readADCRaw
  5763  0F3F  0872               	movf	??_readADCRaw,w
  5764  0F40  059D               	andwf	29,f	;volatile
  5765  0F41                     i1l2241:
  5766                           
  5767                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5768  0F41  159D               	bsf	29,3	;volatile
  5769  0F42                     i1l2243:
  5770                           
  5771                           ;ADC.c: 98:             return returnValue;
  5772  0F42  0875               	movf	readADCRaw@returnValue+1,w
  5773  0F43  00F1               	movwf	?_readADCRaw+1
  5774  0F44  0874               	movf	readADCRaw@returnValue,w
  5775  0F45  00F0               	movwf	?_readADCRaw
  5776  0F46  2F49               	goto	i1l255
  5777  0F47                     i1l2247:
  5778  0F47  01F0               	clrf	?_readADCRaw
  5779  0F48  01F1               	clrf	?_readADCRaw+1
  5780  0F49                     i1l255:
  5781  0F49  0008               	return
  5782  0F4A                     __end_of_readADCRaw:
  5783                           
  5784                           	psect	text25
  5785  0C99                     __ptext25:	
  5786 ;; *************** function _currentTripMonitor *****************
  5787 ;; Defined at:
  5788 ;;		line 94 in file "CurrentSensor.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  2    4[None  ] int 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5802 ;;      Params:         0       0       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0       0
  5804 ;;      Temps:          1       0       0       0       0       0
  5805 ;;      Totals:         1       0       0       0       0       0
  5806 ;;Total ram usage:        1 bytes
  5807 ;; Hardware stack levels used: 1
  5808 ;; Hardware stack levels required when called: 2
  5809 ;; This function calls:
  5810 ;;		_currentTripRead
  5811 ;;		_transToOverCurrentFault
  5812 ;;		i1_currentTripReset
  5813 ;; This function is called by:
  5814 ;;		_Tick490Hz
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818  0C99                     _currentTripMonitor:	
  5819                           ;psect for function _currentTripMonitor
  5820                           
  5821  0C99                     i1l2347:	
  5822                           ;incstack = 0
  5823                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5824                           
  5825                           
  5826                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5827  0C99  318C  24E8  318C   	fcall	_currentTripRead
  5828  0C9C  3A01               	xorlw	1
  5829  0C9D  1D03               	skipz
  5830  0C9E  2CA0               	goto	u216_21
  5831  0C9F  2CA1               	goto	u216_20
  5832  0CA0                     u216_21:
  5833  0CA0  2CB4               	goto	i1l2355
  5834  0CA1                     u216_20:
  5835  0CA1                     i1l2349:
  5836                           
  5837                           ;CurrentSensor.c: 97:         currentTripCount++;
  5838  0CA1  3001               	movlw	1
  5839  0CA2  00FB               	movwf	??_currentTripMonitor
  5840  0CA3  087B               	movf	??_currentTripMonitor,w
  5841  0CA4  0020               	movlb	0	; select bank0
  5842  0CA5  07E9               	addwf	_currentTripCount,f
  5843                           
  5844                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5845  0CA6  3003               	movlw	3
  5846  0CA7  0669               	xorwf	_currentTripCount,w
  5847  0CA8  1D03               	btfss	3,2
  5848  0CA9  2CAB               	goto	u217_21
  5849  0CAA  2CAC               	goto	u217_20
  5850  0CAB                     u217_21:
  5851  0CAB  2CB0               	goto	i1l2353
  5852  0CAC                     u217_20:
  5853  0CAC                     i1l2351:
  5854                           
  5855                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5856  0CAC  318B  23DB  318C   	fcall	_transToOverCurrentFault
  5857                           
  5858                           ;CurrentSensor.c: 100:         }
  5859  0CAF  2CBC               	goto	i1l545
  5860  0CB0                     i1l2353:
  5861                           
  5862                           ;CurrentSensor.c: 102:             currentTripReset();
  5863  0CB0  318B  23ED  318C   	fcall	i1_currentTripReset
  5864  0CB3  2CBC               	goto	i1l545
  5865  0CB4                     i1l2355:
  5866                           
  5867                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5868  0CB4  0020               	movlb	0	; select bank0
  5869  0CB5  0869               	movf	_currentTripCount,w
  5870  0CB6  1903               	btfsc	3,2
  5871  0CB7  2CB9               	goto	u218_21
  5872  0CB8  2CBA               	goto	u218_20
  5873  0CB9                     u218_21:
  5874  0CB9  2CBC               	goto	i1l545
  5875  0CBA                     u218_20:
  5876  0CBA                     i1l2357:
  5877                           
  5878                           ;CurrentSensor.c: 107:             currentTripCount--;
  5879  0CBA  3001               	movlw	1
  5880  0CBB  02E9               	subwf	_currentTripCount,f
  5881  0CBC                     i1l545:
  5882  0CBC  0008               	return
  5883  0CBD                     __end_of_currentTripMonitor:
  5884                           
  5885                           	psect	text26
  5886  0BED                     __ptext26:	
  5887 ;; *************** function i1_currentTripReset *****************
  5888 ;; Defined at:
  5889 ;;		line 71 in file "CurrentSensor.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0, pclath, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5903 ;;      Params:         0       0       0       0       0       0
  5904 ;;      Locals:         0       0       0       0       0       0
  5905 ;;      Temps:          0       0       0       0       0       0
  5906 ;;      Totals:         0       0       0       0       0       0
  5907 ;;Total ram usage:        0 bytes
  5908 ;; Hardware stack levels used: 1
  5909 ;; Hardware stack levels required when called: 1
  5910 ;; This function calls:
  5911 ;;		i1_writeGPIO
  5912 ;; This function is called by:
  5913 ;;		_currentTripMonitor
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917  0BED                     i1_currentTripReset:	
  5918                           ;psect for function i1_currentTripReset
  5919                           
  5920  0BED                     i1l2343:	
  5921                           ;incstack = 0
  5922                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5923                           
  5924                           
  5925                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5926  0BED  01F0               	clrf	i1writeGPIO@writeValue
  5927  0BEE  300B               	movlw	11
  5928  0BEF  3186  26D6  318B   	fcall	i1_writeGPIO
  5929  0BF2                     i1l2345:
  5930                           
  5931                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5932                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5933  0BF2  01F0               	clrf	i1writeGPIO@writeValue
  5934  0BF3  0AF0               	incf	i1writeGPIO@writeValue,f
  5935  0BF4  300B               	movlw	11
  5936  0BF5  3186  26D6  318B   	fcall	i1_writeGPIO
  5937  0BF8                     i1l534:
  5938  0BF8  0008               	return
  5939  0BF9                     __end_ofi1_currentTripReset:
  5940                           
  5941                           	psect	text27
  5942  06D6                     __ptext27:	
  5943 ;; *************** function i1_writeGPIO *****************
  5944 ;; Defined at:
  5945 ;;		line 52 in file "GPIO.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  gpioNumber      1    wreg     const enum E2798
  5948 ;;  writeValue      1    0[COMMON] unsigned char 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5951 ;;  portNumber      1    5[COMMON] unsigned char 
  5952 ;;  portType        1    3[COMMON] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5962 ;;      Params:         1       0       0       0       0       0
  5963 ;;      Locals:         3       0       0       0       0       0
  5964 ;;      Temps:          2       0       0       0       0       0
  5965 ;;      Totals:         6       0       0       0       0       0
  5966 ;;Total ram usage:        6 bytes
  5967 ;; Hardware stack levels used: 1
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_Tick490Hz
  5972 ;;		i1_currentTripReset
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976  06D6                     i1_writeGPIO:	
  5977                           ;psect for function i1_writeGPIO
  5978                           
  5979                           
  5980                           ;incstack = 0
  5981                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5982                           ;i1writeGPIO@gpioNumber stored from wreg
  5983  06D6  00F4               	movwf	i1writeGPIO@gpioNumber
  5984  06D7                     i1l2083:
  5985                           
  5986                           ;GPIO.c: 54:     uint8_t portType = 0;
  5987  06D7  01F3               	clrf	i1writeGPIO@portType
  5988  06D8                     i1l2085:
  5989                           
  5990                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5991  06D8  3008               	movlw	8
  5992  06D9  0274               	subwf	i1writeGPIO@gpioNumber,w
  5993  06DA  1C03               	skipc
  5994  06DB  2EDD               	goto	u150_21
  5995  06DC  2EDE               	goto	u150_20
  5996  06DD                     u150_21:
  5997  06DD  2EE6               	goto	i1l2091
  5998  06DE                     u150_20:
  5999  06DE                     i1l2087:
  6000                           
  6001                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  6002  06DE  0874               	movf	i1writeGPIO@gpioNumber,w
  6003  06DF  3EF8               	addlw	248
  6004  06E0  00F1               	movwf	??i1_writeGPIO
  6005  06E1  0871               	movf	??i1_writeGPIO,w
  6006  06E2  00F5               	movwf	i1writeGPIO@portNumber
  6007  06E3                     i1l2089:
  6008                           
  6009                           ;GPIO.c: 57:         portType = 1;
  6010  06E3  01F3               	clrf	i1writeGPIO@portType
  6011  06E4  0AF3               	incf	i1writeGPIO@portType,f
  6012                           
  6013                           ;GPIO.c: 58:     }
  6014  06E5  2EEB               	goto	i1l2095
  6015  06E6                     i1l2091:
  6016                           
  6017                           ;GPIO.c: 60:         portNumber = gpioNumber;
  6018  06E6  0874               	movf	i1writeGPIO@gpioNumber,w
  6019  06E7  00F1               	movwf	??i1_writeGPIO
  6020  06E8  0871               	movf	??i1_writeGPIO,w
  6021  06E9  00F5               	movwf	i1writeGPIO@portNumber
  6022  06EA                     i1l2093:
  6023                           
  6024                           ;GPIO.c: 61:         portType = 0;
  6025  06EA  01F3               	clrf	i1writeGPIO@portType
  6026  06EB                     i1l2095:
  6027                           
  6028                           ;GPIO.c: 64:     if(portType == 0){
  6029  06EB  0873               	movf	i1writeGPIO@portType,w
  6030  06EC  1D03               	btfss	3,2
  6031  06ED  2EEF               	goto	u151_21
  6032  06EE  2EF0               	goto	u151_20
  6033  06EF                     u151_21:
  6034  06EF  2F10               	goto	i1l2103
  6035  06F0                     u151_20:
  6036  06F0                     i1l2097:
  6037                           
  6038                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  6039  06F0  0870               	movf	i1writeGPIO@writeValue,w
  6040  06F1  1903               	btfsc	3,2
  6041  06F2  2EF4               	goto	u152_21
  6042  06F3  2EF5               	goto	u152_20
  6043  06F4                     u152_21:
  6044  06F4  2F02               	goto	i1l2101
  6045  06F5                     u152_20:
  6046  06F5                     i1l2099:
  6047  06F5  3001               	movlw	1
  6048  06F6  00F1               	movwf	??i1_writeGPIO
  6049  06F7  0A75               	incf	i1writeGPIO@portNumber,w
  6050  06F8  2EFA               	goto	u153_24
  6051  06F9                     u153_25:
  6052  06F9  35F1               	lslf	??i1_writeGPIO,f
  6053  06FA                     u153_24:
  6054  06FA  0B89               	decfsz	9,f
  6055  06FB  2EF9               	goto	u153_25
  6056  06FC  0871               	movf	??i1_writeGPIO,w
  6057  06FD  00F2               	movwf	??i1_writeGPIO+1
  6058  06FE  0872               	movf	??i1_writeGPIO+1,w
  6059  06FF  0022               	movlb	2	; select bank2
  6060  0700  048C               	iorwf	12,f	;volatile
  6061  0701  2F34               	goto	i1l320
  6062  0702                     i1l2101:
  6063  0702  3001               	movlw	1
  6064  0703  00F1               	movwf	??i1_writeGPIO
  6065  0704  0A75               	incf	i1writeGPIO@portNumber,w
  6066  0705  2F07               	goto	u154_24
  6067  0706                     u154_25:
  6068  0706  35F1               	lslf	??i1_writeGPIO,f
  6069  0707                     u154_24:
  6070  0707  0B89               	decfsz	9,f
  6071  0708  2F06               	goto	u154_25
  6072  0709  0871               	movf	??i1_writeGPIO,w
  6073  070A  3AFF               	xorlw	255
  6074  070B  00F2               	movwf	??i1_writeGPIO+1
  6075  070C  0872               	movf	??i1_writeGPIO+1,w
  6076  070D  0022               	movlb	2	; select bank2
  6077  070E  058C               	andwf	12,f	;volatile
  6078  070F  2F34               	goto	i1l320
  6079  0710                     i1l2103:
  6080  0710  0373               	decf	i1writeGPIO@portType,w
  6081  0711  1D03               	btfss	3,2
  6082  0712  2F14               	goto	u155_21
  6083  0713  2F15               	goto	u155_20
  6084  0714                     u155_21:
  6085  0714  2F34               	goto	i1l320
  6086  0715                     u155_20:
  6087  0715                     i1l2105:
  6088                           
  6089                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6090  0715  0870               	movf	i1writeGPIO@writeValue,w
  6091  0716  1903               	btfsc	3,2
  6092  0717  2F19               	goto	u156_21
  6093  0718  2F1A               	goto	u156_20
  6094  0719                     u156_21:
  6095  0719  2F27               	goto	i1l2109
  6096  071A                     u156_20:
  6097  071A                     i1l2107:
  6098  071A  3001               	movlw	1
  6099  071B  00F1               	movwf	??i1_writeGPIO
  6100  071C  0A75               	incf	i1writeGPIO@portNumber,w
  6101  071D  2F1F               	goto	u157_24
  6102  071E                     u157_25:
  6103  071E  35F1               	lslf	??i1_writeGPIO,f
  6104  071F                     u157_24:
  6105  071F  0B89               	decfsz	9,f
  6106  0720  2F1E               	goto	u157_25
  6107  0721  0871               	movf	??i1_writeGPIO,w
  6108  0722  00F2               	movwf	??i1_writeGPIO+1
  6109  0723  0872               	movf	??i1_writeGPIO+1,w
  6110  0724  0022               	movlb	2	; select bank2
  6111  0725  048D               	iorwf	13,f	;volatile
  6112  0726  2F34               	goto	i1l320
  6113  0727                     i1l2109:
  6114  0727  3001               	movlw	1
  6115  0728  00F1               	movwf	??i1_writeGPIO
  6116  0729  0A75               	incf	i1writeGPIO@portNumber,w
  6117  072A  2F2C               	goto	u158_24
  6118  072B                     u158_25:
  6119  072B  35F1               	lslf	??i1_writeGPIO,f
  6120  072C                     u158_24:
  6121  072C  0B89               	decfsz	9,f
  6122  072D  2F2B               	goto	u158_25
  6123  072E  0871               	movf	??i1_writeGPIO,w
  6124  072F  3AFF               	xorlw	255
  6125  0730  00F2               	movwf	??i1_writeGPIO+1
  6126  0731  0872               	movf	??i1_writeGPIO+1,w
  6127  0732  0022               	movlb	2	; select bank2
  6128  0733  058D               	andwf	13,f	;volatile
  6129  0734                     i1l320:
  6130  0734  0008               	return
  6131  0735                     __end_ofi1_writeGPIO:
  6132                           
  6133                           	psect	text28
  6134  0BDB                     __ptext28:	
  6135 ;; *************** function _transToOverCurrentFault *****************
  6136 ;; Defined at:
  6137 ;;		line 53 in file "StateMachine.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      void 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6151 ;;      Params:         0       0       0       0       0       0
  6152 ;;      Locals:         0       0       0       0       0       0
  6153 ;;      Temps:          1       0       0       0       0       0
  6154 ;;      Totals:         1       0       0       0       0       0
  6155 ;;Total ram usage:        1 bytes
  6156 ;; Hardware stack levels used: 1
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_currentTripMonitor
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164  0BDB                     _transToOverCurrentFault:	
  6165                           ;psect for function _transToOverCurrentFault
  6166                           
  6167  0BDB                     i1l2301:	
  6168                           ;incstack = 0
  6169                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6170                           
  6171                           
  6172                           ;StateMachine.c: 54:     setDuty = 0;
  6173  0BDB  0020               	movlb	0	; select bank0
  6174  0BDC  01E3               	clrf	_setDuty
  6175  0BDD  01E4               	clrf	_setDuty+1
  6176                           
  6177                           ;StateMachine.c: 55:     setPeriod = 0;
  6178  0BDE  01EE               	clrf	_setPeriod
  6179  0BDF                     i1l2303:
  6180                           
  6181                           ;StateMachine.c: 56:     currentState = overCurrentFault;
  6182  0BDF  3004               	movlw	4
  6183  0BE0  00F0               	movwf	??_transToOverCurrentFault
  6184  0BE1  0870               	movf	??_transToOverCurrentFault,w
  6185  0BE2  00EC               	movwf	_currentState
  6186  0BE3                     i1l572:
  6187  0BE3  0008               	return
  6188  0BE4                     __end_of_transToOverCurrentFault:
  6189                           
  6190                           	psect	text29
  6191  0CE8                     __ptext29:	
  6192 ;; *************** function _currentTripRead *****************
  6193 ;; Defined at:
  6194 ;;		line 31 in file "CurrentSensor.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;		None
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      _Bool 
  6201 ;; Registers used:
  6202 ;;		wreg, status,2, status,0, pclath, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6208 ;;      Params:         0       0       0       0       0       0
  6209 ;;      Locals:         1       0       0       0       0       0
  6210 ;;      Temps:          1       0       0       0       0       0
  6211 ;;      Totals:         2       0       0       0       0       0
  6212 ;;Total ram usage:        2 bytes
  6213 ;; Hardware stack levels used: 1
  6214 ;; Hardware stack levels required when called: 1
  6215 ;; This function calls:
  6216 ;;		i1_readGPIO
  6217 ;; This function is called by:
  6218 ;;		_currentTripMonitor
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222  0CE8                     _currentTripRead:	
  6223                           ;psect for function _currentTripRead
  6224                           
  6225  0CE8                     i1l2287:	
  6226                           ;incstack = 0
  6227                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6228                           
  6229                           
  6230                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6231  0CE8  3001               	movlw	1
  6232  0CE9  318D  25BB  318C   	fcall	i1_readGPIO
  6233  0CEC  3A01               	xorlw	1
  6234  0CED  1D03               	skipz
  6235  0CEE  2CF0               	goto	u199_21
  6236  0CEF  2CF2               	goto	u199_20
  6237  0CF0                     u199_21:
  6238  0CF0  3001               	movlw	1
  6239  0CF1  2CF3               	goto	u200_20
  6240  0CF2                     u199_20:
  6241  0CF2  3000               	movlw	0
  6242  0CF3                     u200_20:
  6243  0CF3  00F9               	movwf	??_currentTripRead
  6244  0CF4  0879               	movf	??_currentTripRead,w
  6245  0CF5  0020               	movlb	0	; select bank0
  6246  0CF6  00EB               	movwf	_tripIDS
  6247                           
  6248                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6249  0CF7  3003               	movlw	3
  6250  0CF8  318D  25BB  318C   	fcall	i1_readGPIO
  6251  0CFB  3A01               	xorlw	1
  6252  0CFC  1D03               	skipz
  6253  0CFD  2CFF               	goto	u201_21
  6254  0CFE  2D01               	goto	u201_20
  6255  0CFF                     u201_21:
  6256  0CFF  3001               	movlw	1
  6257  0D00  2D02               	goto	u202_20
  6258  0D01                     u201_20:
  6259  0D01  3000               	movlw	0
  6260  0D02                     u202_20:
  6261  0D02  00F9               	movwf	??_currentTripRead
  6262  0D03  0879               	movf	??_currentTripRead,w
  6263  0D04  0020               	movlb	0	; select bank0
  6264  0D05  00EA               	movwf	_tripIL
  6265  0D06                     i1l2289:
  6266                           
  6267                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6268  0D06  01FA               	clrf	_currentTripRead$917
  6269  0D07  0AFA               	incf	_currentTripRead$917,f
  6270  0D08                     i1l2291:
  6271  0D08  086A               	movf	_tripIL,w
  6272  0D09  1D03               	btfss	3,2
  6273  0D0A  2D0C               	goto	u203_21
  6274  0D0B  2D0D               	goto	u203_20
  6275  0D0C                     u203_21:
  6276  0D0C  2D13               	goto	i1l2297
  6277  0D0D                     u203_20:
  6278  0D0D                     i1l2293:
  6279  0D0D  086B               	movf	_tripIDS,w
  6280  0D0E  1D03               	btfss	3,2
  6281  0D0F  2D11               	goto	u204_21
  6282  0D10  2D12               	goto	u204_20
  6283  0D11                     u204_21:
  6284  0D11  2D13               	goto	i1l2297
  6285  0D12                     u204_20:
  6286  0D12                     i1l2295:
  6287  0D12  01FA               	clrf	_currentTripRead$917
  6288  0D13                     i1l2297:
  6289  0D13  087A               	movf	_currentTripRead$917,w
  6290  0D14                     i1l517:
  6291  0D14  0008               	return
  6292  0D15                     __end_of_currentTripRead:
  6293                           
  6294                           	psect	text30
  6295  03FF                     __ptext30:	
  6296 ;; *************** function _controlRoutine *****************
  6297 ;; Defined at:
  6298 ;;		line 65 in file "Controller.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  setDuty_unre    2   60[BANK0 ] short 
  6303 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6304 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6314 ;;      Params:         0       0       0       0       0       0
  6315 ;;      Locals:         0       6       0       0       0       0
  6316 ;;      Temps:          0       6       0       0       0       0
  6317 ;;      Totals:         0      12       0       0       0       0
  6318 ;;Total ram usage:       12 bytes
  6319 ;; Hardware stack levels used: 1
  6320 ;; Hardware stack levels required when called: 3
  6321 ;; This function calls:
  6322 ;;		___lldiv
  6323 ;;		___wmul
  6324 ;;		_runVoltageModeControl
  6325 ;; This function is called by:
  6326 ;;		_Tick490Hz
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330  03FF                     _controlRoutine:	
  6331                           ;psect for function _controlRoutine
  6332                           
  6333  03FF                     i1l2365:	
  6334                           ;incstack = 0
  6335                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6336                           
  6337                           
  6338                           ;Controller.c: 67:     if((currentState == voltageModeControl) || (currentState == curre
      +                          ntModeControl)){
  6339  03FF  3002               	movlw	2
  6340  0400  0020               	movlb	0	; select bank0
  6341  0401  066C               	xorwf	_currentState,w
  6342  0402  1903               	btfsc	3,2
  6343  0403  2C05               	goto	u221_21
  6344  0404  2C06               	goto	u221_20
  6345  0405                     u221_21:
  6346  0405  2C0C               	goto	i1l2369
  6347  0406                     u221_20:
  6348  0406                     i1l2367:
  6349  0406  3003               	movlw	3
  6350  0407  066C               	xorwf	_currentState,w
  6351  0408  1D03               	btfss	3,2
  6352  0409  2C0B               	goto	u222_21
  6353  040A  2C0C               	goto	u222_20
  6354  040B                     u222_21:
  6355  040B  2CD4               	goto	i1l454
  6356  040C                     u222_20:
  6357  040C                     i1l2369:
  6358                           
  6359                           ;Controller.c: 68:         int16_t setDuty_unreg = 0;
  6360  040C  01DC               	clrf	controlRoutine@setDuty_unreg
  6361  040D  01DD               	clrf	controlRoutine@setDuty_unreg+1
  6362  040E                     i1l2371:
  6363                           
  6364                           ;Controller.c: 71:         if(currentState == voltageModeControl){
  6365  040E  3002               	movlw	2
  6366  040F  066C               	xorwf	_currentState,w
  6367  0410  1D03               	btfss	3,2
  6368  0411  2C13               	goto	u223_21
  6369  0412  2C14               	goto	u223_20
  6370  0413                     u223_21:
  6371  0413  2C4F               	goto	i1l2381
  6372  0414                     u223_20:
  6373  0414                     i1l2373:
  6374                           
  6375                           ;Controller.c: 73:             runVoltageModeControl();
  6376  0414  3180  20B4  3183   	fcall	_runVoltageModeControl
  6377  0417                     i1l2375:
  6378                           
  6379                           ;Controller.c: 74:             setPeriod = 79u;
  6380  0417  304F               	movlw	79
  6381  0418  0020               	movlb	0	; select bank0
  6382  0419  00D2               	movwf	??_controlRoutine
  6383  041A  0852               	movf	??_controlRoutine,w
  6384  041B  00EE               	movwf	_setPeriod
  6385  041C                     i1l2377:
  6386                           
  6387                           ;Controller.c: 76:             setDuty_unreg = (int16_t) (((uint32_t)(((uint16_t) 50u) *
      +                           setPeriod)) / 25) + voltageModeVariables.sumOutput;
  6388  041C  3016               	movlw	22
  6389  041D  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6390  041E  0086               	movwf	6
  6391  041F  0187               	clrf	7
  6392  0420  3000               	movlw	0
  6393  0421  00F9               	movwf	___lldiv@divisor+3
  6394  0422  3000               	movlw	0
  6395  0423  00F8               	movwf	___lldiv@divisor+2
  6396  0424  3000               	movlw	0
  6397  0425  00F7               	movwf	___lldiv@divisor+1
  6398  0426  3019               	movlw	25
  6399  0427  00F6               	movwf	___lldiv@divisor
  6400  0428  3032               	movlw	50
  6401  0429  00F2               	movwf	___wmul@multiplicand
  6402  042A  3000               	movlw	0
  6403  042B  00F3               	movwf	___wmul@multiplicand+1
  6404  042C  086E               	movf	_setPeriod,w
  6405  042D  00D2               	movwf	??_controlRoutine
  6406  042E  01D3               	clrf	??_controlRoutine+1
  6407  042F  0852               	movf	??_controlRoutine,w
  6408  0430  00F0               	movwf	___wmul@multiplier
  6409  0431  0853               	movf	??_controlRoutine+1,w
  6410  0432  00F1               	movwf	___wmul@multiplier+1
  6411  0433  318C  245A  3183   	fcall	___wmul
  6412  0436  0870               	movf	?___wmul,w
  6413  0437  0020               	movlb	0	; select bank0
  6414  0438  00D4               	movwf	??_controlRoutine+2
  6415  0439  0871               	movf	?___wmul+1,w
  6416  043A  00D5               	movwf	??_controlRoutine+3
  6417  043B  01D6               	clrf	??_controlRoutine+4
  6418  043C  01D7               	clrf	??_controlRoutine+5
  6419  043D  0857               	movf	??_controlRoutine+5,w
  6420  043E  00FD               	movwf	___lldiv@dividend+3
  6421  043F  0856               	movf	??_controlRoutine+4,w
  6422  0440  00FC               	movwf	___lldiv@dividend+2
  6423  0441  0855               	movf	??_controlRoutine+3,w
  6424  0442  00FB               	movwf	___lldiv@dividend+1
  6425  0443  0854               	movf	??_controlRoutine+2,w
  6426  0444  00FA               	movwf	___lldiv@dividend
  6427  0445  318F  274A  3183   	fcall	___lldiv
  6428  0448  3F40               	moviw [0]fsr1
  6429  0449  0776               	addwf	?___lldiv,w
  6430  044A  0020               	movlb	0	; select bank0
  6431  044B  00DC               	movwf	controlRoutine@setDuty_unreg
  6432  044C  3F41               	moviw [1]fsr1
  6433  044D  3D77               	addwfc	?___lldiv+1,w
  6434  044E  00DD               	movwf	controlRoutine@setDuty_unreg+1
  6435  044F                     i1l2381:
  6436                           
  6437                           ;Controller.c: 88:         uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * 
      +                          setPeriod)) / 25);
  6438  044F  3000               	movlw	0
  6439  0450  00F9               	movwf	___lldiv@divisor+3
  6440  0451  3000               	movlw	0
  6441  0452  00F8               	movwf	___lldiv@divisor+2
  6442  0453  3000               	movlw	0
  6443  0454  00F7               	movwf	___lldiv@divisor+1
  6444  0455  3019               	movlw	25
  6445  0456  00F6               	movwf	___lldiv@divisor
  6446  0457  305A               	movlw	90
  6447  0458  00F2               	movwf	___wmul@multiplicand
  6448  0459  3000               	movlw	0
  6449  045A  00F3               	movwf	___wmul@multiplicand+1
  6450  045B  086E               	movf	_setPeriod,w
  6451  045C  00D2               	movwf	??_controlRoutine
  6452  045D  01D3               	clrf	??_controlRoutine+1
  6453  045E  0852               	movf	??_controlRoutine,w
  6454  045F  00F0               	movwf	___wmul@multiplier
  6455  0460  0853               	movf	??_controlRoutine+1,w
  6456  0461  00F1               	movwf	___wmul@multiplier+1
  6457  0462  318C  245A  3183   	fcall	___wmul
  6458  0465  0870               	movf	?___wmul,w
  6459  0466  0020               	movlb	0	; select bank0
  6460  0467  00D4               	movwf	??_controlRoutine+2
  6461  0468  0871               	movf	?___wmul+1,w
  6462  0469  00D5               	movwf	??_controlRoutine+3
  6463  046A  01D6               	clrf	??_controlRoutine+4
  6464  046B  01D7               	clrf	??_controlRoutine+5
  6465  046C  0857               	movf	??_controlRoutine+5,w
  6466  046D  00FD               	movwf	___lldiv@dividend+3
  6467  046E  0856               	movf	??_controlRoutine+4,w
  6468  046F  00FC               	movwf	___lldiv@dividend+2
  6469  0470  0855               	movf	??_controlRoutine+3,w
  6470  0471  00FB               	movwf	___lldiv@dividend+1
  6471  0472  0854               	movf	??_controlRoutine+2,w
  6472  0473  00FA               	movwf	___lldiv@dividend
  6473  0474  318F  274A  3183   	fcall	___lldiv
  6474  0477  0877               	movf	?___lldiv+1,w
  6475  0478  0020               	movlb	0	; select bank0
  6476  0479  00D9               	movwf	controlRoutine@maxDuty+1
  6477  047A  0876               	movf	?___lldiv,w
  6478  047B  00D8               	movwf	controlRoutine@maxDuty
  6479                           
  6480                           ;Controller.c: 89:         uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * 
      +                          setPeriod)) / 25);
  6481  047C  3000               	movlw	0
  6482  047D  00F9               	movwf	___lldiv@divisor+3
  6483  047E  3000               	movlw	0
  6484  047F  00F8               	movwf	___lldiv@divisor+2
  6485  0480  3000               	movlw	0
  6486  0481  00F7               	movwf	___lldiv@divisor+1
  6487  0482  3019               	movlw	25
  6488  0483  00F6               	movwf	___lldiv@divisor
  6489  0484  300A               	movlw	10
  6490  0485  00F2               	movwf	___wmul@multiplicand
  6491  0486  3000               	movlw	0
  6492  0487  00F3               	movwf	___wmul@multiplicand+1
  6493  0488  086E               	movf	_setPeriod,w
  6494  0489  00D2               	movwf	??_controlRoutine
  6495  048A  01D3               	clrf	??_controlRoutine+1
  6496  048B  0852               	movf	??_controlRoutine,w
  6497  048C  00F0               	movwf	___wmul@multiplier
  6498  048D  0853               	movf	??_controlRoutine+1,w
  6499  048E  00F1               	movwf	___wmul@multiplier+1
  6500  048F  318C  245A  3183   	fcall	___wmul
  6501  0492  0870               	movf	?___wmul,w
  6502  0493  0020               	movlb	0	; select bank0
  6503  0494  00D4               	movwf	??_controlRoutine+2
  6504  0495  0871               	movf	?___wmul+1,w
  6505  0496  00D5               	movwf	??_controlRoutine+3
  6506  0497  01D6               	clrf	??_controlRoutine+4
  6507  0498  01D7               	clrf	??_controlRoutine+5
  6508  0499  0857               	movf	??_controlRoutine+5,w
  6509  049A  00FD               	movwf	___lldiv@dividend+3
  6510  049B  0856               	movf	??_controlRoutine+4,w
  6511  049C  00FC               	movwf	___lldiv@dividend+2
  6512  049D  0855               	movf	??_controlRoutine+3,w
  6513  049E  00FB               	movwf	___lldiv@dividend+1
  6514  049F  0854               	movf	??_controlRoutine+2,w
  6515  04A0  00FA               	movwf	___lldiv@dividend
  6516  04A1  318F  274A  3183   	fcall	___lldiv
  6517  04A4  0877               	movf	?___lldiv+1,w
  6518  04A5  0020               	movlb	0	; select bank0
  6519  04A6  00DB               	movwf	controlRoutine@minDuty+1
  6520  04A7  0876               	movf	?___lldiv,w
  6521  04A8  00DA               	movwf	controlRoutine@minDuty
  6522  04A9                     i1l2383:
  6523                           
  6524                           ;Controller.c: 91:         setDuty = setDuty_unreg;
  6525  04A9  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6526  04AA  00E4               	movwf	_setDuty+1
  6527  04AB  085C               	movf	controlRoutine@setDuty_unreg,w
  6528  04AC  00E3               	movwf	_setDuty
  6529  04AD                     i1l2385:
  6530                           
  6531                           ;Controller.c: 93:         if(setDuty_unreg < 0) setDuty = minDuty;
  6532  04AD  1FDD               	btfss	controlRoutine@setDuty_unreg+1,7
  6533  04AE  2CB0               	goto	u224_21
  6534  04AF  2CB1               	goto	u224_20
  6535  04B0                     u224_21:
  6536  04B0  2CB6               	goto	i1l448
  6537  04B1                     u224_20:
  6538  04B1                     i1l2387:
  6539  04B1  085B               	movf	controlRoutine@minDuty+1,w
  6540  04B2  00E4               	movwf	_setDuty+1
  6541  04B3  085A               	movf	controlRoutine@minDuty,w
  6542  04B4  00E3               	movwf	_setDuty
  6543  04B5  2CD4               	goto	i1l454
  6544  04B6                     i1l448:	
  6545                           ;Controller.c: 94:         else if(setDuty_unreg >= 0){
  6546                           
  6547  04B6  1BDD               	btfsc	controlRoutine@setDuty_unreg+1,7
  6548  04B7  2CB9               	goto	u225_21
  6549  04B8  2CBA               	goto	u225_20
  6550  04B9                     u225_21:
  6551  04B9  2CD4               	goto	i1l454
  6552  04BA                     u225_20:
  6553  04BA                     i1l2389:
  6554                           
  6555                           ;Controller.c: 95:             if(setDuty_unreg < minDuty) setDuty = minDuty;
  6556  04BA  085B               	movf	controlRoutine@minDuty+1,w
  6557  04BB  025D               	subwf	controlRoutine@setDuty_unreg+1,w
  6558  04BC  1D03               	skipz
  6559  04BD  2CC0               	goto	u226_25
  6560  04BE  085A               	movf	controlRoutine@minDuty,w
  6561  04BF  025C               	subwf	controlRoutine@setDuty_unreg,w
  6562  04C0                     u226_25:
  6563  04C0  1803               	skipnc
  6564  04C1  2CC3               	goto	u226_21
  6565  04C2  2CC4               	goto	u226_20
  6566  04C3                     u226_21:
  6567  04C3  2CC5               	goto	i1l2393
  6568  04C4                     u226_20:
  6569  04C4  2CB1               	goto	i1l2387
  6570  04C5                     i1l2393:
  6571  04C5  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6572  04C6  0259               	subwf	controlRoutine@maxDuty+1,w
  6573  04C7  1D03               	skipz
  6574  04C8  2CCB               	goto	u227_25
  6575  04C9  085C               	movf	controlRoutine@setDuty_unreg,w
  6576  04CA  0258               	subwf	controlRoutine@maxDuty,w
  6577  04CB                     u227_25:
  6578  04CB  1803               	skipnc
  6579  04CC  2CCE               	goto	u227_21
  6580  04CD  2CCF               	goto	u227_20
  6581  04CE                     u227_21:
  6582  04CE  2CD4               	goto	i1l449
  6583  04CF                     u227_20:
  6584  04CF                     i1l2395:
  6585  04CF  0859               	movf	controlRoutine@maxDuty+1,w
  6586  04D0  00E4               	movwf	_setDuty+1
  6587  04D1  0858               	movf	controlRoutine@maxDuty,w
  6588  04D2  00E3               	movwf	_setDuty
  6589  04D3  2CD4               	goto	i1l454
  6590  04D4                     i1l449:
  6591  04D4                     i1l454:
  6592  04D4  0008               	return
  6593  04D5                     __end_of_controlRoutine:
  6594                           
  6595                           	psect	text31
  6596  00B4                     __ptext31:	
  6597 ;; *************** function _runVoltageModeControl *****************
  6598 ;; Defined at:
  6599 ;;		line 106 in file "Controller.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  propMult        8   40[BANK0 ] long long 
  6604 ;;  integralMult    8   32[BANK0 ] long long 
  6605 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6615 ;;      Params:         0       0       0       0       0       0
  6616 ;;      Locals:         0      18       0       0       0       0
  6617 ;;      Temps:          0      16       0       0       0       0
  6618 ;;      Totals:         0      34       0       0       0       0
  6619 ;;Total ram usage:       34 bytes
  6620 ;; Hardware stack levels used: 1
  6621 ;; Hardware stack levels required when called: 2
  6622 ;; This function calls:
  6623 ;;		___omul
  6624 ;;		_abs
  6625 ;;		_convertRawToMilliVolts
  6626 ;;		i1_readGPIO
  6627 ;; This function is called by:
  6628 ;;		_controlRoutine
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632  00B4                     _runVoltageModeControl:	
  6633                           ;psect for function _runVoltageModeControl
  6634                           
  6635  00B4                     i1l2251:	
  6636                           ;incstack = 0
  6637                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6638                           
  6639                           
  6640                           ;Controller.c: 111:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6641  00B4  0020               	movlb	0	; select bank0
  6642  00B5  0860               	movf	_filteredVout+1,w
  6643  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6644  00B7  085F               	movf	_filteredVout,w
  6645  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6646  00B9  318D  2580  3180   	fcall	_convertRawToMilliVolts
  6647  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6648  00BD  0020               	movlb	0	; select bank0
  6649  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6650  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6651  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6652                           
  6653                           ;Controller.c: 114:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6654  00C1  3008               	movlw	8
  6655  00C2  318D  25BB  3180   	fcall	i1_readGPIO
  6656  00C5  3A00               	xorlw	0
  6657  00C6  1903               	skipnz
  6658  00C7  28C9               	goto	u192_21
  6659  00C8  28CA               	goto	u192_20
  6660  00C9                     u192_21:
  6661  00C9  28D9               	goto	i1l2255
  6662  00CA                     u192_20:
  6663  00CA                     i1l2253:
  6664  00CA  3080               	movlw	128
  6665  00CB  0020               	movlb	0	; select bank0
  6666  00CC  00B0               	movwf	??_runVoltageModeControl
  6667  00CD  303E               	movlw	62
  6668  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6669  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6670  00D0  0230               	subwf	??_runVoltageModeControl,w
  6671  00D1  0021               	movlb	1	; select bank1
  6672  00D2  00B6               	movwf	_voltageModeVariables^(0+128)
  6673  00D3  0020               	movlb	0	; select bank0
  6674  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6675  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6676  00D6  0021               	movlb	1	; select bank1
  6677  00D7  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6678  00D8  28E7               	goto	i1l2257
  6679  00D9                     i1l2255:
  6680  00D9  30E0               	movlw	224
  6681  00DA  0020               	movlb	0	; select bank0
  6682  00DB  00B0               	movwf	??_runVoltageModeControl
  6683  00DC  302E               	movlw	46
  6684  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6685  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6686  00DF  0230               	subwf	??_runVoltageModeControl,w
  6687  00E0  0021               	movlb	1	; select bank1
  6688  00E1  00B6               	movwf	_voltageModeVariables^(0+128)
  6689  00E2  0020               	movlb	0	; select bank0
  6690  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6691  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6692  00E5  0021               	movlb	1	; select bank1
  6693  00E6  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6694  00E7                     i1l2257:
  6695                           
  6696                           ;Controller.c: 118:    int64_t integralMult = ((int64_t) (36u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6697  00E7  0836               	movf	_voltageModeVariables^(0+128),w
  6698  00E8  0020               	movlb	0	; select bank0
  6699  00E9  00A0               	movwf	___omul@multiplier
  6700  00EA  0021               	movlb	1	; select bank1
  6701  00EB  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  6702  00EC  0020               	movlb	0	; select bank0
  6703  00ED  00A1               	movwf	___omul@multiplier+1
  6704  00EE  0D89               	rlf	9,f
  6705  00EF  3B89               	subwfb	9,f
  6706  00F0  0989               	comf	9,f
  6707  00F1  00A2               	movwf	___omul@multiplier+2
  6708  00F2  00A3               	movwf	___omul@multiplier+3
  6709  00F3  00A4               	movwf	___omul@multiplier+4
  6710  00F4  00A5               	movwf	___omul@multiplier+5
  6711  00F5  00A6               	movwf	___omul@multiplier+6
  6712  00F6  00A7               	movwf	___omul@multiplier+7
  6713  00F7  3000               	movlw	0
  6714  00F8  00AF               	movwf	___omul@multiplicand+7
  6715  00F9  3000               	movlw	0
  6716  00FA  00AE               	movwf	___omul@multiplicand+6
  6717  00FB  3000               	movlw	0
  6718  00FC  00AD               	movwf	___omul@multiplicand+5
  6719  00FD  3000               	movlw	0
  6720  00FE  00AC               	movwf	___omul@multiplicand+4
  6721  00FF  3000               	movlw	0
  6722  0100  00AB               	movwf	___omul@multiplicand+3
  6723  0101  3000               	movlw	0
  6724  0102  00AA               	movwf	___omul@multiplicand+2
  6725  0103  3025               	movlw	37
  6726  0104  00A9               	movwf	___omul@multiplicand+1
  6727  0105  308C               	movlw	140
  6728  0106  00A8               	movwf	___omul@multiplicand
  6729  0107  318E  264C  3180   	fcall	___omul
  6730  010A  0020               	movlb	0	; select bank0
  6731  010B  0820               	movf	?___omul,w
  6732  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6733  010D  0821               	movf	?___omul+1,w
  6734  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6735  010F  0822               	movf	?___omul+2,w
  6736  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6737  0111  0823               	movf	?___omul+3,w
  6738  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6739  0113  0824               	movf	?___omul+4,w
  6740  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6741  0115  0825               	movf	?___omul+5,w
  6742  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6743  0117  0826               	movf	?___omul+6,w
  6744  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6745  0119  0827               	movf	?___omul+7,w
  6746  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6747  011B                     i1l2259:
  6748                           
  6749                           ;Controller.c: 120:    voltageModeVariables.integral = integralMult;
  6750  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6751  011C  0021               	movlb	1	; select bank1
  6752  011D  00BB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6753  011E  0020               	movlb	0	; select bank0
  6754  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6755  0120  0021               	movlb	1	; select bank1
  6756  0121  00BA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6757  0122  0020               	movlb	0	; select bank0
  6758  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6759  0124  0021               	movlb	1	; select bank1
  6760  0125  00B9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6761  0126  0020               	movlb	0	; select bank0
  6762  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6763  0128  0021               	movlb	1	; select bank1
  6764  0129  00B8               	movwf	(_voltageModeVariables^(0+128)+2)
  6765  012A                     i1l2261:
  6766                           
  6767                           ;Controller.c: 121:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6768  012A  300E               	movlw	14
  6769  012B  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6770  012C  0086               	movwf	6
  6771  012D  0187               	clrf	7
  6772  012E  3F40               	moviw [0]fsr1
  6773  012F  0020               	movlb	0	; select bank0
  6774  0130  00B0               	movwf	??_runVoltageModeControl
  6775  0131  3F41               	moviw [1]fsr1
  6776  0132  00B1               	movwf	??_runVoltageModeControl+1
  6777  0133  3F42               	moviw [2]fsr1
  6778  0134  00B2               	movwf	??_runVoltageModeControl+2
  6779  0135  3F43               	moviw [3]fsr1
  6780  0136  00B3               	movwf	??_runVoltageModeControl+3
  6781  0137  3F44               	moviw [4]fsr1
  6782  0138  00B4               	movwf	??_runVoltageModeControl+4
  6783  0139  3F45               	moviw [5]fsr1
  6784  013A  00B5               	movwf	??_runVoltageModeControl+5
  6785  013B  3F46               	moviw [6]fsr1
  6786  013C  00B6               	movwf	??_runVoltageModeControl+6
  6787  013D  3F47               	moviw [7]fsr1
  6788  013E  00B7               	movwf	??_runVoltageModeControl+7
  6789  013F  0021               	movlb	1	; select bank1
  6790  0140  0838               	movf	(_voltageModeVariables^(0+128)+2),w
  6791  0141  0020               	movlb	0	; select bank0
  6792  0142  00B8               	movwf	??_runVoltageModeControl+8
  6793  0143  0021               	movlb	1	; select bank1
  6794  0144  0839               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6795  0145  0020               	movlb	0	; select bank0
  6796  0146  00B9               	movwf	??_runVoltageModeControl+9
  6797  0147  0021               	movlb	1	; select bank1
  6798  0148  083A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6799  0149  0020               	movlb	0	; select bank0
  6800  014A  00BA               	movwf	??_runVoltageModeControl+10
  6801  014B  0021               	movlb	1	; select bank1
  6802  014C  083B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6803  014D  0020               	movlb	0	; select bank0
  6804  014E  00BB               	movwf	??_runVoltageModeControl+11
  6805  014F  3000               	movlw	0
  6806  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6807  0151  30FF               	movlw	255
  6808  0152  00BC               	movwf	??_runVoltageModeControl+12
  6809  0153  00BD               	movwf	??_runVoltageModeControl+13
  6810  0154  00BE               	movwf	??_runVoltageModeControl+14
  6811  0155  00BF               	movwf	??_runVoltageModeControl+15
  6812  0156  0838               	movf	??_runVoltageModeControl+8,w
  6813  0157  07B0               	addwf	??_runVoltageModeControl,f
  6814  0158  0839               	movf	??_runVoltageModeControl+9,w
  6815  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6816  015A  083A               	movf	??_runVoltageModeControl+10,w
  6817  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6818  015C  083B               	movf	??_runVoltageModeControl+11,w
  6819  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6820  015E  083C               	movf	??_runVoltageModeControl+12,w
  6821  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6822  0160  083D               	movf	??_runVoltageModeControl+13,w
  6823  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6824  0162  083E               	movf	??_runVoltageModeControl+14,w
  6825  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6826  0164  083F               	movf	??_runVoltageModeControl+15,w
  6827  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6828  0166  0837               	movf	??_runVoltageModeControl+7,w
  6829  0167  0021               	movlb	1	; select bank1
  6830  0168  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6831  0169  0020               	movlb	0	; select bank0
  6832  016A  0836               	movf	??_runVoltageModeControl+6,w
  6833  016B  0021               	movlb	1	; select bank1
  6834  016C  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6835  016D  0020               	movlb	0	; select bank0
  6836  016E  0835               	movf	??_runVoltageModeControl+5,w
  6837  016F  0021               	movlb	1	; select bank1
  6838  0170  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6839  0171  0020               	movlb	0	; select bank0
  6840  0172  0834               	movf	??_runVoltageModeControl+4,w
  6841  0173  0021               	movlb	1	; select bank1
  6842  0174  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6843  0175  0020               	movlb	0	; select bank0
  6844  0176  0833               	movf	??_runVoltageModeControl+3,w
  6845  0177  0021               	movlb	1	; select bank1
  6846  0178  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6847  0179  0020               	movlb	0	; select bank0
  6848  017A  0832               	movf	??_runVoltageModeControl+2,w
  6849  017B  0021               	movlb	1	; select bank1
  6850  017C  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6851  017D  0020               	movlb	0	; select bank0
  6852  017E  0831               	movf	??_runVoltageModeControl+1,w
  6853  017F  0021               	movlb	1	; select bank1
  6854  0180  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6855  0181  0020               	movlb	0	; select bank0
  6856  0182  0830               	movf	??_runVoltageModeControl,w
  6857  0183  0021               	movlb	1	; select bank1
  6858  0184  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6859  0185                     i1l2263:
  6860                           
  6861                           ;Controller.c: 124:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6862  0185  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6863  0186  3A80               	xorlw	128
  6864  0187  0020               	movlb	0	; select bank0
  6865  0188  00B0               	movwf	??_runVoltageModeControl
  6866  0189  0021               	movlb	1	; select bank1
  6867  018A  084B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6868  018B  3A80               	xorlw	128
  6869  018C  0020               	movlb	0	; select bank0
  6870  018D  0230               	subwf	??_runVoltageModeControl,w
  6871  018E  0021               	movlb	1	; select bank1
  6872  018F  1D03               	skipz
  6873  0190  29AB               	goto	u193_23
  6874  0191  084A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6875  0192  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6876  0193  1D03               	skipz
  6877  0194  29AB               	goto	u193_23
  6878  0195  0849               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6879  0196  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6880  0197  1D03               	skipz
  6881  0198  29AB               	goto	u193_23
  6882  0199  0848               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6883  019A  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6884  019B  1D03               	skipz
  6885  019C  29AB               	goto	u193_23
  6886  019D  0847               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6887  019E  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6888  019F  1D03               	skipz
  6889  01A0  29AB               	goto	u193_23
  6890  01A1  0846               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6891  01A2  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6892  01A3  1D03               	skipz
  6893  01A4  29AB               	goto	u193_23
  6894  01A5  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6895  01A6  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6896  01A7  1D03               	skipz
  6897  01A8  29AB               	goto	u193_23
  6898  01A9  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6899  01AA  0220               	subwf	_integratorScaledLimit^(0+128),w
  6900  01AB                     u193_23:
  6901  01AB  1803               	skipnc
  6902  01AC  29AE               	goto	u193_21
  6903  01AD  29AF               	goto	u193_20
  6904  01AE                     u193_21:
  6905  01AE  29BF               	goto	i1l2267
  6906  01AF                     u193_20:
  6907  01AF                     i1l2265:
  6908                           
  6909                           ;Controller.c: 125:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6910  01AF  0820               	movf	_integratorScaledLimit^(0+128),w
  6911  01B0  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6912  01B1  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6913  01B2  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6914  01B3  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6915  01B4  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6916  01B5  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6917  01B6  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6918  01B7  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6919  01B8  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6920  01B9  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6921  01BA  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6922  01BB  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6923  01BC  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6924  01BD  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6925  01BE  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6926  01BF                     i1l2267:
  6927                           
  6928                           ;Controller.c: 128:    if(voltageModeVariables.integralOutputScaled < 0){
  6929  01BF  300E               	movlw	14
  6930  01C0  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6931  01C1  0086               	movwf	6
  6932  01C2  0187               	clrf	7
  6933  01C3  3F47               	moviw [7]fsr1
  6934  01C4  0020               	movlb	0	; select bank0
  6935  01C5  00B0               	movwf	??_runVoltageModeControl
  6936  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  6937  01C7  29C9               	goto	u194_21
  6938  01C8  29CA               	goto	u194_20
  6939  01C9                     u194_21:
  6940  01C9  2A67               	goto	i1l2273
  6941  01CA                     u194_20:
  6942  01CA                     i1l2269:
  6943                           
  6944                           ;Controller.c: 129:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  6945  01CA  0021               	movlb	1	; select bank1
  6946  01CB  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6947  01CC  00F1               	movwf	abs@a+1
  6948  01CD  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6949  01CE  00F0               	movwf	abs@a
  6950  01CF  318C  2407  3180   	fcall	_abs
  6951  01D2  0870               	movf	?_abs,w
  6952  01D3  0020               	movlb	0	; select bank0
  6953  01D4  00B0               	movwf	??_runVoltageModeControl
  6954  01D5  0871               	movf	?_abs+1,w
  6955  01D6  00B1               	movwf	??_runVoltageModeControl+1
  6956  01D7  3000               	movlw	0
  6957  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6958  01D9  30FF               	movlw	255
  6959  01DA  00B2               	movwf	??_runVoltageModeControl+2
  6960  01DB  00B3               	movwf	??_runVoltageModeControl+3
  6961  01DC  00B4               	movwf	??_runVoltageModeControl+4
  6962  01DD  00B5               	movwf	??_runVoltageModeControl+5
  6963  01DE  00B6               	movwf	??_runVoltageModeControl+6
  6964  01DF  00B7               	movwf	??_runVoltageModeControl+7
  6965  01E0  0021               	movlb	1	; select bank1
  6966  01E1  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6967  01E2  3A80               	xorlw	128
  6968  01E3  0020               	movlb	0	; select bank0
  6969  01E4  00B8               	movwf	??_runVoltageModeControl+8
  6970  01E5  0837               	movf	??_runVoltageModeControl+7,w
  6971  01E6  3A80               	xorlw	128
  6972  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  6973  01E8  0021               	movlb	1	; select bank1
  6974  01E9  1D03               	skipz
  6975  01EA  2A13               	goto	u195_23
  6976  01EB  0020               	movlb	0	; select bank0
  6977  01EC  0836               	movf	??_runVoltageModeControl+6,w
  6978  01ED  0021               	movlb	1	; select bank1
  6979  01EE  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6980  01EF  1D03               	skipz
  6981  01F0  2A13               	goto	u195_23
  6982  01F1  0020               	movlb	0	; select bank0
  6983  01F2  0835               	movf	??_runVoltageModeControl+5,w
  6984  01F3  0021               	movlb	1	; select bank1
  6985  01F4  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6986  01F5  1D03               	skipz
  6987  01F6  2A13               	goto	u195_23
  6988  01F7  0020               	movlb	0	; select bank0
  6989  01F8  0834               	movf	??_runVoltageModeControl+4,w
  6990  01F9  0021               	movlb	1	; select bank1
  6991  01FA  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6992  01FB  1D03               	skipz
  6993  01FC  2A13               	goto	u195_23
  6994  01FD  0020               	movlb	0	; select bank0
  6995  01FE  0833               	movf	??_runVoltageModeControl+3,w
  6996  01FF  0021               	movlb	1	; select bank1
  6997  0200  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6998  0201  1D03               	skipz
  6999  0202  2A13               	goto	u195_23
  7000  0203  0020               	movlb	0	; select bank0
  7001  0204  0832               	movf	??_runVoltageModeControl+2,w
  7002  0205  0021               	movlb	1	; select bank1
  7003  0206  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  7004  0207  1D03               	skipz
  7005  0208  2A13               	goto	u195_23
  7006  0209  0020               	movlb	0	; select bank0
  7007  020A  0831               	movf	??_runVoltageModeControl+1,w
  7008  020B  0021               	movlb	1	; select bank1
  7009  020C  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  7010  020D  1D03               	skipz
  7011  020E  2A13               	goto	u195_23
  7012  020F  0020               	movlb	0	; select bank0
  7013  0210  0830               	movf	??_runVoltageModeControl,w
  7014  0211  0021               	movlb	1	; select bank1
  7015  0212  0220               	subwf	_integratorScaledLimit^(0+128),w
  7016  0213                     u195_23:
  7017  0213  1803               	skipnc
  7018  0214  2A16               	goto	u195_21
  7019  0215  2A17               	goto	u195_20
  7020  0216                     u195_21:
  7021  0216  2A67               	goto	i1l2273
  7022  0217                     u195_20:
  7023  0217                     i1l2271:
  7024                           
  7025                           ;Controller.c: 130:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  7026  0217  3000               	movlw	0
  7027  0218  0020               	movlb	0	; select bank0
  7028  0219  00B0               	movwf	??_runVoltageModeControl
  7029  021A  3000               	movlw	0
  7030  021B  00B1               	movwf	??_runVoltageModeControl+1
  7031  021C  3000               	movlw	0
  7032  021D  00B2               	movwf	??_runVoltageModeControl+2
  7033  021E  3000               	movlw	0
  7034  021F  00B3               	movwf	??_runVoltageModeControl+3
  7035  0220  3000               	movlw	0
  7036  0221  00B4               	movwf	??_runVoltageModeControl+4
  7037  0222  3000               	movlw	0
  7038  0223  00B5               	movwf	??_runVoltageModeControl+5
  7039  0224  3000               	movlw	0
  7040  0225  00B6               	movwf	??_runVoltageModeControl+6
  7041  0226  3000               	movlw	0
  7042  0227  00B7               	movwf	??_runVoltageModeControl+7
  7043  0228  0021               	movlb	1	; select bank1
  7044  0229  0820               	movf	_integratorScaledLimit^(0+128),w
  7045  022A  0020               	movlb	0	; select bank0
  7046  022B  02B0               	subwf	??_runVoltageModeControl,f
  7047  022C  0021               	movlb	1	; select bank1
  7048  022D  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  7049  022E  0020               	movlb	0	; select bank0
  7050  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  7051  0230  0021               	movlb	1	; select bank1
  7052  0231  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  7053  0232  0020               	movlb	0	; select bank0
  7054  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  7055  0234  0021               	movlb	1	; select bank1
  7056  0235  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  7057  0236  0020               	movlb	0	; select bank0
  7058  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7059  0238  0021               	movlb	1	; select bank1
  7060  0239  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7061  023A  0020               	movlb	0	; select bank0
  7062  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7063  023C  0021               	movlb	1	; select bank1
  7064  023D  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7065  023E  0020               	movlb	0	; select bank0
  7066  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7067  0240  0021               	movlb	1	; select bank1
  7068  0241  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7069  0242  0020               	movlb	0	; select bank0
  7070  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7071  0244  0021               	movlb	1	; select bank1
  7072  0245  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7073  0246  0020               	movlb	0	; select bank0
  7074  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7075  0248  0837               	movf	??_runVoltageModeControl+7,w
  7076  0249  0021               	movlb	1	; select bank1
  7077  024A  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7078  024B  0020               	movlb	0	; select bank0
  7079  024C  0836               	movf	??_runVoltageModeControl+6,w
  7080  024D  0021               	movlb	1	; select bank1
  7081  024E  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7082  024F  0020               	movlb	0	; select bank0
  7083  0250  0835               	movf	??_runVoltageModeControl+5,w
  7084  0251  0021               	movlb	1	; select bank1
  7085  0252  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7086  0253  0020               	movlb	0	; select bank0
  7087  0254  0834               	movf	??_runVoltageModeControl+4,w
  7088  0255  0021               	movlb	1	; select bank1
  7089  0256  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7090  0257  0020               	movlb	0	; select bank0
  7091  0258  0833               	movf	??_runVoltageModeControl+3,w
  7092  0259  0021               	movlb	1	; select bank1
  7093  025A  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7094  025B  0020               	movlb	0	; select bank0
  7095  025C  0832               	movf	??_runVoltageModeControl+2,w
  7096  025D  0021               	movlb	1	; select bank1
  7097  025E  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7098  025F  0020               	movlb	0	; select bank0
  7099  0260  0831               	movf	??_runVoltageModeControl+1,w
  7100  0261  0021               	movlb	1	; select bank1
  7101  0262  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7102  0263  0020               	movlb	0	; select bank0
  7103  0264  0830               	movf	??_runVoltageModeControl,w
  7104  0265  0021               	movlb	1	; select bank1
  7105  0266  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7106  0267                     i1l2273:
  7107                           
  7108                           ;Controller.c: 135:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 7u);
  7109  0267  300E               	movlw	14
  7110  0268  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7111  0269  0086               	movwf	6
  7112  026A  0187               	clrf	7
  7113  026B  3F40               	moviw [0]fsr1
  7114  026C  0020               	movlb	0	; select bank0
  7115  026D  00B0               	movwf	??_runVoltageModeControl
  7116  026E  3F41               	moviw [1]fsr1
  7117  026F  00B1               	movwf	??_runVoltageModeControl+1
  7118  0270  3F42               	moviw [2]fsr1
  7119  0271  00B2               	movwf	??_runVoltageModeControl+2
  7120  0272  3F43               	moviw [3]fsr1
  7121  0273  00B3               	movwf	??_runVoltageModeControl+3
  7122  0274  3F44               	moviw [4]fsr1
  7123  0275  00B4               	movwf	??_runVoltageModeControl+4
  7124  0276  3F45               	moviw [5]fsr1
  7125  0277  00B5               	movwf	??_runVoltageModeControl+5
  7126  0278  3F46               	moviw [6]fsr1
  7127  0279  00B6               	movwf	??_runVoltageModeControl+6
  7128  027A  3F47               	moviw [7]fsr1
  7129  027B  00B7               	movwf	??_runVoltageModeControl+7
  7130  027C  3017               	movlw	23
  7131  027D  00B8               	movwf	??_runVoltageModeControl+8
  7132  027E                     u196_25:
  7133  027E  0020               	movlb	0	; select bank0
  7134  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7135  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7136  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7137  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7138  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7139  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7140  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7141  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7142  0287                     u196_20:
  7143  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7144  0288  2A7E               	goto	u196_25
  7145  0289  0020               	movlb	0	; select bank0
  7146  028A  0833               	movf	??_runVoltageModeControl+3,w
  7147  028B  0021               	movlb	1	; select bank1
  7148  028C  00C3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7149  028D  0020               	movlb	0	; select bank0
  7150  028E  0832               	movf	??_runVoltageModeControl+2,w
  7151  028F  0021               	movlb	1	; select bank1
  7152  0290  00C2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7153  0291  0020               	movlb	0	; select bank0
  7154  0292  0831               	movf	??_runVoltageModeControl+1,w
  7155  0293  0021               	movlb	1	; select bank1
  7156  0294  00C1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7157  0295  0020               	movlb	0	; select bank0
  7158  0296  0830               	movf	??_runVoltageModeControl,w
  7159  0297  0021               	movlb	1	; select bank1
  7160  0298  00C0               	movwf	(_voltageModeVariables^(0+128)+10)
  7161  0299                     i1l2275:
  7162                           
  7163                           ;Controller.c: 138:    int64_t propMult = (int32_t) (2u * ((int32_t) voltageModeVariable
      +                          s.error));
  7164  0299  0836               	movf	_voltageModeVariables^(0+128),w
  7165  029A  0020               	movlb	0	; select bank0
  7166  029B  00B0               	movwf	??_runVoltageModeControl
  7167  029C  0021               	movlb	1	; select bank1
  7168  029D  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7169  029E  0020               	movlb	0	; select bank0
  7170  029F  00B1               	movwf	??_runVoltageModeControl+1
  7171  02A0  3000               	movlw	0
  7172  02A1  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7173  02A2  30FF               	movlw	255
  7174  02A3  00B2               	movwf	??_runVoltageModeControl+2
  7175  02A4  00B3               	movwf	??_runVoltageModeControl+3
  7176  02A5  3001               	movlw	1
  7177  02A6                     u197_25:
  7178  02A6  35B0               	lslf	??_runVoltageModeControl,f
  7179  02A7  0DB1               	rlf	??_runVoltageModeControl+1,f
  7180  02A8  0DB2               	rlf	??_runVoltageModeControl+2,f
  7181  02A9  0DB3               	rlf	??_runVoltageModeControl+3,f
  7182  02AA                     u197_20:
  7183  02AA  0B89               	decfsz	9,f
  7184  02AB  2AA6               	goto	u197_25
  7185  02AC  0830               	movf	??_runVoltageModeControl,w
  7186  02AD  00C8               	movwf	runVoltageModeControl@propMult
  7187  02AE  0831               	movf	??_runVoltageModeControl+1,w
  7188  02AF  00C9               	movwf	runVoltageModeControl@propMult+1
  7189  02B0  0832               	movf	??_runVoltageModeControl+2,w
  7190  02B1  00CA               	movwf	runVoltageModeControl@propMult+2
  7191  02B2  0833               	movf	??_runVoltageModeControl+3,w
  7192  02B3  00CB               	movwf	runVoltageModeControl@propMult+3
  7193  02B4  3000               	movlw	0
  7194  02B5  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7195  02B6  30FF               	movlw	255
  7196  02B7  00CC               	movwf	runVoltageModeControl@propMult+4
  7197  02B8  00CD               	movwf	runVoltageModeControl@propMult+5
  7198  02B9  00CE               	movwf	runVoltageModeControl@propMult+6
  7199  02BA  00CF               	movwf	runVoltageModeControl@propMult+7
  7200  02BB                     i1l2277:
  7201                           
  7202                           ;Controller.c: 139:    voltageModeVariables.proportionalOutput = propMult >> 9u;
  7203  02BB  3048               	movlw	low runVoltageModeControl@propMult
  7204  02BC  0086               	movwf	6
  7205  02BD  3000               	movlw	high runVoltageModeControl@propMult
  7206  02BE  0087               	movwf	7
  7207  02BF  3F40               	moviw [0]fsr1
  7208  02C0  00B0               	movwf	??_runVoltageModeControl
  7209  02C1  3F41               	moviw [1]fsr1
  7210  02C2  00B1               	movwf	??_runVoltageModeControl+1
  7211  02C3  3F42               	moviw [2]fsr1
  7212  02C4  00B2               	movwf	??_runVoltageModeControl+2
  7213  02C5  3F43               	moviw [3]fsr1
  7214  02C6  00B3               	movwf	??_runVoltageModeControl+3
  7215  02C7  3F44               	moviw [4]fsr1
  7216  02C8  00B4               	movwf	??_runVoltageModeControl+4
  7217  02C9  3F45               	moviw [5]fsr1
  7218  02CA  00B5               	movwf	??_runVoltageModeControl+5
  7219  02CB  3F46               	moviw [6]fsr1
  7220  02CC  00B6               	movwf	??_runVoltageModeControl+6
  7221  02CD  3F47               	moviw [7]fsr1
  7222  02CE  00B7               	movwf	??_runVoltageModeControl+7
  7223  02CF  3009               	movlw	9
  7224  02D0  00B8               	movwf	??_runVoltageModeControl+8
  7225  02D1                     u198_25:
  7226  02D1  0020               	movlb	0	; select bank0
  7227  02D2  37B7               	asrf	??_runVoltageModeControl+7,f
  7228  02D3  0CB6               	rrf	??_runVoltageModeControl+6,f
  7229  02D4  0CB5               	rrf	??_runVoltageModeControl+5,f
  7230  02D5  0CB4               	rrf	??_runVoltageModeControl+4,f
  7231  02D6  0CB3               	rrf	??_runVoltageModeControl+3,f
  7232  02D7  0CB2               	rrf	??_runVoltageModeControl+2,f
  7233  02D8  0CB1               	rrf	??_runVoltageModeControl+1,f
  7234  02D9  0CB0               	rrf	??_runVoltageModeControl,f
  7235  02DA                     u198_20:
  7236  02DA  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7237  02DB  2AD1               	goto	u198_25
  7238  02DC  0020               	movlb	0	; select bank0
  7239  02DD  0833               	movf	??_runVoltageModeControl+3,w
  7240  02DE  0021               	movlb	1	; select bank1
  7241  02DF  00BF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7242  02E0  0020               	movlb	0	; select bank0
  7243  02E1  0832               	movf	??_runVoltageModeControl+2,w
  7244  02E2  0021               	movlb	1	; select bank1
  7245  02E3  00BE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7246  02E4  0020               	movlb	0	; select bank0
  7247  02E5  0831               	movf	??_runVoltageModeControl+1,w
  7248  02E6  0021               	movlb	1	; select bank1
  7249  02E7  00BD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7250  02E8  0020               	movlb	0	; select bank0
  7251  02E9  0830               	movf	??_runVoltageModeControl,w
  7252  02EA  0021               	movlb	1	; select bank1
  7253  02EB  00BC               	movwf	(_voltageModeVariables^(0+128)+6)
  7254  02EC                     i1l2279:
  7255                           
  7256                           ;Controller.c: 141:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7257  02EC  0840               	movf	(_voltageModeVariables^(0+128)+10),w
  7258  02ED  073C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7259  02EE  0020               	movlb	0	; select bank0
  7260  02EF  00B0               	movwf	??_runVoltageModeControl
  7261  02F0  0021               	movlb	1	; select bank1
  7262  02F1  0841               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7263  02F2  3D3D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7264  02F3  0020               	movlb	0	; select bank0
  7265  02F4  00B1               	movwf	??_runVoltageModeControl+1
  7266  02F5  0021               	movlb	1	; select bank1
  7267  02F6  0842               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7268  02F7  3D3E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7269  02F8  0020               	movlb	0	; select bank0
  7270  02F9  00B2               	movwf	??_runVoltageModeControl+2
  7271  02FA  0021               	movlb	1	; select bank1
  7272  02FB  0843               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7273  02FC  3D3F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7274  02FD  0020               	movlb	0	; select bank0
  7275  02FE  00B3               	movwf	??_runVoltageModeControl+3
  7276  02FF  0833               	movf	??_runVoltageModeControl+3,w
  7277  0300  0021               	movlb	1	; select bank1
  7278  0301  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7279  0302  0020               	movlb	0	; select bank0
  7280  0303  0832               	movf	??_runVoltageModeControl+2,w
  7281  0304  0021               	movlb	1	; select bank1
  7282  0305  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7283  0306  0020               	movlb	0	; select bank0
  7284  0307  0831               	movf	??_runVoltageModeControl+1,w
  7285  0308  0021               	movlb	1	; select bank1
  7286  0309  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7287  030A  0020               	movlb	0	; select bank0
  7288  030B  0830               	movf	??_runVoltageModeControl,w
  7289  030C  0021               	movlb	1	; select bank1
  7290  030D  00CC               	movwf	(_voltageModeVariables^(0+128)+22)
  7291  030E                     i1l2281:
  7292                           
  7293                           ;Controller.c: 142:    voltageModeVariables.previousError = voltageModeVariables.error;
  7294  030E  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7295  030F  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7296  0310  0836               	movf	_voltageModeVariables^(0+128),w
  7297  0311  00D0               	movwf	(_voltageModeVariables^(0+128)+26)
  7298  0312                     i1l462:
  7299  0312  0008               	return
  7300  0313                     __end_of_runVoltageModeControl:
  7301                           
  7302                           	psect	text32
  7303  0DBB                     __ptext32:	
  7304 ;; *************** function i1_readGPIO *****************
  7305 ;; Defined at:
  7306 ;;		line 79 in file "GPIO.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  gpioNumber      1    wreg     const enum E2798
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7311 ;;  portType        1    7[COMMON] unsigned char 
  7312 ;;  portNumber      1    6[COMMON] unsigned char 
  7313 ;;  returnValueB    1    5[COMMON] unsigned char 
  7314 ;;  readB           1    4[COMMON] unsigned char 
  7315 ;;  returnValueA    1    3[COMMON] unsigned char 
  7316 ;;  readA           1    2[COMMON] unsigned char 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      _Bool 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7326 ;;      Params:         0       0       0       0       0       0
  7327 ;;      Locals:         7       0       0       0       0       0
  7328 ;;      Temps:          2       0       0       0       0       0
  7329 ;;      Totals:         9       0       0       0       0       0
  7330 ;;Total ram usage:        9 bytes
  7331 ;; Hardware stack levels used: 1
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_runVoltageModeControl
  7336 ;;		_currentTripRead
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340  0DBB                     i1_readGPIO:	
  7341                           ;psect for function i1_readGPIO
  7342                           
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7346                           ;i1readGPIO@gpioNumber stored from wreg
  7347  0DBB  00F8               	movwf	i1readGPIO@gpioNumber
  7348  0DBC                     i1l2111:
  7349                           
  7350                           ;GPIO.c: 81:     uint8_t portType = 0;
  7351  0DBC  01F7               	clrf	i1readGPIO@portType
  7352  0DBD                     i1l2113:
  7353                           
  7354                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7355  0DBD  3008               	movlw	8
  7356  0DBE  0278               	subwf	i1readGPIO@gpioNumber,w
  7357  0DBF  1C03               	skipc
  7358  0DC0  2DC2               	goto	u159_21
  7359  0DC1  2DC3               	goto	u159_20
  7360  0DC2                     u159_21:
  7361  0DC2  2DCB               	goto	i1l2119
  7362  0DC3                     u159_20:
  7363  0DC3                     i1l2115:
  7364                           
  7365                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7366  0DC3  0878               	movf	i1readGPIO@gpioNumber,w
  7367  0DC4  3EF8               	addlw	248
  7368  0DC5  00F0               	movwf	??i1_readGPIO
  7369  0DC6  0870               	movf	??i1_readGPIO,w
  7370  0DC7  00F6               	movwf	i1readGPIO@portNumber
  7371  0DC8                     i1l2117:
  7372                           
  7373                           ;GPIO.c: 84:         portType = 1;
  7374  0DC8  01F7               	clrf	i1readGPIO@portType
  7375  0DC9  0AF7               	incf	i1readGPIO@portType,f
  7376                           
  7377                           ;GPIO.c: 85:     }
  7378  0DCA  2DD0               	goto	i1l2123
  7379  0DCB                     i1l2119:
  7380                           
  7381                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7382  0DCB  0878               	movf	i1readGPIO@gpioNumber,w
  7383  0DCC  00F0               	movwf	??i1_readGPIO
  7384  0DCD  0870               	movf	??i1_readGPIO,w
  7385  0DCE  00F6               	movwf	i1readGPIO@portNumber
  7386  0DCF                     i1l2121:
  7387                           
  7388                           ;GPIO.c: 88:         portType = 0;
  7389  0DCF  01F7               	clrf	i1readGPIO@portType
  7390  0DD0                     i1l2123:
  7391                           
  7392                           ;GPIO.c: 91:     if(portType == 0){
  7393  0DD0  0877               	movf	i1readGPIO@portType,w
  7394  0DD1  1D03               	btfss	3,2
  7395  0DD2  2DD4               	goto	u160_21
  7396  0DD3  2DD5               	goto	u160_20
  7397  0DD4                     u160_21:
  7398  0DD4  2DE8               	goto	i1l2135
  7399  0DD5                     u160_20:
  7400  0DD5                     i1l2125:
  7401                           
  7402                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7403  0DD5  0020               	movlb	0	; select bank0
  7404  0DD6  080C               	movf	12,w	;volatile
  7405  0DD7  00F0               	movwf	??i1_readGPIO
  7406  0DD8  0870               	movf	??i1_readGPIO,w
  7407  0DD9  00F2               	movwf	i1readGPIO@readA
  7408  0DDA                     i1l2127:
  7409                           
  7410                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7411  0DDA  0872               	movf	i1readGPIO@readA,w
  7412  0DDB  00F0               	movwf	??i1_readGPIO
  7413  0DDC  0A76               	incf	i1readGPIO@portNumber,w
  7414  0DDD  2DDF               	goto	u161_24
  7415  0DDE                     u161_25:
  7416  0DDE  36F0               	lsrf	??i1_readGPIO,f
  7417  0DDF                     u161_24:
  7418  0DDF  0B89               	decfsz	9,f
  7419  0DE0  2DDE               	goto	u161_25
  7420  0DE1  0870               	movf	??i1_readGPIO,w
  7421  0DE2  3901               	andlw	1
  7422  0DE3  00F1               	movwf	??i1_readGPIO+1
  7423  0DE4  0871               	movf	??i1_readGPIO+1,w
  7424  0DE5  00F3               	movwf	i1readGPIO@returnValueA
  7425  0DE6                     i1l2129:
  7426                           
  7427                           ;GPIO.c: 94:         return returnValueA;
  7428  0DE6  0873               	movf	i1readGPIO@returnValueA,w
  7429  0DE7  2E01               	goto	i1l326
  7430  0DE8                     i1l2135:
  7431  0DE8  0377               	decf	i1readGPIO@portType,w
  7432  0DE9  1D03               	btfss	3,2
  7433  0DEA  2DEC               	goto	u162_21
  7434  0DEB  2DED               	goto	u162_20
  7435  0DEC                     u162_21:
  7436  0DEC  2E00               	goto	i1l2147
  7437  0DED                     u162_20:
  7438  0DED                     i1l2137:
  7439                           
  7440                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7441  0DED  0020               	movlb	0	; select bank0
  7442  0DEE  080D               	movf	13,w	;volatile
  7443  0DEF  00F0               	movwf	??i1_readGPIO
  7444  0DF0  0870               	movf	??i1_readGPIO,w
  7445  0DF1  00F4               	movwf	i1readGPIO@readB
  7446  0DF2                     i1l2139:
  7447                           
  7448                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7449  0DF2  0874               	movf	i1readGPIO@readB,w
  7450  0DF3  00F0               	movwf	??i1_readGPIO
  7451  0DF4  0A76               	incf	i1readGPIO@portNumber,w
  7452  0DF5  2DF7               	goto	u163_24
  7453  0DF6                     u163_25:
  7454  0DF6  36F0               	lsrf	??i1_readGPIO,f
  7455  0DF7                     u163_24:
  7456  0DF7  0B89               	decfsz	9,f
  7457  0DF8  2DF6               	goto	u163_25
  7458  0DF9  0870               	movf	??i1_readGPIO,w
  7459  0DFA  3901               	andlw	1
  7460  0DFB  00F1               	movwf	??i1_readGPIO+1
  7461  0DFC  0871               	movf	??i1_readGPIO+1,w
  7462  0DFD  00F5               	movwf	i1readGPIO@returnValueB
  7463  0DFE                     i1l2141:
  7464                           
  7465                           ;GPIO.c: 99:         return returnValueB;
  7466  0DFE  0875               	movf	i1readGPIO@returnValueB,w
  7467  0DFF  2E01               	goto	i1l326
  7468  0E00                     i1l2147:
  7469  0E00  3000               	movlw	0
  7470  0E01                     i1l326:
  7471  0E01  0008               	return
  7472  0E02                     __end_ofi1_readGPIO:
  7473                           
  7474                           	psect	text33
  7475  0D80                     __ptext33:	
  7476 ;; *************** function _convertRawToMilliVolts *****************
  7477 ;; Defined at:
  7478 ;;		line 53 in file "Controller.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  rawValue        2   12[COMMON] unsigned short 
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  vsenseMult      4    5[BANK0 ] long 
  7483 ;;  returnValued    2   11[BANK0 ] short 
  7484 ;;  offsetted       2    9[BANK0 ] short 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  2   12[COMMON] short 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, pclath, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7494 ;;      Params:         2       0       0       0       0       0
  7495 ;;      Locals:         0       8       0       0       0       0
  7496 ;;      Temps:          0       5       0       0       0       0
  7497 ;;      Totals:         2      13       0       0       0       0
  7498 ;;Total ram usage:       15 bytes
  7499 ;; Hardware stack levels used: 1
  7500 ;; Hardware stack levels required when called: 1
  7501 ;; This function calls:
  7502 ;;		___lmul
  7503 ;; This function is called by:
  7504 ;;		_runVoltageModeControl
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508  0D80                     _convertRawToMilliVolts:	
  7509                           ;psect for function _convertRawToMilliVolts
  7510                           
  7511  0D80                     i1l2059:	
  7512                           ;incstack = 0
  7513                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7514                           
  7515                           
  7516                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7517  0D80  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7518  0D81  0020               	movlb	0	; select bank0
  7519  0D82  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7520  0D83  087C               	movf	convertRawToMilliVolts@rawValue,w
  7521  0D84  00A9               	movwf	convertRawToMilliVolts@offsetted
  7522  0D85                     i1l2061:
  7523                           
  7524                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7525  0D85  0829               	movf	convertRawToMilliVolts@offsetted,w
  7526  0D86  00F0               	movwf	___lmul@multiplier
  7527  0D87  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7528  0D88  00F1               	movwf	___lmul@multiplier+1
  7529  0D89  0D89               	rlf	9,f
  7530  0D8A  3B89               	subwfb	9,f
  7531  0D8B  0989               	comf	9,f
  7532  0D8C  00F2               	movwf	___lmul@multiplier+2
  7533  0D8D  00F3               	movwf	___lmul@multiplier+3
  7534  0D8E  3000               	movlw	0
  7535  0D8F  00F7               	movwf	___lmul@multiplicand+3
  7536  0D90  3000               	movlw	0
  7537  0D91  00F6               	movwf	___lmul@multiplicand+2
  7538  0D92  3017               	movlw	23
  7539  0D93  00F5               	movwf	___lmul@multiplicand+1
  7540  0D94  30D4               	movlw	212
  7541  0D95  00F4               	movwf	___lmul@multiplicand
  7542  0D96  318D  2515  318D   	fcall	___lmul
  7543  0D99  0873               	movf	?___lmul+3,w
  7544  0D9A  0020               	movlb	0	; select bank0
  7545  0D9B  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7546  0D9C  0872               	movf	?___lmul+2,w
  7547  0D9D  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7548  0D9E  0871               	movf	?___lmul+1,w
  7549  0D9F  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7550  0DA0  0870               	movf	?___lmul,w
  7551  0DA1  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7552  0DA2                     i1l2063:
  7553                           
  7554                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7555  0DA2  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7556  0DA3  00A0               	movwf	??_convertRawToMilliVolts
  7557  0DA4  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7558  0DA5  00A1               	movwf	??_convertRawToMilliVolts+1
  7559  0DA6  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7560  0DA7  00A2               	movwf	??_convertRawToMilliVolts+2
  7561  0DA8  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7562  0DA9  00A3               	movwf	??_convertRawToMilliVolts+3
  7563  0DAA  3008               	movlw	8
  7564  0DAB  00A4               	movwf	??_convertRawToMilliVolts+4
  7565  0DAC                     u145_25:
  7566  0DAC  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7567  0DAD  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7568  0DAE  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7569  0DAF  0CA0               	rrf	??_convertRawToMilliVolts,f
  7570  0DB0                     u145_20:
  7571  0DB0  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7572  0DB1  2DAC               	goto	u145_25
  7573  0DB2  0821               	movf	??_convertRawToMilliVolts+1,w
  7574  0DB3  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7575  0DB4  0820               	movf	??_convertRawToMilliVolts,w
  7576  0DB5  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7577  0DB6                     i1l2065:
  7578                           
  7579                           ;Controller.c: 57:     return returnValuedV;
  7580  0DB6  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7581  0DB7  00FD               	movwf	?_convertRawToMilliVolts+1
  7582  0DB8  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7583  0DB9  00FC               	movwf	?_convertRawToMilliVolts
  7584  0DBA                     i1l440:
  7585  0DBA  0008               	return
  7586  0DBB                     __end_of_convertRawToMilliVolts:
  7587                           
  7588                           	psect	text34
  7589  0D15                     __ptext34:	
  7590 ;; *************** function ___lmul *****************
  7591 ;; Defined at:
  7592 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  multiplier      4    0[COMMON] unsigned long 
  7595 ;;  multiplicand    4    4[COMMON] unsigned long 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  product         4    8[COMMON] unsigned long 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  4    0[COMMON] unsigned long 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7607 ;;      Params:         8       0       0       0       0       0
  7608 ;;      Locals:         4       0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0
  7610 ;;      Totals:        12       0       0       0       0       0
  7611 ;;Total ram usage:       12 bytes
  7612 ;; Hardware stack levels used: 1
  7613 ;; This function calls:
  7614 ;;		Nothing
  7615 ;; This function is called by:
  7616 ;;		_runPotScaling
  7617 ;;		_convertRawToMilliVolts
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621  0D15                     ___lmul:	
  7622                           ;psect for function ___lmul
  7623                           
  7624  0D15                     i1l2017:	
  7625                           ;incstack = 0
  7626                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7627                           
  7628  0D15  3000               	movlw	0
  7629  0D16  00FB               	movwf	___lmul@product+3
  7630  0D17  3000               	movlw	0
  7631  0D18  00FA               	movwf	___lmul@product+2
  7632  0D19  3000               	movlw	0
  7633  0D1A  00F9               	movwf	___lmul@product+1
  7634  0D1B  3000               	movlw	0
  7635  0D1C  00F8               	movwf	___lmul@product
  7636  0D1D                     i1l2019:
  7637  0D1D  1C70               	btfss	___lmul@multiplier,0
  7638  0D1E  2D20               	goto	u132_21
  7639  0D1F  2D21               	goto	u132_20
  7640  0D20                     u132_21:
  7641  0D20  2D29               	goto	i1l2023
  7642  0D21                     u132_20:
  7643  0D21                     i1l2021:
  7644  0D21  0874               	movf	___lmul@multiplicand,w
  7645  0D22  07F8               	addwf	___lmul@product,f
  7646  0D23  0875               	movf	___lmul@multiplicand+1,w
  7647  0D24  3DF9               	addwfc	___lmul@product+1,f
  7648  0D25  0876               	movf	___lmul@multiplicand+2,w
  7649  0D26  3DFA               	addwfc	___lmul@product+2,f
  7650  0D27  0877               	movf	___lmul@multiplicand+3,w
  7651  0D28  3DFB               	addwfc	___lmul@product+3,f
  7652  0D29                     i1l2023:
  7653  0D29  3001               	movlw	1
  7654  0D2A                     u133_25:
  7655  0D2A  35F4               	lslf	___lmul@multiplicand,f
  7656  0D2B  0DF5               	rlf	___lmul@multiplicand+1,f
  7657  0D2C  0DF6               	rlf	___lmul@multiplicand+2,f
  7658  0D2D  0DF7               	rlf	___lmul@multiplicand+3,f
  7659  0D2E  0B89               	decfsz	9,f
  7660  0D2F  2D2A               	goto	u133_25
  7661  0D30                     i1l2025:
  7662  0D30  3001               	movlw	1
  7663  0D31                     u134_25:
  7664  0D31  36F3               	lsrf	___lmul@multiplier+3,f
  7665  0D32  0CF2               	rrf	___lmul@multiplier+2,f
  7666  0D33  0CF1               	rrf	___lmul@multiplier+1,f
  7667  0D34  0CF0               	rrf	___lmul@multiplier,f
  7668  0D35  0B89               	decfsz	9,f
  7669  0D36  2D31               	goto	u134_25
  7670  0D37  0873               	movf	___lmul@multiplier+3,w
  7671  0D38  0472               	iorwf	___lmul@multiplier+2,w
  7672  0D39  0471               	iorwf	___lmul@multiplier+1,w
  7673  0D3A  0470               	iorwf	___lmul@multiplier,w
  7674  0D3B  1D03               	skipz
  7675  0D3C  2D3E               	goto	u135_21
  7676  0D3D  2D3F               	goto	u135_20
  7677  0D3E                     u135_21:
  7678  0D3E  2D1D               	goto	i1l2019
  7679  0D3F                     u135_20:
  7680  0D3F                     i1l2027:
  7681  0D3F  087B               	movf	___lmul@product+3,w
  7682  0D40  00F3               	movwf	?___lmul+3
  7683  0D41  087A               	movf	___lmul@product+2,w
  7684  0D42  00F2               	movwf	?___lmul+2
  7685  0D43  0879               	movf	___lmul@product+1,w
  7686  0D44  00F1               	movwf	?___lmul+1
  7687  0D45  0878               	movf	___lmul@product,w
  7688  0D46  00F0               	movwf	?___lmul
  7689  0D47                     i1l736:
  7690  0D47  0008               	return
  7691  0D48                     __end_of___lmul:
  7692                           
  7693                           	psect	text35
  7694  0C07                     __ptext35:	
  7695 ;; *************** function _abs *****************
  7696 ;; Defined at:
  7697 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  a               2    0[COMMON] int 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  2    0[COMMON] int 
  7704 ;; Registers used:
  7705 ;;		wreg, status,2, status,0
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7711 ;;      Params:         2       0       0       0       0       0
  7712 ;;      Locals:         0       0       0       0       0       0
  7713 ;;      Temps:          2       0       0       0       0       0
  7714 ;;      Totals:         4       0       0       0       0       0
  7715 ;;Total ram usage:        4 bytes
  7716 ;; Hardware stack levels used: 1
  7717 ;; This function calls:
  7718 ;;		Nothing
  7719 ;; This function is called by:
  7720 ;;		_runVoltageModeControl
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724  0C07                     _abs:	
  7725                           ;psect for function _abs
  7726                           
  7727  0C07                     i1l2069:	
  7728                           ;incstack = 0
  7729                           ; Regs used in _abs: [wreg+status,2+status,0]
  7730                           
  7731  0C07  0871               	movf	abs@a+1,w
  7732  0C08  3A80               	xorlw	128
  7733  0C09  00F2               	movwf	??_abs
  7734  0C0A  3080               	movlw	128
  7735  0C0B  0272               	subwf	??_abs,w
  7736  0C0C  1D03               	skipz
  7737  0C0D  2C10               	goto	u146_25
  7738  0C0E  3001               	movlw	1
  7739  0C0F  0270               	subwf	abs@a,w
  7740  0C10                     u146_25:
  7741  0C10  1803               	skipnc
  7742  0C11  2C13               	goto	u146_21
  7743  0C12  2C14               	goto	u146_20
  7744  0C13                     u146_21:
  7745  0C13  2C20               	goto	i1l1182
  7746  0C14                     u146_20:
  7747  0C14                     i1l2071:
  7748  0C14  0970               	comf	abs@a,w
  7749  0C15  00F2               	movwf	??_abs
  7750  0C16  0971               	comf	abs@a+1,w
  7751  0C17  00F3               	movwf	??_abs+1
  7752  0C18  0AF2               	incf	??_abs,f
  7753  0C19  1903               	skipnz
  7754  0C1A  0AF3               	incf	??_abs+1,f
  7755  0C1B  0872               	movf	??_abs,w
  7756  0C1C  00F0               	movwf	?_abs
  7757  0C1D  0873               	movf	??_abs+1,w
  7758  0C1E  00F1               	movwf	?_abs+1
  7759  0C1F  2C20               	goto	i1l1185
  7760  0C20                     i1l1182:
  7761  0C20                     i1l1185:
  7762  0C20  0008               	return
  7763  0C21                     __end_of_abs:
  7764                           
  7765                           	psect	text36
  7766  0E4C                     __ptext36:	
  7767 ;; *************** function ___omul *****************
  7768 ;; Defined at:
  7769 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7772 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  product         8    1[COMMON] unsigned long long 
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  8    0[BANK0 ] unsigned long long 
  7777 ;; Registers used:
  7778 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7784 ;;      Params:         0      16       0       0       0       0
  7785 ;;      Locals:         8       0       0       0       0       0
  7786 ;;      Temps:          1       0       0       0       0       0
  7787 ;;      Totals:         9      16       0       0       0       0
  7788 ;;Total ram usage:       25 bytes
  7789 ;; Hardware stack levels used: 1
  7790 ;; This function calls:
  7791 ;;		Nothing
  7792 ;; This function is called by:
  7793 ;;		_runVoltageModeControl
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797  0E4C                     ___omul:	
  7798                           ;psect for function ___omul
  7799                           
  7800  0E4C                     i1l2073:	
  7801                           ;incstack = 0
  7802                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7803                           
  7804  0E4C  3071               	movlw	low ___omul@product
  7805  0E4D  0086               	movwf	6
  7806  0E4E  3000               	movlw	high ___omul@product
  7807  0E4F  0087               	movwf	7
  7808  0E50  3008               	movlw	8
  7809  0E51  00F0               	movwf	??___omul
  7810  0E52  3000               	movlw	0
  7811  0E53                     u147_20:
  7812  0E53  001E               	movwi fsr1++
  7813  0E54  0BF0               	decfsz	??___omul,f
  7814  0E55  2E53               	goto	u147_20
  7815  0E56                     i1l2075:
  7816  0E56  0020               	movlb	0	; select bank0
  7817  0E57  1C20               	btfss	___omul@multiplier,0
  7818  0E58  2E5A               	goto	u148_21
  7819  0E59  2E5B               	goto	u148_20
  7820  0E5A                     u148_21:
  7821  0E5A  2E6B               	goto	i1l2079
  7822  0E5B                     u148_20:
  7823  0E5B                     i1l2077:
  7824  0E5B  0828               	movf	___omul@multiplicand,w
  7825  0E5C  07F1               	addwf	___omul@product,f
  7826  0E5D  0829               	movf	___omul@multiplicand+1,w
  7827  0E5E  3DF2               	addwfc	___omul@product+1,f
  7828  0E5F  082A               	movf	___omul@multiplicand+2,w
  7829  0E60  3DF3               	addwfc	___omul@product+2,f
  7830  0E61  082B               	movf	___omul@multiplicand+3,w
  7831  0E62  3DF4               	addwfc	___omul@product+3,f
  7832  0E63  082C               	movf	___omul@multiplicand+4,w
  7833  0E64  3DF5               	addwfc	___omul@product+4,f
  7834  0E65  082D               	movf	___omul@multiplicand+5,w
  7835  0E66  3DF6               	addwfc	___omul@product+5,f
  7836  0E67  082E               	movf	___omul@multiplicand+6,w
  7837  0E68  3DF7               	addwfc	___omul@product+6,f
  7838  0E69  082F               	movf	___omul@multiplicand+7,w
  7839  0E6A  3DF8               	addwfc	___omul@product+7,f
  7840  0E6B                     i1l2079:
  7841  0E6B  35A8               	lslf	___omul@multiplicand,f
  7842  0E6C  0DA9               	rlf	___omul@multiplicand+1,f
  7843  0E6D  0DAA               	rlf	___omul@multiplicand+2,f
  7844  0E6E  0DAB               	rlf	___omul@multiplicand+3,f
  7845  0E6F  0DAC               	rlf	___omul@multiplicand+4,f
  7846  0E70  0DAD               	rlf	___omul@multiplicand+5,f
  7847  0E71  0DAE               	rlf	___omul@multiplicand+6,f
  7848  0E72  0DAF               	rlf	___omul@multiplicand+7,f
  7849  0E73                     i1l2081:
  7850  0E73  36A7               	lsrf	___omul@multiplier+7,f
  7851  0E74  0CA6               	rrf	___omul@multiplier+6,f
  7852  0E75  0CA5               	rrf	___omul@multiplier+5,f
  7853  0E76  0CA4               	rrf	___omul@multiplier+4,f
  7854  0E77  0CA3               	rrf	___omul@multiplier+3,f
  7855  0E78  0CA2               	rrf	___omul@multiplier+2,f
  7856  0E79  0CA1               	rrf	___omul@multiplier+1,f
  7857  0E7A  0CA0               	rrf	___omul@multiplier,f
  7858  0E7B  0820               	movf	___omul@multiplier,w
  7859  0E7C  0421               	iorwf	___omul@multiplier+1,w
  7860  0E7D  0422               	iorwf	___omul@multiplier+2,w
  7861  0E7E  0423               	iorwf	___omul@multiplier+3,w
  7862  0E7F  0424               	iorwf	___omul@multiplier+4,w
  7863  0E80  0425               	iorwf	___omul@multiplier+5,w
  7864  0E81  0426               	iorwf	___omul@multiplier+6,w
  7865  0E82  0427               	iorwf	___omul@multiplier+7,w
  7866  0E83  1D03               	skipz
  7867  0E84  2E86               	goto	u149_21
  7868  0E85  2E87               	goto	u149_20
  7869  0E86                     u149_21:
  7870  0E86  2E56               	goto	i1l2075
  7871  0E87                     u149_20:
  7872  0E87                     i1l741:
  7873  0E87  0871               	movf	___omul@product,w
  7874  0E88  00A0               	movwf	?___omul
  7875  0E89  0872               	movf	___omul@product+1,w
  7876  0E8A  00A1               	movwf	?___omul+1
  7877  0E8B  0873               	movf	___omul@product+2,w
  7878  0E8C  00A2               	movwf	?___omul+2
  7879  0E8D  0874               	movf	___omul@product+3,w
  7880  0E8E  00A3               	movwf	?___omul+3
  7881  0E8F  0875               	movf	___omul@product+4,w
  7882  0E90  00A4               	movwf	?___omul+4
  7883  0E91  0876               	movf	___omul@product+5,w
  7884  0E92  00A5               	movwf	?___omul+5
  7885  0E93  0877               	movf	___omul@product+6,w
  7886  0E94  00A6               	movwf	?___omul+6
  7887  0E95  0878               	movf	___omul@product+7,w
  7888  0E96  00A7               	movwf	?___omul+7
  7889  0E97                     i1l742:
  7890  0E97  0008               	return
  7891  0E98                     __end_of___omul:
  7892                           
  7893                           	psect	text37
  7894  0C5A                     __ptext37:	
  7895 ;; *************** function ___wmul *****************
  7896 ;; Defined at:
  7897 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  multiplier      2    0[COMMON] unsigned int 
  7900 ;;  multiplicand    2    2[COMMON] unsigned int 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  product         2    4[COMMON] unsigned int 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  2    0[COMMON] unsigned int 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7912 ;;      Params:         4       0       0       0       0       0
  7913 ;;      Locals:         2       0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0
  7915 ;;      Totals:         6       0       0       0       0       0
  7916 ;;Total ram usage:        6 bytes
  7917 ;; Hardware stack levels used: 1
  7918 ;; This function calls:
  7919 ;;		Nothing
  7920 ;; This function is called by:
  7921 ;;		_runPotScaling
  7922 ;;		_controlRoutine
  7923 ;;		_convertRawToMilliAmps
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927  0C5A                     ___wmul:	
  7928                           ;psect for function ___wmul
  7929                           
  7930  0C5A                     i1l2305:	
  7931                           ;incstack = 0
  7932                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7933                           
  7934  0C5A  01F4               	clrf	___wmul@product
  7935  0C5B  01F5               	clrf	___wmul@product+1
  7936  0C5C                     i1l2307:
  7937  0C5C  1C70               	btfss	___wmul@multiplier,0
  7938  0C5D  2C5F               	goto	u205_21
  7939  0C5E  2C60               	goto	u205_20
  7940  0C5F                     u205_21:
  7941  0C5F  2C64               	goto	i1l722
  7942  0C60                     u205_20:
  7943  0C60                     i1l2309:
  7944  0C60  0872               	movf	___wmul@multiplicand,w
  7945  0C61  07F4               	addwf	___wmul@product,f
  7946  0C62  0873               	movf	___wmul@multiplicand+1,w
  7947  0C63  3DF5               	addwfc	___wmul@product+1,f
  7948  0C64                     i1l722:
  7949  0C64  3001               	movlw	1
  7950  0C65                     u206_25:
  7951  0C65  35F2               	lslf	___wmul@multiplicand,f
  7952  0C66  0DF3               	rlf	___wmul@multiplicand+1,f
  7953  0C67  0B89               	decfsz	9,f
  7954  0C68  2C65               	goto	u206_25
  7955  0C69                     i1l2311:
  7956  0C69  3001               	movlw	1
  7957  0C6A                     u207_25:
  7958  0C6A  36F1               	lsrf	___wmul@multiplier+1,f
  7959  0C6B  0CF0               	rrf	___wmul@multiplier,f
  7960  0C6C  0B89               	decfsz	9,f
  7961  0C6D  2C6A               	goto	u207_25
  7962  0C6E                     i1l2313:
  7963  0C6E  0870               	movf	___wmul@multiplier,w
  7964  0C6F  0471               	iorwf	___wmul@multiplier+1,w
  7965  0C70  1D03               	btfss	3,2
  7966  0C71  2C73               	goto	u208_21
  7967  0C72  2C74               	goto	u208_20
  7968  0C73                     u208_21:
  7969  0C73  2C5C               	goto	i1l2307
  7970  0C74                     u208_20:
  7971  0C74                     i1l2315:
  7972  0C74  0875               	movf	___wmul@product+1,w
  7973  0C75  00F1               	movwf	?___wmul+1
  7974  0C76  0874               	movf	___wmul@product,w
  7975  0C77  00F0               	movwf	?___wmul
  7976  0C78                     i1l724:
  7977  0C78  0008               	return
  7978  0C79                     __end_of___wmul:
  7979                           
  7980                           	psect	text38
  7981  0F4A                     __ptext38:	
  7982 ;; *************** function ___lldiv *****************
  7983 ;; Defined at:
  7984 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  divisor         4    6[COMMON] unsigned long 
  7987 ;;  dividend        4   10[COMMON] unsigned long 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  quotient        4    1[BANK0 ] unsigned long 
  7990 ;;  counter         1    5[BANK0 ] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  4    6[COMMON] unsigned long 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8000 ;;      Params:         8       0       0       0       0       0
  8001 ;;      Locals:         0       5       0       0       0       0
  8002 ;;      Temps:          0       1       0       0       0       0
  8003 ;;      Totals:         8       6       0       0       0       0
  8004 ;;Total ram usage:       14 bytes
  8005 ;; Hardware stack levels used: 1
  8006 ;; This function calls:
  8007 ;;		Nothing
  8008 ;; This function is called by:
  8009 ;;		_runPotScaling
  8010 ;;		_controlRoutine
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014  0F4A                     ___lldiv:	
  8015                           ;psect for function ___lldiv
  8016                           
  8017  0F4A                     i1l2319:	
  8018                           ;incstack = 0
  8019                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8020                           
  8021  0F4A  3000               	movlw	0
  8022  0F4B  0020               	movlb	0	; select bank0
  8023  0F4C  00A4               	movwf	___lldiv@quotient+3
  8024  0F4D  3000               	movlw	0
  8025  0F4E  00A3               	movwf	___lldiv@quotient+2
  8026  0F4F  3000               	movlw	0
  8027  0F50  00A2               	movwf	___lldiv@quotient+1
  8028  0F51  3000               	movlw	0
  8029  0F52  00A1               	movwf	___lldiv@quotient
  8030  0F53  0879               	movf	___lldiv@divisor+3,w
  8031  0F54  0478               	iorwf	___lldiv@divisor+2,w
  8032  0F55  0477               	iorwf	___lldiv@divisor+1,w
  8033  0F56  0476               	iorwf	___lldiv@divisor,w
  8034  0F57  1903               	skipnz
  8035  0F58  2F5A               	goto	u209_21
  8036  0F59  2F5B               	goto	u209_20
  8037  0F5A                     u209_21:
  8038  0F5A  2F9C               	goto	i1l2339
  8039  0F5B                     u209_20:
  8040  0F5B                     i1l2321:
  8041  0F5B  01A5               	clrf	___lldiv@counter
  8042  0F5C  0AA5               	incf	___lldiv@counter,f
  8043  0F5D  2F69               	goto	i1l2325
  8044  0F5E                     i1l2323:
  8045  0F5E  3001               	movlw	1
  8046  0F5F                     u210_25:
  8047  0F5F  35F6               	lslf	___lldiv@divisor,f
  8048  0F60  0DF7               	rlf	___lldiv@divisor+1,f
  8049  0F61  0DF8               	rlf	___lldiv@divisor+2,f
  8050  0F62  0DF9               	rlf	___lldiv@divisor+3,f
  8051  0F63  0B89               	decfsz	9,f
  8052  0F64  2F5F               	goto	u210_25
  8053  0F65  3001               	movlw	1
  8054  0F66  00A0               	movwf	??___lldiv
  8055  0F67  0820               	movf	??___lldiv,w
  8056  0F68  07A5               	addwf	___lldiv@counter,f
  8057  0F69                     i1l2325:
  8058  0F69  1FF9               	btfss	___lldiv@divisor+3,7
  8059  0F6A  2F6C               	goto	u211_21
  8060  0F6B  2F6D               	goto	u211_20
  8061  0F6C                     u211_21:
  8062  0F6C  2F5E               	goto	i1l2323
  8063  0F6D                     u211_20:
  8064  0F6D                     i1l2327:
  8065  0F6D  3001               	movlw	1
  8066  0F6E                     u212_25:
  8067  0F6E  35A1               	lslf	___lldiv@quotient,f
  8068  0F6F  0DA2               	rlf	___lldiv@quotient+1,f
  8069  0F70  0DA3               	rlf	___lldiv@quotient+2,f
  8070  0F71  0DA4               	rlf	___lldiv@quotient+3,f
  8071  0F72  0B89               	decfsz	9,f
  8072  0F73  2F6E               	goto	u212_25
  8073  0F74                     i1l2329:
  8074  0F74  0879               	movf	___lldiv@divisor+3,w
  8075  0F75  027D               	subwf	___lldiv@dividend+3,w
  8076  0F76  1D03               	skipz
  8077  0F77  2F82               	goto	u213_25
  8078  0F78  0878               	movf	___lldiv@divisor+2,w
  8079  0F79  027C               	subwf	___lldiv@dividend+2,w
  8080  0F7A  1D03               	skipz
  8081  0F7B  2F82               	goto	u213_25
  8082  0F7C  0877               	movf	___lldiv@divisor+1,w
  8083  0F7D  027B               	subwf	___lldiv@dividend+1,w
  8084  0F7E  1D03               	skipz
  8085  0F7F  2F82               	goto	u213_25
  8086  0F80  0876               	movf	___lldiv@divisor,w
  8087  0F81  027A               	subwf	___lldiv@dividend,w
  8088  0F82                     u213_25:
  8089  0F82  1C03               	skipc
  8090  0F83  2F85               	goto	u213_21
  8091  0F84  2F86               	goto	u213_20
  8092  0F85                     u213_21:
  8093  0F85  2F8F               	goto	i1l2335
  8094  0F86                     u213_20:
  8095  0F86                     i1l2331:
  8096  0F86  0876               	movf	___lldiv@divisor,w
  8097  0F87  02FA               	subwf	___lldiv@dividend,f
  8098  0F88  0877               	movf	___lldiv@divisor+1,w
  8099  0F89  3BFB               	subwfb	___lldiv@dividend+1,f
  8100  0F8A  0878               	movf	___lldiv@divisor+2,w
  8101  0F8B  3BFC               	subwfb	___lldiv@dividend+2,f
  8102  0F8C  0879               	movf	___lldiv@divisor+3,w
  8103  0F8D  3BFD               	subwfb	___lldiv@dividend+3,f
  8104  0F8E                     i1l2333:
  8105  0F8E  1421               	bsf	___lldiv@quotient,0
  8106  0F8F                     i1l2335:
  8107  0F8F  3001               	movlw	1
  8108  0F90                     u214_25:
  8109  0F90  36F9               	lsrf	___lldiv@divisor+3,f
  8110  0F91  0CF8               	rrf	___lldiv@divisor+2,f
  8111  0F92  0CF7               	rrf	___lldiv@divisor+1,f
  8112  0F93  0CF6               	rrf	___lldiv@divisor,f
  8113  0F94  0B89               	decfsz	9,f
  8114  0F95  2F90               	goto	u214_25
  8115  0F96                     i1l2337:
  8116  0F96  3001               	movlw	1
  8117  0F97  02A5               	subwf	___lldiv@counter,f
  8118  0F98  1D03               	btfss	3,2
  8119  0F99  2F9B               	goto	u215_21
  8120  0F9A  2F9C               	goto	u215_20
  8121  0F9B                     u215_21:
  8122  0F9B  2F6D               	goto	i1l2327
  8123  0F9C                     u215_20:
  8124  0F9C                     i1l2339:
  8125  0F9C  0824               	movf	___lldiv@quotient+3,w
  8126  0F9D  00F9               	movwf	?___lldiv+3
  8127  0F9E  0823               	movf	___lldiv@quotient+2,w
  8128  0F9F  00F8               	movwf	?___lldiv+2
  8129  0FA0  0822               	movf	___lldiv@quotient+1,w
  8130  0FA1  00F7               	movwf	?___lldiv+1
  8131  0FA2  0821               	movf	___lldiv@quotient,w
  8132  0FA3  00F6               	movwf	?___lldiv
  8133  0FA4                     i1l758:
  8134  0FA4  0008               	return
  8135  0FA5                     __end_of___lldiv:
  8136  007E                     btemp	set	126	;btemp
  8137  007E                     int$flags	set	126
  8138  007E                     wtemp0	set	126
  8139                           
  8140                           	psect	idloc
  8141                           
  8142                           ;Config register IDLOC0 @ 0x8000
  8143                           ;	unspecified, using default values
  8144  8000                     	org	32768
  8145  8000  3FFF               	dw	16383
  8146                           
  8147                           ;Config register IDLOC1 @ 0x8001
  8148                           ;	unspecified, using default values
  8149  8001                     	org	32769
  8150  8001  3FFF               	dw	16383
  8151                           
  8152                           ;Config register IDLOC2 @ 0x8002
  8153                           ;	unspecified, using default values
  8154  8002                     	org	32770
  8155  8002  3FFF               	dw	16383
  8156                           
  8157                           ;Config register IDLOC3 @ 0x8003
  8158                           ;	unspecified, using default values
  8159  8003                     	org	32771
  8160  8003  3FFF               	dw	16383
  8161                           
  8162                           	psect	config
  8163                           
  8164                           ;Config register CONFIG1 @ 0x8007
  8165                           ;	Oscillator Selection
  8166                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8167                           ;	Watchdog Timer Enable
  8168                           ;	WDTE = OFF, WDT disabled
  8169                           ;	Power-up Timer Enable
  8170                           ;	PWRTE = OFF, PWRT disabled
  8171                           ;	MCLR Pin Function Select
  8172                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8173                           ;	Flash Program Memory Code Protection
  8174                           ;	CP = OFF, Program memory code protection is disabled
  8175                           ;	Data Memory Code Protection
  8176                           ;	CPD = OFF, Data memory code protection is disabled
  8177                           ;	Brown-out Reset Enable
  8178                           ;	BOREN = ON, Brown-out Reset enabled
  8179                           ;	Clock Out Enable
  8180                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8181                           ;	Internal/External Switchover
  8182                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8183                           ;	Fail-Safe Clock Monitor Enable
  8184                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8185  8007                     	org	32775
  8186  8007  0FA4               	dw	4004
  8187                           
  8188                           ;Config register CONFIG2 @ 0x8008
  8189                           ;	Flash Memory Self-Write Protection
  8190                           ;	WRT = OFF, Write protection off
  8191                           ;	PLL Enable
  8192                           ;	PLLEN = OFF, 4x PLL disabled
  8193                           ;	Stack Overflow/Underflow Reset Enable
  8194                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8195                           ;	Brown-out Reset Voltage Selection
  8196                           ;	BORV = 0x1, unprogrammed default
  8197                           ;	Low-Voltage Programming Enable
  8198                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8199  8008                     	org	32776
  8200  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      79
    BANK1            80     13      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                _transToInitialising
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToInitialising                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    8949
                                             62 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    2564
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      12    12      0    3594
                                             50 BANK0     12    12      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    1444
                                             16 BANK0     34    34      0
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     715
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     548
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToInitialising
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Aug 14 17:15:52 2023

              ??_transToInitialising 00D2                  ___wmul@multiplicand 0072  
                                l120 0D7D                                  l201 0BDA  
                                l320 06D5                                  l234 0BBE  
                                l306 060F                                  l243 0675  
                                l139 0599                                  l238 0637  
                                l430 0C59                                  l326 0E4B  
                                l174 0C3C                                  l512 0C98  
                                l534 0C06                                  l358 0BEC  
                                l560 07FF                                  l563 0BB8  
                                l566 0BD2                                  l569 0BCB  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C07                                  wreg 0009  
                __end_ofi1_writeGPIO 0735                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D3                           i1_readGPIO 0DBB  
                               ?_abs 0070                                 l2031 0678  
                               l2201 0641                                 l2041 068B  
                               l2033 0679                                 l2203 0659  
                               l2051 06B1                                 l2043 068C  
                               l2035 067F                                 l2205 065E  
                               l2053 06B6                                 l2045 0691  
                               l2037 0684                                 l2151 059C  
                               l2055 06BB                                 l2047 0696  
                               l2039 0687                                 l2161 05AF  
                               l2153 059D                                 l2057 06C8  
                               l2049 06A3                                 l2171 05E0  
                               l2163 05B0                                 l2155 05A3  
                               l2181 0615                                 l2173 05E5  
                               l2165 05B5                                 l2157 05A8  
                               l2191 0628                                 l2183 061B  
                               l2175 05EA                                 l2167 05BA  
                               l2159 05AB                                 l2193 062E  
                               l2185 061F                                 l2177 0603  
                               l2169 05D3                                 l2601 0554  
                               l2195 0633                                 l2187 0620  
                               l2179 0612                                 l2283 0BF9  
                               l2611 0565                                 l2603 0556  
                               l2197 0635                                 l2189 0622  
                               l2285 0BFF                                 l2605 0557  
                               l2701 0BCC                                 l2199 063C  
                               l2607 0560                                 l2551 04DB  
                               l2615 056E                                 l2631 0C2A  
                               l2623 0C21                                 l2703 0BC5  
                               l2543 07FD                                 l2609 0564  
                               l2561 04F6                                 l2553 04E4  
                               l2545 04D7                                 l2641 0C34  
                               l2633 0C2C                                 l2625 0C24  
                               l2705 0BB5                                 l2651 0BB9  
                               l2571 050E                                 l2563 04F7  
                               l2555 04E8                                 l2547 04D8  
                               l2643 0C35                                 l2635 0C2D  
                               l2627 0C26                                 l2653 0C79  
                               l2661 0E04                                 l2581 0521  
                               l2573 0512                                 l2565 0500  
                               l2557 04E9                                 l2549 04DA  
                               l2645 0C37                                 l2637 0C30  
                               l2629 0C28                                 l2741 0D48  
                               l2655 0BE4                                 l2671 0E17  
                               l2663 0E05                                 l2591 053C  
                               l2583 052A                                 l2575 0513  
                               l2567 0504                                 l2559 04F2  
                               l2639 0C32                                 l2647 0BD3  
                               l2751 0D58                                 l2743 0D4B  
                               l2657 0C3D                                 l2673 0E18  
                               l2665 0E0B                                 l2593 053D  
                               l2585 052E                                 l2577 051C  
                               l2569 0505                                 l2649 0BD8  
                               l2761 0D6D                                 l2753 0D5B  
                               l2745 0D4F                                 l2659 0C48  
                               l2691 0E48                                 l2675 0E1D  
                               l2667 0E10                                 l2835 0576  
                               l2595 0546                                 l2587 052F  
                               l2579 0520                                 l2763 0D6D  
                               l2755 0D5E                                 l2747 0D52  
                               l2677 0E23                                 l2685 0E31  
                               l2669 0E13                                 l2597 054A  
                               l2589 0538                                 l2765 0D76  
                               l2757 0D61                                 l2749 0D55  
                               l2687 0E36                                 l2679 0E2F  
                               l2599 054B                                 l2759 0D67  
                               l2689 0E3C                                 l2697 0E4A  
                               l2769 0D7A                                 STR_1 07EB  
                               u1410 06B6                                 u1411 06B5  
                               u1420 06BB                                 u1404 06A8  
                               u1421 06BA                                 u1405 06A7  
                               _LATA 010C                                 _LATB 010D  
                               u1360 067F                                 u1361 067E  
                               u1434 06C0                                 u1370 0691  
                               u1435 06BF                                 u1371 0690  
                               u1700 05E5                                 u1444 06CD  
                               u1380 0696                                 u1701 05E4  
                               u1445 06CC                                 u1381 0695  
                               u1710 05EA                                 u1711 05E9  
                               u1640 05A3                                 u2504 0E41  
                               u1641 05A2                                 u2505 0E40  
                               u1650 05B5                                 u1394 069B  
                               u1651 05B4                                 u1395 069A  
                               u1820 065E                                 u1804 0646  
                               u1724 05EF                                 u1660 05BA  
                               u2460 0E0B                                 u1821 065D  
                               u1805 0645                                 u1725 05EE  
                               u1661 05B9                                 u2461 0E0A  
                               u1814 0651                                 u1750 061B  
                               u1734 05FA                                 u2470 0E1D  
                               u1815 0650                                 u1751 061A  
                               u1735 05F9                                 u2471 0E1C  
                               u1760 0628                                 u1744 0608  
                               u1761 0627                                 u1745 0607  
                               u1834 0663                                 u1770 062E  
                               u1674 05BF                                 u2490 0E36  
                               u1835 0662                                 u1771 062D  
                               u1675 05BE                                 u2491 0E35  
                               u1844 066E                                 u1780 063C  
                               u1684 05CA                                 u2484 0E28  
                               u1845 066D                                 u1781 063B  
                               u1685 05C9                                 u2485 0E27  
                               u1790 0641                                 u1694 05D8  
                               u2590 0D76                                 u1791 0640  
                               u1695 05D7                                 u2591 0D75  
          _transToVoltageModeControl 0BCC                      _filteredFreqPot 00AE  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0D48                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0086            ??_setupInternalOscillator 00D2  
                              ??_abs 0072                                ?_main 00DB  
                    __end_of___lldiv 0FA5                                i1l110 0084  
                              i1l320 0734                                i1l251 0F33  
                              i1l252 0F35                                i1l326 0E01  
                              i1l246 0EFF                                i1l255 0F49  
                              i1l247 0F12                                i1l440 0DBA  
                              i1l177 0CE7                                i1l531 0EEF  
                              i1l372 07EA                                i1l517 0D14  
                              i1l365 0FFF                                i1l437 078F  
                              i1l462 0312                                i1l454 04D4  
                              i1l534 0BF8                                i1l448 04B6  
                              i1l449 04D4                                i1l545 0CBC  
                              i1l377 03EF                                i1l722 0C64  
                              i1l379 03FE                                i1l724 0C78  
                              i1l572 0BE3                                i1l741 0E87  
                              i1l742 0E97                                i1l736 0D47  
                              i1l758 0FA4                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_754 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00D5  
                _initialiseADCModule 0BB9                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00D7                      __initialization 0088  
                       __end_of_main 0D80                    ?_initialiseADCPin 0070  
              _integratorScaledLimit 00A0                          i1_writeGPIO 06D6  
                             ??_main 00DF                   ??_initialiseADCPin 00D2  
           __end_of_readFilteredVout 0790                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00D8      __end_of_setupInternalOscillator 059A  
setupInternalOscillator@selectedFreq 00D4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2021 0D21  
                             i1l2101 0702                               i1l2023 0D29  
                             i1l2111 0DBC                               i1l2103 0710  
                             i1l2025 0D30                               i1l2017 0D15  
                             i1l2121 0DCF                               i1l2113 0DBD  
                             i1l2105 0715                               i1l2027 0D3F  
                             i1l2019 0D1D                               i1l2123 0DD0  
                             i1l2115 0DC3                               i1l2107 071A  
                             i1l2211 0EF9                               i1l2061 0D85  
                             i1l2141 0DFE                               i1l2125 0DD5  
                             i1l2117 0DC8                               i1l2301 0BDB  
                             i1l2109 0727                               i1l2221 0F17  
                             i1l2213 0EFD                               i1l1182 0C20  
                             i1l2311 0C69                               i1l2071 0C14  
                             i1l2063 0DA2                               i1l2127 0DDA  
                             i1l2135 0DE8                               i1l2119 0DCB  
                             i1l2303 0BDF                               i1l2223 0F19  
                             i1l2215 0F05                               i1l2207 0EF1  
                             u200_20 0CF3                               i1l2321 0F5B  
                             i1l2313 0C6E                               i1l2305 0C5A  
                             i1l2081 0E73                               i1l2073 0E4C  
                             i1l1185 0C20                               i1l2065 0DB6  
                             i1l2137 0DED                               i1l2129 0DE6  
                             i1l2241 0F41                               i1l2233 0F29  
                             i1l2225 0F1D                               i1l2217 0F0B  
                             i1l2209 0EF3                               i1l2331 0F86  
                             i1l2323 0F5E                               i1l2315 0C74  
                             i1l2307 0C5C                               i1l2075 0E56  
                             i1l2059 0D80                               i1l2139 0DF2  
                             i1l2147 0E00                               i1l2251 00B4  
                             i1l2091 06E6                               i1l2083 06D7  
                             i1l2243 0F42                               i1l2235 0F2D  
                             i1l2227 0F28                               i1l2219 0F10  
                             i1l2411 0EC1                               i1l2403 0E99  
                             i1l2333 0F8E                               i1l2325 0F69  
                             i1l2309 0C60                               i1l2077 0E5B  
                             i1l2069 0C07                               i1l2261 012A  
                             i1l2253 00CA                               i1l2093 06EA  
                             i1l2085 06D8                               i1l2237 0F39  
                             i1l2501 0FD2                               i1l2421 0ED6  
                             i1l2405 0EA7                               i1l2335 0F8F  
                             i1l2327 0F6D                               i1l2319 0F4A  
                             i1l2079 0E6B                               i1l2271 0217  
                             i1l2263 0185                               i1l2255 00D9  
                             i1l2095 06EB                               i1l2087 06DE  
                             i1l2343 0BED                               i1l2351 0CAC  
                             i1l2239 0F3D                               i1l2247 0F47  
                             i1l2503 0FE2                               i1l2511 0790  
                             i1l2423 0EDC                               i1l2407 0EAB  
                             u201_20 0D01                               i1l2337 0F96  
                             i1l2329 0F74                               i1l2281 030E  
                             i1l2273 0267                               i1l2265 01AF  
                             i1l2257 00E7                               u201_21 0CFF  
                             i1l2097 06F0                               i1l2089 06E3  
                             i1l2345 0BF2                               i1l2353 0CB0  
                             i1l2505 0FE6                               i1l2521 07A4  
                             i1l2417 0EC2                               i1l2409 0EB1  
                             i1l2441 0758                               i1l2433 0737  
                             i1l2361 0CC0                               i1l2339 0F9C  
                             i1l2275 0299                               i1l2267 01BF  
                             i1l2259 011B                               i1l2371 040E  
                             i1l2291 0D08                               i1l2099 06F5  
                             i1l2355 0CB4                               i1l2347 0C99  
                             i1l2507 0FEC                               i1l2523 07AA  
                             i1l2419 0ED2                               i1l2451 0772  
                             i1l2443 0761                               i1l2435 0745  
                             i1l2427 0735                               i1l2363 0CCB  
                             i1l2277 02BB                               i1l2269 01CA  
                             i1l2373 0414                               i1l2381 044F  
                             i1l2365 03FF                               i1l2293 0D0D  
                             i1l2357 0CBA                               i1l2349 0CA1  
                             i1l2533 07BD                               i1l2525 07B3  
                             i1l2517 0792                               i1l2453 0776  
                             i1l2437 0749                               i1l2461 0319  
                             i1l2279 02EC                               i1l2383 04A9  
                             i1l2375 0417                               i1l2367 0406  
                             i1l2295 0D12                               i1l2287 0CE8  
                             i1l2535 07CD                               i1l2527 07BC  
                             i1l2519 07A0                               i1l2455 077C  
                             i1l2439 074F                               i1l2471 03E1  
                             i1l2463 0323                               i1l2359 0CBD  
                             i1l2711 0021                               u202_20 0D02  
                             i1l2393 04C5                               i1l2385 04AD  
                             i1l2377 041C                               i1l2369 040C  
                             i1l2297 0D13                               i1l2289 0D06  
                             i1l2537 07D1                               i1l2449 0762  
                             i1l2473 03EB                               i1l2465 037A  
                             i1l2721 003D                               i1l2713 0024  
                             i1l2395 04CF                               i1l2387 04B1  
                             i1l2491 0FBF                               i1l2539 07D7  
                             i1l2475 03F9                               i1l2467 0387  
                             i1l2459 0313                               i1l2731 0063  
                             i1l2723 0045                               i1l2715 0029  
                             i1l2707 0006                               u210_25 0F5F  
                             i1l2389 04BA                               i1l2493 0FC8  
                             i1l2485 0FA7                               i1l2397 0E98  
                             i1l2477 03FD                               i1l2469 03B4  
                             i1l2733 006E                               i1l2725 004A  
                             i1l2717 002F                               i1l2709 001B  
                             i1l2495 0FD1                               i1l2487 0FB5  
                             i1l2479 0FA5                               i1l2735 0073  
                             i1l2727 004D                               i1l2719 0035  
                             u211_20 0F6D                               u203_20 0D0D  
                             u211_21 0F6C                               u203_21 0D0C  
                             i1l2489 0FB9                               i1l2729 0053  
                             i1l2737 0078                               i1l2739 0083  
                             u132_20 0D21                               u204_20 0D12  
                             u132_21 0D20                               u204_21 0D11  
                             u220_24 0CE7                               u212_25 0F6E  
                             u213_20 0F86                               u205_20 0C60  
                             u221_20 0406                               u213_21 0F85  
                             u205_21 0C5F                               u221_21 0405  
                             u213_25 0F82                               u133_25 0D2A  
                             u222_20 040C                               u150_20 06DE  
                             u230_20 0EE9                               u222_21 040B  
                             u150_21 06DD                               u214_25 0F90  
                             u206_25 0C65                               u134_25 0D31  
                             u230_25 0EE5                               u215_20 0F9C  
                             u135_20 0D3F                               u223_20 0414  
                             u151_20 06F0                               u231_20 074F  
                             u215_21 0F9B                               u135_21 0D3E  
                             u223_21 0413                               u151_21 06EF  
                             u231_21 074E                               u207_25 0C6A  
                             u208_20 0C74                               u160_20 0DD5  
                             u224_20 04B1                               u152_20 06F5  
                             u216_20 0CA1                               u240_20 0FBF  
                             u232_20 077C                               u208_21 0C73  
                             u160_21 0DD4                               u224_21 04B0  
                             u152_21 06F4                               u216_21 0CA0  
                             u240_21 0FBE                               u232_21 077B  
                             u209_20 0F5B                               u145_20 0DB0  
                             u225_20 04BA                               u217_20 0CAC  
                             u241_20 0FEC                               u233_20 0789  
                             u209_21 0F5A                               u225_21 04B9  
                             u217_21 0CAB                               u241_21 0FEB  
                             u161_24 0DDF                               u153_24 06FA  
                             u145_25 0DAC                               u161_25 0DDE  
                             u153_25 06F9                               u233_25 0785  
                             u146_20 0C14                               u162_20 0DED  
                             u226_20 04C4                               u218_20 0CBA  
                             u242_20 0FF9                               u234_20 0319  
                             u146_21 0C13                               u162_21 0DEC  
                             u226_21 04C3                               u218_21 0CB9  
                             u234_21 0318                               u154_24 0707  
                             u146_25 0C10                               u226_25 04C0  
                             u154_25 0706                               u242_25 0FF5  
                             u147_20 0E53                               u227_20 04CF  
                             u155_20 0715                               u243_20 07AA  
                             u235_20 0323                               u219_20 0CE5  
                             u251_20 0021                               u227_21 04CE  
                             u155_21 0714                               u243_21 07A9  
                             u235_21 0322                               u219_21 0CE2  
                             u251_21 0020                               u163_24 0DF7  
                             u163_25 0DF6                               u227_25 04CB  
                             u148_20 0E5B                               u156_20 071A  
                             u244_20 07D7                               u228_20 0EB1  
                             u236_20 0345                               u252_20 002F  
                             u148_21 0E5A                               u156_21 0719  
                             u244_21 07D6                               u228_21 0EB0  
                             u252_21 002E                               u236_25 0341  
                             u149_20 0E87                               u245_20 07E4  
                             u229_20 0EDC                               u237_20 0374  
                             u253_20 004A                               u149_21 0E86  
                             u229_21 0EDB                               u253_21 0049  
                             u157_24 071F                               u157_25 071E  
                             u245_25 07E0                               u237_25 0370  
                             u190_20 0F33                               u238_20 03EB  
                             u254_20 0053                               u190_21 0F32  
                             u238_21 03EA                               u254_21 0052  
                             u158_24 072C                               u158_25 072B  
                             u238_25 03E7                               u159_20 0DC3  
                             u191_20 0F39                               u239_20 03F9  
                             u255_20 006A                               u159_21 0DC2  
                             u191_21 0F38                               u239_21 03F8  
                             u255_21 0068                               u239_25 03F5  
                             u192_20 00CA                               u256_20 006B  
                             u192_21 00C9                               u193_20 01AF  
                             u185_20 0EF9                               u257_20 007F  
                             u193_21 01AE                               u185_21 0EF8  
                             u257_21 007D                               u193_23 01AB  
                             u194_20 01CA                               u186_20 0F05  
                             u258_20 0080                               u194_21 01C9  
                             u186_21 0F04                               u195_20 0217  
                             u187_20 0F0B                               u195_21 0216  
                             u187_21 0F0A                               u195_23 0213  
                             u196_20 0287                               u188_20 0F17  
                             u188_21 0F16                      ??_runPotScaling 0026  
                             u196_25 027E                               u197_20 02AA  
                             u197_25 02A6                               u189_25 0F20  
                             u198_20 02DA                               u198_25 02D1  
                             u199_20 0CF2                               u199_21 0CF0  
            initialiseGPIO@direction 00D2                     readGPIO@portType 00D9  
                readADCRaw@gpioValid 0077                               ___lmul 0D15  
                             ___omul 0E4C                               ___wmul 0C5A  
                          ??___lldiv 0020                     __end_of_readGPIO 0E4C  
                     _controlRoutine 03FF                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D2             _initialisePotentiometers 0BE4  
         initialiseADCPin@portNumber 00D6                     __end_of_setupPWM 0C3D  
                    _currentTripRead 0CE8           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00B0               __end_of_controlRoutine 04D5  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00D4  
              i1writeGPIO@gpioNumber 0074                        _currentILFIFO 0120  
                     _OPTION_REGbits 0095                    __end_of_Tick490Hz 0086  
              _runVoltageModeControl 00B4                           __pbssBANK0 005F  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
        __end_of_transToInitialising 0800                           __pmaintext 0D48  
                    ?_controlRoutine 0070                              ?___lmul 0070  
                            ?___omul 0020                              ?___wmul 0070  
  __end_of_transToVoltageModeControl 0BD3             ??_convertRawToMilliVolts 0020  
                         __pintentry 0004                              _CCP1CON 0293  
                ___omul@multiplicand 0028                       ___lmul@product 0078  
            __end_of_currentTripRead 0D15          __end_of_setPWMDutyandPeriod 0CE8  
   __end_of_initialiseCurrentSensors 0C99           __end_ofi1_currentTripReset 0BF9  
           initialiseADCPin@portType 00D5              _transToOverCurrentFault 0BDB  
                 i1readGPIO@portType 0077                readFilteredVout@i_835 0028  
              i1writeGPIO@portNumber 0075                           _filteredIL 00B0  
                          ?_readGPIO 0070                           _readADCRaw 0EF0  
                _readFilteredFreqPot 0790                 i1readGPIO@gpioNumber 0078  
                _readFilteredDutyPot 0FA5                            ?_setupPWM 0070  
               readADCRaw@gpioNumber 0079             initialiseGPIO@gpioNumber 00D6  
                            ___lldiv 0F4A                         ?i1_writeGPIO 0070  
               ?_readFilteredFreqPot 007A                              __ptext1 0BCC  
                            __ptext2 0BB5                              __ptext3 07FD  
                            __ptext4 0BC5                              __ptext5 0BD3  
                            __ptext6 0C21                              __ptext7 04D5  
                            __ptext8 0E02                              __ptext9 0BE4  
               ?_readFilteredDutyPot 007A         __end_of_initialiseController 0C5A  
                          _T2CONbits 001C                    ?_readFilteredVout 007A  
                            _setDuty 0063                i1writeGPIO@writeValue 0070  
             ?_runVoltageModeControl 0070                              _tripIDS 006B  
                 ??_readFilteredVout 0020                         ??i1_readGPIO 0070  
                            clrloop0 0BC0                 end_of_initialization 00B0  
    convertRawToMilliVolts@offsetted 0029                           ??_readGPIO 00D2  
                     ___omul@product 0071             ?_setupInternalOscillator 0070  
                    ___lldiv@divisor 0076                      ___lldiv@counter 0025  
                   _currentTripCount 0069                           ??_setupPWM 00D8  
                   _currentTripReset 0BF9           ??_initialisePotentiometers 00D8  
                         _prevPeriod 006D                    writeGPIO@portType 00D5  
                     _readFilteredIL 0E98                   __end_ofi1_readGPIO 0E02  
              ??_readFilteredFreqPot 0020                ??_readFilteredDutyPot 0020  
               i1readGPIO@portNumber 0076                     ?_currentTripRead 0070  
                  __end_of_writeGPIO 06D6            ??_transToOverCurrentFault 0070  
           initialiseGPIO@portNumber 00D7                         _filteredVout 005F  
        ??_transToCurrentModeControl 00D2                          ?_readADCRaw 0070  
                  _transToPotControl 0BB5                          _CCP1CONbits 0293  
                      readGPIO@readA 00D4                        readGPIO@readB 00D6  
              __end_of_runPotScaling 03FF                   ?_transToPotControl 0070  
          ?_initialiseCurrentSensors 0070                 _voltageModeVariables 00B6  
             __end_of_readFilteredIL 0EF0                  ??_transToPotControl 00D2  
                     __end_of___lmul 0D48          __end_of_initialiseADCModule 0BBF  
                     __end_of___omul 0E98                controlRoutine@maxDuty 0058  
                     __end_of___wmul 0C79                controlRoutine@minDuty 005A  
                     _clockFrequency 00A8                  start_initialization 0088  
       __end_of_setupTimer0Interrupt 0BDB                       _currentIDSFIFO 0140  
                        __end_of_abs 0C21                            _Tick490Hz 0004  
             _convertRawToMilliVolts 0D80            __end_of_transToPotControl 0BB9  
   convertRawToMilliVolts@vsenseMult 0025                     ??_controlRoutine 0052  
                  ___omul@multiplier 0020      __end_of_transToOverCurrentFault 0BE4  
         __end_of_currentTripMonitor 0CBD                 _initialiseController 0C3D  
                        _APFCON0bits 011D                             ??___lmul 0078  
                           ??___omul 0070                             ??___wmul 0074  
                    ?_readFilteredIL 0070            _transToCurrentModeControl 0BC5  
                          ___latbits 0001                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D2                           ?_Tick490Hz 0070  
                   _initialiseADCPin 0610                         _currentState 006C  
                 i1_currentTripReset 0BED                   readGPIO@gpioNumber 00DA  
              ?_initialiseController 0070                       _initialiseGPIO 059A  
                    i1readGPIO@readA 0072                      i1readGPIO@readB 0074  
   __end_of_initialisePotentiometers 0BED                  ?i1_currentTripReset 0070  
                           ?___lldiv 0076           ?_transToVoltageModeControl 0070  
    runVoltageModeControl@newVoltage 0050        runVoltageModeControl@propMult 0048  
            ??_runVoltageModeControl 0030                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0C07      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 0610  
                          clear_ram0 0BBF                            _setPeriod 006E  
                           _PIE1bits 0091         setPWMDutyandPeriod@dutyCycle 0070  
               _setupTimer0Interrupt 0BD3    runVoltageModeControl@integralMult 0040  
                _currentTripRead$917 007A                          _filteredIDS 00B2  
                         _ADCON0bits 009D                    ___wmul@multiplier 0070  
                 readGPIO@portNumber 00D8                          _freqPotFIFO 01A0  
                          _writeGPIO 0676                          ??_Tick490Hz 005E  
                  ___lmul@multiplier 0070                         ??_readADCRaw 0072  
             ??_initialiseController 00D8                      ?_initialiseGPIO 00D2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
              ?_setupTimer0Interrupt 0070          __end_of_readFilteredFreqPot 07EB  
        __end_of_readFilteredDutyPot 1000                 runPotScaling@maxDuty 002E  
               runPotScaling@minDuty 0030                  writeGPIO@gpioNumber 00D6  
convertRawToMilliVolts@returnValuedV 002B                   __end_of_readADCRaw 0F4A  
           readFilteredFreqPot@i_758 0028              ?_convertRawToMilliVolts 007C  
                         ?_writeGPIO 00D2                             __ptext10 0C79  
                           __ptext11 0BF9                             __ptext20 0735  
                           __ptext12 0676                             __ptext21 0E98  
                           __ptext13 0C3D                             __ptext30 03FF  
                           __ptext22 0790                             __ptext14 059A  
                           __ptext31 00B4                             __ptext23 0FA5  
                           __ptext15 0610                             __ptext32 0DBB  
                           __ptext24 0EF0                             __ptext16 0BB9  
                           __ptext33 0D80                             __ptext25 0C99  
                           __ptext34 0D15                             __ptext26 0BED  
                           __ptext18 0CBD                             __ptext35 0C07  
                           __ptext27 06D6                             __ptext19 0313  
                           __ptext36 0E4C                             __ptext28 0BDB  
                           __ptext37 0C5A                             __ptext29 0CE8  
                           __ptext38 0F4A            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0E02  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00B4                             _setupPWM 0C21  
                           int$flags 007E                             _slotTest 0065  
           __end_of_initialiseADCPin 0676                             main@argc 00DB  
           ?_transToOverCurrentFault 0070                             main@argv 00DD  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                 _currentTripMonitor 0C99                     _timerSlotQuarter 0066  
     __end_of_convertRawToMilliVolts 0DBB                           _INTCONbits 000B  
                ?_currentTripMonitor 0070    __end_of_transToCurrentModeControl 0BCC  
                _transToInitialising 07FD                  writeGPIO@portNumber 00D7  
                           intlevel1 0000             _initialiseCurrentSensors 0C79  
                   ___lldiv@dividend 007A               i1readGPIO@returnValueA 0073  
             i1readGPIO@returnValueB 0075                     _readFilteredVout 0735  
             ??_setupTimer0Interrupt 00D2                           _OSCCONbits 0099  
        controlRoutine@setDuty_unreg 005C                 ??_currentTripMonitor 007B  
                        _potSetCount 0068                 ?_transToInitialising 0070  
                _setPWMDutyandPeriod 0CBD              _setupInternalOscillator 04D5  
        ??_transToVoltageModeControl 00D2                        ??i1_writeGPIO 0071  
                      __pstringtext1 07EB                        __pstringtext2 0000  
                         _OPTION_REG 0095                     ___lldiv@quotient 0021  
      __end_of_runVoltageModeControl 0313                  writeGPIO@writeValue 00D2  
                        ??_writeGPIO 00D3                 ?_setPWMDutyandPeriod 0070  
                  ?_currentTripReset 0070                   ??_currentTripReset 00D8  
              readADCRaw@returnValue 0074                    ??_currentTripRead 0079  
                      _runPotScaling 0313                 readGPIO@returnValueA 00D5  
               readGPIO@returnValueB 00D7                  readFilteredIL@i_925 007A  
                    readFilteredIL@i 007B  
