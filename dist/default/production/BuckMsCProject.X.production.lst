

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Sep 22 22:07:14 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.40
    60                           ; Generated 17/11/2021 GMT
    61                           ; 
    62                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F1827 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019C                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0212                     	;# 
   183  0213                     	;# 
   184  0213                     	;# 
   185  0214                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0219                     	;# 
   195  021A                     	;# 
   196  021B                     	;# 
   197  021C                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029E                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0318                     	;# 
   224  0318                     	;# 
   225  0319                     	;# 
   226  031A                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0415                     	;# 
   236  0416                     	;# 
   237  0417                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0094                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  0111                     	;# 
   301  0112                     	;# 
   302  0113                     	;# 
   303  0114                     	;# 
   304  0115                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011D                     	;# 
   312  011E                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0219                     	;# 
   353  021A                     	;# 
   354  021B                     	;# 
   355  021C                     	;# 
   356  021D                     	;# 
   357  021E                     	;# 
   358  021F                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029E                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0318                     	;# 
   382  0318                     	;# 
   383  0319                     	;# 
   384  031A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  039A                     	;# 
   389  039C                     	;# 
   390  039D                     	;# 
   391  039E                     	;# 
   392  039F                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  041C                     	;# 
   397  041D                     	;# 
   398  041E                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011E                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0219                     	;# 
   511  021A                     	;# 
   512  021B                     	;# 
   513  021C                     	;# 
   514  021D                     	;# 
   515  021E                     	;# 
   516  021F                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0294                     	;# 
   522  0295                     	;# 
   523  0295                     	;# 
   524  0296                     	;# 
   525  0298                     	;# 
   526  0298                     	;# 
   527  0299                     	;# 
   528  029A                     	;# 
   529  029B                     	;# 
   530  029C                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  029E                     	;# 
   535  0311                     	;# 
   536  0311                     	;# 
   537  0312                     	;# 
   538  0313                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011D                     	;# 
   628  011E                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0219                     	;# 
   669  021A                     	;# 
   670  021B                     	;# 
   671  021C                     	;# 
   672  021D                     	;# 
   673  021E                     	;# 
   674  021F                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0294                     	;# 
   680  0295                     	;# 
   681  0295                     	;# 
   682  0296                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029B                     	;# 
   688  029C                     	;# 
   689  029C                     	;# 
   690  029D                     	;# 
   691  029E                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0415                     	;# 
   710  0416                     	;# 
   711  0417                     	;# 
   712  041C                     	;# 
   713  041D                     	;# 
   714  041E                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0013                     	;# 
   743  0014                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  001E                     	;# 
   754  001F                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0219                     	;# 
   827  021A                     	;# 
   828  021B                     	;# 
   829  021C                     	;# 
   830  021D                     	;# 
   831  021E                     	;# 
   832  021F                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0295                     	;# 
   840  0296                     	;# 
   841  0298                     	;# 
   842  0298                     	;# 
   843  0299                     	;# 
   844  029A                     	;# 
   845  029B                     	;# 
   846  029C                     	;# 
   847  029C                     	;# 
   848  029D                     	;# 
   849  029E                     	;# 
   850  029E                     	;# 
   851  0311                     	;# 
   852  0311                     	;# 
   853  0312                     	;# 
   854  0313                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0013                     	;# 
   901  0014                     	;# 
   902  0015                     	;# 
   903  0016                     	;# 
   904  0016                     	;# 
   905  0017                     	;# 
   906  0018                     	;# 
   907  0019                     	;# 
   908  001A                     	;# 
   909  001B                     	;# 
   910  001C                     	;# 
   911  001E                     	;# 
   912  001F                     	;# 
   913  008C                     	;# 
   914  008D                     	;# 
   915  0091                     	;# 
   916  0092                     	;# 
   917  0093                     	;# 
   918  0094                     	;# 
   919  0095                     	;# 
   920  0096                     	;# 
   921  0097                     	;# 
   922  0098                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  0111                     	;# 
   933  0112                     	;# 
   934  0113                     	;# 
   935  0114                     	;# 
   936  0115                     	;# 
   937  0116                     	;# 
   938  0117                     	;# 
   939  0118                     	;# 
   940  0119                     	;# 
   941  011A                     	;# 
   942  011B                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019C                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019F                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  0211                     	;# 
   970  0211                     	;# 
   971  0212                     	;# 
   972  0212                     	;# 
   973  0213                     	;# 
   974  0213                     	;# 
   975  0214                     	;# 
   976  0214                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0216                     	;# 
   981  0216                     	;# 
   982  0217                     	;# 
   983  0217                     	;# 
   984  0219                     	;# 
   985  021A                     	;# 
   986  021B                     	;# 
   987  021C                     	;# 
   988  021D                     	;# 
   989  021E                     	;# 
   990  021F                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  039A                     	;# 
  1021  039C                     	;# 
  1022  039D                     	;# 
  1023  039E                     	;# 
  1024  039F                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  041C                     	;# 
  1029  041D                     	;# 
  1030  041E                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0094                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011A                     	;# 
  1100  011B                     	;# 
  1101  011D                     	;# 
  1102  011E                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0219                     	;# 
  1143  021A                     	;# 
  1144  021B                     	;# 
  1145  021C                     	;# 
  1146  021D                     	;# 
  1147  021E                     	;# 
  1148  021F                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  029B                     	;# 
  1162  029C                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  029E                     	;# 
  1167  0311                     	;# 
  1168  0311                     	;# 
  1169  0312                     	;# 
  1170  0313                     	;# 
  1171  0318                     	;# 
  1172  0318                     	;# 
  1173  0319                     	;# 
  1174  031A                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  041C                     	;# 
  1187  041D                     	;# 
  1188  041E                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  0011                     	;# 
  1215  0012                     	;# 
  1216  0013                     	;# 
  1217  0014                     	;# 
  1218  0015                     	;# 
  1219  0016                     	;# 
  1220  0016                     	;# 
  1221  0017                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  001B                     	;# 
  1226  001C                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  0091                     	;# 
  1232  0092                     	;# 
  1233  0093                     	;# 
  1234  0094                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  0111                     	;# 
  1249  0112                     	;# 
  1250  0113                     	;# 
  1251  0114                     	;# 
  1252  0115                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0118                     	;# 
  1256  0119                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011D                     	;# 
  1260  011E                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  0191                     	;# 
  1264  0191                     	;# 
  1265  0192                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019D                     	;# 
  1281  019E                     	;# 
  1282  019F                     	;# 
  1283  020C                     	;# 
  1284  020D                     	;# 
  1285  0211                     	;# 
  1286  0211                     	;# 
  1287  0212                     	;# 
  1288  0212                     	;# 
  1289  0213                     	;# 
  1290  0213                     	;# 
  1291  0214                     	;# 
  1292  0214                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0216                     	;# 
  1297  0216                     	;# 
  1298  0217                     	;# 
  1299  0217                     	;# 
  1300  0219                     	;# 
  1301  021A                     	;# 
  1302  021B                     	;# 
  1303  021C                     	;# 
  1304  021D                     	;# 
  1305  021E                     	;# 
  1306  021F                     	;# 
  1307  0291                     	;# 
  1308  0291                     	;# 
  1309  0292                     	;# 
  1310  0293                     	;# 
  1311  0294                     	;# 
  1312  0295                     	;# 
  1313  0295                     	;# 
  1314  0296                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029B                     	;# 
  1320  029C                     	;# 
  1321  029C                     	;# 
  1322  029D                     	;# 
  1323  029E                     	;# 
  1324  029E                     	;# 
  1325  0311                     	;# 
  1326  0311                     	;# 
  1327  0312                     	;# 
  1328  0313                     	;# 
  1329  0318                     	;# 
  1330  0318                     	;# 
  1331  0319                     	;# 
  1332  031A                     	;# 
  1333  0394                     	;# 
  1334  0395                     	;# 
  1335  0396                     	;# 
  1336  039A                     	;# 
  1337  039C                     	;# 
  1338  039D                     	;# 
  1339  039E                     	;# 
  1340  039F                     	;# 
  1341  0415                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  041C                     	;# 
  1345  041D                     	;# 
  1346  041E                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0013                     	;# 
  1375  0014                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008D                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0094                     	;# 
  1393  0095                     	;# 
  1394  0096                     	;# 
  1395  0097                     	;# 
  1396  0098                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  0111                     	;# 
  1407  0112                     	;# 
  1408  0113                     	;# 
  1409  0114                     	;# 
  1410  0115                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  0118                     	;# 
  1414  0119                     	;# 
  1415  011A                     	;# 
  1416  011B                     	;# 
  1417  011D                     	;# 
  1418  011E                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0193                     	;# 
  1427  0194                     	;# 
  1428  0195                     	;# 
  1429  0196                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0219                     	;# 
  1459  021A                     	;# 
  1460  021B                     	;# 
  1461  021C                     	;# 
  1462  021D                     	;# 
  1463  021E                     	;# 
  1464  021F                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0294                     	;# 
  1470  0295                     	;# 
  1471  0295                     	;# 
  1472  0296                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  029B                     	;# 
  1478  029C                     	;# 
  1479  029C                     	;# 
  1480  029D                     	;# 
  1481  029E                     	;# 
  1482  029E                     	;# 
  1483  0311                     	;# 
  1484  0311                     	;# 
  1485  0312                     	;# 
  1486  0313                     	;# 
  1487  0318                     	;# 
  1488  0318                     	;# 
  1489  0319                     	;# 
  1490  031A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  039A                     	;# 
  1495  039C                     	;# 
  1496  039D                     	;# 
  1497  039E                     	;# 
  1498  039F                     	;# 
  1499  0415                     	;# 
  1500  0416                     	;# 
  1501  0417                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  0011                     	;# 
  1531  0012                     	;# 
  1532  0013                     	;# 
  1533  0014                     	;# 
  1534  0015                     	;# 
  1535  0016                     	;# 
  1536  0016                     	;# 
  1537  0017                     	;# 
  1538  0018                     	;# 
  1539  0019                     	;# 
  1540  001A                     	;# 
  1541  001B                     	;# 
  1542  001C                     	;# 
  1543  001E                     	;# 
  1544  001F                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0098                     	;# 
  1555  0099                     	;# 
  1556  009A                     	;# 
  1557  009B                     	;# 
  1558  009B                     	;# 
  1559  009C                     	;# 
  1560  009D                     	;# 
  1561  009E                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  0111                     	;# 
  1565  0112                     	;# 
  1566  0113                     	;# 
  1567  0114                     	;# 
  1568  0115                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  0118                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011B                     	;# 
  1575  011D                     	;# 
  1576  011E                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  0191                     	;# 
  1580  0191                     	;# 
  1581  0192                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0199                     	;# 
  1589  019A                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  020C                     	;# 
  1600  020D                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0216                     	;# 
  1613  0216                     	;# 
  1614  0217                     	;# 
  1615  0217                     	;# 
  1616  0219                     	;# 
  1617  021A                     	;# 
  1618  021B                     	;# 
  1619  021C                     	;# 
  1620  021D                     	;# 
  1621  021E                     	;# 
  1622  021F                     	;# 
  1623  0291                     	;# 
  1624  0291                     	;# 
  1625  0292                     	;# 
  1626  0293                     	;# 
  1627  0294                     	;# 
  1628  0295                     	;# 
  1629  0295                     	;# 
  1630  0296                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  029B                     	;# 
  1636  029C                     	;# 
  1637  029C                     	;# 
  1638  029D                     	;# 
  1639  029E                     	;# 
  1640  029E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0318                     	;# 
  1646  0318                     	;# 
  1647  0319                     	;# 
  1648  031A                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  039A                     	;# 
  1653  039C                     	;# 
  1654  039D                     	;# 
  1655  039E                     	;# 
  1656  039F                     	;# 
  1657  0415                     	;# 
  1658  0416                     	;# 
  1659  0417                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  000D                     _PORTB	set	13
  1675  000C                     _PORTA	set	12
  1676  001C                     _T2CONbits	set	28
  1677  001B                     _PR2	set	27
  1678  000B                     _INTCONbits	set	11
  1679  009B                     _ADRESL	set	155
  1680  009C                     _ADRESH	set	156
  1681  009D                     _ADCON0bits	set	157
  1682  008D                     _TRISB	set	141
  1683  008C                     _TRISA	set	140
  1684  009E                     _ADCON1	set	158
  1685  009D                     _ADCON0	set	157
  1686  0095                     _OPTION_REG	set	149
  1687  0095                     _OPTION_REGbits	set	149
  1688  0091                     _PIE1bits	set	145
  1689  0099                     _OSCCONbits	set	153
  1690  010D                     _LATB	set	269
  1691  010C                     _LATA	set	268
  1692  011D                     _APFCON0bits	set	285
  1693  018D                     _ANSELB	set	397
  1694  018C                     _ANSELA	set	396
  1695  0293                     _CCP1CONbits	set	659
  1696  0296                     _PSTR1CONbits	set	662
  1697  0291                     _CCPR1L	set	657
  1698  0293                     _CCP1CON	set	659
  1699                           
  1700                           	psect	stringtext1
  1701  0800                     __pstringtext1:
  1702  0800                     STR_1:
  1703  0800  3428               	retlw	40	;'('
  1704  0801  3428               	retlw	40	;'('
  1705  0802  3449               	retlw	73	;'I'
  1706  0803  344E               	retlw	78	;'N'
  1707  0804  3454               	retlw	84	;'T'
  1708  0805  3443               	retlw	67	;'C'
  1709  0806  344F               	retlw	79	;'O'
  1710  0807  344E               	retlw	78	;'N'
  1711  0808  3429               	retlw	41	;')'
  1712  0809  3426               	retlw	38	;'&'
  1713  080A  3430               	retlw	48	;'0'
  1714  080B  3437               	retlw	55	;'7'
  1715  080C  3446               	retlw	70	;'F'
  1716  080D  3468               	retlw	104	;'h'
  1717  080E  3429               	retlw	41	;')'
  1718  080F  342C               	retlw	44	;','
  1719  0810  3432               	retlw	50	;'2'
  1720  0811  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext2
  1723  0000                     __pstringtext2:
  1724  0800                     
  1725                           	psect	cinit
  1726  0088                     start_initialization:	
  1727                           ; #config settings
  1728                           
  1729  0088                     __initialization:
  1730                           
  1731                           ; Clear objects allocated to BANK0
  1732  0088  305F               	movlw	low __pbssBANK0
  1733  0089  0084               	movwf	4
  1734  008A  3000               	movlw	high __pbssBANK0
  1735  008B  0085               	movwf	5
  1736  008C  3010               	movlw	16
  1737  008D  318B  2383  3180   	fcall	clear_ram0
  1738                           
  1739                           ; Clear objects allocated to BANK1
  1740  0090  30A0               	movlw	low __pbssBANK1
  1741  0091  0084               	movwf	4
  1742  0092  3000               	movlw	high __pbssBANK1
  1743  0093  0085               	movwf	5
  1744  0094  3032               	movlw	50
  1745  0095  318B  2383  3180   	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK2
  1748  0098  3020               	movlw	low __pbssBANK2
  1749  0099  0084               	movwf	4
  1750  009A  3001               	movlw	high __pbssBANK2
  1751  009B  0085               	movwf	5
  1752  009C  3040               	movlw	64
  1753  009D  318B  2383  3180   	fcall	clear_ram0
  1754                           
  1755                           ; Clear objects allocated to BANK3
  1756  00A0  30A0               	movlw	low __pbssBANK3
  1757  00A1  0084               	movwf	4
  1758  00A2  3001               	movlw	high __pbssBANK3
  1759  00A3  0085               	movwf	5
  1760  00A4  3040               	movlw	64
  1761  00A5  318B  2383  3180   	fcall	clear_ram0
  1762                           
  1763                           ; Clear objects allocated to BANK4
  1764  00A8  3020               	movlw	low __pbssBANK4
  1765  00A9  0084               	movwf	4
  1766  00AA  3002               	movlw	high __pbssBANK4
  1767  00AB  0085               	movwf	5
  1768  00AC  3020               	movlw	32
  1769  00AD  318B  2383  3180   	fcall	clear_ram0
  1770  00B0                     end_of_initialization:	
  1771                           ;End of C runtime variable initialization code
  1772                           
  1773  00B0                     __end_of__initialization:
  1774  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1775  00B1  0020               	movlb	0
  1776  00B2  318C  2CED         	ljmp	_main	;jump to C main() function
  1777                           
  1778                           	psect	bssBANK0
  1779  005F                     __pbssBANK0:
  1780  005F                     _filteredVout:
  1781  005F                     	ds	2
  1782  0061                     _latestIL:
  1783  0061                     	ds	2
  1784  0063                     _setDuty:
  1785  0063                     	ds	2
  1786  0065                     _slotTest:
  1787  0065                     	ds	1
  1788  0066                     _timerSlotQuarter:
  1789  0066                     	ds	1
  1790  0067                     _timerSlotHalf:
  1791  0067                     	ds	1
  1792  0068                     _potSetCount:
  1793  0068                     	ds	1
  1794  0069                     _currentTripCount:
  1795  0069                     	ds	1
  1796  006A                     _tripIL:
  1797  006A                     	ds	1
  1798  006B                     _tripIDS:
  1799  006B                     	ds	1
  1800  006C                     _currentState:
  1801  006C                     	ds	1
  1802  006D                     _prevPeriod:
  1803  006D                     	ds	1
  1804  006E                     _setPeriod:
  1805  006E                     	ds	1
  1806                           
  1807                           	psect	bssBANK1
  1808  00A0                     __pbssBANK1:
  1809  00A0                     _integratorScaledLimit:
  1810  00A0                     	ds	8
  1811  00A8                     _clockFrequency:
  1812  00A8                     	ds	4
  1813  00AC                     _filteredDutyPot:
  1814  00AC                     	ds	2
  1815  00AE                     _filteredFreqPot:
  1816  00AE                     	ds	2
  1817  00B0                     _filteredIL:
  1818  00B0                     	ds	2
  1819  00B2                     _filteredIDS:
  1820  00B2                     	ds	2
  1821  00B4                     _prevDuty:
  1822  00B4                     	ds	2
  1823  00B6                     _voltageModeVariables:
  1824  00B6                     	ds	28
  1825                           
  1826                           	psect	bssBANK2
  1827  0120                     __pbssBANK2:
  1828  0120                     _currentILFIFO:
  1829  0120                     	ds	32
  1830  0140                     _currentIDSFIFO:
  1831  0140                     	ds	32
  1832                           
  1833                           	psect	bssBANK3
  1834  01A0                     __pbssBANK3:
  1835  01A0                     _freqPotFIFO:
  1836  01A0                     	ds	32
  1837  01C0                     _voutFIFO:
  1838  01C0                     	ds	32
  1839                           
  1840                           	psect	bssBANK4
  1841  0220                     __pbssBANK4:
  1842  0220                     _dutyPotFIFO:
  1843  0220                     	ds	32
  1844                           
  1845                           	psect	clrtext
  1846  0B83                     clear_ram0:	
  1847                           ;	Called with FSR0 containing the base address, and
  1848                           ;	WREG with the size to clear
  1849                           
  1850  0B83  0064               	clrwdt	;clear the watchdog before getting into this loop
  1851  0B84                     clrloop0:
  1852  0B84  0180               	clrf	0	;clear RAM location pointed to by FSR
  1853  0B85  3101               	addfsr 0,1
  1854  0B86  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1855  0B87  2B84               	goto	clrloop0	;have we reached the end yet?
  1856  0B88  3400               	retlw	0	;all done for this memory range, return
  1857                           
  1858                           	psect	cstackBANK1
  1859  00D2                     __pcstackBANK1:
  1860  00D2                     ?_writeGPIO:
  1861  00D2                     ??_transToInitialising:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  00D2                     ??_setupInternalOscillator:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  00D2                     ??_setupTimer0Interrupt:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  00D2                     ??_initialiseADCModule:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  00D2                     ?_initialiseGPIO:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  00D2                     ??_readGPIO:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  00D2                     ??_transToVoltageModeControl:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  00D2                     ??_transToCurrentModeControl:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00D2                     ??_transToPotControl:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00D2                     ??_initialiseADCPin:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00D2                     initialiseGPIO@direction:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00D2                     writeGPIO@writeValue:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x0
  1899  00D2                     	ds	1
  1900  00D3                     ??_writeGPIO:
  1901  00D3                     ??_initialiseGPIO:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1
  1906  00D3                     	ds	1
  1907  00D4                     setupInternalOscillator@selectedFreq:
  1908  00D4                     initialiseADCPin@gpioValid:	
  1909                           ; 1 bytes @ 0x2
  1910                           
  1911  00D4                     readGPIO@readA:	
  1912                           ; 1 bytes @ 0x2
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x2
  1916  00D4                     	ds	1
  1917  00D5                     initialiseADCPin@portType:
  1918  00D5                     initialiseGPIO@portType:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921  00D5                     writeGPIO@portType:	
  1922                           ; 1 bytes @ 0x3
  1923                           
  1924  00D5                     readGPIO@returnValueA:	
  1925                           ; 1 bytes @ 0x3
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x3
  1929  00D5                     	ds	1
  1930  00D6                     initialiseADCPin@portNumber:
  1931  00D6                     initialiseGPIO@gpioNumber:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  00D6                     writeGPIO@gpioNumber:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937  00D6                     readGPIO@readB:	
  1938                           ; 1 bytes @ 0x4
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x4
  1942  00D6                     	ds	1
  1943  00D7                     initialiseADCPin@gpioNumber:
  1944  00D7                     initialiseGPIO@portNumber:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  00D7                     writeGPIO@portNumber:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  00D7                     readGPIO@returnValueB:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  00D7                     	ds	1
  1956  00D8                     ??_setupPWM:
  1957  00D8                     ??_initialiseCurrentSensors:	
  1958                           ; 1 bytes @ 0x6
  1959                           
  1960  00D8                     ??_initialisePotentiometers:	
  1961                           ; 1 bytes @ 0x6
  1962                           
  1963  00D8                     ??_initialiseController:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966  00D8                     ??_currentTripReset:	
  1967                           ; 1 bytes @ 0x6
  1968                           
  1969  00D8                     readGPIO@portNumber:	
  1970                           ; 1 bytes @ 0x6
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x6
  1974  00D8                     	ds	1
  1975  00D9                     readGPIO@portType:
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  00D9                     	ds	1
  1979  00DA                     readGPIO@gpioNumber:
  1980                           
  1981                           ; 1 bytes @ 0x8
  1982  00DA                     	ds	1
  1983  00DB                     ?_main:
  1984  00DB                     main@argc:	
  1985                           ; 2 bytes @ 0x9
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00DB                     	ds	2
  1990  00DD                     main@argv:
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  00DD                     	ds	2
  1994  00DF                     ??_main:
  1995                           
  1996                           	psect	cstackCOMMON
  1997  0070                     __pcstackCOMMON:	
  1998                           ; 1 bytes @ 0xD
  1999                           
  2000  0070                     ?_setPWMDutyandPeriod:
  2001  0070                     ?_controlRoutine:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_runPotScaling:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_transToInitialising:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_setupInternalOscillator:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_setupPWM:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_setupTimer0Interrupt:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_initialiseADCModule:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_initialiseCurrentSensors:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_initialisePotentiometers:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_initialiseController:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_readGPIO:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_transToVoltageModeControl:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_transToCurrentModeControl:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_transToPotControl:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_runVoltageModeControl:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_currentTripReset:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_transToOverCurrentFault:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_transToOverCurrentFault:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_Tick490Hz:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_initialiseADCPin:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_currentTripRead:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ??___omul:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?i1_writeGPIO:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_readGPIO:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_readGPIO:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1_currentTripReset:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_currentTripMonitor:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_readFilteredIL:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?_abs:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?_readADCRaw:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?___wmul:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?___lmul:	
  2095                           ; 2 bytes @ 0x0
  2096                           
  2097  0070                     i1writeGPIO@writeValue:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     setPWMDutyandPeriod@dutyCycle:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___wmul@multiplier:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     abs@a:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ___lmul@multiplier:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112                           
  2113                           ; 4 bytes @ 0x0
  2114  0070                     	ds	1
  2115  0071                     ??i1_writeGPIO:
  2116  0071                     ___omul@product:	
  2117                           ; 1 bytes @ 0x1
  2118                           
  2119                           
  2120                           ; 8 bytes @ 0x1
  2121  0071                     	ds	1
  2122  0072                     ??_readFilteredIL:
  2123  0072                     ??_abs:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126  0072                     ??_readADCRaw:	
  2127                           ; 1 bytes @ 0x2
  2128                           
  2129  0072                     setPWMDutyandPeriod@period:	
  2130                           ; 1 bytes @ 0x2
  2131                           
  2132  0072                     i1readGPIO@readA:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     ___wmul@multiplicand:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138                           
  2139                           ; 2 bytes @ 0x2
  2140  0072                     	ds	1
  2141  0073                     ??_setPWMDutyandPeriod:
  2142  0073                     i1writeGPIO@portType:	
  2143                           ; 1 bytes @ 0x3
  2144                           
  2145  0073                     i1readGPIO@returnValueA:	
  2146                           ; 1 bytes @ 0x3
  2147                           
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  0073                     	ds	1
  2151  0074                     ??___wmul:
  2152  0074                     i1writeGPIO@gpioNumber:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     i1readGPIO@readB:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     readADCRaw@returnValue:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161  0074                     ___wmul@product:	
  2162                           ; 2 bytes @ 0x4
  2163                           
  2164  0074                     ___lmul@multiplicand:	
  2165                           ; 2 bytes @ 0x4
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1writeGPIO@portNumber:
  2171  0075                     i1readGPIO@returnValueB:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174                           
  2175                           ; 1 bytes @ 0x5
  2176  0075                     	ds	1
  2177  0076                     ??i1_currentTripReset:
  2178  0076                     ?___lldiv:	
  2179                           ; 1 bytes @ 0x6
  2180                           
  2181  0076                     readADCRaw@channel:	
  2182                           ; 4 bytes @ 0x6
  2183                           
  2184  0076                     i1readGPIO@portNumber:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187  0076                     readFilteredIL@sumOfSamples:	
  2188                           ; 1 bytes @ 0x6
  2189                           
  2190  0076                     ___lldiv@divisor:	
  2191                           ; 4 bytes @ 0x6
  2192                           
  2193                           
  2194                           ; 4 bytes @ 0x6
  2195  0076                     	ds	1
  2196  0077                     readADCRaw@gpioValid:
  2197  0077                     i1readGPIO@portType:	
  2198                           ; 1 bytes @ 0x7
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x7
  2202  0077                     	ds	1
  2203  0078                     ??___lmul:
  2204  0078                     readADCRaw@i:	
  2205                           ; 1 bytes @ 0x8
  2206                           
  2207  0078                     i1readGPIO@gpioNumber:	
  2208                           ; 1 bytes @ 0x8
  2209                           
  2210  0078                     ___lmul@product:	
  2211                           ; 1 bytes @ 0x8
  2212                           
  2213                           
  2214                           ; 4 bytes @ 0x8
  2215  0078                     	ds	1
  2216  0079                     ??_currentTripRead:
  2217  0079                     readADCRaw@gpioNumber:	
  2218                           ; 1 bytes @ 0x9
  2219                           
  2220                           
  2221                           ; 1 bytes @ 0x9
  2222  0079                     	ds	1
  2223  007A                     ?_readFilteredVout:
  2224  007A                     ?_readFilteredDutyPot:	
  2225                           ; 2 bytes @ 0xA
  2226                           
  2227  007A                     ?_readFilteredFreqPot:	
  2228                           ; 2 bytes @ 0xA
  2229                           
  2230  007A                     _currentTripRead$918:	
  2231                           ; 2 bytes @ 0xA
  2232                           
  2233  007A                     readFilteredIL@i_926:	
  2234                           ; 1 bytes @ 0xA
  2235                           
  2236  007A                     ___lldiv@dividend:	
  2237                           ; 1 bytes @ 0xA
  2238                           
  2239                           
  2240                           ; 4 bytes @ 0xA
  2241  007A                     	ds	1
  2242  007B                     ??_currentTripMonitor:
  2243  007B                     readFilteredIL@i:	
  2244                           ; 1 bytes @ 0xB
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0xB
  2248  007B                     	ds	1
  2249  007C                     ?_convertRawToMilliVolts:
  2250  007C                     convertRawToMilliVolts@rawValue:	
  2251                           ; 2 bytes @ 0xC
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0xC
  2255  007C                     	ds	2
  2256                           
  2257                           	psect	cstackBANK0
  2258  0020                     __pcstackBANK0:
  2259  0020                     ??_readFilteredVout:
  2260  0020                     ??_readFilteredDutyPot:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0020                     ??_readFilteredFreqPot:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0020                     ??_convertRawToMilliVolts:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0020                     ??___lldiv:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0020                     ?___omul:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0020                     ___omul@multiplier:	
  2276                           ; 8 bytes @ 0x0
  2277                           
  2278                           
  2279                           ; 8 bytes @ 0x0
  2280  0020                     	ds	1
  2281  0021                     ___lldiv@quotient:
  2282                           
  2283                           ; 4 bytes @ 0x1
  2284  0021                     	ds	3
  2285  0024                     readFilteredDutyPot@sumOfSamples:
  2286  0024                     readFilteredFreqPot@sumOfSamples:	
  2287                           ; 4 bytes @ 0x4
  2288                           
  2289  0024                     readFilteredVout@sumOfSamples:	
  2290                           ; 4 bytes @ 0x4
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x4
  2294  0024                     	ds	1
  2295  0025                     ___lldiv@counter:
  2296  0025                     convertRawToMilliVolts@vsenseMult:	
  2297                           ; 1 bytes @ 0x5
  2298                           
  2299                           
  2300                           ; 4 bytes @ 0x5
  2301  0025                     	ds	1
  2302  0026                     ??_runPotScaling:
  2303                           
  2304                           ; 1 bytes @ 0x6
  2305  0026                     	ds	2
  2306  0028                     readFilteredDutyPot@i_754:
  2307  0028                     readFilteredFreqPot@i_758:	
  2308                           ; 1 bytes @ 0x8
  2309                           
  2310  0028                     readFilteredVout@i_836:	
  2311                           ; 1 bytes @ 0x8
  2312                           
  2313  0028                     ___omul@multiplicand:	
  2314                           ; 1 bytes @ 0x8
  2315                           
  2316                           
  2317                           ; 8 bytes @ 0x8
  2318  0028                     	ds	1
  2319  0029                     readFilteredDutyPot@i:
  2320  0029                     readFilteredFreqPot@i:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0029                     readFilteredVout@i:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0029                     convertRawToMilliVolts@offsetted:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 2 bytes @ 0x9
  2331  0029                     	ds	2
  2332  002B                     convertRawToMilliVolts@returnValuedV:
  2333                           
  2334                           ; 2 bytes @ 0xB
  2335  002B                     	ds	1
  2336  002C                     runPotScaling@potScaled:
  2337                           
  2338                           ; 4 bytes @ 0xC
  2339  002C                     	ds	4
  2340  0030                     ??_runVoltageModeControl:
  2341  0030                     runPotScaling@maxDuty:	
  2342                           ; 1 bytes @ 0x10
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x10
  2346  0030                     	ds	2
  2347  0032                     runPotScaling@minDuty:
  2348                           
  2349                           ; 2 bytes @ 0x12
  2350  0032                     	ds	14
  2351  0040                     runVoltageModeControl@integralMult:
  2352                           
  2353                           ; 8 bytes @ 0x20
  2354  0040                     	ds	8
  2355  0048                     runVoltageModeControl@propMult:
  2356                           
  2357                           ; 8 bytes @ 0x28
  2358  0048                     	ds	8
  2359  0050                     runVoltageModeControl@newVoltage:
  2360                           
  2361                           ; 2 bytes @ 0x30
  2362  0050                     	ds	2
  2363  0052                     ??_controlRoutine:
  2364                           
  2365                           ; 1 bytes @ 0x32
  2366  0052                     	ds	6
  2367  0058                     controlRoutine@maxDuty:
  2368                           
  2369                           ; 2 bytes @ 0x38
  2370  0058                     	ds	2
  2371  005A                     controlRoutine@minDuty:
  2372                           
  2373                           ; 2 bytes @ 0x3A
  2374  005A                     	ds	2
  2375  005C                     controlRoutine@setDuty_unreg:
  2376                           
  2377                           ; 2 bytes @ 0x3C
  2378  005C                     	ds	2
  2379  005E                     ??_Tick490Hz:
  2380                           
  2381                           ; 1 bytes @ 0x3E
  2382  005E                     	ds	1
  2383                           
  2384                           	psect	maintext
  2385  0CED                     __pmaintext:	
  2386 ;;
  2387 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2388 ;;
  2389 ;; *************** function _main *****************
  2390 ;; Defined at:
  2391 ;;		line 107 in file "main.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  argc            2    9[BANK1 ] int 
  2394 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2    9[BANK1 ] int 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : B1F/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2406 ;;      Params:         0       0       4       0       0       0
  2407 ;;      Locals:         0       0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0
  2409 ;;      Totals:         0       0       4       0       0       0
  2410 ;;Total ram usage:        4 bytes
  2411 ;; Hardware stack levels required when called: 8
  2412 ;; This function calls:
  2413 ;;		_initialiseADCModule
  2414 ;;		_initialiseController
  2415 ;;		_initialiseCurrentSensors
  2416 ;;		_initialiseGPIO
  2417 ;;		_initialisePotentiometers
  2418 ;;		_readGPIO
  2419 ;;		_setupInternalOscillator
  2420 ;;		_setupPWM
  2421 ;;		_setupTimer0Interrupt
  2422 ;;		_transToCurrentModeControl
  2423 ;;		_transToInitialising
  2424 ;;		_transToPotControl
  2425 ;;		_transToVoltageModeControl
  2426 ;; This function is called by:
  2427 ;;		Startup code after reset
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431  0CED                     _main:	
  2432                           ;psect for function _main
  2433                           
  2434  0CED                     l2733:	
  2435                           ;incstack = 0
  2436                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2437                           
  2438                           
  2439                           ;main.c: 109:     transToInitialising();
  2440  0CED  318B  2376  318C   	fcall	_transToInitialising
  2441  0CF0                     l2735:
  2442                           
  2443                           ;main.c: 110:     setupInternalOscillator(freq32M);
  2444  0CF0  300A               	movlw	10
  2445  0CF1  3185  2526  318C   	fcall	_setupInternalOscillator
  2446  0CF4                     l2737:
  2447                           
  2448                           ;main.c: 111:     setupPWM();
  2449  0CF4  318B  23E5  318C   	fcall	_setupPWM
  2450  0CF7                     l2739:
  2451                           
  2452                           ;main.c: 112:     setupTimer0Interrupt();
  2453  0CF7  318B  2397  318C   	fcall	_setupTimer0Interrupt
  2454  0CFA                     l2741:
  2455                           
  2456                           ;main.c: 113:     initialiseADCModule();
  2457  0CFA  318B  237D  318C   	fcall	_initialiseADCModule
  2458  0CFD                     l2743:
  2459                           
  2460                           ;main.c: 114:     initialiseCurrentSensors();
  2461  0CFD  318C  241E  318C   	fcall	_initialiseCurrentSensors
  2462  0D00                     l2745:
  2463                           
  2464                           ;main.c: 115:     initialisePotentiometers();
  2465  0D00  318B  23A8  318C   	fcall	_initialisePotentiometers
  2466  0D03                     l2747:
  2467                           
  2468                           ;main.c: 116:     initialiseController();
  2469  0D03  318C  2401  318C   	fcall	_initialiseController
  2470  0D06                     l2749:
  2471                           
  2472                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2473  0D06  0021               	movlb	1	; select bank1
  2474  0D07  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2475  0D08  300C               	movlw	12
  2476  0D09  3185  25EB  318C   	fcall	_initialiseGPIO
  2477  0D0C                     l2751:
  2478                           
  2479                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2480  0D0C  0021               	movlb	1	; select bank1
  2481  0D0D  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2482  0D0E  300D               	movlw	13
  2483  0D0F  3185  25EB  318C   	fcall	_initialiseGPIO
  2484  0D12                     l2753:
  2485  0D12                     l2755:	
  2486                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2487                           
  2488                           
  2489                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2490  0D12  3008               	movlw	8
  2491  0D13  318D  25A7  318C   	fcall	_readGPIO
  2492  0D16  3A01               	xorlw	1
  2493  0D17  1903               	skipnz
  2494  0D18  2D1A               	goto	u2631
  2495  0D19  2D1B               	goto	u2630
  2496  0D1A                     u2631:
  2497  0D1A  2D1F               	goto	l2761
  2498  0D1B                     u2630:
  2499  0D1B                     l2757:
  2500  0D1B  318B  2390  318C   	fcall	_transToVoltageModeControl
  2501  0D1E  2D22               	goto	l120
  2502  0D1F                     l2761:
  2503  0D1F  318B  2379  318C   	fcall	_transToPotControl
  2504  0D22                     l120:	
  2505                           ;main.c: 129:     while(1){
  2506                           
  2507  0D22  2D22               	goto	l120
  2508  0D23  3180  2886         	ljmp	start
  2509  0D25                     __end_of_main:
  2510                           
  2511                           	psect	text1
  2512  0B90                     __ptext1:	
  2513 ;; *************** function _transToVoltageModeControl *****************
  2514 ;; Defined at:
  2515 ;;		line 35 in file "StateMachine.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2529 ;;      Params:         0       0       0       0       0       0
  2530 ;;      Locals:         0       0       0       0       0       0
  2531 ;;      Temps:          0       0       1       0       0       0
  2532 ;;      Totals:         0       0       1       0       0       0
  2533 ;;Total ram usage:        1 bytes
  2534 ;; Hardware stack levels used: 1
  2535 ;; Hardware stack levels required when called: 5
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_main
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543  0B90                     _transToVoltageModeControl:	
  2544                           ;psect for function _transToVoltageModeControl
  2545                           
  2546  0B90                     l2693:	
  2547                           ;incstack = 0
  2548                           ; Regs used in _transToVoltageModeControl: [wreg]
  2549                           
  2550                           
  2551                           ;StateMachine.c: 36:     currentState = voltageModeControl;
  2552  0B90  3002               	movlw	2
  2553  0B91  0021               	movlb	1	; select bank1
  2554  0B92  00D2               	movwf	??_transToVoltageModeControl^(0+128)
  2555  0B93  0852               	movf	??_transToVoltageModeControl^(0+128),w
  2556  0B94  0020               	movlb	0	; select bank0
  2557  0B95  00EC               	movwf	_currentState
  2558  0B96                     l566:
  2559  0B96  0008               	return
  2560  0B97                     __end_of_transToVoltageModeControl:
  2561                           
  2562                           	psect	text2
  2563  0B79                     __ptext2:	
  2564 ;; *************** function _transToPotControl *****************
  2565 ;; Defined at:
  2566 ;;		line 26 in file "StateMachine.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		None
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2580 ;;      Params:         0       0       0       0       0       0
  2581 ;;      Locals:         0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0
  2583 ;;      Totals:         0       0       0       0       0       0
  2584 ;;Total ram usage:        0 bytes
  2585 ;; Hardware stack levels used: 1
  2586 ;; Hardware stack levels required when called: 5
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_main
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594  0B79                     _transToPotControl:	
  2595                           ;psect for function _transToPotControl
  2596                           
  2597  0B79                     l2697:	
  2598                           ;incstack = 0
  2599                           ; Regs used in _transToPotControl: []
  2600                           
  2601                           
  2602                           ;StateMachine.c: 27:     currentState = potControl;
  2603  0B79  0020               	movlb	0	; select bank0
  2604  0B7A  01EC               	clrf	_currentState
  2605  0B7B  0AEC               	incf	_currentState,f
  2606  0B7C                     l563:
  2607  0B7C  0008               	return
  2608  0B7D                     __end_of_transToPotControl:
  2609                           
  2610                           	psect	text3
  2611  0B76                     __ptext3:	
  2612 ;; *************** function _transToInitialising *****************
  2613 ;; Defined at:
  2614 ;;		line 18 in file "StateMachine.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		status,2
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2628 ;;      Params:         0       0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0
  2631 ;;      Totals:         0       0       0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 5
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_main
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642  0B76                     _transToInitialising:	
  2643                           ;psect for function _transToInitialising
  2644                           
  2645  0B76                     l2535:	
  2646                           ;incstack = 0
  2647                           ; Regs used in _transToInitialising: [status,2]
  2648                           
  2649                           
  2650                           ;StateMachine.c: 19:     currentState = initialising;
  2651  0B76  0020               	movlb	0	; select bank0
  2652  0B77  01EC               	clrf	_currentState
  2653  0B78                     l560:
  2654  0B78  0008               	return
  2655  0B79                     __end_of_transToInitialising:
  2656                           
  2657                           	psect	text4
  2658  0B89                     __ptext4:	
  2659 ;; *************** function _transToCurrentModeControl *****************
  2660 ;; Defined at:
  2661 ;;		line 44 in file "StateMachine.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2675 ;;      Params:         0       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0
  2677 ;;      Temps:          0       0       1       0       0       0
  2678 ;;      Totals:         0       0       1       0       0       0
  2679 ;;Total ram usage:        1 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 5
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689  0B89                     _transToCurrentModeControl:	
  2690                           ;psect for function _transToCurrentModeControl
  2691                           
  2692  0B89                     l2695:	
  2693                           ;incstack = 0
  2694                           ; Regs used in _transToCurrentModeControl: [wreg]
  2695                           
  2696                           
  2697                           ;StateMachine.c: 45:     currentState = currentModeControl;
  2698  0B89  3003               	movlw	3
  2699  0B8A  0021               	movlb	1	; select bank1
  2700  0B8B  00D2               	movwf	??_transToCurrentModeControl^(0+128)
  2701  0B8C  0852               	movf	??_transToCurrentModeControl^(0+128),w
  2702  0B8D  0020               	movlb	0	; select bank0
  2703  0B8E  00EC               	movwf	_currentState
  2704  0B8F                     l569:
  2705  0B8F  0008               	return
  2706  0B90                     __end_of_transToCurrentModeControl:
  2707                           
  2708                           	psect	text5
  2709  0B97                     __ptext5:	
  2710 ;; *************** function _setupTimer0Interrupt *****************
  2711 ;; Defined at:
  2712 ;;		line 17 in file "Timer0.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2726 ;;      Params:         0       0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used: 1
  2732 ;; Hardware stack levels required when called: 5
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740  0B97                     _setupTimer0Interrupt:	
  2741                           ;psect for function _setupTimer0Interrupt
  2742                           
  2743  0B97                     l2639:	
  2744                           ;incstack = 0
  2745                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2746                           
  2747                           
  2748                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2749  0B97  178B               	bsf	11,7	;volatile
  2750                           
  2751                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2752  0B98  168B               	bsf	11,5	;volatile
  2753                           
  2754                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2755  0B99  0021               	movlb	1	; select bank1
  2756  0B9A  1295               	bcf	21,5	;volatile
  2757                           
  2758                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2759  0B9B  1195               	bcf	21,3	;volatile
  2760  0B9C                     l2641:
  2761                           
  2762                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2763  0B9C  3005               	movlw	5
  2764  0B9D  0095               	movwf	21	;volatile
  2765  0B9E                     l201:
  2766  0B9E  0008               	return
  2767  0B9F                     __end_of_setupTimer0Interrupt:
  2768                           
  2769                           	psect	text6
  2770  0BE5                     __ptext6:	
  2771 ;; *************** function _setupPWM *****************
  2772 ;; Defined at:
  2773 ;;		line 16 in file "PWM.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2787 ;;      Params:         0       0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used: 1
  2793 ;; Hardware stack levels required when called: 6
  2794 ;; This function calls:
  2795 ;;		_initialiseGPIO
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801  0BE5                     _setupPWM:	
  2802                           ;psect for function _setupPWM
  2803                           
  2804  0BE5                     l2615:	
  2805                           ;incstack = 0
  2806                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2807                           
  2808                           
  2809                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2810  0BE5  300C               	movlw	12
  2811  0BE6  0025               	movlb	5	; select bank5
  2812  0BE7  0093               	movwf	19	;volatile
  2813  0BE8                     l2617:
  2814                           
  2815                           ;PWM.c: 20:     PR2 = 0;
  2816  0BE8  0020               	movlb	0	; select bank0
  2817  0BE9  019B               	clrf	27	;volatile
  2818  0BEA                     l2619:
  2819                           
  2820                           ;PWM.c: 21:     CCPR1L = 0;
  2821  0BEA  0025               	movlb	5	; select bank5
  2822  0BEB  0191               	clrf	17	;volatile
  2823  0BEC                     l2621:
  2824                           
  2825                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2826  0BEC  0022               	movlb	2	; select bank2
  2827  0BED  151D               	bsf	29,2	;volatile
  2828  0BEE                     l2623:
  2829                           
  2830                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2831  0BEE  0025               	movlb	5	; select bank5
  2832  0BEF  1596               	bsf	22,3	;volatile
  2833  0BF0                     l2625:
  2834                           
  2835                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2836  0BF0  1016               	bcf	22,0	;volatile
  2837  0BF1                     l2627:
  2838                           
  2839                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2840  0BF1  30FC               	movlw	-4
  2841  0BF2  0020               	movlb	0	; select bank0
  2842  0BF3  059C               	andwf	28,f	;volatile
  2843  0BF4                     l2629:
  2844                           
  2845                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2846  0BF4  0021               	movlb	1	; select bank1
  2847  0BF5  1091               	bcf	17,1	;volatile
  2848  0BF6                     l2631:
  2849                           
  2850                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2851  0BF6  0020               	movlb	0	; select bank0
  2852  0BF7  151C               	bsf	28,2	;volatile
  2853  0BF8                     l2633:
  2854                           
  2855                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2856  0BF8  170B               	bsf	11,6	;volatile
  2857  0BF9                     l2635:
  2858                           
  2859                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2860  0BF9  0021               	movlb	1	; select bank1
  2861  0BFA  1511               	bsf	17,2	;volatile
  2862  0BFB                     l2637:
  2863                           
  2864                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2865  0BFB  01D2               	clrf	initialiseGPIO@direction^(0+128)
  2866  0BFC  3006               	movlw	6
  2867  0BFD  3185  25EB  318B   	fcall	_initialiseGPIO
  2868  0C00                     l174:
  2869  0C00  0008               	return
  2870  0C01                     __end_of_setupPWM:
  2871                           
  2872                           	psect	text7
  2873  0526                     __ptext7:	
  2874 ;; *************** function _setupInternalOscillator *****************
  2875 ;; Defined at:
  2876 ;;		line 140 in file "main.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  selectedFreq    1    wreg     const enum E2846
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  selectedFreq    1    2[BANK1 ] const enum E2846
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2890 ;;      Params:         0       0       0       0       0       0
  2891 ;;      Locals:         0       0       1       0       0       0
  2892 ;;      Temps:          0       0       2       0       0       0
  2893 ;;      Totals:         0       0       3       0       0       0
  2894 ;;Total ram usage:        3 bytes
  2895 ;; Hardware stack levels used: 1
  2896 ;; Hardware stack levels required when called: 5
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904  0526                     _setupInternalOscillator:	
  2905                           ;psect for function _setupInternalOscillator
  2906                           
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2910                           ;setupInternalOscillator@selectedFreq stored from wreg
  2911  0526  0021               	movlb	1	; select bank1
  2912  0527  00D4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2913  0528                     l2537:
  2914                           
  2915                           ;main.c: 144:     switch(selectedFreq){
  2916  0528  2DBF               	goto	l2607
  2917  0529                     l2539:
  2918  0529  3087               	movlw	-121
  2919  052A  0599               	andwf	25,f	;volatile
  2920  052B                     l2541:
  2921  052B  1399               	bcf	25,7	;volatile
  2922  052C                     l2543:
  2923  052C  3000               	movlw	0
  2924  052D  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2925  052E  3000               	movlw	0
  2926  052F  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2927  0530  3079               	movlw	121
  2928  0531  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2929  0532  3018               	movlw	24
  2930  0533  00A8               	movwf	_clockFrequency^(0+128)
  2931  0534  2DEA               	goto	l139
  2932  0535                     l2545:
  2933  0535  0819               	movf	25,w	;volatile
  2934  0536  3987               	andlw	-121
  2935  0537  3820               	iorlw	32
  2936  0538  0099               	movwf	25	;volatile
  2937  0539                     l2547:
  2938  0539  1399               	bcf	25,7	;volatile
  2939  053A                     l2549:
  2940  053A  3000               	movlw	0
  2941  053B  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2942  053C  3000               	movlw	0
  2943  053D  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2944  053E  30F4               	movlw	244
  2945  053F  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2946  0540  3024               	movlw	36
  2947  0541  00A8               	movwf	_clockFrequency^(0+128)
  2948  0542  2DEA               	goto	l139
  2949  0543                     l2551:
  2950  0543  0819               	movf	25,w	;volatile
  2951  0544  3987               	andlw	-121
  2952  0545  3828               	iorlw	40
  2953  0546  0099               	movwf	25	;volatile
  2954  0547                     l2553:
  2955  0547  1399               	bcf	25,7	;volatile
  2956  0548                     l2555:
  2957  0548  3000               	movlw	0
  2958  0549  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2959  054A  3001               	movlw	1
  2960  054B  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2961  054C  30E8               	movlw	232
  2962  054D  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2963  054E  3048               	movlw	72
  2964  054F  00A8               	movwf	_clockFrequency^(0+128)
  2965  0550  2DEA               	goto	l139
  2966  0551                     l2557:
  2967  0551  0819               	movf	25,w	;volatile
  2968  0552  3987               	andlw	-121
  2969  0553  3830               	iorlw	48
  2970  0554  0099               	movwf	25	;volatile
  2971  0555                     l2559:
  2972  0555  1399               	bcf	25,7	;volatile
  2973  0556                     l2561:
  2974  0556  3000               	movlw	0
  2975  0557  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2976  0558  3003               	movlw	3
  2977  0559  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2978  055A  30D0               	movlw	208
  2979  055B  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2980  055C  3090               	movlw	144
  2981  055D  00A8               	movwf	_clockFrequency^(0+128)
  2982  055E  2DEA               	goto	l139
  2983  055F                     l2563:
  2984  055F  0819               	movf	25,w	;volatile
  2985  0560  3987               	andlw	-121
  2986  0561  3838               	iorlw	56
  2987  0562  0099               	movwf	25	;volatile
  2988  0563                     l2565:
  2989  0563  1399               	bcf	25,7	;volatile
  2990  0564                     l2567:
  2991  0564  3000               	movlw	0
  2992  0565  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2993  0566  3007               	movlw	7
  2994  0567  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2995  0568  30A1               	movlw	161
  2996  0569  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2997  056A  3020               	movlw	32
  2998  056B  00A8               	movwf	_clockFrequency^(0+128)
  2999  056C  2DEA               	goto	l139
  3000  056D                     l2569:
  3001  056D  0819               	movf	25,w	;volatile
  3002  056E  3987               	andlw	-121
  3003  056F  3858               	iorlw	88
  3004  0570  0099               	movwf	25	;volatile
  3005  0571                     l2571:
  3006  0571  1399               	bcf	25,7	;volatile
  3007  0572                     l2573:
  3008  0572  3000               	movlw	0
  3009  0573  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3010  0574  300F               	movlw	15
  3011  0575  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3012  0576  3042               	movlw	66
  3013  0577  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3014  0578  3040               	movlw	64
  3015  0579  00A8               	movwf	_clockFrequency^(0+128)
  3016  057A  2DEA               	goto	l139
  3017  057B                     l2575:
  3018  057B  0819               	movf	25,w	;volatile
  3019  057C  3987               	andlw	-121
  3020  057D  3860               	iorlw	96
  3021  057E  0099               	movwf	25	;volatile
  3022  057F                     l2577:
  3023  057F  1399               	bcf	25,7	;volatile
  3024  0580                     l2579:
  3025  0580  3000               	movlw	0
  3026  0581  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3027  0582  301E               	movlw	30
  3028  0583  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3029  0584  3084               	movlw	132
  3030  0585  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3031  0586  3080               	movlw	128
  3032  0587  00A8               	movwf	_clockFrequency^(0+128)
  3033  0588  2DEA               	goto	l139
  3034  0589                     l2581:
  3035  0589  0819               	movf	25,w	;volatile
  3036  058A  3987               	andlw	-121
  3037  058B  3868               	iorlw	104
  3038  058C  0099               	movwf	25	;volatile
  3039  058D                     l2583:
  3040  058D  1399               	bcf	25,7	;volatile
  3041  058E                     l2585:
  3042  058E  3000               	movlw	0
  3043  058F  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3044  0590  303D               	movlw	61
  3045  0591  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3046  0592  3009               	movlw	9
  3047  0593  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3048  0594  3000               	movlw	0
  3049  0595  00A8               	movwf	_clockFrequency^(0+128)
  3050  0596  2DEA               	goto	l139
  3051  0597                     l2587:
  3052  0597  0819               	movf	25,w	;volatile
  3053  0598  3987               	andlw	-121
  3054  0599  3870               	iorlw	112
  3055  059A  0099               	movwf	25	;volatile
  3056  059B                     l2589:
  3057  059B  1399               	bcf	25,7	;volatile
  3058  059C                     l2591:
  3059  059C  3000               	movlw	0
  3060  059D  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3061  059E  307A               	movlw	122
  3062  059F  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3063  05A0  3012               	movlw	18
  3064  05A1  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3065  05A2  3000               	movlw	0
  3066  05A3  00A8               	movwf	_clockFrequency^(0+128)
  3067  05A4  2DEA               	goto	l139
  3068  05A5                     l2593:
  3069  05A5  3078               	movlw	120
  3070  05A6  0499               	iorwf	25,f	;volatile
  3071  05A7                     l2595:
  3072  05A7  1399               	bcf	25,7	;volatile
  3073  05A8                     l2597:
  3074  05A8  3000               	movlw	0
  3075  05A9  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3076  05AA  30F4               	movlw	244
  3077  05AB  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3078  05AC  3024               	movlw	36
  3079  05AD  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3080  05AE  3000               	movlw	0
  3081  05AF  00A8               	movwf	_clockFrequency^(0+128)
  3082  05B0  2DEA               	goto	l139
  3083  05B1                     l2599:
  3084  05B1  0819               	movf	25,w	;volatile
  3085  05B2  3987               	andlw	-121
  3086  05B3  3870               	iorlw	112
  3087  05B4  0099               	movwf	25	;volatile
  3088  05B5                     l2601:
  3089  05B5  1799               	bsf	25,7	;volatile
  3090  05B6                     l2603:
  3091  05B6  3001               	movlw	1
  3092  05B7  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3093  05B8  30E8               	movlw	232
  3094  05B9  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3095  05BA  3048               	movlw	72
  3096  05BB  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3097  05BC  3000               	movlw	0
  3098  05BD  00A8               	movwf	_clockFrequency^(0+128)
  3099  05BE  2DEA               	goto	l139
  3100  05BF                     l2607:
  3101  05BF  0854               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3102  05C0  00D2               	movwf	??_setupInternalOscillator^(0+128)
  3103  05C1  01D3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3104                           
  3105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3106                           ; Switch size 1, requested type "simple"
  3107                           ; Number of cases is 1, Range of values is 0 to 0
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte            4     3 (average)
  3111                           ; direct_byte            8     6 (fixed)
  3112                           ; jumptable            260     6 (fixed)
  3113                           ;	Chosen strategy is simple_byte
  3114  05C2  0853               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3115  05C3  3A00               	xorlw	0	; case 0
  3116  05C4  1903               	skipnz
  3117  05C5  2DC7               	goto	l2827
  3118  05C6  2DEA               	goto	l139
  3119  05C7                     l2827:
  3120                           
  3121                           ; Switch size 1, requested type "simple"
  3122                           ; Number of cases is 11, Range of values is 0 to 10
  3123                           ; switch strategies available:
  3124                           ; Name         Instructions Cycles
  3125                           ; direct_byte           28     6 (fixed)
  3126                           ; simple_byte           34    18 (average)
  3127                           ; jumptable            260     6 (fixed)
  3128                           ;	Chosen strategy is simple_byte
  3129  05C7  0852               	movf	??_setupInternalOscillator^(0+128),w
  3130  05C8  3A00               	xorlw	0	; case 0
  3131  05C9  1903               	skipnz
  3132  05CA  2D29               	goto	l2539
  3133  05CB  3A01               	xorlw	1	; case 1
  3134  05CC  1903               	skipnz
  3135  05CD  2D35               	goto	l2545
  3136  05CE  3A03               	xorlw	3	; case 2
  3137  05CF  1903               	skipnz
  3138  05D0  2D43               	goto	l2551
  3139  05D1  3A01               	xorlw	1	; case 3
  3140  05D2  1903               	skipnz
  3141  05D3  2D51               	goto	l2557
  3142  05D4  3A07               	xorlw	7	; case 4
  3143  05D5  1903               	skipnz
  3144  05D6  2D5F               	goto	l2563
  3145  05D7  3A01               	xorlw	1	; case 5
  3146  05D8  1903               	skipnz
  3147  05D9  2D6D               	goto	l2569
  3148  05DA  3A03               	xorlw	3	; case 6
  3149  05DB  1903               	skipnz
  3150  05DC  2D7B               	goto	l2575
  3151  05DD  3A01               	xorlw	1	; case 7
  3152  05DE  1903               	skipnz
  3153  05DF  2D89               	goto	l2581
  3154  05E0  3A0F               	xorlw	15	; case 8
  3155  05E1  1903               	skipnz
  3156  05E2  2D97               	goto	l2587
  3157  05E3  3A01               	xorlw	1	; case 9
  3158  05E4  1903               	skipnz
  3159  05E5  2DA5               	goto	l2593
  3160  05E6  3A03               	xorlw	3	; case 10
  3161  05E7  1903               	skipnz
  3162  05E8  2DB1               	goto	l2599
  3163  05E9  2DEA               	goto	l139
  3164  05EA                     l139:
  3165  05EA  0008               	return
  3166  05EB                     __end_of_setupInternalOscillator:
  3167                           
  3168                           	psect	text8
  3169  0DA7                     __ptext8:	
  3170 ;; *************** function _readGPIO *****************
  3171 ;; Defined at:
  3172 ;;		line 79 in file "GPIO.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  gpioNumber      1    wreg     const enum E2798
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3177 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3178 ;;  readB           1    4[BANK1 ] unsigned char 
  3179 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3180 ;;  readA           1    2[BANK1 ] unsigned char 
  3181 ;;  portType        1    7[BANK1 ] unsigned char 
  3182 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      _Bool 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3192 ;;      Params:         0       0       0       0       0       0
  3193 ;;      Locals:         0       0       7       0       0       0
  3194 ;;      Temps:          0       0       2       0       0       0
  3195 ;;      Totals:         0       0       9       0       0       0
  3196 ;;Total ram usage:        9 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 5
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206  0DA7                     _readGPIO:	
  3207                           ;psect for function _readGPIO
  3208                           
  3209                           
  3210                           ;incstack = 0
  3211                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3212                           ;readGPIO@gpioNumber stored from wreg
  3213  0DA7  0021               	movlb	1	; select bank1
  3214  0DA8  00DA               	movwf	readGPIO@gpioNumber^(0+128)
  3215  0DA9                     l2653:
  3216                           
  3217                           ;GPIO.c: 81:     uint8_t portType = 0;
  3218  0DA9  01D9               	clrf	readGPIO@portType^(0+128)
  3219  0DAA                     l2655:
  3220                           
  3221                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3222  0DAA  3008               	movlw	8
  3223  0DAB  025A               	subwf	readGPIO@gpioNumber^(0+128),w
  3224  0DAC  1C03               	skipc
  3225  0DAD  2DAF               	goto	u2501
  3226  0DAE  2DB0               	goto	u2500
  3227  0DAF                     u2501:
  3228  0DAF  2DB8               	goto	l2661
  3229  0DB0                     u2500:
  3230  0DB0                     l2657:
  3231                           
  3232                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3233  0DB0  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3234  0DB1  3EF8               	addlw	248
  3235  0DB2  00D2               	movwf	??_readGPIO^(0+128)
  3236  0DB3  0852               	movf	??_readGPIO^(0+128),w
  3237  0DB4  00D8               	movwf	readGPIO@portNumber^(0+128)
  3238  0DB5                     l2659:
  3239                           
  3240                           ;GPIO.c: 84:         portType = 1;
  3241  0DB5  01D9               	clrf	readGPIO@portType^(0+128)
  3242  0DB6  0AD9               	incf	readGPIO@portType^(0+128),f
  3243                           
  3244                           ;GPIO.c: 85:     }
  3245  0DB7  2DBD               	goto	l2665
  3246  0DB8                     l2661:
  3247                           
  3248                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3249  0DB8  085A               	movf	readGPIO@gpioNumber^(0+128),w
  3250  0DB9  00D2               	movwf	??_readGPIO^(0+128)
  3251  0DBA  0852               	movf	??_readGPIO^(0+128),w
  3252  0DBB  00D8               	movwf	readGPIO@portNumber^(0+128)
  3253  0DBC                     l2663:
  3254                           
  3255                           ;GPIO.c: 88:         portType = 0;
  3256  0DBC  01D9               	clrf	readGPIO@portType^(0+128)
  3257  0DBD                     l2665:
  3258                           
  3259                           ;GPIO.c: 91:     if(portType == 0){
  3260  0DBD  0859               	movf	readGPIO@portType^(0+128),w
  3261  0DBE  1D03               	btfss	3,2
  3262  0DBF  2DC1               	goto	u2511
  3263  0DC0  2DC2               	goto	u2510
  3264  0DC1                     u2511:
  3265  0DC1  2DD6               	goto	l2677
  3266  0DC2                     u2510:
  3267  0DC2                     l2667:
  3268                           
  3269                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3270  0DC2  0020               	movlb	0	; select bank0
  3271  0DC3  080C               	movf	12,w	;volatile
  3272  0DC4  0021               	movlb	1	; select bank1
  3273  0DC5  00D2               	movwf	??_readGPIO^(0+128)
  3274  0DC6  0852               	movf	??_readGPIO^(0+128),w
  3275  0DC7  00D4               	movwf	readGPIO@readA^(0+128)
  3276  0DC8                     l2669:
  3277                           
  3278                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3279  0DC8  0854               	movf	readGPIO@readA^(0+128),w
  3280  0DC9  00D2               	movwf	??_readGPIO^(0+128)
  3281  0DCA  0A58               	incf	readGPIO@portNumber^(0+128),w
  3282  0DCB  2DCD               	goto	u2524
  3283  0DCC                     u2525:
  3284  0DCC  36D2               	lsrf	??_readGPIO^(0+128),f
  3285  0DCD                     u2524:
  3286  0DCD  0B89               	decfsz	9,f
  3287  0DCE  2DCC               	goto	u2525
  3288  0DCF  0852               	movf	??_readGPIO^(0+128),w
  3289  0DD0  3901               	andlw	1
  3290  0DD1  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3291  0DD2  0853               	movf	(??_readGPIO+1)^(0+128),w
  3292  0DD3  00D5               	movwf	readGPIO@returnValueA^(0+128)
  3293  0DD4                     l2671:
  3294                           
  3295                           ;GPIO.c: 94:         return returnValueA;
  3296  0DD4  0855               	movf	readGPIO@returnValueA^(0+128),w
  3297  0DD5  2DF0               	goto	l326
  3298  0DD6                     l2677:
  3299  0DD6  0359               	decf	readGPIO@portType^(0+128),w
  3300  0DD7  1D03               	btfss	3,2
  3301  0DD8  2DDA               	goto	u2531
  3302  0DD9  2DDB               	goto	u2530
  3303  0DDA                     u2531:
  3304  0DDA  2DEF               	goto	l2689
  3305  0DDB                     u2530:
  3306  0DDB                     l2679:
  3307                           
  3308                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3309  0DDB  0020               	movlb	0	; select bank0
  3310  0DDC  080D               	movf	13,w	;volatile
  3311  0DDD  0021               	movlb	1	; select bank1
  3312  0DDE  00D2               	movwf	??_readGPIO^(0+128)
  3313  0DDF  0852               	movf	??_readGPIO^(0+128),w
  3314  0DE0  00D6               	movwf	readGPIO@readB^(0+128)
  3315  0DE1                     l2681:
  3316                           
  3317                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3318  0DE1  0856               	movf	readGPIO@readB^(0+128),w
  3319  0DE2  00D2               	movwf	??_readGPIO^(0+128)
  3320  0DE3  0A58               	incf	readGPIO@portNumber^(0+128),w
  3321  0DE4  2DE6               	goto	u2544
  3322  0DE5                     u2545:
  3323  0DE5  36D2               	lsrf	??_readGPIO^(0+128),f
  3324  0DE6                     u2544:
  3325  0DE6  0B89               	decfsz	9,f
  3326  0DE7  2DE5               	goto	u2545
  3327  0DE8  0852               	movf	??_readGPIO^(0+128),w
  3328  0DE9  3901               	andlw	1
  3329  0DEA  00D3               	movwf	(??_readGPIO+1)^(0+128)
  3330  0DEB  0853               	movf	(??_readGPIO+1)^(0+128),w
  3331  0DEC  00D7               	movwf	readGPIO@returnValueB^(0+128)
  3332  0DED                     l2683:
  3333                           
  3334                           ;GPIO.c: 99:         return returnValueB;
  3335  0DED  0857               	movf	readGPIO@returnValueB^(0+128),w
  3336  0DEE  2DF0               	goto	l326
  3337  0DEF                     l2689:
  3338  0DEF  3000               	movlw	0
  3339  0DF0                     l326:
  3340  0DF0  0008               	return
  3341  0DF1                     __end_of_readGPIO:
  3342                           
  3343                           	psect	text9
  3344  0BA8                     __ptext9:	
  3345 ;; *************** function _initialisePotentiometers *****************
  3346 ;; Defined at:
  3347 ;;		line 15 in file "Potentiometer.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0, pclath, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3361 ;;      Params:         0       0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0
  3364 ;;      Totals:         0       0       0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used: 1
  3367 ;; Hardware stack levels required when called: 6
  3368 ;; This function calls:
  3369 ;;		_initialiseADCPin
  3370 ;; This function is called by:
  3371 ;;		_main
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375  0BA8                     _initialisePotentiometers:	
  3376                           ;psect for function _initialisePotentiometers
  3377                           
  3378  0BA8                     l2647:	
  3379                           ;incstack = 0
  3380                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3381                           
  3382                           
  3383                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3384  0BA8  3009               	movlw	9
  3385  0BA9  3186  2661  318B   	fcall	_initialiseADCPin
  3386                           
  3387                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3388  0BAC  300A               	movlw	10
  3389  0BAD  3186  2661  318B   	fcall	_initialiseADCPin
  3390  0BB0                     l358:
  3391  0BB0  0008               	return
  3392  0BB1                     __end_of_initialisePotentiometers:
  3393                           
  3394                           	psect	text10
  3395  0C1E                     __ptext10:	
  3396 ;; *************** function _initialiseCurrentSensors *****************
  3397 ;; Defined at:
  3398 ;;		line 18 in file "CurrentSensor.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3412 ;;      Params:         0       0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used: 1
  3418 ;; Hardware stack levels required when called: 7
  3419 ;; This function calls:
  3420 ;;		_currentTripReset
  3421 ;;		_initialiseADCPin
  3422 ;;		_initialiseGPIO
  3423 ;; This function is called by:
  3424 ;;		_main
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428  0C1E                     _initialiseCurrentSensors:	
  3429                           ;psect for function _initialiseCurrentSensors
  3430                           
  3431  0C1E                     l2645:	
  3432                           ;incstack = 0
  3433                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3434                           
  3435                           
  3436                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3437  0C1E  0021               	movlb	1	; select bank1
  3438  0C1F  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3439  0C20  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3440  0C21  3003               	movlw	3
  3441  0C22  3185  25EB  318C   	fcall	_initialiseGPIO
  3442                           
  3443                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3444  0C25  0021               	movlb	1	; select bank1
  3445  0C26  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3446  0C27  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3447  0C28  3001               	movlw	1
  3448  0C29  3185  25EB  318C   	fcall	_initialiseGPIO
  3449                           
  3450                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3451  0C2C  3000               	movlw	0
  3452  0C2D  3186  2661  318C   	fcall	_initialiseADCPin
  3453                           
  3454                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3455  0C30  3002               	movlw	2
  3456  0C31  3186  2661  318C   	fcall	_initialiseADCPin
  3457                           
  3458                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3459  0C34  0021               	movlb	1	; select bank1
  3460  0C35  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3461  0C36  300B               	movlw	11
  3462  0C37  3185  25EB  318C   	fcall	_initialiseGPIO
  3463                           
  3464                           ;CurrentSensor.c: 24:     currentTripReset();
  3465  0C3A  318B  23BD  318C   	fcall	_currentTripReset
  3466  0C3D                     l512:
  3467  0C3D  0008               	return
  3468  0C3E                     __end_of_initialiseCurrentSensors:
  3469                           
  3470                           	psect	text11
  3471  0BBD                     __ptext11:	
  3472 ;; *************** function _currentTripReset *****************
  3473 ;; Defined at:
  3474 ;;		line 71 in file "CurrentSensor.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, pclath, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3488 ;;      Params:         0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 6
  3495 ;; This function calls:
  3496 ;;		_writeGPIO
  3497 ;; This function is called by:
  3498 ;;		_initialiseCurrentSensors
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502  0BBD                     _currentTripReset:	
  3503                           ;psect for function _currentTripReset
  3504                           
  3505  0BBD                     l2279:	
  3506                           ;incstack = 0
  3507                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3508                           
  3509                           
  3510                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3511  0BBD  0021               	movlb	1	; select bank1
  3512  0BBE  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3513  0BBF  300B               	movlw	11
  3514  0BC0  3186  26C7  318B   	fcall	_writeGPIO
  3515  0BC3                     l2281:
  3516                           
  3517                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3518                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3519  0BC3  0021               	movlb	1	; select bank1
  3520  0BC4  01D2               	clrf	writeGPIO@writeValue^(0+128)
  3521  0BC5  0AD2               	incf	writeGPIO@writeValue^(0+128),f
  3522  0BC6  300B               	movlw	11
  3523  0BC7  3186  26C7  318B   	fcall	_writeGPIO
  3524  0BCA                     l534:
  3525  0BCA  0008               	return
  3526  0BCB                     __end_of_currentTripReset:
  3527                           
  3528                           	psect	text12
  3529  06C7                     __ptext12:	
  3530 ;; *************** function _writeGPIO *****************
  3531 ;; Defined at:
  3532 ;;		line 52 in file "GPIO.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  gpioNumber      1    wreg     const enum E2798
  3535 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3538 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3539 ;;  portType        1    3[BANK1 ] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3549 ;;      Params:         0       0       1       0       0       0
  3550 ;;      Locals:         0       0       3       0       0       0
  3551 ;;      Temps:          0       0       2       0       0       0
  3552 ;;      Totals:         0       0       6       0       0       0
  3553 ;;Total ram usage:        6 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; Hardware stack levels required when called: 5
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_currentTripReset
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563  06C7                     _writeGPIO:	
  3564                           ;psect for function _writeGPIO
  3565                           
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3569                           ;writeGPIO@gpioNumber stored from wreg
  3570  06C7  0021               	movlb	1	; select bank1
  3571  06C8  00D6               	movwf	writeGPIO@gpioNumber^(0+128)
  3572  06C9                     l2027:
  3573                           
  3574                           ;GPIO.c: 54:     uint8_t portType = 0;
  3575  06C9  01D5               	clrf	writeGPIO@portType^(0+128)
  3576  06CA                     l2029:
  3577                           
  3578                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3579  06CA  3008               	movlw	8
  3580  06CB  0256               	subwf	writeGPIO@gpioNumber^(0+128),w
  3581  06CC  1C03               	skipc
  3582  06CD  2ECF               	goto	u1381
  3583  06CE  2ED0               	goto	u1380
  3584  06CF                     u1381:
  3585  06CF  2ED8               	goto	l2035
  3586  06D0                     u1380:
  3587  06D0                     l2031:
  3588                           
  3589                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3590  06D0  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3591  06D1  3EF8               	addlw	248
  3592  06D2  00D3               	movwf	??_writeGPIO^(0+128)
  3593  06D3  0853               	movf	??_writeGPIO^(0+128),w
  3594  06D4  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3595  06D5                     l2033:
  3596                           
  3597                           ;GPIO.c: 57:         portType = 1;
  3598  06D5  01D5               	clrf	writeGPIO@portType^(0+128)
  3599  06D6  0AD5               	incf	writeGPIO@portType^(0+128),f
  3600                           
  3601                           ;GPIO.c: 58:     }
  3602  06D7  2EDD               	goto	l2039
  3603  06D8                     l2035:
  3604                           
  3605                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3606  06D8  0856               	movf	writeGPIO@gpioNumber^(0+128),w
  3607  06D9  00D3               	movwf	??_writeGPIO^(0+128)
  3608  06DA  0853               	movf	??_writeGPIO^(0+128),w
  3609  06DB  00D7               	movwf	writeGPIO@portNumber^(0+128)
  3610  06DC                     l2037:
  3611                           
  3612                           ;GPIO.c: 61:         portType = 0;
  3613  06DC  01D5               	clrf	writeGPIO@portType^(0+128)
  3614  06DD                     l2039:
  3615                           
  3616                           ;GPIO.c: 64:     if(portType == 0){
  3617  06DD  0855               	movf	writeGPIO@portType^(0+128),w
  3618  06DE  1D03               	btfss	3,2
  3619  06DF  2EE1               	goto	u1391
  3620  06E0  2EE2               	goto	u1390
  3621  06E1                     u1391:
  3622  06E1  2F02               	goto	l2047
  3623  06E2                     u1390:
  3624  06E2                     l2041:
  3625                           
  3626                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3627  06E2  0852               	movf	writeGPIO@writeValue^(0+128),w
  3628  06E3  1903               	btfsc	3,2
  3629  06E4  2EE6               	goto	u1401
  3630  06E5  2EE7               	goto	u1400
  3631  06E6                     u1401:
  3632  06E6  2EF4               	goto	l2045
  3633  06E7                     u1400:
  3634  06E7                     l2043:
  3635  06E7  3001               	movlw	1
  3636  06E8  00D3               	movwf	??_writeGPIO^(0+128)
  3637  06E9  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3638  06EA  2EEC               	goto	u1414
  3639  06EB                     u1415:
  3640  06EB  35D3               	lslf	??_writeGPIO^(0+128),f
  3641  06EC                     u1414:
  3642  06EC  0B89               	decfsz	9,f
  3643  06ED  2EEB               	goto	u1415
  3644  06EE  0853               	movf	??_writeGPIO^(0+128),w
  3645  06EF  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3646  06F0  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3647  06F1  0022               	movlb	2	; select bank2
  3648  06F2  048C               	iorwf	12,f	;volatile
  3649  06F3  2F26               	goto	l320
  3650  06F4                     l2045:
  3651  06F4  3001               	movlw	1
  3652  06F5  00D3               	movwf	??_writeGPIO^(0+128)
  3653  06F6  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3654  06F7  2EF9               	goto	u1424
  3655  06F8                     u1425:
  3656  06F8  35D3               	lslf	??_writeGPIO^(0+128),f
  3657  06F9                     u1424:
  3658  06F9  0B89               	decfsz	9,f
  3659  06FA  2EF8               	goto	u1425
  3660  06FB  0853               	movf	??_writeGPIO^(0+128),w
  3661  06FC  3AFF               	xorlw	255
  3662  06FD  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3663  06FE  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3664  06FF  0022               	movlb	2	; select bank2
  3665  0700  058C               	andwf	12,f	;volatile
  3666  0701  2F26               	goto	l320
  3667  0702                     l2047:
  3668  0702  0355               	decf	writeGPIO@portType^(0+128),w
  3669  0703  1D03               	btfss	3,2
  3670  0704  2F06               	goto	u1431
  3671  0705  2F07               	goto	u1430
  3672  0706                     u1431:
  3673  0706  2F26               	goto	l320
  3674  0707                     u1430:
  3675  0707                     l2049:
  3676                           
  3677                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3678  0707  0852               	movf	writeGPIO@writeValue^(0+128),w
  3679  0708  1903               	btfsc	3,2
  3680  0709  2F0B               	goto	u1441
  3681  070A  2F0C               	goto	u1440
  3682  070B                     u1441:
  3683  070B  2F19               	goto	l2053
  3684  070C                     u1440:
  3685  070C                     l2051:
  3686  070C  3001               	movlw	1
  3687  070D  00D3               	movwf	??_writeGPIO^(0+128)
  3688  070E  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3689  070F  2F11               	goto	u1454
  3690  0710                     u1455:
  3691  0710  35D3               	lslf	??_writeGPIO^(0+128),f
  3692  0711                     u1454:
  3693  0711  0B89               	decfsz	9,f
  3694  0712  2F10               	goto	u1455
  3695  0713  0853               	movf	??_writeGPIO^(0+128),w
  3696  0714  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3697  0715  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3698  0716  0022               	movlb	2	; select bank2
  3699  0717  048D               	iorwf	13,f	;volatile
  3700  0718  2F26               	goto	l320
  3701  0719                     l2053:
  3702  0719  3001               	movlw	1
  3703  071A  00D3               	movwf	??_writeGPIO^(0+128)
  3704  071B  0A57               	incf	writeGPIO@portNumber^(0+128),w
  3705  071C  2F1E               	goto	u1464
  3706  071D                     u1465:
  3707  071D  35D3               	lslf	??_writeGPIO^(0+128),f
  3708  071E                     u1464:
  3709  071E  0B89               	decfsz	9,f
  3710  071F  2F1D               	goto	u1465
  3711  0720  0853               	movf	??_writeGPIO^(0+128),w
  3712  0721  3AFF               	xorlw	255
  3713  0722  00D4               	movwf	(??_writeGPIO+1)^(0+128)
  3714  0723  0854               	movf	(??_writeGPIO+1)^(0+128),w
  3715  0724  0022               	movlb	2	; select bank2
  3716  0725  058D               	andwf	13,f	;volatile
  3717  0726                     l320:
  3718  0726  0008               	return
  3719  0727                     __end_of_writeGPIO:
  3720                           
  3721                           	psect	text13
  3722  0C01                     __ptext13:	
  3723 ;; *************** function _initialiseController *****************
  3724 ;; Defined at:
  3725 ;;		line 28 in file "Controller.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0, pclath, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3739 ;;      Params:         0       0       0       0       0       0
  3740 ;;      Locals:         0       0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0
  3742 ;;      Totals:         0       0       0       0       0       0
  3743 ;;Total ram usage:        0 bytes
  3744 ;; Hardware stack levels used: 1
  3745 ;; Hardware stack levels required when called: 6
  3746 ;; This function calls:
  3747 ;;		_initialiseADCPin
  3748 ;;		_initialiseGPIO
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754  0C01                     _initialiseController:	
  3755                           ;psect for function _initialiseController
  3756                           
  3757  0C01                     l2649:	
  3758                           ;incstack = 0
  3759                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3760                           
  3761                           
  3762                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3763  0C01  0021               	movlb	1	; select bank1
  3764  0C02  01D2               	clrf	initialiseGPIO@direction^(0+128)
  3765  0C03  0AD2               	incf	initialiseGPIO@direction^(0+128),f
  3766  0C04  3004               	movlw	4
  3767  0C05  3185  25EB  318C   	fcall	_initialiseGPIO
  3768                           
  3769                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3770  0C08  3004               	movlw	4
  3771  0C09  3186  2661  318C   	fcall	_initialiseADCPin
  3772  0C0C                     l2651:
  3773                           
  3774                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (7u + 16u)
      +                          );
  3775  0C0C  3000               	movlw	0
  3776  0C0D  0021               	movlb	1	; select bank1
  3777  0C0E  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3778  0C0F  3000               	movlw	0
  3779  0C10  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3780  0C11  3000               	movlw	0
  3781  0C12  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3782  0C13  3001               	movlw	1
  3783  0C14  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3784  0C15  3000               	movlw	0
  3785  0C16  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3786  0C17  3000               	movlw	0
  3787  0C18  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3788  0C19  3000               	movlw	0
  3789  0C1A  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3790  0C1B  3000               	movlw	0
  3791  0C1C  00A0               	movwf	_integratorScaledLimit^(0+128)
  3792  0C1D                     l430:
  3793  0C1D  0008               	return
  3794  0C1E                     __end_of_initialiseController:
  3795                           
  3796                           	psect	text14
  3797  05EB                     __ptext14:	
  3798 ;; *************** function _initialiseGPIO *****************
  3799 ;; Defined at:
  3800 ;;		line 18 in file "GPIO.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  gpioNumber      1    wreg     const enum E2798
  3803 ;;  direction       1    0[BANK1 ] unsigned char 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3806 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3807 ;;  portType        1    3[BANK1 ] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3817 ;;      Params:         0       0       1       0       0       0
  3818 ;;      Locals:         0       0       3       0       0       0
  3819 ;;      Temps:          0       0       2       0       0       0
  3820 ;;      Totals:         0       0       6       0       0       0
  3821 ;;Total ram usage:        6 bytes
  3822 ;; Hardware stack levels used: 1
  3823 ;; Hardware stack levels required when called: 5
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;;		_setupPWM
  3829 ;;		_initialiseController
  3830 ;;		_initialiseCurrentSensors
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834  05EB                     _initialiseGPIO:	
  3835                           ;psect for function _initialiseGPIO
  3836                           
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3840                           ;initialiseGPIO@gpioNumber stored from wreg
  3841  05EB  0021               	movlb	1	; select bank1
  3842  05EC  00D6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3843  05ED                     l2147:
  3844                           
  3845                           ;GPIO.c: 20:     uint8_t portType = 0;
  3846  05ED  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3847  05EE                     l2149:
  3848                           
  3849                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3850  05EE  3008               	movlw	8
  3851  05EF  0256               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3852  05F0  1C03               	skipc
  3853  05F1  2DF3               	goto	u1661
  3854  05F2  2DF4               	goto	u1660
  3855  05F3                     u1661:
  3856  05F3  2DFC               	goto	l2155
  3857  05F4                     u1660:
  3858  05F4                     l2151:
  3859                           
  3860                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3861  05F4  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3862  05F5  3EF8               	addlw	248
  3863  05F6  00D3               	movwf	??_initialiseGPIO^(0+128)
  3864  05F7  0853               	movf	??_initialiseGPIO^(0+128),w
  3865  05F8  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3866  05F9                     l2153:
  3867                           
  3868                           ;GPIO.c: 23:         portType = 1;
  3869  05F9  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3870  05FA  0AD5               	incf	initialiseGPIO@portType^(0+128),f
  3871                           
  3872                           ;GPIO.c: 24:     }
  3873  05FB  2E01               	goto	l2159
  3874  05FC                     l2155:
  3875                           
  3876                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3877  05FC  0856               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3878  05FD  00D3               	movwf	??_initialiseGPIO^(0+128)
  3879  05FE  0853               	movf	??_initialiseGPIO^(0+128),w
  3880  05FF  00D7               	movwf	initialiseGPIO@portNumber^(0+128)
  3881  0600                     l2157:
  3882                           
  3883                           ;GPIO.c: 27:         portType = 0;
  3884  0600  01D5               	clrf	initialiseGPIO@portType^(0+128)
  3885  0601                     l2159:
  3886                           
  3887                           ;GPIO.c: 30:     if(portType == 0){
  3888  0601  0855               	movf	initialiseGPIO@portType^(0+128),w
  3889  0602  1D03               	btfss	3,2
  3890  0603  2E05               	goto	u1671
  3891  0604  2E06               	goto	u1670
  3892  0605                     u1671:
  3893  0605  2E31               	goto	l2167
  3894  0606                     u1670:
  3895  0606                     l2161:
  3896                           
  3897                           ;GPIO.c: 31:         if(direction){
  3898  0606  0852               	movf	initialiseGPIO@direction^(0+128),w
  3899  0607  1903               	btfsc	3,2
  3900  0608  2E0A               	goto	u1681
  3901  0609  2E0B               	goto	u1680
  3902  060A                     u1681:
  3903  060A  2E24               	goto	l2165
  3904  060B                     u1680:
  3905  060B                     l2163:
  3906                           
  3907                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3908  060B  3001               	movlw	1
  3909  060C  00D3               	movwf	??_initialiseGPIO^(0+128)
  3910  060D  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3911  060E  2E10               	goto	u1694
  3912  060F                     u1695:
  3913  060F  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3914  0610                     u1694:
  3915  0610  0B89               	decfsz	9,f
  3916  0611  2E0F               	goto	u1695
  3917  0612  0853               	movf	??_initialiseGPIO^(0+128),w
  3918  0613  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3919  0614  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3920  0615  048C               	iorwf	12,f	;volatile
  3921                           
  3922                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3923  0616  3001               	movlw	1
  3924  0617  00D3               	movwf	??_initialiseGPIO^(0+128)
  3925  0618  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3926  0619  2E1B               	goto	u1704
  3927  061A                     u1705:
  3928  061A  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3929  061B                     u1704:
  3930  061B  0B89               	decfsz	9,f
  3931  061C  2E1A               	goto	u1705
  3932  061D  0853               	movf	??_initialiseGPIO^(0+128),w
  3933  061E  3AFF               	xorlw	255
  3934  061F  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3935  0620  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3936  0621  0023               	movlb	3	; select bank3
  3937  0622  058C               	andwf	12,f	;volatile
  3938                           
  3939                           ;GPIO.c: 34:         }
  3940  0623  2E60               	goto	l306
  3941  0624                     l2165:
  3942  0624  3001               	movlw	1
  3943  0625  00D3               	movwf	??_initialiseGPIO^(0+128)
  3944  0626  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3945  0627  2E29               	goto	u1714
  3946  0628                     u1715:
  3947  0628  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3948  0629                     u1714:
  3949  0629  0B89               	decfsz	9,f
  3950  062A  2E28               	goto	u1715
  3951  062B  0853               	movf	??_initialiseGPIO^(0+128),w
  3952  062C  3AFF               	xorlw	255
  3953  062D  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3954  062E  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3955  062F  058C               	andwf	12,f	;volatile
  3956  0630  2E60               	goto	l306
  3957  0631                     l2167:
  3958  0631  0355               	decf	initialiseGPIO@portType^(0+128),w
  3959  0632  1D03               	btfss	3,2
  3960  0633  2E35               	goto	u1721
  3961  0634  2E36               	goto	u1720
  3962  0635                     u1721:
  3963  0635  2E60               	goto	l306
  3964  0636                     u1720:
  3965  0636                     l2169:
  3966                           
  3967                           ;GPIO.c: 38:         if(direction){
  3968  0636  0852               	movf	initialiseGPIO@direction^(0+128),w
  3969  0637  1903               	btfsc	3,2
  3970  0638  2E3A               	goto	u1731
  3971  0639  2E3B               	goto	u1730
  3972  063A                     u1731:
  3973  063A  2E54               	goto	l2173
  3974  063B                     u1730:
  3975  063B                     l2171:
  3976                           
  3977                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3978  063B  3001               	movlw	1
  3979  063C  00D3               	movwf	??_initialiseGPIO^(0+128)
  3980  063D  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3981  063E  2E40               	goto	u1744
  3982  063F                     u1745:
  3983  063F  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3984  0640                     u1744:
  3985  0640  0B89               	decfsz	9,f
  3986  0641  2E3F               	goto	u1745
  3987  0642  0853               	movf	??_initialiseGPIO^(0+128),w
  3988  0643  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3989  0644  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  3990  0645  048D               	iorwf	13,f	;volatile
  3991                           
  3992                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3993  0646  3001               	movlw	1
  3994  0647  00D3               	movwf	??_initialiseGPIO^(0+128)
  3995  0648  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  3996  0649  2E4B               	goto	u1754
  3997  064A                     u1755:
  3998  064A  35D3               	lslf	??_initialiseGPIO^(0+128),f
  3999  064B                     u1754:
  4000  064B  0B89               	decfsz	9,f
  4001  064C  2E4A               	goto	u1755
  4002  064D  0853               	movf	??_initialiseGPIO^(0+128),w
  4003  064E  3AFF               	xorlw	255
  4004  064F  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4005  0650  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4006  0651  0023               	movlb	3	; select bank3
  4007  0652  058D               	andwf	13,f	;volatile
  4008                           
  4009                           ;GPIO.c: 41:         }
  4010  0653  2E60               	goto	l306
  4011  0654                     l2173:
  4012  0654  3001               	movlw	1
  4013  0655  00D3               	movwf	??_initialiseGPIO^(0+128)
  4014  0656  0A57               	incf	initialiseGPIO@portNumber^(0+128),w
  4015  0657  2E59               	goto	u1764
  4016  0658                     u1765:
  4017  0658  35D3               	lslf	??_initialiseGPIO^(0+128),f
  4018  0659                     u1764:
  4019  0659  0B89               	decfsz	9,f
  4020  065A  2E58               	goto	u1765
  4021  065B  0853               	movf	??_initialiseGPIO^(0+128),w
  4022  065C  3AFF               	xorlw	255
  4023  065D  00D4               	movwf	(??_initialiseGPIO+1)^(0+128)
  4024  065E  0854               	movf	(??_initialiseGPIO+1)^(0+128),w
  4025  065F  058D               	andwf	13,f	;volatile
  4026  0660                     l306:
  4027  0660  0008               	return
  4028  0661                     __end_of_initialiseGPIO:
  4029                           
  4030                           	psect	text15
  4031  0661                     __ptext15:	
  4032 ;; *************** function _initialiseADCPin *****************
  4033 ;; Defined at:
  4034 ;;		line 37 in file "ADC.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  gpioNumber      1    wreg     const enum E2798
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  4039 ;;  portNumber      1    4[BANK1 ] unsigned char 
  4040 ;;  portType        1    3[BANK1 ] unsigned char 
  4041 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4051 ;;      Params:         0       0       0       0       0       0
  4052 ;;      Locals:         0       0       4       0       0       0
  4053 ;;      Temps:          0       0       2       0       0       0
  4054 ;;      Totals:         0       0       6       0       0       0
  4055 ;;Total ram usage:        6 bytes
  4056 ;; Hardware stack levels used: 1
  4057 ;; Hardware stack levels required when called: 5
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_initialisePotentiometers
  4062 ;;		_initialiseController
  4063 ;;		_initialiseCurrentSensors
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067  0661                     _initialiseADCPin:	
  4068                           ;psect for function _initialiseADCPin
  4069                           
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4073                           ;initialiseADCPin@gpioNumber stored from wreg
  4074  0661  0021               	movlb	1	; select bank1
  4075  0662  00D7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4076  0663                     l2175:
  4077                           
  4078                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4079  0663  01D6               	clrf	initialiseADCPin@portNumber^(0+128)
  4080                           
  4081                           ;ADC.c: 40:     uint8_t portType = 0;
  4082  0664  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4083                           
  4084                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4085  0665  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4086  0666                     l2177:
  4087                           
  4088                           ;ADC.c: 43:     if(gpioNumber < 4){
  4089  0666  3004               	movlw	4
  4090  0667  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4091  0668  1803               	skipnc
  4092  0669  2E6B               	goto	u1771
  4093  066A  2E6C               	goto	u1770
  4094  066B                     u1771:
  4095  066B  2E73               	goto	l2185
  4096  066C                     u1770:
  4097  066C                     l2179:
  4098                           
  4099                           ;ADC.c: 44:         portNumber = gpioNumber;
  4100  066C  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4101  066D  00D2               	movwf	??_initialiseADCPin^(0+128)
  4102  066E  0852               	movf	??_initialiseADCPin^(0+128),w
  4103  066F  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4104  0670                     l2181:
  4105                           
  4106                           ;ADC.c: 45:         portType = 0;
  4107  0670  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4108  0671                     l2183:
  4109                           
  4110                           ;ADC.c: 46:         gpioValid = 1;
  4111  0671  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4112  0672  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4113  0673                     l2185:
  4114                           
  4115                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4116  0673  3009               	movlw	9
  4117  0674  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4118  0675  1C03               	skipc
  4119  0676  2E78               	goto	u1781
  4120  0677  2E79               	goto	u1780
  4121  0678                     u1781:
  4122  0678  2E88               	goto	l238
  4123  0679                     u1780:
  4124  0679                     l2187:
  4125  0679  3010               	movlw	16
  4126  067A  0257               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4127  067B  1803               	skipnc
  4128  067C  2E7E               	goto	u1791
  4129  067D  2E7F               	goto	u1790
  4130  067E                     u1791:
  4131  067E  2E88               	goto	l238
  4132  067F                     u1790:
  4133  067F                     l2189:
  4134                           
  4135                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4136  067F  0857               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4137  0680  3EF8               	addlw	248
  4138  0681  00D2               	movwf	??_initialiseADCPin^(0+128)
  4139  0682  0852               	movf	??_initialiseADCPin^(0+128),w
  4140  0683  00D6               	movwf	initialiseADCPin@portNumber^(0+128)
  4141  0684                     l2191:
  4142                           
  4143                           ;ADC.c: 51:         portType = 1;
  4144  0684  01D5               	clrf	initialiseADCPin@portType^(0+128)
  4145  0685  0AD5               	incf	initialiseADCPin@portType^(0+128),f
  4146  0686                     l2193:
  4147                           
  4148                           ;ADC.c: 52:         gpioValid = 1;
  4149  0686  01D4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4150  0687  0AD4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4151  0688                     l238:	
  4152                           ;ADC.c: 53:     }
  4153                           
  4154                           
  4155                           ;ADC.c: 55:     if(gpioValid){
  4156  0688  0854               	movf	initialiseADCPin@gpioValid^(0+128),w
  4157  0689  1903               	btfsc	3,2
  4158  068A  2E8C               	goto	u1801
  4159  068B  2E8D               	goto	u1800
  4160  068C                     u1801:
  4161  068C  2EC6               	goto	l243
  4162  068D                     u1800:
  4163  068D                     l2195:
  4164                           
  4165                           ;ADC.c: 56:         if(portType == 0){
  4166  068D  0855               	movf	initialiseADCPin@portType^(0+128),w
  4167  068E  1D03               	btfss	3,2
  4168  068F  2E91               	goto	u1811
  4169  0690  2E92               	goto	u1810
  4170  0691                     u1811:
  4171  0691  2EAA               	goto	l2199
  4172  0692                     u1810:
  4173  0692                     l2197:
  4174                           
  4175                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4176  0692  3001               	movlw	1
  4177  0693  00D2               	movwf	??_initialiseADCPin^(0+128)
  4178  0694  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4179  0695  2E97               	goto	u1824
  4180  0696                     u1825:
  4181  0696  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4182  0697                     u1824:
  4183  0697  0B89               	decfsz	9,f
  4184  0698  2E96               	goto	u1825
  4185  0699  0852               	movf	??_initialiseADCPin^(0+128),w
  4186  069A  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4187  069B  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4188  069C  048C               	iorwf	12,f	;volatile
  4189                           
  4190                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4191  069D  3001               	movlw	1
  4192  069E  00D2               	movwf	??_initialiseADCPin^(0+128)
  4193  069F  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4194  06A0  2EA2               	goto	u1834
  4195  06A1                     u1835:
  4196  06A1  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4197  06A2                     u1834:
  4198  06A2  0B89               	decfsz	9,f
  4199  06A3  2EA1               	goto	u1835
  4200  06A4  0852               	movf	??_initialiseADCPin^(0+128),w
  4201  06A5  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4202  06A6  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4203  06A7  0023               	movlb	3	; select bank3
  4204  06A8  048C               	iorwf	12,f	;volatile
  4205                           
  4206                           ;ADC.c: 59:         }
  4207  06A9  2EC6               	goto	l243
  4208  06AA                     l2199:
  4209  06AA  0355               	decf	initialiseADCPin@portType^(0+128),w
  4210  06AB  1D03               	btfss	3,2
  4211  06AC  2EAE               	goto	u1841
  4212  06AD  2EAF               	goto	u1840
  4213  06AE                     u1841:
  4214  06AE  2EC6               	goto	l243
  4215  06AF                     u1840:
  4216  06AF                     l2201:
  4217                           
  4218                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4219  06AF  3001               	movlw	1
  4220  06B0  00D2               	movwf	??_initialiseADCPin^(0+128)
  4221  06B1  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4222  06B2  2EB4               	goto	u1854
  4223  06B3                     u1855:
  4224  06B3  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4225  06B4                     u1854:
  4226  06B4  0B89               	decfsz	9,f
  4227  06B5  2EB3               	goto	u1855
  4228  06B6  0852               	movf	??_initialiseADCPin^(0+128),w
  4229  06B7  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4230  06B8  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4231  06B9  048D               	iorwf	13,f	;volatile
  4232                           
  4233                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4234  06BA  3001               	movlw	1
  4235  06BB  00D2               	movwf	??_initialiseADCPin^(0+128)
  4236  06BC  0A56               	incf	initialiseADCPin@portNumber^(0+128),w
  4237  06BD  2EBF               	goto	u1864
  4238  06BE                     u1865:
  4239  06BE  35D2               	lslf	??_initialiseADCPin^(0+128),f
  4240  06BF                     u1864:
  4241  06BF  0B89               	decfsz	9,f
  4242  06C0  2EBE               	goto	u1865
  4243  06C1  0852               	movf	??_initialiseADCPin^(0+128),w
  4244  06C2  00D3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4245  06C3  0853               	movf	(??_initialiseADCPin+1)^(0+128),w
  4246  06C4  0023               	movlb	3	; select bank3
  4247  06C5  048D               	iorwf	13,f	;volatile
  4248  06C6                     l243:
  4249  06C6  0008               	return
  4250  06C7                     __end_of_initialiseADCPin:
  4251                           
  4252                           	psect	text16
  4253  0B7D                     __ptext16:	
  4254 ;; *************** function _initialiseADCModule *****************
  4255 ;; Defined at:
  4256 ;;		line 14 in file "ADC.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4270 ;;      Params:         0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 5
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284  0B7D                     _initialiseADCModule:	
  4285                           ;psect for function _initialiseADCModule
  4286                           
  4287  0B7D                     l2643:	
  4288                           ;incstack = 0
  4289                           ; Regs used in _initialiseADCModule: [wreg]
  4290                           
  4291                           
  4292                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4293  0B7D  3001               	movlw	1
  4294  0B7E  0021               	movlb	1	; select bank1
  4295  0B7F  009D               	movwf	29	;volatile
  4296                           
  4297                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4298  0B80  3090               	movlw	144
  4299  0B81  009E               	movwf	30	;volatile
  4300  0B82                     l234:
  4301  0B82  0008               	return
  4302  0B83                     __end_of_initialiseADCModule:
  4303                           
  4304                           	psect	intentry
  4305  0004                     __pintentry:	
  4306 ;; *************** function _Tick490Hz *****************
  4307 ;; Defined at:
  4308 ;;		line 42 in file "main.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4322 ;;      Params:         0       0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0
  4324 ;;      Temps:          0       1       0       0       0       0
  4325 ;;      Totals:         0       1       0       0       0       0
  4326 ;;Total ram usage:        1 bytes
  4327 ;; Hardware stack levels used: 1
  4328 ;; Hardware stack levels required when called: 4
  4329 ;; This function calls:
  4330 ;;		_controlRoutine
  4331 ;;		_currentTripMonitor
  4332 ;;		_readFilteredDutyPot
  4333 ;;		_readFilteredFreqPot
  4334 ;;		_readFilteredIL
  4335 ;;		_readFilteredVout
  4336 ;;		_runPotScaling
  4337 ;;		_setPWMDutyandPeriod
  4338 ;;		i1_writeGPIO
  4339 ;; This function is called by:
  4340 ;;		Interrupt level 1
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344  0004                     _Tick490Hz:
  4345                           
  4346                           ;incstack = 0
  4347  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4348                           
  4349                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4350  0005  3180               	pagesel	$
  4351  0006                     i1l2699:
  4352                           
  4353                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4354  0006  01F0               	clrf	i1writeGPIO@writeValue
  4355  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4356  0008  300C               	movlw	12
  4357  0009  3187  2727  3180   	fcall	i1_writeGPIO
  4358                           
  4359                           ;main.c: 54:         currentTripMonitor();
  4360  000C  318C  243E  3180   	fcall	_currentTripMonitor
  4361                           
  4362                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4363  000F  0020               	movlb	0	; select bank0
  4364  0010  0864               	movf	_setDuty+1,w
  4365  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4366  0012  0863               	movf	_setDuty,w
  4367  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4368  0014  086E               	movf	_setPeriod,w
  4369  0015  00DE               	movwf	??_Tick490Hz
  4370  0016  085E               	movf	??_Tick490Hz,w
  4371  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4372  0018  318C  2462  3180   	fcall	_setPWMDutyandPeriod
  4373  001B                     i1l2701:
  4374                           
  4375                           ;main.c: 58:         if(timerSlotHalf == 0){
  4376  001B  0020               	movlb	0	; select bank0
  4377  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4378  001D  1D03               	btfss	3,2
  4379  001E  2820               	goto	u255_21
  4380  001F  2821               	goto	u255_20
  4381  0020                     u255_21:
  4382  0020  2829               	goto	i1l2707
  4383  0021                     u255_20:
  4384  0021                     i1l2703:
  4385                           
  4386                           ;main.c: 60:             controlRoutine();
  4387  0021  3184  2450  3180   	fcall	_controlRoutine
  4388  0024                     i1l2705:
  4389                           
  4390                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4391  0024  01F0               	clrf	i1writeGPIO@writeValue
  4392  0025  300C               	movlw	12
  4393  0026  3187  2727  3180   	fcall	i1_writeGPIO
  4394  0029                     i1l2707:
  4395                           
  4396                           ;main.c: 64:         if(timerSlotHalf == 1){
  4397  0029  0020               	movlb	0	; select bank0
  4398  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4399  002B  1D03               	btfss	3,2
  4400  002C  282E               	goto	u256_21
  4401  002D  282F               	goto	u256_20
  4402  002E                     u256_21:
  4403  002E  2878               	goto	i1l2729
  4404  002F                     u256_20:
  4405  002F                     i1l2709:
  4406                           
  4407                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4408  002F  01F0               	clrf	i1writeGPIO@writeValue
  4409  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4410  0031  300D               	movlw	13
  4411  0032  3187  2727  3180   	fcall	i1_writeGPIO
  4412  0035                     i1l2711:
  4413                           
  4414                           ;main.c: 67:             filteredIL = readFilteredIL();
  4415  0035  318E  263D  3180   	fcall	_readFilteredIL
  4416  0038  0871               	movf	?_readFilteredIL+1,w
  4417  0039  0021               	movlb	1	; select bank1
  4418  003A  00B1               	movwf	(_filteredIL+1)^(0+128)
  4419  003B  0870               	movf	?_readFilteredIL,w
  4420  003C  00B0               	movwf	_filteredIL^(0+128)
  4421  003D                     i1l2713:
  4422                           
  4423                           ;main.c: 69:             filteredVout = readFilteredVout();
  4424  003D  3187  2786  3180   	fcall	_readFilteredVout
  4425  0040  087B               	movf	?_readFilteredVout+1,w
  4426  0041  0020               	movlb	0	; select bank0
  4427  0042  00E0               	movwf	_filteredVout+1
  4428  0043  087A               	movf	?_readFilteredVout,w
  4429  0044  00DF               	movwf	_filteredVout
  4430  0045                     i1l2715:
  4431                           
  4432                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4433  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4434  0046  1D03               	btfss	3,2
  4435  0047  2849               	goto	u257_21
  4436  0048  284A               	goto	u257_20
  4437  0049                     u257_21:
  4438  0049  284D               	goto	i1l2719
  4439  004A                     u257_20:
  4440  004A                     i1l2717:
  4441                           
  4442                           ;main.c: 74:                 runPotScaling();
  4443  004A  3183  2313  3180   	fcall	_runPotScaling
  4444  004D                     i1l2719:
  4445                           
  4446                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4447  004D  0020               	movlb	0	; select bank0
  4448  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4449  004F  1D03               	btfss	3,2
  4450  0050  2852               	goto	u258_21
  4451  0051  2853               	goto	u258_20
  4452  0052                     u258_21:
  4453  0052  2863               	goto	i1l2723
  4454  0053                     u258_20:
  4455  0053                     i1l2721:
  4456                           
  4457                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4458  0053  318F  274A  3180   	fcall	_readFilteredDutyPot
  4459  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4460  0057  0021               	movlb	1	; select bank1
  4461  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4462  0059  087A               	movf	?_readFilteredDutyPot,w
  4463  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4464                           
  4465                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4466  005B  318F  27A5  3180   	fcall	_readFilteredFreqPot
  4467  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4468  005F  0021               	movlb	1	; select bank1
  4469  0060  00AF               	movwf	(_filteredFreqPot+1)^(0+128)
  4470  0061  087A               	movf	?_readFilteredFreqPot,w
  4471  0062  00AE               	movwf	_filteredFreqPot^(0+128)
  4472  0063                     i1l2723:
  4473                           
  4474                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4475  0063  0020               	movlb	0	; select bank0
  4476  0064  0366               	decf	_timerSlotQuarter,w	;volatile
  4477  0065  1D03               	btfss	3,2
  4478  0066  2868               	goto	u259_21
  4479  0067  286A               	goto	u259_20
  4480  0068                     u259_21:
  4481  0068  3001               	movlw	1
  4482  0069  286B               	goto	u260_20
  4483  006A                     u259_20:
  4484  006A  3000               	movlw	0
  4485  006B                     u260_20:
  4486  006B  00DE               	movwf	??_Tick490Hz
  4487  006C  085E               	movf	??_Tick490Hz,w
  4488  006D  00E6               	movwf	_timerSlotQuarter	;volatile
  4489  006E                     i1l2725:
  4490                           
  4491                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4492  006E  01F0               	clrf	i1writeGPIO@writeValue
  4493  006F  300C               	movlw	12
  4494  0070  3187  2727  3180   	fcall	i1_writeGPIO
  4495  0073                     i1l2727:
  4496                           
  4497                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4498  0073  01F0               	clrf	i1writeGPIO@writeValue
  4499  0074  300D               	movlw	13
  4500  0075  3187  2727  3180   	fcall	i1_writeGPIO
  4501  0078                     i1l2729:
  4502                           
  4503                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4504  0078  0020               	movlb	0	; select bank0
  4505  0079  0367               	decf	_timerSlotHalf,w	;volatile
  4506  007A  1D03               	btfss	3,2
  4507  007B  287D               	goto	u261_21
  4508  007C  287F               	goto	u261_20
  4509  007D                     u261_21:
  4510  007D  3001               	movlw	1
  4511  007E  2880               	goto	u262_20
  4512  007F                     u261_20:
  4513  007F  3000               	movlw	0
  4514  0080                     u262_20:
  4515  0080  00DE               	movwf	??_Tick490Hz
  4516  0081  085E               	movf	??_Tick490Hz,w
  4517  0082  00E7               	movwf	_timerSlotHalf	;volatile
  4518  0083                     i1l2731:
  4519                           
  4520                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4521  0083  110B               	bcf	11,2	;volatile
  4522  0084                     i1l110:
  4523  0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4524  0085  0009               	retfie
  4525  0086                     __end_of_Tick490Hz:
  4526                           
  4527                           	psect	text18
  4528  0C62                     __ptext18:	
  4529 ;; *************** function _setPWMDutyandPeriod *****************
  4530 ;; Defined at:
  4531 ;;		line 49 in file "PWM.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4534 ;;  period          1    2[COMMON] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4546 ;;      Params:         3       0       0       0       0       0
  4547 ;;      Locals:         0       0       0       0       0       0
  4548 ;;      Temps:          2       0       0       0       0       0
  4549 ;;      Totals:         5       0       0       0       0       0
  4550 ;;Total ram usage:        5 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_Tick490Hz
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559  0C62                     _setPWMDutyandPeriod:	
  4560                           ;psect for function _setPWMDutyandPeriod
  4561                           
  4562  0C62                     i1l2355:	
  4563                           ;incstack = 0
  4564                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4565                           
  4566                           
  4567                           ;PWM.c: 50:     PR2 = period;
  4568  0C62  0872               	movf	setPWMDutyandPeriod@period,w
  4569  0C63  0020               	movlb	0	; select bank0
  4570  0C64  009B               	movwf	27	;volatile
  4571  0C65                     i1l2357:
  4572                           
  4573                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4574  0C65  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4575  0C66  00F4               	movwf	??_setPWMDutyandPeriod+1
  4576  0C67  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4577  0C68  00F3               	movwf	??_setPWMDutyandPeriod
  4578  0C69  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4579  0C6A  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4580  0C6B  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4581  0C6C  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4582  0C6D  0873               	movf	??_setPWMDutyandPeriod,w
  4583  0C6E  0025               	movlb	5	; select bank5
  4584  0C6F  0091               	movwf	17	;volatile
  4585  0C70                     i1l2359:
  4586                           
  4587                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4588  0C70  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4589  0C71  3901               	andlw	1
  4590  0C72  00F3               	movwf	??_setPWMDutyandPeriod
  4591  0C73  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4592  0C74  0813               	movf	19,w	;volatile
  4593  0C75  0673               	xorwf	??_setPWMDutyandPeriod,w
  4594  0C76  39EF               	andlw	-17
  4595  0C77  0673               	xorwf	??_setPWMDutyandPeriod,w
  4596  0C78  0093               	movwf	19	;volatile
  4597                           
  4598                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4599  0C79  3002               	movlw	2
  4600  0C7A  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4601  0C7B  00F3               	movwf	??_setPWMDutyandPeriod
  4602  0C7C  3000               	movlw	0
  4603  0C7D  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4604  0C7E  00F4               	movwf	??_setPWMDutyandPeriod+1
  4605  0C7F  3000               	movlw	0
  4606  0C80  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4607  0C81  3002               	movlw	2
  4608  0C82  1903               	skipnz
  4609  0C83  0273               	subwf	??_setPWMDutyandPeriod,w
  4610  0C84  1803               	skipnc
  4611  0C85  2C87               	goto	u221_21
  4612  0C86  2C8A               	goto	u221_20
  4613  0C87                     u221_21:
  4614  0C87  0025               	movlb	5	; select bank5
  4615  0C88  1693               	bsf	19,5	;volatile
  4616  0C89  2C8C               	goto	u222_24
  4617  0C8A                     u221_20:
  4618  0C8A  0025               	movlb	5	; select bank5
  4619  0C8B  1293               	bcf	19,5	;volatile
  4620  0C8C                     u222_24:
  4621  0C8C                     i1l177:
  4622  0C8C  0008               	return
  4623  0C8D                     __end_of_setPWMDutyandPeriod:
  4624                           
  4625                           	psect	text19
  4626  0313                     __ptext19:	
  4627 ;; *************** function _runPotScaling *****************
  4628 ;; Defined at:
  4629 ;;		line 55 in file "Potentiometer.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  potScaled       4   12[BANK0 ] unsigned long 
  4634 ;;  minDuty         2   18[BANK0 ] unsigned short 
  4635 ;;  maxDuty         2   16[BANK0 ] unsigned short 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4645 ;;      Params:         0       0       0       0       0       0
  4646 ;;      Locals:         0       8       0       0       0       0
  4647 ;;      Temps:          0       6       0       0       0       0
  4648 ;;      Totals:         0      14       0       0       0       0
  4649 ;;Total ram usage:       14 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; Hardware stack levels required when called: 1
  4652 ;; This function calls:
  4653 ;;		___lldiv
  4654 ;;		___lmul
  4655 ;;		___wmul
  4656 ;; This function is called by:
  4657 ;;		_Tick490Hz
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661  0313                     _runPotScaling:	
  4662                           ;psect for function _runPotScaling
  4663                           
  4664  0313                     i1l2455:	
  4665                           ;incstack = 0
  4666                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4667                           
  4668                           
  4669                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4670  0313  0020               	movlb	0	; select bank0
  4671  0314  036C               	decf	_currentState,w
  4672  0315  1D03               	btfss	3,2
  4673  0316  2B18               	goto	u236_21
  4674  0317  2B19               	goto	u236_20
  4675  0318                     u236_21:
  4676  0318  2C4F               	goto	i1l379
  4677  0319                     u236_20:
  4678  0319                     i1l2457:
  4679                           
  4680                           ;Potentiometer.c: 58:         potSetCount++;
  4681  0319  3001               	movlw	1
  4682  031A  00A6               	movwf	??_runPotScaling
  4683  031B  0826               	movf	??_runPotScaling,w
  4684  031C  07E8               	addwf	_potSetCount,f
  4685                           
  4686                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4687  031D  3020               	movlw	32
  4688  031E  0668               	xorwf	_potSetCount,w
  4689  031F  1D03               	btfss	3,2
  4690  0320  2B22               	goto	u237_21
  4691  0321  2B23               	goto	u237_20
  4692  0322                     u237_21:
  4693  0322  2C4F               	goto	i1l379
  4694  0323                     u237_20:
  4695  0323                     i1l2459:
  4696                           
  4697                           ;Potentiometer.c: 63:             uint32_t potScaled = (uint32_t) ((uint32_t)((uint32_t)
      +                          (filteredFreqPot - 51) * 270) >> 8);
  4698  0323  0021               	movlb	1	; select bank1
  4699  0324  082E               	movf	_filteredFreqPot^(0+128),w
  4700  0325  3ECD               	addlw	205
  4701  0326  00F0               	movwf	___lmul@multiplier
  4702  0327  30FF               	movlw	255
  4703  0328  3D2F               	addwfc	(_filteredFreqPot+1)^(0+128),w
  4704  0329  00F1               	movwf	___lmul@multiplier+1
  4705  032A  01F2               	clrf	___lmul@multiplier+2
  4706  032B  01F3               	clrf	___lmul@multiplier+3
  4707  032C  3000               	movlw	0
  4708  032D  00F7               	movwf	___lmul@multiplicand+3
  4709  032E  3000               	movlw	0
  4710  032F  00F6               	movwf	___lmul@multiplicand+2
  4711  0330  3001               	movlw	1
  4712  0331  00F5               	movwf	___lmul@multiplicand+1
  4713  0332  300E               	movlw	14
  4714  0333  00F4               	movwf	___lmul@multiplicand
  4715  0334  318C  24BA  3183   	fcall	___lmul
  4716  0337  0870               	movf	?___lmul,w
  4717  0338  0020               	movlb	0	; select bank0
  4718  0339  00A6               	movwf	??_runPotScaling
  4719  033A  0871               	movf	?___lmul+1,w
  4720  033B  00A7               	movwf	??_runPotScaling+1
  4721  033C  0872               	movf	?___lmul+2,w
  4722  033D  00A8               	movwf	??_runPotScaling+2
  4723  033E  0873               	movf	?___lmul+3,w
  4724  033F  00A9               	movwf	??_runPotScaling+3
  4725  0340  3008               	movlw	8
  4726  0341                     u238_25:
  4727  0341  36A9               	lsrf	??_runPotScaling+3,f
  4728  0342  0CA8               	rrf	??_runPotScaling+2,f
  4729  0343  0CA7               	rrf	??_runPotScaling+1,f
  4730  0344  0CA6               	rrf	??_runPotScaling,f
  4731  0345                     u238_20:
  4732  0345  0B89               	decfsz	9,f
  4733  0346  2B41               	goto	u238_25
  4734  0347  0829               	movf	??_runPotScaling+3,w
  4735  0348  00AF               	movwf	runPotScaling@potScaled+3
  4736  0349  0828               	movf	??_runPotScaling+2,w
  4737  034A  00AE               	movwf	runPotScaling@potScaled+2
  4738  034B  0827               	movf	??_runPotScaling+1,w
  4739  034C  00AD               	movwf	runPotScaling@potScaled+1
  4740  034D  0826               	movf	??_runPotScaling,w
  4741  034E  00AC               	movwf	runPotScaling@potScaled
  4742                           
  4743                           ;Potentiometer.c: 64:             setPeriod = (uint32_t) ((potScaled) * (uint32_t)(180u 
      +                          -15u) >> (10)) + 15u;
  4744  034F  082F               	movf	runPotScaling@potScaled+3,w
  4745  0350  00F3               	movwf	___lmul@multiplier+3
  4746  0351  082E               	movf	runPotScaling@potScaled+2,w
  4747  0352  00F2               	movwf	___lmul@multiplier+2
  4748  0353  082D               	movf	runPotScaling@potScaled+1,w
  4749  0354  00F1               	movwf	___lmul@multiplier+1
  4750  0355  082C               	movf	runPotScaling@potScaled,w
  4751  0356  00F0               	movwf	___lmul@multiplier
  4752  0357  3000               	movlw	0
  4753  0358  00F7               	movwf	___lmul@multiplicand+3
  4754  0359  3000               	movlw	0
  4755  035A  00F6               	movwf	___lmul@multiplicand+2
  4756  035B  3000               	movlw	0
  4757  035C  00F5               	movwf	___lmul@multiplicand+1
  4758  035D  30A5               	movlw	165
  4759  035E  00F4               	movwf	___lmul@multiplicand
  4760  035F  318C  24BA  3183   	fcall	___lmul
  4761  0362  0870               	movf	?___lmul,w
  4762  0363  0020               	movlb	0	; select bank0
  4763  0364  00A6               	movwf	??_runPotScaling
  4764  0365  0871               	movf	?___lmul+1,w
  4765  0366  00A7               	movwf	??_runPotScaling+1
  4766  0367  0872               	movf	?___lmul+2,w
  4767  0368  00A8               	movwf	??_runPotScaling+2
  4768  0369  0873               	movf	?___lmul+3,w
  4769  036A  00A9               	movwf	??_runPotScaling+3
  4770  036B  300A               	movlw	10
  4771  036C                     u239_25:
  4772  036C  36A9               	lsrf	??_runPotScaling+3,f
  4773  036D  0CA8               	rrf	??_runPotScaling+2,f
  4774  036E  0CA7               	rrf	??_runPotScaling+1,f
  4775  036F  0CA6               	rrf	??_runPotScaling,f
  4776  0370                     u239_20:
  4777  0370  0B89               	decfsz	9,f
  4778  0371  2B6C               	goto	u239_25
  4779  0372  0826               	movf	??_runPotScaling,w
  4780  0373  3E0F               	addlw	15
  4781  0374  00AA               	movwf	??_runPotScaling+4
  4782  0375  082A               	movf	??_runPotScaling+4,w
  4783  0376  00EE               	movwf	_setPeriod
  4784                           
  4785                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4786  0377  3000               	movlw	0
  4787  0378  00F9               	movwf	___lldiv@divisor+3
  4788  0379  3000               	movlw	0
  4789  037A  00F8               	movwf	___lldiv@divisor+2
  4790  037B  3000               	movlw	0
  4791  037C  00F7               	movwf	___lldiv@divisor+1
  4792  037D  3019               	movlw	25
  4793  037E  00F6               	movwf	___lldiv@divisor
  4794  037F  305A               	movlw	90
  4795  0380  00F2               	movwf	___wmul@multiplicand
  4796  0381  3000               	movlw	0
  4797  0382  00F3               	movwf	___wmul@multiplicand+1
  4798  0383  086E               	movf	_setPeriod,w
  4799  0384  00A6               	movwf	??_runPotScaling
  4800  0385  01A7               	clrf	??_runPotScaling+1
  4801  0386  0826               	movf	??_runPotScaling,w
  4802  0387  00F0               	movwf	___wmul@multiplier
  4803  0388  0827               	movf	??_runPotScaling+1,w
  4804  0389  00F1               	movwf	___wmul@multiplier+1
  4805  038A  3187  27E1  3183   	fcall	___wmul
  4806  038D  0870               	movf	?___wmul,w
  4807  038E  0020               	movlb	0	; select bank0
  4808  038F  00A8               	movwf	??_runPotScaling+2
  4809  0390  0871               	movf	?___wmul+1,w
  4810  0391  00A9               	movwf	??_runPotScaling+3
  4811  0392  01AA               	clrf	??_runPotScaling+4
  4812  0393  01AB               	clrf	??_runPotScaling+5
  4813  0394  082B               	movf	??_runPotScaling+5,w
  4814  0395  00FD               	movwf	___lldiv@dividend+3
  4815  0396  082A               	movf	??_runPotScaling+4,w
  4816  0397  00FC               	movwf	___lldiv@dividend+2
  4817  0398  0829               	movf	??_runPotScaling+3,w
  4818  0399  00FB               	movwf	___lldiv@dividend+1
  4819  039A  0828               	movf	??_runPotScaling+2,w
  4820  039B  00FA               	movwf	___lldiv@dividend
  4821  039C  318E  26EF  3183   	fcall	___lldiv
  4822  039F  0877               	movf	?___lldiv+1,w
  4823  03A0  0020               	movlb	0	; select bank0
  4824  03A1  00B1               	movwf	runPotScaling@maxDuty+1
  4825  03A2  0876               	movf	?___lldiv,w
  4826  03A3  00B0               	movwf	runPotScaling@maxDuty
  4827                           
  4828                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4829  03A4  3000               	movlw	0
  4830  03A5  00F9               	movwf	___lldiv@divisor+3
  4831  03A6  3000               	movlw	0
  4832  03A7  00F8               	movwf	___lldiv@divisor+2
  4833  03A8  3000               	movlw	0
  4834  03A9  00F7               	movwf	___lldiv@divisor+1
  4835  03AA  3019               	movlw	25
  4836  03AB  00F6               	movwf	___lldiv@divisor
  4837  03AC  300A               	movlw	10
  4838  03AD  00F2               	movwf	___wmul@multiplicand
  4839  03AE  3000               	movlw	0
  4840  03AF  00F3               	movwf	___wmul@multiplicand+1
  4841  03B0  086E               	movf	_setPeriod,w
  4842  03B1  00A6               	movwf	??_runPotScaling
  4843  03B2  01A7               	clrf	??_runPotScaling+1
  4844  03B3  0826               	movf	??_runPotScaling,w
  4845  03B4  00F0               	movwf	___wmul@multiplier
  4846  03B5  0827               	movf	??_runPotScaling+1,w
  4847  03B6  00F1               	movwf	___wmul@multiplier+1
  4848  03B7  3187  27E1  3183   	fcall	___wmul
  4849  03BA  0870               	movf	?___wmul,w
  4850  03BB  0020               	movlb	0	; select bank0
  4851  03BC  00A8               	movwf	??_runPotScaling+2
  4852  03BD  0871               	movf	?___wmul+1,w
  4853  03BE  00A9               	movwf	??_runPotScaling+3
  4854  03BF  01AA               	clrf	??_runPotScaling+4
  4855  03C0  01AB               	clrf	??_runPotScaling+5
  4856  03C1  082B               	movf	??_runPotScaling+5,w
  4857  03C2  00FD               	movwf	___lldiv@dividend+3
  4858  03C3  082A               	movf	??_runPotScaling+4,w
  4859  03C4  00FC               	movwf	___lldiv@dividend+2
  4860  03C5  0829               	movf	??_runPotScaling+3,w
  4861  03C6  00FB               	movwf	___lldiv@dividend+1
  4862  03C7  0828               	movf	??_runPotScaling+2,w
  4863  03C8  00FA               	movwf	___lldiv@dividend
  4864  03C9  318E  26EF  3183   	fcall	___lldiv
  4865  03CC  0877               	movf	?___lldiv+1,w
  4866  03CD  0020               	movlb	0	; select bank0
  4867  03CE  00B3               	movwf	runPotScaling@minDuty+1
  4868  03CF  0876               	movf	?___lldiv,w
  4869  03D0  00B2               	movwf	runPotScaling@minDuty
  4870                           
  4871                           ;Potentiometer.c: 72:             potScaled = (uint32_t) ((uint32_t)((uint32_t)(filtered
      +                          DutyPot - 51) * 270) >> 8);
  4872  03D1  0021               	movlb	1	; select bank1
  4873  03D2  082C               	movf	_filteredDutyPot^(0+128),w
  4874  03D3  3ECD               	addlw	205
  4875  03D4  00F0               	movwf	___lmul@multiplier
  4876  03D5  30FF               	movlw	255
  4877  03D6  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4878  03D7  00F1               	movwf	___lmul@multiplier+1
  4879  03D8  01F2               	clrf	___lmul@multiplier+2
  4880  03D9  01F3               	clrf	___lmul@multiplier+3
  4881  03DA  3000               	movlw	0
  4882  03DB  00F7               	movwf	___lmul@multiplicand+3
  4883  03DC  3000               	movlw	0
  4884  03DD  00F6               	movwf	___lmul@multiplicand+2
  4885  03DE  3001               	movlw	1
  4886  03DF  00F5               	movwf	___lmul@multiplicand+1
  4887  03E0  300E               	movlw	14
  4888  03E1  00F4               	movwf	___lmul@multiplicand
  4889  03E2  318C  24BA  3183   	fcall	___lmul
  4890  03E5  0870               	movf	?___lmul,w
  4891  03E6  0020               	movlb	0	; select bank0
  4892  03E7  00A6               	movwf	??_runPotScaling
  4893  03E8  0871               	movf	?___lmul+1,w
  4894  03E9  00A7               	movwf	??_runPotScaling+1
  4895  03EA  0872               	movf	?___lmul+2,w
  4896  03EB  00A8               	movwf	??_runPotScaling+2
  4897  03EC  0873               	movf	?___lmul+3,w
  4898  03ED  00A9               	movwf	??_runPotScaling+3
  4899  03EE  3008               	movlw	8
  4900  03EF                     u240_25:
  4901  03EF  36A9               	lsrf	??_runPotScaling+3,f
  4902  03F0  0CA8               	rrf	??_runPotScaling+2,f
  4903  03F1  0CA7               	rrf	??_runPotScaling+1,f
  4904  03F2  0CA6               	rrf	??_runPotScaling,f
  4905  03F3                     u240_20:
  4906  03F3  0B89               	decfsz	9,f
  4907  03F4  2BEF               	goto	u240_25
  4908  03F5  0829               	movf	??_runPotScaling+3,w
  4909  03F6  00AF               	movwf	runPotScaling@potScaled+3
  4910  03F7  0828               	movf	??_runPotScaling+2,w
  4911  03F8  00AE               	movwf	runPotScaling@potScaled+2
  4912  03F9  0827               	movf	??_runPotScaling+1,w
  4913  03FA  00AD               	movwf	runPotScaling@potScaled+1
  4914  03FB  0826               	movf	??_runPotScaling,w
  4915  03FC  00AC               	movwf	runPotScaling@potScaled
  4916                           
  4917                           ;Potentiometer.c: 73:             setDuty = ((uint32_t)((potScaled) * (uint32_t)(maxDuty
      +                          -minDuty)) >> (10)) + minDuty;
  4918  03FD  0832               	movf	runPotScaling@minDuty,w
  4919  03FE  0230               	subwf	runPotScaling@maxDuty,w
  4920  03FF  00F0               	movwf	___lmul@multiplier
  4921  0400  0833               	movf	runPotScaling@minDuty+1,w
  4922  0401  3B31               	subwfb	runPotScaling@maxDuty+1,w
  4923  0402  00F1               	movwf	___lmul@multiplier+1
  4924  0403  01F2               	clrf	___lmul@multiplier+2
  4925  0404  01F3               	clrf	___lmul@multiplier+3
  4926  0405  082F               	movf	runPotScaling@potScaled+3,w
  4927  0406  00F7               	movwf	___lmul@multiplicand+3
  4928  0407  082E               	movf	runPotScaling@potScaled+2,w
  4929  0408  00F6               	movwf	___lmul@multiplicand+2
  4930  0409  082D               	movf	runPotScaling@potScaled+1,w
  4931  040A  00F5               	movwf	___lmul@multiplicand+1
  4932  040B  082C               	movf	runPotScaling@potScaled,w
  4933  040C  00F4               	movwf	___lmul@multiplicand
  4934  040D  318C  24BA  3183   	fcall	___lmul
  4935  0410  0870               	movf	?___lmul,w
  4936  0411  0020               	movlb	0	; select bank0
  4937  0412  00A6               	movwf	??_runPotScaling
  4938  0413  0871               	movf	?___lmul+1,w
  4939  0414  00A7               	movwf	??_runPotScaling+1
  4940  0415  0872               	movf	?___lmul+2,w
  4941  0416  00A8               	movwf	??_runPotScaling+2
  4942  0417  0873               	movf	?___lmul+3,w
  4943  0418  00A9               	movwf	??_runPotScaling+3
  4944  0419  300A               	movlw	10
  4945  041A                     u241_25:
  4946  041A  36A9               	lsrf	??_runPotScaling+3,f
  4947  041B  0CA8               	rrf	??_runPotScaling+2,f
  4948  041C  0CA7               	rrf	??_runPotScaling+1,f
  4949  041D  0CA6               	rrf	??_runPotScaling,f
  4950  041E                     u241_20:
  4951  041E  0B89               	decfsz	9,f
  4952  041F  2C1A               	goto	u241_25
  4953  0420  0832               	movf	runPotScaling@minDuty,w
  4954  0421  0726               	addwf	??_runPotScaling,w
  4955  0422  00E3               	movwf	_setDuty
  4956  0423  0833               	movf	runPotScaling@minDuty+1,w
  4957  0424  3D27               	addwfc	??_runPotScaling+1,w
  4958  0425  00E4               	movwf	_setDuty+1
  4959  0426                     i1l2461:
  4960                           
  4961                           ;Potentiometer.c: 74:             setDuty = (maxDuty) - (setDuty - minDuty);
  4962  0426  0863               	movf	_setDuty,w
  4963  0427  0232               	subwf	runPotScaling@minDuty,w
  4964  0428  00A6               	movwf	??_runPotScaling
  4965  0429  0864               	movf	_setDuty+1,w
  4966  042A  3B33               	subwfb	runPotScaling@minDuty+1,w
  4967  042B  00A7               	movwf	??_runPotScaling+1
  4968  042C  0830               	movf	runPotScaling@maxDuty,w
  4969  042D  0726               	addwf	??_runPotScaling,w
  4970  042E  00E3               	movwf	_setDuty
  4971  042F  0831               	movf	runPotScaling@maxDuty+1,w
  4972  0430  3D27               	addwfc	??_runPotScaling+1,w
  4973  0431  00E4               	movwf	_setDuty+1
  4974  0432                     i1l2463:
  4975                           
  4976                           ;Potentiometer.c: 77:             if(setDuty > maxDuty) setDuty = maxDuty;
  4977  0432  0864               	movf	_setDuty+1,w
  4978  0433  0231               	subwf	runPotScaling@maxDuty+1,w
  4979  0434  1D03               	skipz
  4980  0435  2C38               	goto	u242_25
  4981  0436  0863               	movf	_setDuty,w
  4982  0437  0230               	subwf	runPotScaling@maxDuty,w
  4983  0438                     u242_25:
  4984  0438  1803               	skipnc
  4985  0439  2C3B               	goto	u242_21
  4986  043A  2C3C               	goto	u242_20
  4987  043B                     u242_21:
  4988  043B  2C40               	goto	i1l377
  4989  043C                     u242_20:
  4990  043C                     i1l2465:
  4991  043C  0831               	movf	runPotScaling@maxDuty+1,w
  4992  043D  00E4               	movwf	_setDuty+1
  4993  043E  0830               	movf	runPotScaling@maxDuty,w
  4994  043F  00E3               	movwf	_setDuty
  4995  0440                     i1l377:
  4996                           
  4997                           ;Potentiometer.c: 78:             if(setDuty < minDuty) setDuty = minDuty;
  4998  0440  0833               	movf	runPotScaling@minDuty+1,w
  4999  0441  0264               	subwf	_setDuty+1,w
  5000  0442  1D03               	skipz
  5001  0443  2C46               	goto	u243_25
  5002  0444  0832               	movf	runPotScaling@minDuty,w
  5003  0445  0263               	subwf	_setDuty,w
  5004  0446                     u243_25:
  5005  0446  1803               	skipnc
  5006  0447  2C49               	goto	u243_21
  5007  0448  2C4A               	goto	u243_20
  5008  0449                     u243_21:
  5009  0449  2C4E               	goto	i1l2469
  5010  044A                     u243_20:
  5011  044A                     i1l2467:
  5012  044A  0833               	movf	runPotScaling@minDuty+1,w
  5013  044B  00E4               	movwf	_setDuty+1
  5014  044C  0832               	movf	runPotScaling@minDuty,w
  5015  044D  00E3               	movwf	_setDuty
  5016  044E                     i1l2469:
  5017                           
  5018                           ;Potentiometer.c: 80:             potSetCount = 0;
  5019  044E  01E8               	clrf	_potSetCount
  5020  044F                     i1l379:
  5021  044F  0008               	return
  5022  0450                     __end_of_runPotScaling:
  5023                           
  5024                           	psect	text20
  5025  0786                     __ptext20:	
  5026 ;; *************** function _readFilteredVout *****************
  5027 ;; Defined at:
  5028 ;;		line 39 in file "Controller.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  i               1    8[BANK0 ] unsigned char 
  5033 ;;  i               1    9[BANK0 ] unsigned char 
  5034 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  2   10[COMMON] unsigned short 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5044 ;;      Params:         2       0       0       0       0       0
  5045 ;;      Locals:         0       6       0       0       0       0
  5046 ;;      Temps:          0       4       0       0       0       0
  5047 ;;      Totals:         2      10       0       0       0       0
  5048 ;;Total ram usage:       12 bytes
  5049 ;; Hardware stack levels used: 1
  5050 ;; Hardware stack levels required when called: 1
  5051 ;; This function calls:
  5052 ;;		_readADCRaw
  5053 ;; This function is called by:
  5054 ;;		_Tick490Hz
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058  0786                     _readFilteredVout:	
  5059                           ;psect for function _readFilteredVout
  5060                           
  5061  0786                     i1l2423:	
  5062                           ;incstack = 0
  5063                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5064                           
  5065                           
  5066                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  5067  0786  0020               	movlb	0	; select bank0
  5068  0787  01A9               	clrf	readFilteredVout@i
  5069  0788                     i1l2429:
  5070  0788  3529               	lslf	readFilteredVout@i,w
  5071  0789  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  5072  078A  0086               	movwf	6
  5073  078B  3001               	movlw	1	; select bank3/4
  5074  078C  0087               	movwf	7
  5075  078D  3529               	lslf	readFilteredVout@i,w
  5076  078E  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5077  078F  0084               	movwf	4
  5078  0790  3001               	movlw	1	; select bank3/4
  5079  0791  0085               	movwf	5
  5080  0792  3F40               	moviw [0]fsr1
  5081  0793  3F80               	movwi [0]fsr0
  5082  0794  3F41               	moviw [1]fsr1
  5083  0795  3F81               	movwi [1]fsr0
  5084  0796                     i1l2431:
  5085  0796  3001               	movlw	1
  5086  0797  00A0               	movwf	??_readFilteredVout
  5087  0798  0820               	movf	??_readFilteredVout,w
  5088  0799  07A9               	addwf	readFilteredVout@i,f
  5089  079A                     i1l2433:
  5090  079A  300F               	movlw	15
  5091  079B  0229               	subwf	readFilteredVout@i,w
  5092  079C  1C03               	skipc
  5093  079D  2F9F               	goto	u233_21
  5094  079E  2FA0               	goto	u233_20
  5095  079F                     u233_21:
  5096  079F  2F88               	goto	i1l2429
  5097  07A0                     u233_20:
  5098  07A0                     i1l2435:
  5099                           
  5100                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  5101  07A0  3004               	movlw	4
  5102  07A1  318E  2695  3187   	fcall	_readADCRaw
  5103  07A4  0871               	movf	?_readADCRaw+1,w
  5104  07A5  0023               	movlb	3	; select bank3
  5105  07A6  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5106  07A7  0870               	movf	?_readADCRaw,w
  5107  07A8  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5108  07A9                     i1l2437:
  5109                           
  5110                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  5111  07A9  3000               	movlw	0
  5112  07AA  0020               	movlb	0	; select bank0
  5113  07AB  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5114  07AC  3000               	movlw	0
  5115  07AD  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5116  07AE  3000               	movlw	0
  5117  07AF  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5118  07B0  3000               	movlw	0
  5119  07B1  00A4               	movwf	readFilteredVout@sumOfSamples
  5120  07B2                     i1l2439:
  5121                           
  5122                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  5123  07B2  01A8               	clrf	readFilteredVout@i_836
  5124  07B3                     i1l2445:
  5125  07B3  3528               	lslf	readFilteredVout@i_836,w
  5126  07B4  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5127  07B5  0086               	movwf	6
  5128  07B6  3001               	movlw	1	; select bank3/4
  5129  07B7  0087               	movwf	7
  5130  07B8  3F40               	moviw [0]fsr1
  5131  07B9  00A0               	movwf	??_readFilteredVout
  5132  07BA  3F41               	moviw [1]fsr1
  5133  07BB  00A1               	movwf	??_readFilteredVout+1
  5134  07BC  0820               	movf	??_readFilteredVout,w
  5135  07BD  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5136  07BE  0821               	movf	??_readFilteredVout+1,w
  5137  07BF  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5138  07C0  3000               	movlw	0
  5139  07C1  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5140  07C2  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5141  07C3                     i1l2447:
  5142  07C3  3001               	movlw	1
  5143  07C4  00A0               	movwf	??_readFilteredVout
  5144  07C5  0820               	movf	??_readFilteredVout,w
  5145  07C6  07A8               	addwf	readFilteredVout@i_836,f
  5146  07C7                     i1l2449:
  5147  07C7  3010               	movlw	16
  5148  07C8  0228               	subwf	readFilteredVout@i_836,w
  5149  07C9  1C03               	skipc
  5150  07CA  2FCC               	goto	u234_21
  5151  07CB  2FCD               	goto	u234_20
  5152  07CC                     u234_21:
  5153  07CC  2FB3               	goto	i1l2445
  5154  07CD                     u234_20:
  5155  07CD                     i1l2451:
  5156                           
  5157                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  5158  07CD  0824               	movf	readFilteredVout@sumOfSamples,w
  5159  07CE  00A0               	movwf	??_readFilteredVout
  5160  07CF  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5161  07D0  00A1               	movwf	??_readFilteredVout+1
  5162  07D1  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5163  07D2  00A2               	movwf	??_readFilteredVout+2
  5164  07D3  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5165  07D4  00A3               	movwf	??_readFilteredVout+3
  5166  07D5  3004               	movlw	4
  5167  07D6                     u235_25:
  5168  07D6  36A3               	lsrf	??_readFilteredVout+3,f
  5169  07D7  0CA2               	rrf	??_readFilteredVout+2,f
  5170  07D8  0CA1               	rrf	??_readFilteredVout+1,f
  5171  07D9  0CA0               	rrf	??_readFilteredVout,f
  5172  07DA                     u235_20:
  5173  07DA  0B89               	decfsz	9,f
  5174  07DB  2FD6               	goto	u235_25
  5175  07DC  0821               	movf	??_readFilteredVout+1,w
  5176  07DD  00FB               	movwf	?_readFilteredVout+1
  5177  07DE  0820               	movf	??_readFilteredVout,w
  5178  07DF  00FA               	movwf	?_readFilteredVout
  5179  07E0                     i1l437:
  5180  07E0  0008               	return
  5181  07E1                     __end_of_readFilteredVout:
  5182                           
  5183                           	psect	text21
  5184  0E3D                     __ptext21:	
  5185 ;; *************** function _readFilteredIL *****************
  5186 ;; Defined at:
  5187 ;;		line 56 in file "CurrentSensor.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  i               1   10[COMMON] unsigned char 
  5192 ;;  i               1   11[COMMON] unsigned char 
  5193 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  2    0[COMMON] unsigned short 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5203 ;;      Params:         2       0       0       0       0       0
  5204 ;;      Locals:         6       0       0       0       0       0
  5205 ;;      Temps:          4       0       0       0       0       0
  5206 ;;      Totals:        12       0       0       0       0       0
  5207 ;;Total ram usage:       12 bytes
  5208 ;; Hardware stack levels used: 1
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		_Tick490Hz
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216  0E3D                     _readFilteredIL:	
  5217                           ;psect for function _readFilteredIL
  5218                           
  5219  0E3D                     i1l2393:	
  5220                           ;incstack = 0
  5221                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5222                           
  5223                           
  5224                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5225  0E3D  01FB               	clrf	readFilteredIL@i
  5226  0E3E                     i1l2399:
  5227  0E3E  357B               	lslf	readFilteredIL@i,w
  5228  0E3F  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5229  0E40  0086               	movwf	6
  5230  0E41  3001               	movlw	1	; select bank2/3
  5231  0E42  0087               	movwf	7
  5232  0E43  357B               	lslf	readFilteredIL@i,w
  5233  0E44  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5234  0E45  0084               	movwf	4
  5235  0E46  3001               	movlw	1	; select bank2/3
  5236  0E47  0085               	movwf	5
  5237  0E48  3F40               	moviw [0]fsr1
  5238  0E49  3F80               	movwi [0]fsr0
  5239  0E4A  3F41               	moviw [1]fsr1
  5240  0E4B  3F81               	movwi [1]fsr0
  5241  0E4C                     i1l2401:
  5242  0E4C  3001               	movlw	1
  5243  0E4D  00F2               	movwf	??_readFilteredIL
  5244  0E4E  0872               	movf	??_readFilteredIL,w
  5245  0E4F  07FB               	addwf	readFilteredIL@i,f
  5246  0E50                     i1l2403:
  5247  0E50  300F               	movlw	15
  5248  0E51  027B               	subwf	readFilteredIL@i,w
  5249  0E52  1C03               	skipc
  5250  0E53  2E55               	goto	u230_21
  5251  0E54  2E56               	goto	u230_20
  5252  0E55                     u230_21:
  5253  0E55  2E3E               	goto	i1l2399
  5254  0E56                     u230_20:
  5255  0E56                     i1l2405:
  5256                           
  5257                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5258  0E56  0020               	movlb	0	; select bank0
  5259  0E57  0862               	movf	_latestIL+1,w	;volatile
  5260  0E58  0022               	movlb	2	; select bank2
  5261  0E59  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5262  0E5A  0020               	movlb	0	; select bank0
  5263  0E5B  0861               	movf	_latestIL,w	;volatile
  5264  0E5C  0022               	movlb	2	; select bank2
  5265  0E5D  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5266                           
  5267                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5268  0E5E  3000               	movlw	0
  5269  0E5F  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5270  0E60  3000               	movlw	0
  5271  0E61  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5272  0E62  3000               	movlw	0
  5273  0E63  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5274  0E64  3000               	movlw	0
  5275  0E65  00F6               	movwf	readFilteredIL@sumOfSamples
  5276  0E66                     i1l2407:
  5277                           
  5278                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5279  0E66  01FA               	clrf	readFilteredIL@i_926
  5280  0E67                     i1l2413:
  5281  0E67  357A               	lslf	readFilteredIL@i_926,w
  5282  0E68  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5283  0E69  0086               	movwf	6
  5284  0E6A  3001               	movlw	1	; select bank2/3
  5285  0E6B  0087               	movwf	7
  5286  0E6C  3F40               	moviw [0]fsr1
  5287  0E6D  00F2               	movwf	??_readFilteredIL
  5288  0E6E  3F41               	moviw [1]fsr1
  5289  0E6F  00F3               	movwf	??_readFilteredIL+1
  5290  0E70  0872               	movf	??_readFilteredIL,w
  5291  0E71  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5292  0E72  0873               	movf	??_readFilteredIL+1,w
  5293  0E73  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5294  0E74  3000               	movlw	0
  5295  0E75  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5296  0E76  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5297  0E77                     i1l2415:
  5298  0E77  3001               	movlw	1
  5299  0E78  00F2               	movwf	??_readFilteredIL
  5300  0E79  0872               	movf	??_readFilteredIL,w
  5301  0E7A  07FA               	addwf	readFilteredIL@i_926,f
  5302  0E7B                     i1l2417:
  5303  0E7B  3010               	movlw	16
  5304  0E7C  027A               	subwf	readFilteredIL@i_926,w
  5305  0E7D  1C03               	skipc
  5306  0E7E  2E80               	goto	u231_21
  5307  0E7F  2E81               	goto	u231_20
  5308  0E80                     u231_21:
  5309  0E80  2E67               	goto	i1l2413
  5310  0E81                     u231_20:
  5311  0E81                     i1l2419:
  5312                           
  5313                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5314  0E81  0876               	movf	readFilteredIL@sumOfSamples,w
  5315  0E82  00F2               	movwf	??_readFilteredIL
  5316  0E83  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5317  0E84  00F3               	movwf	??_readFilteredIL+1
  5318  0E85  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5319  0E86  00F4               	movwf	??_readFilteredIL+2
  5320  0E87  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5321  0E88  00F5               	movwf	??_readFilteredIL+3
  5322  0E89  3004               	movlw	4
  5323  0E8A                     u232_25:
  5324  0E8A  36F5               	lsrf	??_readFilteredIL+3,f
  5325  0E8B  0CF4               	rrf	??_readFilteredIL+2,f
  5326  0E8C  0CF3               	rrf	??_readFilteredIL+1,f
  5327  0E8D  0CF2               	rrf	??_readFilteredIL,f
  5328  0E8E                     u232_20:
  5329  0E8E  0B89               	decfsz	9,f
  5330  0E8F  2E8A               	goto	u232_25
  5331  0E90  0873               	movf	??_readFilteredIL+1,w
  5332  0E91  00F1               	movwf	?_readFilteredIL+1
  5333  0E92  0872               	movf	??_readFilteredIL,w
  5334  0E93  00F0               	movwf	?_readFilteredIL
  5335  0E94                     i1l531:
  5336  0E94  0008               	return
  5337  0E95                     __end_of_readFilteredIL:
  5338                           
  5339                           	psect	text22
  5340  0FA5                     __ptext22:	
  5341 ;; *************** function _readFilteredFreqPot *****************
  5342 ;; Defined at:
  5343 ;;		line 39 in file "Potentiometer.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;  i               1    8[BANK0 ] unsigned char 
  5348 ;;  i               1    9[BANK0 ] unsigned char 
  5349 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  2   10[COMMON] unsigned short 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5359 ;;      Params:         2       0       0       0       0       0
  5360 ;;      Locals:         0       6       0       0       0       0
  5361 ;;      Temps:          0       4       0       0       0       0
  5362 ;;      Totals:         2      10       0       0       0       0
  5363 ;;Total ram usage:       12 bytes
  5364 ;; Hardware stack levels used: 1
  5365 ;; Hardware stack levels required when called: 1
  5366 ;; This function calls:
  5367 ;;		_readADCRaw
  5368 ;; This function is called by:
  5369 ;;		_Tick490Hz
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373  0FA5                     _readFilteredFreqPot:	
  5374                           ;psect for function _readFilteredFreqPot
  5375                           
  5376  0FA5                     i1l2503:	
  5377                           ;incstack = 0
  5378                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5379                           
  5380                           
  5381                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5382  0FA5  0020               	movlb	0	; select bank0
  5383  0FA6  01A9               	clrf	readFilteredFreqPot@i
  5384  0FA7                     i1l2509:
  5385  0FA7  3529               	lslf	readFilteredFreqPot@i,w
  5386  0FA8  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5387  0FA9  0086               	movwf	6
  5388  0FAA  3001               	movlw	1	; select bank3/4
  5389  0FAB  0087               	movwf	7
  5390  0FAC  3529               	lslf	readFilteredFreqPot@i,w
  5391  0FAD  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5392  0FAE  0084               	movwf	4
  5393  0FAF  3001               	movlw	1	; select bank3/4
  5394  0FB0  0085               	movwf	5
  5395  0FB1  3F40               	moviw [0]fsr1
  5396  0FB2  3F80               	movwi [0]fsr0
  5397  0FB3  3F41               	moviw [1]fsr1
  5398  0FB4  3F81               	movwi [1]fsr0
  5399  0FB5                     i1l2511:
  5400  0FB5  3001               	movlw	1
  5401  0FB6  00A0               	movwf	??_readFilteredFreqPot
  5402  0FB7  0820               	movf	??_readFilteredFreqPot,w
  5403  0FB8  07A9               	addwf	readFilteredFreqPot@i,f
  5404  0FB9                     i1l2513:
  5405  0FB9  300F               	movlw	15
  5406  0FBA  0229               	subwf	readFilteredFreqPot@i,w
  5407  0FBB  1C03               	skipc
  5408  0FBC  2FBE               	goto	u247_21
  5409  0FBD  2FBF               	goto	u247_20
  5410  0FBE                     u247_21:
  5411  0FBE  2FA7               	goto	i1l2509
  5412  0FBF                     u247_20:
  5413  0FBF                     i1l2515:
  5414                           
  5415                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5416  0FBF  300A               	movlw	10
  5417  0FC0  318E  2695  318F   	fcall	_readADCRaw
  5418  0FC3  0871               	movf	?_readADCRaw+1,w
  5419  0FC4  0023               	movlb	3	; select bank3
  5420  0FC5  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5421  0FC6  0870               	movf	?_readADCRaw,w
  5422  0FC7  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5423  0FC8                     i1l2517:
  5424                           
  5425                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5426  0FC8  3000               	movlw	0
  5427  0FC9  0020               	movlb	0	; select bank0
  5428  0FCA  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5429  0FCB  3000               	movlw	0
  5430  0FCC  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5431  0FCD  3000               	movlw	0
  5432  0FCE  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5433  0FCF  3000               	movlw	0
  5434  0FD0  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5435  0FD1                     i1l2519:
  5436                           
  5437                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5438  0FD1  01A8               	clrf	readFilteredFreqPot@i_758
  5439  0FD2                     i1l2525:
  5440  0FD2  3528               	lslf	readFilteredFreqPot@i_758,w
  5441  0FD3  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5442  0FD4  0086               	movwf	6
  5443  0FD5  3001               	movlw	1	; select bank3/4
  5444  0FD6  0087               	movwf	7
  5445  0FD7  3F40               	moviw [0]fsr1
  5446  0FD8  00A0               	movwf	??_readFilteredFreqPot
  5447  0FD9  3F41               	moviw [1]fsr1
  5448  0FDA  00A1               	movwf	??_readFilteredFreqPot+1
  5449  0FDB  0820               	movf	??_readFilteredFreqPot,w
  5450  0FDC  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5451  0FDD  0821               	movf	??_readFilteredFreqPot+1,w
  5452  0FDE  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5453  0FDF  3000               	movlw	0
  5454  0FE0  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5455  0FE1  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5456  0FE2                     i1l2527:
  5457  0FE2  3001               	movlw	1
  5458  0FE3  00A0               	movwf	??_readFilteredFreqPot
  5459  0FE4  0820               	movf	??_readFilteredFreqPot,w
  5460  0FE5  07A8               	addwf	readFilteredFreqPot@i_758,f
  5461  0FE6                     i1l2529:
  5462  0FE6  3010               	movlw	16
  5463  0FE7  0228               	subwf	readFilteredFreqPot@i_758,w
  5464  0FE8  1C03               	skipc
  5465  0FE9  2FEB               	goto	u248_21
  5466  0FEA  2FEC               	goto	u248_20
  5467  0FEB                     u248_21:
  5468  0FEB  2FD2               	goto	i1l2525
  5469  0FEC                     u248_20:
  5470  0FEC                     i1l2531:
  5471                           
  5472                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5473  0FEC  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5474  0FED  00A0               	movwf	??_readFilteredFreqPot
  5475  0FEE  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5476  0FEF  00A1               	movwf	??_readFilteredFreqPot+1
  5477  0FF0  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5478  0FF1  00A2               	movwf	??_readFilteredFreqPot+2
  5479  0FF2  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5480  0FF3  00A3               	movwf	??_readFilteredFreqPot+3
  5481  0FF4  3004               	movlw	4
  5482  0FF5                     u249_25:
  5483  0FF5  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5484  0FF6  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5485  0FF7  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5486  0FF8  0CA0               	rrf	??_readFilteredFreqPot,f
  5487  0FF9                     u249_20:
  5488  0FF9  0B89               	decfsz	9,f
  5489  0FFA  2FF5               	goto	u249_25
  5490  0FFB  0821               	movf	??_readFilteredFreqPot+1,w
  5491  0FFC  00FB               	movwf	?_readFilteredFreqPot+1
  5492  0FFD  0820               	movf	??_readFilteredFreqPot,w
  5493  0FFE  00FA               	movwf	?_readFilteredFreqPot
  5494  0FFF                     i1l372:
  5495  0FFF  0008               	return
  5496  1000                     __end_of_readFilteredFreqPot:
  5497                           
  5498                           	psect	text23
  5499  0F4A                     __ptext23:	
  5500 ;; *************** function _readFilteredDutyPot *****************
  5501 ;; Defined at:
  5502 ;;		line 25 in file "Potentiometer.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;		None
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  i               1    8[BANK0 ] unsigned char 
  5507 ;;  i               1    9[BANK0 ] unsigned char 
  5508 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  2   10[COMMON] unsigned short 
  5511 ;; Registers used:
  5512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5518 ;;      Params:         2       0       0       0       0       0
  5519 ;;      Locals:         0       6       0       0       0       0
  5520 ;;      Temps:          0       4       0       0       0       0
  5521 ;;      Totals:         2      10       0       0       0       0
  5522 ;;Total ram usage:       12 bytes
  5523 ;; Hardware stack levels used: 1
  5524 ;; Hardware stack levels required when called: 1
  5525 ;; This function calls:
  5526 ;;		_readADCRaw
  5527 ;; This function is called by:
  5528 ;;		_Tick490Hz
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532  0F4A                     _readFilteredDutyPot:	
  5533                           ;psect for function _readFilteredDutyPot
  5534                           
  5535  0F4A                     i1l2471:	
  5536                           ;incstack = 0
  5537                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5538                           
  5539                           
  5540                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5541  0F4A  0020               	movlb	0	; select bank0
  5542  0F4B  01A9               	clrf	readFilteredDutyPot@i
  5543  0F4C                     i1l2477:
  5544  0F4C  3529               	lslf	readFilteredDutyPot@i,w
  5545  0F4D  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5546  0F4E  0086               	movwf	6
  5547  0F4F  3002               	movlw	2	; select bank4/5
  5548  0F50  0087               	movwf	7
  5549  0F51  3529               	lslf	readFilteredDutyPot@i,w
  5550  0F52  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5551  0F53  0084               	movwf	4
  5552  0F54  3002               	movlw	2	; select bank4/5
  5553  0F55  0085               	movwf	5
  5554  0F56  3F40               	moviw [0]fsr1
  5555  0F57  3F80               	movwi [0]fsr0
  5556  0F58  3F41               	moviw [1]fsr1
  5557  0F59  3F81               	movwi [1]fsr0
  5558  0F5A                     i1l2479:
  5559  0F5A  3001               	movlw	1
  5560  0F5B  00A0               	movwf	??_readFilteredDutyPot
  5561  0F5C  0820               	movf	??_readFilteredDutyPot,w
  5562  0F5D  07A9               	addwf	readFilteredDutyPot@i,f
  5563  0F5E                     i1l2481:
  5564  0F5E  300F               	movlw	15
  5565  0F5F  0229               	subwf	readFilteredDutyPot@i,w
  5566  0F60  1C03               	skipc
  5567  0F61  2F63               	goto	u244_21
  5568  0F62  2F64               	goto	u244_20
  5569  0F63                     u244_21:
  5570  0F63  2F4C               	goto	i1l2477
  5571  0F64                     u244_20:
  5572  0F64                     i1l2483:
  5573                           
  5574                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5575  0F64  3009               	movlw	9
  5576  0F65  318E  2695  318F   	fcall	_readADCRaw
  5577  0F68  0871               	movf	?_readADCRaw+1,w
  5578  0F69  0024               	movlb	4	; select bank4
  5579  0F6A  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5580  0F6B  0870               	movf	?_readADCRaw,w
  5581  0F6C  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5582  0F6D                     i1l2485:
  5583                           
  5584                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5585  0F6D  3000               	movlw	0
  5586  0F6E  0020               	movlb	0	; select bank0
  5587  0F6F  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5588  0F70  3000               	movlw	0
  5589  0F71  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5590  0F72  3000               	movlw	0
  5591  0F73  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5592  0F74  3000               	movlw	0
  5593  0F75  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5594  0F76                     i1l2487:
  5595                           
  5596                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5597  0F76  01A8               	clrf	readFilteredDutyPot@i_754
  5598  0F77                     i1l2493:
  5599  0F77  3528               	lslf	readFilteredDutyPot@i_754,w
  5600  0F78  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5601  0F79  0086               	movwf	6
  5602  0F7A  3002               	movlw	2	; select bank4/5
  5603  0F7B  0087               	movwf	7
  5604  0F7C  3F40               	moviw [0]fsr1
  5605  0F7D  00A0               	movwf	??_readFilteredDutyPot
  5606  0F7E  3F41               	moviw [1]fsr1
  5607  0F7F  00A1               	movwf	??_readFilteredDutyPot+1
  5608  0F80  0820               	movf	??_readFilteredDutyPot,w
  5609  0F81  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5610  0F82  0821               	movf	??_readFilteredDutyPot+1,w
  5611  0F83  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5612  0F84  3000               	movlw	0
  5613  0F85  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5614  0F86  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5615  0F87                     i1l2495:
  5616  0F87  3001               	movlw	1
  5617  0F88  00A0               	movwf	??_readFilteredDutyPot
  5618  0F89  0820               	movf	??_readFilteredDutyPot,w
  5619  0F8A  07A8               	addwf	readFilteredDutyPot@i_754,f
  5620  0F8B                     i1l2497:
  5621  0F8B  3010               	movlw	16
  5622  0F8C  0228               	subwf	readFilteredDutyPot@i_754,w
  5623  0F8D  1C03               	skipc
  5624  0F8E  2F90               	goto	u245_21
  5625  0F8F  2F91               	goto	u245_20
  5626  0F90                     u245_21:
  5627  0F90  2F77               	goto	i1l2493
  5628  0F91                     u245_20:
  5629  0F91                     i1l2499:
  5630                           
  5631                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5632  0F91  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5633  0F92  00A0               	movwf	??_readFilteredDutyPot
  5634  0F93  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5635  0F94  00A1               	movwf	??_readFilteredDutyPot+1
  5636  0F95  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5637  0F96  00A2               	movwf	??_readFilteredDutyPot+2
  5638  0F97  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5639  0F98  00A3               	movwf	??_readFilteredDutyPot+3
  5640  0F99  3004               	movlw	4
  5641  0F9A                     u246_25:
  5642  0F9A  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5643  0F9B  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5644  0F9C  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5645  0F9D  0CA0               	rrf	??_readFilteredDutyPot,f
  5646  0F9E                     u246_20:
  5647  0F9E  0B89               	decfsz	9,f
  5648  0F9F  2F9A               	goto	u246_25
  5649  0FA0  0821               	movf	??_readFilteredDutyPot+1,w
  5650  0FA1  00FB               	movwf	?_readFilteredDutyPot+1
  5651  0FA2  0820               	movf	??_readFilteredDutyPot,w
  5652  0FA3  00FA               	movwf	?_readFilteredDutyPot
  5653  0FA4                     i1l365:
  5654  0FA4  0008               	return
  5655  0FA5                     __end_of_readFilteredDutyPot:
  5656                           
  5657                           	psect	text24
  5658  0E95                     __ptext24:	
  5659 ;; *************** function _readADCRaw *****************
  5660 ;; Defined at:
  5661 ;;		line 71 in file "ADC.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  gpioNumber      1    wreg     const enum E2798
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5666 ;;  i               1    8[COMMON] unsigned char 
  5667 ;;  returnValue     2    4[COMMON] unsigned int 
  5668 ;;  gpioValid       1    7[COMMON] unsigned char 
  5669 ;;  channel         1    6[COMMON] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  2    0[COMMON] unsigned short 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5679 ;;      Params:         2       0       0       0       0       0
  5680 ;;      Locals:         6       0       0       0       0       0
  5681 ;;      Temps:          2       0       0       0       0       0
  5682 ;;      Totals:        10       0       0       0       0       0
  5683 ;;Total ram usage:       10 bytes
  5684 ;; Hardware stack levels used: 1
  5685 ;; This function calls:
  5686 ;;		Nothing
  5687 ;; This function is called by:
  5688 ;;		_readFilteredDutyPot
  5689 ;;		_readFilteredFreqPot
  5690 ;;		_readFilteredVout
  5691 ;;		_readFilteredIDS
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695  0E95                     _readADCRaw:	
  5696                           ;psect for function _readADCRaw
  5697                           
  5698                           
  5699                           ;incstack = 0
  5700                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5701                           ;readADCRaw@gpioNumber stored from wreg
  5702  0E95  00F9               	movwf	readADCRaw@gpioNumber
  5703  0E96                     i1l2203:
  5704                           
  5705                           ;ADC.c: 72:     uint8_t channel = 0;
  5706  0E96  01F6               	clrf	readADCRaw@channel
  5707                           
  5708                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5709  0E97  01F7               	clrf	readADCRaw@gpioValid
  5710  0E98                     i1l2205:
  5711                           
  5712                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5713  0E98  3005               	movlw	5
  5714  0E99  0279               	subwf	readADCRaw@gpioNumber,w
  5715  0E9A  1803               	skipnc
  5716  0E9B  2E9D               	goto	u187_21
  5717  0E9C  2E9E               	goto	u187_20
  5718  0E9D                     u187_21:
  5719  0E9D  2EA4               	goto	i1l246
  5720  0E9E                     u187_20:
  5721  0E9E                     i1l2207:
  5722                           
  5723                           ;ADC.c: 76:         channel = gpioNumber;
  5724  0E9E  0879               	movf	readADCRaw@gpioNumber,w
  5725  0E9F  00F2               	movwf	??_readADCRaw
  5726  0EA0  0872               	movf	??_readADCRaw,w
  5727  0EA1  00F6               	movwf	readADCRaw@channel
  5728  0EA2                     i1l2209:
  5729                           
  5730                           ;ADC.c: 77:         gpioValid = 1;
  5731  0EA2  01F7               	clrf	readADCRaw@gpioValid
  5732  0EA3  0AF7               	incf	readADCRaw@gpioValid,f
  5733  0EA4                     i1l246:	
  5734                           ;ADC.c: 78:     }
  5735                           
  5736                           
  5737                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5738  0EA4  3009               	movlw	9
  5739  0EA5  0279               	subwf	readADCRaw@gpioNumber,w
  5740  0EA6  1C03               	skipc
  5741  0EA7  2EA9               	goto	u188_21
  5742  0EA8  2EAA               	goto	u188_20
  5743  0EA9                     u188_21:
  5744  0EA9  2EB7               	goto	i1l247
  5745  0EAA                     u188_20:
  5746  0EAA                     i1l2211:
  5747  0EAA  3010               	movlw	16
  5748  0EAB  0279               	subwf	readADCRaw@gpioNumber,w
  5749  0EAC  1803               	skipnc
  5750  0EAD  2EAF               	goto	u189_21
  5751  0EAE  2EB0               	goto	u189_20
  5752  0EAF                     u189_21:
  5753  0EAF  2EB7               	goto	i1l247
  5754  0EB0                     u189_20:
  5755  0EB0                     i1l2213:
  5756                           
  5757                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5758  0EB0  0879               	movf	readADCRaw@gpioNumber,w
  5759  0EB1  3C14               	sublw	20
  5760  0EB2  00F2               	movwf	??_readADCRaw
  5761  0EB3  0872               	movf	??_readADCRaw,w
  5762  0EB4  00F6               	movwf	readADCRaw@channel
  5763  0EB5                     i1l2215:
  5764                           
  5765                           ;ADC.c: 81:         gpioValid = 1;
  5766  0EB5  01F7               	clrf	readADCRaw@gpioValid
  5767  0EB6  0AF7               	incf	readADCRaw@gpioValid,f
  5768  0EB7                     i1l247:	
  5769                           ;ADC.c: 82:     }
  5770                           
  5771                           
  5772                           ;ADC.c: 83:     if(gpioValid){
  5773  0EB7  0877               	movf	readADCRaw@gpioValid,w
  5774  0EB8  1903               	btfsc	3,2
  5775  0EB9  2EBB               	goto	u190_21
  5776  0EBA  2EBC               	goto	u190_20
  5777  0EBB                     u190_21:
  5778  0EBB  2EEC               	goto	i1l2243
  5779  0EBC                     u190_20:
  5780  0EBC                     i1l2217:
  5781                           
  5782                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5783  0EBC  0021               	movlb	1	; select bank1
  5784  0EBD  081D               	movf	29,w	;volatile
  5785  0EBE                     i1l2219:
  5786                           
  5787                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5788  0EBE  3083               	movlw	131
  5789  0EBF  00F2               	movwf	??_readADCRaw
  5790  0EC0  0872               	movf	??_readADCRaw,w
  5791  0EC1  059D               	andwf	29,f	;volatile
  5792  0EC2                     i1l2221:
  5793                           
  5794                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5795  0EC2  0876               	movf	readADCRaw@channel,w	;volatile
  5796  0EC3  00F2               	movwf	??_readADCRaw
  5797  0EC4  3001               	movlw	1
  5798  0EC5                     u191_25:
  5799  0EC5  35F2               	lslf	??_readADCRaw,f
  5800  0EC6  3EFF               	addlw	-1
  5801  0EC7  1D03               	skipz
  5802  0EC8  2EC5               	goto	u191_25
  5803  0EC9  3572               	lslf	??_readADCRaw,w
  5804  0ECA  00F3               	movwf	??_readADCRaw+1
  5805  0ECB  0873               	movf	??_readADCRaw+1,w
  5806  0ECC  049D               	iorwf	29,f	;volatile
  5807  0ECD                     i1l2223:
  5808                           
  5809                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5810  0ECD  01F8               	clrf	readADCRaw@i
  5811  0ECE                     i1l2229:
  5812  0ECE  3001               	movlw	1
  5813  0ECF  00F2               	movwf	??_readADCRaw
  5814  0ED0  0872               	movf	??_readADCRaw,w
  5815  0ED1  07F8               	addwf	readADCRaw@i,f
  5816  0ED2                     i1l2231:
  5817  0ED2  3010               	movlw	16
  5818  0ED3  0278               	subwf	readADCRaw@i,w
  5819  0ED4  1C03               	skipc
  5820  0ED5  2ED7               	goto	u192_21
  5821  0ED6  2ED8               	goto	u192_20
  5822  0ED7                     u192_21:
  5823  0ED7  2ECE               	goto	i1l2229
  5824  0ED8                     u192_20:
  5825  0ED8                     i1l251:
  5826                           
  5827                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5828  0ED8  0021               	movlb	1	; select bank1
  5829  0ED9  149D               	bsf	29,1	;volatile
  5830  0EDA                     i1l252:	
  5831                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5832                           
  5833  0EDA  189D               	btfsc	29,1	;volatile
  5834  0EDB  2EDD               	goto	u193_21
  5835  0EDC  2EDE               	goto	u193_20
  5836  0EDD                     u193_21:
  5837  0EDD  2EDA               	goto	i1l252
  5838  0EDE                     u193_20:
  5839  0EDE                     i1l2233:
  5840                           
  5841                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5842  0EDE  081C               	movf	28,w	;volatile
  5843  0EDF  00F5               	movwf	readADCRaw@returnValue+1
  5844  0EE0  081B               	movf	27,w	;volatile
  5845  0EE1  00F4               	movwf	readADCRaw@returnValue
  5846  0EE2                     i1l2235:
  5847                           
  5848                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5849  0EE2  3083               	movlw	131
  5850  0EE3  00F2               	movwf	??_readADCRaw
  5851  0EE4  0872               	movf	??_readADCRaw,w
  5852  0EE5  059D               	andwf	29,f	;volatile
  5853  0EE6                     i1l2237:
  5854                           
  5855                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5856  0EE6  159D               	bsf	29,3	;volatile
  5857  0EE7                     i1l2239:
  5858                           
  5859                           ;ADC.c: 98:             return returnValue;
  5860  0EE7  0875               	movf	readADCRaw@returnValue+1,w
  5861  0EE8  00F1               	movwf	?_readADCRaw+1
  5862  0EE9  0874               	movf	readADCRaw@returnValue,w
  5863  0EEA  00F0               	movwf	?_readADCRaw
  5864  0EEB  2EEE               	goto	i1l255
  5865  0EEC                     i1l2243:
  5866  0EEC  01F0               	clrf	?_readADCRaw
  5867  0EED  01F1               	clrf	?_readADCRaw+1
  5868  0EEE                     i1l255:
  5869  0EEE  0008               	return
  5870  0EEF                     __end_of_readADCRaw:
  5871                           
  5872                           	psect	text25
  5873  0C3E                     __ptext25:	
  5874 ;; *************** function _currentTripMonitor *****************
  5875 ;; Defined at:
  5876 ;;		line 94 in file "CurrentSensor.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;		None
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  2    4[None  ] int 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, pclath, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5890 ;;      Params:         0       0       0       0       0       0
  5891 ;;      Locals:         0       0       0       0       0       0
  5892 ;;      Temps:          1       0       0       0       0       0
  5893 ;;      Totals:         1       0       0       0       0       0
  5894 ;;Total ram usage:        1 bytes
  5895 ;; Hardware stack levels used: 1
  5896 ;; Hardware stack levels required when called: 2
  5897 ;; This function calls:
  5898 ;;		_currentTripRead
  5899 ;;		_transToOverCurrentFault
  5900 ;;		i1_currentTripReset
  5901 ;; This function is called by:
  5902 ;;		_Tick490Hz
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906  0C3E                     _currentTripMonitor:	
  5907                           ;psect for function _currentTripMonitor
  5908                           
  5909  0C3E                     i1l2343:	
  5910                           ;incstack = 0
  5911                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5912                           
  5913                           
  5914                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5915  0C3E  318C  248D  318C   	fcall	_currentTripRead
  5916  0C41  3A01               	xorlw	1
  5917  0C42  1D03               	skipz
  5918  0C43  2C45               	goto	u218_21
  5919  0C44  2C46               	goto	u218_20
  5920  0C45                     u218_21:
  5921  0C45  2C59               	goto	i1l2351
  5922  0C46                     u218_20:
  5923  0C46                     i1l2345:
  5924                           
  5925                           ;CurrentSensor.c: 97:         currentTripCount++;
  5926  0C46  3001               	movlw	1
  5927  0C47  00FB               	movwf	??_currentTripMonitor
  5928  0C48  087B               	movf	??_currentTripMonitor,w
  5929  0C49  0020               	movlb	0	; select bank0
  5930  0C4A  07E9               	addwf	_currentTripCount,f
  5931                           
  5932                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5933  0C4B  3003               	movlw	3
  5934  0C4C  0669               	xorwf	_currentTripCount,w
  5935  0C4D  1D03               	btfss	3,2
  5936  0C4E  2C50               	goto	u219_21
  5937  0C4F  2C51               	goto	u219_20
  5938  0C50                     u219_21:
  5939  0C50  2C55               	goto	i1l2349
  5940  0C51                     u219_20:
  5941  0C51                     i1l2347:
  5942                           
  5943                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5944  0C51  318B  239F  318C   	fcall	_transToOverCurrentFault
  5945                           
  5946                           ;CurrentSensor.c: 100:         }
  5947  0C54  2C61               	goto	i1l545
  5948  0C55                     i1l2349:
  5949                           
  5950                           ;CurrentSensor.c: 102:             currentTripReset();
  5951  0C55  318B  23B1  318C   	fcall	i1_currentTripReset
  5952  0C58  2C61               	goto	i1l545
  5953  0C59                     i1l2351:
  5954                           
  5955                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5956  0C59  0020               	movlb	0	; select bank0
  5957  0C5A  0869               	movf	_currentTripCount,w
  5958  0C5B  1903               	btfsc	3,2
  5959  0C5C  2C5E               	goto	u220_21
  5960  0C5D  2C5F               	goto	u220_20
  5961  0C5E                     u220_21:
  5962  0C5E  2C61               	goto	i1l545
  5963  0C5F                     u220_20:
  5964  0C5F                     i1l2353:
  5965                           
  5966                           ;CurrentSensor.c: 107:             currentTripCount--;
  5967  0C5F  3001               	movlw	1
  5968  0C60  02E9               	subwf	_currentTripCount,f
  5969  0C61                     i1l545:
  5970  0C61  0008               	return
  5971  0C62                     __end_of_currentTripMonitor:
  5972                           
  5973                           	psect	text26
  5974  0BB1                     __ptext26:	
  5975 ;; *************** function i1_currentTripReset *****************
  5976 ;; Defined at:
  5977 ;;		line 71 in file "CurrentSensor.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;		None
  5980 ;; Auto vars:     Size  Location     Type
  5981 ;;		None
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      void 
  5984 ;; Registers used:
  5985 ;;		wreg, status,2, status,0, pclath, cstack
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5991 ;;      Params:         0       0       0       0       0       0
  5992 ;;      Locals:         0       0       0       0       0       0
  5993 ;;      Temps:          0       0       0       0       0       0
  5994 ;;      Totals:         0       0       0       0       0       0
  5995 ;;Total ram usage:        0 bytes
  5996 ;; Hardware stack levels used: 1
  5997 ;; Hardware stack levels required when called: 1
  5998 ;; This function calls:
  5999 ;;		i1_writeGPIO
  6000 ;; This function is called by:
  6001 ;;		_currentTripMonitor
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005  0BB1                     i1_currentTripReset:	
  6006                           ;psect for function i1_currentTripReset
  6007                           
  6008  0BB1                     i1l2339:	
  6009                           ;incstack = 0
  6010                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  6011                           
  6012                           
  6013                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  6014  0BB1  01F0               	clrf	i1writeGPIO@writeValue
  6015  0BB2  300B               	movlw	11
  6016  0BB3  3187  2727  318B   	fcall	i1_writeGPIO
  6017  0BB6                     i1l2341:
  6018                           
  6019                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  6020                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  6021  0BB6  01F0               	clrf	i1writeGPIO@writeValue
  6022  0BB7  0AF0               	incf	i1writeGPIO@writeValue,f
  6023  0BB8  300B               	movlw	11
  6024  0BB9  3187  2727  318B   	fcall	i1_writeGPIO
  6025  0BBC                     i1l534:
  6026  0BBC  0008               	return
  6027  0BBD                     __end_ofi1_currentTripReset:
  6028                           
  6029                           	psect	text27
  6030  0727                     __ptext27:	
  6031 ;; *************** function i1_writeGPIO *****************
  6032 ;; Defined at:
  6033 ;;		line 52 in file "GPIO.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  gpioNumber      1    wreg     const enum E2798
  6036 ;;  writeValue      1    0[COMMON] unsigned char 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  gpioNumber      1    4[COMMON] const enum E2798
  6039 ;;  portNumber      1    5[COMMON] unsigned char 
  6040 ;;  portType        1    3[COMMON] unsigned char 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6050 ;;      Params:         1       0       0       0       0       0
  6051 ;;      Locals:         3       0       0       0       0       0
  6052 ;;      Temps:          2       0       0       0       0       0
  6053 ;;      Totals:         6       0       0       0       0       0
  6054 ;;Total ram usage:        6 bytes
  6055 ;; Hardware stack levels used: 1
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		_Tick490Hz
  6060 ;;		i1_currentTripReset
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064  0727                     i1_writeGPIO:	
  6065                           ;psect for function i1_writeGPIO
  6066                           
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  6070                           ;i1writeGPIO@gpioNumber stored from wreg
  6071  0727  00F4               	movwf	i1writeGPIO@gpioNumber
  6072  0728                     i1l2079:
  6073                           
  6074                           ;GPIO.c: 54:     uint8_t portType = 0;
  6075  0728  01F3               	clrf	i1writeGPIO@portType
  6076  0729                     i1l2081:
  6077                           
  6078                           ;GPIO.c: 55:     if(gpioNumber > 7){
  6079  0729  3008               	movlw	8
  6080  072A  0274               	subwf	i1writeGPIO@gpioNumber,w
  6081  072B  1C03               	skipc
  6082  072C  2F2E               	goto	u152_21
  6083  072D  2F2F               	goto	u152_20
  6084  072E                     u152_21:
  6085  072E  2F37               	goto	i1l2087
  6086  072F                     u152_20:
  6087  072F                     i1l2083:
  6088                           
  6089                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  6090  072F  0874               	movf	i1writeGPIO@gpioNumber,w
  6091  0730  3EF8               	addlw	248
  6092  0731  00F1               	movwf	??i1_writeGPIO
  6093  0732  0871               	movf	??i1_writeGPIO,w
  6094  0733  00F5               	movwf	i1writeGPIO@portNumber
  6095  0734                     i1l2085:
  6096                           
  6097                           ;GPIO.c: 57:         portType = 1;
  6098  0734  01F3               	clrf	i1writeGPIO@portType
  6099  0735  0AF3               	incf	i1writeGPIO@portType,f
  6100                           
  6101                           ;GPIO.c: 58:     }
  6102  0736  2F3C               	goto	i1l2091
  6103  0737                     i1l2087:
  6104                           
  6105                           ;GPIO.c: 60:         portNumber = gpioNumber;
  6106  0737  0874               	movf	i1writeGPIO@gpioNumber,w
  6107  0738  00F1               	movwf	??i1_writeGPIO
  6108  0739  0871               	movf	??i1_writeGPIO,w
  6109  073A  00F5               	movwf	i1writeGPIO@portNumber
  6110  073B                     i1l2089:
  6111                           
  6112                           ;GPIO.c: 61:         portType = 0;
  6113  073B  01F3               	clrf	i1writeGPIO@portType
  6114  073C                     i1l2091:
  6115                           
  6116                           ;GPIO.c: 64:     if(portType == 0){
  6117  073C  0873               	movf	i1writeGPIO@portType,w
  6118  073D  1D03               	btfss	3,2
  6119  073E  2F40               	goto	u153_21
  6120  073F  2F41               	goto	u153_20
  6121  0740                     u153_21:
  6122  0740  2F61               	goto	i1l2099
  6123  0741                     u153_20:
  6124  0741                     i1l2093:
  6125                           
  6126                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  6127  0741  0870               	movf	i1writeGPIO@writeValue,w
  6128  0742  1903               	btfsc	3,2
  6129  0743  2F45               	goto	u154_21
  6130  0744  2F46               	goto	u154_20
  6131  0745                     u154_21:
  6132  0745  2F53               	goto	i1l2097
  6133  0746                     u154_20:
  6134  0746                     i1l2095:
  6135  0746  3001               	movlw	1
  6136  0747  00F1               	movwf	??i1_writeGPIO
  6137  0748  0A75               	incf	i1writeGPIO@portNumber,w
  6138  0749  2F4B               	goto	u155_24
  6139  074A                     u155_25:
  6140  074A  35F1               	lslf	??i1_writeGPIO,f
  6141  074B                     u155_24:
  6142  074B  0B89               	decfsz	9,f
  6143  074C  2F4A               	goto	u155_25
  6144  074D  0871               	movf	??i1_writeGPIO,w
  6145  074E  00F2               	movwf	??i1_writeGPIO+1
  6146  074F  0872               	movf	??i1_writeGPIO+1,w
  6147  0750  0022               	movlb	2	; select bank2
  6148  0751  048C               	iorwf	12,f	;volatile
  6149  0752  2F85               	goto	i1l320
  6150  0753                     i1l2097:
  6151  0753  3001               	movlw	1
  6152  0754  00F1               	movwf	??i1_writeGPIO
  6153  0755  0A75               	incf	i1writeGPIO@portNumber,w
  6154  0756  2F58               	goto	u156_24
  6155  0757                     u156_25:
  6156  0757  35F1               	lslf	??i1_writeGPIO,f
  6157  0758                     u156_24:
  6158  0758  0B89               	decfsz	9,f
  6159  0759  2F57               	goto	u156_25
  6160  075A  0871               	movf	??i1_writeGPIO,w
  6161  075B  3AFF               	xorlw	255
  6162  075C  00F2               	movwf	??i1_writeGPIO+1
  6163  075D  0872               	movf	??i1_writeGPIO+1,w
  6164  075E  0022               	movlb	2	; select bank2
  6165  075F  058C               	andwf	12,f	;volatile
  6166  0760  2F85               	goto	i1l320
  6167  0761                     i1l2099:
  6168  0761  0373               	decf	i1writeGPIO@portType,w
  6169  0762  1D03               	btfss	3,2
  6170  0763  2F65               	goto	u157_21
  6171  0764  2F66               	goto	u157_20
  6172  0765                     u157_21:
  6173  0765  2F85               	goto	i1l320
  6174  0766                     u157_20:
  6175  0766                     i1l2101:
  6176                           
  6177                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6178  0766  0870               	movf	i1writeGPIO@writeValue,w
  6179  0767  1903               	btfsc	3,2
  6180  0768  2F6A               	goto	u158_21
  6181  0769  2F6B               	goto	u158_20
  6182  076A                     u158_21:
  6183  076A  2F78               	goto	i1l2105
  6184  076B                     u158_20:
  6185  076B                     i1l2103:
  6186  076B  3001               	movlw	1
  6187  076C  00F1               	movwf	??i1_writeGPIO
  6188  076D  0A75               	incf	i1writeGPIO@portNumber,w
  6189  076E  2F70               	goto	u159_24
  6190  076F                     u159_25:
  6191  076F  35F1               	lslf	??i1_writeGPIO,f
  6192  0770                     u159_24:
  6193  0770  0B89               	decfsz	9,f
  6194  0771  2F6F               	goto	u159_25
  6195  0772  0871               	movf	??i1_writeGPIO,w
  6196  0773  00F2               	movwf	??i1_writeGPIO+1
  6197  0774  0872               	movf	??i1_writeGPIO+1,w
  6198  0775  0022               	movlb	2	; select bank2
  6199  0776  048D               	iorwf	13,f	;volatile
  6200  0777  2F85               	goto	i1l320
  6201  0778                     i1l2105:
  6202  0778  3001               	movlw	1
  6203  0779  00F1               	movwf	??i1_writeGPIO
  6204  077A  0A75               	incf	i1writeGPIO@portNumber,w
  6205  077B  2F7D               	goto	u160_24
  6206  077C                     u160_25:
  6207  077C  35F1               	lslf	??i1_writeGPIO,f
  6208  077D                     u160_24:
  6209  077D  0B89               	decfsz	9,f
  6210  077E  2F7C               	goto	u160_25
  6211  077F  0871               	movf	??i1_writeGPIO,w
  6212  0780  3AFF               	xorlw	255
  6213  0781  00F2               	movwf	??i1_writeGPIO+1
  6214  0782  0872               	movf	??i1_writeGPIO+1,w
  6215  0783  0022               	movlb	2	; select bank2
  6216  0784  058D               	andwf	13,f	;volatile
  6217  0785                     i1l320:
  6218  0785  0008               	return
  6219  0786                     __end_ofi1_writeGPIO:
  6220                           
  6221                           	psect	text28
  6222  0B9F                     __ptext28:	
  6223 ;; *************** function _transToOverCurrentFault *****************
  6224 ;; Defined at:
  6225 ;;		line 53 in file "StateMachine.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6239 ;;      Params:         0       0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0
  6241 ;;      Temps:          1       0       0       0       0       0
  6242 ;;      Totals:         1       0       0       0       0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used: 1
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_currentTripMonitor
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252  0B9F                     _transToOverCurrentFault:	
  6253                           ;psect for function _transToOverCurrentFault
  6254                           
  6255  0B9F                     i1l2297:	
  6256                           ;incstack = 0
  6257                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6258                           
  6259                           
  6260                           ;StateMachine.c: 54:     setDuty = 0;
  6261  0B9F  0020               	movlb	0	; select bank0
  6262  0BA0  01E3               	clrf	_setDuty
  6263  0BA1  01E4               	clrf	_setDuty+1
  6264                           
  6265                           ;StateMachine.c: 55:     setPeriod = 0;
  6266  0BA2  01EE               	clrf	_setPeriod
  6267  0BA3                     i1l2299:
  6268                           
  6269                           ;StateMachine.c: 56:     currentState = overCurrentFault;
  6270  0BA3  3004               	movlw	4
  6271  0BA4  00F0               	movwf	??_transToOverCurrentFault
  6272  0BA5  0870               	movf	??_transToOverCurrentFault,w
  6273  0BA6  00EC               	movwf	_currentState
  6274  0BA7                     i1l572:
  6275  0BA7  0008               	return
  6276  0BA8                     __end_of_transToOverCurrentFault:
  6277                           
  6278                           	psect	text29
  6279  0C8D                     __ptext29:	
  6280 ;; *************** function _currentTripRead *****************
  6281 ;; Defined at:
  6282 ;;		line 31 in file "CurrentSensor.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;		None
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      _Bool 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6296 ;;      Params:         0       0       0       0       0       0
  6297 ;;      Locals:         1       0       0       0       0       0
  6298 ;;      Temps:          1       0       0       0       0       0
  6299 ;;      Totals:         2       0       0       0       0       0
  6300 ;;Total ram usage:        2 bytes
  6301 ;; Hardware stack levels used: 1
  6302 ;; Hardware stack levels required when called: 1
  6303 ;; This function calls:
  6304 ;;		i1_readGPIO
  6305 ;; This function is called by:
  6306 ;;		_currentTripMonitor
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310  0C8D                     _currentTripRead:	
  6311                           ;psect for function _currentTripRead
  6312                           
  6313  0C8D                     i1l2283:	
  6314                           ;incstack = 0
  6315                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6316                           
  6317                           
  6318                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6319  0C8D  3001               	movlw	1
  6320  0C8E  318D  2560  318C   	fcall	i1_readGPIO
  6321  0C91  3A01               	xorlw	1
  6322  0C92  1D03               	skipz
  6323  0C93  2C95               	goto	u201_21
  6324  0C94  2C97               	goto	u201_20
  6325  0C95                     u201_21:
  6326  0C95  3001               	movlw	1
  6327  0C96  2C98               	goto	u202_20
  6328  0C97                     u201_20:
  6329  0C97  3000               	movlw	0
  6330  0C98                     u202_20:
  6331  0C98  00F9               	movwf	??_currentTripRead
  6332  0C99  0879               	movf	??_currentTripRead,w
  6333  0C9A  0020               	movlb	0	; select bank0
  6334  0C9B  00EB               	movwf	_tripIDS
  6335                           
  6336                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6337  0C9C  3003               	movlw	3
  6338  0C9D  318D  2560  318C   	fcall	i1_readGPIO
  6339  0CA0  3A01               	xorlw	1
  6340  0CA1  1D03               	skipz
  6341  0CA2  2CA4               	goto	u203_21
  6342  0CA3  2CA6               	goto	u203_20
  6343  0CA4                     u203_21:
  6344  0CA4  3001               	movlw	1
  6345  0CA5  2CA7               	goto	u204_20
  6346  0CA6                     u203_20:
  6347  0CA6  3000               	movlw	0
  6348  0CA7                     u204_20:
  6349  0CA7  00F9               	movwf	??_currentTripRead
  6350  0CA8  0879               	movf	??_currentTripRead,w
  6351  0CA9  0020               	movlb	0	; select bank0
  6352  0CAA  00EA               	movwf	_tripIL
  6353  0CAB                     i1l2285:
  6354                           
  6355                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6356  0CAB  01FA               	clrf	_currentTripRead$918
  6357  0CAC  0AFA               	incf	_currentTripRead$918,f
  6358  0CAD                     i1l2287:
  6359  0CAD  086A               	movf	_tripIL,w
  6360  0CAE  1D03               	btfss	3,2
  6361  0CAF  2CB1               	goto	u205_21
  6362  0CB0  2CB2               	goto	u205_20
  6363  0CB1                     u205_21:
  6364  0CB1  2CB8               	goto	i1l2293
  6365  0CB2                     u205_20:
  6366  0CB2                     i1l2289:
  6367  0CB2  086B               	movf	_tripIDS,w
  6368  0CB3  1D03               	btfss	3,2
  6369  0CB4  2CB6               	goto	u206_21
  6370  0CB5  2CB7               	goto	u206_20
  6371  0CB6                     u206_21:
  6372  0CB6  2CB8               	goto	i1l2293
  6373  0CB7                     u206_20:
  6374  0CB7                     i1l2291:
  6375  0CB7  01FA               	clrf	_currentTripRead$918
  6376  0CB8                     i1l2293:
  6377  0CB8  087A               	movf	_currentTripRead$918,w
  6378  0CB9                     i1l517:
  6379  0CB9  0008               	return
  6380  0CBA                     __end_of_currentTripRead:
  6381                           
  6382                           	psect	text30
  6383  0450                     __ptext30:	
  6384 ;; *************** function _controlRoutine *****************
  6385 ;; Defined at:
  6386 ;;		line 65 in file "Controller.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  setDuty_unre    2   60[BANK0 ] short 
  6391 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6392 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      void 
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6402 ;;      Params:         0       0       0       0       0       0
  6403 ;;      Locals:         0       6       0       0       0       0
  6404 ;;      Temps:          0       6       0       0       0       0
  6405 ;;      Totals:         0      12       0       0       0       0
  6406 ;;Total ram usage:       12 bytes
  6407 ;; Hardware stack levels used: 1
  6408 ;; Hardware stack levels required when called: 3
  6409 ;; This function calls:
  6410 ;;		___lldiv
  6411 ;;		___wmul
  6412 ;;		_runVoltageModeControl
  6413 ;; This function is called by:
  6414 ;;		_Tick490Hz
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418  0450                     _controlRoutine:	
  6419                           ;psect for function _controlRoutine
  6420                           
  6421  0450                     i1l2361:	
  6422                           ;incstack = 0
  6423                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6424                           
  6425                           
  6426                           ;Controller.c: 67:     if((currentState == voltageModeControl) || (currentState == curre
      +                          ntModeControl)){
  6427  0450  3002               	movlw	2
  6428  0451  0020               	movlb	0	; select bank0
  6429  0452  066C               	xorwf	_currentState,w
  6430  0453  1903               	btfsc	3,2
  6431  0454  2C56               	goto	u223_21
  6432  0455  2C57               	goto	u223_20
  6433  0456                     u223_21:
  6434  0456  2C5D               	goto	i1l2365
  6435  0457                     u223_20:
  6436  0457                     i1l2363:
  6437  0457  3003               	movlw	3
  6438  0458  066C               	xorwf	_currentState,w
  6439  0459  1D03               	btfss	3,2
  6440  045A  2C5C               	goto	u224_21
  6441  045B  2C5D               	goto	u224_20
  6442  045C                     u224_21:
  6443  045C  2D25               	goto	i1l454
  6444  045D                     u224_20:
  6445  045D                     i1l2365:
  6446                           
  6447                           ;Controller.c: 68:         int16_t setDuty_unreg = 0;
  6448  045D  01DC               	clrf	controlRoutine@setDuty_unreg
  6449  045E  01DD               	clrf	controlRoutine@setDuty_unreg+1
  6450  045F                     i1l2367:
  6451                           
  6452                           ;Controller.c: 71:         if(currentState == voltageModeControl){
  6453  045F  3002               	movlw	2
  6454  0460  066C               	xorwf	_currentState,w
  6455  0461  1D03               	btfss	3,2
  6456  0462  2C64               	goto	u225_21
  6457  0463  2C65               	goto	u225_20
  6458  0464                     u225_21:
  6459  0464  2CA0               	goto	i1l2377
  6460  0465                     u225_20:
  6461  0465                     i1l2369:
  6462                           
  6463                           ;Controller.c: 73:             runVoltageModeControl();
  6464  0465  3180  20B4  3184   	fcall	_runVoltageModeControl
  6465  0468                     i1l2371:
  6466                           
  6467                           ;Controller.c: 74:             setPeriod = 79u;
  6468  0468  304F               	movlw	79
  6469  0469  0020               	movlb	0	; select bank0
  6470  046A  00D2               	movwf	??_controlRoutine
  6471  046B  0852               	movf	??_controlRoutine,w
  6472  046C  00EE               	movwf	_setPeriod
  6473  046D                     i1l2373:
  6474                           
  6475                           ;Controller.c: 76:             setDuty_unreg = (int16_t) (((uint32_t)(((uint16_t) 50u) *
      +                           setPeriod)) / 25) + voltageModeVariables.sumOutput;
  6476  046D  3016               	movlw	22
  6477  046E  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6478  046F  0086               	movwf	6
  6479  0470  0187               	clrf	7
  6480  0471  3000               	movlw	0
  6481  0472  00F9               	movwf	___lldiv@divisor+3
  6482  0473  3000               	movlw	0
  6483  0474  00F8               	movwf	___lldiv@divisor+2
  6484  0475  3000               	movlw	0
  6485  0476  00F7               	movwf	___lldiv@divisor+1
  6486  0477  3019               	movlw	25
  6487  0478  00F6               	movwf	___lldiv@divisor
  6488  0479  3032               	movlw	50
  6489  047A  00F2               	movwf	___wmul@multiplicand
  6490  047B  3000               	movlw	0
  6491  047C  00F3               	movwf	___wmul@multiplicand+1
  6492  047D  086E               	movf	_setPeriod,w
  6493  047E  00D2               	movwf	??_controlRoutine
  6494  047F  01D3               	clrf	??_controlRoutine+1
  6495  0480  0852               	movf	??_controlRoutine,w
  6496  0481  00F0               	movwf	___wmul@multiplier
  6497  0482  0853               	movf	??_controlRoutine+1,w
  6498  0483  00F1               	movwf	___wmul@multiplier+1
  6499  0484  3187  27E1  3184   	fcall	___wmul
  6500  0487  0870               	movf	?___wmul,w
  6501  0488  0020               	movlb	0	; select bank0
  6502  0489  00D4               	movwf	??_controlRoutine+2
  6503  048A  0871               	movf	?___wmul+1,w
  6504  048B  00D5               	movwf	??_controlRoutine+3
  6505  048C  01D6               	clrf	??_controlRoutine+4
  6506  048D  01D7               	clrf	??_controlRoutine+5
  6507  048E  0857               	movf	??_controlRoutine+5,w
  6508  048F  00FD               	movwf	___lldiv@dividend+3
  6509  0490  0856               	movf	??_controlRoutine+4,w
  6510  0491  00FC               	movwf	___lldiv@dividend+2
  6511  0492  0855               	movf	??_controlRoutine+3,w
  6512  0493  00FB               	movwf	___lldiv@dividend+1
  6513  0494  0854               	movf	??_controlRoutine+2,w
  6514  0495  00FA               	movwf	___lldiv@dividend
  6515  0496  318E  26EF  3184   	fcall	___lldiv
  6516  0499  3F40               	moviw [0]fsr1
  6517  049A  0776               	addwf	?___lldiv,w
  6518  049B  0020               	movlb	0	; select bank0
  6519  049C  00DC               	movwf	controlRoutine@setDuty_unreg
  6520  049D  3F41               	moviw [1]fsr1
  6521  049E  3D77               	addwfc	?___lldiv+1,w
  6522  049F  00DD               	movwf	controlRoutine@setDuty_unreg+1
  6523  04A0                     i1l2377:
  6524                           
  6525                           ;Controller.c: 88:         uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * 
      +                          setPeriod)) / 25);
  6526  04A0  3000               	movlw	0
  6527  04A1  00F9               	movwf	___lldiv@divisor+3
  6528  04A2  3000               	movlw	0
  6529  04A3  00F8               	movwf	___lldiv@divisor+2
  6530  04A4  3000               	movlw	0
  6531  04A5  00F7               	movwf	___lldiv@divisor+1
  6532  04A6  3019               	movlw	25
  6533  04A7  00F6               	movwf	___lldiv@divisor
  6534  04A8  305A               	movlw	90
  6535  04A9  00F2               	movwf	___wmul@multiplicand
  6536  04AA  3000               	movlw	0
  6537  04AB  00F3               	movwf	___wmul@multiplicand+1
  6538  04AC  086E               	movf	_setPeriod,w
  6539  04AD  00D2               	movwf	??_controlRoutine
  6540  04AE  01D3               	clrf	??_controlRoutine+1
  6541  04AF  0852               	movf	??_controlRoutine,w
  6542  04B0  00F0               	movwf	___wmul@multiplier
  6543  04B1  0853               	movf	??_controlRoutine+1,w
  6544  04B2  00F1               	movwf	___wmul@multiplier+1
  6545  04B3  3187  27E1  3184   	fcall	___wmul
  6546  04B6  0870               	movf	?___wmul,w
  6547  04B7  0020               	movlb	0	; select bank0
  6548  04B8  00D4               	movwf	??_controlRoutine+2
  6549  04B9  0871               	movf	?___wmul+1,w
  6550  04BA  00D5               	movwf	??_controlRoutine+3
  6551  04BB  01D6               	clrf	??_controlRoutine+4
  6552  04BC  01D7               	clrf	??_controlRoutine+5
  6553  04BD  0857               	movf	??_controlRoutine+5,w
  6554  04BE  00FD               	movwf	___lldiv@dividend+3
  6555  04BF  0856               	movf	??_controlRoutine+4,w
  6556  04C0  00FC               	movwf	___lldiv@dividend+2
  6557  04C1  0855               	movf	??_controlRoutine+3,w
  6558  04C2  00FB               	movwf	___lldiv@dividend+1
  6559  04C3  0854               	movf	??_controlRoutine+2,w
  6560  04C4  00FA               	movwf	___lldiv@dividend
  6561  04C5  318E  26EF  3184   	fcall	___lldiv
  6562  04C8  0877               	movf	?___lldiv+1,w
  6563  04C9  0020               	movlb	0	; select bank0
  6564  04CA  00D9               	movwf	controlRoutine@maxDuty+1
  6565  04CB  0876               	movf	?___lldiv,w
  6566  04CC  00D8               	movwf	controlRoutine@maxDuty
  6567                           
  6568                           ;Controller.c: 89:         uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * 
      +                          setPeriod)) / 25);
  6569  04CD  3000               	movlw	0
  6570  04CE  00F9               	movwf	___lldiv@divisor+3
  6571  04CF  3000               	movlw	0
  6572  04D0  00F8               	movwf	___lldiv@divisor+2
  6573  04D1  3000               	movlw	0
  6574  04D2  00F7               	movwf	___lldiv@divisor+1
  6575  04D3  3019               	movlw	25
  6576  04D4  00F6               	movwf	___lldiv@divisor
  6577  04D5  300A               	movlw	10
  6578  04D6  00F2               	movwf	___wmul@multiplicand
  6579  04D7  3000               	movlw	0
  6580  04D8  00F3               	movwf	___wmul@multiplicand+1
  6581  04D9  086E               	movf	_setPeriod,w
  6582  04DA  00D2               	movwf	??_controlRoutine
  6583  04DB  01D3               	clrf	??_controlRoutine+1
  6584  04DC  0852               	movf	??_controlRoutine,w
  6585  04DD  00F0               	movwf	___wmul@multiplier
  6586  04DE  0853               	movf	??_controlRoutine+1,w
  6587  04DF  00F1               	movwf	___wmul@multiplier+1
  6588  04E0  3187  27E1  3184   	fcall	___wmul
  6589  04E3  0870               	movf	?___wmul,w
  6590  04E4  0020               	movlb	0	; select bank0
  6591  04E5  00D4               	movwf	??_controlRoutine+2
  6592  04E6  0871               	movf	?___wmul+1,w
  6593  04E7  00D5               	movwf	??_controlRoutine+3
  6594  04E8  01D6               	clrf	??_controlRoutine+4
  6595  04E9  01D7               	clrf	??_controlRoutine+5
  6596  04EA  0857               	movf	??_controlRoutine+5,w
  6597  04EB  00FD               	movwf	___lldiv@dividend+3
  6598  04EC  0856               	movf	??_controlRoutine+4,w
  6599  04ED  00FC               	movwf	___lldiv@dividend+2
  6600  04EE  0855               	movf	??_controlRoutine+3,w
  6601  04EF  00FB               	movwf	___lldiv@dividend+1
  6602  04F0  0854               	movf	??_controlRoutine+2,w
  6603  04F1  00FA               	movwf	___lldiv@dividend
  6604  04F2  318E  26EF  3184   	fcall	___lldiv
  6605  04F5  0877               	movf	?___lldiv+1,w
  6606  04F6  0020               	movlb	0	; select bank0
  6607  04F7  00DB               	movwf	controlRoutine@minDuty+1
  6608  04F8  0876               	movf	?___lldiv,w
  6609  04F9  00DA               	movwf	controlRoutine@minDuty
  6610  04FA                     i1l2379:
  6611                           
  6612                           ;Controller.c: 91:         setDuty = setDuty_unreg;
  6613  04FA  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6614  04FB  00E4               	movwf	_setDuty+1
  6615  04FC  085C               	movf	controlRoutine@setDuty_unreg,w
  6616  04FD  00E3               	movwf	_setDuty
  6617  04FE                     i1l2381:
  6618                           
  6619                           ;Controller.c: 93:         if(setDuty_unreg < 0) setDuty = minDuty;
  6620  04FE  1FDD               	btfss	controlRoutine@setDuty_unreg+1,7
  6621  04FF  2D01               	goto	u226_21
  6622  0500  2D02               	goto	u226_20
  6623  0501                     u226_21:
  6624  0501  2D07               	goto	i1l448
  6625  0502                     u226_20:
  6626  0502                     i1l2383:
  6627  0502  085B               	movf	controlRoutine@minDuty+1,w
  6628  0503  00E4               	movwf	_setDuty+1
  6629  0504  085A               	movf	controlRoutine@minDuty,w
  6630  0505  00E3               	movwf	_setDuty
  6631  0506  2D25               	goto	i1l454
  6632  0507                     i1l448:	
  6633                           ;Controller.c: 94:         else if(setDuty_unreg >= 0){
  6634                           
  6635  0507  1BDD               	btfsc	controlRoutine@setDuty_unreg+1,7
  6636  0508  2D0A               	goto	u227_21
  6637  0509  2D0B               	goto	u227_20
  6638  050A                     u227_21:
  6639  050A  2D25               	goto	i1l454
  6640  050B                     u227_20:
  6641  050B                     i1l2385:
  6642                           
  6643                           ;Controller.c: 95:             if(setDuty_unreg < minDuty) setDuty = minDuty;
  6644  050B  085B               	movf	controlRoutine@minDuty+1,w
  6645  050C  025D               	subwf	controlRoutine@setDuty_unreg+1,w
  6646  050D  1D03               	skipz
  6647  050E  2D11               	goto	u228_25
  6648  050F  085A               	movf	controlRoutine@minDuty,w
  6649  0510  025C               	subwf	controlRoutine@setDuty_unreg,w
  6650  0511                     u228_25:
  6651  0511  1803               	skipnc
  6652  0512  2D14               	goto	u228_21
  6653  0513  2D15               	goto	u228_20
  6654  0514                     u228_21:
  6655  0514  2D16               	goto	i1l2389
  6656  0515                     u228_20:
  6657  0515  2D02               	goto	i1l2383
  6658  0516                     i1l2389:
  6659  0516  085D               	movf	controlRoutine@setDuty_unreg+1,w
  6660  0517  0259               	subwf	controlRoutine@maxDuty+1,w
  6661  0518  1D03               	skipz
  6662  0519  2D1C               	goto	u229_25
  6663  051A  085C               	movf	controlRoutine@setDuty_unreg,w
  6664  051B  0258               	subwf	controlRoutine@maxDuty,w
  6665  051C                     u229_25:
  6666  051C  1803               	skipnc
  6667  051D  2D1F               	goto	u229_21
  6668  051E  2D20               	goto	u229_20
  6669  051F                     u229_21:
  6670  051F  2D25               	goto	i1l449
  6671  0520                     u229_20:
  6672  0520                     i1l2391:
  6673  0520  0859               	movf	controlRoutine@maxDuty+1,w
  6674  0521  00E4               	movwf	_setDuty+1
  6675  0522  0858               	movf	controlRoutine@maxDuty,w
  6676  0523  00E3               	movwf	_setDuty
  6677  0524  2D25               	goto	i1l454
  6678  0525                     i1l449:
  6679  0525                     i1l454:
  6680  0525  0008               	return
  6681  0526                     __end_of_controlRoutine:
  6682                           
  6683                           	psect	text31
  6684  00B4                     __ptext31:	
  6685 ;; *************** function _runVoltageModeControl *****************
  6686 ;; Defined at:
  6687 ;;		line 106 in file "Controller.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;		None
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;  propMult        8   40[BANK0 ] long long 
  6692 ;;  integralMult    8   32[BANK0 ] long long 
  6693 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6703 ;;      Params:         0       0       0       0       0       0
  6704 ;;      Locals:         0      18       0       0       0       0
  6705 ;;      Temps:          0      16       0       0       0       0
  6706 ;;      Totals:         0      34       0       0       0       0
  6707 ;;Total ram usage:       34 bytes
  6708 ;; Hardware stack levels used: 1
  6709 ;; Hardware stack levels required when called: 2
  6710 ;; This function calls:
  6711 ;;		___omul
  6712 ;;		_abs
  6713 ;;		_convertRawToMilliVolts
  6714 ;;		i1_readGPIO
  6715 ;; This function is called by:
  6716 ;;		_controlRoutine
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720  00B4                     _runVoltageModeControl:	
  6721                           ;psect for function _runVoltageModeControl
  6722                           
  6723  00B4                     i1l2247:	
  6724                           ;incstack = 0
  6725                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6726                           
  6727                           
  6728                           ;Controller.c: 111:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6729  00B4  0020               	movlb	0	; select bank0
  6730  00B5  0860               	movf	_filteredVout+1,w
  6731  00B6  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6732  00B7  085F               	movf	_filteredVout,w
  6733  00B8  00FC               	movwf	convertRawToMilliVolts@rawValue
  6734  00B9  318D  2525  3180   	fcall	_convertRawToMilliVolts
  6735  00BC  087D               	movf	?_convertRawToMilliVolts+1,w
  6736  00BD  0020               	movlb	0	; select bank0
  6737  00BE  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6738  00BF  087C               	movf	?_convertRawToMilliVolts,w
  6739  00C0  00D0               	movwf	runVoltageModeControl@newVoltage
  6740                           
  6741                           ;Controller.c: 114:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6742  00C1  3008               	movlw	8
  6743  00C2  318D  2560  3180   	fcall	i1_readGPIO
  6744  00C5  3A00               	xorlw	0
  6745  00C6  1903               	skipnz
  6746  00C7  28C9               	goto	u194_21
  6747  00C8  28CA               	goto	u194_20
  6748  00C9                     u194_21:
  6749  00C9  28D9               	goto	i1l2251
  6750  00CA                     u194_20:
  6751  00CA                     i1l2249:
  6752  00CA  3080               	movlw	128
  6753  00CB  0020               	movlb	0	; select bank0
  6754  00CC  00B0               	movwf	??_runVoltageModeControl
  6755  00CD  303E               	movlw	62
  6756  00CE  00B1               	movwf	??_runVoltageModeControl+1
  6757  00CF  0850               	movf	runVoltageModeControl@newVoltage,w
  6758  00D0  0230               	subwf	??_runVoltageModeControl,w
  6759  00D1  0021               	movlb	1	; select bank1
  6760  00D2  00B6               	movwf	_voltageModeVariables^(0+128)
  6761  00D3  0020               	movlb	0	; select bank0
  6762  00D4  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6763  00D5  3B31               	subwfb	??_runVoltageModeControl+1,w
  6764  00D6  0021               	movlb	1	; select bank1
  6765  00D7  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6766  00D8  28E7               	goto	i1l2253
  6767  00D9                     i1l2251:
  6768  00D9  30E0               	movlw	224
  6769  00DA  0020               	movlb	0	; select bank0
  6770  00DB  00B0               	movwf	??_runVoltageModeControl
  6771  00DC  302E               	movlw	46
  6772  00DD  00B1               	movwf	??_runVoltageModeControl+1
  6773  00DE  0850               	movf	runVoltageModeControl@newVoltage,w
  6774  00DF  0230               	subwf	??_runVoltageModeControl,w
  6775  00E0  0021               	movlb	1	; select bank1
  6776  00E1  00B6               	movwf	_voltageModeVariables^(0+128)
  6777  00E2  0020               	movlb	0	; select bank0
  6778  00E3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6779  00E4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6780  00E5  0021               	movlb	1	; select bank1
  6781  00E6  00B7               	movwf	(_voltageModeVariables+1)^(0+128)
  6782  00E7                     i1l2253:
  6783                           
  6784                           ;Controller.c: 118:    int64_t integralMult = ((int64_t) (36u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6785  00E7  0836               	movf	_voltageModeVariables^(0+128),w
  6786  00E8  0020               	movlb	0	; select bank0
  6787  00E9  00A0               	movwf	___omul@multiplier
  6788  00EA  0021               	movlb	1	; select bank1
  6789  00EB  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  6790  00EC  0020               	movlb	0	; select bank0
  6791  00ED  00A1               	movwf	___omul@multiplier+1
  6792  00EE  0D89               	rlf	9,f
  6793  00EF  3B89               	subwfb	9,f
  6794  00F0  0989               	comf	9,f
  6795  00F1  00A2               	movwf	___omul@multiplier+2
  6796  00F2  00A3               	movwf	___omul@multiplier+3
  6797  00F3  00A4               	movwf	___omul@multiplier+4
  6798  00F4  00A5               	movwf	___omul@multiplier+5
  6799  00F5  00A6               	movwf	___omul@multiplier+6
  6800  00F6  00A7               	movwf	___omul@multiplier+7
  6801  00F7  3000               	movlw	0
  6802  00F8  00AF               	movwf	___omul@multiplicand+7
  6803  00F9  3000               	movlw	0
  6804  00FA  00AE               	movwf	___omul@multiplicand+6
  6805  00FB  3000               	movlw	0
  6806  00FC  00AD               	movwf	___omul@multiplicand+5
  6807  00FD  3000               	movlw	0
  6808  00FE  00AC               	movwf	___omul@multiplicand+4
  6809  00FF  3000               	movlw	0
  6810  0100  00AB               	movwf	___omul@multiplicand+3
  6811  0101  3000               	movlw	0
  6812  0102  00AA               	movwf	___omul@multiplicand+2
  6813  0103  3025               	movlw	37
  6814  0104  00A9               	movwf	___omul@multiplicand+1
  6815  0105  308C               	movlw	140
  6816  0106  00A8               	movwf	___omul@multiplicand
  6817  0107  318D  25F1  3180   	fcall	___omul
  6818  010A  0020               	movlb	0	; select bank0
  6819  010B  0820               	movf	?___omul,w
  6820  010C  00C0               	movwf	runVoltageModeControl@integralMult
  6821  010D  0821               	movf	?___omul+1,w
  6822  010E  00C1               	movwf	runVoltageModeControl@integralMult+1
  6823  010F  0822               	movf	?___omul+2,w
  6824  0110  00C2               	movwf	runVoltageModeControl@integralMult+2
  6825  0111  0823               	movf	?___omul+3,w
  6826  0112  00C3               	movwf	runVoltageModeControl@integralMult+3
  6827  0113  0824               	movf	?___omul+4,w
  6828  0114  00C4               	movwf	runVoltageModeControl@integralMult+4
  6829  0115  0825               	movf	?___omul+5,w
  6830  0116  00C5               	movwf	runVoltageModeControl@integralMult+5
  6831  0117  0826               	movf	?___omul+6,w
  6832  0118  00C6               	movwf	runVoltageModeControl@integralMult+6
  6833  0119  0827               	movf	?___omul+7,w
  6834  011A  00C7               	movwf	runVoltageModeControl@integralMult+7
  6835  011B                     i1l2255:
  6836                           
  6837                           ;Controller.c: 120:    voltageModeVariables.integral = integralMult;
  6838  011B  0843               	movf	runVoltageModeControl@integralMult+3,w
  6839  011C  0021               	movlb	1	; select bank1
  6840  011D  00BB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6841  011E  0020               	movlb	0	; select bank0
  6842  011F  0842               	movf	runVoltageModeControl@integralMult+2,w
  6843  0120  0021               	movlb	1	; select bank1
  6844  0121  00BA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6845  0122  0020               	movlb	0	; select bank0
  6846  0123  0841               	movf	runVoltageModeControl@integralMult+1,w
  6847  0124  0021               	movlb	1	; select bank1
  6848  0125  00B9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6849  0126  0020               	movlb	0	; select bank0
  6850  0127  0840               	movf	runVoltageModeControl@integralMult,w
  6851  0128  0021               	movlb	1	; select bank1
  6852  0129  00B8               	movwf	(_voltageModeVariables^(0+128)+2)
  6853  012A                     i1l2257:
  6854                           
  6855                           ;Controller.c: 121:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6856  012A  300E               	movlw	14
  6857  012B  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6858  012C  0086               	movwf	6
  6859  012D  0187               	clrf	7
  6860  012E  3F40               	moviw [0]fsr1
  6861  012F  0020               	movlb	0	; select bank0
  6862  0130  00B0               	movwf	??_runVoltageModeControl
  6863  0131  3F41               	moviw [1]fsr1
  6864  0132  00B1               	movwf	??_runVoltageModeControl+1
  6865  0133  3F42               	moviw [2]fsr1
  6866  0134  00B2               	movwf	??_runVoltageModeControl+2
  6867  0135  3F43               	moviw [3]fsr1
  6868  0136  00B3               	movwf	??_runVoltageModeControl+3
  6869  0137  3F44               	moviw [4]fsr1
  6870  0138  00B4               	movwf	??_runVoltageModeControl+4
  6871  0139  3F45               	moviw [5]fsr1
  6872  013A  00B5               	movwf	??_runVoltageModeControl+5
  6873  013B  3F46               	moviw [6]fsr1
  6874  013C  00B6               	movwf	??_runVoltageModeControl+6
  6875  013D  3F47               	moviw [7]fsr1
  6876  013E  00B7               	movwf	??_runVoltageModeControl+7
  6877  013F  0021               	movlb	1	; select bank1
  6878  0140  0838               	movf	(_voltageModeVariables^(0+128)+2),w
  6879  0141  0020               	movlb	0	; select bank0
  6880  0142  00B8               	movwf	??_runVoltageModeControl+8
  6881  0143  0021               	movlb	1	; select bank1
  6882  0144  0839               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6883  0145  0020               	movlb	0	; select bank0
  6884  0146  00B9               	movwf	??_runVoltageModeControl+9
  6885  0147  0021               	movlb	1	; select bank1
  6886  0148  083A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6887  0149  0020               	movlb	0	; select bank0
  6888  014A  00BA               	movwf	??_runVoltageModeControl+10
  6889  014B  0021               	movlb	1	; select bank1
  6890  014C  083B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6891  014D  0020               	movlb	0	; select bank0
  6892  014E  00BB               	movwf	??_runVoltageModeControl+11
  6893  014F  3000               	movlw	0
  6894  0150  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6895  0151  30FF               	movlw	255
  6896  0152  00BC               	movwf	??_runVoltageModeControl+12
  6897  0153  00BD               	movwf	??_runVoltageModeControl+13
  6898  0154  00BE               	movwf	??_runVoltageModeControl+14
  6899  0155  00BF               	movwf	??_runVoltageModeControl+15
  6900  0156  0838               	movf	??_runVoltageModeControl+8,w
  6901  0157  07B0               	addwf	??_runVoltageModeControl,f
  6902  0158  0839               	movf	??_runVoltageModeControl+9,w
  6903  0159  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6904  015A  083A               	movf	??_runVoltageModeControl+10,w
  6905  015B  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6906  015C  083B               	movf	??_runVoltageModeControl+11,w
  6907  015D  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6908  015E  083C               	movf	??_runVoltageModeControl+12,w
  6909  015F  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6910  0160  083D               	movf	??_runVoltageModeControl+13,w
  6911  0161  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6912  0162  083E               	movf	??_runVoltageModeControl+14,w
  6913  0163  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6914  0164  083F               	movf	??_runVoltageModeControl+15,w
  6915  0165  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6916  0166  0837               	movf	??_runVoltageModeControl+7,w
  6917  0167  0021               	movlb	1	; select bank1
  6918  0168  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6919  0169  0020               	movlb	0	; select bank0
  6920  016A  0836               	movf	??_runVoltageModeControl+6,w
  6921  016B  0021               	movlb	1	; select bank1
  6922  016C  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6923  016D  0020               	movlb	0	; select bank0
  6924  016E  0835               	movf	??_runVoltageModeControl+5,w
  6925  016F  0021               	movlb	1	; select bank1
  6926  0170  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6927  0171  0020               	movlb	0	; select bank0
  6928  0172  0834               	movf	??_runVoltageModeControl+4,w
  6929  0173  0021               	movlb	1	; select bank1
  6930  0174  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6931  0175  0020               	movlb	0	; select bank0
  6932  0176  0833               	movf	??_runVoltageModeControl+3,w
  6933  0177  0021               	movlb	1	; select bank1
  6934  0178  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6935  0179  0020               	movlb	0	; select bank0
  6936  017A  0832               	movf	??_runVoltageModeControl+2,w
  6937  017B  0021               	movlb	1	; select bank1
  6938  017C  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6939  017D  0020               	movlb	0	; select bank0
  6940  017E  0831               	movf	??_runVoltageModeControl+1,w
  6941  017F  0021               	movlb	1	; select bank1
  6942  0180  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6943  0181  0020               	movlb	0	; select bank0
  6944  0182  0830               	movf	??_runVoltageModeControl,w
  6945  0183  0021               	movlb	1	; select bank1
  6946  0184  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  6947  0185                     i1l2259:
  6948                           
  6949                           ;Controller.c: 124:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6950  0185  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6951  0186  3A80               	xorlw	128
  6952  0187  0020               	movlb	0	; select bank0
  6953  0188  00B0               	movwf	??_runVoltageModeControl
  6954  0189  0021               	movlb	1	; select bank1
  6955  018A  084B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6956  018B  3A80               	xorlw	128
  6957  018C  0020               	movlb	0	; select bank0
  6958  018D  0230               	subwf	??_runVoltageModeControl,w
  6959  018E  0021               	movlb	1	; select bank1
  6960  018F  1D03               	skipz
  6961  0190  29AB               	goto	u195_23
  6962  0191  084A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6963  0192  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6964  0193  1D03               	skipz
  6965  0194  29AB               	goto	u195_23
  6966  0195  0849               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6967  0196  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6968  0197  1D03               	skipz
  6969  0198  29AB               	goto	u195_23
  6970  0199  0848               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6971  019A  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6972  019B  1D03               	skipz
  6973  019C  29AB               	goto	u195_23
  6974  019D  0847               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6975  019E  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6976  019F  1D03               	skipz
  6977  01A0  29AB               	goto	u195_23
  6978  01A1  0846               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6979  01A2  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6980  01A3  1D03               	skipz
  6981  01A4  29AB               	goto	u195_23
  6982  01A5  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6983  01A6  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6984  01A7  1D03               	skipz
  6985  01A8  29AB               	goto	u195_23
  6986  01A9  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  6987  01AA  0220               	subwf	_integratorScaledLimit^(0+128),w
  6988  01AB                     u195_23:
  6989  01AB  1803               	skipnc
  6990  01AC  29AE               	goto	u195_21
  6991  01AD  29AF               	goto	u195_20
  6992  01AE                     u195_21:
  6993  01AE  29BF               	goto	i1l2263
  6994  01AF                     u195_20:
  6995  01AF                     i1l2261:
  6996                           
  6997                           ;Controller.c: 125:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6998  01AF  0820               	movf	_integratorScaledLimit^(0+128),w
  6999  01B0  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7000  01B1  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  7001  01B2  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7002  01B3  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  7003  01B4  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7004  01B5  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  7005  01B6  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7006  01B7  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7007  01B8  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7008  01B9  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7009  01BA  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7010  01BB  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7011  01BC  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7012  01BD  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7013  01BE  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7014  01BF                     i1l2263:
  7015                           
  7016                           ;Controller.c: 128:    if(voltageModeVariables.integralOutputScaled < 0){
  7017  01BF  300E               	movlw	14
  7018  01C0  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7019  01C1  0086               	movwf	6
  7020  01C2  0187               	clrf	7
  7021  01C3  3F47               	moviw [7]fsr1
  7022  01C4  0020               	movlb	0	; select bank0
  7023  01C5  00B0               	movwf	??_runVoltageModeControl
  7024  01C6  1FB0               	btfss	??_runVoltageModeControl,7
  7025  01C7  29C9               	goto	u196_21
  7026  01C8  29CA               	goto	u196_20
  7027  01C9                     u196_21:
  7028  01C9  2A67               	goto	i1l2269
  7029  01CA                     u196_20:
  7030  01CA                     i1l2265:
  7031                           
  7032                           ;Controller.c: 129:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  7033  01CA  0021               	movlb	1	; select bank1
  7034  01CB  0845               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  7035  01CC  00F1               	movwf	abs@a+1
  7036  01CD  0844               	movf	(_voltageModeVariables^(0+128)+14),w
  7037  01CE  00F0               	movwf	abs@a
  7038  01CF  318B  23CB  3180   	fcall	_abs
  7039  01D2  0870               	movf	?_abs,w
  7040  01D3  0020               	movlb	0	; select bank0
  7041  01D4  00B0               	movwf	??_runVoltageModeControl
  7042  01D5  0871               	movf	?_abs+1,w
  7043  01D6  00B1               	movwf	??_runVoltageModeControl+1
  7044  01D7  3000               	movlw	0
  7045  01D8  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7046  01D9  30FF               	movlw	255
  7047  01DA  00B2               	movwf	??_runVoltageModeControl+2
  7048  01DB  00B3               	movwf	??_runVoltageModeControl+3
  7049  01DC  00B4               	movwf	??_runVoltageModeControl+4
  7050  01DD  00B5               	movwf	??_runVoltageModeControl+5
  7051  01DE  00B6               	movwf	??_runVoltageModeControl+6
  7052  01DF  00B7               	movwf	??_runVoltageModeControl+7
  7053  01E0  0021               	movlb	1	; select bank1
  7054  01E1  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7055  01E2  3A80               	xorlw	128
  7056  01E3  0020               	movlb	0	; select bank0
  7057  01E4  00B8               	movwf	??_runVoltageModeControl+8
  7058  01E5  0837               	movf	??_runVoltageModeControl+7,w
  7059  01E6  3A80               	xorlw	128
  7060  01E7  0238               	subwf	??_runVoltageModeControl+8,w
  7061  01E8  0021               	movlb	1	; select bank1
  7062  01E9  1D03               	skipz
  7063  01EA  2A13               	goto	u197_23
  7064  01EB  0020               	movlb	0	; select bank0
  7065  01EC  0836               	movf	??_runVoltageModeControl+6,w
  7066  01ED  0021               	movlb	1	; select bank1
  7067  01EE  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  7068  01EF  1D03               	skipz
  7069  01F0  2A13               	goto	u197_23
  7070  01F1  0020               	movlb	0	; select bank0
  7071  01F2  0835               	movf	??_runVoltageModeControl+5,w
  7072  01F3  0021               	movlb	1	; select bank1
  7073  01F4  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  7074  01F5  1D03               	skipz
  7075  01F6  2A13               	goto	u197_23
  7076  01F7  0020               	movlb	0	; select bank0
  7077  01F8  0834               	movf	??_runVoltageModeControl+4,w
  7078  01F9  0021               	movlb	1	; select bank1
  7079  01FA  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  7080  01FB  1D03               	skipz
  7081  01FC  2A13               	goto	u197_23
  7082  01FD  0020               	movlb	0	; select bank0
  7083  01FE  0833               	movf	??_runVoltageModeControl+3,w
  7084  01FF  0021               	movlb	1	; select bank1
  7085  0200  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  7086  0201  1D03               	skipz
  7087  0202  2A13               	goto	u197_23
  7088  0203  0020               	movlb	0	; select bank0
  7089  0204  0832               	movf	??_runVoltageModeControl+2,w
  7090  0205  0021               	movlb	1	; select bank1
  7091  0206  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  7092  0207  1D03               	skipz
  7093  0208  2A13               	goto	u197_23
  7094  0209  0020               	movlb	0	; select bank0
  7095  020A  0831               	movf	??_runVoltageModeControl+1,w
  7096  020B  0021               	movlb	1	; select bank1
  7097  020C  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  7098  020D  1D03               	skipz
  7099  020E  2A13               	goto	u197_23
  7100  020F  0020               	movlb	0	; select bank0
  7101  0210  0830               	movf	??_runVoltageModeControl,w
  7102  0211  0021               	movlb	1	; select bank1
  7103  0212  0220               	subwf	_integratorScaledLimit^(0+128),w
  7104  0213                     u197_23:
  7105  0213  1803               	skipnc
  7106  0214  2A16               	goto	u197_21
  7107  0215  2A17               	goto	u197_20
  7108  0216                     u197_21:
  7109  0216  2A67               	goto	i1l2269
  7110  0217                     u197_20:
  7111  0217                     i1l2267:
  7112                           
  7113                           ;Controller.c: 130:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  7114  0217  3000               	movlw	0
  7115  0218  0020               	movlb	0	; select bank0
  7116  0219  00B0               	movwf	??_runVoltageModeControl
  7117  021A  3000               	movlw	0
  7118  021B  00B1               	movwf	??_runVoltageModeControl+1
  7119  021C  3000               	movlw	0
  7120  021D  00B2               	movwf	??_runVoltageModeControl+2
  7121  021E  3000               	movlw	0
  7122  021F  00B3               	movwf	??_runVoltageModeControl+3
  7123  0220  3000               	movlw	0
  7124  0221  00B4               	movwf	??_runVoltageModeControl+4
  7125  0222  3000               	movlw	0
  7126  0223  00B5               	movwf	??_runVoltageModeControl+5
  7127  0224  3000               	movlw	0
  7128  0225  00B6               	movwf	??_runVoltageModeControl+6
  7129  0226  3000               	movlw	0
  7130  0227  00B7               	movwf	??_runVoltageModeControl+7
  7131  0228  0021               	movlb	1	; select bank1
  7132  0229  0820               	movf	_integratorScaledLimit^(0+128),w
  7133  022A  0020               	movlb	0	; select bank0
  7134  022B  02B0               	subwf	??_runVoltageModeControl,f
  7135  022C  0021               	movlb	1	; select bank1
  7136  022D  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  7137  022E  0020               	movlb	0	; select bank0
  7138  022F  3BB1               	subwfb	??_runVoltageModeControl+1,f
  7139  0230  0021               	movlb	1	; select bank1
  7140  0231  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  7141  0232  0020               	movlb	0	; select bank0
  7142  0233  3BB2               	subwfb	??_runVoltageModeControl+2,f
  7143  0234  0021               	movlb	1	; select bank1
  7144  0235  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  7145  0236  0020               	movlb	0	; select bank0
  7146  0237  3BB3               	subwfb	??_runVoltageModeControl+3,f
  7147  0238  0021               	movlb	1	; select bank1
  7148  0239  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  7149  023A  0020               	movlb	0	; select bank0
  7150  023B  3BB4               	subwfb	??_runVoltageModeControl+4,f
  7151  023C  0021               	movlb	1	; select bank1
  7152  023D  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  7153  023E  0020               	movlb	0	; select bank0
  7154  023F  3BB5               	subwfb	??_runVoltageModeControl+5,f
  7155  0240  0021               	movlb	1	; select bank1
  7156  0241  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  7157  0242  0020               	movlb	0	; select bank0
  7158  0243  3BB6               	subwfb	??_runVoltageModeControl+6,f
  7159  0244  0021               	movlb	1	; select bank1
  7160  0245  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  7161  0246  0020               	movlb	0	; select bank0
  7162  0247  3BB7               	subwfb	??_runVoltageModeControl+7,f
  7163  0248  0837               	movf	??_runVoltageModeControl+7,w
  7164  0249  0021               	movlb	1	; select bank1
  7165  024A  00CB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  7166  024B  0020               	movlb	0	; select bank0
  7167  024C  0836               	movf	??_runVoltageModeControl+6,w
  7168  024D  0021               	movlb	1	; select bank1
  7169  024E  00CA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  7170  024F  0020               	movlb	0	; select bank0
  7171  0250  0835               	movf	??_runVoltageModeControl+5,w
  7172  0251  0021               	movlb	1	; select bank1
  7173  0252  00C9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  7174  0253  0020               	movlb	0	; select bank0
  7175  0254  0834               	movf	??_runVoltageModeControl+4,w
  7176  0255  0021               	movlb	1	; select bank1
  7177  0256  00C8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  7178  0257  0020               	movlb	0	; select bank0
  7179  0258  0833               	movf	??_runVoltageModeControl+3,w
  7180  0259  0021               	movlb	1	; select bank1
  7181  025A  00C7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  7182  025B  0020               	movlb	0	; select bank0
  7183  025C  0832               	movf	??_runVoltageModeControl+2,w
  7184  025D  0021               	movlb	1	; select bank1
  7185  025E  00C6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  7186  025F  0020               	movlb	0	; select bank0
  7187  0260  0831               	movf	??_runVoltageModeControl+1,w
  7188  0261  0021               	movlb	1	; select bank1
  7189  0262  00C5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  7190  0263  0020               	movlb	0	; select bank0
  7191  0264  0830               	movf	??_runVoltageModeControl,w
  7192  0265  0021               	movlb	1	; select bank1
  7193  0266  00C4               	movwf	(_voltageModeVariables^(0+128)+14)
  7194  0267                     i1l2269:
  7195                           
  7196                           ;Controller.c: 135:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 7u);
  7197  0267  300E               	movlw	14
  7198  0268  3EB6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  7199  0269  0086               	movwf	6
  7200  026A  0187               	clrf	7
  7201  026B  3F40               	moviw [0]fsr1
  7202  026C  0020               	movlb	0	; select bank0
  7203  026D  00B0               	movwf	??_runVoltageModeControl
  7204  026E  3F41               	moviw [1]fsr1
  7205  026F  00B1               	movwf	??_runVoltageModeControl+1
  7206  0270  3F42               	moviw [2]fsr1
  7207  0271  00B2               	movwf	??_runVoltageModeControl+2
  7208  0272  3F43               	moviw [3]fsr1
  7209  0273  00B3               	movwf	??_runVoltageModeControl+3
  7210  0274  3F44               	moviw [4]fsr1
  7211  0275  00B4               	movwf	??_runVoltageModeControl+4
  7212  0276  3F45               	moviw [5]fsr1
  7213  0277  00B5               	movwf	??_runVoltageModeControl+5
  7214  0278  3F46               	moviw [6]fsr1
  7215  0279  00B6               	movwf	??_runVoltageModeControl+6
  7216  027A  3F47               	moviw [7]fsr1
  7217  027B  00B7               	movwf	??_runVoltageModeControl+7
  7218  027C  3017               	movlw	23
  7219  027D  00B8               	movwf	??_runVoltageModeControl+8
  7220  027E                     u198_25:
  7221  027E  0020               	movlb	0	; select bank0
  7222  027F  37B7               	asrf	??_runVoltageModeControl+7,f
  7223  0280  0CB6               	rrf	??_runVoltageModeControl+6,f
  7224  0281  0CB5               	rrf	??_runVoltageModeControl+5,f
  7225  0282  0CB4               	rrf	??_runVoltageModeControl+4,f
  7226  0283  0CB3               	rrf	??_runVoltageModeControl+3,f
  7227  0284  0CB2               	rrf	??_runVoltageModeControl+2,f
  7228  0285  0CB1               	rrf	??_runVoltageModeControl+1,f
  7229  0286  0CB0               	rrf	??_runVoltageModeControl,f
  7230  0287                     u198_20:
  7231  0287  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7232  0288  2A7E               	goto	u198_25
  7233  0289  0020               	movlb	0	; select bank0
  7234  028A  0833               	movf	??_runVoltageModeControl+3,w
  7235  028B  0021               	movlb	1	; select bank1
  7236  028C  00C3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7237  028D  0020               	movlb	0	; select bank0
  7238  028E  0832               	movf	??_runVoltageModeControl+2,w
  7239  028F  0021               	movlb	1	; select bank1
  7240  0290  00C2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7241  0291  0020               	movlb	0	; select bank0
  7242  0292  0831               	movf	??_runVoltageModeControl+1,w
  7243  0293  0021               	movlb	1	; select bank1
  7244  0294  00C1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7245  0295  0020               	movlb	0	; select bank0
  7246  0296  0830               	movf	??_runVoltageModeControl,w
  7247  0297  0021               	movlb	1	; select bank1
  7248  0298  00C0               	movwf	(_voltageModeVariables^(0+128)+10)
  7249  0299                     i1l2271:
  7250                           
  7251                           ;Controller.c: 138:    int64_t propMult = (int32_t) (2u * ((int32_t) voltageModeVariable
      +                          s.error));
  7252  0299  0836               	movf	_voltageModeVariables^(0+128),w
  7253  029A  0020               	movlb	0	; select bank0
  7254  029B  00B0               	movwf	??_runVoltageModeControl
  7255  029C  0021               	movlb	1	; select bank1
  7256  029D  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7257  029E  0020               	movlb	0	; select bank0
  7258  029F  00B1               	movwf	??_runVoltageModeControl+1
  7259  02A0  3000               	movlw	0
  7260  02A1  1BB1               	btfsc	??_runVoltageModeControl+1,7
  7261  02A2  30FF               	movlw	255
  7262  02A3  00B2               	movwf	??_runVoltageModeControl+2
  7263  02A4  00B3               	movwf	??_runVoltageModeControl+3
  7264  02A5  3001               	movlw	1
  7265  02A6                     u199_25:
  7266  02A6  35B0               	lslf	??_runVoltageModeControl,f
  7267  02A7  0DB1               	rlf	??_runVoltageModeControl+1,f
  7268  02A8  0DB2               	rlf	??_runVoltageModeControl+2,f
  7269  02A9  0DB3               	rlf	??_runVoltageModeControl+3,f
  7270  02AA                     u199_20:
  7271  02AA  0B89               	decfsz	9,f
  7272  02AB  2AA6               	goto	u199_25
  7273  02AC  0830               	movf	??_runVoltageModeControl,w
  7274  02AD  00C8               	movwf	runVoltageModeControl@propMult
  7275  02AE  0831               	movf	??_runVoltageModeControl+1,w
  7276  02AF  00C9               	movwf	runVoltageModeControl@propMult+1
  7277  02B0  0832               	movf	??_runVoltageModeControl+2,w
  7278  02B1  00CA               	movwf	runVoltageModeControl@propMult+2
  7279  02B2  0833               	movf	??_runVoltageModeControl+3,w
  7280  02B3  00CB               	movwf	runVoltageModeControl@propMult+3
  7281  02B4  3000               	movlw	0
  7282  02B5  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7283  02B6  30FF               	movlw	255
  7284  02B7  00CC               	movwf	runVoltageModeControl@propMult+4
  7285  02B8  00CD               	movwf	runVoltageModeControl@propMult+5
  7286  02B9  00CE               	movwf	runVoltageModeControl@propMult+6
  7287  02BA  00CF               	movwf	runVoltageModeControl@propMult+7
  7288  02BB                     i1l2273:
  7289                           
  7290                           ;Controller.c: 139:    voltageModeVariables.proportionalOutput = propMult >> 9u;
  7291  02BB  3048               	movlw	low runVoltageModeControl@propMult
  7292  02BC  0086               	movwf	6
  7293  02BD  3000               	movlw	high runVoltageModeControl@propMult
  7294  02BE  0087               	movwf	7
  7295  02BF  3F40               	moviw [0]fsr1
  7296  02C0  00B0               	movwf	??_runVoltageModeControl
  7297  02C1  3F41               	moviw [1]fsr1
  7298  02C2  00B1               	movwf	??_runVoltageModeControl+1
  7299  02C3  3F42               	moviw [2]fsr1
  7300  02C4  00B2               	movwf	??_runVoltageModeControl+2
  7301  02C5  3F43               	moviw [3]fsr1
  7302  02C6  00B3               	movwf	??_runVoltageModeControl+3
  7303  02C7  3F44               	moviw [4]fsr1
  7304  02C8  00B4               	movwf	??_runVoltageModeControl+4
  7305  02C9  3F45               	moviw [5]fsr1
  7306  02CA  00B5               	movwf	??_runVoltageModeControl+5
  7307  02CB  3F46               	moviw [6]fsr1
  7308  02CC  00B6               	movwf	??_runVoltageModeControl+6
  7309  02CD  3F47               	moviw [7]fsr1
  7310  02CE  00B7               	movwf	??_runVoltageModeControl+7
  7311  02CF  3009               	movlw	9
  7312  02D0  00B8               	movwf	??_runVoltageModeControl+8
  7313  02D1                     u200_25:
  7314  02D1  0020               	movlb	0	; select bank0
  7315  02D2  37B7               	asrf	??_runVoltageModeControl+7,f
  7316  02D3  0CB6               	rrf	??_runVoltageModeControl+6,f
  7317  02D4  0CB5               	rrf	??_runVoltageModeControl+5,f
  7318  02D5  0CB4               	rrf	??_runVoltageModeControl+4,f
  7319  02D6  0CB3               	rrf	??_runVoltageModeControl+3,f
  7320  02D7  0CB2               	rrf	??_runVoltageModeControl+2,f
  7321  02D8  0CB1               	rrf	??_runVoltageModeControl+1,f
  7322  02D9  0CB0               	rrf	??_runVoltageModeControl,f
  7323  02DA                     u200_20:
  7324  02DA  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7325  02DB  2AD1               	goto	u200_25
  7326  02DC  0020               	movlb	0	; select bank0
  7327  02DD  0833               	movf	??_runVoltageModeControl+3,w
  7328  02DE  0021               	movlb	1	; select bank1
  7329  02DF  00BF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7330  02E0  0020               	movlb	0	; select bank0
  7331  02E1  0832               	movf	??_runVoltageModeControl+2,w
  7332  02E2  0021               	movlb	1	; select bank1
  7333  02E3  00BE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7334  02E4  0020               	movlb	0	; select bank0
  7335  02E5  0831               	movf	??_runVoltageModeControl+1,w
  7336  02E6  0021               	movlb	1	; select bank1
  7337  02E7  00BD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7338  02E8  0020               	movlb	0	; select bank0
  7339  02E9  0830               	movf	??_runVoltageModeControl,w
  7340  02EA  0021               	movlb	1	; select bank1
  7341  02EB  00BC               	movwf	(_voltageModeVariables^(0+128)+6)
  7342  02EC                     i1l2275:
  7343                           
  7344                           ;Controller.c: 141:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7345  02EC  0840               	movf	(_voltageModeVariables^(0+128)+10),w
  7346  02ED  073C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7347  02EE  0020               	movlb	0	; select bank0
  7348  02EF  00B0               	movwf	??_runVoltageModeControl
  7349  02F0  0021               	movlb	1	; select bank1
  7350  02F1  0841               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7351  02F2  3D3D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7352  02F3  0020               	movlb	0	; select bank0
  7353  02F4  00B1               	movwf	??_runVoltageModeControl+1
  7354  02F5  0021               	movlb	1	; select bank1
  7355  02F6  0842               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7356  02F7  3D3E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7357  02F8  0020               	movlb	0	; select bank0
  7358  02F9  00B2               	movwf	??_runVoltageModeControl+2
  7359  02FA  0021               	movlb	1	; select bank1
  7360  02FB  0843               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7361  02FC  3D3F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7362  02FD  0020               	movlb	0	; select bank0
  7363  02FE  00B3               	movwf	??_runVoltageModeControl+3
  7364  02FF  0833               	movf	??_runVoltageModeControl+3,w
  7365  0300  0021               	movlb	1	; select bank1
  7366  0301  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7367  0302  0020               	movlb	0	; select bank0
  7368  0303  0832               	movf	??_runVoltageModeControl+2,w
  7369  0304  0021               	movlb	1	; select bank1
  7370  0305  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7371  0306  0020               	movlb	0	; select bank0
  7372  0307  0831               	movf	??_runVoltageModeControl+1,w
  7373  0308  0021               	movlb	1	; select bank1
  7374  0309  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7375  030A  0020               	movlb	0	; select bank0
  7376  030B  0830               	movf	??_runVoltageModeControl,w
  7377  030C  0021               	movlb	1	; select bank1
  7378  030D  00CC               	movwf	(_voltageModeVariables^(0+128)+22)
  7379  030E                     i1l2277:
  7380                           
  7381                           ;Controller.c: 142:    voltageModeVariables.previousError = voltageModeVariables.error;
  7382  030E  0837               	movf	(_voltageModeVariables+1)^(0+128),w
  7383  030F  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7384  0310  0836               	movf	_voltageModeVariables^(0+128),w
  7385  0311  00D0               	movwf	(_voltageModeVariables^(0+128)+26)
  7386  0312                     i1l462:
  7387  0312  0008               	return
  7388  0313                     __end_of_runVoltageModeControl:
  7389                           
  7390                           	psect	text32
  7391  0D60                     __ptext32:	
  7392 ;; *************** function i1_readGPIO *****************
  7393 ;; Defined at:
  7394 ;;		line 79 in file "GPIO.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  gpioNumber      1    wreg     const enum E2798
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7399 ;;  portType        1    7[COMMON] unsigned char 
  7400 ;;  portNumber      1    6[COMMON] unsigned char 
  7401 ;;  returnValueB    1    5[COMMON] unsigned char 
  7402 ;;  readB           1    4[COMMON] unsigned char 
  7403 ;;  returnValueA    1    3[COMMON] unsigned char 
  7404 ;;  readA           1    2[COMMON] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      _Bool 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7414 ;;      Params:         0       0       0       0       0       0
  7415 ;;      Locals:         7       0       0       0       0       0
  7416 ;;      Temps:          2       0       0       0       0       0
  7417 ;;      Totals:         9       0       0       0       0       0
  7418 ;;Total ram usage:        9 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; This function calls:
  7421 ;;		Nothing
  7422 ;; This function is called by:
  7423 ;;		_runVoltageModeControl
  7424 ;;		_currentTripRead
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428  0D60                     i1_readGPIO:	
  7429                           ;psect for function i1_readGPIO
  7430                           
  7431                           
  7432                           ;incstack = 0
  7433                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7434                           ;i1readGPIO@gpioNumber stored from wreg
  7435  0D60  00F8               	movwf	i1readGPIO@gpioNumber
  7436  0D61                     i1l2107:
  7437                           
  7438                           ;GPIO.c: 81:     uint8_t portType = 0;
  7439  0D61  01F7               	clrf	i1readGPIO@portType
  7440  0D62                     i1l2109:
  7441                           
  7442                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7443  0D62  3008               	movlw	8
  7444  0D63  0278               	subwf	i1readGPIO@gpioNumber,w
  7445  0D64  1C03               	skipc
  7446  0D65  2D67               	goto	u161_21
  7447  0D66  2D68               	goto	u161_20
  7448  0D67                     u161_21:
  7449  0D67  2D70               	goto	i1l2115
  7450  0D68                     u161_20:
  7451  0D68                     i1l2111:
  7452                           
  7453                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7454  0D68  0878               	movf	i1readGPIO@gpioNumber,w
  7455  0D69  3EF8               	addlw	248
  7456  0D6A  00F0               	movwf	??i1_readGPIO
  7457  0D6B  0870               	movf	??i1_readGPIO,w
  7458  0D6C  00F6               	movwf	i1readGPIO@portNumber
  7459  0D6D                     i1l2113:
  7460                           
  7461                           ;GPIO.c: 84:         portType = 1;
  7462  0D6D  01F7               	clrf	i1readGPIO@portType
  7463  0D6E  0AF7               	incf	i1readGPIO@portType,f
  7464                           
  7465                           ;GPIO.c: 85:     }
  7466  0D6F  2D75               	goto	i1l2119
  7467  0D70                     i1l2115:
  7468                           
  7469                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7470  0D70  0878               	movf	i1readGPIO@gpioNumber,w
  7471  0D71  00F0               	movwf	??i1_readGPIO
  7472  0D72  0870               	movf	??i1_readGPIO,w
  7473  0D73  00F6               	movwf	i1readGPIO@portNumber
  7474  0D74                     i1l2117:
  7475                           
  7476                           ;GPIO.c: 88:         portType = 0;
  7477  0D74  01F7               	clrf	i1readGPIO@portType
  7478  0D75                     i1l2119:
  7479                           
  7480                           ;GPIO.c: 91:     if(portType == 0){
  7481  0D75  0877               	movf	i1readGPIO@portType,w
  7482  0D76  1D03               	btfss	3,2
  7483  0D77  2D79               	goto	u162_21
  7484  0D78  2D7A               	goto	u162_20
  7485  0D79                     u162_21:
  7486  0D79  2D8D               	goto	i1l2131
  7487  0D7A                     u162_20:
  7488  0D7A                     i1l2121:
  7489                           
  7490                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7491  0D7A  0020               	movlb	0	; select bank0
  7492  0D7B  080C               	movf	12,w	;volatile
  7493  0D7C  00F0               	movwf	??i1_readGPIO
  7494  0D7D  0870               	movf	??i1_readGPIO,w
  7495  0D7E  00F2               	movwf	i1readGPIO@readA
  7496  0D7F                     i1l2123:
  7497                           
  7498                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7499  0D7F  0872               	movf	i1readGPIO@readA,w
  7500  0D80  00F0               	movwf	??i1_readGPIO
  7501  0D81  0A76               	incf	i1readGPIO@portNumber,w
  7502  0D82  2D84               	goto	u163_24
  7503  0D83                     u163_25:
  7504  0D83  36F0               	lsrf	??i1_readGPIO,f
  7505  0D84                     u163_24:
  7506  0D84  0B89               	decfsz	9,f
  7507  0D85  2D83               	goto	u163_25
  7508  0D86  0870               	movf	??i1_readGPIO,w
  7509  0D87  3901               	andlw	1
  7510  0D88  00F1               	movwf	??i1_readGPIO+1
  7511  0D89  0871               	movf	??i1_readGPIO+1,w
  7512  0D8A  00F3               	movwf	i1readGPIO@returnValueA
  7513  0D8B                     i1l2125:
  7514                           
  7515                           ;GPIO.c: 94:         return returnValueA;
  7516  0D8B  0873               	movf	i1readGPIO@returnValueA,w
  7517  0D8C  2DA6               	goto	i1l326
  7518  0D8D                     i1l2131:
  7519  0D8D  0377               	decf	i1readGPIO@portType,w
  7520  0D8E  1D03               	btfss	3,2
  7521  0D8F  2D91               	goto	u164_21
  7522  0D90  2D92               	goto	u164_20
  7523  0D91                     u164_21:
  7524  0D91  2DA5               	goto	i1l2143
  7525  0D92                     u164_20:
  7526  0D92                     i1l2133:
  7527                           
  7528                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7529  0D92  0020               	movlb	0	; select bank0
  7530  0D93  080D               	movf	13,w	;volatile
  7531  0D94  00F0               	movwf	??i1_readGPIO
  7532  0D95  0870               	movf	??i1_readGPIO,w
  7533  0D96  00F4               	movwf	i1readGPIO@readB
  7534  0D97                     i1l2135:
  7535                           
  7536                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7537  0D97  0874               	movf	i1readGPIO@readB,w
  7538  0D98  00F0               	movwf	??i1_readGPIO
  7539  0D99  0A76               	incf	i1readGPIO@portNumber,w
  7540  0D9A  2D9C               	goto	u165_24
  7541  0D9B                     u165_25:
  7542  0D9B  36F0               	lsrf	??i1_readGPIO,f
  7543  0D9C                     u165_24:
  7544  0D9C  0B89               	decfsz	9,f
  7545  0D9D  2D9B               	goto	u165_25
  7546  0D9E  0870               	movf	??i1_readGPIO,w
  7547  0D9F  3901               	andlw	1
  7548  0DA0  00F1               	movwf	??i1_readGPIO+1
  7549  0DA1  0871               	movf	??i1_readGPIO+1,w
  7550  0DA2  00F5               	movwf	i1readGPIO@returnValueB
  7551  0DA3                     i1l2137:
  7552                           
  7553                           ;GPIO.c: 99:         return returnValueB;
  7554  0DA3  0875               	movf	i1readGPIO@returnValueB,w
  7555  0DA4  2DA6               	goto	i1l326
  7556  0DA5                     i1l2143:
  7557  0DA5  3000               	movlw	0
  7558  0DA6                     i1l326:
  7559  0DA6  0008               	return
  7560  0DA7                     __end_ofi1_readGPIO:
  7561                           
  7562                           	psect	text33
  7563  0D25                     __ptext33:	
  7564 ;; *************** function _convertRawToMilliVolts *****************
  7565 ;; Defined at:
  7566 ;;		line 53 in file "Controller.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  rawValue        2   12[COMMON] unsigned short 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;  vsenseMult      4    5[BANK0 ] long 
  7571 ;;  returnValued    2   11[BANK0 ] short 
  7572 ;;  offsetted       2    9[BANK0 ] short 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  2   12[COMMON] short 
  7575 ;; Registers used:
  7576 ;;		wreg, status,2, status,0, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7582 ;;      Params:         2       0       0       0       0       0
  7583 ;;      Locals:         0       8       0       0       0       0
  7584 ;;      Temps:          0       5       0       0       0       0
  7585 ;;      Totals:         2      13       0       0       0       0
  7586 ;;Total ram usage:       15 bytes
  7587 ;; Hardware stack levels used: 1
  7588 ;; Hardware stack levels required when called: 1
  7589 ;; This function calls:
  7590 ;;		___lmul
  7591 ;; This function is called by:
  7592 ;;		_runVoltageModeControl
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596  0D25                     _convertRawToMilliVolts:	
  7597                           ;psect for function _convertRawToMilliVolts
  7598                           
  7599  0D25                     i1l2055:	
  7600                           ;incstack = 0
  7601                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7602                           
  7603                           
  7604                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7605  0D25  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7606  0D26  0020               	movlb	0	; select bank0
  7607  0D27  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7608  0D28  087C               	movf	convertRawToMilliVolts@rawValue,w
  7609  0D29  00A9               	movwf	convertRawToMilliVolts@offsetted
  7610  0D2A                     i1l2057:
  7611                           
  7612                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7613  0D2A  0829               	movf	convertRawToMilliVolts@offsetted,w
  7614  0D2B  00F0               	movwf	___lmul@multiplier
  7615  0D2C  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7616  0D2D  00F1               	movwf	___lmul@multiplier+1
  7617  0D2E  0D89               	rlf	9,f
  7618  0D2F  3B89               	subwfb	9,f
  7619  0D30  0989               	comf	9,f
  7620  0D31  00F2               	movwf	___lmul@multiplier+2
  7621  0D32  00F3               	movwf	___lmul@multiplier+3
  7622  0D33  3000               	movlw	0
  7623  0D34  00F7               	movwf	___lmul@multiplicand+3
  7624  0D35  3000               	movlw	0
  7625  0D36  00F6               	movwf	___lmul@multiplicand+2
  7626  0D37  3017               	movlw	23
  7627  0D38  00F5               	movwf	___lmul@multiplicand+1
  7628  0D39  30D4               	movlw	212
  7629  0D3A  00F4               	movwf	___lmul@multiplicand
  7630  0D3B  318C  24BA  318D   	fcall	___lmul
  7631  0D3E  0873               	movf	?___lmul+3,w
  7632  0D3F  0020               	movlb	0	; select bank0
  7633  0D40  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7634  0D41  0872               	movf	?___lmul+2,w
  7635  0D42  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7636  0D43  0871               	movf	?___lmul+1,w
  7637  0D44  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7638  0D45  0870               	movf	?___lmul,w
  7639  0D46  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7640  0D47                     i1l2059:
  7641                           
  7642                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7643  0D47  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7644  0D48  00A0               	movwf	??_convertRawToMilliVolts
  7645  0D49  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7646  0D4A  00A1               	movwf	??_convertRawToMilliVolts+1
  7647  0D4B  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7648  0D4C  00A2               	movwf	??_convertRawToMilliVolts+2
  7649  0D4D  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7650  0D4E  00A3               	movwf	??_convertRawToMilliVolts+3
  7651  0D4F  3008               	movlw	8
  7652  0D50  00A4               	movwf	??_convertRawToMilliVolts+4
  7653  0D51                     u147_25:
  7654  0D51  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7655  0D52  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7656  0D53  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7657  0D54  0CA0               	rrf	??_convertRawToMilliVolts,f
  7658  0D55                     u147_20:
  7659  0D55  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7660  0D56  2D51               	goto	u147_25
  7661  0D57  0821               	movf	??_convertRawToMilliVolts+1,w
  7662  0D58  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7663  0D59  0820               	movf	??_convertRawToMilliVolts,w
  7664  0D5A  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7665  0D5B                     i1l2061:
  7666                           
  7667                           ;Controller.c: 57:     return returnValuedV;
  7668  0D5B  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7669  0D5C  00FD               	movwf	?_convertRawToMilliVolts+1
  7670  0D5D  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7671  0D5E  00FC               	movwf	?_convertRawToMilliVolts
  7672  0D5F                     i1l440:
  7673  0D5F  0008               	return
  7674  0D60                     __end_of_convertRawToMilliVolts:
  7675                           
  7676                           	psect	text34
  7677  0CBA                     __ptext34:	
  7678 ;; *************** function ___lmul *****************
  7679 ;; Defined at:
  7680 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  multiplier      4    0[COMMON] unsigned long 
  7683 ;;  multiplicand    4    4[COMMON] unsigned long 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  product         4    8[COMMON] unsigned long 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  4    0[COMMON] unsigned long 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7695 ;;      Params:         8       0       0       0       0       0
  7696 ;;      Locals:         4       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0
  7698 ;;      Totals:        12       0       0       0       0       0
  7699 ;;Total ram usage:       12 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_runPotScaling
  7705 ;;		_convertRawToMilliVolts
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709  0CBA                     ___lmul:	
  7710                           ;psect for function ___lmul
  7711                           
  7712  0CBA                     i1l2013:	
  7713                           ;incstack = 0
  7714                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7715                           
  7716  0CBA  3000               	movlw	0
  7717  0CBB  00FB               	movwf	___lmul@product+3
  7718  0CBC  3000               	movlw	0
  7719  0CBD  00FA               	movwf	___lmul@product+2
  7720  0CBE  3000               	movlw	0
  7721  0CBF  00F9               	movwf	___lmul@product+1
  7722  0CC0  3000               	movlw	0
  7723  0CC1  00F8               	movwf	___lmul@product
  7724  0CC2                     i1l2015:
  7725  0CC2  1C70               	btfss	___lmul@multiplier,0
  7726  0CC3  2CC5               	goto	u134_21
  7727  0CC4  2CC6               	goto	u134_20
  7728  0CC5                     u134_21:
  7729  0CC5  2CCE               	goto	i1l2019
  7730  0CC6                     u134_20:
  7731  0CC6                     i1l2017:
  7732  0CC6  0874               	movf	___lmul@multiplicand,w
  7733  0CC7  07F8               	addwf	___lmul@product,f
  7734  0CC8  0875               	movf	___lmul@multiplicand+1,w
  7735  0CC9  3DF9               	addwfc	___lmul@product+1,f
  7736  0CCA  0876               	movf	___lmul@multiplicand+2,w
  7737  0CCB  3DFA               	addwfc	___lmul@product+2,f
  7738  0CCC  0877               	movf	___lmul@multiplicand+3,w
  7739  0CCD  3DFB               	addwfc	___lmul@product+3,f
  7740  0CCE                     i1l2019:
  7741  0CCE  3001               	movlw	1
  7742  0CCF                     u135_25:
  7743  0CCF  35F4               	lslf	___lmul@multiplicand,f
  7744  0CD0  0DF5               	rlf	___lmul@multiplicand+1,f
  7745  0CD1  0DF6               	rlf	___lmul@multiplicand+2,f
  7746  0CD2  0DF7               	rlf	___lmul@multiplicand+3,f
  7747  0CD3  0B89               	decfsz	9,f
  7748  0CD4  2CCF               	goto	u135_25
  7749  0CD5                     i1l2021:
  7750  0CD5  3001               	movlw	1
  7751  0CD6                     u136_25:
  7752  0CD6  36F3               	lsrf	___lmul@multiplier+3,f
  7753  0CD7  0CF2               	rrf	___lmul@multiplier+2,f
  7754  0CD8  0CF1               	rrf	___lmul@multiplier+1,f
  7755  0CD9  0CF0               	rrf	___lmul@multiplier,f
  7756  0CDA  0B89               	decfsz	9,f
  7757  0CDB  2CD6               	goto	u136_25
  7758  0CDC  0873               	movf	___lmul@multiplier+3,w
  7759  0CDD  0472               	iorwf	___lmul@multiplier+2,w
  7760  0CDE  0471               	iorwf	___lmul@multiplier+1,w
  7761  0CDF  0470               	iorwf	___lmul@multiplier,w
  7762  0CE0  1D03               	skipz
  7763  0CE1  2CE3               	goto	u137_21
  7764  0CE2  2CE4               	goto	u137_20
  7765  0CE3                     u137_21:
  7766  0CE3  2CC2               	goto	i1l2015
  7767  0CE4                     u137_20:
  7768  0CE4                     i1l2023:
  7769  0CE4  087B               	movf	___lmul@product+3,w
  7770  0CE5  00F3               	movwf	?___lmul+3
  7771  0CE6  087A               	movf	___lmul@product+2,w
  7772  0CE7  00F2               	movwf	?___lmul+2
  7773  0CE8  0879               	movf	___lmul@product+1,w
  7774  0CE9  00F1               	movwf	?___lmul+1
  7775  0CEA  0878               	movf	___lmul@product,w
  7776  0CEB  00F0               	movwf	?___lmul
  7777  0CEC                     i1l736:
  7778  0CEC  0008               	return
  7779  0CED                     __end_of___lmul:
  7780                           
  7781                           	psect	text35
  7782  0BCB                     __ptext35:	
  7783 ;; *************** function _abs *****************
  7784 ;; Defined at:
  7785 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  a               2    0[COMMON] int 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  2    0[COMMON] int 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7799 ;;      Params:         2       0       0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0
  7801 ;;      Temps:          2       0       0       0       0       0
  7802 ;;      Totals:         4       0       0       0       0       0
  7803 ;;Total ram usage:        4 bytes
  7804 ;; Hardware stack levels used: 1
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_runVoltageModeControl
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812  0BCB                     _abs:	
  7813                           ;psect for function _abs
  7814                           
  7815  0BCB                     i1l2065:	
  7816                           ;incstack = 0
  7817                           ; Regs used in _abs: [wreg+status,2+status,0]
  7818                           
  7819  0BCB  0871               	movf	abs@a+1,w
  7820  0BCC  3A80               	xorlw	128
  7821  0BCD  00F2               	movwf	??_abs
  7822  0BCE  3080               	movlw	128
  7823  0BCF  0272               	subwf	??_abs,w
  7824  0BD0  1D03               	skipz
  7825  0BD1  2BD4               	goto	u148_25
  7826  0BD2  3001               	movlw	1
  7827  0BD3  0270               	subwf	abs@a,w
  7828  0BD4                     u148_25:
  7829  0BD4  1803               	skipnc
  7830  0BD5  2BD7               	goto	u148_21
  7831  0BD6  2BD8               	goto	u148_20
  7832  0BD7                     u148_21:
  7833  0BD7  2BE4               	goto	i1l1182
  7834  0BD8                     u148_20:
  7835  0BD8                     i1l2067:
  7836  0BD8  0970               	comf	abs@a,w
  7837  0BD9  00F2               	movwf	??_abs
  7838  0BDA  0971               	comf	abs@a+1,w
  7839  0BDB  00F3               	movwf	??_abs+1
  7840  0BDC  0AF2               	incf	??_abs,f
  7841  0BDD  1903               	skipnz
  7842  0BDE  0AF3               	incf	??_abs+1,f
  7843  0BDF  0872               	movf	??_abs,w
  7844  0BE0  00F0               	movwf	?_abs
  7845  0BE1  0873               	movf	??_abs+1,w
  7846  0BE2  00F1               	movwf	?_abs+1
  7847  0BE3  2BE4               	goto	i1l1185
  7848  0BE4                     i1l1182:
  7849  0BE4                     i1l1185:
  7850  0BE4  0008               	return
  7851  0BE5                     __end_of_abs:
  7852                           
  7853                           	psect	text36
  7854  0DF1                     __ptext36:	
  7855 ;; *************** function ___omul *****************
  7856 ;; Defined at:
  7857 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7860 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  product         8    1[COMMON] unsigned long long 
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  8    0[BANK0 ] unsigned long long 
  7865 ;; Registers used:
  7866 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7872 ;;      Params:         0      16       0       0       0       0
  7873 ;;      Locals:         8       0       0       0       0       0
  7874 ;;      Temps:          1       0       0       0       0       0
  7875 ;;      Totals:         9      16       0       0       0       0
  7876 ;;Total ram usage:       25 bytes
  7877 ;; Hardware stack levels used: 1
  7878 ;; This function calls:
  7879 ;;		Nothing
  7880 ;; This function is called by:
  7881 ;;		_runVoltageModeControl
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885  0DF1                     ___omul:	
  7886                           ;psect for function ___omul
  7887                           
  7888  0DF1                     i1l2069:	
  7889                           ;incstack = 0
  7890                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7891                           
  7892  0DF1  3071               	movlw	low ___omul@product
  7893  0DF2  0086               	movwf	6
  7894  0DF3  3000               	movlw	high ___omul@product
  7895  0DF4  0087               	movwf	7
  7896  0DF5  3008               	movlw	8
  7897  0DF6  00F0               	movwf	??___omul
  7898  0DF7  3000               	movlw	0
  7899  0DF8                     u149_20:
  7900  0DF8  001E               	movwi fsr1++
  7901  0DF9  0BF0               	decfsz	??___omul,f
  7902  0DFA  2DF8               	goto	u149_20
  7903  0DFB                     i1l2071:
  7904  0DFB  0020               	movlb	0	; select bank0
  7905  0DFC  1C20               	btfss	___omul@multiplier,0
  7906  0DFD  2DFF               	goto	u150_21
  7907  0DFE  2E00               	goto	u150_20
  7908  0DFF                     u150_21:
  7909  0DFF  2E10               	goto	i1l2075
  7910  0E00                     u150_20:
  7911  0E00                     i1l2073:
  7912  0E00  0828               	movf	___omul@multiplicand,w
  7913  0E01  07F1               	addwf	___omul@product,f
  7914  0E02  0829               	movf	___omul@multiplicand+1,w
  7915  0E03  3DF2               	addwfc	___omul@product+1,f
  7916  0E04  082A               	movf	___omul@multiplicand+2,w
  7917  0E05  3DF3               	addwfc	___omul@product+2,f
  7918  0E06  082B               	movf	___omul@multiplicand+3,w
  7919  0E07  3DF4               	addwfc	___omul@product+3,f
  7920  0E08  082C               	movf	___omul@multiplicand+4,w
  7921  0E09  3DF5               	addwfc	___omul@product+4,f
  7922  0E0A  082D               	movf	___omul@multiplicand+5,w
  7923  0E0B  3DF6               	addwfc	___omul@product+5,f
  7924  0E0C  082E               	movf	___omul@multiplicand+6,w
  7925  0E0D  3DF7               	addwfc	___omul@product+6,f
  7926  0E0E  082F               	movf	___omul@multiplicand+7,w
  7927  0E0F  3DF8               	addwfc	___omul@product+7,f
  7928  0E10                     i1l2075:
  7929  0E10  35A8               	lslf	___omul@multiplicand,f
  7930  0E11  0DA9               	rlf	___omul@multiplicand+1,f
  7931  0E12  0DAA               	rlf	___omul@multiplicand+2,f
  7932  0E13  0DAB               	rlf	___omul@multiplicand+3,f
  7933  0E14  0DAC               	rlf	___omul@multiplicand+4,f
  7934  0E15  0DAD               	rlf	___omul@multiplicand+5,f
  7935  0E16  0DAE               	rlf	___omul@multiplicand+6,f
  7936  0E17  0DAF               	rlf	___omul@multiplicand+7,f
  7937  0E18                     i1l2077:
  7938  0E18  36A7               	lsrf	___omul@multiplier+7,f
  7939  0E19  0CA6               	rrf	___omul@multiplier+6,f
  7940  0E1A  0CA5               	rrf	___omul@multiplier+5,f
  7941  0E1B  0CA4               	rrf	___omul@multiplier+4,f
  7942  0E1C  0CA3               	rrf	___omul@multiplier+3,f
  7943  0E1D  0CA2               	rrf	___omul@multiplier+2,f
  7944  0E1E  0CA1               	rrf	___omul@multiplier+1,f
  7945  0E1F  0CA0               	rrf	___omul@multiplier,f
  7946  0E20  0820               	movf	___omul@multiplier,w
  7947  0E21  0421               	iorwf	___omul@multiplier+1,w
  7948  0E22  0422               	iorwf	___omul@multiplier+2,w
  7949  0E23  0423               	iorwf	___omul@multiplier+3,w
  7950  0E24  0424               	iorwf	___omul@multiplier+4,w
  7951  0E25  0425               	iorwf	___omul@multiplier+5,w
  7952  0E26  0426               	iorwf	___omul@multiplier+6,w
  7953  0E27  0427               	iorwf	___omul@multiplier+7,w
  7954  0E28  1D03               	skipz
  7955  0E29  2E2B               	goto	u151_21
  7956  0E2A  2E2C               	goto	u151_20
  7957  0E2B                     u151_21:
  7958  0E2B  2DFB               	goto	i1l2071
  7959  0E2C                     u151_20:
  7960  0E2C                     i1l741:
  7961  0E2C  0871               	movf	___omul@product,w
  7962  0E2D  00A0               	movwf	?___omul
  7963  0E2E  0872               	movf	___omul@product+1,w
  7964  0E2F  00A1               	movwf	?___omul+1
  7965  0E30  0873               	movf	___omul@product+2,w
  7966  0E31  00A2               	movwf	?___omul+2
  7967  0E32  0874               	movf	___omul@product+3,w
  7968  0E33  00A3               	movwf	?___omul+3
  7969  0E34  0875               	movf	___omul@product+4,w
  7970  0E35  00A4               	movwf	?___omul+4
  7971  0E36  0876               	movf	___omul@product+5,w
  7972  0E37  00A5               	movwf	?___omul+5
  7973  0E38  0877               	movf	___omul@product+6,w
  7974  0E39  00A6               	movwf	?___omul+6
  7975  0E3A  0878               	movf	___omul@product+7,w
  7976  0E3B  00A7               	movwf	?___omul+7
  7977  0E3C                     i1l742:
  7978  0E3C  0008               	return
  7979  0E3D                     __end_of___omul:
  7980                           
  7981                           	psect	text37
  7982  07E1                     __ptext37:	
  7983 ;; *************** function ___wmul *****************
  7984 ;; Defined at:
  7985 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  multiplier      2    0[COMMON] unsigned int 
  7988 ;;  multiplicand    2    2[COMMON] unsigned int 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  product         2    4[COMMON] unsigned int 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  2    0[COMMON] unsigned int 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8000 ;;      Params:         4       0       0       0       0       0
  8001 ;;      Locals:         2       0       0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0
  8003 ;;      Totals:         6       0       0       0       0       0
  8004 ;;Total ram usage:        6 bytes
  8005 ;; Hardware stack levels used: 1
  8006 ;; This function calls:
  8007 ;;		Nothing
  8008 ;; This function is called by:
  8009 ;;		_runPotScaling
  8010 ;;		_controlRoutine
  8011 ;;		_convertRawToMilliAmps
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015  07E1                     ___wmul:	
  8016                           ;psect for function ___wmul
  8017                           
  8018  07E1                     i1l2301:	
  8019                           ;incstack = 0
  8020                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8021                           
  8022  07E1  01F4               	clrf	___wmul@product
  8023  07E2  01F5               	clrf	___wmul@product+1
  8024  07E3                     i1l2303:
  8025  07E3  1C70               	btfss	___wmul@multiplier,0
  8026  07E4  2FE6               	goto	u207_21
  8027  07E5  2FE7               	goto	u207_20
  8028  07E6                     u207_21:
  8029  07E6  2FEB               	goto	i1l722
  8030  07E7                     u207_20:
  8031  07E7                     i1l2305:
  8032  07E7  0872               	movf	___wmul@multiplicand,w
  8033  07E8  07F4               	addwf	___wmul@product,f
  8034  07E9  0873               	movf	___wmul@multiplicand+1,w
  8035  07EA  3DF5               	addwfc	___wmul@product+1,f
  8036  07EB                     i1l722:
  8037  07EB  3001               	movlw	1
  8038  07EC                     u208_25:
  8039  07EC  35F2               	lslf	___wmul@multiplicand,f
  8040  07ED  0DF3               	rlf	___wmul@multiplicand+1,f
  8041  07EE  0B89               	decfsz	9,f
  8042  07EF  2FEC               	goto	u208_25
  8043  07F0                     i1l2307:
  8044  07F0  3001               	movlw	1
  8045  07F1                     u209_25:
  8046  07F1  36F1               	lsrf	___wmul@multiplier+1,f
  8047  07F2  0CF0               	rrf	___wmul@multiplier,f
  8048  07F3  0B89               	decfsz	9,f
  8049  07F4  2FF1               	goto	u209_25
  8050  07F5                     i1l2309:
  8051  07F5  0870               	movf	___wmul@multiplier,w
  8052  07F6  0471               	iorwf	___wmul@multiplier+1,w
  8053  07F7  1D03               	btfss	3,2
  8054  07F8  2FFA               	goto	u210_21
  8055  07F9  2FFB               	goto	u210_20
  8056  07FA                     u210_21:
  8057  07FA  2FE3               	goto	i1l2303
  8058  07FB                     u210_20:
  8059  07FB                     i1l2311:
  8060  07FB  0875               	movf	___wmul@product+1,w
  8061  07FC  00F1               	movwf	?___wmul+1
  8062  07FD  0874               	movf	___wmul@product,w
  8063  07FE  00F0               	movwf	?___wmul
  8064  07FF                     i1l724:
  8065  07FF  0008               	return
  8066  0800                     __end_of___wmul:
  8067                           
  8068                           	psect	text38
  8069  0EEF                     __ptext38:	
  8070 ;; *************** function ___lldiv *****************
  8071 ;; Defined at:
  8072 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;  divisor         4    6[COMMON] unsigned long 
  8075 ;;  dividend        4   10[COMMON] unsigned long 
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  quotient        4    1[BANK0 ] unsigned long 
  8078 ;;  counter         1    5[BANK0 ] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  4    6[COMMON] unsigned long 
  8081 ;; Registers used:
  8082 ;;		wreg, status,2, status,0
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8088 ;;      Params:         8       0       0       0       0       0
  8089 ;;      Locals:         0       5       0       0       0       0
  8090 ;;      Temps:          0       1       0       0       0       0
  8091 ;;      Totals:         8       6       0       0       0       0
  8092 ;;Total ram usage:       14 bytes
  8093 ;; Hardware stack levels used: 1
  8094 ;; This function calls:
  8095 ;;		Nothing
  8096 ;; This function is called by:
  8097 ;;		_runPotScaling
  8098 ;;		_controlRoutine
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102  0EEF                     ___lldiv:	
  8103                           ;psect for function ___lldiv
  8104                           
  8105  0EEF                     i1l2315:	
  8106                           ;incstack = 0
  8107                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8108                           
  8109  0EEF  3000               	movlw	0
  8110  0EF0  0020               	movlb	0	; select bank0
  8111  0EF1  00A4               	movwf	___lldiv@quotient+3
  8112  0EF2  3000               	movlw	0
  8113  0EF3  00A3               	movwf	___lldiv@quotient+2
  8114  0EF4  3000               	movlw	0
  8115  0EF5  00A2               	movwf	___lldiv@quotient+1
  8116  0EF6  3000               	movlw	0
  8117  0EF7  00A1               	movwf	___lldiv@quotient
  8118  0EF8  0879               	movf	___lldiv@divisor+3,w
  8119  0EF9  0478               	iorwf	___lldiv@divisor+2,w
  8120  0EFA  0477               	iorwf	___lldiv@divisor+1,w
  8121  0EFB  0476               	iorwf	___lldiv@divisor,w
  8122  0EFC  1903               	skipnz
  8123  0EFD  2EFF               	goto	u211_21
  8124  0EFE  2F00               	goto	u211_20
  8125  0EFF                     u211_21:
  8126  0EFF  2F41               	goto	i1l2335
  8127  0F00                     u211_20:
  8128  0F00                     i1l2317:
  8129  0F00  01A5               	clrf	___lldiv@counter
  8130  0F01  0AA5               	incf	___lldiv@counter,f
  8131  0F02  2F0E               	goto	i1l2321
  8132  0F03                     i1l2319:
  8133  0F03  3001               	movlw	1
  8134  0F04                     u212_25:
  8135  0F04  35F6               	lslf	___lldiv@divisor,f
  8136  0F05  0DF7               	rlf	___lldiv@divisor+1,f
  8137  0F06  0DF8               	rlf	___lldiv@divisor+2,f
  8138  0F07  0DF9               	rlf	___lldiv@divisor+3,f
  8139  0F08  0B89               	decfsz	9,f
  8140  0F09  2F04               	goto	u212_25
  8141  0F0A  3001               	movlw	1
  8142  0F0B  00A0               	movwf	??___lldiv
  8143  0F0C  0820               	movf	??___lldiv,w
  8144  0F0D  07A5               	addwf	___lldiv@counter,f
  8145  0F0E                     i1l2321:
  8146  0F0E  1FF9               	btfss	___lldiv@divisor+3,7
  8147  0F0F  2F11               	goto	u213_21
  8148  0F10  2F12               	goto	u213_20
  8149  0F11                     u213_21:
  8150  0F11  2F03               	goto	i1l2319
  8151  0F12                     u213_20:
  8152  0F12                     i1l2323:
  8153  0F12  3001               	movlw	1
  8154  0F13                     u214_25:
  8155  0F13  35A1               	lslf	___lldiv@quotient,f
  8156  0F14  0DA2               	rlf	___lldiv@quotient+1,f
  8157  0F15  0DA3               	rlf	___lldiv@quotient+2,f
  8158  0F16  0DA4               	rlf	___lldiv@quotient+3,f
  8159  0F17  0B89               	decfsz	9,f
  8160  0F18  2F13               	goto	u214_25
  8161  0F19                     i1l2325:
  8162  0F19  0879               	movf	___lldiv@divisor+3,w
  8163  0F1A  027D               	subwf	___lldiv@dividend+3,w
  8164  0F1B  1D03               	skipz
  8165  0F1C  2F27               	goto	u215_25
  8166  0F1D  0878               	movf	___lldiv@divisor+2,w
  8167  0F1E  027C               	subwf	___lldiv@dividend+2,w
  8168  0F1F  1D03               	skipz
  8169  0F20  2F27               	goto	u215_25
  8170  0F21  0877               	movf	___lldiv@divisor+1,w
  8171  0F22  027B               	subwf	___lldiv@dividend+1,w
  8172  0F23  1D03               	skipz
  8173  0F24  2F27               	goto	u215_25
  8174  0F25  0876               	movf	___lldiv@divisor,w
  8175  0F26  027A               	subwf	___lldiv@dividend,w
  8176  0F27                     u215_25:
  8177  0F27  1C03               	skipc
  8178  0F28  2F2A               	goto	u215_21
  8179  0F29  2F2B               	goto	u215_20
  8180  0F2A                     u215_21:
  8181  0F2A  2F34               	goto	i1l2331
  8182  0F2B                     u215_20:
  8183  0F2B                     i1l2327:
  8184  0F2B  0876               	movf	___lldiv@divisor,w
  8185  0F2C  02FA               	subwf	___lldiv@dividend,f
  8186  0F2D  0877               	movf	___lldiv@divisor+1,w
  8187  0F2E  3BFB               	subwfb	___lldiv@dividend+1,f
  8188  0F2F  0878               	movf	___lldiv@divisor+2,w
  8189  0F30  3BFC               	subwfb	___lldiv@dividend+2,f
  8190  0F31  0879               	movf	___lldiv@divisor+3,w
  8191  0F32  3BFD               	subwfb	___lldiv@dividend+3,f
  8192  0F33                     i1l2329:
  8193  0F33  1421               	bsf	___lldiv@quotient,0
  8194  0F34                     i1l2331:
  8195  0F34  3001               	movlw	1
  8196  0F35                     u216_25:
  8197  0F35  36F9               	lsrf	___lldiv@divisor+3,f
  8198  0F36  0CF8               	rrf	___lldiv@divisor+2,f
  8199  0F37  0CF7               	rrf	___lldiv@divisor+1,f
  8200  0F38  0CF6               	rrf	___lldiv@divisor,f
  8201  0F39  0B89               	decfsz	9,f
  8202  0F3A  2F35               	goto	u216_25
  8203  0F3B                     i1l2333:
  8204  0F3B  3001               	movlw	1
  8205  0F3C  02A5               	subwf	___lldiv@counter,f
  8206  0F3D  1D03               	btfss	3,2
  8207  0F3E  2F40               	goto	u217_21
  8208  0F3F  2F41               	goto	u217_20
  8209  0F40                     u217_21:
  8210  0F40  2F12               	goto	i1l2323
  8211  0F41                     u217_20:
  8212  0F41                     i1l2335:
  8213  0F41  0824               	movf	___lldiv@quotient+3,w
  8214  0F42  00F9               	movwf	?___lldiv+3
  8215  0F43  0823               	movf	___lldiv@quotient+2,w
  8216  0F44  00F8               	movwf	?___lldiv+2
  8217  0F45  0822               	movf	___lldiv@quotient+1,w
  8218  0F46  00F7               	movwf	?___lldiv+1
  8219  0F47  0821               	movf	___lldiv@quotient,w
  8220  0F48  00F6               	movwf	?___lldiv
  8221  0F49                     i1l758:
  8222  0F49  0008               	return
  8223  0F4A                     __end_of___lldiv:
  8224  007E                     btemp	set	126	;btemp
  8225  007E                     int$flags	set	126
  8226  007E                     wtemp0	set	126
  8227                           
  8228                           	psect	idloc
  8229                           
  8230                           ;Config register IDLOC0 @ 0x8000
  8231                           ;	unspecified, using default values
  8232  8000                     	org	32768
  8233  8000  3FFF               	dw	16383
  8234                           
  8235                           ;Config register IDLOC1 @ 0x8001
  8236                           ;	unspecified, using default values
  8237  8001                     	org	32769
  8238  8001  3FFF               	dw	16383
  8239                           
  8240                           ;Config register IDLOC2 @ 0x8002
  8241                           ;	unspecified, using default values
  8242  8002                     	org	32770
  8243  8002  3FFF               	dw	16383
  8244                           
  8245                           ;Config register IDLOC3 @ 0x8003
  8246                           ;	unspecified, using default values
  8247  8003                     	org	32771
  8248  8003  3FFF               	dw	16383
  8249                           
  8250                           	psect	config
  8251                           
  8252                           ;Config register CONFIG1 @ 0x8007
  8253                           ;	Oscillator Selection
  8254                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8255                           ;	Watchdog Timer Enable
  8256                           ;	WDTE = OFF, WDT disabled
  8257                           ;	Power-up Timer Enable
  8258                           ;	PWRTE = OFF, PWRT disabled
  8259                           ;	MCLR Pin Function Select
  8260                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8261                           ;	Flash Program Memory Code Protection
  8262                           ;	CP = OFF, Program memory code protection is disabled
  8263                           ;	Data Memory Code Protection
  8264                           ;	CPD = OFF, Data memory code protection is disabled
  8265                           ;	Brown-out Reset Enable
  8266                           ;	BOREN = ON, Brown-out Reset enabled
  8267                           ;	Clock Out Enable
  8268                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8269                           ;	Internal/External Switchover
  8270                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8271                           ;	Fail-Safe Clock Monitor Enable
  8272                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8273  8007                     	org	32775
  8274  8007  0FA4               	dw	4004
  8275                           
  8276                           ;Config register CONFIG2 @ 0x8008
  8277                           ;	Flash Memory Self-Write Protection
  8278                           ;	WRT = OFF, Write protection off
  8279                           ;	PLL Enable
  8280                           ;	PLLEN = OFF, 4x PLL disabled
  8281                           ;	Stack Overflow/Underflow Reset Enable
  8282                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8283                           ;	Brown-out Reset Voltage Selection
  8284                           ;	BORV = 0x1, unprogrammed default
  8285                           ;	Low-Voltage Programming Enable
  8286                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8287  8008                     	org	32776
  8288  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      79
    BANK1            80     13      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                _transToInitialising
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToInitialising                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    9713
                                             62 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       14    14      0    3024
                                              6 BANK0     14    14      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      12    12      0    3898
                                             50 BANK0     12    12      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    1748
                                             16 BANK0     34    34      0
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2    1019
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     852
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToInitialising
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Sep 22 22:07:14 2023

              ??_transToInitialising 00D2                  ___wmul@multiplicand 0072  
                                l120 0D22                                  l201 0B9E  
                                l320 0726                                  l234 0B82  
                                l306 0660                                  l243 06C6  
                                l139 05EA                                  l238 0688  
                                l430 0C1D                                  l326 0DF0  
                                l174 0C00                                  l512 0C3D  
                                l534 0BCA                                  l358 0BB0  
                                l560 0B78                                  l563 0B7C  
                                l566 0B96                                  l569 0B8F  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0BCB                                  wreg 0009  
                __end_ofi1_writeGPIO 0786                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D3                           i1_readGPIO 0D60  
                               ?_abs 0070                                 l2031 06D0  
                               l2201 06AF                                 l2041 06E2  
                               l2033 06D5                                 l2051 070C  
                               l2043 06E7                                 l2035 06D8  
                               l2027 06C9                                 l2053 0719  
                               l2045 06F4                                 l2037 06DC  
                               l2029 06CA                                 l2151 05F4  
                               l2047 0702                                 l2039 06DD  
                               l2161 0606                                 l2153 05F9  
                               l2049 0707                                 l2171 063B  
                               l2163 060B                                 l2155 05FC  
                               l2147 05ED                                 l2181 0670  
                               l2173 0654                                 l2165 0624  
                               l2157 0600                                 l2149 05EE  
                               l2191 0684                                 l2183 0671  
                               l2175 0663                                 l2167 0631  
                               l2159 0601                                 l2193 0686  
                               l2185 0673                                 l2177 0666  
                               l2169 0636                                 l2281 0BC3  
                               l2601 05B5                                 l2195 068D  
                               l2187 0679                                 l2179 066C  
                               l2603 05B6                                 l2197 0692  
                               l2189 067F                                 l2541 052B  
                               l2621 0BEC                                 l2199 06AA  
                               l2279 0BBD                                 l2551 0543  
                               l2543 052C                                 l2607 05BF  
                               l2631 0BF6                                 l2623 0BEE  
                               l2615 0BE5                                 l2535 0B76  
                               l2561 0556                                 l2553 0547  
                               l2545 0535                                 l2537 0528  
                               l2633 0BF8                                 l2625 0BF0  
                               l2617 0BE8                                 l2641 0B9C  
                               l2643 0B7D                                 l2651 0C0C  
                               l2571 0571                                 l2563 055F  
                               l2555 0548                                 l2547 0539  
                               l2539 0529                                 l2635 0BF9  
                               l2627 0BF1                                 l2619 0BEA  
                               l2645 0C1E                                 l2661 0DB8  
                               l2653 0DA9                                 l2581 0589  
                               l2573 0572                                 l2565 0563  
                               l2557 0551                                 l2549 053A  
                               l2637 0BFB                                 l2629 0BF4  
                               l2741 0CFA                                 l2733 0CED  
                               l2647 0BA8                                 l2671 0DD4  
                               l2663 0DBC                                 l2655 0DAA  
                               l2591 059C                                 l2583 058D  
                               l2575 057B                                 l2567 0564  
                               l2559 0555                                 l2639 0B97  
                               l2751 0D0C                                 l2743 0CFD  
                               l2735 0CF0                                 l2649 0C01  
                               l2681 0DE1                                 l2665 0DBD  
                               l2657 0DB0                                 l2593 05A5  
                               l2585 058E                                 l2577 057F  
                               l2569 056D                                 l2761 0D1F  
                               l2753 0D12                                 l2745 0D00  
                               l2737 0CF4                                 l2683 0DED  
                               l2667 0DC2                                 l2659 0DB5  
                               l2827 05C7                                 l2595 05A7  
                               l2587 0597                                 l2579 0580  
                               l2755 0D12                                 l2747 0D03  
                               l2739 0CF7                                 l2669 0DC8  
                               l2677 0DD6                                 l2597 05A8  
                               l2589 059B                                 l2693 0B90  
                               l2757 0D1B                                 l2749 0D06  
                               l2679 0DDB                                 l2599 05B1  
                               l2695 0B89                                 l2689 0DEF  
                               l2697 0B79                                 STR_1 0800  
                               u1400 06E7                                 u1401 06E6  
                               _LATA 010C                                 u1430 0707  
                               u1414 06EC                                 _LATB 010D  
                               u1431 0706                                 u1415 06EB  
                               u1440 070C                                 u1424 06F9  
                               u1441 070B                                 u1425 06F8  
                               u1380 06D0                                 u2500 0DB0  
                               u1381 06CF                                 u2501 0DAF  
                               u1454 0711                                 u1390 06E2  
                               u2510 0DC2                                 u1455 0710  
                               u1391 06E1                                 u2511 0DC1  
                               u1800 068D                                 u1720 0636  
                               u1704 061B                                 u1464 071E  
                               u1801 068C                                 u1721 0635  
                               u1705 061A                                 u1465 071D  
                               u1810 0692                                 u1730 063B  
                               u1714 0629                                 u2530 0DDB  
                               u1811 0691                                 u1731 063A  
                               u1715 0628                                 u2531 0DDA  
                               u1660 05F4                                 u2524 0DCD  
                               u1661 05F3                                 u2525 0DCC  
                               u1670 0606                                 u2630 0D1B  
                               u1671 0605                                 u2631 0D1A  
                               u1840 06AF                                 u1824 0697  
                               u1744 0640                                 u1680 060B  
                               u2544 0DE6                                 u1841 06AE  
                               u1825 0696                                 u1745 063F  
                               u1681 060A                                 u2545 0DE5  
                               u1834 06A2                                 u1770 066C  
                               u1754 064B                                 u1835 06A1  
                               u1771 066B                                 u1755 064A  
                               u1780 0679                                 u1764 0659  
                               u1781 0678                                 u1765 0658  
                               u1854 06B4                                 u1790 067F  
                               u1694 0610                                 u1855 06B3  
                               u1791 067E                                 u1695 060F  
                               u1864 06BF                                 u1865 06BE  
          _transToVoltageModeControl 0B90                      _filteredFreqPot 00AE  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0CED                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0086            ??_setupInternalOscillator 00D2  
                              ??_abs 0072                                ?_main 00DB  
                    __end_of___lldiv 0F4A                                i1l110 0084  
                              i1l320 0785                                i1l251 0ED8  
                              i1l252 0EDA                                i1l326 0DA6  
                              i1l246 0EA4                                i1l255 0EEE  
                              i1l247 0EB7                                i1l440 0D5F  
                              i1l177 0C8C                                i1l531 0E94  
                              i1l372 0FFF                                i1l517 0CB9  
                              i1l365 0FA4                                i1l437 07E0  
                              i1l462 0312                                i1l454 0525  
                              i1l534 0BBC                                i1l448 0507  
                              i1l449 0525                                i1l545 0C61  
                              i1l377 0440                                i1l722 07EB  
                              i1l379 044F                                i1l724 07FF  
                              i1l572 0BA7                                i1l741 0E2C  
                              i1l742 0E3C                                i1l736 0CEC  
                              i1l758 0F49                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078                 readFilteredFreqPot@i 0029  
           readFilteredDutyPot@i_754 0028                                status 0003  
                              wtemp0 007E               initialiseGPIO@portType 00D5  
                _initialiseADCModule 0B7D                 readFilteredDutyPot@i 0029  
         initialiseADCPin@gpioNumber 00D7                      __initialization 0088  
                       __end_of_main 0D25                    ?_initialiseADCPin 0070  
              _integratorScaledLimit 00A0                          i1_writeGPIO 0727  
                             ??_main 00DF                   ??_initialiseADCPin 00D2  
           __end_of_readFilteredVout 07E1                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00D8      __end_of_setupInternalOscillator 05EB  
setupInternalOscillator@selectedFreq 00D4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2021 0CD5  
                             i1l2013 0CBA                               i1l2101 0766  
                             i1l2023 0CE4                               i1l2015 0CC2  
                             i1l2111 0D68                               i1l2103 076B  
                             i1l2017 0CC6                               i1l2121 0D7A  
                             i1l2113 0D6D                               i1l2105 0778  
                             i1l2019 0CCE                               i1l2123 0D7F  
                             i1l2131 0D8D                               i1l2115 0D70  
                             i1l2107 0D61                               i1l2211 0EAA  
                             i1l2203 0E96                               i1l2301 07E1  
                             i1l2061 0D5B                               i1l2133 0D92  
                             i1l2125 0D8B                               i1l2117 0D74  
                             i1l2109 0D62                               i1l2221 0EC2  
                             i1l2213 0EB0                               i1l2205 0E98  
                             i1l1182 0BE4                               i1l2311 07FB  
                             i1l2303 07E3                               i1l2071 0DFB  
                             i1l2055 0D25                               i1l2135 0D97  
                             i1l2143 0DA5                               i1l2119 0D75  
                             i1l2231 0ED2                               i1l2223 0ECD  
                             i1l2215 0EB5                               i1l2207 0E9E  
                             u200_20 02DA                               i1l2321 0F0E  
                             i1l2305 07E7                               i1l2073 0E00  
                             i1l1185 0BE4                               i1l2065 0BCB  
                             i1l2057 0D2A                               i1l2137 0DA3  
                             i1l2081 0729                               i1l2233 0EDE  
                             i1l2217 0EBC                               i1l2209 0EA2  
                             i1l2401 0E4C                               i1l2331 0F34  
                             i1l2323 0F12                               i1l2315 0EEF  
                             i1l2307 07F0                               i1l2075 0E10  
                             i1l2067 0BD8                               i1l2059 0D47  
                             i1l2251 00D9                               i1l2091 073C  
                             i1l2083 072F                               i1l2235 0EE2  
                             i1l2219 0EBE                               i1l2243 0EEC  
                             i1l2403 0E50                               i1l2333 0F3B  
                             i1l2325 0F19                               i1l2317 0F00  
                             i1l2309 07F5                               i1l2077 0E18  
                             i1l2069 0DF1                               u200_25 02D1  
                             i1l2261 01AF                               i1l2253 00E7  
                             i1l2093 0741                               i1l2085 0734  
                             i1l2341 0BB6                               i1l2237 0EE6  
                             i1l2229 0ECE                               i1l2413 0E67  
                             i1l2405 0E56                               i1l2327 0F2B  
                             i1l2319 0F03                               i1l2335 0F41  
                             i1l2271 0299                               i1l2263 01BF  
                             i1l2255 011B                               i1l2247 00B4  
                             i1l2095 0746                               i1l2087 0737  
                             i1l2079 0728                               i1l2351 0C59  
                             i1l2343 0C3E                               i1l2239 0EE7  
                             i1l2511 0FB5                               i1l2503 0FA5  
                             i1l2415 0E77                               i1l2407 0E66  
                             i1l2431 0796                               i1l2423 0786  
                             u201_20 0C97                               i1l2329 0F33  
                             i1l2273 02BB                               i1l2265 01CA  
                             i1l2257 012A                               i1l2249 00CA  
                             i1l2361 0450                               u201_21 0C95  
                             i1l2097 0753                               i1l2089 073B  
                             i1l2353 0C5F                               i1l2345 0C46  
                             i1l2513 0FB9                               i1l2417 0E7B  
                             i1l2433 079A                               i1l2275 02EC  
                             i1l2267 0217                               i1l2259 0185  
                             i1l2371 0468                               i1l2363 0457  
                             i1l2291 0CB7                               i1l2283 0C8D  
                             i1l2099 0761                               i1l2339 0BB1  
                             i1l2347 0C51                               i1l2531 0FEC  
                             i1l2515 0FBF                               i1l2419 0E81  
                             i1l2451 07CD                               i1l2435 07A0  
                             i1l2355 0C62                               i1l2277 030E  
                             i1l2269 0267                               i1l2381 04FE  
                             i1l2373 046D                               i1l2365 045D  
                             i1l2293 0CB8                               i1l2285 0CAB  
                             i1l2349 0C55                               i1l2525 0FD2  
                             i1l2517 0FC8                               i1l2509 0FA7  
                             i1l2445 07B3                               i1l2437 07A9  
                             i1l2429 0788                               i1l2461 0426  
                             i1l2357 0C65                               i1l2701 001B  
                             i1l2391 0520                               i1l2383 0502  
                             i1l2367 045F                               i1l2287 0CAD  
                             i1l2471 0F4A                               i1l2527 0FE2  
                             i1l2519 0FD1                               i1l2447 07C3  
                             i1l2439 07B2                               i1l2463 0432  
                             i1l2455 0313                               i1l2359 0C70  
                             i1l2711 0035                               i1l2703 0021  
                             u210_20 07FB                               u202_20 0C98  
                             u210_21 07FA                               i1l2385 050B  
                             i1l2369 0465                               i1l2377 04A0  
                             i1l2289 0CB2                               i1l2297 0B9F  
                             i1l2481 0F5E                               i1l2529 0FE6  
                             i1l2393 0E3D                               i1l2449 07C7  
                             i1l2465 043C                               i1l2457 0319  
                             i1l2721 0053                               i1l2713 003D  
                             i1l2705 0024                               i1l2379 04FA  
                             i1l2299 0BA3                               i1l2483 0F64  
                             i1l2467 044A                               i1l2459 0323  
                             i1l2731 0083                               i1l2723 0063  
                             i1l2715 0045                               i1l2707 0029  
                             i1l2389 0516                               i1l2493 0F77  
                             i1l2485 0F6D                               i1l2477 0F4C  
                             i1l2469 044E                               i1l2725 006E  
                             i1l2717 004A                               i1l2709 002F  
                             i1l2495 0F87                               i1l2487 0F76  
                             i1l2479 0F5A                               i1l2399 0E3E  
                             i1l2727 0073                               i1l2719 004D  
                             u211_20 0F00                               u203_20 0CA6  
                             u211_21 0EFF                               u203_21 0CA4  
                             i1l2497 0F8B                               i1l2729 0078  
                             i1l2499 0F91                               u204_20 0CA7  
                             u220_20 0C5F                               u220_21 0C5E  
                             i1l2699 0006                               u212_25 0F04  
                             u213_20 0F12                               u205_20 0CB2  
                             u221_20 0C8A                               u213_21 0F11  
                             u205_21 0CB1                               u221_21 0C87  
                             u150_20 0E00                               u134_20 0CC6  
                             u206_20 0CB7                               u230_20 0E56  
                             u150_21 0DFF                               u134_21 0CC5  
                             u206_21 0CB6                               u230_21 0E55  
                             u222_24 0C8C                               u214_25 0F13  
                             u215_20 0F2B                               u207_20 07E7  
                             u151_20 0E2C                               u223_20 0457  
                             u231_20 0E81                               u215_21 0F2A  
                             u207_21 07E6                               u151_21 0E2B  
                             u223_21 0456                               u231_21 0E80  
                             u215_25 0F27                               u135_25 0CCF  
                             u224_20 045D                               u152_20 072F  
                             u232_20 0E8E                               u240_20 03F3  
                             u224_21 045C                               u152_21 072E  
                             u160_24 077D                               u216_25 0F35  
                             u208_25 07EC                               u136_25 0CD6  
                             u160_25 077C                               u232_25 0E8A  
                             u240_25 03EF                               u217_20 0F41  
                             u137_20 0CE4                               u161_20 0D68  
                             u225_20 0465                               u153_20 0741  
                             u233_20 07A0                               u241_20 041E  
                             u217_21 0F40                               u137_21 0CE3  
                             u161_21 0D67                               u225_21 0464  
                             u153_21 0740                               u233_21 079F  
                             u209_25 07F1                               u241_25 041A  
                             u162_20 0D7A                               u226_20 0502  
                             u154_20 0746                               u218_20 0C46  
                             u234_20 07CD                               u242_20 043C  
                             u162_21 0D79                               u226_21 0501  
                             u154_21 0745                               u218_21 0C45  
                             u234_21 07CC                               u242_21 043B  
                             u242_25 0438                               u147_20 0D55  
                             u227_20 050B                               u219_20 0C51  
                             u235_20 07DA                               u243_20 044A  
                             u227_21 050A                               u219_21 0C50  
                             u243_21 0449                               u163_24 0D84  
                             u155_24 074B                               u147_25 0D51  
                             u163_25 0D83                               u155_25 074A  
                             u235_25 07D6                               u243_25 0446  
                             u148_20 0BD8                               u164_20 0D92  
                             u228_20 0515                               u244_20 0F64  
                             u236_20 0319                               u260_20 006B  
                             u148_21 0BD7                               u164_21 0D91  
                             u228_21 0514                               u244_21 0F63  
                             u236_21 0318                               u156_24 0758  
                             u148_25 0BD4                               u228_25 0511  
                             u156_25 0757                               u149_20 0DF8  
                             u229_20 0520                               u157_20 0766  
                             u245_20 0F91                               u237_20 0323  
                             u261_20 007F                               u229_21 051F  
                             u157_21 0765                               u245_21 0F90  
                             u237_21 0322                               u261_21 007D  
                             u165_24 0D9C                               u165_25 0D9B  
                             u229_25 051C                               u158_20 076B  
                             u190_20 0EBC                               u246_20 0F9E  
                             u238_20 0345                               u262_20 0080  
                             u158_21 076A                               u190_21 0EBB  
                             u246_25 0F9A                               u238_25 0341  
                             u247_20 0FBF                               u239_20 0370  
                             u255_20 0021                               u247_21 0FBE  
                             u255_21 0020                               u159_24 0770  
                             u159_25 076F                               u191_25 0EC5  
                             u239_25 036C                               u192_20 0ED8  
                             u248_20 0FEC                               u256_20 002F  
                             u192_21 0ED7                               u248_21 0FEB  
                             u256_21 002E                               u193_20 0EDE  
                             u249_20 0FF9                               u257_20 004A  
                             u193_21 0EDD                               u257_21 0049  
                             u249_25 0FF5                               u194_20 00CA  
                             u258_20 0053                               u194_21 00C9  
                             u258_21 0052                               u195_20 01AF  
                             u187_20 0E9E                               u259_20 006A  
                             u195_21 01AE                               u187_21 0E9D  
                             u259_21 0068                               u195_23 01AB  
                             u196_20 01CA                               u188_20 0EAA  
                             u196_21 01C9                               u188_21 0EA9  
                    ??_runPotScaling 0026                               u197_20 0217  
                             u189_20 0EB0                               u197_21 0216  
                             u189_21 0EAF                               u197_23 0213  
                             u198_20 0287                               u198_25 027E  
                             u199_20 02AA                               u199_25 02A6  
            initialiseGPIO@direction 00D2                     readGPIO@portType 00D9  
                readADCRaw@gpioValid 0077                               ___lmul 0CBA  
                             ___omul 0DF1                               ___wmul 07E1  
                          ??___lldiv 0020                     __end_of_readGPIO 0DF1  
                     _controlRoutine 0450                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D2             _initialisePotentiometers 0BA8  
         initialiseADCPin@portNumber 00D6                     __end_of_setupPWM 0C01  
                    _currentTripRead 0C8D           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00B0               __end_of_controlRoutine 0526  
                     __pcstackCOMMON 0070               runPotScaling@potScaled 002C  
          initialiseADCPin@gpioValid 00D4                i1writeGPIO@gpioNumber 0074  
                      _currentILFIFO 0120                       _OPTION_REGbits 0095  
                  __end_of_Tick490Hz 0086                _runVoltageModeControl 00B4  
                         __pbssBANK0 005F                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0220          __end_of_transToInitialising 0B79  
                         __pmaintext 0CED                      ?_controlRoutine 0070  
                            ?___lmul 0070                              ?___omul 0020  
                            ?___wmul 0070    __end_of_transToVoltageModeControl 0B97  
           ??_convertRawToMilliVolts 0020                           __pintentry 0004  
                            _CCP1CON 0293                  ___omul@multiplicand 0028  
                     ___lmul@product 0078              __end_of_currentTripRead 0CBA  
        __end_of_setPWMDutyandPeriod 0C8D     __end_of_initialiseCurrentSensors 0C3E  
         __end_ofi1_currentTripReset 0BBD             initialiseADCPin@portType 00D5  
            _transToOverCurrentFault 0B9F                   i1readGPIO@portType 0077  
              readFilteredVout@i_836 0028                i1writeGPIO@portNumber 0075  
                         _filteredIL 00B0                            ?_readGPIO 0070  
                         _readADCRaw 0E95                  _readFilteredFreqPot 0FA5  
               i1readGPIO@gpioNumber 0078                  _readFilteredDutyPot 0F4A  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00D6                              ___lldiv 0EEF  
                       ?i1_writeGPIO 0070                 ?_readFilteredFreqPot 007A  
                            __ptext1 0B90                              __ptext2 0B79  
                            __ptext3 0B76                              __ptext4 0B89  
                            __ptext5 0B97                              __ptext6 0BE5  
                            __ptext7 0526                              __ptext8 0DA7  
                            __ptext9 0BA8                 ?_readFilteredDutyPot 007A  
       __end_of_initialiseController 0C1E                            _T2CONbits 001C  
                  ?_readFilteredVout 007A                              _setDuty 0063  
              i1writeGPIO@writeValue 0070               ?_runVoltageModeControl 0070  
                            _tripIDS 006B                   ??_readFilteredVout 0020  
                       ??i1_readGPIO 0070                              clrloop0 0B84  
               end_of_initialization 00B0      convertRawToMilliVolts@offsetted 0029  
                         ??_readGPIO 00D2                       ___omul@product 0071  
           ?_setupInternalOscillator 0070                      ___lldiv@divisor 0076  
                    ___lldiv@counter 0025                     _currentTripCount 0069  
                         ??_setupPWM 00D8                     _currentTripReset 0BBD  
         ??_initialisePotentiometers 00D8                           _prevPeriod 006D  
                  writeGPIO@portType 00D5                       _readFilteredIL 0E3D  
                 __end_ofi1_readGPIO 0DA7                ??_readFilteredFreqPot 0020  
              ??_readFilteredDutyPot 0020                 i1readGPIO@portNumber 0076  
                   ?_currentTripRead 0070                    __end_of_writeGPIO 0727  
          ??_transToOverCurrentFault 0070             initialiseGPIO@portNumber 00D7  
                       _filteredVout 005F          ??_transToCurrentModeControl 00D2  
                        ?_readADCRaw 0070                    _transToPotControl 0B79  
                        _CCP1CONbits 0293                        readGPIO@readA 00D4  
                      readGPIO@readB 00D6                __end_of_runPotScaling 0450  
                 ?_transToPotControl 0070            ?_initialiseCurrentSensors 0070  
               _voltageModeVariables 00B6               __end_of_readFilteredIL 0E95  
                ??_transToPotControl 00D2                       __end_of___lmul 0CED  
        __end_of_initialiseADCModule 0B83                       __end_of___omul 0E3D  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0800  
              controlRoutine@minDuty 005A                       _clockFrequency 00A8  
                start_initialization 0088         __end_of_setupTimer0Interrupt 0B9F  
                     _currentIDSFIFO 0140                          __end_of_abs 0BE5  
                          _Tick490Hz 0004               _convertRawToMilliVolts 0D25  
          __end_of_transToPotControl 0B7D     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0BA8           __end_of_currentTripMonitor 0C62  
               _initialiseController 0C01                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0B89                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D2  
                         ?_Tick490Hz 0070                     _initialiseADCPin 0661  
                       _currentState 006C                   i1_currentTripReset 0BB1  
                 readGPIO@gpioNumber 00DA                ?_initialiseController 0070  
                     _initialiseGPIO 05EB                      i1readGPIO@readA 0072  
                    i1readGPIO@readB 0074     __end_of_initialisePotentiometers 0BB1  
                ?i1_currentTripReset 0070                             ?___lldiv 0076  
         ?_transToVoltageModeControl 0070      runVoltageModeControl@newVoltage 0050  
      runVoltageModeControl@propMult 0048              ??_runVoltageModeControl 0030  
               ??i1_currentTripReset 0076             __end_of_currentTripReset 0BCB  
    readFilteredDutyPot@sumOfSamples 0024                       ___wmul@product 0074  
             __end_of_initialiseGPIO 0661                            clear_ram0 0B83  
                          _setPeriod 006E                             _PIE1bits 0091  
       setPWMDutyandPeriod@dutyCycle 0070                 _setupTimer0Interrupt 0B97  
  runVoltageModeControl@integralMult 0040                  _currentTripRead$918 007A  
                        _filteredIDS 00B2                           _ADCON0bits 009D  
                  ___wmul@multiplier 0070                   readGPIO@portNumber 00D8  
                        _freqPotFIFO 01A0                            _writeGPIO 06C7  
                        ??_Tick490Hz 005E                    ___lmul@multiplier 0070  
                       ??_readADCRaw 0072               ??_initialiseController 00D8  
                    ?_initialiseGPIO 00D2         readFilteredVout@sumOfSamples 0024  
                  readADCRaw@channel 0076                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 1000          __end_of_readFilteredDutyPot 0FA5  
               runPotScaling@maxDuty 0030                 runPotScaling@minDuty 0032  
                writeGPIO@gpioNumber 00D6  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0EEF             readFilteredFreqPot@i_758 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00D2  
                           __ptext10 0C1E                             __ptext11 0BBD  
                           __ptext20 0786                             __ptext12 06C7  
                           __ptext21 0E3D                             __ptext13 0C01  
                           __ptext30 0450                             __ptext22 0FA5  
                           __ptext14 05EB                             __ptext31 00B4  
                           __ptext23 0F4A                             __ptext15 0661  
                           __ptext32 0D60                             __ptext24 0E95  
                           __ptext16 0B7D                             __ptext33 0D25  
                           __ptext25 0C3E                             __ptext34 0CBA  
                           __ptext26 0BB1                             __ptext18 0C62  
                           __ptext35 0BCB                             __ptext27 0727  
                           __ptext19 0313                             __ptext36 0DF1  
                           __ptext28 0B9F                             __ptext37 07E1  
                           __ptext29 0C8D                             __ptext38 0EEF  
          ?_initialisePotentiometers 0070                          _dutyPotFIFO 0220  
                i1writeGPIO@portType 0073           readFilteredIL@sumOfSamples 0076  
                           _readGPIO 0DA7                             _latestIL 0061  
                   ??_readFilteredIL 0072                        _timerSlotHalf 0067  
                       _PSTR1CONbits 0296                             _prevDuty 00B4  
                           _setupPWM 0BE5                             int$flags 007E  
                           _slotTest 0065             __end_of_initialiseADCPin 06C7  
                           main@argc 00DB             ?_transToOverCurrentFault 0070  
                           main@argv 00DD                             _voutFIFO 01C0  
    readFilteredFreqPot@sumOfSamples 0024                   _currentTripMonitor 0C3E  
                   _timerSlotQuarter 0066       __end_of_convertRawToMilliVolts 0D60  
                         _INTCONbits 000B                  ?_currentTripMonitor 0070  
  __end_of_transToCurrentModeControl 0B90                  _transToInitialising 0B76  
                writeGPIO@portNumber 00D7                             intlevel1 0000  
           _initialiseCurrentSensors 0C1E                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 0786               ??_setupTimer0Interrupt 00D2  
                         _OSCCONbits 0099          controlRoutine@setDuty_unreg 005C  
               ??_currentTripMonitor 007B                          _potSetCount 0068  
               ?_transToInitialising 0070                  _setPWMDutyandPeriod 0C62  
            _setupInternalOscillator 0526          ??_transToVoltageModeControl 00D2  
                      ??i1_writeGPIO 0071                        __pstringtext1 0800  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 0313  
                writeGPIO@writeValue 00D2                          ??_writeGPIO 00D3  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00D8                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 0313  
               readGPIO@returnValueA 00D5                 readGPIO@returnValueB 00D7  
                readFilteredIL@i_926 007A                      readFilteredIL@i 007B  
