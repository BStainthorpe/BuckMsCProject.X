

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Aug 08 12:14:01 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 2.40
    59                           ; Generated 17/11/2021 GMT
    60                           ; 
    61                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F1827 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  0111                     	;# 
   142  0112                     	;# 
   143  0113                     	;# 
   144  0114                     	;# 
   145  0115                     	;# 
   146  0116                     	;# 
   147  0117                     	;# 
   148  0118                     	;# 
   149  0119                     	;# 
   150  011A                     	;# 
   151  011B                     	;# 
   152  011D                     	;# 
   153  011E                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0194                     	;# 
   163  0195                     	;# 
   164  0196                     	;# 
   165  0199                     	;# 
   166  019A                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  0219                     	;# 
   194  021A                     	;# 
   195  021B                     	;# 
   196  021C                     	;# 
   197  021D                     	;# 
   198  021E                     	;# 
   199  021F                     	;# 
   200  0291                     	;# 
   201  0291                     	;# 
   202  0292                     	;# 
   203  0293                     	;# 
   204  0294                     	;# 
   205  0295                     	;# 
   206  0295                     	;# 
   207  0296                     	;# 
   208  0298                     	;# 
   209  0298                     	;# 
   210  0299                     	;# 
   211  029A                     	;# 
   212  029B                     	;# 
   213  029C                     	;# 
   214  029C                     	;# 
   215  029D                     	;# 
   216  029E                     	;# 
   217  029E                     	;# 
   218  0311                     	;# 
   219  0311                     	;# 
   220  0312                     	;# 
   221  0313                     	;# 
   222  0318                     	;# 
   223  0318                     	;# 
   224  0319                     	;# 
   225  031A                     	;# 
   226  0394                     	;# 
   227  0395                     	;# 
   228  0396                     	;# 
   229  039A                     	;# 
   230  039C                     	;# 
   231  039D                     	;# 
   232  039E                     	;# 
   233  039F                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000D                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0014                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  001E                     	;# 
   279  001F                     	;# 
   280  008C                     	;# 
   281  008D                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0093                     	;# 
   285  0094                     	;# 
   286  0095                     	;# 
   287  0096                     	;# 
   288  0097                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009A                     	;# 
   292  009B                     	;# 
   293  009B                     	;# 
   294  009C                     	;# 
   295  009D                     	;# 
   296  009E                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  0111                     	;# 
   300  0112                     	;# 
   301  0113                     	;# 
   302  0114                     	;# 
   303  0115                     	;# 
   304  0116                     	;# 
   305  0117                     	;# 
   306  0118                     	;# 
   307  0119                     	;# 
   308  011A                     	;# 
   309  011B                     	;# 
   310  011D                     	;# 
   311  011E                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  0191                     	;# 
   315  0191                     	;# 
   316  0192                     	;# 
   317  0193                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0199                     	;# 
   324  019A                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019C                     	;# 
   330  019C                     	;# 
   331  019D                     	;# 
   332  019E                     	;# 
   333  019F                     	;# 
   334  020C                     	;# 
   335  020D                     	;# 
   336  0211                     	;# 
   337  0211                     	;# 
   338  0212                     	;# 
   339  0212                     	;# 
   340  0213                     	;# 
   341  0213                     	;# 
   342  0214                     	;# 
   343  0214                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0216                     	;# 
   348  0216                     	;# 
   349  0217                     	;# 
   350  0217                     	;# 
   351  0219                     	;# 
   352  021A                     	;# 
   353  021B                     	;# 
   354  021C                     	;# 
   355  021D                     	;# 
   356  021E                     	;# 
   357  021F                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0294                     	;# 
   363  0295                     	;# 
   364  0295                     	;# 
   365  0296                     	;# 
   366  0298                     	;# 
   367  0298                     	;# 
   368  0299                     	;# 
   369  029A                     	;# 
   370  029B                     	;# 
   371  029C                     	;# 
   372  029C                     	;# 
   373  029D                     	;# 
   374  029E                     	;# 
   375  029E                     	;# 
   376  0311                     	;# 
   377  0311                     	;# 
   378  0312                     	;# 
   379  0313                     	;# 
   380  0318                     	;# 
   381  0318                     	;# 
   382  0319                     	;# 
   383  031A                     	;# 
   384  0394                     	;# 
   385  0395                     	;# 
   386  0396                     	;# 
   387  039A                     	;# 
   388  039C                     	;# 
   389  039D                     	;# 
   390  039E                     	;# 
   391  039F                     	;# 
   392  0415                     	;# 
   393  0416                     	;# 
   394  0417                     	;# 
   395  041C                     	;# 
   396  041D                     	;# 
   397  041E                     	;# 
   398  0FE4                     	;# 
   399  0FE5                     	;# 
   400  0FE6                     	;# 
   401  0FE7                     	;# 
   402  0FE8                     	;# 
   403  0FE9                     	;# 
   404  0FEA                     	;# 
   405  0FEB                     	;# 
   406  0FED                     	;# 
   407  0FEE                     	;# 
   408  0FEF                     	;# 
   409  0000                     	;# 
   410  0001                     	;# 
   411  0002                     	;# 
   412  0003                     	;# 
   413  0004                     	;# 
   414  0005                     	;# 
   415  0006                     	;# 
   416  0007                     	;# 
   417  0008                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  0011                     	;# 
   424  0012                     	;# 
   425  0013                     	;# 
   426  0014                     	;# 
   427  0015                     	;# 
   428  0016                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001C                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  008C                     	;# 
   439  008D                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0093                     	;# 
   443  0094                     	;# 
   444  0095                     	;# 
   445  0096                     	;# 
   446  0097                     	;# 
   447  0098                     	;# 
   448  0099                     	;# 
   449  009A                     	;# 
   450  009B                     	;# 
   451  009B                     	;# 
   452  009C                     	;# 
   453  009D                     	;# 
   454  009E                     	;# 
   455  010C                     	;# 
   456  010D                     	;# 
   457  0111                     	;# 
   458  0112                     	;# 
   459  0113                     	;# 
   460  0114                     	;# 
   461  0115                     	;# 
   462  0116                     	;# 
   463  0117                     	;# 
   464  0118                     	;# 
   465  0119                     	;# 
   466  011A                     	;# 
   467  011B                     	;# 
   468  011D                     	;# 
   469  011E                     	;# 
   470  018C                     	;# 
   471  018D                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0194                     	;# 
   479  0195                     	;# 
   480  0196                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019C                     	;# 
   488  019C                     	;# 
   489  019D                     	;# 
   490  019E                     	;# 
   491  019F                     	;# 
   492  020C                     	;# 
   493  020D                     	;# 
   494  0211                     	;# 
   495  0211                     	;# 
   496  0212                     	;# 
   497  0212                     	;# 
   498  0213                     	;# 
   499  0213                     	;# 
   500  0214                     	;# 
   501  0214                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0216                     	;# 
   506  0216                     	;# 
   507  0217                     	;# 
   508  0217                     	;# 
   509  0219                     	;# 
   510  021A                     	;# 
   511  021B                     	;# 
   512  021C                     	;# 
   513  021D                     	;# 
   514  021E                     	;# 
   515  021F                     	;# 
   516  0291                     	;# 
   517  0291                     	;# 
   518  0292                     	;# 
   519  0293                     	;# 
   520  0294                     	;# 
   521  0295                     	;# 
   522  0295                     	;# 
   523  0296                     	;# 
   524  0298                     	;# 
   525  0298                     	;# 
   526  0299                     	;# 
   527  029A                     	;# 
   528  029B                     	;# 
   529  029C                     	;# 
   530  029C                     	;# 
   531  029D                     	;# 
   532  029E                     	;# 
   533  029E                     	;# 
   534  0311                     	;# 
   535  0311                     	;# 
   536  0312                     	;# 
   537  0313                     	;# 
   538  0318                     	;# 
   539  0318                     	;# 
   540  0319                     	;# 
   541  031A                     	;# 
   542  0394                     	;# 
   543  0395                     	;# 
   544  0396                     	;# 
   545  039A                     	;# 
   546  039C                     	;# 
   547  039D                     	;# 
   548  039E                     	;# 
   549  039F                     	;# 
   550  0415                     	;# 
   551  0416                     	;# 
   552  0417                     	;# 
   553  041C                     	;# 
   554  041D                     	;# 
   555  041E                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0098                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011A                     	;# 
   625  011B                     	;# 
   626  011D                     	;# 
   627  011E                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0191                     	;# 
   631  0191                     	;# 
   632  0192                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0194                     	;# 
   637  0195                     	;# 
   638  0196                     	;# 
   639  0199                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  020D                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  0219                     	;# 
   668  021A                     	;# 
   669  021B                     	;# 
   670  021C                     	;# 
   671  021D                     	;# 
   672  021E                     	;# 
   673  021F                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0294                     	;# 
   679  0295                     	;# 
   680  0295                     	;# 
   681  0296                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029B                     	;# 
   687  029C                     	;# 
   688  029C                     	;# 
   689  029D                     	;# 
   690  029E                     	;# 
   691  029E                     	;# 
   692  0311                     	;# 
   693  0311                     	;# 
   694  0312                     	;# 
   695  0313                     	;# 
   696  0318                     	;# 
   697  0318                     	;# 
   698  0319                     	;# 
   699  031A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  039A                     	;# 
   704  039C                     	;# 
   705  039D                     	;# 
   706  039E                     	;# 
   707  039F                     	;# 
   708  0415                     	;# 
   709  0416                     	;# 
   710  0417                     	;# 
   711  041C                     	;# 
   712  041D                     	;# 
   713  041E                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0013                     	;# 
   742  0014                     	;# 
   743  0015                     	;# 
   744  0016                     	;# 
   745  0016                     	;# 
   746  0017                     	;# 
   747  0018                     	;# 
   748  0019                     	;# 
   749  001A                     	;# 
   750  001B                     	;# 
   751  001C                     	;# 
   752  001E                     	;# 
   753  001F                     	;# 
   754  008C                     	;# 
   755  008D                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0094                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  0111                     	;# 
   774  0112                     	;# 
   775  0113                     	;# 
   776  0114                     	;# 
   777  0115                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  0118                     	;# 
   781  0119                     	;# 
   782  011A                     	;# 
   783  011B                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788  0191                     	;# 
   789  0191                     	;# 
   790  0192                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0194                     	;# 
   795  0195                     	;# 
   796  0196                     	;# 
   797  0199                     	;# 
   798  019A                     	;# 
   799  019B                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019C                     	;# 
   804  019C                     	;# 
   805  019D                     	;# 
   806  019E                     	;# 
   807  019F                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  0211                     	;# 
   811  0211                     	;# 
   812  0212                     	;# 
   813  0212                     	;# 
   814  0213                     	;# 
   815  0213                     	;# 
   816  0214                     	;# 
   817  0214                     	;# 
   818  0215                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0216                     	;# 
   822  0216                     	;# 
   823  0217                     	;# 
   824  0217                     	;# 
   825  0219                     	;# 
   826  021A                     	;# 
   827  021B                     	;# 
   828  021C                     	;# 
   829  021D                     	;# 
   830  021E                     	;# 
   831  021F                     	;# 
   832  0291                     	;# 
   833  0291                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0294                     	;# 
   837  0295                     	;# 
   838  0295                     	;# 
   839  0296                     	;# 
   840  0298                     	;# 
   841  0298                     	;# 
   842  0299                     	;# 
   843  029A                     	;# 
   844  029B                     	;# 
   845  029C                     	;# 
   846  029C                     	;# 
   847  029D                     	;# 
   848  029E                     	;# 
   849  029E                     	;# 
   850  0311                     	;# 
   851  0311                     	;# 
   852  0312                     	;# 
   853  0313                     	;# 
   854  0318                     	;# 
   855  0318                     	;# 
   856  0319                     	;# 
   857  031A                     	;# 
   858  0394                     	;# 
   859  0395                     	;# 
   860  0396                     	;# 
   861  039A                     	;# 
   862  039C                     	;# 
   863  039D                     	;# 
   864  039E                     	;# 
   865  039F                     	;# 
   866  0415                     	;# 
   867  0416                     	;# 
   868  0417                     	;# 
   869  041C                     	;# 
   870  041D                     	;# 
   871  041E                     	;# 
   872  0FE4                     	;# 
   873  0FE5                     	;# 
   874  0FE6                     	;# 
   875  0FE7                     	;# 
   876  0FE8                     	;# 
   877  0FE9                     	;# 
   878  0FEA                     	;# 
   879  0FEB                     	;# 
   880  0FED                     	;# 
   881  0FEE                     	;# 
   882  0FEF                     	;# 
   883  0000                     	;# 
   884  0001                     	;# 
   885  0002                     	;# 
   886  0003                     	;# 
   887  0004                     	;# 
   888  0005                     	;# 
   889  0006                     	;# 
   890  0007                     	;# 
   891  0008                     	;# 
   892  0009                     	;# 
   893  000A                     	;# 
   894  000B                     	;# 
   895  000C                     	;# 
   896  000D                     	;# 
   897  0011                     	;# 
   898  0012                     	;# 
   899  0013                     	;# 
   900  0014                     	;# 
   901  0015                     	;# 
   902  0016                     	;# 
   903  0016                     	;# 
   904  0017                     	;# 
   905  0018                     	;# 
   906  0019                     	;# 
   907  001A                     	;# 
   908  001B                     	;# 
   909  001C                     	;# 
   910  001E                     	;# 
   911  001F                     	;# 
   912  008C                     	;# 
   913  008D                     	;# 
   914  0091                     	;# 
   915  0092                     	;# 
   916  0093                     	;# 
   917  0094                     	;# 
   918  0095                     	;# 
   919  0096                     	;# 
   920  0097                     	;# 
   921  0098                     	;# 
   922  0099                     	;# 
   923  009A                     	;# 
   924  009B                     	;# 
   925  009B                     	;# 
   926  009C                     	;# 
   927  009D                     	;# 
   928  009E                     	;# 
   929  010C                     	;# 
   930  010D                     	;# 
   931  0111                     	;# 
   932  0112                     	;# 
   933  0113                     	;# 
   934  0114                     	;# 
   935  0115                     	;# 
   936  0116                     	;# 
   937  0117                     	;# 
   938  0118                     	;# 
   939  0119                     	;# 
   940  011A                     	;# 
   941  011B                     	;# 
   942  011D                     	;# 
   943  011E                     	;# 
   944  018C                     	;# 
   945  018D                     	;# 
   946  0191                     	;# 
   947  0191                     	;# 
   948  0192                     	;# 
   949  0193                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0194                     	;# 
   953  0195                     	;# 
   954  0196                     	;# 
   955  0199                     	;# 
   956  019A                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019C                     	;# 
   962  019C                     	;# 
   963  019D                     	;# 
   964  019E                     	;# 
   965  019F                     	;# 
   966  020C                     	;# 
   967  020D                     	;# 
   968  0211                     	;# 
   969  0211                     	;# 
   970  0212                     	;# 
   971  0212                     	;# 
   972  0213                     	;# 
   973  0213                     	;# 
   974  0214                     	;# 
   975  0214                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0216                     	;# 
   980  0216                     	;# 
   981  0217                     	;# 
   982  0217                     	;# 
   983  0219                     	;# 
   984  021A                     	;# 
   985  021B                     	;# 
   986  021C                     	;# 
   987  021D                     	;# 
   988  021E                     	;# 
   989  021F                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0294                     	;# 
   995  0295                     	;# 
   996  0295                     	;# 
   997  0296                     	;# 
   998  0298                     	;# 
   999  0298                     	;# 
  1000  0299                     	;# 
  1001  029A                     	;# 
  1002  029B                     	;# 
  1003  029C                     	;# 
  1004  029C                     	;# 
  1005  029D                     	;# 
  1006  029E                     	;# 
  1007  029E                     	;# 
  1008  0311                     	;# 
  1009  0311                     	;# 
  1010  0312                     	;# 
  1011  0313                     	;# 
  1012  0318                     	;# 
  1013  0318                     	;# 
  1014  0319                     	;# 
  1015  031A                     	;# 
  1016  0394                     	;# 
  1017  0395                     	;# 
  1018  0396                     	;# 
  1019  039A                     	;# 
  1020  039C                     	;# 
  1021  039D                     	;# 
  1022  039E                     	;# 
  1023  039F                     	;# 
  1024  0415                     	;# 
  1025  0416                     	;# 
  1026  0417                     	;# 
  1027  041C                     	;# 
  1028  041D                     	;# 
  1029  041E                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0013                     	;# 
  1058  0014                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0093                     	;# 
  1075  0094                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0098                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011A                     	;# 
  1099  011B                     	;# 
  1100  011D                     	;# 
  1101  011E                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020C                     	;# 
  1125  020D                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0219                     	;# 
  1142  021A                     	;# 
  1143  021B                     	;# 
  1144  021C                     	;# 
  1145  021D                     	;# 
  1146  021E                     	;# 
  1147  021F                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0294                     	;# 
  1153  0295                     	;# 
  1154  0295                     	;# 
  1155  0296                     	;# 
  1156  0298                     	;# 
  1157  0298                     	;# 
  1158  0299                     	;# 
  1159  029A                     	;# 
  1160  029B                     	;# 
  1161  029C                     	;# 
  1162  029C                     	;# 
  1163  029D                     	;# 
  1164  029E                     	;# 
  1165  029E                     	;# 
  1166  0311                     	;# 
  1167  0311                     	;# 
  1168  0312                     	;# 
  1169  0313                     	;# 
  1170  0318                     	;# 
  1171  0318                     	;# 
  1172  0319                     	;# 
  1173  031A                     	;# 
  1174  0394                     	;# 
  1175  0395                     	;# 
  1176  0396                     	;# 
  1177  039A                     	;# 
  1178  039C                     	;# 
  1179  039D                     	;# 
  1180  039E                     	;# 
  1181  039F                     	;# 
  1182  0415                     	;# 
  1183  0416                     	;# 
  1184  0417                     	;# 
  1185  041C                     	;# 
  1186  041D                     	;# 
  1187  041E                     	;# 
  1188  0FE4                     	;# 
  1189  0FE5                     	;# 
  1190  0FE6                     	;# 
  1191  0FE7                     	;# 
  1192  0FE8                     	;# 
  1193  0FE9                     	;# 
  1194  0FEA                     	;# 
  1195  0FEB                     	;# 
  1196  0FED                     	;# 
  1197  0FEE                     	;# 
  1198  0FEF                     	;# 
  1199  0000                     	;# 
  1200  0001                     	;# 
  1201  0002                     	;# 
  1202  0003                     	;# 
  1203  0004                     	;# 
  1204  0005                     	;# 
  1205  0006                     	;# 
  1206  0007                     	;# 
  1207  0008                     	;# 
  1208  0009                     	;# 
  1209  000A                     	;# 
  1210  000B                     	;# 
  1211  000C                     	;# 
  1212  000D                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0013                     	;# 
  1216  0014                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0016                     	;# 
  1220  0017                     	;# 
  1221  0018                     	;# 
  1222  0019                     	;# 
  1223  001A                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001E                     	;# 
  1227  001F                     	;# 
  1228  008C                     	;# 
  1229  008D                     	;# 
  1230  0091                     	;# 
  1231  0092                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0097                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  0111                     	;# 
  1248  0112                     	;# 
  1249  0113                     	;# 
  1250  0114                     	;# 
  1251  0115                     	;# 
  1252  0116                     	;# 
  1253  0117                     	;# 
  1254  0118                     	;# 
  1255  0119                     	;# 
  1256  011A                     	;# 
  1257  011B                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  018C                     	;# 
  1261  018D                     	;# 
  1262  0191                     	;# 
  1263  0191                     	;# 
  1264  0192                     	;# 
  1265  0193                     	;# 
  1266  0193                     	;# 
  1267  0193                     	;# 
  1268  0194                     	;# 
  1269  0195                     	;# 
  1270  0196                     	;# 
  1271  0199                     	;# 
  1272  019A                     	;# 
  1273  019B                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019C                     	;# 
  1278  019C                     	;# 
  1279  019D                     	;# 
  1280  019E                     	;# 
  1281  019F                     	;# 
  1282  020C                     	;# 
  1283  020D                     	;# 
  1284  0211                     	;# 
  1285  0211                     	;# 
  1286  0212                     	;# 
  1287  0212                     	;# 
  1288  0213                     	;# 
  1289  0213                     	;# 
  1290  0214                     	;# 
  1291  0214                     	;# 
  1292  0215                     	;# 
  1293  0215                     	;# 
  1294  0215                     	;# 
  1295  0216                     	;# 
  1296  0216                     	;# 
  1297  0217                     	;# 
  1298  0217                     	;# 
  1299  0219                     	;# 
  1300  021A                     	;# 
  1301  021B                     	;# 
  1302  021C                     	;# 
  1303  021D                     	;# 
  1304  021E                     	;# 
  1305  021F                     	;# 
  1306  0291                     	;# 
  1307  0291                     	;# 
  1308  0292                     	;# 
  1309  0293                     	;# 
  1310  0294                     	;# 
  1311  0295                     	;# 
  1312  0295                     	;# 
  1313  0296                     	;# 
  1314  0298                     	;# 
  1315  0298                     	;# 
  1316  0299                     	;# 
  1317  029A                     	;# 
  1318  029B                     	;# 
  1319  029C                     	;# 
  1320  029C                     	;# 
  1321  029D                     	;# 
  1322  029E                     	;# 
  1323  029E                     	;# 
  1324  0311                     	;# 
  1325  0311                     	;# 
  1326  0312                     	;# 
  1327  0313                     	;# 
  1328  0318                     	;# 
  1329  0318                     	;# 
  1330  0319                     	;# 
  1331  031A                     	;# 
  1332  0394                     	;# 
  1333  0395                     	;# 
  1334  0396                     	;# 
  1335  039A                     	;# 
  1336  039C                     	;# 
  1337  039D                     	;# 
  1338  039E                     	;# 
  1339  039F                     	;# 
  1340  0415                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  041C                     	;# 
  1344  041D                     	;# 
  1345  041E                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0013                     	;# 
  1374  0014                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  001E                     	;# 
  1385  001F                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0093                     	;# 
  1391  0094                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0098                     	;# 
  1396  0099                     	;# 
  1397  009A                     	;# 
  1398  009B                     	;# 
  1399  009B                     	;# 
  1400  009C                     	;# 
  1401  009D                     	;# 
  1402  009E                     	;# 
  1403  010C                     	;# 
  1404  010D                     	;# 
  1405  0111                     	;# 
  1406  0112                     	;# 
  1407  0113                     	;# 
  1408  0114                     	;# 
  1409  0115                     	;# 
  1410  0116                     	;# 
  1411  0117                     	;# 
  1412  0118                     	;# 
  1413  0119                     	;# 
  1414  011A                     	;# 
  1415  011B                     	;# 
  1416  011D                     	;# 
  1417  011E                     	;# 
  1418  018C                     	;# 
  1419  018D                     	;# 
  1420  0191                     	;# 
  1421  0191                     	;# 
  1422  0192                     	;# 
  1423  0193                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0194                     	;# 
  1427  0195                     	;# 
  1428  0196                     	;# 
  1429  0199                     	;# 
  1430  019A                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019C                     	;# 
  1436  019C                     	;# 
  1437  019D                     	;# 
  1438  019E                     	;# 
  1439  019F                     	;# 
  1440  020C                     	;# 
  1441  020D                     	;# 
  1442  0211                     	;# 
  1443  0211                     	;# 
  1444  0212                     	;# 
  1445  0212                     	;# 
  1446  0213                     	;# 
  1447  0213                     	;# 
  1448  0214                     	;# 
  1449  0214                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0216                     	;# 
  1454  0216                     	;# 
  1455  0217                     	;# 
  1456  0217                     	;# 
  1457  0219                     	;# 
  1458  021A                     	;# 
  1459  021B                     	;# 
  1460  021C                     	;# 
  1461  021D                     	;# 
  1462  021E                     	;# 
  1463  021F                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0294                     	;# 
  1469  0295                     	;# 
  1470  0295                     	;# 
  1471  0296                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  029B                     	;# 
  1477  029C                     	;# 
  1478  029C                     	;# 
  1479  029D                     	;# 
  1480  029E                     	;# 
  1481  029E                     	;# 
  1482  0311                     	;# 
  1483  0311                     	;# 
  1484  0312                     	;# 
  1485  0313                     	;# 
  1486  0318                     	;# 
  1487  0318                     	;# 
  1488  0319                     	;# 
  1489  031A                     	;# 
  1490  0394                     	;# 
  1491  0395                     	;# 
  1492  0396                     	;# 
  1493  039A                     	;# 
  1494  039C                     	;# 
  1495  039D                     	;# 
  1496  039E                     	;# 
  1497  039F                     	;# 
  1498  0415                     	;# 
  1499  0416                     	;# 
  1500  0417                     	;# 
  1501  041C                     	;# 
  1502  041D                     	;# 
  1503  041E                     	;# 
  1504  0FE4                     	;# 
  1505  0FE5                     	;# 
  1506  0FE6                     	;# 
  1507  0FE7                     	;# 
  1508  0FE8                     	;# 
  1509  0FE9                     	;# 
  1510  0FEA                     	;# 
  1511  0FEB                     	;# 
  1512  0FED                     	;# 
  1513  0FEE                     	;# 
  1514  0FEF                     	;# 
  1515  0000                     	;# 
  1516  0001                     	;# 
  1517  0002                     	;# 
  1518  0003                     	;# 
  1519  0004                     	;# 
  1520  0005                     	;# 
  1521  0006                     	;# 
  1522  0007                     	;# 
  1523  0008                     	;# 
  1524  0009                     	;# 
  1525  000A                     	;# 
  1526  000B                     	;# 
  1527  000C                     	;# 
  1528  000D                     	;# 
  1529  0011                     	;# 
  1530  0012                     	;# 
  1531  0013                     	;# 
  1532  0014                     	;# 
  1533  0015                     	;# 
  1534  0016                     	;# 
  1535  0016                     	;# 
  1536  0017                     	;# 
  1537  0018                     	;# 
  1538  0019                     	;# 
  1539  001A                     	;# 
  1540  001B                     	;# 
  1541  001C                     	;# 
  1542  001E                     	;# 
  1543  001F                     	;# 
  1544  008C                     	;# 
  1545  008D                     	;# 
  1546  0091                     	;# 
  1547  0092                     	;# 
  1548  0093                     	;# 
  1549  0094                     	;# 
  1550  0095                     	;# 
  1551  0096                     	;# 
  1552  0097                     	;# 
  1553  0098                     	;# 
  1554  0099                     	;# 
  1555  009A                     	;# 
  1556  009B                     	;# 
  1557  009B                     	;# 
  1558  009C                     	;# 
  1559  009D                     	;# 
  1560  009E                     	;# 
  1561  010C                     	;# 
  1562  010D                     	;# 
  1563  0111                     	;# 
  1564  0112                     	;# 
  1565  0113                     	;# 
  1566  0114                     	;# 
  1567  0115                     	;# 
  1568  0116                     	;# 
  1569  0117                     	;# 
  1570  0118                     	;# 
  1571  0119                     	;# 
  1572  011A                     	;# 
  1573  011B                     	;# 
  1574  011D                     	;# 
  1575  011E                     	;# 
  1576  018C                     	;# 
  1577  018D                     	;# 
  1578  0191                     	;# 
  1579  0191                     	;# 
  1580  0192                     	;# 
  1581  0193                     	;# 
  1582  0193                     	;# 
  1583  0193                     	;# 
  1584  0194                     	;# 
  1585  0195                     	;# 
  1586  0196                     	;# 
  1587  0199                     	;# 
  1588  019A                     	;# 
  1589  019B                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019C                     	;# 
  1594  019C                     	;# 
  1595  019D                     	;# 
  1596  019E                     	;# 
  1597  019F                     	;# 
  1598  020C                     	;# 
  1599  020D                     	;# 
  1600  0211                     	;# 
  1601  0211                     	;# 
  1602  0212                     	;# 
  1603  0212                     	;# 
  1604  0213                     	;# 
  1605  0213                     	;# 
  1606  0214                     	;# 
  1607  0214                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  0219                     	;# 
  1616  021A                     	;# 
  1617  021B                     	;# 
  1618  021C                     	;# 
  1619  021D                     	;# 
  1620  021E                     	;# 
  1621  021F                     	;# 
  1622  0291                     	;# 
  1623  0291                     	;# 
  1624  0292                     	;# 
  1625  0293                     	;# 
  1626  0294                     	;# 
  1627  0295                     	;# 
  1628  0295                     	;# 
  1629  0296                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  029B                     	;# 
  1635  029C                     	;# 
  1636  029C                     	;# 
  1637  029D                     	;# 
  1638  029E                     	;# 
  1639  029E                     	;# 
  1640  0311                     	;# 
  1641  0311                     	;# 
  1642  0312                     	;# 
  1643  0313                     	;# 
  1644  0318                     	;# 
  1645  0318                     	;# 
  1646  0319                     	;# 
  1647  031A                     	;# 
  1648  0394                     	;# 
  1649  0395                     	;# 
  1650  0396                     	;# 
  1651  039A                     	;# 
  1652  039C                     	;# 
  1653  039D                     	;# 
  1654  039E                     	;# 
  1655  039F                     	;# 
  1656  0415                     	;# 
  1657  0416                     	;# 
  1658  0417                     	;# 
  1659  041C                     	;# 
  1660  041D                     	;# 
  1661  041E                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  000D                     _PORTB	set	13
  1674  000C                     _PORTA	set	12
  1675  001C                     _T2CONbits	set	28
  1676  001B                     _PR2	set	27
  1677  000B                     _INTCONbits	set	11
  1678  009B                     _ADRESL	set	155
  1679  009C                     _ADRESH	set	156
  1680  009D                     _ADCON0bits	set	157
  1681  008D                     _TRISB	set	141
  1682  008C                     _TRISA	set	140
  1683  009E                     _ADCON1	set	158
  1684  009D                     _ADCON0	set	157
  1685  0095                     _OPTION_REG	set	149
  1686  0095                     _OPTION_REGbits	set	149
  1687  0091                     _PIE1bits	set	145
  1688  0099                     _OSCCONbits	set	153
  1689  010D                     _LATB	set	269
  1690  010C                     _LATA	set	268
  1691  011D                     _APFCON0bits	set	285
  1692  018D                     _ANSELB	set	397
  1693  018C                     _ANSELA	set	396
  1694  0293                     _CCP1CONbits	set	659
  1695  0296                     _PSTR1CONbits	set	662
  1696  0291                     _CCPR1L	set	657
  1697  0293                     _CCP1CON	set	659
  1698                           
  1699                           	psect	stringtext1
  1700  07FC                     __pstringtext1:
  1701  07FC                     STR_1:
  1702  07FC  3428               	retlw	40	;'('
  1703  07FD  3428               	retlw	40	;'('
  1704  07FE  3449               	retlw	73	;'I'
  1705  07FF  344E               	retlw	78	;'N'
  1706  0800  3454               	retlw	84	;'T'
  1707  0801  3443               	retlw	67	;'C'
  1708  0802  344F               	retlw	79	;'O'
  1709  0803  344E               	retlw	78	;'N'
  1710  0804  3429               	retlw	41	;')'
  1711  0805  3426               	retlw	38	;'&'
  1712  0806  3430               	retlw	48	;'0'
  1713  0807  3437               	retlw	55	;'7'
  1714  0808  3446               	retlw	70	;'F'
  1715  0809  3468               	retlw	104	;'h'
  1716  080A  3429               	retlw	41	;')'
  1717  080B  342C               	retlw	44	;','
  1718  080C  3432               	retlw	50	;'2'
  1719  080D  3400               	retlw	0
  1720                           
  1721                           	psect	stringtext2
  1722  0000                     __pstringtext2:
  1723  07FC                     
  1724                           	psect	cinit
  1725  0087                     start_initialization:	
  1726                           ; #config settings
  1727                           
  1728  0087                     __initialization:
  1729                           
  1730                           ; Clear objects allocated to BANK0
  1731  0087  305D               	movlw	low __pbssBANK0
  1732  0088  0084               	movwf	4
  1733  0089  3000               	movlw	high __pbssBANK0
  1734  008A  0085               	movwf	5
  1735  008B  3012               	movlw	18
  1736  008C  318B  23FD  3180   	fcall	clear_ram0
  1737                           
  1738                           ; Clear objects allocated to BANK1
  1739  008F  30A0               	movlw	low __pbssBANK1
  1740  0090  0084               	movwf	4
  1741  0091  3000               	movlw	high __pbssBANK1
  1742  0092  0085               	movwf	5
  1743  0093  3030               	movlw	48
  1744  0094  318B  23FD  3180   	fcall	clear_ram0
  1745                           
  1746                           ; Clear objects allocated to BANK2
  1747  0097  3020               	movlw	low __pbssBANK2
  1748  0098  0084               	movwf	4
  1749  0099  3001               	movlw	high __pbssBANK2
  1750  009A  0085               	movwf	5
  1751  009B  3040               	movlw	64
  1752  009C  318B  23FD  3180   	fcall	clear_ram0
  1753                           
  1754                           ; Clear objects allocated to BANK3
  1755  009F  30A0               	movlw	low __pbssBANK3
  1756  00A0  0084               	movwf	4
  1757  00A1  3001               	movlw	high __pbssBANK3
  1758  00A2  0085               	movwf	5
  1759  00A3  3040               	movlw	64
  1760  00A4  318B  23FD  3180   	fcall	clear_ram0
  1761                           
  1762                           ; Clear objects allocated to BANK4
  1763  00A7  3020               	movlw	low __pbssBANK4
  1764  00A8  0084               	movwf	4
  1765  00A9  3002               	movlw	high __pbssBANK4
  1766  00AA  0085               	movwf	5
  1767  00AB  3020               	movlw	32
  1768  00AC  318B  23FD  3180   	fcall	clear_ram0
  1769  00AF                     end_of_initialization:	
  1770                           ;End of C runtime variable initialization code
  1771                           
  1772  00AF                     __end_of__initialization:
  1773  00AF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1774  00B0  0020               	movlb	0
  1775  00B1  318D  2D86         	ljmp	_main	;jump to C main() function
  1776                           
  1777                           	psect	bssBANK0
  1778  005D                     __pbssBANK0:
  1779  005D                     _filteredFreqPot:
  1780  005D                     	ds	2
  1781  005F                     _filteredVout:
  1782  005F                     	ds	2
  1783  0061                     _latestIL:
  1784  0061                     	ds	2
  1785  0063                     _setDuty:
  1786  0063                     	ds	2
  1787  0065                     _slotTest:
  1788  0065                     	ds	1
  1789  0066                     _timerSlotQuarter:
  1790  0066                     	ds	1
  1791  0067                     _timerSlotHalf:
  1792  0067                     	ds	1
  1793  0068                     _potSetCount:
  1794  0068                     	ds	1
  1795  0069                     _currentTripCount:
  1796  0069                     	ds	1
  1797  006A                     _tripIL:
  1798  006A                     	ds	1
  1799  006B                     _tripIDS:
  1800  006B                     	ds	1
  1801  006C                     _currentState:
  1802  006C                     	ds	1
  1803  006D                     _prevPeriod:
  1804  006D                     	ds	1
  1805  006E                     _setPeriod:
  1806  006E                     	ds	1
  1807                           
  1808                           	psect	bssBANK1
  1809  00A0                     __pbssBANK1:
  1810  00A0                     _integratorScaledLimit:
  1811  00A0                     	ds	8
  1812  00A8                     _clockFrequency:
  1813  00A8                     	ds	4
  1814  00AC                     _filteredDutyPot:
  1815  00AC                     	ds	2
  1816  00AE                     _filteredIL:
  1817  00AE                     	ds	2
  1818  00B0                     _filteredIDS:
  1819  00B0                     	ds	2
  1820  00B2                     _prevDuty:
  1821  00B2                     	ds	2
  1822  00B4                     _voltageModeVariables:
  1823  00B4                     	ds	28
  1824                           
  1825                           	psect	bssBANK2
  1826  0120                     __pbssBANK2:
  1827  0120                     _currentILFIFO:
  1828  0120                     	ds	32
  1829  0140                     _currentIDSFIFO:
  1830  0140                     	ds	32
  1831                           
  1832                           	psect	bssBANK3
  1833  01A0                     __pbssBANK3:
  1834  01A0                     _freqPotFIFO:
  1835  01A0                     	ds	32
  1836  01C0                     _voutFIFO:
  1837  01C0                     	ds	32
  1838                           
  1839                           	psect	bssBANK4
  1840  0220                     __pbssBANK4:
  1841  0220                     _dutyPotFIFO:
  1842  0220                     	ds	32
  1843                           
  1844                           	psect	clrtext
  1845  0BFD                     clear_ram0:	
  1846                           ;	Called with FSR0 containing the base address, and
  1847                           ;	WREG with the size to clear
  1848                           
  1849  0BFD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1850  0BFE                     clrloop0:
  1851  0BFE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1852  0BFF  3101               	addfsr 0,1
  1853  0C00  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1854  0C01  2BFE               	goto	clrloop0	;have we reached the end yet?
  1855  0C02  3400               	retlw	0	;all done for this memory range, return
  1856                           
  1857                           	psect	cstackBANK1
  1858  00D0                     __pcstackBANK1:
  1859  00D0                     ?_writeGPIO:
  1860  00D0                     ??_setupInternalOscillator:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  00D0                     ??_setupTimer0Interrupt:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  00D0                     ??_initialiseADCModule:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  00D0                     ?_initialiseGPIO:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  00D0                     ??_readGPIO:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  00D0                     ??_transToVoltageModeControl:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  00D0                     ??_transToCurrentModeControl:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  00D0                     ??_transToPotControl:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  00D0                     ??_initialiseADCPin:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  00D0                     initialiseGPIO@direction:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  00D0                     writeGPIO@writeValue:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893                           
  1894                           ; 1 bytes @ 0x0
  1895  00D0                     	ds	1
  1896  00D1                     ??_writeGPIO:
  1897  00D1                     ??_initialiseGPIO:	
  1898                           ; 1 bytes @ 0x1
  1899                           
  1900                           
  1901                           ; 1 bytes @ 0x1
  1902  00D1                     	ds	1
  1903  00D2                     setupInternalOscillator@selectedFreq:
  1904  00D2                     initialiseADCPin@gpioValid:	
  1905                           ; 1 bytes @ 0x2
  1906                           
  1907  00D2                     readGPIO@readA:	
  1908                           ; 1 bytes @ 0x2
  1909                           
  1910                           
  1911                           ; 1 bytes @ 0x2
  1912  00D2                     	ds	1
  1913  00D3                     initialiseADCPin@portType:
  1914  00D3                     initialiseGPIO@portType:	
  1915                           ; 1 bytes @ 0x3
  1916                           
  1917  00D3                     writeGPIO@portType:	
  1918                           ; 1 bytes @ 0x3
  1919                           
  1920  00D3                     readGPIO@returnValueA:	
  1921                           ; 1 bytes @ 0x3
  1922                           
  1923                           
  1924                           ; 1 bytes @ 0x3
  1925  00D3                     	ds	1
  1926  00D4                     initialiseADCPin@portNumber:
  1927  00D4                     initialiseGPIO@gpioNumber:	
  1928                           ; 1 bytes @ 0x4
  1929                           
  1930  00D4                     writeGPIO@gpioNumber:	
  1931                           ; 1 bytes @ 0x4
  1932                           
  1933  00D4                     readGPIO@readB:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936                           
  1937                           ; 1 bytes @ 0x4
  1938  00D4                     	ds	1
  1939  00D5                     initialiseADCPin@gpioNumber:
  1940  00D5                     initialiseGPIO@portNumber:	
  1941                           ; 1 bytes @ 0x5
  1942                           
  1943  00D5                     writeGPIO@portNumber:	
  1944                           ; 1 bytes @ 0x5
  1945                           
  1946  00D5                     readGPIO@returnValueB:	
  1947                           ; 1 bytes @ 0x5
  1948                           
  1949                           
  1950                           ; 1 bytes @ 0x5
  1951  00D5                     	ds	1
  1952  00D6                     ??_setupPWM:
  1953  00D6                     ??_initialiseCurrentSensors:	
  1954                           ; 1 bytes @ 0x6
  1955                           
  1956  00D6                     ??_initialisePotentiometers:	
  1957                           ; 1 bytes @ 0x6
  1958                           
  1959  00D6                     ??_initialiseController:	
  1960                           ; 1 bytes @ 0x6
  1961                           
  1962  00D6                     ??_currentTripReset:	
  1963                           ; 1 bytes @ 0x6
  1964                           
  1965  00D6                     readGPIO@portNumber:	
  1966                           ; 1 bytes @ 0x6
  1967                           
  1968                           
  1969                           ; 1 bytes @ 0x6
  1970  00D6                     	ds	1
  1971  00D7                     readGPIO@portType:
  1972                           
  1973                           ; 1 bytes @ 0x7
  1974  00D7                     	ds	1
  1975  00D8                     readGPIO@gpioNumber:
  1976                           
  1977                           ; 1 bytes @ 0x8
  1978  00D8                     	ds	1
  1979  00D9                     ?_main:
  1980  00D9                     main@argc:	
  1981                           ; 2 bytes @ 0x9
  1982                           
  1983                           
  1984                           ; 2 bytes @ 0x9
  1985  00D9                     	ds	2
  1986  00DB                     main@argv:
  1987                           
  1988                           ; 2 bytes @ 0xB
  1989  00DB                     	ds	2
  1990  00DD                     ??_main:
  1991                           
  1992                           	psect	cstackCOMMON
  1993  0070                     __pcstackCOMMON:	
  1994                           ; 1 bytes @ 0xD
  1995                           
  1996  0070                     ?_setPWMDutyandPeriod:
  1997  0070                     ?_controlRoutine:	
  1998                           ; 1 bytes @ 0x0
  1999                           
  2000  0070                     ?_runPotScaling:	
  2001                           ; 1 bytes @ 0x0
  2002                           
  2003  0070                     ?_setupInternalOscillator:	
  2004                           ; 1 bytes @ 0x0
  2005                           
  2006  0070                     ?_setupPWM:	
  2007                           ; 1 bytes @ 0x0
  2008                           
  2009  0070                     ?_setupTimer0Interrupt:	
  2010                           ; 1 bytes @ 0x0
  2011                           
  2012  0070                     ?_initialiseADCModule:	
  2013                           ; 1 bytes @ 0x0
  2014                           
  2015  0070                     ?_initialiseCurrentSensors:	
  2016                           ; 1 bytes @ 0x0
  2017                           
  2018  0070                     ?_initialisePotentiometers:	
  2019                           ; 1 bytes @ 0x0
  2020                           
  2021  0070                     ?_initialiseController:	
  2022                           ; 1 bytes @ 0x0
  2023                           
  2024  0070                     ?_readGPIO:	
  2025                           ; 1 bytes @ 0x0
  2026                           
  2027  0070                     ?_transToVoltageModeControl:	
  2028                           ; 1 bytes @ 0x0
  2029                           
  2030  0070                     ?_transToCurrentModeControl:	
  2031                           ; 1 bytes @ 0x0
  2032                           
  2033  0070                     ?_transToPotControl:	
  2034                           ; 1 bytes @ 0x0
  2035                           
  2036  0070                     ?_runVoltageModeControl:	
  2037                           ; 1 bytes @ 0x0
  2038                           
  2039  0070                     ?_currentTripReset:	
  2040                           ; 1 bytes @ 0x0
  2041                           
  2042  0070                     ?_transToOverCurrentFault:	
  2043                           ; 1 bytes @ 0x0
  2044                           
  2045  0070                     ??_transToOverCurrentFault:	
  2046                           ; 1 bytes @ 0x0
  2047                           
  2048  0070                     ?_Tick490Hz:	
  2049                           ; 1 bytes @ 0x0
  2050                           
  2051  0070                     ?_initialiseADCPin:	
  2052                           ; 1 bytes @ 0x0
  2053                           
  2054  0070                     ?_currentTripRead:	
  2055                           ; 1 bytes @ 0x0
  2056                           
  2057  0070                     ??___omul:	
  2058                           ; 1 bytes @ 0x0
  2059                           
  2060  0070                     ?i1_writeGPIO:	
  2061                           ; 1 bytes @ 0x0
  2062                           
  2063  0070                     ?i1_readGPIO:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066  0070                     ??i1_readGPIO:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069  0070                     ?i1_currentTripReset:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072  0070                     ?_currentTripMonitor:	
  2073                           ; 1 bytes @ 0x0
  2074                           
  2075  0070                     ?_readFilteredIL:	
  2076                           ; 2 bytes @ 0x0
  2077                           
  2078  0070                     ?_abs:	
  2079                           ; 2 bytes @ 0x0
  2080                           
  2081  0070                     ?_readADCRaw:	
  2082                           ; 2 bytes @ 0x0
  2083                           
  2084  0070                     ?___wmul:	
  2085                           ; 2 bytes @ 0x0
  2086                           
  2087  0070                     ?___lmul:	
  2088                           ; 2 bytes @ 0x0
  2089                           
  2090  0070                     i1writeGPIO@writeValue:	
  2091                           ; 4 bytes @ 0x0
  2092                           
  2093  0070                     setPWMDutyandPeriod@dutyCycle:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ___wmul@multiplier:	
  2097                           ; 2 bytes @ 0x0
  2098                           
  2099  0070                     abs@a:	
  2100                           ; 2 bytes @ 0x0
  2101                           
  2102  0070                     ___lmul@multiplier:	
  2103                           ; 2 bytes @ 0x0
  2104                           
  2105                           
  2106                           ; 4 bytes @ 0x0
  2107  0070                     	ds	1
  2108  0071                     ??i1_writeGPIO:
  2109  0071                     ___omul@product:	
  2110                           ; 1 bytes @ 0x1
  2111                           
  2112                           
  2113                           ; 8 bytes @ 0x1
  2114  0071                     	ds	1
  2115  0072                     ??_readFilteredIL:
  2116  0072                     ??_abs:	
  2117                           ; 1 bytes @ 0x2
  2118                           
  2119  0072                     ??_readADCRaw:	
  2120                           ; 1 bytes @ 0x2
  2121                           
  2122  0072                     setPWMDutyandPeriod@period:	
  2123                           ; 1 bytes @ 0x2
  2124                           
  2125  0072                     i1readGPIO@readA:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128  0072                     ___wmul@multiplicand:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131                           
  2132                           ; 2 bytes @ 0x2
  2133  0072                     	ds	1
  2134  0073                     ??_setPWMDutyandPeriod:
  2135  0073                     i1writeGPIO@portType:	
  2136                           ; 1 bytes @ 0x3
  2137                           
  2138  0073                     i1readGPIO@returnValueA:	
  2139                           ; 1 bytes @ 0x3
  2140                           
  2141                           
  2142                           ; 1 bytes @ 0x3
  2143  0073                     	ds	1
  2144  0074                     ??___wmul:
  2145  0074                     i1writeGPIO@gpioNumber:	
  2146                           ; 1 bytes @ 0x4
  2147                           
  2148  0074                     i1readGPIO@readB:	
  2149                           ; 1 bytes @ 0x4
  2150                           
  2151  0074                     readADCRaw@returnValue:	
  2152                           ; 1 bytes @ 0x4
  2153                           
  2154  0074                     ___wmul@product:	
  2155                           ; 2 bytes @ 0x4
  2156                           
  2157  0074                     ___lmul@multiplicand:	
  2158                           ; 2 bytes @ 0x4
  2159                           
  2160                           
  2161                           ; 4 bytes @ 0x4
  2162  0074                     	ds	1
  2163  0075                     i1writeGPIO@portNumber:
  2164  0075                     i1readGPIO@returnValueB:	
  2165                           ; 1 bytes @ 0x5
  2166                           
  2167                           
  2168                           ; 1 bytes @ 0x5
  2169  0075                     	ds	1
  2170  0076                     ??i1_currentTripReset:
  2171  0076                     ?___lldiv:	
  2172                           ; 1 bytes @ 0x6
  2173                           
  2174  0076                     readADCRaw@channel:	
  2175                           ; 4 bytes @ 0x6
  2176                           
  2177  0076                     i1readGPIO@portNumber:	
  2178                           ; 1 bytes @ 0x6
  2179                           
  2180  0076                     readFilteredIL@sumOfSamples:	
  2181                           ; 1 bytes @ 0x6
  2182                           
  2183  0076                     ___lldiv@divisor:	
  2184                           ; 4 bytes @ 0x6
  2185                           
  2186                           
  2187                           ; 4 bytes @ 0x6
  2188  0076                     	ds	1
  2189  0077                     readADCRaw@gpioValid:
  2190  0077                     i1readGPIO@portType:	
  2191                           ; 1 bytes @ 0x7
  2192                           
  2193                           
  2194                           ; 1 bytes @ 0x7
  2195  0077                     	ds	1
  2196  0078                     ??___lmul:
  2197  0078                     readADCRaw@i:	
  2198                           ; 1 bytes @ 0x8
  2199                           
  2200  0078                     i1readGPIO@gpioNumber:	
  2201                           ; 1 bytes @ 0x8
  2202                           
  2203  0078                     ___lmul@product:	
  2204                           ; 1 bytes @ 0x8
  2205                           
  2206                           
  2207                           ; 4 bytes @ 0x8
  2208  0078                     	ds	1
  2209  0079                     ??_currentTripRead:
  2210  0079                     readADCRaw@gpioNumber:	
  2211                           ; 1 bytes @ 0x9
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0x9
  2215  0079                     	ds	1
  2216  007A                     ?_readFilteredVout:
  2217  007A                     ?_readFilteredDutyPot:	
  2218                           ; 2 bytes @ 0xA
  2219                           
  2220  007A                     ?_readFilteredFreqPot:	
  2221                           ; 2 bytes @ 0xA
  2222                           
  2223  007A                     _currentTripRead$912:	
  2224                           ; 2 bytes @ 0xA
  2225                           
  2226  007A                     readFilteredIL@i_920:	
  2227                           ; 1 bytes @ 0xA
  2228                           
  2229  007A                     ___lldiv@dividend:	
  2230                           ; 1 bytes @ 0xA
  2231                           
  2232                           
  2233                           ; 4 bytes @ 0xA
  2234  007A                     	ds	1
  2235  007B                     ??_currentTripMonitor:
  2236  007B                     readFilteredIL@i:	
  2237                           ; 1 bytes @ 0xB
  2238                           
  2239                           
  2240                           ; 1 bytes @ 0xB
  2241  007B                     	ds	1
  2242  007C                     ?_convertRawToMilliVolts:
  2243  007C                     convertRawToMilliVolts@rawValue:	
  2244                           ; 2 bytes @ 0xC
  2245                           
  2246                           
  2247                           ; 2 bytes @ 0xC
  2248  007C                     	ds	2
  2249                           
  2250                           	psect	cstackBANK0
  2251  0020                     __pcstackBANK0:
  2252  0020                     ??_readFilteredVout:
  2253  0020                     ??_readFilteredDutyPot:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0020                     ??_readFilteredFreqPot:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0020                     ??_convertRawToMilliVolts:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0020                     ??___lldiv:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0020                     ?___omul:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0020                     ___omul@multiplier:	
  2269                           ; 8 bytes @ 0x0
  2270                           
  2271                           
  2272                           ; 8 bytes @ 0x0
  2273  0020                     	ds	1
  2274  0021                     ___lldiv@quotient:
  2275                           
  2276                           ; 4 bytes @ 0x1
  2277  0021                     	ds	3
  2278  0024                     readFilteredDutyPot@sumOfSamples:
  2279  0024                     readFilteredFreqPot@sumOfSamples:	
  2280                           ; 4 bytes @ 0x4
  2281                           
  2282  0024                     readFilteredVout@sumOfSamples:	
  2283                           ; 4 bytes @ 0x4
  2284                           
  2285                           
  2286                           ; 4 bytes @ 0x4
  2287  0024                     	ds	1
  2288  0025                     ___lldiv@counter:
  2289  0025                     convertRawToMilliVolts@vsenseMult:	
  2290                           ; 1 bytes @ 0x5
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x5
  2294  0025                     	ds	1
  2295  0026                     ??_runPotScaling:
  2296                           
  2297                           ; 1 bytes @ 0x6
  2298  0026                     	ds	2
  2299  0028                     readFilteredDutyPot@i_750:
  2300  0028                     readFilteredFreqPot@i_754:	
  2301                           ; 1 bytes @ 0x8
  2302                           
  2303  0028                     readFilteredVout@i_831:	
  2304                           ; 1 bytes @ 0x8
  2305                           
  2306  0028                     ___omul@multiplicand:	
  2307                           ; 1 bytes @ 0x8
  2308                           
  2309                           
  2310                           ; 8 bytes @ 0x8
  2311  0028                     	ds	1
  2312  0029                     readFilteredDutyPot@i:
  2313  0029                     readFilteredFreqPot@i:	
  2314                           ; 1 bytes @ 0x9
  2315                           
  2316  0029                     readFilteredVout@i:	
  2317                           ; 1 bytes @ 0x9
  2318                           
  2319  0029                     convertRawToMilliVolts@offsetted:	
  2320                           ; 1 bytes @ 0x9
  2321                           
  2322                           
  2323                           ; 2 bytes @ 0x9
  2324  0029                     	ds	2
  2325  002B                     convertRawToMilliVolts@returnValuedV:
  2326                           
  2327                           ; 2 bytes @ 0xB
  2328  002B                     	ds	3
  2329  002E                     runPotScaling@maxDuty:
  2330                           
  2331                           ; 2 bytes @ 0xE
  2332  002E                     	ds	2
  2333  0030                     ??_runVoltageModeControl:
  2334  0030                     runPotScaling@minDuty:	
  2335                           ; 1 bytes @ 0x10
  2336                           
  2337                           
  2338                           ; 2 bytes @ 0x10
  2339  0030                     	ds	16
  2340  0040                     runVoltageModeControl@integralMult:
  2341                           
  2342                           ; 8 bytes @ 0x20
  2343  0040                     	ds	8
  2344  0048                     runVoltageModeControl@propMult:
  2345                           
  2346                           ; 8 bytes @ 0x28
  2347  0048                     	ds	8
  2348  0050                     runVoltageModeControl@newVoltage:
  2349                           
  2350                           ; 2 bytes @ 0x30
  2351  0050                     	ds	2
  2352  0052                     ??_controlRoutine:
  2353                           
  2354                           ; 1 bytes @ 0x32
  2355  0052                     	ds	6
  2356  0058                     controlRoutine@maxDuty:
  2357                           
  2358                           ; 2 bytes @ 0x38
  2359  0058                     	ds	2
  2360  005A                     controlRoutine@minDuty:
  2361                           
  2362                           ; 2 bytes @ 0x3A
  2363  005A                     	ds	2
  2364  005C                     ??_Tick490Hz:
  2365                           
  2366                           ; 1 bytes @ 0x3C
  2367  005C                     	ds	1
  2368                           
  2369                           	psect	maintext
  2370  0D86                     __pmaintext:	
  2371 ;;
  2372 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2373 ;;
  2374 ;; *************** function _main *****************
  2375 ;; Defined at:
  2376 ;;		line 107 in file "main.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  argc            2    9[BANK1 ] int 
  2379 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  2    9[BANK1 ] int 
  2384 ;; Registers used:
  2385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : B1F/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2391 ;;      Params:         0       0       4       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0
  2394 ;;      Totals:         0       0       4       0       0       0
  2395 ;;Total ram usage:        4 bytes
  2396 ;; Hardware stack levels required when called: 8
  2397 ;; This function calls:
  2398 ;;		_initialiseADCModule
  2399 ;;		_initialiseController
  2400 ;;		_initialiseCurrentSensors
  2401 ;;		_initialiseGPIO
  2402 ;;		_initialisePotentiometers
  2403 ;;		_readGPIO
  2404 ;;		_setupInternalOscillator
  2405 ;;		_setupPWM
  2406 ;;		_setupTimer0Interrupt
  2407 ;;		_transToCurrentModeControl
  2408 ;;		_transToPotControl
  2409 ;;		_transToVoltageModeControl
  2410 ;; This function is called by:
  2411 ;;		Startup code after reset
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415  0D86                     _main:	
  2416                           ;psect for function _main
  2417                           
  2418  0D86                     l2688:	
  2419                           ;incstack = 0
  2420                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2421                           
  2422                           
  2423                           ;main.c: 109:     setupInternalOscillator(freq32M);
  2424  0D86  300A               	movlw	10
  2425  0D87  3183  23F2  318D   	fcall	_setupInternalOscillator
  2426  0D8A                     l2690:
  2427                           
  2428                           ;main.c: 111:     setupPWM();
  2429  0D8A  318C  245F  318D   	fcall	_setupPWM
  2430  0D8D                     l2692:
  2431                           
  2432                           ;main.c: 112:     setupTimer0Interrupt();
  2433  0D8D  318C  2411  318D   	fcall	_setupTimer0Interrupt
  2434  0D90                     l2694:
  2435                           
  2436                           ;main.c: 113:     initialiseADCModule();
  2437  0D90  318B  23F7  318D   	fcall	_initialiseADCModule
  2438  0D93                     l2696:
  2439                           
  2440                           ;main.c: 114:     initialiseCurrentSensors();
  2441  0D93  318C  24B7  318D   	fcall	_initialiseCurrentSensors
  2442  0D96                     l2698:
  2443                           
  2444                           ;main.c: 115:     initialisePotentiometers();
  2445  0D96  318C  2422  318D   	fcall	_initialisePotentiometers
  2446  0D99                     l2700:
  2447                           
  2448                           ;main.c: 116:     initialiseController();
  2449  0D99  318C  247B  318D   	fcall	_initialiseController
  2450  0D9C                     l2702:
  2451                           
  2452                           ;main.c: 118:     initialiseGPIO(pinRB4, 0);
  2453  0D9C  0021               	movlb	1	; select bank1
  2454  0D9D  01D0               	clrf	initialiseGPIO@direction^(0+128)
  2455  0D9E  300C               	movlw	12
  2456  0D9F  3185  2570  318D   	fcall	_initialiseGPIO
  2457  0DA2                     l2704:
  2458                           
  2459                           ;main.c: 119:     initialiseGPIO(pinRB5, 0);
  2460  0DA2  0021               	movlb	1	; select bank1
  2461  0DA3  01D0               	clrf	initialiseGPIO@direction^(0+128)
  2462  0DA4  300D               	movlw	13
  2463  0DA5  3185  2570  318D   	fcall	_initialiseGPIO
  2464  0DA8                     l2706:
  2465  0DA8                     l2708:	
  2466                           ;main.c: 121:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2467                           
  2468                           
  2469                           ;main.c: 124:         if(1 == 1) transToVoltageModeControl();
  2470  0DA8  3008               	movlw	8
  2471  0DA9  318E  2602  318D   	fcall	_readGPIO
  2472  0DAC  3A01               	xorlw	1
  2473  0DAD  1903               	skipnz
  2474  0DAE  2DB0               	goto	u2491
  2475  0DAF  2DB1               	goto	u2490
  2476  0DB0                     u2491:
  2477  0DB0  2DB5               	goto	l2714
  2478  0DB1                     u2490:
  2479  0DB1                     l2710:
  2480  0DB1  318C  240A  318D   	fcall	_transToVoltageModeControl
  2481  0DB4  2DB8               	goto	l118
  2482  0DB5                     l2714:
  2483  0DB5  318B  23F3  318D   	fcall	_transToPotControl
  2484  0DB8                     l118:	
  2485                           ;main.c: 129:     while(1){
  2486                           
  2487  0DB8  2DB8               	goto	l118
  2488  0DB9  3180  2885         	ljmp	start
  2489  0DBB                     __end_of_main:
  2490                           
  2491                           	psect	text1
  2492  0C0A                     __ptext1:	
  2493 ;; *************** function _transToVoltageModeControl *****************
  2494 ;; Defined at:
  2495 ;;		line 27 in file "StateMachine.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;		None
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2509 ;;      Params:         0       0       0       0       0       0
  2510 ;;      Locals:         0       0       0       0       0       0
  2511 ;;      Temps:          0       0       1       0       0       0
  2512 ;;      Totals:         0       0       1       0       0       0
  2513 ;;Total ram usage:        1 bytes
  2514 ;; Hardware stack levels used: 1
  2515 ;; Hardware stack levels required when called: 5
  2516 ;; This function calls:
  2517 ;;		Nothing
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523  0C0A                     _transToVoltageModeControl:	
  2524                           ;psect for function _transToVoltageModeControl
  2525                           
  2526  0C0A                     l2648:	
  2527                           ;incstack = 0
  2528                           ; Regs used in _transToVoltageModeControl: [wreg]
  2529                           
  2530                           
  2531                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2532  0C0A  3002               	movlw	2
  2533  0C0B  0021               	movlb	1	; select bank1
  2534  0C0C  00D0               	movwf	??_transToVoltageModeControl^(0+128)
  2535  0C0D  0850               	movf	??_transToVoltageModeControl^(0+128),w
  2536  0C0E  0020               	movlb	0	; select bank0
  2537  0C0F  00EC               	movwf	_currentState
  2538  0C10                     l555:
  2539  0C10  0008               	return
  2540  0C11                     __end_of_transToVoltageModeControl:
  2541                           
  2542                           	psect	text2
  2543  0BF3                     __ptext2:	
  2544 ;; *************** function _transToPotControl *****************
  2545 ;; Defined at:
  2546 ;;		line 18 in file "StateMachine.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		None
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2560 ;;      Params:         0       0       0       0       0       0
  2561 ;;      Locals:         0       0       0       0       0       0
  2562 ;;      Temps:          0       0       0       0       0       0
  2563 ;;      Totals:         0       0       0       0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used: 1
  2566 ;; Hardware stack levels required when called: 5
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574  0BF3                     _transToPotControl:	
  2575                           ;psect for function _transToPotControl
  2576                           
  2577  0BF3                     l2652:	
  2578                           ;incstack = 0
  2579                           ; Regs used in _transToPotControl: []
  2580                           
  2581                           
  2582                           ;StateMachine.c: 19:     currentState = potControl;
  2583  0BF3  0020               	movlb	0	; select bank0
  2584  0BF4  01EC               	clrf	_currentState
  2585  0BF5  0AEC               	incf	_currentState,f
  2586  0BF6                     l552:
  2587  0BF6  0008               	return
  2588  0BF7                     __end_of_transToPotControl:
  2589                           
  2590                           	psect	text3
  2591  0C03                     __ptext3:	
  2592 ;; *************** function _transToCurrentModeControl *****************
  2593 ;; Defined at:
  2594 ;;		line 36 in file "StateMachine.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2608 ;;      Params:         0       0       0       0       0       0
  2609 ;;      Locals:         0       0       0       0       0       0
  2610 ;;      Temps:          0       0       1       0       0       0
  2611 ;;      Totals:         0       0       1       0       0       0
  2612 ;;Total ram usage:        1 bytes
  2613 ;; Hardware stack levels used: 1
  2614 ;; Hardware stack levels required when called: 5
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622  0C03                     _transToCurrentModeControl:	
  2623                           ;psect for function _transToCurrentModeControl
  2624                           
  2625  0C03                     l2650:	
  2626                           ;incstack = 0
  2627                           ; Regs used in _transToCurrentModeControl: [wreg]
  2628                           
  2629                           
  2630                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2631  0C03  3003               	movlw	3
  2632  0C04  0021               	movlb	1	; select bank1
  2633  0C05  00D0               	movwf	??_transToCurrentModeControl^(0+128)
  2634  0C06  0850               	movf	??_transToCurrentModeControl^(0+128),w
  2635  0C07  0020               	movlb	0	; select bank0
  2636  0C08  00EC               	movwf	_currentState
  2637  0C09                     l558:
  2638  0C09  0008               	return
  2639  0C0A                     __end_of_transToCurrentModeControl:
  2640                           
  2641                           	psect	text4
  2642  0C11                     __ptext4:	
  2643 ;; *************** function _setupTimer0Interrupt *****************
  2644 ;; Defined at:
  2645 ;;		line 17 in file "Timer0.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2659 ;;      Params:         0       0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 5
  2666 ;; This function calls:
  2667 ;;		Nothing
  2668 ;; This function is called by:
  2669 ;;		_main
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673  0C11                     _setupTimer0Interrupt:	
  2674                           ;psect for function _setupTimer0Interrupt
  2675                           
  2676  0C11                     l2594:	
  2677                           ;incstack = 0
  2678                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2679                           
  2680                           
  2681                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2682  0C11  178B               	bsf	11,7	;volatile
  2683                           
  2684                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2685  0C12  168B               	bsf	11,5	;volatile
  2686                           
  2687                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2688  0C13  0021               	movlb	1	; select bank1
  2689  0C14  1295               	bcf	21,5	;volatile
  2690                           
  2691                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2692  0C15  1195               	bcf	21,3	;volatile
  2693  0C16                     l2596:
  2694                           
  2695                           ;Timer0.c: 23:     OPTION_REG = 0b101;
  2696  0C16  3005               	movlw	5
  2697  0C17  0095               	movwf	21	;volatile
  2698  0C18                     l199:
  2699  0C18  0008               	return
  2700  0C19                     __end_of_setupTimer0Interrupt:
  2701                           
  2702                           	psect	text5
  2703  0C5F                     __ptext5:	
  2704 ;; *************** function _setupPWM *****************
  2705 ;; Defined at:
  2706 ;;		line 16 in file "PWM.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;		None
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		wreg, status,2, status,0, pclath, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2720 ;;      Params:         0       0       0       0       0       0
  2721 ;;      Locals:         0       0       0       0       0       0
  2722 ;;      Temps:          0       0       0       0       0       0
  2723 ;;      Totals:         0       0       0       0       0       0
  2724 ;;Total ram usage:        0 bytes
  2725 ;; Hardware stack levels used: 1
  2726 ;; Hardware stack levels required when called: 6
  2727 ;; This function calls:
  2728 ;;		_initialiseGPIO
  2729 ;; This function is called by:
  2730 ;;		_main
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734  0C5F                     _setupPWM:	
  2735                           ;psect for function _setupPWM
  2736                           
  2737  0C5F                     l2570:	
  2738                           ;incstack = 0
  2739                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2740                           
  2741                           
  2742                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2743  0C5F  300C               	movlw	12
  2744  0C60  0025               	movlb	5	; select bank5
  2745  0C61  0093               	movwf	19	;volatile
  2746  0C62                     l2572:
  2747                           
  2748                           ;PWM.c: 20:     PR2 = 0;
  2749  0C62  0020               	movlb	0	; select bank0
  2750  0C63  019B               	clrf	27	;volatile
  2751  0C64                     l2574:
  2752                           
  2753                           ;PWM.c: 21:     CCPR1L = 0;
  2754  0C64  0025               	movlb	5	; select bank5
  2755  0C65  0191               	clrf	17	;volatile
  2756  0C66                     l2576:
  2757                           
  2758                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2759  0C66  0022               	movlb	2	; select bank2
  2760  0C67  151D               	bsf	29,2	;volatile
  2761  0C68                     l2578:
  2762                           
  2763                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2764  0C68  0025               	movlb	5	; select bank5
  2765  0C69  1596               	bsf	22,3	;volatile
  2766  0C6A                     l2580:
  2767                           
  2768                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2769  0C6A  1016               	bcf	22,0	;volatile
  2770  0C6B                     l2582:
  2771                           
  2772                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2773  0C6B  30FC               	movlw	-4
  2774  0C6C  0020               	movlb	0	; select bank0
  2775  0C6D  059C               	andwf	28,f	;volatile
  2776  0C6E                     l2584:
  2777                           
  2778                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2779  0C6E  0021               	movlb	1	; select bank1
  2780  0C6F  1091               	bcf	17,1	;volatile
  2781  0C70                     l2586:
  2782                           
  2783                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2784  0C70  0020               	movlb	0	; select bank0
  2785  0C71  151C               	bsf	28,2	;volatile
  2786  0C72                     l2588:
  2787                           
  2788                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2789  0C72  170B               	bsf	11,6	;volatile
  2790  0C73                     l2590:
  2791                           
  2792                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2793  0C73  0021               	movlb	1	; select bank1
  2794  0C74  1511               	bsf	17,2	;volatile
  2795  0C75                     l2592:
  2796                           
  2797                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2798  0C75  01D0               	clrf	initialiseGPIO@direction^(0+128)
  2799  0C76  3006               	movlw	6
  2800  0C77  3185  2570  318C   	fcall	_initialiseGPIO
  2801  0C7A                     l172:
  2802  0C7A  0008               	return
  2803  0C7B                     __end_of_setupPWM:
  2804                           
  2805                           	psect	text6
  2806  03F2                     __ptext6:	
  2807 ;; *************** function _setupInternalOscillator *****************
  2808 ;; Defined at:
  2809 ;;		line 140 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  selectedFreq    1    wreg     const enum E2845
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2823 ;;      Params:         0       0       0       0       0       0
  2824 ;;      Locals:         0       0       1       0       0       0
  2825 ;;      Temps:          0       0       2       0       0       0
  2826 ;;      Totals:         0       0       3       0       0       0
  2827 ;;Total ram usage:        3 bytes
  2828 ;; Hardware stack levels used: 1
  2829 ;; Hardware stack levels required when called: 5
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_main
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837  03F2                     _setupInternalOscillator:	
  2838                           ;psect for function _setupInternalOscillator
  2839                           
  2840                           
  2841                           ;incstack = 0
  2842                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2843                           ;setupInternalOscillator@selectedFreq stored from wreg
  2844  03F2  0021               	movlb	1	; select bank1
  2845  03F3  00D2               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2846  03F4                     l2492:
  2847                           
  2848                           ;main.c: 144:     switch(selectedFreq){
  2849  03F4  2C8B               	goto	l2562
  2850  03F5                     l2494:
  2851  03F5  3087               	movlw	-121
  2852  03F6  0599               	andwf	25,f	;volatile
  2853  03F7                     l2496:
  2854  03F7  1399               	bcf	25,7	;volatile
  2855  03F8                     l2498:
  2856  03F8  3000               	movlw	0
  2857  03F9  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2858  03FA  3000               	movlw	0
  2859  03FB  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2860  03FC  3079               	movlw	121
  2861  03FD  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2862  03FE  3018               	movlw	24
  2863  03FF  00A8               	movwf	_clockFrequency^(0+128)
  2864  0400  2CB6               	goto	l137
  2865  0401                     l2500:
  2866  0401  0819               	movf	25,w	;volatile
  2867  0402  3987               	andlw	-121
  2868  0403  3820               	iorlw	32
  2869  0404  0099               	movwf	25	;volatile
  2870  0405                     l2502:
  2871  0405  1399               	bcf	25,7	;volatile
  2872  0406                     l2504:
  2873  0406  3000               	movlw	0
  2874  0407  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2875  0408  3000               	movlw	0
  2876  0409  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2877  040A  30F4               	movlw	244
  2878  040B  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2879  040C  3024               	movlw	36
  2880  040D  00A8               	movwf	_clockFrequency^(0+128)
  2881  040E  2CB6               	goto	l137
  2882  040F                     l2506:
  2883  040F  0819               	movf	25,w	;volatile
  2884  0410  3987               	andlw	-121
  2885  0411  3828               	iorlw	40
  2886  0412  0099               	movwf	25	;volatile
  2887  0413                     l2508:
  2888  0413  1399               	bcf	25,7	;volatile
  2889  0414                     l2510:
  2890  0414  3000               	movlw	0
  2891  0415  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2892  0416  3001               	movlw	1
  2893  0417  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2894  0418  30E8               	movlw	232
  2895  0419  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2896  041A  3048               	movlw	72
  2897  041B  00A8               	movwf	_clockFrequency^(0+128)
  2898  041C  2CB6               	goto	l137
  2899  041D                     l2512:
  2900  041D  0819               	movf	25,w	;volatile
  2901  041E  3987               	andlw	-121
  2902  041F  3830               	iorlw	48
  2903  0420  0099               	movwf	25	;volatile
  2904  0421                     l2514:
  2905  0421  1399               	bcf	25,7	;volatile
  2906  0422                     l2516:
  2907  0422  3000               	movlw	0
  2908  0423  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2909  0424  3003               	movlw	3
  2910  0425  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2911  0426  30D0               	movlw	208
  2912  0427  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2913  0428  3090               	movlw	144
  2914  0429  00A8               	movwf	_clockFrequency^(0+128)
  2915  042A  2CB6               	goto	l137
  2916  042B                     l2518:
  2917  042B  0819               	movf	25,w	;volatile
  2918  042C  3987               	andlw	-121
  2919  042D  3838               	iorlw	56
  2920  042E  0099               	movwf	25	;volatile
  2921  042F                     l2520:
  2922  042F  1399               	bcf	25,7	;volatile
  2923  0430                     l2522:
  2924  0430  3000               	movlw	0
  2925  0431  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2926  0432  3007               	movlw	7
  2927  0433  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2928  0434  30A1               	movlw	161
  2929  0435  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2930  0436  3020               	movlw	32
  2931  0437  00A8               	movwf	_clockFrequency^(0+128)
  2932  0438  2CB6               	goto	l137
  2933  0439                     l2524:
  2934  0439  0819               	movf	25,w	;volatile
  2935  043A  3987               	andlw	-121
  2936  043B  3858               	iorlw	88
  2937  043C  0099               	movwf	25	;volatile
  2938  043D                     l2526:
  2939  043D  1399               	bcf	25,7	;volatile
  2940  043E                     l2528:
  2941  043E  3000               	movlw	0
  2942  043F  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2943  0440  300F               	movlw	15
  2944  0441  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2945  0442  3042               	movlw	66
  2946  0443  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2947  0444  3040               	movlw	64
  2948  0445  00A8               	movwf	_clockFrequency^(0+128)
  2949  0446  2CB6               	goto	l137
  2950  0447                     l2530:
  2951  0447  0819               	movf	25,w	;volatile
  2952  0448  3987               	andlw	-121
  2953  0449  3860               	iorlw	96
  2954  044A  0099               	movwf	25	;volatile
  2955  044B                     l2532:
  2956  044B  1399               	bcf	25,7	;volatile
  2957  044C                     l2534:
  2958  044C  3000               	movlw	0
  2959  044D  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2960  044E  301E               	movlw	30
  2961  044F  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2962  0450  3084               	movlw	132
  2963  0451  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2964  0452  3080               	movlw	128
  2965  0453  00A8               	movwf	_clockFrequency^(0+128)
  2966  0454  2CB6               	goto	l137
  2967  0455                     l2536:
  2968  0455  0819               	movf	25,w	;volatile
  2969  0456  3987               	andlw	-121
  2970  0457  3868               	iorlw	104
  2971  0458  0099               	movwf	25	;volatile
  2972  0459                     l2538:
  2973  0459  1399               	bcf	25,7	;volatile
  2974  045A                     l2540:
  2975  045A  3000               	movlw	0
  2976  045B  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2977  045C  303D               	movlw	61
  2978  045D  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2979  045E  3009               	movlw	9
  2980  045F  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2981  0460  3000               	movlw	0
  2982  0461  00A8               	movwf	_clockFrequency^(0+128)
  2983  0462  2CB6               	goto	l137
  2984  0463                     l2542:
  2985  0463  0819               	movf	25,w	;volatile
  2986  0464  3987               	andlw	-121
  2987  0465  3870               	iorlw	112
  2988  0466  0099               	movwf	25	;volatile
  2989  0467                     l2544:
  2990  0467  1399               	bcf	25,7	;volatile
  2991  0468                     l2546:
  2992  0468  3000               	movlw	0
  2993  0469  00AB               	movwf	(_clockFrequency+3)^(0+128)
  2994  046A  307A               	movlw	122
  2995  046B  00AA               	movwf	(_clockFrequency+2)^(0+128)
  2996  046C  3012               	movlw	18
  2997  046D  00A9               	movwf	(_clockFrequency+1)^(0+128)
  2998  046E  3000               	movlw	0
  2999  046F  00A8               	movwf	_clockFrequency^(0+128)
  3000  0470  2CB6               	goto	l137
  3001  0471                     l2548:
  3002  0471  3078               	movlw	120
  3003  0472  0499               	iorwf	25,f	;volatile
  3004  0473                     l2550:
  3005  0473  1399               	bcf	25,7	;volatile
  3006  0474                     l2552:
  3007  0474  3000               	movlw	0
  3008  0475  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3009  0476  30F4               	movlw	244
  3010  0477  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3011  0478  3024               	movlw	36
  3012  0479  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3013  047A  3000               	movlw	0
  3014  047B  00A8               	movwf	_clockFrequency^(0+128)
  3015  047C  2CB6               	goto	l137
  3016  047D                     l2554:
  3017  047D  0819               	movf	25,w	;volatile
  3018  047E  3987               	andlw	-121
  3019  047F  3870               	iorlw	112
  3020  0480  0099               	movwf	25	;volatile
  3021  0481                     l2556:
  3022  0481  1799               	bsf	25,7	;volatile
  3023  0482                     l2558:
  3024  0482  3001               	movlw	1
  3025  0483  00AB               	movwf	(_clockFrequency+3)^(0+128)
  3026  0484  30E8               	movlw	232
  3027  0485  00AA               	movwf	(_clockFrequency+2)^(0+128)
  3028  0486  3048               	movlw	72
  3029  0487  00A9               	movwf	(_clockFrequency+1)^(0+128)
  3030  0488  3000               	movlw	0
  3031  0489  00A8               	movwf	_clockFrequency^(0+128)
  3032  048A  2CB6               	goto	l137
  3033  048B                     l2562:
  3034  048B  0852               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3035  048C  00D0               	movwf	??_setupInternalOscillator^(0+128)
  3036  048D  01D1               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3037                           
  3038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3039                           ; Switch size 1, requested type "simple"
  3040                           ; Number of cases is 1, Range of values is 0 to 0
  3041                           ; switch strategies available:
  3042                           ; Name         Instructions Cycles
  3043                           ; simple_byte            4     3 (average)
  3044                           ; direct_byte            8     6 (fixed)
  3045                           ; jumptable            260     6 (fixed)
  3046                           ;	Chosen strategy is simple_byte
  3047  048E  0851               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3048  048F  3A00               	xorlw	0	; case 0
  3049  0490  1903               	skipnz
  3050  0491  2C93               	goto	l2780
  3051  0492  2CB6               	goto	l137
  3052  0493                     l2780:
  3053                           
  3054                           ; Switch size 1, requested type "simple"
  3055                           ; Number of cases is 11, Range of values is 0 to 10
  3056                           ; switch strategies available:
  3057                           ; Name         Instructions Cycles
  3058                           ; direct_byte           28     6 (fixed)
  3059                           ; simple_byte           34    18 (average)
  3060                           ; jumptable            260     6 (fixed)
  3061                           ;	Chosen strategy is simple_byte
  3062  0493  0850               	movf	??_setupInternalOscillator^(0+128),w
  3063  0494  3A00               	xorlw	0	; case 0
  3064  0495  1903               	skipnz
  3065  0496  2BF5               	goto	l2494
  3066  0497  3A01               	xorlw	1	; case 1
  3067  0498  1903               	skipnz
  3068  0499  2C01               	goto	l2500
  3069  049A  3A03               	xorlw	3	; case 2
  3070  049B  1903               	skipnz
  3071  049C  2C0F               	goto	l2506
  3072  049D  3A01               	xorlw	1	; case 3
  3073  049E  1903               	skipnz
  3074  049F  2C1D               	goto	l2512
  3075  04A0  3A07               	xorlw	7	; case 4
  3076  04A1  1903               	skipnz
  3077  04A2  2C2B               	goto	l2518
  3078  04A3  3A01               	xorlw	1	; case 5
  3079  04A4  1903               	skipnz
  3080  04A5  2C39               	goto	l2524
  3081  04A6  3A03               	xorlw	3	; case 6
  3082  04A7  1903               	skipnz
  3083  04A8  2C47               	goto	l2530
  3084  04A9  3A01               	xorlw	1	; case 7
  3085  04AA  1903               	skipnz
  3086  04AB  2C55               	goto	l2536
  3087  04AC  3A0F               	xorlw	15	; case 8
  3088  04AD  1903               	skipnz
  3089  04AE  2C63               	goto	l2542
  3090  04AF  3A01               	xorlw	1	; case 9
  3091  04B0  1903               	skipnz
  3092  04B1  2C71               	goto	l2548
  3093  04B2  3A03               	xorlw	3	; case 10
  3094  04B3  1903               	skipnz
  3095  04B4  2C7D               	goto	l2554
  3096  04B5  2CB6               	goto	l137
  3097  04B6                     l137:
  3098  04B6  0008               	return
  3099  04B7                     __end_of_setupInternalOscillator:
  3100                           
  3101                           	psect	text7
  3102  0E02                     __ptext7:	
  3103 ;; *************** function _readGPIO *****************
  3104 ;; Defined at:
  3105 ;;		line 79 in file "GPIO.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  gpioNumber      1    wreg     const enum E2798
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3110 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3111 ;;  readB           1    4[BANK1 ] unsigned char 
  3112 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3113 ;;  readA           1    2[BANK1 ] unsigned char 
  3114 ;;  portType        1    7[BANK1 ] unsigned char 
  3115 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      _Bool 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3125 ;;      Params:         0       0       0       0       0       0
  3126 ;;      Locals:         0       0       7       0       0       0
  3127 ;;      Temps:          0       0       2       0       0       0
  3128 ;;      Totals:         0       0       9       0       0       0
  3129 ;;Total ram usage:        9 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 5
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_main
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139  0E02                     _readGPIO:	
  3140                           ;psect for function _readGPIO
  3141                           
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3145                           ;readGPIO@gpioNumber stored from wreg
  3146  0E02  0021               	movlb	1	; select bank1
  3147  0E03  00D8               	movwf	readGPIO@gpioNumber^(0+128)
  3148  0E04                     l2608:
  3149                           
  3150                           ;GPIO.c: 81:     uint8_t portType = 0;
  3151  0E04  01D7               	clrf	readGPIO@portType^(0+128)
  3152  0E05                     l2610:
  3153                           
  3154                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3155  0E05  3008               	movlw	8
  3156  0E06  0258               	subwf	readGPIO@gpioNumber^(0+128),w
  3157  0E07  1C03               	skipc
  3158  0E08  2E0A               	goto	u2361
  3159  0E09  2E0B               	goto	u2360
  3160  0E0A                     u2361:
  3161  0E0A  2E13               	goto	l2616
  3162  0E0B                     u2360:
  3163  0E0B                     l2612:
  3164                           
  3165                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3166  0E0B  0858               	movf	readGPIO@gpioNumber^(0+128),w
  3167  0E0C  3EF8               	addlw	248
  3168  0E0D  00D0               	movwf	??_readGPIO^(0+128)
  3169  0E0E  0850               	movf	??_readGPIO^(0+128),w
  3170  0E0F  00D6               	movwf	readGPIO@portNumber^(0+128)
  3171  0E10                     l2614:
  3172                           
  3173                           ;GPIO.c: 84:         portType = 1;
  3174  0E10  01D7               	clrf	readGPIO@portType^(0+128)
  3175  0E11  0AD7               	incf	readGPIO@portType^(0+128),f
  3176                           
  3177                           ;GPIO.c: 85:     }
  3178  0E12  2E18               	goto	l2620
  3179  0E13                     l2616:
  3180                           
  3181                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3182  0E13  0858               	movf	readGPIO@gpioNumber^(0+128),w
  3183  0E14  00D0               	movwf	??_readGPIO^(0+128)
  3184  0E15  0850               	movf	??_readGPIO^(0+128),w
  3185  0E16  00D6               	movwf	readGPIO@portNumber^(0+128)
  3186  0E17                     l2618:
  3187                           
  3188                           ;GPIO.c: 88:         portType = 0;
  3189  0E17  01D7               	clrf	readGPIO@portType^(0+128)
  3190  0E18                     l2620:
  3191                           
  3192                           ;GPIO.c: 91:     if(portType == 0){
  3193  0E18  0857               	movf	readGPIO@portType^(0+128),w
  3194  0E19  1D03               	btfss	3,2
  3195  0E1A  2E1C               	goto	u2371
  3196  0E1B  2E1D               	goto	u2370
  3197  0E1C                     u2371:
  3198  0E1C  2E31               	goto	l2632
  3199  0E1D                     u2370:
  3200  0E1D                     l2622:
  3201                           
  3202                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3203  0E1D  0020               	movlb	0	; select bank0
  3204  0E1E  080C               	movf	12,w	;volatile
  3205  0E1F  0021               	movlb	1	; select bank1
  3206  0E20  00D0               	movwf	??_readGPIO^(0+128)
  3207  0E21  0850               	movf	??_readGPIO^(0+128),w
  3208  0E22  00D2               	movwf	readGPIO@readA^(0+128)
  3209  0E23                     l2624:
  3210                           
  3211                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3212  0E23  0852               	movf	readGPIO@readA^(0+128),w
  3213  0E24  00D0               	movwf	??_readGPIO^(0+128)
  3214  0E25  0A56               	incf	readGPIO@portNumber^(0+128),w
  3215  0E26  2E28               	goto	u2384
  3216  0E27                     u2385:
  3217  0E27  36D0               	lsrf	??_readGPIO^(0+128),f
  3218  0E28                     u2384:
  3219  0E28  0B89               	decfsz	9,f
  3220  0E29  2E27               	goto	u2385
  3221  0E2A  0850               	movf	??_readGPIO^(0+128),w
  3222  0E2B  3901               	andlw	1
  3223  0E2C  00D1               	movwf	(??_readGPIO+1)^(0+128)
  3224  0E2D  0851               	movf	(??_readGPIO+1)^(0+128),w
  3225  0E2E  00D3               	movwf	readGPIO@returnValueA^(0+128)
  3226  0E2F                     l2626:
  3227                           
  3228                           ;GPIO.c: 94:         return returnValueA;
  3229  0E2F  0853               	movf	readGPIO@returnValueA^(0+128),w
  3230  0E30  2E4B               	goto	l324
  3231  0E31                     l2632:
  3232  0E31  0357               	decf	readGPIO@portType^(0+128),w
  3233  0E32  1D03               	btfss	3,2
  3234  0E33  2E35               	goto	u2391
  3235  0E34  2E36               	goto	u2390
  3236  0E35                     u2391:
  3237  0E35  2E4A               	goto	l2644
  3238  0E36                     u2390:
  3239  0E36                     l2634:
  3240                           
  3241                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3242  0E36  0020               	movlb	0	; select bank0
  3243  0E37  080D               	movf	13,w	;volatile
  3244  0E38  0021               	movlb	1	; select bank1
  3245  0E39  00D0               	movwf	??_readGPIO^(0+128)
  3246  0E3A  0850               	movf	??_readGPIO^(0+128),w
  3247  0E3B  00D4               	movwf	readGPIO@readB^(0+128)
  3248  0E3C                     l2636:
  3249                           
  3250                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3251  0E3C  0854               	movf	readGPIO@readB^(0+128),w
  3252  0E3D  00D0               	movwf	??_readGPIO^(0+128)
  3253  0E3E  0A56               	incf	readGPIO@portNumber^(0+128),w
  3254  0E3F  2E41               	goto	u2404
  3255  0E40                     u2405:
  3256  0E40  36D0               	lsrf	??_readGPIO^(0+128),f
  3257  0E41                     u2404:
  3258  0E41  0B89               	decfsz	9,f
  3259  0E42  2E40               	goto	u2405
  3260  0E43  0850               	movf	??_readGPIO^(0+128),w
  3261  0E44  3901               	andlw	1
  3262  0E45  00D1               	movwf	(??_readGPIO+1)^(0+128)
  3263  0E46  0851               	movf	(??_readGPIO+1)^(0+128),w
  3264  0E47  00D5               	movwf	readGPIO@returnValueB^(0+128)
  3265  0E48                     l2638:
  3266                           
  3267                           ;GPIO.c: 99:         return returnValueB;
  3268  0E48  0855               	movf	readGPIO@returnValueB^(0+128),w
  3269  0E49  2E4B               	goto	l324
  3270  0E4A                     l2644:
  3271  0E4A  3000               	movlw	0
  3272  0E4B                     l324:
  3273  0E4B  0008               	return
  3274  0E4C                     __end_of_readGPIO:
  3275                           
  3276                           	psect	text8
  3277  0C22                     __ptext8:	
  3278 ;; *************** function _initialisePotentiometers *****************
  3279 ;; Defined at:
  3280 ;;		line 15 in file "Potentiometer.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3294 ;;      Params:         0       0       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0
  3297 ;;      Totals:         0       0       0       0       0       0
  3298 ;;Total ram usage:        0 bytes
  3299 ;; Hardware stack levels used: 1
  3300 ;; Hardware stack levels required when called: 6
  3301 ;; This function calls:
  3302 ;;		_initialiseADCPin
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308  0C22                     _initialisePotentiometers:	
  3309                           ;psect for function _initialisePotentiometers
  3310                           
  3311  0C22                     l2602:	
  3312                           ;incstack = 0
  3313                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3314                           
  3315                           
  3316                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3317  0C22  3009               	movlw	9
  3318  0C23  3185  25E6  318C   	fcall	_initialiseADCPin
  3319                           
  3320                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3321  0C26  300A               	movlw	10
  3322  0C27  3185  25E6  318C   	fcall	_initialiseADCPin
  3323  0C2A                     l356:
  3324  0C2A  0008               	return
  3325  0C2B                     __end_of_initialisePotentiometers:
  3326                           
  3327                           	psect	text9
  3328  0CB7                     __ptext9:	
  3329 ;; *************** function _initialiseCurrentSensors *****************
  3330 ;; Defined at:
  3331 ;;		line 18 in file "CurrentSensor.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0, pclath, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3345 ;;      Params:         0       0       0       0       0       0
  3346 ;;      Locals:         0       0       0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0       0
  3348 ;;      Totals:         0       0       0       0       0       0
  3349 ;;Total ram usage:        0 bytes
  3350 ;; Hardware stack levels used: 1
  3351 ;; Hardware stack levels required when called: 7
  3352 ;; This function calls:
  3353 ;;		_currentTripReset
  3354 ;;		_initialiseADCPin
  3355 ;;		_initialiseGPIO
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361  0CB7                     _initialiseCurrentSensors:	
  3362                           ;psect for function _initialiseCurrentSensors
  3363                           
  3364  0CB7                     l2600:	
  3365                           ;incstack = 0
  3366                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3367                           
  3368                           
  3369                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA3, 1);
  3370  0CB7  0021               	movlb	1	; select bank1
  3371  0CB8  01D0               	clrf	initialiseGPIO@direction^(0+128)
  3372  0CB9  0AD0               	incf	initialiseGPIO@direction^(0+128),f
  3373  0CBA  3003               	movlw	3
  3374  0CBB  3185  2570  318C   	fcall	_initialiseGPIO
  3375                           
  3376                           ;CurrentSensor.c: 20:     initialiseGPIO(pinRA1, 1);
  3377  0CBE  0021               	movlb	1	; select bank1
  3378  0CBF  01D0               	clrf	initialiseGPIO@direction^(0+128)
  3379  0CC0  0AD0               	incf	initialiseGPIO@direction^(0+128),f
  3380  0CC1  3001               	movlw	1
  3381  0CC2  3185  2570  318C   	fcall	_initialiseGPIO
  3382                           
  3383                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA0);
  3384  0CC5  3000               	movlw	0
  3385  0CC6  3185  25E6  318C   	fcall	_initialiseADCPin
  3386                           
  3387                           ;CurrentSensor.c: 22:     initialiseADCPin(pinRA2);
  3388  0CC9  3002               	movlw	2
  3389  0CCA  3185  25E6  318C   	fcall	_initialiseADCPin
  3390                           
  3391                           ;CurrentSensor.c: 23:     initialiseGPIO(pinRB3, 0);
  3392  0CCD  0021               	movlb	1	; select bank1
  3393  0CCE  01D0               	clrf	initialiseGPIO@direction^(0+128)
  3394  0CCF  300B               	movlw	11
  3395  0CD0  3185  2570  318C   	fcall	_initialiseGPIO
  3396                           
  3397                           ;CurrentSensor.c: 24:     currentTripReset();
  3398  0CD3  318C  2437  318C   	fcall	_currentTripReset
  3399  0CD6                     l504:
  3400  0CD6  0008               	return
  3401  0CD7                     __end_of_initialiseCurrentSensors:
  3402                           
  3403                           	psect	text10
  3404  0C37                     __ptext10:	
  3405 ;; *************** function _currentTripReset *****************
  3406 ;; Defined at:
  3407 ;;		line 71 in file "CurrentSensor.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      void 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0, pclath, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3421 ;;      Params:         0       0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0       0
  3424 ;;      Totals:         0       0       0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used: 1
  3427 ;; Hardware stack levels required when called: 6
  3428 ;; This function calls:
  3429 ;;		_writeGPIO
  3430 ;; This function is called by:
  3431 ;;		_initialiseCurrentSensors
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435  0C37                     _currentTripReset:	
  3436                           ;psect for function _currentTripReset
  3437                           
  3438  0C37                     l2250:	
  3439                           ;incstack = 0
  3440                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3441                           
  3442                           
  3443                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  3444  0C37  0021               	movlb	1	; select bank1
  3445  0C38  01D0               	clrf	writeGPIO@writeValue^(0+128)
  3446  0C39  300B               	movlw	11
  3447  0C3A  3186  264C  318C   	fcall	_writeGPIO
  3448  0C3D                     l2252:
  3449                           
  3450                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3451                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  3452  0C3D  0021               	movlb	1	; select bank1
  3453  0C3E  01D0               	clrf	writeGPIO@writeValue^(0+128)
  3454  0C3F  0AD0               	incf	writeGPIO@writeValue^(0+128),f
  3455  0C40  300B               	movlw	11
  3456  0C41  3186  264C  318C   	fcall	_writeGPIO
  3457  0C44                     l526:
  3458  0C44  0008               	return
  3459  0C45                     __end_of_currentTripReset:
  3460                           
  3461                           	psect	text11
  3462  064C                     __ptext11:	
  3463 ;; *************** function _writeGPIO *****************
  3464 ;; Defined at:
  3465 ;;		line 52 in file "GPIO.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  gpioNumber      1    wreg     const enum E2798
  3468 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3471 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3472 ;;  portType        1    3[BANK1 ] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3482 ;;      Params:         0       0       1       0       0       0
  3483 ;;      Locals:         0       0       3       0       0       0
  3484 ;;      Temps:          0       0       2       0       0       0
  3485 ;;      Totals:         0       0       6       0       0       0
  3486 ;;Total ram usage:        6 bytes
  3487 ;; Hardware stack levels used: 1
  3488 ;; Hardware stack levels required when called: 5
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_currentTripReset
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496  064C                     _writeGPIO:	
  3497                           ;psect for function _writeGPIO
  3498                           
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3502                           ;writeGPIO@gpioNumber stored from wreg
  3503  064C  0021               	movlb	1	; select bank1
  3504  064D  00D4               	movwf	writeGPIO@gpioNumber^(0+128)
  3505  064E                     l1998:
  3506                           
  3507                           ;GPIO.c: 54:     uint8_t portType = 0;
  3508  064E  01D3               	clrf	writeGPIO@portType^(0+128)
  3509  064F                     l2000:
  3510                           
  3511                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3512  064F  3008               	movlw	8
  3513  0650  0254               	subwf	writeGPIO@gpioNumber^(0+128),w
  3514  0651  1C03               	skipc
  3515  0652  2E54               	goto	u1311
  3516  0653  2E55               	goto	u1310
  3517  0654                     u1311:
  3518  0654  2E5D               	goto	l2006
  3519  0655                     u1310:
  3520  0655                     l2002:
  3521                           
  3522                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3523  0655  0854               	movf	writeGPIO@gpioNumber^(0+128),w
  3524  0656  3EF8               	addlw	248
  3525  0657  00D1               	movwf	??_writeGPIO^(0+128)
  3526  0658  0851               	movf	??_writeGPIO^(0+128),w
  3527  0659  00D5               	movwf	writeGPIO@portNumber^(0+128)
  3528  065A                     l2004:
  3529                           
  3530                           ;GPIO.c: 57:         portType = 1;
  3531  065A  01D3               	clrf	writeGPIO@portType^(0+128)
  3532  065B  0AD3               	incf	writeGPIO@portType^(0+128),f
  3533                           
  3534                           ;GPIO.c: 58:     }
  3535  065C  2E62               	goto	l2010
  3536  065D                     l2006:
  3537                           
  3538                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3539  065D  0854               	movf	writeGPIO@gpioNumber^(0+128),w
  3540  065E  00D1               	movwf	??_writeGPIO^(0+128)
  3541  065F  0851               	movf	??_writeGPIO^(0+128),w
  3542  0660  00D5               	movwf	writeGPIO@portNumber^(0+128)
  3543  0661                     l2008:
  3544                           
  3545                           ;GPIO.c: 61:         portType = 0;
  3546  0661  01D3               	clrf	writeGPIO@portType^(0+128)
  3547  0662                     l2010:
  3548                           
  3549                           ;GPIO.c: 64:     if(portType == 0){
  3550  0662  0853               	movf	writeGPIO@portType^(0+128),w
  3551  0663  1D03               	btfss	3,2
  3552  0664  2E66               	goto	u1321
  3553  0665  2E67               	goto	u1320
  3554  0666                     u1321:
  3555  0666  2E87               	goto	l2018
  3556  0667                     u1320:
  3557  0667                     l2012:
  3558                           
  3559                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3560  0667  0850               	movf	writeGPIO@writeValue^(0+128),w
  3561  0668  1903               	btfsc	3,2
  3562  0669  2E6B               	goto	u1331
  3563  066A  2E6C               	goto	u1330
  3564  066B                     u1331:
  3565  066B  2E79               	goto	l2016
  3566  066C                     u1330:
  3567  066C                     l2014:
  3568  066C  3001               	movlw	1
  3569  066D  00D1               	movwf	??_writeGPIO^(0+128)
  3570  066E  0A55               	incf	writeGPIO@portNumber^(0+128),w
  3571  066F  2E71               	goto	u1344
  3572  0670                     u1345:
  3573  0670  35D1               	lslf	??_writeGPIO^(0+128),f
  3574  0671                     u1344:
  3575  0671  0B89               	decfsz	9,f
  3576  0672  2E70               	goto	u1345
  3577  0673  0851               	movf	??_writeGPIO^(0+128),w
  3578  0674  00D2               	movwf	(??_writeGPIO+1)^(0+128)
  3579  0675  0852               	movf	(??_writeGPIO+1)^(0+128),w
  3580  0676  0022               	movlb	2	; select bank2
  3581  0677  048C               	iorwf	12,f	;volatile
  3582  0678  2EAB               	goto	l318
  3583  0679                     l2016:
  3584  0679  3001               	movlw	1
  3585  067A  00D1               	movwf	??_writeGPIO^(0+128)
  3586  067B  0A55               	incf	writeGPIO@portNumber^(0+128),w
  3587  067C  2E7E               	goto	u1354
  3588  067D                     u1355:
  3589  067D  35D1               	lslf	??_writeGPIO^(0+128),f
  3590  067E                     u1354:
  3591  067E  0B89               	decfsz	9,f
  3592  067F  2E7D               	goto	u1355
  3593  0680  0851               	movf	??_writeGPIO^(0+128),w
  3594  0681  3AFF               	xorlw	255
  3595  0682  00D2               	movwf	(??_writeGPIO+1)^(0+128)
  3596  0683  0852               	movf	(??_writeGPIO+1)^(0+128),w
  3597  0684  0022               	movlb	2	; select bank2
  3598  0685  058C               	andwf	12,f	;volatile
  3599  0686  2EAB               	goto	l318
  3600  0687                     l2018:
  3601  0687  0353               	decf	writeGPIO@portType^(0+128),w
  3602  0688  1D03               	btfss	3,2
  3603  0689  2E8B               	goto	u1361
  3604  068A  2E8C               	goto	u1360
  3605  068B                     u1361:
  3606  068B  2EAB               	goto	l318
  3607  068C                     u1360:
  3608  068C                     l2020:
  3609                           
  3610                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3611  068C  0850               	movf	writeGPIO@writeValue^(0+128),w
  3612  068D  1903               	btfsc	3,2
  3613  068E  2E90               	goto	u1371
  3614  068F  2E91               	goto	u1370
  3615  0690                     u1371:
  3616  0690  2E9E               	goto	l2024
  3617  0691                     u1370:
  3618  0691                     l2022:
  3619  0691  3001               	movlw	1
  3620  0692  00D1               	movwf	??_writeGPIO^(0+128)
  3621  0693  0A55               	incf	writeGPIO@portNumber^(0+128),w
  3622  0694  2E96               	goto	u1384
  3623  0695                     u1385:
  3624  0695  35D1               	lslf	??_writeGPIO^(0+128),f
  3625  0696                     u1384:
  3626  0696  0B89               	decfsz	9,f
  3627  0697  2E95               	goto	u1385
  3628  0698  0851               	movf	??_writeGPIO^(0+128),w
  3629  0699  00D2               	movwf	(??_writeGPIO+1)^(0+128)
  3630  069A  0852               	movf	(??_writeGPIO+1)^(0+128),w
  3631  069B  0022               	movlb	2	; select bank2
  3632  069C  048D               	iorwf	13,f	;volatile
  3633  069D  2EAB               	goto	l318
  3634  069E                     l2024:
  3635  069E  3001               	movlw	1
  3636  069F  00D1               	movwf	??_writeGPIO^(0+128)
  3637  06A0  0A55               	incf	writeGPIO@portNumber^(0+128),w
  3638  06A1  2EA3               	goto	u1394
  3639  06A2                     u1395:
  3640  06A2  35D1               	lslf	??_writeGPIO^(0+128),f
  3641  06A3                     u1394:
  3642  06A3  0B89               	decfsz	9,f
  3643  06A4  2EA2               	goto	u1395
  3644  06A5  0851               	movf	??_writeGPIO^(0+128),w
  3645  06A6  3AFF               	xorlw	255
  3646  06A7  00D2               	movwf	(??_writeGPIO+1)^(0+128)
  3647  06A8  0852               	movf	(??_writeGPIO+1)^(0+128),w
  3648  06A9  0022               	movlb	2	; select bank2
  3649  06AA  058D               	andwf	13,f	;volatile
  3650  06AB                     l318:
  3651  06AB  0008               	return
  3652  06AC                     __end_of_writeGPIO:
  3653                           
  3654                           	psect	text12
  3655  0C7B                     __ptext12:	
  3656 ;; *************** function _initialiseController *****************
  3657 ;; Defined at:
  3658 ;;		line 28 in file "Controller.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, pclath, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3672 ;;      Params:         0       0       0       0       0       0
  3673 ;;      Locals:         0       0       0       0       0       0
  3674 ;;      Temps:          0       0       0       0       0       0
  3675 ;;      Totals:         0       0       0       0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used: 1
  3678 ;; Hardware stack levels required when called: 6
  3679 ;; This function calls:
  3680 ;;		_initialiseADCPin
  3681 ;;		_initialiseGPIO
  3682 ;; This function is called by:
  3683 ;;		_main
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687  0C7B                     _initialiseController:	
  3688                           ;psect for function _initialiseController
  3689                           
  3690  0C7B                     l2604:	
  3691                           ;incstack = 0
  3692                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3693                           
  3694                           
  3695                           ;Controller.c: 29:     initialiseGPIO(pinRA4, 1);
  3696  0C7B  0021               	movlb	1	; select bank1
  3697  0C7C  01D0               	clrf	initialiseGPIO@direction^(0+128)
  3698  0C7D  0AD0               	incf	initialiseGPIO@direction^(0+128),f
  3699  0C7E  3004               	movlw	4
  3700  0C7F  3185  2570  318C   	fcall	_initialiseGPIO
  3701                           
  3702                           ;Controller.c: 30:     initialiseADCPin(pinRA4);
  3703  0C82  3004               	movlw	4
  3704  0C83  3185  25E6  318C   	fcall	_initialiseADCPin
  3705  0C86                     l2606:
  3706                           
  3707                           ;Controller.c: 31:     integratorScaledLimit = (int64_t) ((int64_t) (512u) << (6u + 16u)
      +                          );
  3708  0C86  3000               	movlw	0
  3709  0C87  0021               	movlb	1	; select bank1
  3710  0C88  00A7               	movwf	(_integratorScaledLimit+7)^(0+128)
  3711  0C89  3000               	movlw	0
  3712  0C8A  00A6               	movwf	(_integratorScaledLimit+6)^(0+128)
  3713  0C8B  3000               	movlw	0
  3714  0C8C  00A5               	movwf	(_integratorScaledLimit+5)^(0+128)
  3715  0C8D  3000               	movlw	0
  3716  0C8E  00A4               	movwf	(_integratorScaledLimit+4)^(0+128)
  3717  0C8F  3080               	movlw	128
  3718  0C90  00A3               	movwf	(_integratorScaledLimit+3)^(0+128)
  3719  0C91  3000               	movlw	0
  3720  0C92  00A2               	movwf	(_integratorScaledLimit+2)^(0+128)
  3721  0C93  3000               	movlw	0
  3722  0C94  00A1               	movwf	(_integratorScaledLimit+1)^(0+128)
  3723  0C95  3000               	movlw	0
  3724  0C96  00A0               	movwf	_integratorScaledLimit^(0+128)
  3725  0C97                     l428:
  3726  0C97  0008               	return
  3727  0C98                     __end_of_initialiseController:
  3728                           
  3729                           	psect	text13
  3730  0570                     __ptext13:	
  3731 ;; *************** function _initialiseGPIO *****************
  3732 ;; Defined at:
  3733 ;;		line 18 in file "GPIO.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  gpioNumber      1    wreg     const enum E2798
  3736 ;;  direction       1    0[BANK1 ] unsigned char 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3739 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3740 ;;  portType        1    3[BANK1 ] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3750 ;;      Params:         0       0       1       0       0       0
  3751 ;;      Locals:         0       0       3       0       0       0
  3752 ;;      Temps:          0       0       2       0       0       0
  3753 ;;      Totals:         0       0       6       0       0       0
  3754 ;;Total ram usage:        6 bytes
  3755 ;; Hardware stack levels used: 1
  3756 ;; Hardware stack levels required when called: 5
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;;		_setupPWM
  3762 ;;		_initialiseController
  3763 ;;		_initialiseCurrentSensors
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767  0570                     _initialiseGPIO:	
  3768                           ;psect for function _initialiseGPIO
  3769                           
  3770                           
  3771                           ;incstack = 0
  3772                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3773                           ;initialiseGPIO@gpioNumber stored from wreg
  3774  0570  0021               	movlb	1	; select bank1
  3775  0571  00D4               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3776  0572                     l2118:
  3777                           
  3778                           ;GPIO.c: 20:     uint8_t portType = 0;
  3779  0572  01D3               	clrf	initialiseGPIO@portType^(0+128)
  3780  0573                     l2120:
  3781                           
  3782                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3783  0573  3008               	movlw	8
  3784  0574  0254               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3785  0575  1C03               	skipc
  3786  0576  2D78               	goto	u1591
  3787  0577  2D79               	goto	u1590
  3788  0578                     u1591:
  3789  0578  2D81               	goto	l2126
  3790  0579                     u1590:
  3791  0579                     l2122:
  3792                           
  3793                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3794  0579  0854               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3795  057A  3EF8               	addlw	248
  3796  057B  00D1               	movwf	??_initialiseGPIO^(0+128)
  3797  057C  0851               	movf	??_initialiseGPIO^(0+128),w
  3798  057D  00D5               	movwf	initialiseGPIO@portNumber^(0+128)
  3799  057E                     l2124:
  3800                           
  3801                           ;GPIO.c: 23:         portType = 1;
  3802  057E  01D3               	clrf	initialiseGPIO@portType^(0+128)
  3803  057F  0AD3               	incf	initialiseGPIO@portType^(0+128),f
  3804                           
  3805                           ;GPIO.c: 24:     }
  3806  0580  2D86               	goto	l2130
  3807  0581                     l2126:
  3808                           
  3809                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3810  0581  0854               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3811  0582  00D1               	movwf	??_initialiseGPIO^(0+128)
  3812  0583  0851               	movf	??_initialiseGPIO^(0+128),w
  3813  0584  00D5               	movwf	initialiseGPIO@portNumber^(0+128)
  3814  0585                     l2128:
  3815                           
  3816                           ;GPIO.c: 27:         portType = 0;
  3817  0585  01D3               	clrf	initialiseGPIO@portType^(0+128)
  3818  0586                     l2130:
  3819                           
  3820                           ;GPIO.c: 30:     if(portType == 0){
  3821  0586  0853               	movf	initialiseGPIO@portType^(0+128),w
  3822  0587  1D03               	btfss	3,2
  3823  0588  2D8A               	goto	u1601
  3824  0589  2D8B               	goto	u1600
  3825  058A                     u1601:
  3826  058A  2DB6               	goto	l2138
  3827  058B                     u1600:
  3828  058B                     l2132:
  3829                           
  3830                           ;GPIO.c: 31:         if(direction){
  3831  058B  0850               	movf	initialiseGPIO@direction^(0+128),w
  3832  058C  1903               	btfsc	3,2
  3833  058D  2D8F               	goto	u1611
  3834  058E  2D90               	goto	u1610
  3835  058F                     u1611:
  3836  058F  2DA9               	goto	l2136
  3837  0590                     u1610:
  3838  0590                     l2134:
  3839                           
  3840                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3841  0590  3001               	movlw	1
  3842  0591  00D1               	movwf	??_initialiseGPIO^(0+128)
  3843  0592  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3844  0593  2D95               	goto	u1624
  3845  0594                     u1625:
  3846  0594  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3847  0595                     u1624:
  3848  0595  0B89               	decfsz	9,f
  3849  0596  2D94               	goto	u1625
  3850  0597  0851               	movf	??_initialiseGPIO^(0+128),w
  3851  0598  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3852  0599  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3853  059A  048C               	iorwf	12,f	;volatile
  3854                           
  3855                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3856  059B  3001               	movlw	1
  3857  059C  00D1               	movwf	??_initialiseGPIO^(0+128)
  3858  059D  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3859  059E  2DA0               	goto	u1634
  3860  059F                     u1635:
  3861  059F  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3862  05A0                     u1634:
  3863  05A0  0B89               	decfsz	9,f
  3864  05A1  2D9F               	goto	u1635
  3865  05A2  0851               	movf	??_initialiseGPIO^(0+128),w
  3866  05A3  3AFF               	xorlw	255
  3867  05A4  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3868  05A5  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3869  05A6  0023               	movlb	3	; select bank3
  3870  05A7  058C               	andwf	12,f	;volatile
  3871                           
  3872                           ;GPIO.c: 34:         }
  3873  05A8  2DE5               	goto	l304
  3874  05A9                     l2136:
  3875  05A9  3001               	movlw	1
  3876  05AA  00D1               	movwf	??_initialiseGPIO^(0+128)
  3877  05AB  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3878  05AC  2DAE               	goto	u1644
  3879  05AD                     u1645:
  3880  05AD  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3881  05AE                     u1644:
  3882  05AE  0B89               	decfsz	9,f
  3883  05AF  2DAD               	goto	u1645
  3884  05B0  0851               	movf	??_initialiseGPIO^(0+128),w
  3885  05B1  3AFF               	xorlw	255
  3886  05B2  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3887  05B3  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3888  05B4  058C               	andwf	12,f	;volatile
  3889  05B5  2DE5               	goto	l304
  3890  05B6                     l2138:
  3891  05B6  0353               	decf	initialiseGPIO@portType^(0+128),w
  3892  05B7  1D03               	btfss	3,2
  3893  05B8  2DBA               	goto	u1651
  3894  05B9  2DBB               	goto	u1650
  3895  05BA                     u1651:
  3896  05BA  2DE5               	goto	l304
  3897  05BB                     u1650:
  3898  05BB                     l2140:
  3899                           
  3900                           ;GPIO.c: 38:         if(direction){
  3901  05BB  0850               	movf	initialiseGPIO@direction^(0+128),w
  3902  05BC  1903               	btfsc	3,2
  3903  05BD  2DBF               	goto	u1661
  3904  05BE  2DC0               	goto	u1660
  3905  05BF                     u1661:
  3906  05BF  2DD9               	goto	l2144
  3907  05C0                     u1660:
  3908  05C0                     l2142:
  3909                           
  3910                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3911  05C0  3001               	movlw	1
  3912  05C1  00D1               	movwf	??_initialiseGPIO^(0+128)
  3913  05C2  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3914  05C3  2DC5               	goto	u1674
  3915  05C4                     u1675:
  3916  05C4  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3917  05C5                     u1674:
  3918  05C5  0B89               	decfsz	9,f
  3919  05C6  2DC4               	goto	u1675
  3920  05C7  0851               	movf	??_initialiseGPIO^(0+128),w
  3921  05C8  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3922  05C9  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3923  05CA  048D               	iorwf	13,f	;volatile
  3924                           
  3925                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3926  05CB  3001               	movlw	1
  3927  05CC  00D1               	movwf	??_initialiseGPIO^(0+128)
  3928  05CD  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3929  05CE  2DD0               	goto	u1684
  3930  05CF                     u1685:
  3931  05CF  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3932  05D0                     u1684:
  3933  05D0  0B89               	decfsz	9,f
  3934  05D1  2DCF               	goto	u1685
  3935  05D2  0851               	movf	??_initialiseGPIO^(0+128),w
  3936  05D3  3AFF               	xorlw	255
  3937  05D4  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3938  05D5  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3939  05D6  0023               	movlb	3	; select bank3
  3940  05D7  058D               	andwf	13,f	;volatile
  3941                           
  3942                           ;GPIO.c: 41:         }
  3943  05D8  2DE5               	goto	l304
  3944  05D9                     l2144:
  3945  05D9  3001               	movlw	1
  3946  05DA  00D1               	movwf	??_initialiseGPIO^(0+128)
  3947  05DB  0A55               	incf	initialiseGPIO@portNumber^(0+128),w
  3948  05DC  2DDE               	goto	u1694
  3949  05DD                     u1695:
  3950  05DD  35D1               	lslf	??_initialiseGPIO^(0+128),f
  3951  05DE                     u1694:
  3952  05DE  0B89               	decfsz	9,f
  3953  05DF  2DDD               	goto	u1695
  3954  05E0  0851               	movf	??_initialiseGPIO^(0+128),w
  3955  05E1  3AFF               	xorlw	255
  3956  05E2  00D2               	movwf	(??_initialiseGPIO+1)^(0+128)
  3957  05E3  0852               	movf	(??_initialiseGPIO+1)^(0+128),w
  3958  05E4  058D               	andwf	13,f	;volatile
  3959  05E5                     l304:
  3960  05E5  0008               	return
  3961  05E6                     __end_of_initialiseGPIO:
  3962                           
  3963                           	psect	text14
  3964  05E6                     __ptext14:	
  3965 ;; *************** function _initialiseADCPin *****************
  3966 ;; Defined at:
  3967 ;;		line 37 in file "ADC.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  gpioNumber      1    wreg     const enum E2798
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  3972 ;;  portNumber      1    4[BANK1 ] unsigned char 
  3973 ;;  portType        1    3[BANK1 ] unsigned char 
  3974 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, status,2, status,0
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3984 ;;      Params:         0       0       0       0       0       0
  3985 ;;      Locals:         0       0       4       0       0       0
  3986 ;;      Temps:          0       0       2       0       0       0
  3987 ;;      Totals:         0       0       6       0       0       0
  3988 ;;Total ram usage:        6 bytes
  3989 ;; Hardware stack levels used: 1
  3990 ;; Hardware stack levels required when called: 5
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_initialisePotentiometers
  3995 ;;		_initialiseController
  3996 ;;		_initialiseCurrentSensors
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000  05E6                     _initialiseADCPin:	
  4001                           ;psect for function _initialiseADCPin
  4002                           
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4006                           ;initialiseADCPin@gpioNumber stored from wreg
  4007  05E6  0021               	movlb	1	; select bank1
  4008  05E7  00D5               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4009  05E8                     l2146:
  4010                           
  4011                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4012  05E8  01D4               	clrf	initialiseADCPin@portNumber^(0+128)
  4013                           
  4014                           ;ADC.c: 40:     uint8_t portType = 0;
  4015  05E9  01D3               	clrf	initialiseADCPin@portType^(0+128)
  4016                           
  4017                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4018  05EA  01D2               	clrf	initialiseADCPin@gpioValid^(0+128)
  4019  05EB                     l2148:
  4020                           
  4021                           ;ADC.c: 43:     if(gpioNumber < 4){
  4022  05EB  3004               	movlw	4
  4023  05EC  0255               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4024  05ED  1803               	skipnc
  4025  05EE  2DF0               	goto	u1701
  4026  05EF  2DF1               	goto	u1700
  4027  05F0                     u1701:
  4028  05F0  2DF8               	goto	l2156
  4029  05F1                     u1700:
  4030  05F1                     l2150:
  4031                           
  4032                           ;ADC.c: 44:         portNumber = gpioNumber;
  4033  05F1  0855               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4034  05F2  00D0               	movwf	??_initialiseADCPin^(0+128)
  4035  05F3  0850               	movf	??_initialiseADCPin^(0+128),w
  4036  05F4  00D4               	movwf	initialiseADCPin@portNumber^(0+128)
  4037  05F5                     l2152:
  4038                           
  4039                           ;ADC.c: 45:         portType = 0;
  4040  05F5  01D3               	clrf	initialiseADCPin@portType^(0+128)
  4041  05F6                     l2154:
  4042                           
  4043                           ;ADC.c: 46:         gpioValid = 1;
  4044  05F6  01D2               	clrf	initialiseADCPin@gpioValid^(0+128)
  4045  05F7  0AD2               	incf	initialiseADCPin@gpioValid^(0+128),f
  4046  05F8                     l2156:
  4047                           
  4048                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4049  05F8  3009               	movlw	9
  4050  05F9  0255               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4051  05FA  1C03               	skipc
  4052  05FB  2DFD               	goto	u1711
  4053  05FC  2DFE               	goto	u1710
  4054  05FD                     u1711:
  4055  05FD  2E0D               	goto	l236
  4056  05FE                     u1710:
  4057  05FE                     l2158:
  4058  05FE  3010               	movlw	16
  4059  05FF  0255               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4060  0600  1803               	skipnc
  4061  0601  2E03               	goto	u1721
  4062  0602  2E04               	goto	u1720
  4063  0603                     u1721:
  4064  0603  2E0D               	goto	l236
  4065  0604                     u1720:
  4066  0604                     l2160:
  4067                           
  4068                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4069  0604  0855               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4070  0605  3EF8               	addlw	248
  4071  0606  00D0               	movwf	??_initialiseADCPin^(0+128)
  4072  0607  0850               	movf	??_initialiseADCPin^(0+128),w
  4073  0608  00D4               	movwf	initialiseADCPin@portNumber^(0+128)
  4074  0609                     l2162:
  4075                           
  4076                           ;ADC.c: 51:         portType = 1;
  4077  0609  01D3               	clrf	initialiseADCPin@portType^(0+128)
  4078  060A  0AD3               	incf	initialiseADCPin@portType^(0+128),f
  4079  060B                     l2164:
  4080                           
  4081                           ;ADC.c: 52:         gpioValid = 1;
  4082  060B  01D2               	clrf	initialiseADCPin@gpioValid^(0+128)
  4083  060C  0AD2               	incf	initialiseADCPin@gpioValid^(0+128),f
  4084  060D                     l236:	
  4085                           ;ADC.c: 53:     }
  4086                           
  4087                           
  4088                           ;ADC.c: 55:     if(gpioValid){
  4089  060D  0852               	movf	initialiseADCPin@gpioValid^(0+128),w
  4090  060E  1903               	btfsc	3,2
  4091  060F  2E11               	goto	u1731
  4092  0610  2E12               	goto	u1730
  4093  0611                     u1731:
  4094  0611  2E4B               	goto	l241
  4095  0612                     u1730:
  4096  0612                     l2166:
  4097                           
  4098                           ;ADC.c: 56:         if(portType == 0){
  4099  0612  0853               	movf	initialiseADCPin@portType^(0+128),w
  4100  0613  1D03               	btfss	3,2
  4101  0614  2E16               	goto	u1741
  4102  0615  2E17               	goto	u1740
  4103  0616                     u1741:
  4104  0616  2E2F               	goto	l2170
  4105  0617                     u1740:
  4106  0617                     l2168:
  4107                           
  4108                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4109  0617  3001               	movlw	1
  4110  0618  00D0               	movwf	??_initialiseADCPin^(0+128)
  4111  0619  0A54               	incf	initialiseADCPin@portNumber^(0+128),w
  4112  061A  2E1C               	goto	u1754
  4113  061B                     u1755:
  4114  061B  35D0               	lslf	??_initialiseADCPin^(0+128),f
  4115  061C                     u1754:
  4116  061C  0B89               	decfsz	9,f
  4117  061D  2E1B               	goto	u1755
  4118  061E  0850               	movf	??_initialiseADCPin^(0+128),w
  4119  061F  00D1               	movwf	(??_initialiseADCPin+1)^(0+128)
  4120  0620  0851               	movf	(??_initialiseADCPin+1)^(0+128),w
  4121  0621  048C               	iorwf	12,f	;volatile
  4122                           
  4123                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4124  0622  3001               	movlw	1
  4125  0623  00D0               	movwf	??_initialiseADCPin^(0+128)
  4126  0624  0A54               	incf	initialiseADCPin@portNumber^(0+128),w
  4127  0625  2E27               	goto	u1764
  4128  0626                     u1765:
  4129  0626  35D0               	lslf	??_initialiseADCPin^(0+128),f
  4130  0627                     u1764:
  4131  0627  0B89               	decfsz	9,f
  4132  0628  2E26               	goto	u1765
  4133  0629  0850               	movf	??_initialiseADCPin^(0+128),w
  4134  062A  00D1               	movwf	(??_initialiseADCPin+1)^(0+128)
  4135  062B  0851               	movf	(??_initialiseADCPin+1)^(0+128),w
  4136  062C  0023               	movlb	3	; select bank3
  4137  062D  048C               	iorwf	12,f	;volatile
  4138                           
  4139                           ;ADC.c: 59:         }
  4140  062E  2E4B               	goto	l241
  4141  062F                     l2170:
  4142  062F  0353               	decf	initialiseADCPin@portType^(0+128),w
  4143  0630  1D03               	btfss	3,2
  4144  0631  2E33               	goto	u1771
  4145  0632  2E34               	goto	u1770
  4146  0633                     u1771:
  4147  0633  2E4B               	goto	l241
  4148  0634                     u1770:
  4149  0634                     l2172:
  4150                           
  4151                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4152  0634  3001               	movlw	1
  4153  0635  00D0               	movwf	??_initialiseADCPin^(0+128)
  4154  0636  0A54               	incf	initialiseADCPin@portNumber^(0+128),w
  4155  0637  2E39               	goto	u1784
  4156  0638                     u1785:
  4157  0638  35D0               	lslf	??_initialiseADCPin^(0+128),f
  4158  0639                     u1784:
  4159  0639  0B89               	decfsz	9,f
  4160  063A  2E38               	goto	u1785
  4161  063B  0850               	movf	??_initialiseADCPin^(0+128),w
  4162  063C  00D1               	movwf	(??_initialiseADCPin+1)^(0+128)
  4163  063D  0851               	movf	(??_initialiseADCPin+1)^(0+128),w
  4164  063E  048D               	iorwf	13,f	;volatile
  4165                           
  4166                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4167  063F  3001               	movlw	1
  4168  0640  00D0               	movwf	??_initialiseADCPin^(0+128)
  4169  0641  0A54               	incf	initialiseADCPin@portNumber^(0+128),w
  4170  0642  2E44               	goto	u1794
  4171  0643                     u1795:
  4172  0643  35D0               	lslf	??_initialiseADCPin^(0+128),f
  4173  0644                     u1794:
  4174  0644  0B89               	decfsz	9,f
  4175  0645  2E43               	goto	u1795
  4176  0646  0850               	movf	??_initialiseADCPin^(0+128),w
  4177  0647  00D1               	movwf	(??_initialiseADCPin+1)^(0+128)
  4178  0648  0851               	movf	(??_initialiseADCPin+1)^(0+128),w
  4179  0649  0023               	movlb	3	; select bank3
  4180  064A  048D               	iorwf	13,f	;volatile
  4181  064B                     l241:
  4182  064B  0008               	return
  4183  064C                     __end_of_initialiseADCPin:
  4184                           
  4185                           	psect	text15
  4186  0BF7                     __ptext15:	
  4187 ;; *************** function _initialiseADCModule *****************
  4188 ;; Defined at:
  4189 ;;		line 14 in file "ADC.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4203 ;;      Params:         0       0       0       0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0
  4206 ;;      Totals:         0       0       0       0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 5
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_main
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217  0BF7                     _initialiseADCModule:	
  4218                           ;psect for function _initialiseADCModule
  4219                           
  4220  0BF7                     l2598:	
  4221                           ;incstack = 0
  4222                           ; Regs used in _initialiseADCModule: [wreg]
  4223                           
  4224                           
  4225                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4226  0BF7  3001               	movlw	1
  4227  0BF8  0021               	movlb	1	; select bank1
  4228  0BF9  009D               	movwf	29	;volatile
  4229                           
  4230                           ;ADC.c: 22:     ADCON1 = 0b10010000;
  4231  0BFA  3090               	movlw	144
  4232  0BFB  009E               	movwf	30	;volatile
  4233  0BFC                     l232:
  4234  0BFC  0008               	return
  4235  0BFD                     __end_of_initialiseADCModule:
  4236                           
  4237                           	psect	intentry
  4238  0004                     __pintentry:	
  4239 ;; *************** function _Tick490Hz *****************
  4240 ;; Defined at:
  4241 ;;		line 42 in file "main.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4255 ;;      Params:         0       0       0       0       0       0
  4256 ;;      Locals:         0       0       0       0       0       0
  4257 ;;      Temps:          0       1       0       0       0       0
  4258 ;;      Totals:         0       1       0       0       0       0
  4259 ;;Total ram usage:        1 bytes
  4260 ;; Hardware stack levels used: 1
  4261 ;; Hardware stack levels required when called: 4
  4262 ;; This function calls:
  4263 ;;		_controlRoutine
  4264 ;;		_currentTripMonitor
  4265 ;;		_readFilteredDutyPot
  4266 ;;		_readFilteredFreqPot
  4267 ;;		_readFilteredIL
  4268 ;;		_readFilteredVout
  4269 ;;		_runPotScaling
  4270 ;;		_setPWMDutyandPeriod
  4271 ;;		i1_writeGPIO
  4272 ;; This function is called by:
  4273 ;;		Interrupt level 1
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277  0004                     _Tick490Hz:
  4278                           
  4279                           ;incstack = 0
  4280  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4281                           
  4282                           ; Regs used in _Tick490Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4283  0005  3180               	pagesel	$
  4284  0006                     i1l2654:
  4285                           
  4286                           ;main.c: 53:         writeGPIO(pinRB4, 1);
  4287  0006  01F0               	clrf	i1writeGPIO@writeValue
  4288  0007  0AF0               	incf	i1writeGPIO@writeValue,f
  4289  0008  300C               	movlw	12
  4290  0009  3186  26AC  3180   	fcall	i1_writeGPIO
  4291                           
  4292                           ;main.c: 54:         currentTripMonitor();
  4293  000C  318C  24D7  3180   	fcall	_currentTripMonitor
  4294                           
  4295                           ;main.c: 55:         setPWMDutyandPeriod(setDuty, setPeriod);
  4296  000F  0020               	movlb	0	; select bank0
  4297  0010  0864               	movf	_setDuty+1,w
  4298  0011  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4299  0012  0863               	movf	_setDuty,w
  4300  0013  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4301  0014  086E               	movf	_setPeriod,w
  4302  0015  00DC               	movwf	??_Tick490Hz
  4303  0016  085C               	movf	??_Tick490Hz,w
  4304  0017  00F2               	movwf	setPWMDutyandPeriod@period
  4305  0018  318C  24FB  3180   	fcall	_setPWMDutyandPeriod
  4306  001B                     i1l2656:
  4307                           
  4308                           ;main.c: 58:         if(timerSlotHalf == 0){
  4309  001B  0020               	movlb	0	; select bank0
  4310  001C  0867               	movf	_timerSlotHalf,w	;volatile
  4311  001D  1D03               	btfss	3,2
  4312  001E  2820               	goto	u241_21
  4313  001F  2821               	goto	u241_20
  4314  0020                     u241_21:
  4315  0020  2829               	goto	i1l2662
  4316  0021                     u241_20:
  4317  0021                     i1l2658:
  4318                           
  4319                           ;main.c: 60:             controlRoutine();
  4320  0021  3184  24B7  3180   	fcall	_controlRoutine
  4321  0024                     i1l2660:
  4322                           
  4323                           ;main.c: 61:             writeGPIO(pinRB4, 0);
  4324  0024  01F0               	clrf	i1writeGPIO@writeValue
  4325  0025  300C               	movlw	12
  4326  0026  3186  26AC  3180   	fcall	i1_writeGPIO
  4327  0029                     i1l2662:
  4328                           
  4329                           ;main.c: 64:         if(timerSlotHalf == 1){
  4330  0029  0020               	movlb	0	; select bank0
  4331  002A  0367               	decf	_timerSlotHalf,w	;volatile
  4332  002B  1D03               	btfss	3,2
  4333  002C  282E               	goto	u242_21
  4334  002D  282F               	goto	u242_20
  4335  002E                     u242_21:
  4336  002E  2877               	goto	i1l2684
  4337  002F                     u242_20:
  4338  002F                     i1l2664:
  4339                           
  4340                           ;main.c: 66:             writeGPIO(pinRB5, 1);
  4341  002F  01F0               	clrf	i1writeGPIO@writeValue
  4342  0030  0AF0               	incf	i1writeGPIO@writeValue,f
  4343  0031  300D               	movlw	13
  4344  0032  3186  26AC  3180   	fcall	i1_writeGPIO
  4345  0035                     i1l2666:
  4346                           
  4347                           ;main.c: 67:             filteredIL = readFilteredIL();
  4348  0035  318E  2698  3180   	fcall	_readFilteredIL
  4349  0038  0871               	movf	?_readFilteredIL+1,w
  4350  0039  0021               	movlb	1	; select bank1
  4351  003A  00AF               	movwf	(_filteredIL+1)^(0+128)
  4352  003B  0870               	movf	?_readFilteredIL,w
  4353  003C  00AE               	movwf	_filteredIL^(0+128)
  4354  003D                     i1l2668:
  4355                           
  4356                           ;main.c: 69:             filteredVout = readFilteredVout();
  4357  003D  3187  270B  3180   	fcall	_readFilteredVout
  4358  0040  087B               	movf	?_readFilteredVout+1,w
  4359  0041  0020               	movlb	0	; select bank0
  4360  0042  00E0               	movwf	_filteredVout+1
  4361  0043  087A               	movf	?_readFilteredVout,w
  4362  0044  00DF               	movwf	_filteredVout
  4363  0045                     i1l2670:
  4364                           
  4365                           ;main.c: 72:             if(timerSlotQuarter == 0){
  4366  0045  0866               	movf	_timerSlotQuarter,w	;volatile
  4367  0046  1D03               	btfss	3,2
  4368  0047  2849               	goto	u243_21
  4369  0048  284A               	goto	u243_20
  4370  0049                     u243_21:
  4371  0049  284D               	goto	i1l2674
  4372  004A                     u243_20:
  4373  004A                     i1l2672:
  4374                           
  4375                           ;main.c: 74:                 runPotScaling();
  4376  004A  3183  2314  3180   	fcall	_runPotScaling
  4377  004D                     i1l2674:
  4378                           
  4379                           ;main.c: 77:             if(timerSlotQuarter == 1){
  4380  004D  0020               	movlb	0	; select bank0
  4381  004E  0366               	decf	_timerSlotQuarter,w	;volatile
  4382  004F  1D03               	btfss	3,2
  4383  0050  2852               	goto	u244_21
  4384  0051  2853               	goto	u244_20
  4385  0052                     u244_21:
  4386  0052  2863               	goto	i1l2678
  4387  0053                     u244_20:
  4388  0053                     i1l2676:
  4389                           
  4390                           ;main.c: 79:                 filteredDutyPot = readFilteredDutyPot();
  4391  0053  318F  27A5  3180   	fcall	_readFilteredDutyPot
  4392  0056  087B               	movf	?_readFilteredDutyPot+1,w
  4393  0057  0021               	movlb	1	; select bank1
  4394  0058  00AD               	movwf	(_filteredDutyPot+1)^(0+128)
  4395  0059  087A               	movf	?_readFilteredDutyPot,w
  4396  005A  00AC               	movwf	_filteredDutyPot^(0+128)
  4397                           
  4398                           ;main.c: 80:                 filteredFreqPot = readFilteredFreqPot();
  4399  005B  3187  2766  3180   	fcall	_readFilteredFreqPot
  4400  005E  087B               	movf	?_readFilteredFreqPot+1,w
  4401  005F  0020               	movlb	0	; select bank0
  4402  0060  00DE               	movwf	_filteredFreqPot+1
  4403  0061  087A               	movf	?_readFilteredFreqPot,w
  4404  0062  00DD               	movwf	_filteredFreqPot
  4405  0063                     i1l2678:
  4406                           
  4407                           ;main.c: 83:             timerSlotQuarter = ~timerSlotQuarter;
  4408  0063  0366               	decf	_timerSlotQuarter,w	;volatile
  4409  0064  1D03               	btfss	3,2
  4410  0065  2867               	goto	u245_21
  4411  0066  2869               	goto	u245_20
  4412  0067                     u245_21:
  4413  0067  3001               	movlw	1
  4414  0068  286A               	goto	u246_20
  4415  0069                     u245_20:
  4416  0069  3000               	movlw	0
  4417  006A                     u246_20:
  4418  006A  00DC               	movwf	??_Tick490Hz
  4419  006B  085C               	movf	??_Tick490Hz,w
  4420  006C  00E6               	movwf	_timerSlotQuarter	;volatile
  4421  006D                     i1l2680:
  4422                           
  4423                           ;main.c: 84:             writeGPIO(pinRB4, 0);
  4424  006D  01F0               	clrf	i1writeGPIO@writeValue
  4425  006E  300C               	movlw	12
  4426  006F  3186  26AC  3180   	fcall	i1_writeGPIO
  4427  0072                     i1l2682:
  4428                           
  4429                           ;main.c: 85:             writeGPIO(pinRB5, 0);
  4430  0072  01F0               	clrf	i1writeGPIO@writeValue
  4431  0073  300D               	movlw	13
  4432  0074  3186  26AC  3180   	fcall	i1_writeGPIO
  4433  0077                     i1l2684:
  4434                           
  4435                           ;main.c: 88:         timerSlotHalf = ~timerSlotHalf;
  4436  0077  0020               	movlb	0	; select bank0
  4437  0078  0367               	decf	_timerSlotHalf,w	;volatile
  4438  0079  1D03               	btfss	3,2
  4439  007A  287C               	goto	u247_21
  4440  007B  287E               	goto	u247_20
  4441  007C                     u247_21:
  4442  007C  3001               	movlw	1
  4443  007D  287F               	goto	u248_20
  4444  007E                     u247_20:
  4445  007E  3000               	movlw	0
  4446  007F                     u248_20:
  4447  007F  00DC               	movwf	??_Tick490Hz
  4448  0080  085C               	movf	??_Tick490Hz,w
  4449  0081  00E7               	movwf	_timerSlotHalf	;volatile
  4450  0082                     i1l2686:
  4451                           
  4452                           ;main.c: 89:         INTCONbits.TMR0IF = 0;
  4453  0082  110B               	bcf	11,2	;volatile
  4454  0083                     i1l108:
  4455  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4456  0084  0009               	retfie
  4457  0085                     __end_of_Tick490Hz:
  4458                           
  4459                           	psect	text17
  4460  0CFB                     __ptext17:	
  4461 ;; *************** function _setPWMDutyandPeriod *****************
  4462 ;; Defined at:
  4463 ;;		line 49 in file "PWM.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4466 ;;  period          1    2[COMMON] unsigned char 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4478 ;;      Params:         3       0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0
  4480 ;;      Temps:          2       0       0       0       0       0
  4481 ;;      Totals:         5       0       0       0       0       0
  4482 ;;Total ram usage:        5 bytes
  4483 ;; Hardware stack levels used: 1
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_Tick490Hz
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491  0CFB                     _setPWMDutyandPeriod:	
  4492                           ;psect for function _setPWMDutyandPeriod
  4493                           
  4494  0CFB                     i1l2326:	
  4495                           ;incstack = 0
  4496                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4497                           
  4498                           
  4499                           ;PWM.c: 50:     PR2 = period;
  4500  0CFB  0872               	movf	setPWMDutyandPeriod@period,w
  4501  0CFC  0020               	movlb	0	; select bank0
  4502  0CFD  009B               	movwf	27	;volatile
  4503  0CFE                     i1l2328:
  4504                           
  4505                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4506  0CFE  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4507  0CFF  00F4               	movwf	??_setPWMDutyandPeriod+1
  4508  0D00  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4509  0D01  00F3               	movwf	??_setPWMDutyandPeriod
  4510  0D02  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4511  0D03  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4512  0D04  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4513  0D05  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4514  0D06  0873               	movf	??_setPWMDutyandPeriod,w
  4515  0D07  0025               	movlb	5	; select bank5
  4516  0D08  0091               	movwf	17	;volatile
  4517  0D09                     i1l2330:
  4518                           
  4519                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4520  0D09  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4521  0D0A  3901               	andlw	1
  4522  0D0B  00F3               	movwf	??_setPWMDutyandPeriod
  4523  0D0C  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4524  0D0D  0813               	movf	19,w	;volatile
  4525  0D0E  0673               	xorwf	??_setPWMDutyandPeriod,w
  4526  0D0F  39EF               	andlw	-17
  4527  0D10  0673               	xorwf	??_setPWMDutyandPeriod,w
  4528  0D11  0093               	movwf	19	;volatile
  4529                           
  4530                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4531  0D12  3002               	movlw	2
  4532  0D13  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4533  0D14  00F3               	movwf	??_setPWMDutyandPeriod
  4534  0D15  3000               	movlw	0
  4535  0D16  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4536  0D17  00F4               	movwf	??_setPWMDutyandPeriod+1
  4537  0D18  3000               	movlw	0
  4538  0D19  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4539  0D1A  3002               	movlw	2
  4540  0D1B  1903               	skipnz
  4541  0D1C  0273               	subwf	??_setPWMDutyandPeriod,w
  4542  0D1D  1803               	skipnc
  4543  0D1E  2D20               	goto	u213_21
  4544  0D1F  2D23               	goto	u213_20
  4545  0D20                     u213_21:
  4546  0D20  0025               	movlb	5	; select bank5
  4547  0D21  1693               	bsf	19,5	;volatile
  4548  0D22  2D25               	goto	u214_24
  4549  0D23                     u213_20:
  4550  0D23  0025               	movlb	5	; select bank5
  4551  0D24  1293               	bcf	19,5	;volatile
  4552  0D25                     u214_24:
  4553  0D25                     i1l175:
  4554  0D25  0008               	return
  4555  0D26                     __end_of_setPWMDutyandPeriod:
  4556                           
  4557                           	psect	text18
  4558  0314                     __ptext18:	
  4559 ;; *************** function _runPotScaling *****************
  4560 ;; Defined at:
  4561 ;;		line 55 in file "Potentiometer.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4566 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0, pclath, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4576 ;;      Params:         0       0       0       0       0       0
  4577 ;;      Locals:         0       4       0       0       0       0
  4578 ;;      Temps:          0       8       0       0       0       0
  4579 ;;      Totals:         0      12       0       0       0       0
  4580 ;;Total ram usage:       12 bytes
  4581 ;; Hardware stack levels used: 1
  4582 ;; Hardware stack levels required when called: 1
  4583 ;; This function calls:
  4584 ;;		___lldiv
  4585 ;;		___lmul
  4586 ;;		___wmul
  4587 ;; This function is called by:
  4588 ;;		_Tick490Hz
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592  0314                     _runPotScaling:	
  4593                           ;psect for function _runPotScaling
  4594                           
  4595  0314                     i1l2414:	
  4596                           ;incstack = 0
  4597                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4598                           
  4599                           
  4600                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4601  0314  0020               	movlb	0	; select bank0
  4602  0315  036C               	decf	_currentState,w
  4603  0316  1D03               	btfss	3,2
  4604  0317  2B19               	goto	u224_21
  4605  0318  2B1A               	goto	u224_20
  4606  0319                     u224_21:
  4607  0319  2BF1               	goto	i1l377
  4608  031A                     u224_20:
  4609  031A                     i1l2416:
  4610                           
  4611                           ;Potentiometer.c: 58:         potSetCount++;
  4612  031A  3001               	movlw	1
  4613  031B  00A6               	movwf	??_runPotScaling
  4614  031C  0826               	movf	??_runPotScaling,w
  4615  031D  07E8               	addwf	_potSetCount,f
  4616                           
  4617                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4618  031E  3020               	movlw	32
  4619  031F  0668               	xorwf	_potSetCount,w
  4620  0320  1D03               	btfss	3,2
  4621  0321  2B23               	goto	u225_21
  4622  0322  2B24               	goto	u225_20
  4623  0323                     u225_21:
  4624  0323  2BF1               	goto	i1l377
  4625  0324                     u225_20:
  4626  0324                     i1l2418:
  4627                           
  4628                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 45) * (uint
      +                          32_t)(159u - 15u)) >> 10 ) + 15u;
  4629  0324  085D               	movf	_filteredFreqPot,w
  4630  0325  3ED3               	addlw	211
  4631  0326  00F0               	movwf	___lmul@multiplier
  4632  0327  30FF               	movlw	255
  4633  0328  3D5E               	addwfc	_filteredFreqPot+1,w
  4634  0329  00F1               	movwf	___lmul@multiplier+1
  4635  032A  01F2               	clrf	___lmul@multiplier+2
  4636  032B  01F3               	clrf	___lmul@multiplier+3
  4637  032C  3000               	movlw	0
  4638  032D  00F7               	movwf	___lmul@multiplicand+3
  4639  032E  3000               	movlw	0
  4640  032F  00F6               	movwf	___lmul@multiplicand+2
  4641  0330  3000               	movlw	0
  4642  0331  00F5               	movwf	___lmul@multiplicand+1
  4643  0332  3090               	movlw	144
  4644  0333  00F4               	movwf	___lmul@multiplicand
  4645  0334  318D  2553  3183   	fcall	___lmul
  4646  0337  0870               	movf	?___lmul,w
  4647  0338  0020               	movlb	0	; select bank0
  4648  0339  00A6               	movwf	??_runPotScaling
  4649  033A  0871               	movf	?___lmul+1,w
  4650  033B  00A7               	movwf	??_runPotScaling+1
  4651  033C  0872               	movf	?___lmul+2,w
  4652  033D  00A8               	movwf	??_runPotScaling+2
  4653  033E  0873               	movf	?___lmul+3,w
  4654  033F  00A9               	movwf	??_runPotScaling+3
  4655  0340  300A               	movlw	10
  4656  0341                     u226_25:
  4657  0341  36A9               	lsrf	??_runPotScaling+3,f
  4658  0342  0CA8               	rrf	??_runPotScaling+2,f
  4659  0343  0CA7               	rrf	??_runPotScaling+1,f
  4660  0344  0CA6               	rrf	??_runPotScaling,f
  4661  0345                     u226_20:
  4662  0345  0B89               	decfsz	9,f
  4663  0346  2B41               	goto	u226_25
  4664  0347  0826               	movf	??_runPotScaling,w
  4665  0348  3E0F               	addlw	15
  4666  0349  00AA               	movwf	??_runPotScaling+4
  4667  034A  082A               	movf	??_runPotScaling+4,w
  4668  034B  00EE               	movwf	_setPeriod
  4669                           
  4670                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-45) *
      +                           (uint32_t)setPeriod )) >> 8;
  4671  034C  0021               	movlb	1	; select bank1
  4672  034D  082C               	movf	_filteredDutyPot^(0+128),w
  4673  034E  3ED3               	addlw	211
  4674  034F  00F0               	movwf	___lmul@multiplier
  4675  0350  30FF               	movlw	255
  4676  0351  3D2D               	addwfc	(_filteredDutyPot+1)^(0+128),w
  4677  0352  00F1               	movwf	___lmul@multiplier+1
  4678  0353  01F2               	clrf	___lmul@multiplier+2
  4679  0354  01F3               	clrf	___lmul@multiplier+3
  4680  0355  0020               	movlb	0	; select bank0
  4681  0356  086E               	movf	_setPeriod,w
  4682  0357  00A6               	movwf	??_runPotScaling
  4683  0358  01A7               	clrf	??_runPotScaling+1
  4684  0359  01A8               	clrf	??_runPotScaling+2
  4685  035A  01A9               	clrf	??_runPotScaling+3
  4686  035B  0829               	movf	??_runPotScaling+3,w
  4687  035C  00F7               	movwf	___lmul@multiplicand+3
  4688  035D  0828               	movf	??_runPotScaling+2,w
  4689  035E  00F6               	movwf	___lmul@multiplicand+2
  4690  035F  0827               	movf	??_runPotScaling+1,w
  4691  0360  00F5               	movwf	___lmul@multiplicand+1
  4692  0361  0826               	movf	??_runPotScaling,w
  4693  0362  00F4               	movwf	___lmul@multiplicand
  4694  0363  318D  2553  3183   	fcall	___lmul
  4695  0366  0870               	movf	?___lmul,w
  4696  0367  0020               	movlb	0	; select bank0
  4697  0368  00AA               	movwf	??_runPotScaling+4
  4698  0369  0871               	movf	?___lmul+1,w
  4699  036A  00AB               	movwf	??_runPotScaling+5
  4700  036B  0872               	movf	?___lmul+2,w
  4701  036C  00AC               	movwf	??_runPotScaling+6
  4702  036D  0873               	movf	?___lmul+3,w
  4703  036E  00AD               	movwf	??_runPotScaling+7
  4704  036F  3008               	movlw	8
  4705  0370                     u227_25:
  4706  0370  36AD               	lsrf	??_runPotScaling+7,f
  4707  0371  0CAC               	rrf	??_runPotScaling+6,f
  4708  0372  0CAB               	rrf	??_runPotScaling+5,f
  4709  0373  0CAA               	rrf	??_runPotScaling+4,f
  4710  0374                     u227_20:
  4711  0374  0B89               	decfsz	9,f
  4712  0375  2B70               	goto	u227_25
  4713  0376  082B               	movf	??_runPotScaling+5,w
  4714  0377  00E4               	movwf	_setDuty+1
  4715  0378  082A               	movf	??_runPotScaling+4,w
  4716  0379  00E3               	movwf	_setDuty
  4717                           
  4718                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  4719  037A  3000               	movlw	0
  4720  037B  00F9               	movwf	___lldiv@divisor+3
  4721  037C  3000               	movlw	0
  4722  037D  00F8               	movwf	___lldiv@divisor+2
  4723  037E  3000               	movlw	0
  4724  037F  00F7               	movwf	___lldiv@divisor+1
  4725  0380  3019               	movlw	25
  4726  0381  00F6               	movwf	___lldiv@divisor
  4727  0382  305A               	movlw	90
  4728  0383  00F2               	movwf	___wmul@multiplicand
  4729  0384  3000               	movlw	0
  4730  0385  00F3               	movwf	___wmul@multiplicand+1
  4731  0386  086E               	movf	_setPeriod,w
  4732  0387  00A6               	movwf	??_runPotScaling
  4733  0388  01A7               	clrf	??_runPotScaling+1
  4734  0389  0826               	movf	??_runPotScaling,w
  4735  038A  00F0               	movwf	___wmul@multiplier
  4736  038B  0827               	movf	??_runPotScaling+1,w
  4737  038C  00F1               	movwf	___wmul@multiplier+1
  4738  038D  318C  2498  3183   	fcall	___wmul
  4739  0390  0870               	movf	?___wmul,w
  4740  0391  0020               	movlb	0	; select bank0
  4741  0392  00A8               	movwf	??_runPotScaling+2
  4742  0393  0871               	movf	?___wmul+1,w
  4743  0394  00A9               	movwf	??_runPotScaling+3
  4744  0395  01AA               	clrf	??_runPotScaling+4
  4745  0396  01AB               	clrf	??_runPotScaling+5
  4746  0397  082B               	movf	??_runPotScaling+5,w
  4747  0398  00FD               	movwf	___lldiv@dividend+3
  4748  0399  082A               	movf	??_runPotScaling+4,w
  4749  039A  00FC               	movwf	___lldiv@dividend+2
  4750  039B  0829               	movf	??_runPotScaling+3,w
  4751  039C  00FB               	movwf	___lldiv@dividend+1
  4752  039D  0828               	movf	??_runPotScaling+2,w
  4753  039E  00FA               	movwf	___lldiv@dividend
  4754  039F  318F  274A  3183   	fcall	___lldiv
  4755  03A2  0877               	movf	?___lldiv+1,w
  4756  03A3  0020               	movlb	0	; select bank0
  4757  03A4  00AF               	movwf	runPotScaling@maxDuty+1
  4758  03A5  0876               	movf	?___lldiv,w
  4759  03A6  00AE               	movwf	runPotScaling@maxDuty
  4760                           
  4761                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  4762  03A7  3000               	movlw	0
  4763  03A8  00F9               	movwf	___lldiv@divisor+3
  4764  03A9  3000               	movlw	0
  4765  03AA  00F8               	movwf	___lldiv@divisor+2
  4766  03AB  3000               	movlw	0
  4767  03AC  00F7               	movwf	___lldiv@divisor+1
  4768  03AD  3019               	movlw	25
  4769  03AE  00F6               	movwf	___lldiv@divisor
  4770  03AF  300A               	movlw	10
  4771  03B0  00F2               	movwf	___wmul@multiplicand
  4772  03B1  3000               	movlw	0
  4773  03B2  00F3               	movwf	___wmul@multiplicand+1
  4774  03B3  086E               	movf	_setPeriod,w
  4775  03B4  00A6               	movwf	??_runPotScaling
  4776  03B5  01A7               	clrf	??_runPotScaling+1
  4777  03B6  0826               	movf	??_runPotScaling,w
  4778  03B7  00F0               	movwf	___wmul@multiplier
  4779  03B8  0827               	movf	??_runPotScaling+1,w
  4780  03B9  00F1               	movwf	___wmul@multiplier+1
  4781  03BA  318C  2498  3183   	fcall	___wmul
  4782  03BD  0870               	movf	?___wmul,w
  4783  03BE  0020               	movlb	0	; select bank0
  4784  03BF  00A8               	movwf	??_runPotScaling+2
  4785  03C0  0871               	movf	?___wmul+1,w
  4786  03C1  00A9               	movwf	??_runPotScaling+3
  4787  03C2  01AA               	clrf	??_runPotScaling+4
  4788  03C3  01AB               	clrf	??_runPotScaling+5
  4789  03C4  082B               	movf	??_runPotScaling+5,w
  4790  03C5  00FD               	movwf	___lldiv@dividend+3
  4791  03C6  082A               	movf	??_runPotScaling+4,w
  4792  03C7  00FC               	movwf	___lldiv@dividend+2
  4793  03C8  0829               	movf	??_runPotScaling+3,w
  4794  03C9  00FB               	movwf	___lldiv@dividend+1
  4795  03CA  0828               	movf	??_runPotScaling+2,w
  4796  03CB  00FA               	movwf	___lldiv@dividend
  4797  03CC  318F  274A  3183   	fcall	___lldiv
  4798  03CF  0877               	movf	?___lldiv+1,w
  4799  03D0  0020               	movlb	0	; select bank0
  4800  03D1  00B1               	movwf	runPotScaling@minDuty+1
  4801  03D2  0876               	movf	?___lldiv,w
  4802  03D3  00B0               	movwf	runPotScaling@minDuty
  4803  03D4                     i1l2420:
  4804                           
  4805                           ;Potentiometer.c: 69:             if(setDuty > maxDuty) setDuty = maxDuty;
  4806  03D4  0864               	movf	_setDuty+1,w
  4807  03D5  022F               	subwf	runPotScaling@maxDuty+1,w
  4808  03D6  1D03               	skipz
  4809  03D7  2BDA               	goto	u228_25
  4810  03D8  0863               	movf	_setDuty,w
  4811  03D9  022E               	subwf	runPotScaling@maxDuty,w
  4812  03DA                     u228_25:
  4813  03DA  1803               	skipnc
  4814  03DB  2BDD               	goto	u228_21
  4815  03DC  2BDE               	goto	u228_20
  4816  03DD                     u228_21:
  4817  03DD  2BE2               	goto	i1l375
  4818  03DE                     u228_20:
  4819  03DE                     i1l2422:
  4820  03DE  082F               	movf	runPotScaling@maxDuty+1,w
  4821  03DF  00E4               	movwf	_setDuty+1
  4822  03E0  082E               	movf	runPotScaling@maxDuty,w
  4823  03E1  00E3               	movwf	_setDuty
  4824  03E2                     i1l375:
  4825                           
  4826                           ;Potentiometer.c: 70:             if(setDuty < minDuty) setDuty = minDuty;
  4827  03E2  0831               	movf	runPotScaling@minDuty+1,w
  4828  03E3  0264               	subwf	_setDuty+1,w
  4829  03E4  1D03               	skipz
  4830  03E5  2BE8               	goto	u229_25
  4831  03E6  0830               	movf	runPotScaling@minDuty,w
  4832  03E7  0263               	subwf	_setDuty,w
  4833  03E8                     u229_25:
  4834  03E8  1803               	skipnc
  4835  03E9  2BEB               	goto	u229_21
  4836  03EA  2BEC               	goto	u229_20
  4837  03EB                     u229_21:
  4838  03EB  2BF0               	goto	i1l2426
  4839  03EC                     u229_20:
  4840  03EC                     i1l2424:
  4841  03EC  0831               	movf	runPotScaling@minDuty+1,w
  4842  03ED  00E4               	movwf	_setDuty+1
  4843  03EE  0830               	movf	runPotScaling@minDuty,w
  4844  03EF  00E3               	movwf	_setDuty
  4845  03F0                     i1l2426:
  4846                           
  4847                           ;Potentiometer.c: 72:             potSetCount = 0;
  4848  03F0  01E8               	clrf	_potSetCount
  4849  03F1                     i1l377:
  4850  03F1  0008               	return
  4851  03F2                     __end_of_runPotScaling:
  4852                           
  4853                           	psect	text19
  4854  070B                     __ptext19:	
  4855 ;; *************** function _readFilteredVout *****************
  4856 ;; Defined at:
  4857 ;;		line 39 in file "Controller.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  i               1    8[BANK0 ] unsigned char 
  4862 ;;  i               1    9[BANK0 ] unsigned char 
  4863 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  2   10[COMMON] unsigned short 
  4866 ;; Registers used:
  4867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4873 ;;      Params:         2       0       0       0       0       0
  4874 ;;      Locals:         0       6       0       0       0       0
  4875 ;;      Temps:          0       4       0       0       0       0
  4876 ;;      Totals:         2      10       0       0       0       0
  4877 ;;Total ram usage:       12 bytes
  4878 ;; Hardware stack levels used: 1
  4879 ;; Hardware stack levels required when called: 1
  4880 ;; This function calls:
  4881 ;;		_readADCRaw
  4882 ;; This function is called by:
  4883 ;;		_Tick490Hz
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887  070B                     _readFilteredVout:	
  4888                           ;psect for function _readFilteredVout
  4889                           
  4890  070B                     i1l2382:	
  4891                           ;incstack = 0
  4892                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4893                           
  4894                           
  4895                           ;Controller.c: 40:     for(uint8_t i=0; i<16u -1; i++) voutFIFO[i] = voutFIFO[i+1];
  4896  070B  0020               	movlb	0	; select bank0
  4897  070C  01A9               	clrf	readFilteredVout@i
  4898  070D                     i1l2388:
  4899  070D  3529               	lslf	readFilteredVout@i,w
  4900  070E  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  4901  070F  0086               	movwf	6
  4902  0710  3001               	movlw	1	; select bank3/4
  4903  0711  0087               	movwf	7
  4904  0712  3529               	lslf	readFilteredVout@i,w
  4905  0713  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4906  0714  0084               	movwf	4
  4907  0715  3001               	movlw	1	; select bank3/4
  4908  0716  0085               	movwf	5
  4909  0717  3F40               	moviw [0]fsr1
  4910  0718  3F80               	movwi [0]fsr0
  4911  0719  3F41               	moviw [1]fsr1
  4912  071A  3F81               	movwi [1]fsr0
  4913  071B                     i1l2390:
  4914  071B  3001               	movlw	1
  4915  071C  00A0               	movwf	??_readFilteredVout
  4916  071D  0820               	movf	??_readFilteredVout,w
  4917  071E  07A9               	addwf	readFilteredVout@i,f
  4918  071F                     i1l2392:
  4919  071F  300F               	movlw	15
  4920  0720  0229               	subwf	readFilteredVout@i,w
  4921  0721  1C03               	skipc
  4922  0722  2F24               	goto	u221_21
  4923  0723  2F25               	goto	u221_20
  4924  0724                     u221_21:
  4925  0724  2F0D               	goto	i1l2388
  4926  0725                     u221_20:
  4927  0725                     i1l2394:
  4928                           
  4929                           ;Controller.c: 41:     voutFIFO[16u -1] = readADCRaw(pinRA4);
  4930  0725  3004               	movlw	4
  4931  0726  318E  26F0  3187   	fcall	_readADCRaw
  4932  0729  0871               	movf	?_readADCRaw+1,w
  4933  072A  0023               	movlb	3	; select bank3
  4934  072B  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  4935  072C  0870               	movf	?_readADCRaw,w
  4936  072D  00DE               	movwf	(_voutFIFO^(0+384)+30)
  4937  072E                     i1l2396:
  4938                           
  4939                           ;Controller.c: 42:     uint32_t sumOfSamples = 0;
  4940  072E  3000               	movlw	0
  4941  072F  0020               	movlb	0	; select bank0
  4942  0730  00A7               	movwf	readFilteredVout@sumOfSamples+3
  4943  0731  3000               	movlw	0
  4944  0732  00A6               	movwf	readFilteredVout@sumOfSamples+2
  4945  0733  3000               	movlw	0
  4946  0734  00A5               	movwf	readFilteredVout@sumOfSamples+1
  4947  0735  3000               	movlw	0
  4948  0736  00A4               	movwf	readFilteredVout@sumOfSamples
  4949  0737                     i1l2398:
  4950                           
  4951                           ;Controller.c: 43:     for(uint8_t i=0; i<16u; i++) sumOfSamples += voutFIFO[i];
  4952  0737  01A8               	clrf	readFilteredVout@i_831
  4953  0738                     i1l2404:
  4954  0738  3528               	lslf	readFilteredVout@i_831,w
  4955  0739  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  4956  073A  0086               	movwf	6
  4957  073B  3001               	movlw	1	; select bank3/4
  4958  073C  0087               	movwf	7
  4959  073D  3F40               	moviw [0]fsr1
  4960  073E  00A0               	movwf	??_readFilteredVout
  4961  073F  3F41               	moviw [1]fsr1
  4962  0740  00A1               	movwf	??_readFilteredVout+1
  4963  0741  0820               	movf	??_readFilteredVout,w
  4964  0742  07A4               	addwf	readFilteredVout@sumOfSamples,f
  4965  0743  0821               	movf	??_readFilteredVout+1,w
  4966  0744  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  4967  0745  3000               	movlw	0
  4968  0746  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  4969  0747  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  4970  0748                     i1l2406:
  4971  0748  3001               	movlw	1
  4972  0749  00A0               	movwf	??_readFilteredVout
  4973  074A  0820               	movf	??_readFilteredVout,w
  4974  074B  07A8               	addwf	readFilteredVout@i_831,f
  4975  074C                     i1l2408:
  4976  074C  3010               	movlw	16
  4977  074D  0228               	subwf	readFilteredVout@i_831,w
  4978  074E  1C03               	skipc
  4979  074F  2F51               	goto	u222_21
  4980  0750  2F52               	goto	u222_20
  4981  0751                     u222_21:
  4982  0751  2F38               	goto	i1l2404
  4983  0752                     u222_20:
  4984  0752                     i1l2410:
  4985                           
  4986                           ;Controller.c: 45:     return (sumOfSamples >> 4u);
  4987  0752  0824               	movf	readFilteredVout@sumOfSamples,w
  4988  0753  00A0               	movwf	??_readFilteredVout
  4989  0754  0825               	movf	readFilteredVout@sumOfSamples+1,w
  4990  0755  00A1               	movwf	??_readFilteredVout+1
  4991  0756  0826               	movf	readFilteredVout@sumOfSamples+2,w
  4992  0757  00A2               	movwf	??_readFilteredVout+2
  4993  0758  0827               	movf	readFilteredVout@sumOfSamples+3,w
  4994  0759  00A3               	movwf	??_readFilteredVout+3
  4995  075A  3004               	movlw	4
  4996  075B                     u223_25:
  4997  075B  36A3               	lsrf	??_readFilteredVout+3,f
  4998  075C  0CA2               	rrf	??_readFilteredVout+2,f
  4999  075D  0CA1               	rrf	??_readFilteredVout+1,f
  5000  075E  0CA0               	rrf	??_readFilteredVout,f
  5001  075F                     u223_20:
  5002  075F  0B89               	decfsz	9,f
  5003  0760  2F5B               	goto	u223_25
  5004  0761  0821               	movf	??_readFilteredVout+1,w
  5005  0762  00FB               	movwf	?_readFilteredVout+1
  5006  0763  0820               	movf	??_readFilteredVout,w
  5007  0764  00FA               	movwf	?_readFilteredVout
  5008  0765                     i1l435:
  5009  0765  0008               	return
  5010  0766                     __end_of_readFilteredVout:
  5011                           
  5012                           	psect	text20
  5013  0E98                     __ptext20:	
  5014 ;; *************** function _readFilteredIL *****************
  5015 ;; Defined at:
  5016 ;;		line 56 in file "CurrentSensor.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;  i               1   10[COMMON] unsigned char 
  5021 ;;  i               1   11[COMMON] unsigned char 
  5022 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2    0[COMMON] unsigned short 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5032 ;;      Params:         2       0       0       0       0       0
  5033 ;;      Locals:         6       0       0       0       0       0
  5034 ;;      Temps:          4       0       0       0       0       0
  5035 ;;      Totals:        12       0       0       0       0       0
  5036 ;;Total ram usage:       12 bytes
  5037 ;; Hardware stack levels used: 1
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_Tick490Hz
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045  0E98                     _readFilteredIL:	
  5046                           ;psect for function _readFilteredIL
  5047                           
  5048  0E98                     i1l2352:	
  5049                           ;incstack = 0
  5050                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5051                           
  5052                           
  5053                           ;CurrentSensor.c: 57:     for(uint8_t i=0; i<16u -1; i++) currentILFIFO[i] = currentILFI
      +                          FO[i+1];
  5054  0E98  01FB               	clrf	readFilteredIL@i
  5055  0E99                     i1l2358:
  5056  0E99  357B               	lslf	readFilteredIL@i,w
  5057  0E9A  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5058  0E9B  0086               	movwf	6
  5059  0E9C  3001               	movlw	1	; select bank2/3
  5060  0E9D  0087               	movwf	7
  5061  0E9E  357B               	lslf	readFilteredIL@i,w
  5062  0E9F  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5063  0EA0  0084               	movwf	4
  5064  0EA1  3001               	movlw	1	; select bank2/3
  5065  0EA2  0085               	movwf	5
  5066  0EA3  3F40               	moviw [0]fsr1
  5067  0EA4  3F80               	movwi [0]fsr0
  5068  0EA5  3F41               	moviw [1]fsr1
  5069  0EA6  3F81               	movwi [1]fsr0
  5070  0EA7                     i1l2360:
  5071  0EA7  3001               	movlw	1
  5072  0EA8  00F2               	movwf	??_readFilteredIL
  5073  0EA9  0872               	movf	??_readFilteredIL,w
  5074  0EAA  07FB               	addwf	readFilteredIL@i,f
  5075  0EAB                     i1l2362:
  5076  0EAB  300F               	movlw	15
  5077  0EAC  027B               	subwf	readFilteredIL@i,w
  5078  0EAD  1C03               	skipc
  5079  0EAE  2EB0               	goto	u218_21
  5080  0EAF  2EB1               	goto	u218_20
  5081  0EB0                     u218_21:
  5082  0EB0  2E99               	goto	i1l2358
  5083  0EB1                     u218_20:
  5084  0EB1                     i1l2364:
  5085                           
  5086                           ;CurrentSensor.c: 58:     currentILFIFO[16u -1] = latestIL;
  5087  0EB1  0020               	movlb	0	; select bank0
  5088  0EB2  0862               	movf	_latestIL+1,w	;volatile
  5089  0EB3  0022               	movlb	2	; select bank2
  5090  0EB4  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5091  0EB5  0020               	movlb	0	; select bank0
  5092  0EB6  0861               	movf	_latestIL,w	;volatile
  5093  0EB7  0022               	movlb	2	; select bank2
  5094  0EB8  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5095                           
  5096                           ;CurrentSensor.c: 59:     uint32_t sumOfSamples = 0;
  5097  0EB9  3000               	movlw	0
  5098  0EBA  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5099  0EBB  3000               	movlw	0
  5100  0EBC  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5101  0EBD  3000               	movlw	0
  5102  0EBE  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5103  0EBF  3000               	movlw	0
  5104  0EC0  00F6               	movwf	readFilteredIL@sumOfSamples
  5105  0EC1                     i1l2366:
  5106                           
  5107                           ;CurrentSensor.c: 60:     for(uint8_t i=0; i<16u; i++) sumOfSamples += currentILFIFO[i];
  5108  0EC1  01FA               	clrf	readFilteredIL@i_920
  5109  0EC2                     i1l2372:
  5110  0EC2  357A               	lslf	readFilteredIL@i_920,w
  5111  0EC3  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5112  0EC4  0086               	movwf	6
  5113  0EC5  3001               	movlw	1	; select bank2/3
  5114  0EC6  0087               	movwf	7
  5115  0EC7  3F40               	moviw [0]fsr1
  5116  0EC8  00F2               	movwf	??_readFilteredIL
  5117  0EC9  3F41               	moviw [1]fsr1
  5118  0ECA  00F3               	movwf	??_readFilteredIL+1
  5119  0ECB  0872               	movf	??_readFilteredIL,w
  5120  0ECC  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5121  0ECD  0873               	movf	??_readFilteredIL+1,w
  5122  0ECE  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5123  0ECF  3000               	movlw	0
  5124  0ED0  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5125  0ED1  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5126  0ED2                     i1l2374:
  5127  0ED2  3001               	movlw	1
  5128  0ED3  00F2               	movwf	??_readFilteredIL
  5129  0ED4  0872               	movf	??_readFilteredIL,w
  5130  0ED5  07FA               	addwf	readFilteredIL@i_920,f
  5131  0ED6                     i1l2376:
  5132  0ED6  3010               	movlw	16
  5133  0ED7  027A               	subwf	readFilteredIL@i_920,w
  5134  0ED8  1C03               	skipc
  5135  0ED9  2EDB               	goto	u219_21
  5136  0EDA  2EDC               	goto	u219_20
  5137  0EDB                     u219_21:
  5138  0EDB  2EC2               	goto	i1l2372
  5139  0EDC                     u219_20:
  5140  0EDC                     i1l2378:
  5141                           
  5142                           ;CurrentSensor.c: 62:     return (sumOfSamples >> 4u);
  5143  0EDC  0876               	movf	readFilteredIL@sumOfSamples,w
  5144  0EDD  00F2               	movwf	??_readFilteredIL
  5145  0EDE  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5146  0EDF  00F3               	movwf	??_readFilteredIL+1
  5147  0EE0  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5148  0EE1  00F4               	movwf	??_readFilteredIL+2
  5149  0EE2  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5150  0EE3  00F5               	movwf	??_readFilteredIL+3
  5151  0EE4  3004               	movlw	4
  5152  0EE5                     u220_25:
  5153  0EE5  36F5               	lsrf	??_readFilteredIL+3,f
  5154  0EE6  0CF4               	rrf	??_readFilteredIL+2,f
  5155  0EE7  0CF3               	rrf	??_readFilteredIL+1,f
  5156  0EE8  0CF2               	rrf	??_readFilteredIL,f
  5157  0EE9                     u220_20:
  5158  0EE9  0B89               	decfsz	9,f
  5159  0EEA  2EE5               	goto	u220_25
  5160  0EEB  0873               	movf	??_readFilteredIL+1,w
  5161  0EEC  00F1               	movwf	?_readFilteredIL+1
  5162  0EED  0872               	movf	??_readFilteredIL,w
  5163  0EEE  00F0               	movwf	?_readFilteredIL
  5164  0EEF                     i1l523:
  5165  0EEF  0008               	return
  5166  0EF0                     __end_of_readFilteredIL:
  5167                           
  5168                           	psect	text21
  5169  0766                     __ptext21:	
  5170 ;; *************** function _readFilteredFreqPot *****************
  5171 ;; Defined at:
  5172 ;;		line 39 in file "Potentiometer.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  i               1    8[BANK0 ] unsigned char 
  5177 ;;  i               1    9[BANK0 ] unsigned char 
  5178 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  2   10[COMMON] unsigned short 
  5181 ;; Registers used:
  5182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5188 ;;      Params:         2       0       0       0       0       0
  5189 ;;      Locals:         0       6       0       0       0       0
  5190 ;;      Temps:          0       4       0       0       0       0
  5191 ;;      Totals:         2      10       0       0       0       0
  5192 ;;Total ram usage:       12 bytes
  5193 ;; Hardware stack levels used: 1
  5194 ;; Hardware stack levels required when called: 1
  5195 ;; This function calls:
  5196 ;;		_readADCRaw
  5197 ;; This function is called by:
  5198 ;;		_Tick490Hz
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202  0766                     _readFilteredFreqPot:	
  5203                           ;psect for function _readFilteredFreqPot
  5204                           
  5205  0766                     i1l2460:	
  5206                           ;incstack = 0
  5207                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5208                           
  5209                           
  5210                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5211  0766  0020               	movlb	0	; select bank0
  5212  0767  01A9               	clrf	readFilteredFreqPot@i
  5213  0768                     i1l2466:
  5214  0768  3529               	lslf	readFilteredFreqPot@i,w
  5215  0769  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5216  076A  0086               	movwf	6
  5217  076B  3001               	movlw	1	; select bank3/4
  5218  076C  0087               	movwf	7
  5219  076D  3529               	lslf	readFilteredFreqPot@i,w
  5220  076E  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5221  076F  0084               	movwf	4
  5222  0770  3001               	movlw	1	; select bank3/4
  5223  0771  0085               	movwf	5
  5224  0772  3F40               	moviw [0]fsr1
  5225  0773  3F80               	movwi [0]fsr0
  5226  0774  3F41               	moviw [1]fsr1
  5227  0775  3F81               	movwi [1]fsr0
  5228  0776                     i1l2468:
  5229  0776  3001               	movlw	1
  5230  0777  00A0               	movwf	??_readFilteredFreqPot
  5231  0778  0820               	movf	??_readFilteredFreqPot,w
  5232  0779  07A9               	addwf	readFilteredFreqPot@i,f
  5233  077A                     i1l2470:
  5234  077A  300F               	movlw	15
  5235  077B  0229               	subwf	readFilteredFreqPot@i,w
  5236  077C  1C03               	skipc
  5237  077D  2F7F               	goto	u233_21
  5238  077E  2F80               	goto	u233_20
  5239  077F                     u233_21:
  5240  077F  2F68               	goto	i1l2466
  5241  0780                     u233_20:
  5242  0780                     i1l2472:
  5243                           
  5244                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5245  0780  300A               	movlw	10
  5246  0781  318E  26F0  3187   	fcall	_readADCRaw
  5247  0784  0871               	movf	?_readADCRaw+1,w
  5248  0785  0023               	movlb	3	; select bank3
  5249  0786  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5250  0787  0870               	movf	?_readADCRaw,w
  5251  0788  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5252  0789                     i1l2474:
  5253                           
  5254                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5255  0789  3000               	movlw	0
  5256  078A  0020               	movlb	0	; select bank0
  5257  078B  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5258  078C  3000               	movlw	0
  5259  078D  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5260  078E  3000               	movlw	0
  5261  078F  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5262  0790  3000               	movlw	0
  5263  0791  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5264  0792                     i1l2476:
  5265                           
  5266                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5267  0792  01A8               	clrf	readFilteredFreqPot@i_754
  5268  0793                     i1l2482:
  5269  0793  3528               	lslf	readFilteredFreqPot@i_754,w
  5270  0794  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5271  0795  0086               	movwf	6
  5272  0796  3001               	movlw	1	; select bank3/4
  5273  0797  0087               	movwf	7
  5274  0798  3F40               	moviw [0]fsr1
  5275  0799  00A0               	movwf	??_readFilteredFreqPot
  5276  079A  3F41               	moviw [1]fsr1
  5277  079B  00A1               	movwf	??_readFilteredFreqPot+1
  5278  079C  0820               	movf	??_readFilteredFreqPot,w
  5279  079D  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5280  079E  0821               	movf	??_readFilteredFreqPot+1,w
  5281  079F  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5282  07A0  3000               	movlw	0
  5283  07A1  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5284  07A2  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5285  07A3                     i1l2484:
  5286  07A3  3001               	movlw	1
  5287  07A4  00A0               	movwf	??_readFilteredFreqPot
  5288  07A5  0820               	movf	??_readFilteredFreqPot,w
  5289  07A6  07A8               	addwf	readFilteredFreqPot@i_754,f
  5290  07A7                     i1l2486:
  5291  07A7  3010               	movlw	16
  5292  07A8  0228               	subwf	readFilteredFreqPot@i_754,w
  5293  07A9  1C03               	skipc
  5294  07AA  2FAC               	goto	u234_21
  5295  07AB  2FAD               	goto	u234_20
  5296  07AC                     u234_21:
  5297  07AC  2F93               	goto	i1l2482
  5298  07AD                     u234_20:
  5299  07AD                     i1l2488:
  5300                           
  5301                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4u);
  5302  07AD  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5303  07AE  00A0               	movwf	??_readFilteredFreqPot
  5304  07AF  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5305  07B0  00A1               	movwf	??_readFilteredFreqPot+1
  5306  07B1  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5307  07B2  00A2               	movwf	??_readFilteredFreqPot+2
  5308  07B3  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5309  07B4  00A3               	movwf	??_readFilteredFreqPot+3
  5310  07B5  3004               	movlw	4
  5311  07B6                     u235_25:
  5312  07B6  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5313  07B7  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5314  07B8  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5315  07B9  0CA0               	rrf	??_readFilteredFreqPot,f
  5316  07BA                     u235_20:
  5317  07BA  0B89               	decfsz	9,f
  5318  07BB  2FB6               	goto	u235_25
  5319  07BC  0821               	movf	??_readFilteredFreqPot+1,w
  5320  07BD  00FB               	movwf	?_readFilteredFreqPot+1
  5321  07BE  0820               	movf	??_readFilteredFreqPot,w
  5322  07BF  00FA               	movwf	?_readFilteredFreqPot
  5323  07C0                     i1l370:
  5324  07C0  0008               	return
  5325  07C1                     __end_of_readFilteredFreqPot:
  5326                           
  5327                           	psect	text22
  5328  0FA5                     __ptext22:	
  5329 ;; *************** function _readFilteredDutyPot *****************
  5330 ;; Defined at:
  5331 ;;		line 25 in file "Potentiometer.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  i               1    8[BANK0 ] unsigned char 
  5336 ;;  i               1    9[BANK0 ] unsigned char 
  5337 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  2   10[COMMON] unsigned short 
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5347 ;;      Params:         2       0       0       0       0       0
  5348 ;;      Locals:         0       6       0       0       0       0
  5349 ;;      Temps:          0       4       0       0       0       0
  5350 ;;      Totals:         2      10       0       0       0       0
  5351 ;;Total ram usage:       12 bytes
  5352 ;; Hardware stack levels used: 1
  5353 ;; Hardware stack levels required when called: 1
  5354 ;; This function calls:
  5355 ;;		_readADCRaw
  5356 ;; This function is called by:
  5357 ;;		_Tick490Hz
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361  0FA5                     _readFilteredDutyPot:	
  5362                           ;psect for function _readFilteredDutyPot
  5363                           
  5364  0FA5                     i1l2428:	
  5365                           ;incstack = 0
  5366                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5367                           
  5368                           
  5369                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5370  0FA5  0020               	movlb	0	; select bank0
  5371  0FA6  01A9               	clrf	readFilteredDutyPot@i
  5372  0FA7                     i1l2434:
  5373  0FA7  3529               	lslf	readFilteredDutyPot@i,w
  5374  0FA8  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5375  0FA9  0086               	movwf	6
  5376  0FAA  3002               	movlw	2	; select bank4/5
  5377  0FAB  0087               	movwf	7
  5378  0FAC  3529               	lslf	readFilteredDutyPot@i,w
  5379  0FAD  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5380  0FAE  0084               	movwf	4
  5381  0FAF  3002               	movlw	2	; select bank4/5
  5382  0FB0  0085               	movwf	5
  5383  0FB1  3F40               	moviw [0]fsr1
  5384  0FB2  3F80               	movwi [0]fsr0
  5385  0FB3  3F41               	moviw [1]fsr1
  5386  0FB4  3F81               	movwi [1]fsr0
  5387  0FB5                     i1l2436:
  5388  0FB5  3001               	movlw	1
  5389  0FB6  00A0               	movwf	??_readFilteredDutyPot
  5390  0FB7  0820               	movf	??_readFilteredDutyPot,w
  5391  0FB8  07A9               	addwf	readFilteredDutyPot@i,f
  5392  0FB9                     i1l2438:
  5393  0FB9  300F               	movlw	15
  5394  0FBA  0229               	subwf	readFilteredDutyPot@i,w
  5395  0FBB  1C03               	skipc
  5396  0FBC  2FBE               	goto	u230_21
  5397  0FBD  2FBF               	goto	u230_20
  5398  0FBE                     u230_21:
  5399  0FBE  2FA7               	goto	i1l2434
  5400  0FBF                     u230_20:
  5401  0FBF                     i1l2440:
  5402                           
  5403                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5404  0FBF  3009               	movlw	9
  5405  0FC0  318E  26F0  318F   	fcall	_readADCRaw
  5406  0FC3  0871               	movf	?_readADCRaw+1,w
  5407  0FC4  0024               	movlb	4	; select bank4
  5408  0FC5  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5409  0FC6  0870               	movf	?_readADCRaw,w
  5410  0FC7  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5411  0FC8                     i1l2442:
  5412                           
  5413                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5414  0FC8  3000               	movlw	0
  5415  0FC9  0020               	movlb	0	; select bank0
  5416  0FCA  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5417  0FCB  3000               	movlw	0
  5418  0FCC  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5419  0FCD  3000               	movlw	0
  5420  0FCE  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5421  0FCF  3000               	movlw	0
  5422  0FD0  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5423  0FD1                     i1l2444:
  5424                           
  5425                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5426  0FD1  01A8               	clrf	readFilteredDutyPot@i_750
  5427  0FD2                     i1l2450:
  5428  0FD2  3528               	lslf	readFilteredDutyPot@i_750,w
  5429  0FD3  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5430  0FD4  0086               	movwf	6
  5431  0FD5  3002               	movlw	2	; select bank4/5
  5432  0FD6  0087               	movwf	7
  5433  0FD7  3F40               	moviw [0]fsr1
  5434  0FD8  00A0               	movwf	??_readFilteredDutyPot
  5435  0FD9  3F41               	moviw [1]fsr1
  5436  0FDA  00A1               	movwf	??_readFilteredDutyPot+1
  5437  0FDB  0820               	movf	??_readFilteredDutyPot,w
  5438  0FDC  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5439  0FDD  0821               	movf	??_readFilteredDutyPot+1,w
  5440  0FDE  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5441  0FDF  3000               	movlw	0
  5442  0FE0  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5443  0FE1  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5444  0FE2                     i1l2452:
  5445  0FE2  3001               	movlw	1
  5446  0FE3  00A0               	movwf	??_readFilteredDutyPot
  5447  0FE4  0820               	movf	??_readFilteredDutyPot,w
  5448  0FE5  07A8               	addwf	readFilteredDutyPot@i_750,f
  5449  0FE6                     i1l2454:
  5450  0FE6  3010               	movlw	16
  5451  0FE7  0228               	subwf	readFilteredDutyPot@i_750,w
  5452  0FE8  1C03               	skipc
  5453  0FE9  2FEB               	goto	u231_21
  5454  0FEA  2FEC               	goto	u231_20
  5455  0FEB                     u231_21:
  5456  0FEB  2FD2               	goto	i1l2450
  5457  0FEC                     u231_20:
  5458  0FEC                     i1l2456:
  5459                           
  5460                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4u);
  5461  0FEC  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5462  0FED  00A0               	movwf	??_readFilteredDutyPot
  5463  0FEE  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5464  0FEF  00A1               	movwf	??_readFilteredDutyPot+1
  5465  0FF0  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5466  0FF1  00A2               	movwf	??_readFilteredDutyPot+2
  5467  0FF2  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5468  0FF3  00A3               	movwf	??_readFilteredDutyPot+3
  5469  0FF4  3004               	movlw	4
  5470  0FF5                     u232_25:
  5471  0FF5  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5472  0FF6  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5473  0FF7  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5474  0FF8  0CA0               	rrf	??_readFilteredDutyPot,f
  5475  0FF9                     u232_20:
  5476  0FF9  0B89               	decfsz	9,f
  5477  0FFA  2FF5               	goto	u232_25
  5478  0FFB  0821               	movf	??_readFilteredDutyPot+1,w
  5479  0FFC  00FB               	movwf	?_readFilteredDutyPot+1
  5480  0FFD  0820               	movf	??_readFilteredDutyPot,w
  5481  0FFE  00FA               	movwf	?_readFilteredDutyPot
  5482  0FFF                     i1l363:
  5483  0FFF  0008               	return
  5484  1000                     __end_of_readFilteredDutyPot:
  5485                           
  5486                           	psect	text23
  5487  0EF0                     __ptext23:	
  5488 ;; *************** function _readADCRaw *****************
  5489 ;; Defined at:
  5490 ;;		line 71 in file "ADC.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  gpioNumber      1    wreg     const enum E2798
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  gpioNumber      1    9[COMMON] const enum E2798
  5495 ;;  i               1    8[COMMON] unsigned char 
  5496 ;;  returnValue     2    4[COMMON] unsigned int 
  5497 ;;  gpioValid       1    7[COMMON] unsigned char 
  5498 ;;  channel         1    6[COMMON] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  2    0[COMMON] unsigned short 
  5501 ;; Registers used:
  5502 ;;		wreg, status,2, status,0
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5508 ;;      Params:         2       0       0       0       0       0
  5509 ;;      Locals:         6       0       0       0       0       0
  5510 ;;      Temps:          2       0       0       0       0       0
  5511 ;;      Totals:        10       0       0       0       0       0
  5512 ;;Total ram usage:       10 bytes
  5513 ;; Hardware stack levels used: 1
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_readFilteredDutyPot
  5518 ;;		_readFilteredFreqPot
  5519 ;;		_readFilteredVout
  5520 ;;		_readFilteredIDS
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524  0EF0                     _readADCRaw:	
  5525                           ;psect for function _readADCRaw
  5526                           
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5530                           ;readADCRaw@gpioNumber stored from wreg
  5531  0EF0  00F9               	movwf	readADCRaw@gpioNumber
  5532  0EF1                     i1l2174:
  5533                           
  5534                           ;ADC.c: 72:     uint8_t channel = 0;
  5535  0EF1  01F6               	clrf	readADCRaw@channel
  5536                           
  5537                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5538  0EF2  01F7               	clrf	readADCRaw@gpioValid
  5539  0EF3                     i1l2176:
  5540                           
  5541                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5542  0EF3  3005               	movlw	5
  5543  0EF4  0279               	subwf	readADCRaw@gpioNumber,w
  5544  0EF5  1803               	skipnc
  5545  0EF6  2EF8               	goto	u180_21
  5546  0EF7  2EF9               	goto	u180_20
  5547  0EF8                     u180_21:
  5548  0EF8  2EFF               	goto	i1l244
  5549  0EF9                     u180_20:
  5550  0EF9                     i1l2178:
  5551                           
  5552                           ;ADC.c: 76:         channel = gpioNumber;
  5553  0EF9  0879               	movf	readADCRaw@gpioNumber,w
  5554  0EFA  00F2               	movwf	??_readADCRaw
  5555  0EFB  0872               	movf	??_readADCRaw,w
  5556  0EFC  00F6               	movwf	readADCRaw@channel
  5557  0EFD                     i1l2180:
  5558                           
  5559                           ;ADC.c: 77:         gpioValid = 1;
  5560  0EFD  01F7               	clrf	readADCRaw@gpioValid
  5561  0EFE  0AF7               	incf	readADCRaw@gpioValid,f
  5562  0EFF                     i1l244:	
  5563                           ;ADC.c: 78:     }
  5564                           
  5565                           
  5566                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  5567  0EFF  3009               	movlw	9
  5568  0F00  0279               	subwf	readADCRaw@gpioNumber,w
  5569  0F01  1C03               	skipc
  5570  0F02  2F04               	goto	u181_21
  5571  0F03  2F05               	goto	u181_20
  5572  0F04                     u181_21:
  5573  0F04  2F12               	goto	i1l245
  5574  0F05                     u181_20:
  5575  0F05                     i1l2182:
  5576  0F05  3010               	movlw	16
  5577  0F06  0279               	subwf	readADCRaw@gpioNumber,w
  5578  0F07  1803               	skipnc
  5579  0F08  2F0A               	goto	u182_21
  5580  0F09  2F0B               	goto	u182_20
  5581  0F0A                     u182_21:
  5582  0F0A  2F12               	goto	i1l245
  5583  0F0B                     u182_20:
  5584  0F0B                     i1l2184:
  5585                           
  5586                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  5587  0F0B  0879               	movf	readADCRaw@gpioNumber,w
  5588  0F0C  3C14               	sublw	20
  5589  0F0D  00F2               	movwf	??_readADCRaw
  5590  0F0E  0872               	movf	??_readADCRaw,w
  5591  0F0F  00F6               	movwf	readADCRaw@channel
  5592  0F10                     i1l2186:
  5593                           
  5594                           ;ADC.c: 81:         gpioValid = 1;
  5595  0F10  01F7               	clrf	readADCRaw@gpioValid
  5596  0F11  0AF7               	incf	readADCRaw@gpioValid,f
  5597  0F12                     i1l245:	
  5598                           ;ADC.c: 82:     }
  5599                           
  5600                           
  5601                           ;ADC.c: 83:     if(gpioValid){
  5602  0F12  0877               	movf	readADCRaw@gpioValid,w
  5603  0F13  1903               	btfsc	3,2
  5604  0F14  2F16               	goto	u183_21
  5605  0F15  2F17               	goto	u183_20
  5606  0F16                     u183_21:
  5607  0F16  2F47               	goto	i1l2214
  5608  0F17                     u183_20:
  5609  0F17                     i1l2188:
  5610                           
  5611                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  5612  0F17  0021               	movlb	1	; select bank1
  5613  0F18  081D               	movf	29,w	;volatile
  5614  0F19                     i1l2190:
  5615                           
  5616                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  5617  0F19  3083               	movlw	131
  5618  0F1A  00F2               	movwf	??_readADCRaw
  5619  0F1B  0872               	movf	??_readADCRaw,w
  5620  0F1C  059D               	andwf	29,f	;volatile
  5621  0F1D                     i1l2192:
  5622                           
  5623                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  5624  0F1D  0876               	movf	readADCRaw@channel,w	;volatile
  5625  0F1E  00F2               	movwf	??_readADCRaw
  5626  0F1F  3001               	movlw	1
  5627  0F20                     u184_25:
  5628  0F20  35F2               	lslf	??_readADCRaw,f
  5629  0F21  3EFF               	addlw	-1
  5630  0F22  1D03               	skipz
  5631  0F23  2F20               	goto	u184_25
  5632  0F24  3572               	lslf	??_readADCRaw,w
  5633  0F25  00F3               	movwf	??_readADCRaw+1
  5634  0F26  0873               	movf	??_readADCRaw+1,w
  5635  0F27  049D               	iorwf	29,f	;volatile
  5636  0F28                     i1l2194:
  5637                           
  5638                           ;ADC.c: 88:             for(uint8_t i = 0; i < 16; i++);
  5639  0F28  01F8               	clrf	readADCRaw@i
  5640  0F29                     i1l2200:
  5641  0F29  3001               	movlw	1
  5642  0F2A  00F2               	movwf	??_readADCRaw
  5643  0F2B  0872               	movf	??_readADCRaw,w
  5644  0F2C  07F8               	addwf	readADCRaw@i,f
  5645  0F2D                     i1l2202:
  5646  0F2D  3010               	movlw	16
  5647  0F2E  0278               	subwf	readADCRaw@i,w
  5648  0F2F  1C03               	skipc
  5649  0F30  2F32               	goto	u185_21
  5650  0F31  2F33               	goto	u185_20
  5651  0F32                     u185_21:
  5652  0F32  2F29               	goto	i1l2200
  5653  0F33                     u185_20:
  5654  0F33                     i1l249:
  5655                           
  5656                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  5657  0F33  0021               	movlb	1	; select bank1
  5658  0F34  149D               	bsf	29,1	;volatile
  5659  0F35                     i1l250:	
  5660                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  5661                           
  5662  0F35  189D               	btfsc	29,1	;volatile
  5663  0F36  2F38               	goto	u186_21
  5664  0F37  2F39               	goto	u186_20
  5665  0F38                     u186_21:
  5666  0F38  2F35               	goto	i1l250
  5667  0F39                     u186_20:
  5668  0F39                     i1l2204:
  5669                           
  5670                           ;ADC.c: 93:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  5671  0F39  081C               	movf	28,w	;volatile
  5672  0F3A  00F5               	movwf	readADCRaw@returnValue+1
  5673  0F3B  081B               	movf	27,w	;volatile
  5674  0F3C  00F4               	movwf	readADCRaw@returnValue
  5675  0F3D                     i1l2206:
  5676                           
  5677                           ;ADC.c: 94:             ADCON0 &= ~(0b01111100);
  5678  0F3D  3083               	movlw	131
  5679  0F3E  00F2               	movwf	??_readADCRaw
  5680  0F3F  0872               	movf	??_readADCRaw,w
  5681  0F40  059D               	andwf	29,f	;volatile
  5682  0F41                     i1l2208:
  5683                           
  5684                           ;ADC.c: 95:             ADCON0 |= (0b010 << 2);
  5685  0F41  159D               	bsf	29,3	;volatile
  5686  0F42                     i1l2210:
  5687                           
  5688                           ;ADC.c: 98:             return returnValue;
  5689  0F42  0875               	movf	readADCRaw@returnValue+1,w
  5690  0F43  00F1               	movwf	?_readADCRaw+1
  5691  0F44  0874               	movf	readADCRaw@returnValue,w
  5692  0F45  00F0               	movwf	?_readADCRaw
  5693  0F46  2F49               	goto	i1l253
  5694  0F47                     i1l2214:
  5695  0F47  01F0               	clrf	?_readADCRaw
  5696  0F48  01F1               	clrf	?_readADCRaw+1
  5697  0F49                     i1l253:
  5698  0F49  0008               	return
  5699  0F4A                     __end_of_readADCRaw:
  5700                           
  5701                           	psect	text24
  5702  0CD7                     __ptext24:	
  5703 ;; *************** function _currentTripMonitor *****************
  5704 ;; Defined at:
  5705 ;;		line 94 in file "CurrentSensor.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;		None
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2    4[None  ] int 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0, pclath, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5719 ;;      Params:         0       0       0       0       0       0
  5720 ;;      Locals:         0       0       0       0       0       0
  5721 ;;      Temps:          1       0       0       0       0       0
  5722 ;;      Totals:         1       0       0       0       0       0
  5723 ;;Total ram usage:        1 bytes
  5724 ;; Hardware stack levels used: 1
  5725 ;; Hardware stack levels required when called: 2
  5726 ;; This function calls:
  5727 ;;		_currentTripRead
  5728 ;;		_transToOverCurrentFault
  5729 ;;		i1_currentTripReset
  5730 ;; This function is called by:
  5731 ;;		_Tick490Hz
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735  0CD7                     _currentTripMonitor:	
  5736                           ;psect for function _currentTripMonitor
  5737                           
  5738  0CD7                     i1l2314:	
  5739                           ;incstack = 0
  5740                           ; Regs used in _currentTripMonitor: [wreg+status,2+status,0+pclath+cstack]
  5741                           
  5742                           
  5743                           ;CurrentSensor.c: 96:         if(currentTripRead() == 1){
  5744  0CD7  318D  2526  318C   	fcall	_currentTripRead
  5745  0CDA  3A01               	xorlw	1
  5746  0CDB  1D03               	skipz
  5747  0CDC  2CDE               	goto	u210_21
  5748  0CDD  2CDF               	goto	u210_20
  5749  0CDE                     u210_21:
  5750  0CDE  2CF2               	goto	i1l2322
  5751  0CDF                     u210_20:
  5752  0CDF                     i1l2316:
  5753                           
  5754                           ;CurrentSensor.c: 97:         currentTripCount++;
  5755  0CDF  3001               	movlw	1
  5756  0CE0  00FB               	movwf	??_currentTripMonitor
  5757  0CE1  087B               	movf	??_currentTripMonitor,w
  5758  0CE2  0020               	movlb	0	; select bank0
  5759  0CE3  07E9               	addwf	_currentTripCount,f
  5760                           
  5761                           ;CurrentSensor.c: 98:         if(currentTripCount == 3u){
  5762  0CE4  3003               	movlw	3
  5763  0CE5  0669               	xorwf	_currentTripCount,w
  5764  0CE6  1D03               	btfss	3,2
  5765  0CE7  2CE9               	goto	u211_21
  5766  0CE8  2CEA               	goto	u211_20
  5767  0CE9                     u211_21:
  5768  0CE9  2CEE               	goto	i1l2320
  5769  0CEA                     u211_20:
  5770  0CEA                     i1l2318:
  5771                           
  5772                           ;CurrentSensor.c: 99:             transToOverCurrentFault();
  5773  0CEA  318C  2419  318C   	fcall	_transToOverCurrentFault
  5774                           
  5775                           ;CurrentSensor.c: 100:         }
  5776  0CED  2CFA               	goto	i1l537
  5777  0CEE                     i1l2320:
  5778                           
  5779                           ;CurrentSensor.c: 102:             currentTripReset();
  5780  0CEE  318C  242B  318C   	fcall	i1_currentTripReset
  5781  0CF1  2CFA               	goto	i1l537
  5782  0CF2                     i1l2322:
  5783                           
  5784                           ;CurrentSensor.c: 106:         if(currentTripCount > 0){
  5785  0CF2  0020               	movlb	0	; select bank0
  5786  0CF3  0869               	movf	_currentTripCount,w
  5787  0CF4  1903               	btfsc	3,2
  5788  0CF5  2CF7               	goto	u212_21
  5789  0CF6  2CF8               	goto	u212_20
  5790  0CF7                     u212_21:
  5791  0CF7  2CFA               	goto	i1l537
  5792  0CF8                     u212_20:
  5793  0CF8                     i1l2324:
  5794                           
  5795                           ;CurrentSensor.c: 107:             currentTripCount--;
  5796  0CF8  3001               	movlw	1
  5797  0CF9  02E9               	subwf	_currentTripCount,f
  5798  0CFA                     i1l537:
  5799  0CFA  0008               	return
  5800  0CFB                     __end_of_currentTripMonitor:
  5801                           
  5802                           	psect	text25
  5803  0C2B                     __ptext25:	
  5804 ;; *************** function i1_currentTripReset *****************
  5805 ;; Defined at:
  5806 ;;		line 71 in file "CurrentSensor.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0, pclath, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5820 ;;      Params:         0       0       0       0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0
  5823 ;;      Totals:         0       0       0       0       0       0
  5824 ;;Total ram usage:        0 bytes
  5825 ;; Hardware stack levels used: 1
  5826 ;; Hardware stack levels required when called: 1
  5827 ;; This function calls:
  5828 ;;		i1_writeGPIO
  5829 ;; This function is called by:
  5830 ;;		_currentTripMonitor
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834  0C2B                     i1_currentTripReset:	
  5835                           ;psect for function i1_currentTripReset
  5836                           
  5837  0C2B                     i1l2310:	
  5838                           ;incstack = 0
  5839                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  5840                           
  5841                           
  5842                           ;CurrentSensor.c: 72:     writeGPIO(pinRB3, 0);
  5843  0C2B  01F0               	clrf	i1writeGPIO@writeValue
  5844  0C2C  300B               	movlw	11
  5845  0C2D  3186  26AC  318C   	fcall	i1_writeGPIO
  5846  0C30                     i1l2312:
  5847                           
  5848                           ;CurrentSensor.c: 73:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  5849                           ;CurrentSensor.c: 74:     writeGPIO(pinRB3, 1);
  5850  0C30  01F0               	clrf	i1writeGPIO@writeValue
  5851  0C31  0AF0               	incf	i1writeGPIO@writeValue,f
  5852  0C32  300B               	movlw	11
  5853  0C33  3186  26AC  318C   	fcall	i1_writeGPIO
  5854  0C36                     i1l526:
  5855  0C36  0008               	return
  5856  0C37                     __end_ofi1_currentTripReset:
  5857                           
  5858                           	psect	text26
  5859  06AC                     __ptext26:	
  5860 ;; *************** function i1_writeGPIO *****************
  5861 ;; Defined at:
  5862 ;;		line 52 in file "GPIO.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  gpioNumber      1    wreg     const enum E2798
  5865 ;;  writeValue      1    0[COMMON] unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  gpioNumber      1    4[COMMON] const enum E2798
  5868 ;;  portNumber      1    5[COMMON] unsigned char 
  5869 ;;  portType        1    3[COMMON] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5879 ;;      Params:         1       0       0       0       0       0
  5880 ;;      Locals:         3       0       0       0       0       0
  5881 ;;      Temps:          2       0       0       0       0       0
  5882 ;;      Totals:         6       0       0       0       0       0
  5883 ;;Total ram usage:        6 bytes
  5884 ;; Hardware stack levels used: 1
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_Tick490Hz
  5889 ;;		i1_currentTripReset
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893  06AC                     i1_writeGPIO:	
  5894                           ;psect for function i1_writeGPIO
  5895                           
  5896                           
  5897                           ;incstack = 0
  5898                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  5899                           ;i1writeGPIO@gpioNumber stored from wreg
  5900  06AC  00F4               	movwf	i1writeGPIO@gpioNumber
  5901  06AD                     i1l2050:
  5902                           
  5903                           ;GPIO.c: 54:     uint8_t portType = 0;
  5904  06AD  01F3               	clrf	i1writeGPIO@portType
  5905  06AE                     i1l2052:
  5906                           
  5907                           ;GPIO.c: 55:     if(gpioNumber > 7){
  5908  06AE  3008               	movlw	8
  5909  06AF  0274               	subwf	i1writeGPIO@gpioNumber,w
  5910  06B0  1C03               	skipc
  5911  06B1  2EB3               	goto	u145_21
  5912  06B2  2EB4               	goto	u145_20
  5913  06B3                     u145_21:
  5914  06B3  2EBC               	goto	i1l2058
  5915  06B4                     u145_20:
  5916  06B4                     i1l2054:
  5917                           
  5918                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  5919  06B4  0874               	movf	i1writeGPIO@gpioNumber,w
  5920  06B5  3EF8               	addlw	248
  5921  06B6  00F1               	movwf	??i1_writeGPIO
  5922  06B7  0871               	movf	??i1_writeGPIO,w
  5923  06B8  00F5               	movwf	i1writeGPIO@portNumber
  5924  06B9                     i1l2056:
  5925                           
  5926                           ;GPIO.c: 57:         portType = 1;
  5927  06B9  01F3               	clrf	i1writeGPIO@portType
  5928  06BA  0AF3               	incf	i1writeGPIO@portType,f
  5929                           
  5930                           ;GPIO.c: 58:     }
  5931  06BB  2EC1               	goto	i1l2062
  5932  06BC                     i1l2058:
  5933                           
  5934                           ;GPIO.c: 60:         portNumber = gpioNumber;
  5935  06BC  0874               	movf	i1writeGPIO@gpioNumber,w
  5936  06BD  00F1               	movwf	??i1_writeGPIO
  5937  06BE  0871               	movf	??i1_writeGPIO,w
  5938  06BF  00F5               	movwf	i1writeGPIO@portNumber
  5939  06C0                     i1l2060:
  5940                           
  5941                           ;GPIO.c: 61:         portType = 0;
  5942  06C0  01F3               	clrf	i1writeGPIO@portType
  5943  06C1                     i1l2062:
  5944                           
  5945                           ;GPIO.c: 64:     if(portType == 0){
  5946  06C1  0873               	movf	i1writeGPIO@portType,w
  5947  06C2  1D03               	btfss	3,2
  5948  06C3  2EC5               	goto	u146_21
  5949  06C4  2EC6               	goto	u146_20
  5950  06C5                     u146_21:
  5951  06C5  2EE6               	goto	i1l2070
  5952  06C6                     u146_20:
  5953  06C6                     i1l2064:
  5954                           
  5955                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  5956  06C6  0870               	movf	i1writeGPIO@writeValue,w
  5957  06C7  1903               	btfsc	3,2
  5958  06C8  2ECA               	goto	u147_21
  5959  06C9  2ECB               	goto	u147_20
  5960  06CA                     u147_21:
  5961  06CA  2ED8               	goto	i1l2068
  5962  06CB                     u147_20:
  5963  06CB                     i1l2066:
  5964  06CB  3001               	movlw	1
  5965  06CC  00F1               	movwf	??i1_writeGPIO
  5966  06CD  0A75               	incf	i1writeGPIO@portNumber,w
  5967  06CE  2ED0               	goto	u148_24
  5968  06CF                     u148_25:
  5969  06CF  35F1               	lslf	??i1_writeGPIO,f
  5970  06D0                     u148_24:
  5971  06D0  0B89               	decfsz	9,f
  5972  06D1  2ECF               	goto	u148_25
  5973  06D2  0871               	movf	??i1_writeGPIO,w
  5974  06D3  00F2               	movwf	??i1_writeGPIO+1
  5975  06D4  0872               	movf	??i1_writeGPIO+1,w
  5976  06D5  0022               	movlb	2	; select bank2
  5977  06D6  048C               	iorwf	12,f	;volatile
  5978  06D7  2F0A               	goto	i1l318
  5979  06D8                     i1l2068:
  5980  06D8  3001               	movlw	1
  5981  06D9  00F1               	movwf	??i1_writeGPIO
  5982  06DA  0A75               	incf	i1writeGPIO@portNumber,w
  5983  06DB  2EDD               	goto	u149_24
  5984  06DC                     u149_25:
  5985  06DC  35F1               	lslf	??i1_writeGPIO,f
  5986  06DD                     u149_24:
  5987  06DD  0B89               	decfsz	9,f
  5988  06DE  2EDC               	goto	u149_25
  5989  06DF  0871               	movf	??i1_writeGPIO,w
  5990  06E0  3AFF               	xorlw	255
  5991  06E1  00F2               	movwf	??i1_writeGPIO+1
  5992  06E2  0872               	movf	??i1_writeGPIO+1,w
  5993  06E3  0022               	movlb	2	; select bank2
  5994  06E4  058C               	andwf	12,f	;volatile
  5995  06E5  2F0A               	goto	i1l318
  5996  06E6                     i1l2070:
  5997  06E6  0373               	decf	i1writeGPIO@portType,w
  5998  06E7  1D03               	btfss	3,2
  5999  06E8  2EEA               	goto	u150_21
  6000  06E9  2EEB               	goto	u150_20
  6001  06EA                     u150_21:
  6002  06EA  2F0A               	goto	i1l318
  6003  06EB                     u150_20:
  6004  06EB                     i1l2072:
  6005                           
  6006                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  6007  06EB  0870               	movf	i1writeGPIO@writeValue,w
  6008  06EC  1903               	btfsc	3,2
  6009  06ED  2EEF               	goto	u151_21
  6010  06EE  2EF0               	goto	u151_20
  6011  06EF                     u151_21:
  6012  06EF  2EFD               	goto	i1l2076
  6013  06F0                     u151_20:
  6014  06F0                     i1l2074:
  6015  06F0  3001               	movlw	1
  6016  06F1  00F1               	movwf	??i1_writeGPIO
  6017  06F2  0A75               	incf	i1writeGPIO@portNumber,w
  6018  06F3  2EF5               	goto	u152_24
  6019  06F4                     u152_25:
  6020  06F4  35F1               	lslf	??i1_writeGPIO,f
  6021  06F5                     u152_24:
  6022  06F5  0B89               	decfsz	9,f
  6023  06F6  2EF4               	goto	u152_25
  6024  06F7  0871               	movf	??i1_writeGPIO,w
  6025  06F8  00F2               	movwf	??i1_writeGPIO+1
  6026  06F9  0872               	movf	??i1_writeGPIO+1,w
  6027  06FA  0022               	movlb	2	; select bank2
  6028  06FB  048D               	iorwf	13,f	;volatile
  6029  06FC  2F0A               	goto	i1l318
  6030  06FD                     i1l2076:
  6031  06FD  3001               	movlw	1
  6032  06FE  00F1               	movwf	??i1_writeGPIO
  6033  06FF  0A75               	incf	i1writeGPIO@portNumber,w
  6034  0700  2F02               	goto	u153_24
  6035  0701                     u153_25:
  6036  0701  35F1               	lslf	??i1_writeGPIO,f
  6037  0702                     u153_24:
  6038  0702  0B89               	decfsz	9,f
  6039  0703  2F01               	goto	u153_25
  6040  0704  0871               	movf	??i1_writeGPIO,w
  6041  0705  3AFF               	xorlw	255
  6042  0706  00F2               	movwf	??i1_writeGPIO+1
  6043  0707  0872               	movf	??i1_writeGPIO+1,w
  6044  0708  0022               	movlb	2	; select bank2
  6045  0709  058D               	andwf	13,f	;volatile
  6046  070A                     i1l318:
  6047  070A  0008               	return
  6048  070B                     __end_ofi1_writeGPIO:
  6049                           
  6050                           	psect	text27
  6051  0C19                     __ptext27:	
  6052 ;; *************** function _transToOverCurrentFault *****************
  6053 ;; Defined at:
  6054 ;;		line 45 in file "StateMachine.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;		None
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;		None
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6068 ;;      Params:         0       0       0       0       0       0
  6069 ;;      Locals:         0       0       0       0       0       0
  6070 ;;      Temps:          1       0       0       0       0       0
  6071 ;;      Totals:         1       0       0       0       0       0
  6072 ;;Total ram usage:        1 bytes
  6073 ;; Hardware stack levels used: 1
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_currentTripMonitor
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081  0C19                     _transToOverCurrentFault:	
  6082                           ;psect for function _transToOverCurrentFault
  6083                           
  6084  0C19                     i1l2268:	
  6085                           ;incstack = 0
  6086                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  6087                           
  6088                           
  6089                           ;StateMachine.c: 46:     setDuty = 0;
  6090  0C19  0020               	movlb	0	; select bank0
  6091  0C1A  01E3               	clrf	_setDuty
  6092  0C1B  01E4               	clrf	_setDuty+1
  6093                           
  6094                           ;StateMachine.c: 47:     setPeriod = 0;
  6095  0C1C  01EE               	clrf	_setPeriod
  6096  0C1D                     i1l2270:
  6097                           
  6098                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  6099  0C1D  3004               	movlw	4
  6100  0C1E  00F0               	movwf	??_transToOverCurrentFault
  6101  0C1F  0870               	movf	??_transToOverCurrentFault,w
  6102  0C20  00EC               	movwf	_currentState
  6103  0C21                     i1l561:
  6104  0C21  0008               	return
  6105  0C22                     __end_of_transToOverCurrentFault:
  6106                           
  6107                           	psect	text28
  6108  0D26                     __ptext28:	
  6109 ;; *************** function _currentTripRead *****************
  6110 ;; Defined at:
  6111 ;;		line 31 in file "CurrentSensor.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      _Bool 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2, status,0, pclath, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6125 ;;      Params:         0       0       0       0       0       0
  6126 ;;      Locals:         1       0       0       0       0       0
  6127 ;;      Temps:          1       0       0       0       0       0
  6128 ;;      Totals:         2       0       0       0       0       0
  6129 ;;Total ram usage:        2 bytes
  6130 ;; Hardware stack levels used: 1
  6131 ;; Hardware stack levels required when called: 1
  6132 ;; This function calls:
  6133 ;;		i1_readGPIO
  6134 ;; This function is called by:
  6135 ;;		_currentTripMonitor
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139  0D26                     _currentTripRead:	
  6140                           ;psect for function _currentTripRead
  6141                           
  6142  0D26                     i1l2254:	
  6143                           ;incstack = 0
  6144                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6145                           
  6146                           
  6147                           ;CurrentSensor.c: 32:     tripIDS = ~readGPIO(pinRA1);
  6148  0D26  3001               	movlw	1
  6149  0D27  318D  25BB  318D   	fcall	i1_readGPIO
  6150  0D2A  3A01               	xorlw	1
  6151  0D2B  1D03               	skipz
  6152  0D2C  2D2E               	goto	u193_21
  6153  0D2D  2D30               	goto	u193_20
  6154  0D2E                     u193_21:
  6155  0D2E  3001               	movlw	1
  6156  0D2F  2D31               	goto	u194_20
  6157  0D30                     u193_20:
  6158  0D30  3000               	movlw	0
  6159  0D31                     u194_20:
  6160  0D31  00F9               	movwf	??_currentTripRead
  6161  0D32  0879               	movf	??_currentTripRead,w
  6162  0D33  0020               	movlb	0	; select bank0
  6163  0D34  00EB               	movwf	_tripIDS
  6164                           
  6165                           ;CurrentSensor.c: 33:     tripIL = ~readGPIO(pinRA3);
  6166  0D35  3003               	movlw	3
  6167  0D36  318D  25BB  318D   	fcall	i1_readGPIO
  6168  0D39  3A01               	xorlw	1
  6169  0D3A  1D03               	skipz
  6170  0D3B  2D3D               	goto	u195_21
  6171  0D3C  2D3F               	goto	u195_20
  6172  0D3D                     u195_21:
  6173  0D3D  3001               	movlw	1
  6174  0D3E  2D40               	goto	u196_20
  6175  0D3F                     u195_20:
  6176  0D3F  3000               	movlw	0
  6177  0D40                     u196_20:
  6178  0D40  00F9               	movwf	??_currentTripRead
  6179  0D41  0879               	movf	??_currentTripRead,w
  6180  0D42  0020               	movlb	0	; select bank0
  6181  0D43  00EA               	movwf	_tripIL
  6182  0D44                     i1l2256:
  6183                           
  6184                           ;CurrentSensor.c: 34:     return (tripIL || tripIDS);
  6185  0D44  01FA               	clrf	_currentTripRead$912
  6186  0D45  0AFA               	incf	_currentTripRead$912,f
  6187  0D46                     i1l2258:
  6188  0D46  086A               	movf	_tripIL,w
  6189  0D47  1D03               	btfss	3,2
  6190  0D48  2D4A               	goto	u197_21
  6191  0D49  2D4B               	goto	u197_20
  6192  0D4A                     u197_21:
  6193  0D4A  2D51               	goto	i1l2264
  6194  0D4B                     u197_20:
  6195  0D4B                     i1l2260:
  6196  0D4B  086B               	movf	_tripIDS,w
  6197  0D4C  1D03               	btfss	3,2
  6198  0D4D  2D4F               	goto	u198_21
  6199  0D4E  2D50               	goto	u198_20
  6200  0D4F                     u198_21:
  6201  0D4F  2D51               	goto	i1l2264
  6202  0D50                     u198_20:
  6203  0D50                     i1l2262:
  6204  0D50  01FA               	clrf	_currentTripRead$912
  6205  0D51                     i1l2264:
  6206  0D51  087A               	movf	_currentTripRead$912,w
  6207  0D52                     i1l509:
  6208  0D52  0008               	return
  6209  0D53                     __end_of_currentTripRead:
  6210                           
  6211                           	psect	text29
  6212  04B7                     __ptext29:	
  6213 ;; *************** function _controlRoutine *****************
  6214 ;; Defined at:
  6215 ;;		line 65 in file "Controller.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6220 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  1    wreg      void 
  6223 ;; Registers used:
  6224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6230 ;;      Params:         0       0       0       0       0       0
  6231 ;;      Locals:         0       4       0       0       0       0
  6232 ;;      Temps:          0       6       0       0       0       0
  6233 ;;      Totals:         0      10       0       0       0       0
  6234 ;;Total ram usage:       10 bytes
  6235 ;; Hardware stack levels used: 1
  6236 ;; Hardware stack levels required when called: 3
  6237 ;; This function calls:
  6238 ;;		___lldiv
  6239 ;;		___wmul
  6240 ;;		_runVoltageModeControl
  6241 ;; This function is called by:
  6242 ;;		_Tick490Hz
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246  04B7                     _controlRoutine:	
  6247                           ;psect for function _controlRoutine
  6248                           
  6249  04B7                     i1l2332:	
  6250                           ;incstack = 0
  6251                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6252                           
  6253                           
  6254                           ;Controller.c: 66:     if(currentState == voltageModeControl){
  6255  04B7  3002               	movlw	2
  6256  04B8  0020               	movlb	0	; select bank0
  6257  04B9  066C               	xorwf	_currentState,w
  6258  04BA  1D03               	btfss	3,2
  6259  04BB  2CBD               	goto	u215_21
  6260  04BC  2CBE               	goto	u215_20
  6261  04BD                     u215_21:
  6262  04BD  2CF9               	goto	i1l2342
  6263  04BE                     u215_20:
  6264  04BE                     i1l2334:
  6265                           
  6266                           ;Controller.c: 68:         runVoltageModeControl();
  6267  04BE  3180  20B3  3184   	fcall	_runVoltageModeControl
  6268  04C1                     i1l2336:
  6269                           
  6270                           ;Controller.c: 69:         setPeriod = 79u;
  6271  04C1  304F               	movlw	79
  6272  04C2  0020               	movlb	0	; select bank0
  6273  04C3  00D2               	movwf	??_controlRoutine
  6274  04C4  0852               	movf	??_controlRoutine,w
  6275  04C5  00EE               	movwf	_setPeriod
  6276  04C6                     i1l2338:
  6277                           
  6278                           ;Controller.c: 71:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + voltageModeVariables.sumOutput;
  6279  04C6  3016               	movlw	22
  6280  04C7  3EB4               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6281  04C8  0086               	movwf	6
  6282  04C9  0187               	clrf	7
  6283  04CA  3000               	movlw	0
  6284  04CB  00F9               	movwf	___lldiv@divisor+3
  6285  04CC  3000               	movlw	0
  6286  04CD  00F8               	movwf	___lldiv@divisor+2
  6287  04CE  3000               	movlw	0
  6288  04CF  00F7               	movwf	___lldiv@divisor+1
  6289  04D0  3019               	movlw	25
  6290  04D1  00F6               	movwf	___lldiv@divisor
  6291  04D2  3032               	movlw	50
  6292  04D3  00F2               	movwf	___wmul@multiplicand
  6293  04D4  3000               	movlw	0
  6294  04D5  00F3               	movwf	___wmul@multiplicand+1
  6295  04D6  086E               	movf	_setPeriod,w
  6296  04D7  00D2               	movwf	??_controlRoutine
  6297  04D8  01D3               	clrf	??_controlRoutine+1
  6298  04D9  0852               	movf	??_controlRoutine,w
  6299  04DA  00F0               	movwf	___wmul@multiplier
  6300  04DB  0853               	movf	??_controlRoutine+1,w
  6301  04DC  00F1               	movwf	___wmul@multiplier+1
  6302  04DD  318C  2498  3184   	fcall	___wmul
  6303  04E0  0870               	movf	?___wmul,w
  6304  04E1  0020               	movlb	0	; select bank0
  6305  04E2  00D4               	movwf	??_controlRoutine+2
  6306  04E3  0871               	movf	?___wmul+1,w
  6307  04E4  00D5               	movwf	??_controlRoutine+3
  6308  04E5  01D6               	clrf	??_controlRoutine+4
  6309  04E6  01D7               	clrf	??_controlRoutine+5
  6310  04E7  0857               	movf	??_controlRoutine+5,w
  6311  04E8  00FD               	movwf	___lldiv@dividend+3
  6312  04E9  0856               	movf	??_controlRoutine+4,w
  6313  04EA  00FC               	movwf	___lldiv@dividend+2
  6314  04EB  0855               	movf	??_controlRoutine+3,w
  6315  04EC  00FB               	movwf	___lldiv@dividend+1
  6316  04ED  0854               	movf	??_controlRoutine+2,w
  6317  04EE  00FA               	movwf	___lldiv@dividend
  6318  04EF  318F  274A  3184   	fcall	___lldiv
  6319  04F2  3F40               	moviw [0]fsr1
  6320  04F3  0776               	addwf	?___lldiv,w
  6321  04F4  0020               	movlb	0	; select bank0
  6322  04F5  00E3               	movwf	_setDuty
  6323  04F6  3F41               	moviw [1]fsr1
  6324  04F7  3D77               	addwfc	?___lldiv+1,w
  6325  04F8  00E4               	movwf	_setDuty+1
  6326  04F9                     i1l2342:
  6327                           
  6328                           ;Controller.c: 83:     uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * setP
      +                          eriod)) / 25);
  6329  04F9  3000               	movlw	0
  6330  04FA  00F9               	movwf	___lldiv@divisor+3
  6331  04FB  3000               	movlw	0
  6332  04FC  00F8               	movwf	___lldiv@divisor+2
  6333  04FD  3000               	movlw	0
  6334  04FE  00F7               	movwf	___lldiv@divisor+1
  6335  04FF  3019               	movlw	25
  6336  0500  00F6               	movwf	___lldiv@divisor
  6337  0501  305A               	movlw	90
  6338  0502  00F2               	movwf	___wmul@multiplicand
  6339  0503  3000               	movlw	0
  6340  0504  00F3               	movwf	___wmul@multiplicand+1
  6341  0505  086E               	movf	_setPeriod,w
  6342  0506  00D2               	movwf	??_controlRoutine
  6343  0507  01D3               	clrf	??_controlRoutine+1
  6344  0508  0852               	movf	??_controlRoutine,w
  6345  0509  00F0               	movwf	___wmul@multiplier
  6346  050A  0853               	movf	??_controlRoutine+1,w
  6347  050B  00F1               	movwf	___wmul@multiplier+1
  6348  050C  318C  2498  3184   	fcall	___wmul
  6349  050F  0870               	movf	?___wmul,w
  6350  0510  0020               	movlb	0	; select bank0
  6351  0511  00D4               	movwf	??_controlRoutine+2
  6352  0512  0871               	movf	?___wmul+1,w
  6353  0513  00D5               	movwf	??_controlRoutine+3
  6354  0514  01D6               	clrf	??_controlRoutine+4
  6355  0515  01D7               	clrf	??_controlRoutine+5
  6356  0516  0857               	movf	??_controlRoutine+5,w
  6357  0517  00FD               	movwf	___lldiv@dividend+3
  6358  0518  0856               	movf	??_controlRoutine+4,w
  6359  0519  00FC               	movwf	___lldiv@dividend+2
  6360  051A  0855               	movf	??_controlRoutine+3,w
  6361  051B  00FB               	movwf	___lldiv@dividend+1
  6362  051C  0854               	movf	??_controlRoutine+2,w
  6363  051D  00FA               	movwf	___lldiv@dividend
  6364  051E  318F  274A  3184   	fcall	___lldiv
  6365  0521  0877               	movf	?___lldiv+1,w
  6366  0522  0020               	movlb	0	; select bank0
  6367  0523  00D9               	movwf	controlRoutine@maxDuty+1
  6368  0524  0876               	movf	?___lldiv,w
  6369  0525  00D8               	movwf	controlRoutine@maxDuty
  6370                           
  6371                           ;Controller.c: 84:     uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * setP
      +                          eriod)) / 25);
  6372  0526  3000               	movlw	0
  6373  0527  00F9               	movwf	___lldiv@divisor+3
  6374  0528  3000               	movlw	0
  6375  0529  00F8               	movwf	___lldiv@divisor+2
  6376  052A  3000               	movlw	0
  6377  052B  00F7               	movwf	___lldiv@divisor+1
  6378  052C  3019               	movlw	25
  6379  052D  00F6               	movwf	___lldiv@divisor
  6380  052E  300A               	movlw	10
  6381  052F  00F2               	movwf	___wmul@multiplicand
  6382  0530  3000               	movlw	0
  6383  0531  00F3               	movwf	___wmul@multiplicand+1
  6384  0532  086E               	movf	_setPeriod,w
  6385  0533  00D2               	movwf	??_controlRoutine
  6386  0534  01D3               	clrf	??_controlRoutine+1
  6387  0535  0852               	movf	??_controlRoutine,w
  6388  0536  00F0               	movwf	___wmul@multiplier
  6389  0537  0853               	movf	??_controlRoutine+1,w
  6390  0538  00F1               	movwf	___wmul@multiplier+1
  6391  0539  318C  2498  3184   	fcall	___wmul
  6392  053C  0870               	movf	?___wmul,w
  6393  053D  0020               	movlb	0	; select bank0
  6394  053E  00D4               	movwf	??_controlRoutine+2
  6395  053F  0871               	movf	?___wmul+1,w
  6396  0540  00D5               	movwf	??_controlRoutine+3
  6397  0541  01D6               	clrf	??_controlRoutine+4
  6398  0542  01D7               	clrf	??_controlRoutine+5
  6399  0543  0857               	movf	??_controlRoutine+5,w
  6400  0544  00FD               	movwf	___lldiv@dividend+3
  6401  0545  0856               	movf	??_controlRoutine+4,w
  6402  0546  00FC               	movwf	___lldiv@dividend+2
  6403  0547  0855               	movf	??_controlRoutine+3,w
  6404  0548  00FB               	movwf	___lldiv@dividend+1
  6405  0549  0854               	movf	??_controlRoutine+2,w
  6406  054A  00FA               	movwf	___lldiv@dividend
  6407  054B  318F  274A  3184   	fcall	___lldiv
  6408  054E  0877               	movf	?___lldiv+1,w
  6409  054F  0020               	movlb	0	; select bank0
  6410  0550  00DB               	movwf	controlRoutine@minDuty+1
  6411  0551  0876               	movf	?___lldiv,w
  6412  0552  00DA               	movwf	controlRoutine@minDuty
  6413  0553                     i1l2344:
  6414                           
  6415                           ;Controller.c: 85:     if(setDuty > maxDuty) setDuty = maxDuty;
  6416  0553  0864               	movf	_setDuty+1,w
  6417  0554  0259               	subwf	controlRoutine@maxDuty+1,w
  6418  0555  1D03               	skipz
  6419  0556  2D59               	goto	u216_25
  6420  0557  0863               	movf	_setDuty,w
  6421  0558  0258               	subwf	controlRoutine@maxDuty,w
  6422  0559                     u216_25:
  6423  0559  1803               	skipnc
  6424  055A  2D5C               	goto	u216_21
  6425  055B  2D5D               	goto	u216_20
  6426  055C                     u216_21:
  6427  055C  2D61               	goto	i1l443
  6428  055D                     u216_20:
  6429  055D                     i1l2346:
  6430  055D  0859               	movf	controlRoutine@maxDuty+1,w
  6431  055E  00E4               	movwf	_setDuty+1
  6432  055F  0858               	movf	controlRoutine@maxDuty,w
  6433  0560  00E3               	movwf	_setDuty
  6434  0561                     i1l443:
  6435                           
  6436                           ;Controller.c: 86:     if(setDuty < minDuty) setDuty = minDuty;
  6437  0561  085B               	movf	controlRoutine@minDuty+1,w
  6438  0562  0264               	subwf	_setDuty+1,w
  6439  0563  1D03               	skipz
  6440  0564  2D67               	goto	u217_25
  6441  0565  085A               	movf	controlRoutine@minDuty,w
  6442  0566  0263               	subwf	_setDuty,w
  6443  0567                     u217_25:
  6444  0567  1803               	skipnc
  6445  0568  2D6A               	goto	u217_21
  6446  0569  2D6B               	goto	u217_20
  6447  056A                     u217_21:
  6448  056A  2D6F               	goto	i1l446
  6449  056B                     u217_20:
  6450  056B                     i1l2348:
  6451  056B  085B               	movf	controlRoutine@minDuty+1,w
  6452  056C  00E4               	movwf	_setDuty+1
  6453  056D  085A               	movf	controlRoutine@minDuty,w
  6454  056E  00E3               	movwf	_setDuty
  6455  056F                     i1l446:
  6456  056F  0008               	return
  6457  0570                     __end_of_controlRoutine:
  6458                           
  6459                           	psect	text30
  6460  00B3                     __ptext30:	
  6461 ;; *************** function _runVoltageModeControl *****************
  6462 ;; Defined at:
  6463 ;;		line 96 in file "Controller.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  propMult        8   40[BANK0 ] long long 
  6468 ;;  integralMult    8   32[BANK0 ] long long 
  6469 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6479 ;;      Params:         0       0       0       0       0       0
  6480 ;;      Locals:         0      18       0       0       0       0
  6481 ;;      Temps:          0      16       0       0       0       0
  6482 ;;      Totals:         0      34       0       0       0       0
  6483 ;;Total ram usage:       34 bytes
  6484 ;; Hardware stack levels used: 1
  6485 ;; Hardware stack levels required when called: 2
  6486 ;; This function calls:
  6487 ;;		___lmul
  6488 ;;		___omul
  6489 ;;		_abs
  6490 ;;		_convertRawToMilliVolts
  6491 ;;		i1_readGPIO
  6492 ;; This function is called by:
  6493 ;;		_controlRoutine
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497  00B3                     _runVoltageModeControl:	
  6498                           ;psect for function _runVoltageModeControl
  6499                           
  6500  00B3                     i1l2218:	
  6501                           ;incstack = 0
  6502                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6503                           
  6504                           
  6505                           ;Controller.c: 101:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6506  00B3  0020               	movlb	0	; select bank0
  6507  00B4  0860               	movf	_filteredVout+1,w
  6508  00B5  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6509  00B6  085F               	movf	_filteredVout,w
  6510  00B7  00FC               	movwf	convertRawToMilliVolts@rawValue
  6511  00B8  3187  27C1  3180   	fcall	_convertRawToMilliVolts
  6512  00BB  087D               	movf	?_convertRawToMilliVolts+1,w
  6513  00BC  0020               	movlb	0	; select bank0
  6514  00BD  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6515  00BE  087C               	movf	?_convertRawToMilliVolts,w
  6516  00BF  00D0               	movwf	runVoltageModeControl@newVoltage
  6517                           
  6518                           ;Controller.c: 104:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVol
      +                          tage;
  6519  00C0  3008               	movlw	8
  6520  00C1  318D  25BB  3180   	fcall	i1_readGPIO
  6521  00C4  3A00               	xorlw	0
  6522  00C5  1903               	skipnz
  6523  00C6  28C8               	goto	u187_21
  6524  00C7  28C9               	goto	u187_20
  6525  00C8                     u187_21:
  6526  00C8  28D8               	goto	i1l2222
  6527  00C9                     u187_20:
  6528  00C9                     i1l2220:
  6529  00C9  3080               	movlw	128
  6530  00CA  0020               	movlb	0	; select bank0
  6531  00CB  00B0               	movwf	??_runVoltageModeControl
  6532  00CC  303E               	movlw	62
  6533  00CD  00B1               	movwf	??_runVoltageModeControl+1
  6534  00CE  0850               	movf	runVoltageModeControl@newVoltage,w
  6535  00CF  0230               	subwf	??_runVoltageModeControl,w
  6536  00D0  0021               	movlb	1	; select bank1
  6537  00D1  00B4               	movwf	_voltageModeVariables^(0+128)
  6538  00D2  0020               	movlb	0	; select bank0
  6539  00D3  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6540  00D4  3B31               	subwfb	??_runVoltageModeControl+1,w
  6541  00D5  0021               	movlb	1	; select bank1
  6542  00D6  00B5               	movwf	(_voltageModeVariables+1)^(0+128)
  6543  00D7  28E6               	goto	i1l2224
  6544  00D8                     i1l2222:
  6545  00D8  30E0               	movlw	224
  6546  00D9  0020               	movlb	0	; select bank0
  6547  00DA  00B0               	movwf	??_runVoltageModeControl
  6548  00DB  302E               	movlw	46
  6549  00DC  00B1               	movwf	??_runVoltageModeControl+1
  6550  00DD  0850               	movf	runVoltageModeControl@newVoltage,w
  6551  00DE  0230               	subwf	??_runVoltageModeControl,w
  6552  00DF  0021               	movlb	1	; select bank1
  6553  00E0  00B4               	movwf	_voltageModeVariables^(0+128)
  6554  00E1  0020               	movlb	0	; select bank0
  6555  00E2  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6556  00E3  3B31               	subwfb	??_runVoltageModeControl+1,w
  6557  00E4  0021               	movlb	1	; select bank1
  6558  00E5  00B5               	movwf	(_voltageModeVariables+1)^(0+128)
  6559  00E6                     i1l2224:
  6560                           
  6561                           ;Controller.c: 108:    int64_t integralMult = ((int64_t) (15u * ((int64_t) voltageModeVa
      +                          riables.error) )) * 267u;
  6562  00E6  0834               	movf	_voltageModeVariables^(0+128),w
  6563  00E7  0020               	movlb	0	; select bank0
  6564  00E8  00A0               	movwf	___omul@multiplier
  6565  00E9  0021               	movlb	1	; select bank1
  6566  00EA  0835               	movf	(_voltageModeVariables+1)^(0+128),w
  6567  00EB  0020               	movlb	0	; select bank0
  6568  00EC  00A1               	movwf	___omul@multiplier+1
  6569  00ED  0D89               	rlf	9,f
  6570  00EE  3B89               	subwfb	9,f
  6571  00EF  0989               	comf	9,f
  6572  00F0  00A2               	movwf	___omul@multiplier+2
  6573  00F1  00A3               	movwf	___omul@multiplier+3
  6574  00F2  00A4               	movwf	___omul@multiplier+4
  6575  00F3  00A5               	movwf	___omul@multiplier+5
  6576  00F4  00A6               	movwf	___omul@multiplier+6
  6577  00F5  00A7               	movwf	___omul@multiplier+7
  6578  00F6  3000               	movlw	0
  6579  00F7  00AF               	movwf	___omul@multiplicand+7
  6580  00F8  3000               	movlw	0
  6581  00F9  00AE               	movwf	___omul@multiplicand+6
  6582  00FA  3000               	movlw	0
  6583  00FB  00AD               	movwf	___omul@multiplicand+5
  6584  00FC  3000               	movlw	0
  6585  00FD  00AC               	movwf	___omul@multiplicand+4
  6586  00FE  3000               	movlw	0
  6587  00FF  00AB               	movwf	___omul@multiplicand+3
  6588  0100  3000               	movlw	0
  6589  0101  00AA               	movwf	___omul@multiplicand+2
  6590  0102  300F               	movlw	15
  6591  0103  00A9               	movwf	___omul@multiplicand+1
  6592  0104  30A5               	movlw	165
  6593  0105  00A8               	movwf	___omul@multiplicand
  6594  0106  318E  264C  3180   	fcall	___omul
  6595  0109  0020               	movlb	0	; select bank0
  6596  010A  0820               	movf	?___omul,w
  6597  010B  00C0               	movwf	runVoltageModeControl@integralMult
  6598  010C  0821               	movf	?___omul+1,w
  6599  010D  00C1               	movwf	runVoltageModeControl@integralMult+1
  6600  010E  0822               	movf	?___omul+2,w
  6601  010F  00C2               	movwf	runVoltageModeControl@integralMult+2
  6602  0110  0823               	movf	?___omul+3,w
  6603  0111  00C3               	movwf	runVoltageModeControl@integralMult+3
  6604  0112  0824               	movf	?___omul+4,w
  6605  0113  00C4               	movwf	runVoltageModeControl@integralMult+4
  6606  0114  0825               	movf	?___omul+5,w
  6607  0115  00C5               	movwf	runVoltageModeControl@integralMult+5
  6608  0116  0826               	movf	?___omul+6,w
  6609  0117  00C6               	movwf	runVoltageModeControl@integralMult+6
  6610  0118  0827               	movf	?___omul+7,w
  6611  0119  00C7               	movwf	runVoltageModeControl@integralMult+7
  6612  011A                     i1l2226:
  6613                           
  6614                           ;Controller.c: 110:    voltageModeVariables.integral = integralMult;
  6615  011A  0843               	movf	runVoltageModeControl@integralMult+3,w
  6616  011B  0021               	movlb	1	; select bank1
  6617  011C  00B9               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6618  011D  0020               	movlb	0	; select bank0
  6619  011E  0842               	movf	runVoltageModeControl@integralMult+2,w
  6620  011F  0021               	movlb	1	; select bank1
  6621  0120  00B8               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6622  0121  0020               	movlb	0	; select bank0
  6623  0122  0841               	movf	runVoltageModeControl@integralMult+1,w
  6624  0123  0021               	movlb	1	; select bank1
  6625  0124  00B7               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6626  0125  0020               	movlb	0	; select bank0
  6627  0126  0840               	movf	runVoltageModeControl@integralMult,w
  6628  0127  0021               	movlb	1	; select bank1
  6629  0128  00B6               	movwf	(_voltageModeVariables^(0+128)+2)
  6630  0129                     i1l2228:
  6631                           
  6632                           ;Controller.c: 111:    voltageModeVariables.integralOutputScaled = (voltageModeVariables
      +                          .integralOutputScaled + voltageModeVariables.integral);
  6633  0129  300E               	movlw	14
  6634  012A  3EB4               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6635  012B  0086               	movwf	6
  6636  012C  0187               	clrf	7
  6637  012D  3F40               	moviw [0]fsr1
  6638  012E  0020               	movlb	0	; select bank0
  6639  012F  00B0               	movwf	??_runVoltageModeControl
  6640  0130  3F41               	moviw [1]fsr1
  6641  0131  00B1               	movwf	??_runVoltageModeControl+1
  6642  0132  3F42               	moviw [2]fsr1
  6643  0133  00B2               	movwf	??_runVoltageModeControl+2
  6644  0134  3F43               	moviw [3]fsr1
  6645  0135  00B3               	movwf	??_runVoltageModeControl+3
  6646  0136  3F44               	moviw [4]fsr1
  6647  0137  00B4               	movwf	??_runVoltageModeControl+4
  6648  0138  3F45               	moviw [5]fsr1
  6649  0139  00B5               	movwf	??_runVoltageModeControl+5
  6650  013A  3F46               	moviw [6]fsr1
  6651  013B  00B6               	movwf	??_runVoltageModeControl+6
  6652  013C  3F47               	moviw [7]fsr1
  6653  013D  00B7               	movwf	??_runVoltageModeControl+7
  6654  013E  0021               	movlb	1	; select bank1
  6655  013F  0836               	movf	(_voltageModeVariables^(0+128)+2),w
  6656  0140  0020               	movlb	0	; select bank0
  6657  0141  00B8               	movwf	??_runVoltageModeControl+8
  6658  0142  0021               	movlb	1	; select bank1
  6659  0143  0837               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6660  0144  0020               	movlb	0	; select bank0
  6661  0145  00B9               	movwf	??_runVoltageModeControl+9
  6662  0146  0021               	movlb	1	; select bank1
  6663  0147  0838               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6664  0148  0020               	movlb	0	; select bank0
  6665  0149  00BA               	movwf	??_runVoltageModeControl+10
  6666  014A  0021               	movlb	1	; select bank1
  6667  014B  0839               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6668  014C  0020               	movlb	0	; select bank0
  6669  014D  00BB               	movwf	??_runVoltageModeControl+11
  6670  014E  3000               	movlw	0
  6671  014F  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6672  0150  30FF               	movlw	255
  6673  0151  00BC               	movwf	??_runVoltageModeControl+12
  6674  0152  00BD               	movwf	??_runVoltageModeControl+13
  6675  0153  00BE               	movwf	??_runVoltageModeControl+14
  6676  0154  00BF               	movwf	??_runVoltageModeControl+15
  6677  0155  0838               	movf	??_runVoltageModeControl+8,w
  6678  0156  07B0               	addwf	??_runVoltageModeControl,f
  6679  0157  0839               	movf	??_runVoltageModeControl+9,w
  6680  0158  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6681  0159  083A               	movf	??_runVoltageModeControl+10,w
  6682  015A  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6683  015B  083B               	movf	??_runVoltageModeControl+11,w
  6684  015C  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6685  015D  083C               	movf	??_runVoltageModeControl+12,w
  6686  015E  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6687  015F  083D               	movf	??_runVoltageModeControl+13,w
  6688  0160  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6689  0161  083E               	movf	??_runVoltageModeControl+14,w
  6690  0162  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6691  0163  083F               	movf	??_runVoltageModeControl+15,w
  6692  0164  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6693  0165  0837               	movf	??_runVoltageModeControl+7,w
  6694  0166  0021               	movlb	1	; select bank1
  6695  0167  00C9               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6696  0168  0020               	movlb	0	; select bank0
  6697  0169  0836               	movf	??_runVoltageModeControl+6,w
  6698  016A  0021               	movlb	1	; select bank1
  6699  016B  00C8               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6700  016C  0020               	movlb	0	; select bank0
  6701  016D  0835               	movf	??_runVoltageModeControl+5,w
  6702  016E  0021               	movlb	1	; select bank1
  6703  016F  00C7               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6704  0170  0020               	movlb	0	; select bank0
  6705  0171  0834               	movf	??_runVoltageModeControl+4,w
  6706  0172  0021               	movlb	1	; select bank1
  6707  0173  00C6               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6708  0174  0020               	movlb	0	; select bank0
  6709  0175  0833               	movf	??_runVoltageModeControl+3,w
  6710  0176  0021               	movlb	1	; select bank1
  6711  0177  00C5               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6712  0178  0020               	movlb	0	; select bank0
  6713  0179  0832               	movf	??_runVoltageModeControl+2,w
  6714  017A  0021               	movlb	1	; select bank1
  6715  017B  00C4               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6716  017C  0020               	movlb	0	; select bank0
  6717  017D  0831               	movf	??_runVoltageModeControl+1,w
  6718  017E  0021               	movlb	1	; select bank1
  6719  017F  00C3               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6720  0180  0020               	movlb	0	; select bank0
  6721  0181  0830               	movf	??_runVoltageModeControl,w
  6722  0182  0021               	movlb	1	; select bank1
  6723  0183  00C2               	movwf	(_voltageModeVariables^(0+128)+14)
  6724  0184                     i1l2230:
  6725                           
  6726                           ;Controller.c: 114:    if(voltageModeVariables.integralOutputScaled > (integratorScaledL
      +                          imit)){
  6727  0184  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6728  0185  3A80               	xorlw	128
  6729  0186  0020               	movlb	0	; select bank0
  6730  0187  00B0               	movwf	??_runVoltageModeControl
  6731  0188  0021               	movlb	1	; select bank1
  6732  0189  0849               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6733  018A  3A80               	xorlw	128
  6734  018B  0020               	movlb	0	; select bank0
  6735  018C  0230               	subwf	??_runVoltageModeControl,w
  6736  018D  0021               	movlb	1	; select bank1
  6737  018E  1D03               	skipz
  6738  018F  29AA               	goto	u188_23
  6739  0190  0848               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6740  0191  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6741  0192  1D03               	skipz
  6742  0193  29AA               	goto	u188_23
  6743  0194  0847               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6744  0195  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6745  0196  1D03               	skipz
  6746  0197  29AA               	goto	u188_23
  6747  0198  0846               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6748  0199  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6749  019A  1D03               	skipz
  6750  019B  29AA               	goto	u188_23
  6751  019C  0845               	movf	((_voltageModeVariables+3)^(0+128)+14),w
  6752  019D  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6753  019E  1D03               	skipz
  6754  019F  29AA               	goto	u188_23
  6755  01A0  0844               	movf	((_voltageModeVariables+2)^(0+128)+14),w
  6756  01A1  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6757  01A2  1D03               	skipz
  6758  01A3  29AA               	goto	u188_23
  6759  01A4  0843               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6760  01A5  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6761  01A6  1D03               	skipz
  6762  01A7  29AA               	goto	u188_23
  6763  01A8  0842               	movf	(_voltageModeVariables^(0+128)+14),w
  6764  01A9  0220               	subwf	_integratorScaledLimit^(0+128),w
  6765  01AA                     u188_23:
  6766  01AA  1803               	skipnc
  6767  01AB  29AD               	goto	u188_21
  6768  01AC  29AE               	goto	u188_20
  6769  01AD                     u188_21:
  6770  01AD  29BE               	goto	i1l2234
  6771  01AE                     u188_20:
  6772  01AE                     i1l2232:
  6773                           
  6774                           ;Controller.c: 115:        voltageModeVariables.integralOutputScaled = (integratorScaled
      +                          Limit);
  6775  01AE  0820               	movf	_integratorScaledLimit^(0+128),w
  6776  01AF  00C2               	movwf	(_voltageModeVariables^(0+128)+14)
  6777  01B0  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6778  01B1  00C3               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6779  01B2  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6780  01B3  00C4               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6781  01B4  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6782  01B5  00C5               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6783  01B6  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6784  01B7  00C6               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6785  01B8  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6786  01B9  00C7               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6787  01BA  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6788  01BB  00C8               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6789  01BC  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6790  01BD  00C9               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6791  01BE                     i1l2234:
  6792                           
  6793                           ;Controller.c: 118:    if(voltageModeVariables.integralOutputScaled < 0){
  6794  01BE  300E               	movlw	14
  6795  01BF  3EB4               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6796  01C0  0086               	movwf	6
  6797  01C1  0187               	clrf	7
  6798  01C2  3F47               	moviw [7]fsr1
  6799  01C3  0020               	movlb	0	; select bank0
  6800  01C4  00B0               	movwf	??_runVoltageModeControl
  6801  01C5  1FB0               	btfss	??_runVoltageModeControl,7
  6802  01C6  29C8               	goto	u189_21
  6803  01C7  29C9               	goto	u189_20
  6804  01C8                     u189_21:
  6805  01C8  2A66               	goto	i1l2240
  6806  01C9                     u189_20:
  6807  01C9                     i1l2236:
  6808                           
  6809                           ;Controller.c: 119:         if(abs(voltageModeVariables.integralOutputScaled) > (integra
      +                          torScaledLimit)){
  6810  01C9  0021               	movlb	1	; select bank1
  6811  01CA  0843               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6812  01CB  00F1               	movwf	abs@a+1
  6813  01CC  0842               	movf	(_voltageModeVariables^(0+128)+14),w
  6814  01CD  00F0               	movwf	abs@a
  6815  01CE  318C  2445  3180   	fcall	_abs
  6816  01D1  0870               	movf	?_abs,w
  6817  01D2  0020               	movlb	0	; select bank0
  6818  01D3  00B0               	movwf	??_runVoltageModeControl
  6819  01D4  0871               	movf	?_abs+1,w
  6820  01D5  00B1               	movwf	??_runVoltageModeControl+1
  6821  01D6  3000               	movlw	0
  6822  01D7  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6823  01D8  30FF               	movlw	255
  6824  01D9  00B2               	movwf	??_runVoltageModeControl+2
  6825  01DA  00B3               	movwf	??_runVoltageModeControl+3
  6826  01DB  00B4               	movwf	??_runVoltageModeControl+4
  6827  01DC  00B5               	movwf	??_runVoltageModeControl+5
  6828  01DD  00B6               	movwf	??_runVoltageModeControl+6
  6829  01DE  00B7               	movwf	??_runVoltageModeControl+7
  6830  01DF  0021               	movlb	1	; select bank1
  6831  01E0  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6832  01E1  3A80               	xorlw	128
  6833  01E2  0020               	movlb	0	; select bank0
  6834  01E3  00B8               	movwf	??_runVoltageModeControl+8
  6835  01E4  0837               	movf	??_runVoltageModeControl+7,w
  6836  01E5  3A80               	xorlw	128
  6837  01E6  0238               	subwf	??_runVoltageModeControl+8,w
  6838  01E7  0021               	movlb	1	; select bank1
  6839  01E8  1D03               	skipz
  6840  01E9  2A12               	goto	u190_23
  6841  01EA  0020               	movlb	0	; select bank0
  6842  01EB  0836               	movf	??_runVoltageModeControl+6,w
  6843  01EC  0021               	movlb	1	; select bank1
  6844  01ED  0226               	subwf	(_integratorScaledLimit+6)^(0+128),w
  6845  01EE  1D03               	skipz
  6846  01EF  2A12               	goto	u190_23
  6847  01F0  0020               	movlb	0	; select bank0
  6848  01F1  0835               	movf	??_runVoltageModeControl+5,w
  6849  01F2  0021               	movlb	1	; select bank1
  6850  01F3  0225               	subwf	(_integratorScaledLimit+5)^(0+128),w
  6851  01F4  1D03               	skipz
  6852  01F5  2A12               	goto	u190_23
  6853  01F6  0020               	movlb	0	; select bank0
  6854  01F7  0834               	movf	??_runVoltageModeControl+4,w
  6855  01F8  0021               	movlb	1	; select bank1
  6856  01F9  0224               	subwf	(_integratorScaledLimit+4)^(0+128),w
  6857  01FA  1D03               	skipz
  6858  01FB  2A12               	goto	u190_23
  6859  01FC  0020               	movlb	0	; select bank0
  6860  01FD  0833               	movf	??_runVoltageModeControl+3,w
  6861  01FE  0021               	movlb	1	; select bank1
  6862  01FF  0223               	subwf	(_integratorScaledLimit+3)^(0+128),w
  6863  0200  1D03               	skipz
  6864  0201  2A12               	goto	u190_23
  6865  0202  0020               	movlb	0	; select bank0
  6866  0203  0832               	movf	??_runVoltageModeControl+2,w
  6867  0204  0021               	movlb	1	; select bank1
  6868  0205  0222               	subwf	(_integratorScaledLimit+2)^(0+128),w
  6869  0206  1D03               	skipz
  6870  0207  2A12               	goto	u190_23
  6871  0208  0020               	movlb	0	; select bank0
  6872  0209  0831               	movf	??_runVoltageModeControl+1,w
  6873  020A  0021               	movlb	1	; select bank1
  6874  020B  0221               	subwf	(_integratorScaledLimit+1)^(0+128),w
  6875  020C  1D03               	skipz
  6876  020D  2A12               	goto	u190_23
  6877  020E  0020               	movlb	0	; select bank0
  6878  020F  0830               	movf	??_runVoltageModeControl,w
  6879  0210  0021               	movlb	1	; select bank1
  6880  0211  0220               	subwf	_integratorScaledLimit^(0+128),w
  6881  0212                     u190_23:
  6882  0212  1803               	skipnc
  6883  0213  2A15               	goto	u190_21
  6884  0214  2A16               	goto	u190_20
  6885  0215                     u190_21:
  6886  0215  2A66               	goto	i1l2240
  6887  0216                     u190_20:
  6888  0216                     i1l2238:
  6889                           
  6890                           ;Controller.c: 120:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(integratorScaledLimit));
  6891  0216  3000               	movlw	0
  6892  0217  0020               	movlb	0	; select bank0
  6893  0218  00B0               	movwf	??_runVoltageModeControl
  6894  0219  3000               	movlw	0
  6895  021A  00B1               	movwf	??_runVoltageModeControl+1
  6896  021B  3000               	movlw	0
  6897  021C  00B2               	movwf	??_runVoltageModeControl+2
  6898  021D  3000               	movlw	0
  6899  021E  00B3               	movwf	??_runVoltageModeControl+3
  6900  021F  3000               	movlw	0
  6901  0220  00B4               	movwf	??_runVoltageModeControl+4
  6902  0221  3000               	movlw	0
  6903  0222  00B5               	movwf	??_runVoltageModeControl+5
  6904  0223  3000               	movlw	0
  6905  0224  00B6               	movwf	??_runVoltageModeControl+6
  6906  0225  3000               	movlw	0
  6907  0226  00B7               	movwf	??_runVoltageModeControl+7
  6908  0227  0021               	movlb	1	; select bank1
  6909  0228  0820               	movf	_integratorScaledLimit^(0+128),w
  6910  0229  0020               	movlb	0	; select bank0
  6911  022A  02B0               	subwf	??_runVoltageModeControl,f
  6912  022B  0021               	movlb	1	; select bank1
  6913  022C  0821               	movf	(_integratorScaledLimit+1)^(0+128),w
  6914  022D  0020               	movlb	0	; select bank0
  6915  022E  3BB1               	subwfb	??_runVoltageModeControl+1,f
  6916  022F  0021               	movlb	1	; select bank1
  6917  0230  0822               	movf	(_integratorScaledLimit+2)^(0+128),w
  6918  0231  0020               	movlb	0	; select bank0
  6919  0232  3BB2               	subwfb	??_runVoltageModeControl+2,f
  6920  0233  0021               	movlb	1	; select bank1
  6921  0234  0823               	movf	(_integratorScaledLimit+3)^(0+128),w
  6922  0235  0020               	movlb	0	; select bank0
  6923  0236  3BB3               	subwfb	??_runVoltageModeControl+3,f
  6924  0237  0021               	movlb	1	; select bank1
  6925  0238  0824               	movf	(_integratorScaledLimit+4)^(0+128),w
  6926  0239  0020               	movlb	0	; select bank0
  6927  023A  3BB4               	subwfb	??_runVoltageModeControl+4,f
  6928  023B  0021               	movlb	1	; select bank1
  6929  023C  0825               	movf	(_integratorScaledLimit+5)^(0+128),w
  6930  023D  0020               	movlb	0	; select bank0
  6931  023E  3BB5               	subwfb	??_runVoltageModeControl+5,f
  6932  023F  0021               	movlb	1	; select bank1
  6933  0240  0826               	movf	(_integratorScaledLimit+6)^(0+128),w
  6934  0241  0020               	movlb	0	; select bank0
  6935  0242  3BB6               	subwfb	??_runVoltageModeControl+6,f
  6936  0243  0021               	movlb	1	; select bank1
  6937  0244  0827               	movf	(_integratorScaledLimit+7)^(0+128),w
  6938  0245  0020               	movlb	0	; select bank0
  6939  0246  3BB7               	subwfb	??_runVoltageModeControl+7,f
  6940  0247  0837               	movf	??_runVoltageModeControl+7,w
  6941  0248  0021               	movlb	1	; select bank1
  6942  0249  00C9               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6943  024A  0020               	movlb	0	; select bank0
  6944  024B  0836               	movf	??_runVoltageModeControl+6,w
  6945  024C  0021               	movlb	1	; select bank1
  6946  024D  00C8               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6947  024E  0020               	movlb	0	; select bank0
  6948  024F  0835               	movf	??_runVoltageModeControl+5,w
  6949  0250  0021               	movlb	1	; select bank1
  6950  0251  00C7               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6951  0252  0020               	movlb	0	; select bank0
  6952  0253  0834               	movf	??_runVoltageModeControl+4,w
  6953  0254  0021               	movlb	1	; select bank1
  6954  0255  00C6               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6955  0256  0020               	movlb	0	; select bank0
  6956  0257  0833               	movf	??_runVoltageModeControl+3,w
  6957  0258  0021               	movlb	1	; select bank1
  6958  0259  00C5               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6959  025A  0020               	movlb	0	; select bank0
  6960  025B  0832               	movf	??_runVoltageModeControl+2,w
  6961  025C  0021               	movlb	1	; select bank1
  6962  025D  00C4               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6963  025E  0020               	movlb	0	; select bank0
  6964  025F  0831               	movf	??_runVoltageModeControl+1,w
  6965  0260  0021               	movlb	1	; select bank1
  6966  0261  00C3               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6967  0262  0020               	movlb	0	; select bank0
  6968  0263  0830               	movf	??_runVoltageModeControl,w
  6969  0264  0021               	movlb	1	; select bank1
  6970  0265  00C2               	movwf	(_voltageModeVariables^(0+128)+14)
  6971  0266                     i1l2240:
  6972                           
  6973                           ;Controller.c: 125:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 6u);
  6974  0266  300E               	movlw	14
  6975  0267  3EB4               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6976  0268  0086               	movwf	6
  6977  0269  0187               	clrf	7
  6978  026A  3F40               	moviw [0]fsr1
  6979  026B  0020               	movlb	0	; select bank0
  6980  026C  00B0               	movwf	??_runVoltageModeControl
  6981  026D  3F41               	moviw [1]fsr1
  6982  026E  00B1               	movwf	??_runVoltageModeControl+1
  6983  026F  3F42               	moviw [2]fsr1
  6984  0270  00B2               	movwf	??_runVoltageModeControl+2
  6985  0271  3F43               	moviw [3]fsr1
  6986  0272  00B3               	movwf	??_runVoltageModeControl+3
  6987  0273  3F44               	moviw [4]fsr1
  6988  0274  00B4               	movwf	??_runVoltageModeControl+4
  6989  0275  3F45               	moviw [5]fsr1
  6990  0276  00B5               	movwf	??_runVoltageModeControl+5
  6991  0277  3F46               	moviw [6]fsr1
  6992  0278  00B6               	movwf	??_runVoltageModeControl+6
  6993  0279  3F47               	moviw [7]fsr1
  6994  027A  00B7               	movwf	??_runVoltageModeControl+7
  6995  027B  3016               	movlw	22
  6996  027C  00B8               	movwf	??_runVoltageModeControl+8
  6997  027D                     u191_25:
  6998  027D  0020               	movlb	0	; select bank0
  6999  027E  37B7               	asrf	??_runVoltageModeControl+7,f
  7000  027F  0CB6               	rrf	??_runVoltageModeControl+6,f
  7001  0280  0CB5               	rrf	??_runVoltageModeControl+5,f
  7002  0281  0CB4               	rrf	??_runVoltageModeControl+4,f
  7003  0282  0CB3               	rrf	??_runVoltageModeControl+3,f
  7004  0283  0CB2               	rrf	??_runVoltageModeControl+2,f
  7005  0284  0CB1               	rrf	??_runVoltageModeControl+1,f
  7006  0285  0CB0               	rrf	??_runVoltageModeControl,f
  7007  0286                     u191_20:
  7008  0286  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7009  0287  2A7D               	goto	u191_25
  7010  0288  0020               	movlb	0	; select bank0
  7011  0289  0833               	movf	??_runVoltageModeControl+3,w
  7012  028A  0021               	movlb	1	; select bank1
  7013  028B  00C1               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7014  028C  0020               	movlb	0	; select bank0
  7015  028D  0832               	movf	??_runVoltageModeControl+2,w
  7016  028E  0021               	movlb	1	; select bank1
  7017  028F  00C0               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7018  0290  0020               	movlb	0	; select bank0
  7019  0291  0831               	movf	??_runVoltageModeControl+1,w
  7020  0292  0021               	movlb	1	; select bank1
  7021  0293  00BF               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7022  0294  0020               	movlb	0	; select bank0
  7023  0295  0830               	movf	??_runVoltageModeControl,w
  7024  0296  0021               	movlb	1	; select bank1
  7025  0297  00BE               	movwf	(_voltageModeVariables^(0+128)+10)
  7026  0298                     i1l2242:
  7027                           
  7028                           ;Controller.c: 128:    int64_t propMult = (int32_t) (18u * ((int32_t) voltageModeVariabl
      +                          es.error));
  7029  0298  0834               	movf	_voltageModeVariables^(0+128),w
  7030  0299  00F0               	movwf	___lmul@multiplier
  7031  029A  0835               	movf	(_voltageModeVariables+1)^(0+128),w
  7032  029B  00F1               	movwf	___lmul@multiplier+1
  7033  029C  0D89               	rlf	9,f
  7034  029D  3B89               	subwfb	9,f
  7035  029E  0989               	comf	9,f
  7036  029F  00F2               	movwf	___lmul@multiplier+2
  7037  02A0  00F3               	movwf	___lmul@multiplier+3
  7038  02A1  3000               	movlw	0
  7039  02A2  00F7               	movwf	___lmul@multiplicand+3
  7040  02A3  3000               	movlw	0
  7041  02A4  00F6               	movwf	___lmul@multiplicand+2
  7042  02A5  3000               	movlw	0
  7043  02A6  00F5               	movwf	___lmul@multiplicand+1
  7044  02A7  3012               	movlw	18
  7045  02A8  00F4               	movwf	___lmul@multiplicand
  7046  02A9  318D  2553  3180   	fcall	___lmul
  7047  02AC  0870               	movf	?___lmul,w
  7048  02AD  0020               	movlb	0	; select bank0
  7049  02AE  00C8               	movwf	runVoltageModeControl@propMult
  7050  02AF  0871               	movf	?___lmul+1,w
  7051  02B0  00C9               	movwf	runVoltageModeControl@propMult+1
  7052  02B1  0872               	movf	?___lmul+2,w
  7053  02B2  00CA               	movwf	runVoltageModeControl@propMult+2
  7054  02B3  0873               	movf	?___lmul+3,w
  7055  02B4  00CB               	movwf	runVoltageModeControl@propMult+3
  7056  02B5  3000               	movlw	0
  7057  02B6  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7058  02B7  30FF               	movlw	255
  7059  02B8  00CC               	movwf	runVoltageModeControl@propMult+4
  7060  02B9  00CD               	movwf	runVoltageModeControl@propMult+5
  7061  02BA  00CE               	movwf	runVoltageModeControl@propMult+6
  7062  02BB  00CF               	movwf	runVoltageModeControl@propMult+7
  7063  02BC                     i1l2244:
  7064                           
  7065                           ;Controller.c: 129:    voltageModeVariables.proportionalOutput = propMult >> 10u;
  7066  02BC  3048               	movlw	low runVoltageModeControl@propMult
  7067  02BD  0086               	movwf	6
  7068  02BE  3000               	movlw	high runVoltageModeControl@propMult
  7069  02BF  0087               	movwf	7
  7070  02C0  3F40               	moviw [0]fsr1
  7071  02C1  00B0               	movwf	??_runVoltageModeControl
  7072  02C2  3F41               	moviw [1]fsr1
  7073  02C3  00B1               	movwf	??_runVoltageModeControl+1
  7074  02C4  3F42               	moviw [2]fsr1
  7075  02C5  00B2               	movwf	??_runVoltageModeControl+2
  7076  02C6  3F43               	moviw [3]fsr1
  7077  02C7  00B3               	movwf	??_runVoltageModeControl+3
  7078  02C8  3F44               	moviw [4]fsr1
  7079  02C9  00B4               	movwf	??_runVoltageModeControl+4
  7080  02CA  3F45               	moviw [5]fsr1
  7081  02CB  00B5               	movwf	??_runVoltageModeControl+5
  7082  02CC  3F46               	moviw [6]fsr1
  7083  02CD  00B6               	movwf	??_runVoltageModeControl+6
  7084  02CE  3F47               	moviw [7]fsr1
  7085  02CF  00B7               	movwf	??_runVoltageModeControl+7
  7086  02D0  300A               	movlw	10
  7087  02D1  00B8               	movwf	??_runVoltageModeControl+8
  7088  02D2                     u192_25:
  7089  02D2  0020               	movlb	0	; select bank0
  7090  02D3  37B7               	asrf	??_runVoltageModeControl+7,f
  7091  02D4  0CB6               	rrf	??_runVoltageModeControl+6,f
  7092  02D5  0CB5               	rrf	??_runVoltageModeControl+5,f
  7093  02D6  0CB4               	rrf	??_runVoltageModeControl+4,f
  7094  02D7  0CB3               	rrf	??_runVoltageModeControl+3,f
  7095  02D8  0CB2               	rrf	??_runVoltageModeControl+2,f
  7096  02D9  0CB1               	rrf	??_runVoltageModeControl+1,f
  7097  02DA  0CB0               	rrf	??_runVoltageModeControl,f
  7098  02DB                     u192_20:
  7099  02DB  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7100  02DC  2AD2               	goto	u192_25
  7101  02DD  0020               	movlb	0	; select bank0
  7102  02DE  0833               	movf	??_runVoltageModeControl+3,w
  7103  02DF  0021               	movlb	1	; select bank1
  7104  02E0  00BD               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7105  02E1  0020               	movlb	0	; select bank0
  7106  02E2  0832               	movf	??_runVoltageModeControl+2,w
  7107  02E3  0021               	movlb	1	; select bank1
  7108  02E4  00BC               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7109  02E5  0020               	movlb	0	; select bank0
  7110  02E6  0831               	movf	??_runVoltageModeControl+1,w
  7111  02E7  0021               	movlb	1	; select bank1
  7112  02E8  00BB               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7113  02E9  0020               	movlb	0	; select bank0
  7114  02EA  0830               	movf	??_runVoltageModeControl,w
  7115  02EB  0021               	movlb	1	; select bank1
  7116  02EC  00BA               	movwf	(_voltageModeVariables^(0+128)+6)
  7117  02ED                     i1l2246:
  7118                           
  7119                           ;Controller.c: 131:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7120  02ED  083E               	movf	(_voltageModeVariables^(0+128)+10),w
  7121  02EE  073A               	addwf	(_voltageModeVariables^(0+128)+6),w
  7122  02EF  0020               	movlb	0	; select bank0
  7123  02F0  00B0               	movwf	??_runVoltageModeControl
  7124  02F1  0021               	movlb	1	; select bank1
  7125  02F2  083F               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7126  02F3  3D3B               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7127  02F4  0020               	movlb	0	; select bank0
  7128  02F5  00B1               	movwf	??_runVoltageModeControl+1
  7129  02F6  0021               	movlb	1	; select bank1
  7130  02F7  0840               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7131  02F8  3D3C               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7132  02F9  0020               	movlb	0	; select bank0
  7133  02FA  00B2               	movwf	??_runVoltageModeControl+2
  7134  02FB  0021               	movlb	1	; select bank1
  7135  02FC  0841               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7136  02FD  3D3D               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7137  02FE  0020               	movlb	0	; select bank0
  7138  02FF  00B3               	movwf	??_runVoltageModeControl+3
  7139  0300  0833               	movf	??_runVoltageModeControl+3,w
  7140  0301  0021               	movlb	1	; select bank1
  7141  0302  00CD               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7142  0303  0020               	movlb	0	; select bank0
  7143  0304  0832               	movf	??_runVoltageModeControl+2,w
  7144  0305  0021               	movlb	1	; select bank1
  7145  0306  00CC               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7146  0307  0020               	movlb	0	; select bank0
  7147  0308  0831               	movf	??_runVoltageModeControl+1,w
  7148  0309  0021               	movlb	1	; select bank1
  7149  030A  00CB               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7150  030B  0020               	movlb	0	; select bank0
  7151  030C  0830               	movf	??_runVoltageModeControl,w
  7152  030D  0021               	movlb	1	; select bank1
  7153  030E  00CA               	movwf	(_voltageModeVariables^(0+128)+22)
  7154  030F                     i1l2248:
  7155                           
  7156                           ;Controller.c: 132:    voltageModeVariables.previousError = voltageModeVariables.error;
  7157  030F  0835               	movf	(_voltageModeVariables+1)^(0+128),w
  7158  0310  00CF               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7159  0311  0834               	movf	_voltageModeVariables^(0+128),w
  7160  0312  00CE               	movwf	(_voltageModeVariables^(0+128)+26)
  7161  0313                     i1l454:
  7162  0313  0008               	return
  7163  0314                     __end_of_runVoltageModeControl:
  7164                           
  7165                           	psect	text31
  7166  0DBB                     __ptext31:	
  7167 ;; *************** function i1_readGPIO *****************
  7168 ;; Defined at:
  7169 ;;		line 79 in file "GPIO.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;  gpioNumber      1    wreg     const enum E2798
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7174 ;;  portType        1    7[COMMON] unsigned char 
  7175 ;;  portNumber      1    6[COMMON] unsigned char 
  7176 ;;  returnValueB    1    5[COMMON] unsigned char 
  7177 ;;  readB           1    4[COMMON] unsigned char 
  7178 ;;  returnValueA    1    3[COMMON] unsigned char 
  7179 ;;  readA           1    2[COMMON] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      _Bool 
  7182 ;; Registers used:
  7183 ;;		wreg, status,2, status,0
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7189 ;;      Params:         0       0       0       0       0       0
  7190 ;;      Locals:         7       0       0       0       0       0
  7191 ;;      Temps:          2       0       0       0       0       0
  7192 ;;      Totals:         9       0       0       0       0       0
  7193 ;;Total ram usage:        9 bytes
  7194 ;; Hardware stack levels used: 1
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_runVoltageModeControl
  7199 ;;		_currentTripRead
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203  0DBB                     i1_readGPIO:	
  7204                           ;psect for function i1_readGPIO
  7205                           
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7209                           ;i1readGPIO@gpioNumber stored from wreg
  7210  0DBB  00F8               	movwf	i1readGPIO@gpioNumber
  7211  0DBC                     i1l2078:
  7212                           
  7213                           ;GPIO.c: 81:     uint8_t portType = 0;
  7214  0DBC  01F7               	clrf	i1readGPIO@portType
  7215  0DBD                     i1l2080:
  7216                           
  7217                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7218  0DBD  3008               	movlw	8
  7219  0DBE  0278               	subwf	i1readGPIO@gpioNumber,w
  7220  0DBF  1C03               	skipc
  7221  0DC0  2DC2               	goto	u154_21
  7222  0DC1  2DC3               	goto	u154_20
  7223  0DC2                     u154_21:
  7224  0DC2  2DCB               	goto	i1l2086
  7225  0DC3                     u154_20:
  7226  0DC3                     i1l2082:
  7227                           
  7228                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7229  0DC3  0878               	movf	i1readGPIO@gpioNumber,w
  7230  0DC4  3EF8               	addlw	248
  7231  0DC5  00F0               	movwf	??i1_readGPIO
  7232  0DC6  0870               	movf	??i1_readGPIO,w
  7233  0DC7  00F6               	movwf	i1readGPIO@portNumber
  7234  0DC8                     i1l2084:
  7235                           
  7236                           ;GPIO.c: 84:         portType = 1;
  7237  0DC8  01F7               	clrf	i1readGPIO@portType
  7238  0DC9  0AF7               	incf	i1readGPIO@portType,f
  7239                           
  7240                           ;GPIO.c: 85:     }
  7241  0DCA  2DD0               	goto	i1l2090
  7242  0DCB                     i1l2086:
  7243                           
  7244                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7245  0DCB  0878               	movf	i1readGPIO@gpioNumber,w
  7246  0DCC  00F0               	movwf	??i1_readGPIO
  7247  0DCD  0870               	movf	??i1_readGPIO,w
  7248  0DCE  00F6               	movwf	i1readGPIO@portNumber
  7249  0DCF                     i1l2088:
  7250                           
  7251                           ;GPIO.c: 88:         portType = 0;
  7252  0DCF  01F7               	clrf	i1readGPIO@portType
  7253  0DD0                     i1l2090:
  7254                           
  7255                           ;GPIO.c: 91:     if(portType == 0){
  7256  0DD0  0877               	movf	i1readGPIO@portType,w
  7257  0DD1  1D03               	btfss	3,2
  7258  0DD2  2DD4               	goto	u155_21
  7259  0DD3  2DD5               	goto	u155_20
  7260  0DD4                     u155_21:
  7261  0DD4  2DE8               	goto	i1l2102
  7262  0DD5                     u155_20:
  7263  0DD5                     i1l2092:
  7264                           
  7265                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7266  0DD5  0020               	movlb	0	; select bank0
  7267  0DD6  080C               	movf	12,w	;volatile
  7268  0DD7  00F0               	movwf	??i1_readGPIO
  7269  0DD8  0870               	movf	??i1_readGPIO,w
  7270  0DD9  00F2               	movwf	i1readGPIO@readA
  7271  0DDA                     i1l2094:
  7272                           
  7273                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7274  0DDA  0872               	movf	i1readGPIO@readA,w
  7275  0DDB  00F0               	movwf	??i1_readGPIO
  7276  0DDC  0A76               	incf	i1readGPIO@portNumber,w
  7277  0DDD  2DDF               	goto	u156_24
  7278  0DDE                     u156_25:
  7279  0DDE  36F0               	lsrf	??i1_readGPIO,f
  7280  0DDF                     u156_24:
  7281  0DDF  0B89               	decfsz	9,f
  7282  0DE0  2DDE               	goto	u156_25
  7283  0DE1  0870               	movf	??i1_readGPIO,w
  7284  0DE2  3901               	andlw	1
  7285  0DE3  00F1               	movwf	??i1_readGPIO+1
  7286  0DE4  0871               	movf	??i1_readGPIO+1,w
  7287  0DE5  00F3               	movwf	i1readGPIO@returnValueA
  7288  0DE6                     i1l2096:
  7289                           
  7290                           ;GPIO.c: 94:         return returnValueA;
  7291  0DE6  0873               	movf	i1readGPIO@returnValueA,w
  7292  0DE7  2E01               	goto	i1l324
  7293  0DE8                     i1l2102:
  7294  0DE8  0377               	decf	i1readGPIO@portType,w
  7295  0DE9  1D03               	btfss	3,2
  7296  0DEA  2DEC               	goto	u157_21
  7297  0DEB  2DED               	goto	u157_20
  7298  0DEC                     u157_21:
  7299  0DEC  2E00               	goto	i1l2114
  7300  0DED                     u157_20:
  7301  0DED                     i1l2104:
  7302                           
  7303                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7304  0DED  0020               	movlb	0	; select bank0
  7305  0DEE  080D               	movf	13,w	;volatile
  7306  0DEF  00F0               	movwf	??i1_readGPIO
  7307  0DF0  0870               	movf	??i1_readGPIO,w
  7308  0DF1  00F4               	movwf	i1readGPIO@readB
  7309  0DF2                     i1l2106:
  7310                           
  7311                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7312  0DF2  0874               	movf	i1readGPIO@readB,w
  7313  0DF3  00F0               	movwf	??i1_readGPIO
  7314  0DF4  0A76               	incf	i1readGPIO@portNumber,w
  7315  0DF5  2DF7               	goto	u158_24
  7316  0DF6                     u158_25:
  7317  0DF6  36F0               	lsrf	??i1_readGPIO,f
  7318  0DF7                     u158_24:
  7319  0DF7  0B89               	decfsz	9,f
  7320  0DF8  2DF6               	goto	u158_25
  7321  0DF9  0870               	movf	??i1_readGPIO,w
  7322  0DFA  3901               	andlw	1
  7323  0DFB  00F1               	movwf	??i1_readGPIO+1
  7324  0DFC  0871               	movf	??i1_readGPIO+1,w
  7325  0DFD  00F5               	movwf	i1readGPIO@returnValueB
  7326  0DFE                     i1l2108:
  7327                           
  7328                           ;GPIO.c: 99:         return returnValueB;
  7329  0DFE  0875               	movf	i1readGPIO@returnValueB,w
  7330  0DFF  2E01               	goto	i1l324
  7331  0E00                     i1l2114:
  7332  0E00  3000               	movlw	0
  7333  0E01                     i1l324:
  7334  0E01  0008               	return
  7335  0E02                     __end_ofi1_readGPIO:
  7336                           
  7337                           	psect	text32
  7338  07C1                     __ptext32:	
  7339 ;; *************** function _convertRawToMilliVolts *****************
  7340 ;; Defined at:
  7341 ;;		line 53 in file "Controller.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  rawValue        2   12[COMMON] unsigned short 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  vsenseMult      4    5[BANK0 ] long 
  7346 ;;  returnValued    2   11[BANK0 ] short 
  7347 ;;  offsetted       2    9[BANK0 ] short 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  2   12[COMMON] short 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7357 ;;      Params:         2       0       0       0       0       0
  7358 ;;      Locals:         0       8       0       0       0       0
  7359 ;;      Temps:          0       5       0       0       0       0
  7360 ;;      Totals:         2      13       0       0       0       0
  7361 ;;Total ram usage:       15 bytes
  7362 ;; Hardware stack levels used: 1
  7363 ;; Hardware stack levels required when called: 1
  7364 ;; This function calls:
  7365 ;;		___lmul
  7366 ;; This function is called by:
  7367 ;;		_runVoltageModeControl
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371  07C1                     _convertRawToMilliVolts:	
  7372                           ;psect for function _convertRawToMilliVolts
  7373                           
  7374  07C1                     i1l2026:	
  7375                           ;incstack = 0
  7376                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7377                           
  7378                           
  7379                           ;Controller.c: 54:     int16_t offsetted = (int16_t)(rawValue) - 0u;
  7380  07C1  087D               	movf	convertRawToMilliVolts@rawValue+1,w
  7381  07C2  0020               	movlb	0	; select bank0
  7382  07C3  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7383  07C4  087C               	movf	convertRawToMilliVolts@rawValue,w
  7384  07C5  00A9               	movwf	convertRawToMilliVolts@offsetted
  7385  07C6                     i1l2028:
  7386                           
  7387                           ;Controller.c: 55:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7388  07C6  0829               	movf	convertRawToMilliVolts@offsetted,w
  7389  07C7  00F0               	movwf	___lmul@multiplier
  7390  07C8  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7391  07C9  00F1               	movwf	___lmul@multiplier+1
  7392  07CA  0D89               	rlf	9,f
  7393  07CB  3B89               	subwfb	9,f
  7394  07CC  0989               	comf	9,f
  7395  07CD  00F2               	movwf	___lmul@multiplier+2
  7396  07CE  00F3               	movwf	___lmul@multiplier+3
  7397  07CF  3000               	movlw	0
  7398  07D0  00F7               	movwf	___lmul@multiplicand+3
  7399  07D1  3000               	movlw	0
  7400  07D2  00F6               	movwf	___lmul@multiplicand+2
  7401  07D3  3017               	movlw	23
  7402  07D4  00F5               	movwf	___lmul@multiplicand+1
  7403  07D5  30D4               	movlw	212
  7404  07D6  00F4               	movwf	___lmul@multiplicand
  7405  07D7  318D  2553  3187   	fcall	___lmul
  7406  07DA  0873               	movf	?___lmul+3,w
  7407  07DB  0020               	movlb	0	; select bank0
  7408  07DC  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7409  07DD  0872               	movf	?___lmul+2,w
  7410  07DE  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7411  07DF  0871               	movf	?___lmul+1,w
  7412  07E0  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7413  07E1  0870               	movf	?___lmul,w
  7414  07E2  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7415  07E3                     i1l2030:
  7416                           
  7417                           ;Controller.c: 56:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7418  07E3  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7419  07E4  00A0               	movwf	??_convertRawToMilliVolts
  7420  07E5  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7421  07E6  00A1               	movwf	??_convertRawToMilliVolts+1
  7422  07E7  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7423  07E8  00A2               	movwf	??_convertRawToMilliVolts+2
  7424  07E9  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7425  07EA  00A3               	movwf	??_convertRawToMilliVolts+3
  7426  07EB  3008               	movlw	8
  7427  07EC  00A4               	movwf	??_convertRawToMilliVolts+4
  7428  07ED                     u140_25:
  7429  07ED  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7430  07EE  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7431  07EF  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7432  07F0  0CA0               	rrf	??_convertRawToMilliVolts,f
  7433  07F1                     u140_20:
  7434  07F1  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7435  07F2  2FED               	goto	u140_25
  7436  07F3  0821               	movf	??_convertRawToMilliVolts+1,w
  7437  07F4  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7438  07F5  0820               	movf	??_convertRawToMilliVolts,w
  7439  07F6  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7440  07F7                     i1l2032:
  7441                           
  7442                           ;Controller.c: 57:     return returnValuedV;
  7443  07F7  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7444  07F8  00FD               	movwf	?_convertRawToMilliVolts+1
  7445  07F9  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7446  07FA  00FC               	movwf	?_convertRawToMilliVolts
  7447  07FB                     i1l438:
  7448  07FB  0008               	return
  7449  07FC                     __end_of_convertRawToMilliVolts:
  7450                           
  7451                           	psect	text33
  7452  0D53                     __ptext33:	
  7453 ;; *************** function ___lmul *****************
  7454 ;; Defined at:
  7455 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  multiplier      4    0[COMMON] unsigned long 
  7458 ;;  multiplicand    4    4[COMMON] unsigned long 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  product         4    8[COMMON] unsigned long 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  4    0[COMMON] unsigned long 
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7470 ;;      Params:         8       0       0       0       0       0
  7471 ;;      Locals:         4       0       0       0       0       0
  7472 ;;      Temps:          0       0       0       0       0       0
  7473 ;;      Totals:        12       0       0       0       0       0
  7474 ;;Total ram usage:       12 bytes
  7475 ;; Hardware stack levels used: 1
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_runPotScaling
  7480 ;;		_convertRawToMilliVolts
  7481 ;;		_runVoltageModeControl
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485  0D53                     ___lmul:	
  7486                           ;psect for function ___lmul
  7487                           
  7488  0D53                     i1l1984:	
  7489                           ;incstack = 0
  7490                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7491                           
  7492  0D53  3000               	movlw	0
  7493  0D54  00FB               	movwf	___lmul@product+3
  7494  0D55  3000               	movlw	0
  7495  0D56  00FA               	movwf	___lmul@product+2
  7496  0D57  3000               	movlw	0
  7497  0D58  00F9               	movwf	___lmul@product+1
  7498  0D59  3000               	movlw	0
  7499  0D5A  00F8               	movwf	___lmul@product
  7500  0D5B                     i1l1986:
  7501  0D5B  1C70               	btfss	___lmul@multiplier,0
  7502  0D5C  2D5E               	goto	u127_21
  7503  0D5D  2D5F               	goto	u127_20
  7504  0D5E                     u127_21:
  7505  0D5E  2D67               	goto	i1l1990
  7506  0D5F                     u127_20:
  7507  0D5F                     i1l1988:
  7508  0D5F  0874               	movf	___lmul@multiplicand,w
  7509  0D60  07F8               	addwf	___lmul@product,f
  7510  0D61  0875               	movf	___lmul@multiplicand+1,w
  7511  0D62  3DF9               	addwfc	___lmul@product+1,f
  7512  0D63  0876               	movf	___lmul@multiplicand+2,w
  7513  0D64  3DFA               	addwfc	___lmul@product+2,f
  7514  0D65  0877               	movf	___lmul@multiplicand+3,w
  7515  0D66  3DFB               	addwfc	___lmul@product+3,f
  7516  0D67                     i1l1990:
  7517  0D67  3001               	movlw	1
  7518  0D68                     u128_25:
  7519  0D68  35F4               	lslf	___lmul@multiplicand,f
  7520  0D69  0DF5               	rlf	___lmul@multiplicand+1,f
  7521  0D6A  0DF6               	rlf	___lmul@multiplicand+2,f
  7522  0D6B  0DF7               	rlf	___lmul@multiplicand+3,f
  7523  0D6C  0B89               	decfsz	9,f
  7524  0D6D  2D68               	goto	u128_25
  7525  0D6E                     i1l1992:
  7526  0D6E  3001               	movlw	1
  7527  0D6F                     u129_25:
  7528  0D6F  36F3               	lsrf	___lmul@multiplier+3,f
  7529  0D70  0CF2               	rrf	___lmul@multiplier+2,f
  7530  0D71  0CF1               	rrf	___lmul@multiplier+1,f
  7531  0D72  0CF0               	rrf	___lmul@multiplier,f
  7532  0D73  0B89               	decfsz	9,f
  7533  0D74  2D6F               	goto	u129_25
  7534  0D75  0873               	movf	___lmul@multiplier+3,w
  7535  0D76  0472               	iorwf	___lmul@multiplier+2,w
  7536  0D77  0471               	iorwf	___lmul@multiplier+1,w
  7537  0D78  0470               	iorwf	___lmul@multiplier,w
  7538  0D79  1D03               	skipz
  7539  0D7A  2D7C               	goto	u130_21
  7540  0D7B  2D7D               	goto	u130_20
  7541  0D7C                     u130_21:
  7542  0D7C  2D5B               	goto	i1l1986
  7543  0D7D                     u130_20:
  7544  0D7D                     i1l1994:
  7545  0D7D  087B               	movf	___lmul@product+3,w
  7546  0D7E  00F3               	movwf	?___lmul+3
  7547  0D7F  087A               	movf	___lmul@product+2,w
  7548  0D80  00F2               	movwf	?___lmul+2
  7549  0D81  0879               	movf	___lmul@product+1,w
  7550  0D82  00F1               	movwf	?___lmul+1
  7551  0D83  0878               	movf	___lmul@product,w
  7552  0D84  00F0               	movwf	?___lmul
  7553  0D85                     i1l725:
  7554  0D85  0008               	return
  7555  0D86                     __end_of___lmul:
  7556                           
  7557                           	psect	text34
  7558  0C45                     __ptext34:	
  7559 ;; *************** function _abs *****************
  7560 ;; Defined at:
  7561 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  a               2    0[COMMON] int 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  2    0[COMMON] int 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7575 ;;      Params:         2       0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0
  7577 ;;      Temps:          2       0       0       0       0       0
  7578 ;;      Totals:         4       0       0       0       0       0
  7579 ;;Total ram usage:        4 bytes
  7580 ;; Hardware stack levels used: 1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_runVoltageModeControl
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588  0C45                     _abs:	
  7589                           ;psect for function _abs
  7590                           
  7591  0C45                     i1l2036:	
  7592                           ;incstack = 0
  7593                           ; Regs used in _abs: [wreg+status,2+status,0]
  7594                           
  7595  0C45  0871               	movf	abs@a+1,w
  7596  0C46  3A80               	xorlw	128
  7597  0C47  00F2               	movwf	??_abs
  7598  0C48  3080               	movlw	128
  7599  0C49  0272               	subwf	??_abs,w
  7600  0C4A  1D03               	skipz
  7601  0C4B  2C4E               	goto	u141_25
  7602  0C4C  3001               	movlw	1
  7603  0C4D  0270               	subwf	abs@a,w
  7604  0C4E                     u141_25:
  7605  0C4E  1803               	skipnc
  7606  0C4F  2C51               	goto	u141_21
  7607  0C50  2C52               	goto	u141_20
  7608  0C51                     u141_21:
  7609  0C51  2C5E               	goto	i1l1171
  7610  0C52                     u141_20:
  7611  0C52                     i1l2038:
  7612  0C52  0970               	comf	abs@a,w
  7613  0C53  00F2               	movwf	??_abs
  7614  0C54  0971               	comf	abs@a+1,w
  7615  0C55  00F3               	movwf	??_abs+1
  7616  0C56  0AF2               	incf	??_abs,f
  7617  0C57  1903               	skipnz
  7618  0C58  0AF3               	incf	??_abs+1,f
  7619  0C59  0872               	movf	??_abs,w
  7620  0C5A  00F0               	movwf	?_abs
  7621  0C5B  0873               	movf	??_abs+1,w
  7622  0C5C  00F1               	movwf	?_abs+1
  7623  0C5D  2C5E               	goto	i1l1174
  7624  0C5E                     i1l1171:
  7625  0C5E                     i1l1174:
  7626  0C5E  0008               	return
  7627  0C5F                     __end_of_abs:
  7628                           
  7629                           	psect	text35
  7630  0E4C                     __ptext35:	
  7631 ;; *************** function ___omul *****************
  7632 ;; Defined at:
  7633 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7636 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  product         8    1[COMMON] unsigned long long 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  8    0[BANK0 ] unsigned long long 
  7641 ;; Registers used:
  7642 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7648 ;;      Params:         0      16       0       0       0       0
  7649 ;;      Locals:         8       0       0       0       0       0
  7650 ;;      Temps:          1       0       0       0       0       0
  7651 ;;      Totals:         9      16       0       0       0       0
  7652 ;;Total ram usage:       25 bytes
  7653 ;; Hardware stack levels used: 1
  7654 ;; This function calls:
  7655 ;;		Nothing
  7656 ;; This function is called by:
  7657 ;;		_runVoltageModeControl
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661  0E4C                     ___omul:	
  7662                           ;psect for function ___omul
  7663                           
  7664  0E4C                     i1l2040:	
  7665                           ;incstack = 0
  7666                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7667                           
  7668  0E4C  3071               	movlw	low ___omul@product
  7669  0E4D  0086               	movwf	6
  7670  0E4E  3000               	movlw	high ___omul@product
  7671  0E4F  0087               	movwf	7
  7672  0E50  3008               	movlw	8
  7673  0E51  00F0               	movwf	??___omul
  7674  0E52  3000               	movlw	0
  7675  0E53                     u142_20:
  7676  0E53  001E               	movwi fsr1++
  7677  0E54  0BF0               	decfsz	??___omul,f
  7678  0E55  2E53               	goto	u142_20
  7679  0E56                     i1l2042:
  7680  0E56  0020               	movlb	0	; select bank0
  7681  0E57  1C20               	btfss	___omul@multiplier,0
  7682  0E58  2E5A               	goto	u143_21
  7683  0E59  2E5B               	goto	u143_20
  7684  0E5A                     u143_21:
  7685  0E5A  2E6B               	goto	i1l2046
  7686  0E5B                     u143_20:
  7687  0E5B                     i1l2044:
  7688  0E5B  0828               	movf	___omul@multiplicand,w
  7689  0E5C  07F1               	addwf	___omul@product,f
  7690  0E5D  0829               	movf	___omul@multiplicand+1,w
  7691  0E5E  3DF2               	addwfc	___omul@product+1,f
  7692  0E5F  082A               	movf	___omul@multiplicand+2,w
  7693  0E60  3DF3               	addwfc	___omul@product+2,f
  7694  0E61  082B               	movf	___omul@multiplicand+3,w
  7695  0E62  3DF4               	addwfc	___omul@product+3,f
  7696  0E63  082C               	movf	___omul@multiplicand+4,w
  7697  0E64  3DF5               	addwfc	___omul@product+4,f
  7698  0E65  082D               	movf	___omul@multiplicand+5,w
  7699  0E66  3DF6               	addwfc	___omul@product+5,f
  7700  0E67  082E               	movf	___omul@multiplicand+6,w
  7701  0E68  3DF7               	addwfc	___omul@product+6,f
  7702  0E69  082F               	movf	___omul@multiplicand+7,w
  7703  0E6A  3DF8               	addwfc	___omul@product+7,f
  7704  0E6B                     i1l2046:
  7705  0E6B  35A8               	lslf	___omul@multiplicand,f
  7706  0E6C  0DA9               	rlf	___omul@multiplicand+1,f
  7707  0E6D  0DAA               	rlf	___omul@multiplicand+2,f
  7708  0E6E  0DAB               	rlf	___omul@multiplicand+3,f
  7709  0E6F  0DAC               	rlf	___omul@multiplicand+4,f
  7710  0E70  0DAD               	rlf	___omul@multiplicand+5,f
  7711  0E71  0DAE               	rlf	___omul@multiplicand+6,f
  7712  0E72  0DAF               	rlf	___omul@multiplicand+7,f
  7713  0E73                     i1l2048:
  7714  0E73  36A7               	lsrf	___omul@multiplier+7,f
  7715  0E74  0CA6               	rrf	___omul@multiplier+6,f
  7716  0E75  0CA5               	rrf	___omul@multiplier+5,f
  7717  0E76  0CA4               	rrf	___omul@multiplier+4,f
  7718  0E77  0CA3               	rrf	___omul@multiplier+3,f
  7719  0E78  0CA2               	rrf	___omul@multiplier+2,f
  7720  0E79  0CA1               	rrf	___omul@multiplier+1,f
  7721  0E7A  0CA0               	rrf	___omul@multiplier,f
  7722  0E7B  0820               	movf	___omul@multiplier,w
  7723  0E7C  0421               	iorwf	___omul@multiplier+1,w
  7724  0E7D  0422               	iorwf	___omul@multiplier+2,w
  7725  0E7E  0423               	iorwf	___omul@multiplier+3,w
  7726  0E7F  0424               	iorwf	___omul@multiplier+4,w
  7727  0E80  0425               	iorwf	___omul@multiplier+5,w
  7728  0E81  0426               	iorwf	___omul@multiplier+6,w
  7729  0E82  0427               	iorwf	___omul@multiplier+7,w
  7730  0E83  1D03               	skipz
  7731  0E84  2E86               	goto	u144_21
  7732  0E85  2E87               	goto	u144_20
  7733  0E86                     u144_21:
  7734  0E86  2E56               	goto	i1l2042
  7735  0E87                     u144_20:
  7736  0E87                     i1l730:
  7737  0E87  0871               	movf	___omul@product,w
  7738  0E88  00A0               	movwf	?___omul
  7739  0E89  0872               	movf	___omul@product+1,w
  7740  0E8A  00A1               	movwf	?___omul+1
  7741  0E8B  0873               	movf	___omul@product+2,w
  7742  0E8C  00A2               	movwf	?___omul+2
  7743  0E8D  0874               	movf	___omul@product+3,w
  7744  0E8E  00A3               	movwf	?___omul+3
  7745  0E8F  0875               	movf	___omul@product+4,w
  7746  0E90  00A4               	movwf	?___omul+4
  7747  0E91  0876               	movf	___omul@product+5,w
  7748  0E92  00A5               	movwf	?___omul+5
  7749  0E93  0877               	movf	___omul@product+6,w
  7750  0E94  00A6               	movwf	?___omul+6
  7751  0E95  0878               	movf	___omul@product+7,w
  7752  0E96  00A7               	movwf	?___omul+7
  7753  0E97                     i1l731:
  7754  0E97  0008               	return
  7755  0E98                     __end_of___omul:
  7756                           
  7757                           	psect	text36
  7758  0C98                     __ptext36:	
  7759 ;; *************** function ___wmul *****************
  7760 ;; Defined at:
  7761 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  multiplier      2    0[COMMON] unsigned int 
  7764 ;;  multiplicand    2    2[COMMON] unsigned int 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  product         2    4[COMMON] unsigned int 
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  2    0[COMMON] unsigned int 
  7769 ;; Registers used:
  7770 ;;		wreg, status,2, status,0
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7776 ;;      Params:         4       0       0       0       0       0
  7777 ;;      Locals:         2       0       0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0
  7779 ;;      Totals:         6       0       0       0       0       0
  7780 ;;Total ram usage:        6 bytes
  7781 ;; Hardware stack levels used: 1
  7782 ;; This function calls:
  7783 ;;		Nothing
  7784 ;; This function is called by:
  7785 ;;		_runPotScaling
  7786 ;;		_controlRoutine
  7787 ;;		_convertRawToMilliAmps
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791  0C98                     ___wmul:	
  7792                           ;psect for function ___wmul
  7793                           
  7794  0C98                     i1l2272:	
  7795                           ;incstack = 0
  7796                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7797                           
  7798  0C98  01F4               	clrf	___wmul@product
  7799  0C99  01F5               	clrf	___wmul@product+1
  7800  0C9A                     i1l2274:
  7801  0C9A  1C70               	btfss	___wmul@multiplier,0
  7802  0C9B  2C9D               	goto	u199_21
  7803  0C9C  2C9E               	goto	u199_20
  7804  0C9D                     u199_21:
  7805  0C9D  2CA2               	goto	i1l711
  7806  0C9E                     u199_20:
  7807  0C9E                     i1l2276:
  7808  0C9E  0872               	movf	___wmul@multiplicand,w
  7809  0C9F  07F4               	addwf	___wmul@product,f
  7810  0CA0  0873               	movf	___wmul@multiplicand+1,w
  7811  0CA1  3DF5               	addwfc	___wmul@product+1,f
  7812  0CA2                     i1l711:
  7813  0CA2  3001               	movlw	1
  7814  0CA3                     u200_25:
  7815  0CA3  35F2               	lslf	___wmul@multiplicand,f
  7816  0CA4  0DF3               	rlf	___wmul@multiplicand+1,f
  7817  0CA5  0B89               	decfsz	9,f
  7818  0CA6  2CA3               	goto	u200_25
  7819  0CA7                     i1l2278:
  7820  0CA7  3001               	movlw	1
  7821  0CA8                     u201_25:
  7822  0CA8  36F1               	lsrf	___wmul@multiplier+1,f
  7823  0CA9  0CF0               	rrf	___wmul@multiplier,f
  7824  0CAA  0B89               	decfsz	9,f
  7825  0CAB  2CA8               	goto	u201_25
  7826  0CAC                     i1l2280:
  7827  0CAC  0870               	movf	___wmul@multiplier,w
  7828  0CAD  0471               	iorwf	___wmul@multiplier+1,w
  7829  0CAE  1D03               	btfss	3,2
  7830  0CAF  2CB1               	goto	u202_21
  7831  0CB0  2CB2               	goto	u202_20
  7832  0CB1                     u202_21:
  7833  0CB1  2C9A               	goto	i1l2274
  7834  0CB2                     u202_20:
  7835  0CB2                     i1l2282:
  7836  0CB2  0875               	movf	___wmul@product+1,w
  7837  0CB3  00F1               	movwf	?___wmul+1
  7838  0CB4  0874               	movf	___wmul@product,w
  7839  0CB5  00F0               	movwf	?___wmul
  7840  0CB6                     i1l713:
  7841  0CB6  0008               	return
  7842  0CB7                     __end_of___wmul:
  7843                           
  7844                           	psect	text37
  7845  0F4A                     __ptext37:	
  7846 ;; *************** function ___lldiv *****************
  7847 ;; Defined at:
  7848 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  divisor         4    6[COMMON] unsigned long 
  7851 ;;  dividend        4   10[COMMON] unsigned long 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;  quotient        4    1[BANK0 ] unsigned long 
  7854 ;;  counter         1    5[BANK0 ] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  4    6[COMMON] unsigned long 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7864 ;;      Params:         8       0       0       0       0       0
  7865 ;;      Locals:         0       5       0       0       0       0
  7866 ;;      Temps:          0       1       0       0       0       0
  7867 ;;      Totals:         8       6       0       0       0       0
  7868 ;;Total ram usage:       14 bytes
  7869 ;; Hardware stack levels used: 1
  7870 ;; This function calls:
  7871 ;;		Nothing
  7872 ;; This function is called by:
  7873 ;;		_runPotScaling
  7874 ;;		_controlRoutine
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878  0F4A                     ___lldiv:	
  7879                           ;psect for function ___lldiv
  7880                           
  7881  0F4A                     i1l2286:	
  7882                           ;incstack = 0
  7883                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7884                           
  7885  0F4A  3000               	movlw	0
  7886  0F4B  0020               	movlb	0	; select bank0
  7887  0F4C  00A4               	movwf	___lldiv@quotient+3
  7888  0F4D  3000               	movlw	0
  7889  0F4E  00A3               	movwf	___lldiv@quotient+2
  7890  0F4F  3000               	movlw	0
  7891  0F50  00A2               	movwf	___lldiv@quotient+1
  7892  0F51  3000               	movlw	0
  7893  0F52  00A1               	movwf	___lldiv@quotient
  7894  0F53  0879               	movf	___lldiv@divisor+3,w
  7895  0F54  0478               	iorwf	___lldiv@divisor+2,w
  7896  0F55  0477               	iorwf	___lldiv@divisor+1,w
  7897  0F56  0476               	iorwf	___lldiv@divisor,w
  7898  0F57  1903               	skipnz
  7899  0F58  2F5A               	goto	u203_21
  7900  0F59  2F5B               	goto	u203_20
  7901  0F5A                     u203_21:
  7902  0F5A  2F9C               	goto	i1l2306
  7903  0F5B                     u203_20:
  7904  0F5B                     i1l2288:
  7905  0F5B  01A5               	clrf	___lldiv@counter
  7906  0F5C  0AA5               	incf	___lldiv@counter,f
  7907  0F5D  2F69               	goto	i1l2292
  7908  0F5E                     i1l2290:
  7909  0F5E  3001               	movlw	1
  7910  0F5F                     u204_25:
  7911  0F5F  35F6               	lslf	___lldiv@divisor,f
  7912  0F60  0DF7               	rlf	___lldiv@divisor+1,f
  7913  0F61  0DF8               	rlf	___lldiv@divisor+2,f
  7914  0F62  0DF9               	rlf	___lldiv@divisor+3,f
  7915  0F63  0B89               	decfsz	9,f
  7916  0F64  2F5F               	goto	u204_25
  7917  0F65  3001               	movlw	1
  7918  0F66  00A0               	movwf	??___lldiv
  7919  0F67  0820               	movf	??___lldiv,w
  7920  0F68  07A5               	addwf	___lldiv@counter,f
  7921  0F69                     i1l2292:
  7922  0F69  1FF9               	btfss	___lldiv@divisor+3,7
  7923  0F6A  2F6C               	goto	u205_21
  7924  0F6B  2F6D               	goto	u205_20
  7925  0F6C                     u205_21:
  7926  0F6C  2F5E               	goto	i1l2290
  7927  0F6D                     u205_20:
  7928  0F6D                     i1l2294:
  7929  0F6D  3001               	movlw	1
  7930  0F6E                     u206_25:
  7931  0F6E  35A1               	lslf	___lldiv@quotient,f
  7932  0F6F  0DA2               	rlf	___lldiv@quotient+1,f
  7933  0F70  0DA3               	rlf	___lldiv@quotient+2,f
  7934  0F71  0DA4               	rlf	___lldiv@quotient+3,f
  7935  0F72  0B89               	decfsz	9,f
  7936  0F73  2F6E               	goto	u206_25
  7937  0F74                     i1l2296:
  7938  0F74  0879               	movf	___lldiv@divisor+3,w
  7939  0F75  027D               	subwf	___lldiv@dividend+3,w
  7940  0F76  1D03               	skipz
  7941  0F77  2F82               	goto	u207_25
  7942  0F78  0878               	movf	___lldiv@divisor+2,w
  7943  0F79  027C               	subwf	___lldiv@dividend+2,w
  7944  0F7A  1D03               	skipz
  7945  0F7B  2F82               	goto	u207_25
  7946  0F7C  0877               	movf	___lldiv@divisor+1,w
  7947  0F7D  027B               	subwf	___lldiv@dividend+1,w
  7948  0F7E  1D03               	skipz
  7949  0F7F  2F82               	goto	u207_25
  7950  0F80  0876               	movf	___lldiv@divisor,w
  7951  0F81  027A               	subwf	___lldiv@dividend,w
  7952  0F82                     u207_25:
  7953  0F82  1C03               	skipc
  7954  0F83  2F85               	goto	u207_21
  7955  0F84  2F86               	goto	u207_20
  7956  0F85                     u207_21:
  7957  0F85  2F8F               	goto	i1l2302
  7958  0F86                     u207_20:
  7959  0F86                     i1l2298:
  7960  0F86  0876               	movf	___lldiv@divisor,w
  7961  0F87  02FA               	subwf	___lldiv@dividend,f
  7962  0F88  0877               	movf	___lldiv@divisor+1,w
  7963  0F89  3BFB               	subwfb	___lldiv@dividend+1,f
  7964  0F8A  0878               	movf	___lldiv@divisor+2,w
  7965  0F8B  3BFC               	subwfb	___lldiv@dividend+2,f
  7966  0F8C  0879               	movf	___lldiv@divisor+3,w
  7967  0F8D  3BFD               	subwfb	___lldiv@dividend+3,f
  7968  0F8E                     i1l2300:
  7969  0F8E  1421               	bsf	___lldiv@quotient,0
  7970  0F8F                     i1l2302:
  7971  0F8F  3001               	movlw	1
  7972  0F90                     u208_25:
  7973  0F90  36F9               	lsrf	___lldiv@divisor+3,f
  7974  0F91  0CF8               	rrf	___lldiv@divisor+2,f
  7975  0F92  0CF7               	rrf	___lldiv@divisor+1,f
  7976  0F93  0CF6               	rrf	___lldiv@divisor,f
  7977  0F94  0B89               	decfsz	9,f
  7978  0F95  2F90               	goto	u208_25
  7979  0F96                     i1l2304:
  7980  0F96  3001               	movlw	1
  7981  0F97  02A5               	subwf	___lldiv@counter,f
  7982  0F98  1D03               	btfss	3,2
  7983  0F99  2F9B               	goto	u209_21
  7984  0F9A  2F9C               	goto	u209_20
  7985  0F9B                     u209_21:
  7986  0F9B  2F6D               	goto	i1l2294
  7987  0F9C                     u209_20:
  7988  0F9C                     i1l2306:
  7989  0F9C  0824               	movf	___lldiv@quotient+3,w
  7990  0F9D  00F9               	movwf	?___lldiv+3
  7991  0F9E  0823               	movf	___lldiv@quotient+2,w
  7992  0F9F  00F8               	movwf	?___lldiv+2
  7993  0FA0  0822               	movf	___lldiv@quotient+1,w
  7994  0FA1  00F7               	movwf	?___lldiv+1
  7995  0FA2  0821               	movf	___lldiv@quotient,w
  7996  0FA3  00F6               	movwf	?___lldiv
  7997  0FA4                     i1l747:
  7998  0FA4  0008               	return
  7999  0FA5                     __end_of___lldiv:
  8000  007E                     btemp	set	126	;btemp
  8001  007E                     int$flags	set	126
  8002  007E                     wtemp0	set	126
  8003                           
  8004                           	psect	idloc
  8005                           
  8006                           ;Config register IDLOC0 @ 0x8000
  8007                           ;	unspecified, using default values
  8008  8000                     	org	32768
  8009  8000  3FFF               	dw	16383
  8010                           
  8011                           ;Config register IDLOC1 @ 0x8001
  8012                           ;	unspecified, using default values
  8013  8001                     	org	32769
  8014  8001  3FFF               	dw	16383
  8015                           
  8016                           ;Config register IDLOC2 @ 0x8002
  8017                           ;	unspecified, using default values
  8018  8002                     	org	32770
  8019  8002  3FFF               	dw	16383
  8020                           
  8021                           ;Config register IDLOC3 @ 0x8003
  8022                           ;	unspecified, using default values
  8023  8003                     	org	32771
  8024  8003  3FFF               	dw	16383
  8025                           
  8026                           	psect	config
  8027                           
  8028                           ;Config register CONFIG1 @ 0x8007
  8029                           ;	Oscillator Selection
  8030                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8031                           ;	Watchdog Timer Enable
  8032                           ;	WDTE = OFF, WDT disabled
  8033                           ;	Power-up Timer Enable
  8034                           ;	PWRTE = OFF, PWRT disabled
  8035                           ;	MCLR Pin Function Select
  8036                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8037                           ;	Flash Program Memory Code Protection
  8038                           ;	CP = OFF, Program memory code protection is disabled
  8039                           ;	Data Memory Code Protection
  8040                           ;	CPD = OFF, Data memory code protection is disabled
  8041                           ;	Brown-out Reset Enable
  8042                           ;	BOREN = ON, Brown-out Reset enabled
  8043                           ;	Clock Out Enable
  8044                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8045                           ;	Internal/External Switchover
  8046                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8047                           ;	Fail-Safe Clock Monitor Enable
  8048                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8049  8007                     	org	32775
  8050  8007  0FA4               	dw	4004
  8051                           
  8052                           ;Config register CONFIG2 @ 0x8008
  8053                           ;	Flash Memory Self-Write Protection
  8054                           ;	WRT = OFF, Write protection off
  8055                           ;	PLL Enable
  8056                           ;	PLLEN = OFF, 4x PLL disabled
  8057                           ;	Stack Overflow/Underflow Reset Enable
  8058                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8059                           ;	Brown-out Reset Voltage Selection
  8060                           ;	BORV = 0x1, unprogrammed default
  8061                           ;	Low-Voltage Programming Enable
  8062                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8063  8008                     	org	32776
  8064  8008  1CFF               	dw	7423

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         226
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      79
    BANK1            80     13      61
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick490Hz in COMMON

    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripMonitor->_currentTripRead
    i1_currentTripReset->i1_writeGPIO
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick490Hz in BANK0

    _Tick490Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick490Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick490Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick490Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick490Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5039
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     824
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1747
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     650
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     650
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1097
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     824
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick490Hz                                            1     1      0    9841
                                             60 BANK0      1     1      0
                     _controlRoutine
                 _currentTripMonitor
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                      _runPotScaling
                _setPWMDutyandPeriod
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    2716
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     411
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          10     8      2     229
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (5) _currentTripMonitor                                   1     1      0     706
                                             11 COMMON     1     1      0
                    _currentTripRead
            _transToOverCurrentFault
                 i1_currentTripReset
 ---------------------------------------------------------------------------------
 (6) i1_currentTripReset                                   0     0      0     430
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     430
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      10    10      0    4334
                                             50 BANK0     10    10      0
                            ___lldiv
                             ___wmul
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    2296
                                             16 BANK0     34    34      0
                             ___lmul
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (7) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     922
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick490Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runVoltageModeControl
       ___lmul
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripMonitor
     _currentTripRead
       i1_readGPIO
     _transToOverCurrentFault
     i1_currentTripReset
       i1_writeGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     13A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      3D       8       76.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     13A      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Aug 08 12:14:01 2023

                ___wmul@multiplicand 0072                                  l118 0DB8  
                                l232 0BFC                                  l304 05E5  
                                l241 064B                                  l137 04B6  
                                l236 060D                                  l324 0E4B  
                                l172 0C7A                                  l318 06AB  
                                l504 0CD6                                  l428 0C97  
                                l356 0C2A                                  l526 0C44  
                                l199 0C18                                  l552 0BF6  
                                l555 0C10                                  l558 0C09  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0C45                                  wreg 0009  
                __end_ofi1_writeGPIO 070B                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00D1                           i1_readGPIO 0DBB  
                               l2000 064F                                 l2010 0662  
                               l2002 0655                                 ?_abs 0070  
                               l2020 068C                                 l2012 0667  
                               l2004 065A                                 l2022 0691  
                               l2014 066C                                 l2006 065D  
                               l2120 0573                                 l2024 069E  
                               l2016 0679                                 l2008 0661  
                               l2130 0586                                 l2122 0579  
                               l2018 0687                                 l2140 05BB  
                               l2132 058B                                 l2124 057E  
                               l2150 05F1                                 l2142 05C0  
                               l2134 0590                                 l2126 0581  
                               l2118 0572                                 l2160 0604  
                               l2152 05F5                                 l2144 05D9  
                               l2136 05A9                                 l2128 0585  
                               l2170 062F                                 l2162 0609  
                               l2154 05F6                                 l2146 05E8  
                               l2138 05B6                                 l2250 0C37  
                               l2172 0634                                 l2164 060B  
                               l2156 05F8                                 l2148 05EB  
                               l2252 0C3D                                 l2500 0401  
                               l2166 0612                                 l2158 05FE  
                               l2510 0414                                 l2502 0405  
                               l2168 0617                                 l2600 0CB7  
                               l2520 042F                                 l2512 041D  
                               l2504 0406                                 l2602 0C22  
                               l2610 0E05                                 l2530 0447  
                               l2522 0430                                 l2514 0421  
                               l2506 040F                                 l2604 0C7B  
                               l2620 0E18                                 l2612 0E0B  
                               l2540 045A                                 l2532 044B  
                               l2524 0439                                 l2516 0422  
                               l2508 0413                                 l2700 0D99  
                               l2606 0C86                                 l2622 0E1D  
                               l2614 0E10                                 l2550 0473  
                               l2542 0463                                 l2534 044C  
                               l2526 043D                                 l2518 042B  
                               l2710 0DB1                                 l2702 0D9C  
                               l2624 0E23                                 l2632 0E31  
                               l2616 0E13                                 l2608 0E04  
                               l2552 0474                                 l2544 0467  
                               l2536 0455                                 l2528 043E  
                               l2704 0DA2                                 l2634 0E36  
                               l2626 0E2F                                 l2618 0E17  
                               l2554 047D                                 l2546 0468  
                               l2538 0459                                 l2562 048B  
                               l2570 0C5F                                 l2650 0C03  
                               l2714 0DB5                                 l2706 0DA8  
                               l2636 0E3C                                 l2644 0E4A  
                               l2556 0481                                 l2548 0471  
                               l2492 03F4                                 l2580 0C6A  
                               l2572 0C62                                 l2652 0BF3  
                               l2708 0DA8                                 l2638 0E48  
                               l2558 0482                                 l2494 03F5  
                               l2590 0C73                                 l2582 0C6B  
                               l2574 0C64                                 l2496 03F7  
                               l2592 0C75                                 l2584 0C6E  
                               l2576 0C66                                 l2648 0C0A  
                               l2498 03F8                                 l2586 0C70  
                               l2578 0C68                                 l2594 0C11  
                               l2690 0D8A                                 l2780 0493  
                               l2588 0C72                                 l2596 0C16  
                               l2692 0D8D                                 l2598 0BF7  
                               l2694 0D90                                 l2696 0D93  
                               l2688 0D86                                 l2698 0D96  
                               l1998 064E                                 STR_1 07FC  
                               u1310 0655                                 u1311 0654  
                               u1320 0667                                 u1321 0666  
                               u1330 066C                                 u1331 066B  
                               _LATA 010C                                 _LATB 010D  
                               u1600 058B                                 u1360 068C  
                               u1344 0671                                 u1601 058A  
                               u1361 068B                                 u1345 0670  
                               u1610 0590                                 u1370 0691  
                               u1354 067E                                 u1611 058F  
                               u1371 0690                                 u1355 067D  
                               u1700 05F1                                 u2404 0E41  
                               u1701 05F0                                 u2405 0E40  
                               u1710 05FE                                 u1711 05FD  
                               u1720 0604                                 u1624 0595  
                               u1384 0696                                 u2360 0E0B  
                               u1721 0603                                 u1625 0594  
                               u1385 0695                                 u2361 0E0A  
                               u1730 0612                                 u1650 05BB  
                               u1634 05A0                                 u1394 06A3  
                               u2370 0E1D                                 u1731 0611  
                               u1651 05BA                                 u1635 059F  
                               u1395 06A2                                 u2371 0E1C  
                               u1740 0617                                 u1660 05C0  
                               u1644 05AE                                 u1741 0616  
                               u1661 05BF                                 u1645 05AD  
                               u1590 0579                                 u2390 0E36  
                               u1591 0578                                 u2391 0E35  
                               u2384 0E28                                 u2385 0E27  
                               u1770 0634                                 u1754 061C  
                               u1674 05C5                                 u2490 0DB1  
                               u1771 0633                                 u1755 061B  
                               u1675 05C4                                 u2491 0DB0  
                               u1764 0627                                 u1684 05D0  
                               u1765 0626                                 u1685 05CF  
                               u1694 05DE                                 u1695 05DD  
                               u1784 0639                                 u1785 0638  
                               u1794 0644                                 u1795 0643  
          _transToVoltageModeControl 0C0A                      _filteredFreqPot 005D  
                    _filteredDutyPot 00AC                                 abs@a 0070  
                               _main 0D86                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 fsr1l 0006  
                               btemp 007E                       ?_runPotScaling 0070  
                               start 0085            ??_setupInternalOscillator 00D0  
                              ??_abs 0072                                ?_main 00D9  
                    __end_of___lldiv 0FA5                                i1l108 0083  
                              i1l250 0F35                                i1l324 0E01  
                              i1l244 0EFF                                i1l253 0F49  
                              i1l245 0F12                                i1l318 070A  
                              i1l175 0D25                                i1l249 0F33  
                              i1l370 07C0                                i1l443 0561  
                              i1l363 0FFF                                i1l523 0EEF  
                              i1l435 0765                                i1l509 0D52  
                              i1l438 07FB                                i1l454 0313  
                              i1l446 056F                                i1l526 0C36  
                              i1l711 0CA2                                i1l375 03E2  
                              i1l713 0CB6                                i1l561 0C21  
                              i1l537 0CFA                                i1l377 03F1  
                              i1l730 0E87                                i1l731 0E97  
                              i1l725 0D85                                i1l747 0FA4  
                              _PORTA 000C                                _PORTB 000D  
                              _TRISA 008C                                _TRISB 008D  
                ___lmul@multiplicand 0074                          readADCRaw@i 0078  
               readFilteredFreqPot@i 0029             readFilteredDutyPot@i_750 0028  
                              status 0003                                wtemp0 007E  
             initialiseGPIO@portType 00D3                  _initialiseADCModule 0BF7  
               readFilteredDutyPot@i 0029           initialiseADCPin@gpioNumber 00D5  
                    __initialization 0087                         __end_of_main 0DBB  
                  ?_initialiseADCPin 0070                _integratorScaledLimit 00A0  
                        i1_writeGPIO 06AC                               ??_main 00DD  
                 ??_initialiseADCPin 00D0             __end_of_readFilteredVout 0766  
               ?_initialiseADCModule 0070           ??_initialiseCurrentSensors 00D6  
    __end_of_setupInternalOscillator 04B7  setupInternalOscillator@selectedFreq 00D2  
                             _ADCON0 009D                               _ADCON1 009E  
                        ?i1_readGPIO 0070                               _ADRESH 009C  
                             _ADRESL 009B                               _CCPR1L 0291  
                             _ANSELA 018C                               _ANSELB 018D  
                             i1l2030 07E3                               i1l2102 0DE8  
                             i1l2040 0E4C                               i1l2032 07F7  
                             i1l2104 0DED                               i1l2200 0F29  
                             i1l2042 0E56                               i1l2026 07C1  
                             i1l2106 0DF2                               i1l2114 0E00  
                             i1l2050 06AD                               i1l2210 0F42  
                             i1l2202 0F2D                               i1l1171 0C5E  
                             i1l2300 0F8E                               i1l2044 0E5B  
                             i1l2036 0C45                               i1l2028 07C6  
                             i1l2108 0DFE                               i1l2220 00C9  
                             i1l2060 06C0                               i1l2052 06AE  
                             i1l2204 0F39                               i1l2302 0F8F  
                             i1l2046 0E6B                               i1l1174 0C5E  
                             i1l2038 0C52                               i1l2230 0184  
                             i1l2222 00D8                               i1l2070 06E6  
                             i1l2062 06C1                               i1l2054 06B4  
                             i1l2310 0C2B                               i1l2206 0F3D  
                             i1l2214 0F47                               i1l2304 0F96  
                             i1l2048 0E73                               i1l2080 0DBD  
                             i1l2240 0266                               i1l2232 01AE  
                             i1l2224 00E6                               i1l2072 06EB  
                             i1l2064 06C6                               i1l2056 06B9  
                             i1l2312 0C30                               i1l2320 0CEE  
                             i1l2208 0F41                               i1l2306 0F9C  
                             i1l2090 0DD0                               i1l2082 0DC3  
                             i1l2242 0298                               i1l2234 01BE  
                             i1l2226 011A                               i1l2218 00B3  
                             i1l2074 06F0                               i1l2066 06CB  
                             i1l2058 06BC                               i1l2322 0CF2  
                             i1l2314 0CD7                               i1l2410 0752  
                             i1l2330 0D09                               i1l2092 0DD5  
                             i1l2084 0DC8                               i1l2244 02BC  
                             i1l2236 01C9                               i1l2228 0129  
                             i1l2332 04B7                               i1l2260 0D4B  
                             i1l2076 06FD                               i1l2068 06D8  
                             i1l2324 0CF8                               i1l2316 0CDF  
                             i1l2180 0EFD                               i1l2404 0738  
                             i1l2420 03D4                               u200_25 0CA3  
                             i1l2094 0DDA                               i1l2086 0DCB  
                             i1l2078 0DBC                               i1l2246 02ED  
                             i1l2238 0216                               i1l2334 04BE  
                             i1l2342 04F9                               i1l2262 0D50  
                             i1l2254 0D26                               i1l2270 0C1D  
                             i1l2318 0CEA                               i1l2190 0F19  
                             i1l2182 0F05                               i1l2174 0EF1  
                             i1l2406 0748                               i1l2422 03DE  
                             i1l2414 0314                               i1l2326 0CFB  
                             i1l2280 0CAC                               i1l2272 0C98  
                             i1l2096 0DE6                               i1l2088 0DCF  
                             i1l2248 030F                               i1l2344 0553  
                             i1l2336 04C1                               i1l2264 0D51  
                             i1l2256 0D44                               i1l2192 0F1D  
                             i1l2184 0F0B                               i1l2176 0EF3  
                             i1l2440 0FBF                               i1l2360 0EA7  
                             i1l2352 0E98                               i1l2408 074C  
                             i1l2424 03EC                               i1l2416 031A  
                             i1l2328 0CFE                               i1l2290 0F5E  
                             i1l2282 0CB2                               i1l2274 0C9A  
                             i1l2346 055D                               i1l2338 04C6  
                             i1l2258 0D46                               i1l2194 0F28  
                             i1l2186 0F10                               i1l2178 0EF9  
                             i1l2450 0FD2                               i1l2442 0FC8  
                             i1l2434 0FA7                               i1l2362 0EAB  
                             i1l2426 03F0                               i1l2418 0324  
                             i1l2292 0F69                               i1l2276 0C9E  
                             i1l2348 056B                               i1l2268 0C19  
                             i1l2188 0F17                               i1l2452 0FE2  
                             i1l2444 0FD1                               i1l2436 0FB5  
                             i1l2428 0FA5                               i1l2460 0766  
                             i1l2372 0EC2                               i1l2364 0EB1  
                             u201_25 0CA8                               i1l2294 0F6D  
                             i1l2286 0F4A                               i1l2278 0CA7  
                             i1l2454 0FE6                               i1l2438 0FB9  
                             i1l2470 077A                               i1l2374 0ED2  
                             i1l2366 0EC1                               i1l2358 0E99  
                             i1l2390 071B                               i1l2382 070B  
                             i1l2296 0F74                               i1l2288 0F5B  
                             u202_20 0CB2                               u130_20 0D7D  
                             u210_20 0CDF                               i1l2456 0FEC  
                             i1l2472 0780                               i1l2376 0ED6  
                             i1l2392 071F                               u202_21 0CB1  
                             u130_21 0D7C                               u210_21 0CDE  
                             i1l2298 0F86                               i1l2482 0793  
                             i1l2474 0789                               i1l2466 0768  
                             i1l2378 0EDC                               i1l2394 0725  
                             i1l2484 07A3                               i1l2476 0792  
                             i1l2468 0776                               i1l2396 072E  
                             i1l2388 070D                               i1l2660 0024  
                             i1l2486 07A7                               i1l2398 0737  
                             i1l2670 0045                               i1l2662 0029  
                             i1l2654 0006                               u203_20 0F5B  
                             u211_20 0CEA                               i1l2488 07AD  
                             i1l2680 006D                               i1l2672 004A  
                             i1l2664 002F                               i1l2656 001B  
                             u203_21 0F5A                               u211_21 0CE9  
                             i1l2682 0072                               i1l2674 004D  
                             i1l2666 0035                               i1l2658 0021  
                             i1l2676 0053                               i1l2668 003D  
                             i1l2684 0077                               i1l1990 0D67  
                             i1l2686 0082                               i1l2678 0063  
                             i1l1992 0D6E                               i1l1984 0D53  
                             u140_20 07F1                               u212_20 0CF8  
                             u220_20 0EE9                               u212_21 0CF7  
                             i1l1994 0D7D                               i1l1986 0D5B  
                             i1l1988 0D5F                               u204_25 0F5F  
                             u140_25 07ED                               u220_25 0EE5  
                             u205_20 0F6D                               u141_20 0C52  
                             u221_20 0725                               u213_20 0D23  
                             u205_21 0F6C                               u141_21 0C51  
                             u221_21 0724                               u213_21 0D20  
                             u141_25 0C4E                               u142_20 0E53  
                             u150_20 06EB                               u230_20 0FBF  
                             u222_20 0752                               u150_21 06EA  
                             u230_21 0FBE                               u222_21 0751  
                             u214_24 0D25                               u206_25 0F6E  
                             u207_20 0F86                               u143_20 0E5B  
                             u127_20 0D5F                               u215_20 04BE  
                             u151_20 06F0                               u231_20 0FEC  
                             u223_20 075F                               u207_21 0F85  
                             u143_21 0E5A                               u127_21 0D5E  
                             u215_21 04BD                               u151_21 06EF  
                             u231_21 0FEB                               u207_25 0F82  
                             u223_25 075B                               u144_20 0E87  
                             u216_20 055D                               u232_20 0FF9  
                             u224_20 031A                               u144_21 0E86  
                             u216_21 055C                               u224_21 0319  
                             u152_24 06F5                               u208_25 0F90  
                             u128_25 0D68                               u216_25 0559  
                             u152_25 06F4                               u232_25 0FF5  
                             u209_20 0F9C                               u217_20 056B  
                             u145_20 06B4                               u233_20 0780  
                             u225_20 0324                               u241_20 0021  
                             u209_21 0F9B                               u217_21 056A  
                             u145_21 06B3                               u233_21 077F  
                             u225_21 0323                               u241_21 0020  
                             u153_24 0702                               u129_25 0D6F  
                             u217_25 0567                               u153_25 0701  
                             u154_20 0DC3                               u146_20 06C6  
                             u234_20 07AD                               u218_20 0EB1  
                             u226_20 0345                               u242_20 002F  
                             u154_21 0DC2                               u146_21 06C5  
                             u234_21 07AC                               u218_21 0EB0  
                             u242_21 002E                               u226_25 0341  
                             u155_20 0DD5                               u147_20 06CB  
                             u235_20 07BA                               u219_20 0EDC  
                             u227_20 0374                               u243_20 004A  
                             u155_21 0DD4                               u147_21 06CA  
                             u219_21 0EDB                               u243_21 0049  
                             u235_25 07B6                               u227_25 0370  
                             u180_20 0EF9                               u228_20 03DE  
                             u244_20 0053                               u180_21 0EF8  
                             u228_21 03DD                               u244_21 0052  
                             u156_24 0DDF                               u148_24 06D0  
                             u156_25 0DDE                               u148_25 06CF  
                             u228_25 03DA                               u157_20 0DED  
                             u181_20 0F05                               u229_20 03EC  
                             u245_20 0069                               u157_21 0DEC  
                             u181_21 0F04                               u229_21 03EB  
                             u245_21 0067                               u149_24 06DD  
                             u149_25 06DC                               u229_25 03E8  
                             u190_20 0216                               u182_20 0F0B  
                             u246_20 006A                               u190_21 0215  
                             u182_21 0F0A                               u190_23 0212  
                             u158_24 0DF7                               u158_25 0DF6  
                             u191_20 0286                               u183_20 0F17  
                             u247_20 007E                               u183_21 0F16  
                             u247_21 007C                               u191_25 027D  
                             u192_20 02DB                               u248_20 007F  
                             u192_25 02D2                               u184_25 0F20  
                             u193_20 0D30                               u185_20 0F33  
                             u193_21 0D2E                               u185_21 0F32  
                             u194_20 0D31                               u186_20 0F39  
                             u186_21 0F38                               u187_20 00C9  
                             u195_20 0D3F                               u187_21 00C8  
                             u195_21 0D3D                               u188_20 01AE  
                             u196_20 0D40                               u188_21 01AD  
                             u188_23 01AA                      ??_runPotScaling 0026  
                             u189_20 01C9                               u197_20 0D4B  
                             u189_21 01C8                               u197_21 0D4A  
                             u198_20 0D50                               u198_21 0D4F  
                             u199_20 0C9E                               u199_21 0C9D  
            initialiseGPIO@direction 00D0                     readGPIO@portType 00D7  
                readADCRaw@gpioValid 0077                               ___lmul 0D53  
                             ___omul 0E4C                               ___wmul 0C98  
                          ??___lldiv 0020                     __end_of_readGPIO 0E4C  
                     _controlRoutine 04B7                               _tripIL 006A  
     convertRawToMilliVolts@rawValue 007C            setPWMDutyandPeriod@period 0072  
              ??_initialiseADCModule 00D0             _initialisePotentiometers 0C22  
         initialiseADCPin@portNumber 00D4                     __end_of_setupPWM 0C7B  
                    _currentTripRead 0D26           ?_transToCurrentModeControl 0070  
            __end_of__initialization 00AF               __end_of_controlRoutine 0570  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00D2  
              i1writeGPIO@gpioNumber 0074                        _currentILFIFO 0120  
                     _OPTION_REGbits 0095                    __end_of_Tick490Hz 0085  
              _runVoltageModeControl 00B3                           __pbssBANK0 005D  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pmaintext 0D86                      ?_controlRoutine 0070  
                            ?___lmul 0070                              ?___omul 0020  
                            ?___wmul 0070    __end_of_transToVoltageModeControl 0C11  
           ??_convertRawToMilliVolts 0020                           __pintentry 0004  
                            _CCP1CON 0293                  ___omul@multiplicand 0028  
                     ___lmul@product 0078              __end_of_currentTripRead 0D53  
        __end_of_setPWMDutyandPeriod 0D26     __end_of_initialiseCurrentSensors 0CD7  
         __end_ofi1_currentTripReset 0C37             initialiseADCPin@portType 00D3  
            _transToOverCurrentFault 0C19                   i1readGPIO@portType 0077  
              readFilteredVout@i_831 0028                i1writeGPIO@portNumber 0075  
                         _filteredIL 00AE                            ?_readGPIO 0070  
                         _readADCRaw 0EF0                  _readFilteredFreqPot 0766  
               i1readGPIO@gpioNumber 0078                  _readFilteredDutyPot 0FA5  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 0079  
           initialiseGPIO@gpioNumber 00D4                              ___lldiv 0F4A  
                       ?i1_writeGPIO 0070                 ?_readFilteredFreqPot 007A  
                            __ptext1 0C0A                              __ptext2 0BF3  
                            __ptext3 0C03                              __ptext4 0C11  
                            __ptext5 0C5F                              __ptext6 03F2  
                            __ptext7 0E02                              __ptext8 0C22  
                            __ptext9 0CB7                 ?_readFilteredDutyPot 007A  
       __end_of_initialiseController 0C98                            _T2CONbits 001C  
                  ?_readFilteredVout 007A                              _setDuty 0063  
              i1writeGPIO@writeValue 0070               ?_runVoltageModeControl 0070  
                            _tripIDS 006B                   ??_readFilteredVout 0020  
                       ??i1_readGPIO 0070                              clrloop0 0BFE  
               end_of_initialization 00AF      convertRawToMilliVolts@offsetted 0029  
                         ??_readGPIO 00D0                       ___omul@product 0071  
           ?_setupInternalOscillator 0070                      ___lldiv@divisor 0076  
                    ___lldiv@counter 0025                     _currentTripCount 0069  
                         ??_setupPWM 00D6                     _currentTripReset 0C37  
         ??_initialisePotentiometers 00D6                           _prevPeriod 006D  
                  writeGPIO@portType 00D3                       _readFilteredIL 0E98  
                 __end_ofi1_readGPIO 0E02                ??_readFilteredFreqPot 0020  
              ??_readFilteredDutyPot 0020                 i1readGPIO@portNumber 0076  
                   ?_currentTripRead 0070                    __end_of_writeGPIO 06AC  
          ??_transToOverCurrentFault 0070             initialiseGPIO@portNumber 00D5  
                       _filteredVout 005F          ??_transToCurrentModeControl 00D0  
                        ?_readADCRaw 0070                    _transToPotControl 0BF3  
                        _CCP1CONbits 0293                        readGPIO@readA 00D2  
                      readGPIO@readB 00D4                __end_of_runPotScaling 03F2  
                 ?_transToPotControl 0070            ?_initialiseCurrentSensors 0070  
               _voltageModeVariables 00B4               __end_of_readFilteredIL 0EF0  
                ??_transToPotControl 00D0                       __end_of___lmul 0D86  
        __end_of_initialiseADCModule 0BFD                       __end_of___omul 0E98  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0CB7  
              controlRoutine@minDuty 005A                       _clockFrequency 00A8  
                start_initialization 0087         __end_of_setupTimer0Interrupt 0C19  
                     _currentIDSFIFO 0140                          __end_of_abs 0C5F  
                          _Tick490Hz 0004               _convertRawToMilliVolts 07C1  
          __end_of_transToPotControl 0BF7     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0C22           __end_of_currentTripMonitor 0CFB  
               _initialiseController 0C7B                          _APFCON0bits 011D  
                           ??___lmul 0078                             ??___omul 0070  
                           ??___wmul 0074                      ?_readFilteredIL 0070  
          _transToCurrentModeControl 0C03                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D0  
                         ?_Tick490Hz 0070                     _initialiseADCPin 05E6  
                       _currentState 006C                   i1_currentTripReset 0C2B  
                 readGPIO@gpioNumber 00D8                ?_initialiseController 0070  
                     _initialiseGPIO 0570                      i1readGPIO@readA 0072  
                    i1readGPIO@readB 0074     __end_of_initialisePotentiometers 0C2B  
                ?i1_currentTripReset 0070                             ?___lldiv 0076  
         ?_transToVoltageModeControl 0070      runVoltageModeControl@newVoltage 0050  
      runVoltageModeControl@propMult 0048              ??_runVoltageModeControl 0030  
               ??i1_currentTripReset 0076             __end_of_currentTripReset 0C45  
    readFilteredDutyPot@sumOfSamples 0024                       ___wmul@product 0074  
             __end_of_initialiseGPIO 05E6                            clear_ram0 0BFD  
                          _setPeriod 006E                             _PIE1bits 0091  
       setPWMDutyandPeriod@dutyCycle 0070                 _setupTimer0Interrupt 0C11  
  runVoltageModeControl@integralMult 0040                  _currentTripRead$912 007A  
                        _filteredIDS 00B0                           _ADCON0bits 009D  
                  ___wmul@multiplier 0070                   readGPIO@portNumber 00D6  
                        _freqPotFIFO 01A0                            _writeGPIO 064C  
                        ??_Tick490Hz 005C                    ___lmul@multiplier 0070  
                       ??_readADCRaw 0072               ??_initialiseController 00D6  
                    ?_initialiseGPIO 00D0         readFilteredVout@sumOfSamples 0024  
                  readADCRaw@channel 0076                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 07C1          __end_of_readFilteredDutyPot 1000  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
                writeGPIO@gpioNumber 00D4  convertRawToMilliVolts@returnValuedV 002B  
                 __end_of_readADCRaw 0F4A             readFilteredFreqPot@i_754 0028  
            ?_convertRawToMilliVolts 007C                           ?_writeGPIO 00D0  
                           __ptext10 0C37                             __ptext11 064C  
                           __ptext20 0E98                             __ptext12 0C7B  
                           __ptext21 0766                             __ptext13 0570  
                           __ptext30 00B3                             __ptext22 0FA5  
                           __ptext14 05E6                             __ptext31 0DBB  
                           __ptext23 0EF0                             __ptext15 0BF7  
                           __ptext32 07C1                             __ptext24 0CD7  
                           __ptext33 0D53                             __ptext25 0C2B  
                           __ptext17 0CFB                             __ptext34 0C45  
                           __ptext26 06AC                             __ptext18 0314  
                           __ptext35 0E4C                             __ptext27 0C19  
                           __ptext19 070B                             __ptext36 0C98  
                           __ptext28 0D26                             __ptext37 0F4A  
                           __ptext29 04B7            ?_initialisePotentiometers 0070  
                        _dutyPotFIFO 0220                  i1writeGPIO@portType 0073  
         readFilteredIL@sumOfSamples 0076                             _readGPIO 0E02  
                           _latestIL 0061                     ??_readFilteredIL 0072  
                      _timerSlotHalf 0067                         _PSTR1CONbits 0296  
                           _prevDuty 00B2                             _setupPWM 0C5F  
                           int$flags 007E                             _slotTest 0065  
           __end_of_initialiseADCPin 064C                             main@argc 00D9  
           ?_transToOverCurrentFault 0070                             main@argv 00DB  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                 _currentTripMonitor 0CD7                     _timerSlotQuarter 0066  
     __end_of_convertRawToMilliVolts 07FC                           _INTCONbits 000B  
                ?_currentTripMonitor 0070    __end_of_transToCurrentModeControl 0C0A  
                writeGPIO@portNumber 00D5                             intlevel1 0000  
           _initialiseCurrentSensors 0CB7                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 070B               ??_setupTimer0Interrupt 00D0  
                         _OSCCONbits 0099                 ??_currentTripMonitor 007B  
                        _potSetCount 0068                  _setPWMDutyandPeriod 0CFB  
            _setupInternalOscillator 03F2          ??_transToVoltageModeControl 00D0  
                      ??i1_writeGPIO 0071                        __pstringtext1 07FC  
                      __pstringtext2 0000                           _OPTION_REG 0095  
                   ___lldiv@quotient 0021        __end_of_runVoltageModeControl 0314  
                writeGPIO@writeValue 00D0                          ??_writeGPIO 00D1  
               ?_setPWMDutyandPeriod 0070                    ?_currentTripReset 0070  
                 ??_currentTripReset 00D6                readADCRaw@returnValue 0074  
                  ??_currentTripRead 0079                        _runPotScaling 0314  
               readGPIO@returnValueA 00D3                 readGPIO@returnValueB 00D5  
                readFilteredIL@i_920 007A                      readFilteredIL@i 007B  
