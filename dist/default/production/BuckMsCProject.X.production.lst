

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Aug 01 16:59:08 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    59                           	dabs	1,0x7E,2
    60  0000                     
    61                           ; Version 2.40
    62                           ; Generated 17/11/2021 GMT
    63                           ; 
    64                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC16F1827 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0013                     	;# 
   113  0014                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0016                     	;# 
   117  0017                     	;# 
   118  0018                     	;# 
   119  0019                     	;# 
   120  001A                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009A                     	;# 
   137  009B                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  0111                     	;# 
   145  0112                     	;# 
   146  0113                     	;# 
   147  0114                     	;# 
   148  0115                     	;# 
   149  0116                     	;# 
   150  0117                     	;# 
   151  0118                     	;# 
   152  0119                     	;# 
   153  011A                     	;# 
   154  011B                     	;# 
   155  011D                     	;# 
   156  011E                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019C                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019E                     	;# 
   178  019F                     	;# 
   179  020C                     	;# 
   180  020D                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0219                     	;# 
   197  021A                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021D                     	;# 
   201  021E                     	;# 
   202  021F                     	;# 
   203  0291                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0293                     	;# 
   207  0294                     	;# 
   208  0295                     	;# 
   209  0295                     	;# 
   210  0296                     	;# 
   211  0298                     	;# 
   212  0298                     	;# 
   213  0299                     	;# 
   214  029A                     	;# 
   215  029B                     	;# 
   216  029C                     	;# 
   217  029C                     	;# 
   218  029D                     	;# 
   219  029E                     	;# 
   220  029E                     	;# 
   221  0311                     	;# 
   222  0311                     	;# 
   223  0312                     	;# 
   224  0313                     	;# 
   225  0318                     	;# 
   226  0318                     	;# 
   227  0319                     	;# 
   228  031A                     	;# 
   229  0394                     	;# 
   230  0395                     	;# 
   231  0396                     	;# 
   232  039A                     	;# 
   233  039C                     	;# 
   234  039D                     	;# 
   235  039E                     	;# 
   236  039F                     	;# 
   237  0415                     	;# 
   238  0416                     	;# 
   239  0417                     	;# 
   240  041C                     	;# 
   241  041D                     	;# 
   242  041E                     	;# 
   243  0FE4                     	;# 
   244  0FE5                     	;# 
   245  0FE6                     	;# 
   246  0FE7                     	;# 
   247  0FE8                     	;# 
   248  0FE9                     	;# 
   249  0FEA                     	;# 
   250  0FEB                     	;# 
   251  0FED                     	;# 
   252  0FEE                     	;# 
   253  0FEF                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  000D                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0013                     	;# 
   271  0014                     	;# 
   272  0015                     	;# 
   273  0016                     	;# 
   274  0016                     	;# 
   275  0017                     	;# 
   276  0018                     	;# 
   277  0019                     	;# 
   278  001A                     	;# 
   279  001B                     	;# 
   280  001C                     	;# 
   281  001E                     	;# 
   282  001F                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0098                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009B                     	;# 
   296  009B                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  0111                     	;# 
   303  0112                     	;# 
   304  0113                     	;# 
   305  0114                     	;# 
   306  0115                     	;# 
   307  0116                     	;# 
   308  0117                     	;# 
   309  0118                     	;# 
   310  0119                     	;# 
   311  011A                     	;# 
   312  011B                     	;# 
   313  011D                     	;# 
   314  011E                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020C                     	;# 
   338  020D                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0219                     	;# 
   355  021A                     	;# 
   356  021B                     	;# 
   357  021C                     	;# 
   358  021D                     	;# 
   359  021E                     	;# 
   360  021F                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0294                     	;# 
   366  0295                     	;# 
   367  0295                     	;# 
   368  0296                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  029B                     	;# 
   374  029C                     	;# 
   375  029C                     	;# 
   376  029D                     	;# 
   377  029E                     	;# 
   378  029E                     	;# 
   379  0311                     	;# 
   380  0311                     	;# 
   381  0312                     	;# 
   382  0313                     	;# 
   383  0318                     	;# 
   384  0318                     	;# 
   385  0319                     	;# 
   386  031A                     	;# 
   387  0394                     	;# 
   388  0395                     	;# 
   389  0396                     	;# 
   390  039A                     	;# 
   391  039C                     	;# 
   392  039D                     	;# 
   393  039E                     	;# 
   394  039F                     	;# 
   395  0415                     	;# 
   396  0416                     	;# 
   397  0417                     	;# 
   398  041C                     	;# 
   399  041D                     	;# 
   400  041E                     	;# 
   401  0FE4                     	;# 
   402  0FE5                     	;# 
   403  0FE6                     	;# 
   404  0FE7                     	;# 
   405  0FE8                     	;# 
   406  0FE9                     	;# 
   407  0FEA                     	;# 
   408  0FEB                     	;# 
   409  0FED                     	;# 
   410  0FEE                     	;# 
   411  0FEF                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000D                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0016                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001C                     	;# 
   439  001E                     	;# 
   440  001F                     	;# 
   441  008C                     	;# 
   442  008D                     	;# 
   443  0091                     	;# 
   444  0092                     	;# 
   445  0093                     	;# 
   446  0094                     	;# 
   447  0095                     	;# 
   448  0096                     	;# 
   449  0097                     	;# 
   450  0098                     	;# 
   451  0099                     	;# 
   452  009A                     	;# 
   453  009B                     	;# 
   454  009B                     	;# 
   455  009C                     	;# 
   456  009D                     	;# 
   457  009E                     	;# 
   458  010C                     	;# 
   459  010D                     	;# 
   460  0111                     	;# 
   461  0112                     	;# 
   462  0113                     	;# 
   463  0114                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011A                     	;# 
   470  011B                     	;# 
   471  011D                     	;# 
   472  011E                     	;# 
   473  018C                     	;# 
   474  018D                     	;# 
   475  0191                     	;# 
   476  0191                     	;# 
   477  0192                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0194                     	;# 
   482  0195                     	;# 
   483  0196                     	;# 
   484  0199                     	;# 
   485  019A                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019C                     	;# 
   491  019C                     	;# 
   492  019D                     	;# 
   493  019E                     	;# 
   494  019F                     	;# 
   495  020C                     	;# 
   496  020D                     	;# 
   497  0211                     	;# 
   498  0211                     	;# 
   499  0212                     	;# 
   500  0212                     	;# 
   501  0213                     	;# 
   502  0213                     	;# 
   503  0214                     	;# 
   504  0214                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0216                     	;# 
   509  0216                     	;# 
   510  0217                     	;# 
   511  0217                     	;# 
   512  0219                     	;# 
   513  021A                     	;# 
   514  021B                     	;# 
   515  021C                     	;# 
   516  021D                     	;# 
   517  021E                     	;# 
   518  021F                     	;# 
   519  0291                     	;# 
   520  0291                     	;# 
   521  0292                     	;# 
   522  0293                     	;# 
   523  0294                     	;# 
   524  0295                     	;# 
   525  0295                     	;# 
   526  0296                     	;# 
   527  0298                     	;# 
   528  0298                     	;# 
   529  0299                     	;# 
   530  029A                     	;# 
   531  029B                     	;# 
   532  029C                     	;# 
   533  029C                     	;# 
   534  029D                     	;# 
   535  029E                     	;# 
   536  029E                     	;# 
   537  0311                     	;# 
   538  0311                     	;# 
   539  0312                     	;# 
   540  0313                     	;# 
   541  0318                     	;# 
   542  0318                     	;# 
   543  0319                     	;# 
   544  031A                     	;# 
   545  0394                     	;# 
   546  0395                     	;# 
   547  0396                     	;# 
   548  039A                     	;# 
   549  039C                     	;# 
   550  039D                     	;# 
   551  039E                     	;# 
   552  039F                     	;# 
   553  0415                     	;# 
   554  0416                     	;# 
   555  0417                     	;# 
   556  041C                     	;# 
   557  041D                     	;# 
   558  041E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0014                     	;# 
   588  0015                     	;# 
   589  0016                     	;# 
   590  0016                     	;# 
   591  0017                     	;# 
   592  0018                     	;# 
   593  0019                     	;# 
   594  001A                     	;# 
   595  001B                     	;# 
   596  001C                     	;# 
   597  001E                     	;# 
   598  001F                     	;# 
   599  008C                     	;# 
   600  008D                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0094                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  0111                     	;# 
   619  0112                     	;# 
   620  0113                     	;# 
   621  0114                     	;# 
   622  0115                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  0118                     	;# 
   626  0119                     	;# 
   627  011A                     	;# 
   628  011B                     	;# 
   629  011D                     	;# 
   630  011E                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020D                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0294                     	;# 
   682  0295                     	;# 
   683  0295                     	;# 
   684  0296                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029B                     	;# 
   690  029C                     	;# 
   691  029C                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029E                     	;# 
   695  0311                     	;# 
   696  0311                     	;# 
   697  0312                     	;# 
   698  0313                     	;# 
   699  0318                     	;# 
   700  0318                     	;# 
   701  0319                     	;# 
   702  031A                     	;# 
   703  0394                     	;# 
   704  0395                     	;# 
   705  0396                     	;# 
   706  039A                     	;# 
   707  039C                     	;# 
   708  039D                     	;# 
   709  039E                     	;# 
   710  039F                     	;# 
   711  0415                     	;# 
   712  0416                     	;# 
   713  0417                     	;# 
   714  041C                     	;# 
   715  041D                     	;# 
   716  041E                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0014                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  001E                     	;# 
   756  001F                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0093                     	;# 
   762  0094                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009B                     	;# 
   771  009C                     	;# 
   772  009D                     	;# 
   773  009E                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  0111                     	;# 
   777  0112                     	;# 
   778  0113                     	;# 
   779  0114                     	;# 
   780  0115                     	;# 
   781  0116                     	;# 
   782  0117                     	;# 
   783  0118                     	;# 
   784  0119                     	;# 
   785  011A                     	;# 
   786  011B                     	;# 
   787  011D                     	;# 
   788  011E                     	;# 
   789  018C                     	;# 
   790  018D                     	;# 
   791  0191                     	;# 
   792  0191                     	;# 
   793  0192                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0193                     	;# 
   797  0194                     	;# 
   798  0195                     	;# 
   799  0196                     	;# 
   800  0199                     	;# 
   801  019A                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  019C                     	;# 
   808  019D                     	;# 
   809  019E                     	;# 
   810  019F                     	;# 
   811  020C                     	;# 
   812  020D                     	;# 
   813  0211                     	;# 
   814  0211                     	;# 
   815  0212                     	;# 
   816  0212                     	;# 
   817  0213                     	;# 
   818  0213                     	;# 
   819  0214                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0219                     	;# 
   829  021A                     	;# 
   830  021B                     	;# 
   831  021C                     	;# 
   832  021D                     	;# 
   833  021E                     	;# 
   834  021F                     	;# 
   835  0291                     	;# 
   836  0291                     	;# 
   837  0292                     	;# 
   838  0293                     	;# 
   839  0294                     	;# 
   840  0295                     	;# 
   841  0295                     	;# 
   842  0296                     	;# 
   843  0298                     	;# 
   844  0298                     	;# 
   845  0299                     	;# 
   846  029A                     	;# 
   847  029B                     	;# 
   848  029C                     	;# 
   849  029C                     	;# 
   850  029D                     	;# 
   851  029E                     	;# 
   852  029E                     	;# 
   853  0311                     	;# 
   854  0311                     	;# 
   855  0312                     	;# 
   856  0313                     	;# 
   857  0318                     	;# 
   858  0318                     	;# 
   859  0319                     	;# 
   860  031A                     	;# 
   861  0394                     	;# 
   862  0395                     	;# 
   863  0396                     	;# 
   864  039A                     	;# 
   865  039C                     	;# 
   866  039D                     	;# 
   867  039E                     	;# 
   868  039F                     	;# 
   869  0415                     	;# 
   870  0416                     	;# 
   871  0417                     	;# 
   872  041C                     	;# 
   873  041D                     	;# 
   874  041E                     	;# 
   875  0FE4                     	;# 
   876  0FE5                     	;# 
   877  0FE6                     	;# 
   878  0FE7                     	;# 
   879  0FE8                     	;# 
   880  0FE9                     	;# 
   881  0FEA                     	;# 
   882  0FEB                     	;# 
   883  0FED                     	;# 
   884  0FEE                     	;# 
   885  0FEF                     	;# 
   886  0000                     	;# 
   887  0001                     	;# 
   888  0002                     	;# 
   889  0003                     	;# 
   890  0004                     	;# 
   891  0005                     	;# 
   892  0006                     	;# 
   893  0007                     	;# 
   894  0008                     	;# 
   895  0009                     	;# 
   896  000A                     	;# 
   897  000B                     	;# 
   898  000C                     	;# 
   899  000D                     	;# 
   900  0011                     	;# 
   901  0012                     	;# 
   902  0013                     	;# 
   903  0014                     	;# 
   904  0015                     	;# 
   905  0016                     	;# 
   906  0016                     	;# 
   907  0017                     	;# 
   908  0018                     	;# 
   909  0019                     	;# 
   910  001A                     	;# 
   911  001B                     	;# 
   912  001C                     	;# 
   913  001E                     	;# 
   914  001F                     	;# 
   915  008C                     	;# 
   916  008D                     	;# 
   917  0091                     	;# 
   918  0092                     	;# 
   919  0093                     	;# 
   920  0094                     	;# 
   921  0095                     	;# 
   922  0096                     	;# 
   923  0097                     	;# 
   924  0098                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  010C                     	;# 
   933  010D                     	;# 
   934  0111                     	;# 
   935  0112                     	;# 
   936  0113                     	;# 
   937  0114                     	;# 
   938  0115                     	;# 
   939  0116                     	;# 
   940  0117                     	;# 
   941  0118                     	;# 
   942  0119                     	;# 
   943  011A                     	;# 
   944  011B                     	;# 
   945  011D                     	;# 
   946  011E                     	;# 
   947  018C                     	;# 
   948  018D                     	;# 
   949  0191                     	;# 
   950  0191                     	;# 
   951  0192                     	;# 
   952  0193                     	;# 
   953  0193                     	;# 
   954  0193                     	;# 
   955  0194                     	;# 
   956  0195                     	;# 
   957  0196                     	;# 
   958  0199                     	;# 
   959  019A                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019C                     	;# 
   965  019C                     	;# 
   966  019D                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  020C                     	;# 
   970  020D                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0216                     	;# 
   983  0216                     	;# 
   984  0217                     	;# 
   985  0217                     	;# 
   986  0219                     	;# 
   987  021A                     	;# 
   988  021B                     	;# 
   989  021C                     	;# 
   990  021D                     	;# 
   991  021E                     	;# 
   992  021F                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029C                     	;# 
  1008  029D                     	;# 
  1009  029E                     	;# 
  1010  029E                     	;# 
  1011  0311                     	;# 
  1012  0311                     	;# 
  1013  0312                     	;# 
  1014  0313                     	;# 
  1015  0318                     	;# 
  1016  0318                     	;# 
  1017  0319                     	;# 
  1018  031A                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  039A                     	;# 
  1023  039C                     	;# 
  1024  039D                     	;# 
  1025  039E                     	;# 
  1026  039F                     	;# 
  1027  0415                     	;# 
  1028  0416                     	;# 
  1029  0417                     	;# 
  1030  041C                     	;# 
  1031  041D                     	;# 
  1032  041E                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0013                     	;# 
  1061  0014                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  001E                     	;# 
  1072  001F                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0093                     	;# 
  1078  0094                     	;# 
  1079  0095                     	;# 
  1080  0096                     	;# 
  1081  0097                     	;# 
  1082  0098                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  0111                     	;# 
  1093  0112                     	;# 
  1094  0113                     	;# 
  1095  0114                     	;# 
  1096  0115                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  0118                     	;# 
  1100  0119                     	;# 
  1101  011A                     	;# 
  1102  011B                     	;# 
  1103  011D                     	;# 
  1104  011E                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020C                     	;# 
  1128  020D                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0219                     	;# 
  1145  021A                     	;# 
  1146  021B                     	;# 
  1147  021C                     	;# 
  1148  021D                     	;# 
  1149  021E                     	;# 
  1150  021F                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0298                     	;# 
  1160  0298                     	;# 
  1161  0299                     	;# 
  1162  029A                     	;# 
  1163  029B                     	;# 
  1164  029C                     	;# 
  1165  029C                     	;# 
  1166  029D                     	;# 
  1167  029E                     	;# 
  1168  029E                     	;# 
  1169  0311                     	;# 
  1170  0311                     	;# 
  1171  0312                     	;# 
  1172  0313                     	;# 
  1173  0318                     	;# 
  1174  0318                     	;# 
  1175  0319                     	;# 
  1176  031A                     	;# 
  1177  0394                     	;# 
  1178  0395                     	;# 
  1179  0396                     	;# 
  1180  039A                     	;# 
  1181  039C                     	;# 
  1182  039D                     	;# 
  1183  039E                     	;# 
  1184  039F                     	;# 
  1185  0415                     	;# 
  1186  0416                     	;# 
  1187  0417                     	;# 
  1188  041C                     	;# 
  1189  041D                     	;# 
  1190  041E                     	;# 
  1191  0FE4                     	;# 
  1192  0FE5                     	;# 
  1193  0FE6                     	;# 
  1194  0FE7                     	;# 
  1195  0FE8                     	;# 
  1196  0FE9                     	;# 
  1197  0FEA                     	;# 
  1198  0FEB                     	;# 
  1199  0FED                     	;# 
  1200  0FEE                     	;# 
  1201  0FEF                     	;# 
  1202  0000                     	;# 
  1203  0001                     	;# 
  1204  0002                     	;# 
  1205  0003                     	;# 
  1206  0004                     	;# 
  1207  0005                     	;# 
  1208  0006                     	;# 
  1209  0007                     	;# 
  1210  0008                     	;# 
  1211  0009                     	;# 
  1212  000A                     	;# 
  1213  000B                     	;# 
  1214  000C                     	;# 
  1215  000D                     	;# 
  1216  0011                     	;# 
  1217  0012                     	;# 
  1218  0013                     	;# 
  1219  0014                     	;# 
  1220  0015                     	;# 
  1221  0016                     	;# 
  1222  0016                     	;# 
  1223  0017                     	;# 
  1224  0018                     	;# 
  1225  0019                     	;# 
  1226  001A                     	;# 
  1227  001B                     	;# 
  1228  001C                     	;# 
  1229  001E                     	;# 
  1230  001F                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  0091                     	;# 
  1234  0092                     	;# 
  1235  0093                     	;# 
  1236  0094                     	;# 
  1237  0095                     	;# 
  1238  0096                     	;# 
  1239  0097                     	;# 
  1240  0098                     	;# 
  1241  0099                     	;# 
  1242  009A                     	;# 
  1243  009B                     	;# 
  1244  009B                     	;# 
  1245  009C                     	;# 
  1246  009D                     	;# 
  1247  009E                     	;# 
  1248  010C                     	;# 
  1249  010D                     	;# 
  1250  0111                     	;# 
  1251  0112                     	;# 
  1252  0113                     	;# 
  1253  0114                     	;# 
  1254  0115                     	;# 
  1255  0116                     	;# 
  1256  0117                     	;# 
  1257  0118                     	;# 
  1258  0119                     	;# 
  1259  011A                     	;# 
  1260  011B                     	;# 
  1261  011D                     	;# 
  1262  011E                     	;# 
  1263  018C                     	;# 
  1264  018D                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0193                     	;# 
  1271  0194                     	;# 
  1272  0195                     	;# 
  1273  0196                     	;# 
  1274  0199                     	;# 
  1275  019A                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019C                     	;# 
  1281  019C                     	;# 
  1282  019D                     	;# 
  1283  019E                     	;# 
  1284  019F                     	;# 
  1285  020C                     	;# 
  1286  020D                     	;# 
  1287  0211                     	;# 
  1288  0211                     	;# 
  1289  0212                     	;# 
  1290  0212                     	;# 
  1291  0213                     	;# 
  1292  0213                     	;# 
  1293  0214                     	;# 
  1294  0214                     	;# 
  1295  0215                     	;# 
  1296  0215                     	;# 
  1297  0215                     	;# 
  1298  0216                     	;# 
  1299  0216                     	;# 
  1300  0217                     	;# 
  1301  0217                     	;# 
  1302  0219                     	;# 
  1303  021A                     	;# 
  1304  021B                     	;# 
  1305  021C                     	;# 
  1306  021D                     	;# 
  1307  021E                     	;# 
  1308  021F                     	;# 
  1309  0291                     	;# 
  1310  0291                     	;# 
  1311  0292                     	;# 
  1312  0293                     	;# 
  1313  0294                     	;# 
  1314  0295                     	;# 
  1315  0295                     	;# 
  1316  0296                     	;# 
  1317  0298                     	;# 
  1318  0298                     	;# 
  1319  0299                     	;# 
  1320  029A                     	;# 
  1321  029B                     	;# 
  1322  029C                     	;# 
  1323  029C                     	;# 
  1324  029D                     	;# 
  1325  029E                     	;# 
  1326  029E                     	;# 
  1327  0311                     	;# 
  1328  0311                     	;# 
  1329  0312                     	;# 
  1330  0313                     	;# 
  1331  0318                     	;# 
  1332  0318                     	;# 
  1333  0319                     	;# 
  1334  031A                     	;# 
  1335  0394                     	;# 
  1336  0395                     	;# 
  1337  0396                     	;# 
  1338  039A                     	;# 
  1339  039C                     	;# 
  1340  039D                     	;# 
  1341  039E                     	;# 
  1342  039F                     	;# 
  1343  0415                     	;# 
  1344  0416                     	;# 
  1345  0417                     	;# 
  1346  041C                     	;# 
  1347  041D                     	;# 
  1348  041E                     	;# 
  1349  0FE4                     	;# 
  1350  0FE5                     	;# 
  1351  0FE6                     	;# 
  1352  0FE7                     	;# 
  1353  0FE8                     	;# 
  1354  0FE9                     	;# 
  1355  0FEA                     	;# 
  1356  0FEB                     	;# 
  1357  0FED                     	;# 
  1358  0FEE                     	;# 
  1359  0FEF                     	;# 
  1360  0000                     	;# 
  1361  0001                     	;# 
  1362  0002                     	;# 
  1363  0003                     	;# 
  1364  0004                     	;# 
  1365  0005                     	;# 
  1366  0006                     	;# 
  1367  0007                     	;# 
  1368  0008                     	;# 
  1369  0009                     	;# 
  1370  000A                     	;# 
  1371  000B                     	;# 
  1372  000C                     	;# 
  1373  000D                     	;# 
  1374  0011                     	;# 
  1375  0012                     	;# 
  1376  0013                     	;# 
  1377  0014                     	;# 
  1378  0015                     	;# 
  1379  0016                     	;# 
  1380  0016                     	;# 
  1381  0017                     	;# 
  1382  0018                     	;# 
  1383  0019                     	;# 
  1384  001A                     	;# 
  1385  001B                     	;# 
  1386  001C                     	;# 
  1387  001E                     	;# 
  1388  001F                     	;# 
  1389  008C                     	;# 
  1390  008D                     	;# 
  1391  0091                     	;# 
  1392  0092                     	;# 
  1393  0093                     	;# 
  1394  0094                     	;# 
  1395  0095                     	;# 
  1396  0096                     	;# 
  1397  0097                     	;# 
  1398  0098                     	;# 
  1399  0099                     	;# 
  1400  009A                     	;# 
  1401  009B                     	;# 
  1402  009B                     	;# 
  1403  009C                     	;# 
  1404  009D                     	;# 
  1405  009E                     	;# 
  1406  010C                     	;# 
  1407  010D                     	;# 
  1408  0111                     	;# 
  1409  0112                     	;# 
  1410  0113                     	;# 
  1411  0114                     	;# 
  1412  0115                     	;# 
  1413  0116                     	;# 
  1414  0117                     	;# 
  1415  0118                     	;# 
  1416  0119                     	;# 
  1417  011A                     	;# 
  1418  011B                     	;# 
  1419  011D                     	;# 
  1420  011E                     	;# 
  1421  018C                     	;# 
  1422  018D                     	;# 
  1423  0191                     	;# 
  1424  0191                     	;# 
  1425  0192                     	;# 
  1426  0193                     	;# 
  1427  0193                     	;# 
  1428  0193                     	;# 
  1429  0194                     	;# 
  1430  0195                     	;# 
  1431  0196                     	;# 
  1432  0199                     	;# 
  1433  019A                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019C                     	;# 
  1439  019C                     	;# 
  1440  019D                     	;# 
  1441  019E                     	;# 
  1442  019F                     	;# 
  1443  020C                     	;# 
  1444  020D                     	;# 
  1445  0211                     	;# 
  1446  0211                     	;# 
  1447  0212                     	;# 
  1448  0212                     	;# 
  1449  0213                     	;# 
  1450  0213                     	;# 
  1451  0214                     	;# 
  1452  0214                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0215                     	;# 
  1456  0216                     	;# 
  1457  0216                     	;# 
  1458  0217                     	;# 
  1459  0217                     	;# 
  1460  0219                     	;# 
  1461  021A                     	;# 
  1462  021B                     	;# 
  1463  021C                     	;# 
  1464  021D                     	;# 
  1465  021E                     	;# 
  1466  021F                     	;# 
  1467  0291                     	;# 
  1468  0291                     	;# 
  1469  0292                     	;# 
  1470  0293                     	;# 
  1471  0294                     	;# 
  1472  0295                     	;# 
  1473  0295                     	;# 
  1474  0296                     	;# 
  1475  0298                     	;# 
  1476  0298                     	;# 
  1477  0299                     	;# 
  1478  029A                     	;# 
  1479  029B                     	;# 
  1480  029C                     	;# 
  1481  029C                     	;# 
  1482  029D                     	;# 
  1483  029E                     	;# 
  1484  029E                     	;# 
  1485  0311                     	;# 
  1486  0311                     	;# 
  1487  0312                     	;# 
  1488  0313                     	;# 
  1489  0318                     	;# 
  1490  0318                     	;# 
  1491  0319                     	;# 
  1492  031A                     	;# 
  1493  0394                     	;# 
  1494  0395                     	;# 
  1495  0396                     	;# 
  1496  039A                     	;# 
  1497  039C                     	;# 
  1498  039D                     	;# 
  1499  039E                     	;# 
  1500  039F                     	;# 
  1501  0415                     	;# 
  1502  0416                     	;# 
  1503  0417                     	;# 
  1504  041C                     	;# 
  1505  041D                     	;# 
  1506  041E                     	;# 
  1507  0FE4                     	;# 
  1508  0FE5                     	;# 
  1509  0FE6                     	;# 
  1510  0FE7                     	;# 
  1511  0FE8                     	;# 
  1512  0FE9                     	;# 
  1513  0FEA                     	;# 
  1514  0FEB                     	;# 
  1515  0FED                     	;# 
  1516  0FEE                     	;# 
  1517  0FEF                     	;# 
  1518  0000                     	;# 
  1519  0001                     	;# 
  1520  0002                     	;# 
  1521  0003                     	;# 
  1522  0004                     	;# 
  1523  0005                     	;# 
  1524  0006                     	;# 
  1525  0007                     	;# 
  1526  0008                     	;# 
  1527  0009                     	;# 
  1528  000A                     	;# 
  1529  000B                     	;# 
  1530  000C                     	;# 
  1531  000D                     	;# 
  1532  0011                     	;# 
  1533  0012                     	;# 
  1534  0013                     	;# 
  1535  0014                     	;# 
  1536  0015                     	;# 
  1537  0016                     	;# 
  1538  0016                     	;# 
  1539  0017                     	;# 
  1540  0018                     	;# 
  1541  0019                     	;# 
  1542  001A                     	;# 
  1543  001B                     	;# 
  1544  001C                     	;# 
  1545  001E                     	;# 
  1546  001F                     	;# 
  1547  008C                     	;# 
  1548  008D                     	;# 
  1549  0091                     	;# 
  1550  0092                     	;# 
  1551  0093                     	;# 
  1552  0094                     	;# 
  1553  0095                     	;# 
  1554  0096                     	;# 
  1555  0097                     	;# 
  1556  0098                     	;# 
  1557  0099                     	;# 
  1558  009A                     	;# 
  1559  009B                     	;# 
  1560  009B                     	;# 
  1561  009C                     	;# 
  1562  009D                     	;# 
  1563  009E                     	;# 
  1564  010C                     	;# 
  1565  010D                     	;# 
  1566  0111                     	;# 
  1567  0112                     	;# 
  1568  0113                     	;# 
  1569  0114                     	;# 
  1570  0115                     	;# 
  1571  0116                     	;# 
  1572  0117                     	;# 
  1573  0118                     	;# 
  1574  0119                     	;# 
  1575  011A                     	;# 
  1576  011B                     	;# 
  1577  011D                     	;# 
  1578  011E                     	;# 
  1579  018C                     	;# 
  1580  018D                     	;# 
  1581  0191                     	;# 
  1582  0191                     	;# 
  1583  0192                     	;# 
  1584  0193                     	;# 
  1585  0193                     	;# 
  1586  0193                     	;# 
  1587  0194                     	;# 
  1588  0195                     	;# 
  1589  0196                     	;# 
  1590  0199                     	;# 
  1591  019A                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019C                     	;# 
  1597  019C                     	;# 
  1598  019D                     	;# 
  1599  019E                     	;# 
  1600  019F                     	;# 
  1601  020C                     	;# 
  1602  020D                     	;# 
  1603  0211                     	;# 
  1604  0211                     	;# 
  1605  0212                     	;# 
  1606  0212                     	;# 
  1607  0213                     	;# 
  1608  0213                     	;# 
  1609  0214                     	;# 
  1610  0214                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0215                     	;# 
  1614  0216                     	;# 
  1615  0216                     	;# 
  1616  0217                     	;# 
  1617  0217                     	;# 
  1618  0219                     	;# 
  1619  021A                     	;# 
  1620  021B                     	;# 
  1621  021C                     	;# 
  1622  021D                     	;# 
  1623  021E                     	;# 
  1624  021F                     	;# 
  1625  0291                     	;# 
  1626  0291                     	;# 
  1627  0292                     	;# 
  1628  0293                     	;# 
  1629  0294                     	;# 
  1630  0295                     	;# 
  1631  0295                     	;# 
  1632  0296                     	;# 
  1633  0298                     	;# 
  1634  0298                     	;# 
  1635  0299                     	;# 
  1636  029A                     	;# 
  1637  029B                     	;# 
  1638  029C                     	;# 
  1639  029C                     	;# 
  1640  029D                     	;# 
  1641  029E                     	;# 
  1642  029E                     	;# 
  1643  0311                     	;# 
  1644  0311                     	;# 
  1645  0312                     	;# 
  1646  0313                     	;# 
  1647  0318                     	;# 
  1648  0318                     	;# 
  1649  0319                     	;# 
  1650  031A                     	;# 
  1651  0394                     	;# 
  1652  0395                     	;# 
  1653  0396                     	;# 
  1654  039A                     	;# 
  1655  039C                     	;# 
  1656  039D                     	;# 
  1657  039E                     	;# 
  1658  039F                     	;# 
  1659  0415                     	;# 
  1660  0416                     	;# 
  1661  0417                     	;# 
  1662  041C                     	;# 
  1663  041D                     	;# 
  1664  041E                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676  000D                     _PORTB	set	13
  1677  000C                     _PORTA	set	12
  1678  001C                     _T2CONbits	set	28
  1679  001B                     _PR2	set	27
  1680  0011                     _PIR1bits	set	17
  1681  000B                     _INTCONbits	set	11
  1682  009B                     _ADRESL	set	155
  1683  009C                     _ADRESH	set	156
  1684  009D                     _ADCON0bits	set	157
  1685  008D                     _TRISB	set	141
  1686  008C                     _TRISA	set	140
  1687  009E                     _ADCON1	set	158
  1688  009D                     _ADCON0	set	157
  1689  0095                     _OPTION_REG	set	149
  1690  0095                     _OPTION_REGbits	set	149
  1691  0091                     _PIE1bits	set	145
  1692  0099                     _OSCCONbits	set	153
  1693  010D                     _LATB	set	269
  1694  010C                     _LATA	set	268
  1695  011D                     _APFCON0bits	set	285
  1696  018D                     _ANSELB	set	397
  1697  018C                     _ANSELA	set	396
  1698  0293                     _CCP1CONbits	set	659
  1699  0296                     _PSTR1CONbits	set	662
  1700  0291                     _CCPR1L	set	657
  1701  0293                     _CCP1CON	set	659
  1702                           
  1703                           	psect	stringtext1
  1704  07FF                     __pstringtext1:
  1705  07FF                     STR_1:
  1706  07FF  3428               	retlw	40	;'('
  1707  0800  3428               	retlw	40	;'('
  1708  0801  3449               	retlw	73	;'I'
  1709  0802  344E               	retlw	78	;'N'
  1710  0803  3454               	retlw	84	;'T'
  1711  0804  3443               	retlw	67	;'C'
  1712  0805  344F               	retlw	79	;'O'
  1713  0806  344E               	retlw	78	;'N'
  1714  0807  3429               	retlw	41	;')'
  1715  0808  3426               	retlw	38	;'&'
  1716  0809  3430               	retlw	48	;'0'
  1717  080A  3437               	retlw	55	;'7'
  1718  080B  3446               	retlw	70	;'F'
  1719  080C  3468               	retlw	104	;'h'
  1720  080D  3429               	retlw	41	;')'
  1721  080E  342C               	retlw	44	;','
  1722  080F  3432               	retlw	50	;'2'
  1723  0810  3400               	retlw	0
  1724                           
  1725                           	psect	stringtext2
  1726  0811                     __pstringtext2:
  1727  0811                     STR_3:
  1728  0811  3428               	retlw	40	;'('
  1729  0812  3428               	retlw	40	;'('
  1730  0813  3450               	retlw	80	;'P'
  1731  0814  3449               	retlw	73	;'I'
  1732  0815  3452               	retlw	82	;'R'
  1733  0816  3431               	retlw	49	;'1'
  1734  0817  3429               	retlw	41	;')'
  1735  0818  3426               	retlw	38	;'&'
  1736  0819  3430               	retlw	48	;'0'
  1737  081A  3437               	retlw	55	;'7'
  1738  081B  3446               	retlw	70	;'F'
  1739  081C  3468               	retlw	104	;'h'
  1740  081D  3429               	retlw	41	;')'
  1741  081E  342C               	retlw	44	;','
  1742  081F  3432               	retlw	50	;'2'
  1743  0820  3400               	retlw	0
  1744                           
  1745                           	psect	stringtext3
  1746  0000                     __pstringtext3:
  1747  0811                     
  1748                           	psect	cinit
  1749  009F                     start_initialization:	
  1750                           ; #config settings
  1751                           
  1752  009F                     __initialization:
  1753                           
  1754                           ; Clear objects allocated to BANK0
  1755  009F  305D               	movlw	low __pbssBANK0
  1756  00A0  0084               	movwf	4
  1757  00A1  3000               	movlw	high __pbssBANK0
  1758  00A2  0085               	movwf	5
  1759  00A3  3013               	movlw	19
  1760  00A4  318C  2423  3180   	fcall	clear_ram0
  1761                           
  1762                           ; Clear objects allocated to BANK1
  1763  00A7  30A0               	movlw	low __pbssBANK1
  1764  00A8  0084               	movwf	4
  1765  00A9  3000               	movlw	high __pbssBANK1
  1766  00AA  0085               	movwf	5
  1767  00AB  3042               	movlw	66
  1768  00AC  318C  2423  3180   	fcall	clear_ram0
  1769                           
  1770                           ; Clear objects allocated to BANK2
  1771  00AF  3020               	movlw	low __pbssBANK2
  1772  00B0  0084               	movwf	4
  1773  00B1  3001               	movlw	high __pbssBANK2
  1774  00B2  0085               	movwf	5
  1775  00B3  3040               	movlw	64
  1776  00B4  318C  2423  3180   	fcall	clear_ram0
  1777                           
  1778                           ; Clear objects allocated to BANK3
  1779  00B7  30A0               	movlw	low __pbssBANK3
  1780  00B8  0084               	movwf	4
  1781  00B9  3001               	movlw	high __pbssBANK3
  1782  00BA  0085               	movwf	5
  1783  00BB  3040               	movlw	64
  1784  00BC  318C  2423  3180   	fcall	clear_ram0
  1785                           
  1786                           ; Clear objects allocated to BANK4
  1787  00BF  3020               	movlw	low __pbssBANK4
  1788  00C0  0084               	movwf	4
  1789  00C1  3002               	movlw	high __pbssBANK4
  1790  00C2  0085               	movwf	5
  1791  00C3  3020               	movlw	32
  1792  00C4  318C  2423  3180   	fcall	clear_ram0
  1793  00C7                     end_of_initialization:	
  1794                           ;End of C runtime variable initialization code
  1795                           
  1796  00C7                     __end_of__initialization:
  1797  00C7  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1798  00C8  0020               	movlb	0
  1799  00C9  318D  2D73         	ljmp	_main	;jump to C main() function
  1800                           
  1801                           	psect	bssBANK0
  1802  005D                     __pbssBANK0:
  1803  005D                     _filteredFreqPot:
  1804  005D                     	ds	2
  1805  005F                     _filteredVout:
  1806  005F                     	ds	2
  1807  0061                     _filteredIL:
  1808  0061                     	ds	2
  1809  0063                     _latestIL:
  1810  0063                     	ds	2
  1811  0065                     _setDuty:
  1812  0065                     	ds	2
  1813  0067                     _timerSlotQuarter:
  1814  0067                     	ds	1
  1815  0068                     _timerSlotHalf:
  1816  0068                     	ds	1
  1817  0069                     _potSetCount:
  1818  0069                     	ds	1
  1819  006A                     _tripIL:
  1820  006A                     	ds	1
  1821  006B                     _tripIDS:
  1822  006B                     	ds	1
  1823  006C                     _currentTripCount:
  1824  006C                     	ds	1
  1825  006D                     _currentState:
  1826  006D                     	ds	1
  1827  006E                     _prevPeriod:
  1828  006E                     	ds	1
  1829  006F                     _setPeriod:
  1830  006F                     	ds	1
  1831                           
  1832                           	psect	bssBANK1
  1833  00A0                     __pbssBANK1:
  1834  00A0                     _currentModeVariables:
  1835  00A0                     	ds	28
  1836  00BC                     _clockFrequency:
  1837  00BC                     	ds	4
  1838  00C0                     _filteredDutyPot:
  1839  00C0                     	ds	2
  1840  00C2                     _filteredIDS:
  1841  00C2                     	ds	2
  1842  00C4                     _prevDuty:
  1843  00C4                     	ds	2
  1844  00C6                     _voltageModeVariables:
  1845  00C6                     	ds	28
  1846                           
  1847                           	psect	bssBANK2
  1848  0120                     __pbssBANK2:
  1849  0120                     _currentILFIFO:
  1850  0120                     	ds	32
  1851  0140                     _currentIDSFIFO:
  1852  0140                     	ds	32
  1853                           
  1854                           	psect	bssBANK3
  1855  01A0                     __pbssBANK3:
  1856  01A0                     _freqPotFIFO:
  1857  01A0                     	ds	32
  1858  01C0                     _voutFIFO:
  1859  01C0                     	ds	32
  1860                           
  1861                           	psect	bssBANK4
  1862  0220                     __pbssBANK4:
  1863  0220                     _dutyPotFIFO:
  1864  0220                     	ds	32
  1865                           
  1866                           	psect	clrtext
  1867  0C23                     clear_ram0:	
  1868                           ;	Called with FSR0 containing the base address, and
  1869                           ;	WREG with the size to clear
  1870                           
  1871  0C23  0064               	clrwdt	;clear the watchdog before getting into this loop
  1872  0C24                     clrloop0:
  1873  0C24  0180               	clrf	0	;clear RAM location pointed to by FSR
  1874  0C25  3101               	addfsr 0,1
  1875  0C26  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1876  0C27  2C24               	goto	clrloop0	;have we reached the end yet?
  1877  0C28  3400               	retlw	0	;all done for this memory range, return
  1878                           
  1879                           	psect	cstackBANK1
  1880  00E2                     __pcstackBANK1:
  1881  00E2                     ?_writeGPIO:
  1882  00E2                     ??_setupInternalOscillator:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  00E2                     ??_setupTimer0Interrupt:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  00E2                     ??_initialiseADCModule:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  00E2                     ?_initialiseGPIO:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  00E2                     ??_readGPIO:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  00E2                     ??_transToVoltageModeControl:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  00E2                     ??_transToCurrentModeControl:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  00E2                     ??_transToPotControl:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  00E2                     ??_initialiseADCPin:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  00E2                     initialiseGPIO@direction:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  00E2                     writeGPIO@writeValue:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915                           
  1916                           ; 1 bytes @ 0x0
  1917  00E2                     	ds	1
  1918  00E3                     ??_writeGPIO:
  1919  00E3                     ??_initialiseGPIO:	
  1920                           ; 1 bytes @ 0x1
  1921                           
  1922                           
  1923                           ; 1 bytes @ 0x1
  1924  00E3                     	ds	1
  1925  00E4                     setupInternalOscillator@selectedFreq:
  1926  00E4                     initialiseADCPin@gpioValid:	
  1927                           ; 1 bytes @ 0x2
  1928                           
  1929  00E4                     readGPIO@readA:	
  1930                           ; 1 bytes @ 0x2
  1931                           
  1932                           
  1933                           ; 1 bytes @ 0x2
  1934  00E4                     	ds	1
  1935  00E5                     initialiseADCPin@portType:
  1936  00E5                     initialiseGPIO@portType:	
  1937                           ; 1 bytes @ 0x3
  1938                           
  1939  00E5                     writeGPIO@portType:	
  1940                           ; 1 bytes @ 0x3
  1941                           
  1942  00E5                     readGPIO@returnValueA:	
  1943                           ; 1 bytes @ 0x3
  1944                           
  1945                           
  1946                           ; 1 bytes @ 0x3
  1947  00E5                     	ds	1
  1948  00E6                     initialiseADCPin@portNumber:
  1949  00E6                     initialiseGPIO@gpioNumber:	
  1950                           ; 1 bytes @ 0x4
  1951                           
  1952  00E6                     writeGPIO@gpioNumber:	
  1953                           ; 1 bytes @ 0x4
  1954                           
  1955  00E6                     readGPIO@readB:	
  1956                           ; 1 bytes @ 0x4
  1957                           
  1958                           
  1959                           ; 1 bytes @ 0x4
  1960  00E6                     	ds	1
  1961  00E7                     initialiseADCPin@gpioNumber:
  1962  00E7                     initialiseGPIO@portNumber:	
  1963                           ; 1 bytes @ 0x5
  1964                           
  1965  00E7                     writeGPIO@portNumber:	
  1966                           ; 1 bytes @ 0x5
  1967                           
  1968  00E7                     readGPIO@returnValueB:	
  1969                           ; 1 bytes @ 0x5
  1970                           
  1971                           
  1972                           ; 1 bytes @ 0x5
  1973  00E7                     	ds	1
  1974  00E8                     ??_currentTripReset:
  1975  00E8                     ??_setupPWM:	
  1976                           ; 1 bytes @ 0x6
  1977                           
  1978  00E8                     ??_initialiseCurrentSensors:	
  1979                           ; 1 bytes @ 0x6
  1980                           
  1981  00E8                     ??_initialisePotentiometers:	
  1982                           ; 1 bytes @ 0x6
  1983                           
  1984  00E8                     ??_initialiseController:	
  1985                           ; 1 bytes @ 0x6
  1986                           
  1987  00E8                     readGPIO@portNumber:	
  1988                           ; 1 bytes @ 0x6
  1989                           
  1990                           
  1991                           ; 1 bytes @ 0x6
  1992  00E8                     	ds	1
  1993  00E9                     readGPIO@portType:
  1994                           
  1995                           ; 1 bytes @ 0x7
  1996  00E9                     	ds	1
  1997  00EA                     readGPIO@gpioNumber:
  1998                           
  1999                           ; 1 bytes @ 0x8
  2000  00EA                     	ds	1
  2001  00EB                     ?_main:
  2002  00EB                     main@argc:	
  2003                           ; 2 bytes @ 0x9
  2004                           
  2005                           
  2006                           ; 2 bytes @ 0x9
  2007  00EB                     	ds	2
  2008  00ED                     main@argv:
  2009                           
  2010                           ; 2 bytes @ 0xB
  2011  00ED                     	ds	2
  2012  00EF                     ??_main:
  2013                           
  2014                           	psect	cstackCOMMON
  2015  0070                     __pcstackCOMMON:	
  2016                           ; 1 bytes @ 0xD
  2017                           
  2018  0070                     ?_currentTripRead:
  2019  0070                     ?_transToOverCurrentFault:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ??_transToOverCurrentFault:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_currentTripReset:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_setPWMDutyandPeriod:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_controlRoutine:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_runPotScaling:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_setupInternalOscillator:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_setupPWM:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_setupTimer0Interrupt:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_initialiseADCModule:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_initialiseCurrentSensors:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_initialisePotentiometers:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_initialiseController:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_readGPIO:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_transToVoltageModeControl:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?_transToCurrentModeControl:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?_transToPotControl:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?_runVoltageModeControl:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ?_runCurrentModeControl:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_Tick980Hz:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_initialiseADCPin:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ??___omul:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0070                     ?i1_writeGPIO:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0070                     ?i1_readGPIO:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0070                     ??i1_readGPIO:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0070                     ?i1_currentTripReset:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ?_readFilteredIL:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0070                     ?_readILCurrentADCRaw:	
  2101                           ; 2 bytes @ 0x0
  2102                           
  2103  0070                     ?_abs:	
  2104                           ; 2 bytes @ 0x0
  2105                           
  2106  0070                     ?_readADCRaw:	
  2107                           ; 2 bytes @ 0x0
  2108                           
  2109  0070                     ?___wmul:	
  2110                           ; 2 bytes @ 0x0
  2111                           
  2112  0070                     ?___lmul:	
  2113                           ; 2 bytes @ 0x0
  2114                           
  2115  0070                     i1writeGPIO@writeValue:	
  2116                           ; 4 bytes @ 0x0
  2117                           
  2118  0070                     setPWMDutyandPeriod@dutyCycle:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0070                     ___wmul@multiplier:	
  2122                           ; 2 bytes @ 0x0
  2123                           
  2124  0070                     abs@a:	
  2125                           ; 2 bytes @ 0x0
  2126                           
  2127  0070                     ___lmul@multiplier:	
  2128                           ; 2 bytes @ 0x0
  2129                           
  2130                           
  2131                           ; 4 bytes @ 0x0
  2132  0070                     	ds	1
  2133  0071                     ??i1_writeGPIO:
  2134  0071                     ___omul@product:	
  2135                           ; 1 bytes @ 0x1
  2136                           
  2137                           
  2138                           ; 8 bytes @ 0x1
  2139  0071                     	ds	1
  2140  0072                     ??_readFilteredIL:
  2141  0072                     ??_readILCurrentADCRaw:	
  2142                           ; 1 bytes @ 0x2
  2143                           
  2144  0072                     ??_abs:	
  2145                           ; 1 bytes @ 0x2
  2146                           
  2147  0072                     ??_readADCRaw:	
  2148                           ; 1 bytes @ 0x2
  2149                           
  2150  0072                     setPWMDutyandPeriod@period:	
  2151                           ; 1 bytes @ 0x2
  2152                           
  2153  0072                     i1readGPIO@readA:	
  2154                           ; 1 bytes @ 0x2
  2155                           
  2156  0072                     ___wmul@multiplicand:	
  2157                           ; 1 bytes @ 0x2
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x2
  2161  0072                     	ds	1
  2162  0073                     ??_setPWMDutyandPeriod:
  2163  0073                     i1writeGPIO@portType:	
  2164                           ; 1 bytes @ 0x3
  2165                           
  2166  0073                     i1readGPIO@returnValueA:	
  2167                           ; 1 bytes @ 0x3
  2168                           
  2169                           
  2170                           ; 1 bytes @ 0x3
  2171  0073                     	ds	1
  2172  0074                     ??___wmul:
  2173  0074                     i1writeGPIO@gpioNumber:	
  2174                           ; 1 bytes @ 0x4
  2175                           
  2176  0074                     i1readGPIO@readB:	
  2177                           ; 1 bytes @ 0x4
  2178                           
  2179  0074                     readADCRaw@returnValue:	
  2180                           ; 1 bytes @ 0x4
  2181                           
  2182  0074                     ___wmul@product:	
  2183                           ; 2 bytes @ 0x4
  2184                           
  2185  0074                     ___lmul@multiplicand:	
  2186                           ; 2 bytes @ 0x4
  2187                           
  2188                           
  2189                           ; 4 bytes @ 0x4
  2190  0074                     	ds	1
  2191  0075                     i1writeGPIO@portNumber:
  2192  0075                     i1readGPIO@returnValueB:	
  2193                           ; 1 bytes @ 0x5
  2194                           
  2195                           
  2196                           ; 1 bytes @ 0x5
  2197  0075                     	ds	1
  2198  0076                     ??i1_currentTripReset:
  2199  0076                     ?_convertRawToMilliAmps:	
  2200                           ; 1 bytes @ 0x6
  2201                           
  2202  0076                     ?___lldiv:	
  2203                           ; 2 bytes @ 0x6
  2204                           
  2205  0076                     readADCRaw@channel:	
  2206                           ; 4 bytes @ 0x6
  2207                           
  2208  0076                     i1readGPIO@portNumber:	
  2209                           ; 1 bytes @ 0x6
  2210                           
  2211  0076                     convertRawToMilliAmps@rawValue:	
  2212                           ; 1 bytes @ 0x6
  2213                           
  2214  0076                     readFilteredIL@sumOfSamples:	
  2215                           ; 2 bytes @ 0x6
  2216                           
  2217  0076                     ___lldiv@divisor:	
  2218                           ; 4 bytes @ 0x6
  2219                           
  2220                           
  2221                           ; 4 bytes @ 0x6
  2222  0076                     	ds	1
  2223  0077                     readADCRaw@gpioValid:
  2224  0077                     i1readGPIO@portType:	
  2225                           ; 1 bytes @ 0x7
  2226                           
  2227                           
  2228                           ; 1 bytes @ 0x7
  2229  0077                     	ds	1
  2230  0078                     ??_convertRawToMilliAmps:
  2231  0078                     ??___lmul:	
  2232                           ; 1 bytes @ 0x8
  2233                           
  2234  0078                     readADCRaw@i:	
  2235                           ; 1 bytes @ 0x8
  2236                           
  2237  0078                     i1readGPIO@gpioNumber:	
  2238                           ; 1 bytes @ 0x8
  2239                           
  2240  0078                     convertRawToMilliAmps@offsetted:	
  2241                           ; 1 bytes @ 0x8
  2242                           
  2243  0078                     ___lmul@product:	
  2244                           ; 2 bytes @ 0x8
  2245                           
  2246                           
  2247                           ; 4 bytes @ 0x8
  2248  0078                     	ds	1
  2249  0079                     ??_currentTripRead:
  2250  0079                     readADCRaw@i_696:	
  2251                           ; 1 bytes @ 0x9
  2252                           
  2253                           
  2254                           ; 1 bytes @ 0x9
  2255  0079                     	ds	1
  2256  007A                     readADCRaw@gpioNumber:
  2257  007A                     _currentTripRead$969:	
  2258                           ; 1 bytes @ 0xA
  2259                           
  2260  007A                     readFilteredIL@i_977:	
  2261                           ; 1 bytes @ 0xA
  2262                           
  2263  007A                     convertRawToMilliAmps@returnValuemA:	
  2264                           ; 1 bytes @ 0xA
  2265                           
  2266  007A                     ___lldiv@dividend:	
  2267                           ; 2 bytes @ 0xA
  2268                           
  2269                           
  2270                           ; 4 bytes @ 0xA
  2271  007A                     	ds	1
  2272  007B                     ?_readFilteredVout:
  2273  007B                     ?_readFilteredDutyPot:	
  2274                           ; 2 bytes @ 0xB
  2275                           
  2276  007B                     ?_readFilteredFreqPot:	
  2277                           ; 2 bytes @ 0xB
  2278                           
  2279  007B                     readFilteredIL@i:	
  2280                           ; 2 bytes @ 0xB
  2281                           
  2282                           
  2283                           ; 1 bytes @ 0xB
  2284  007B                     	ds	1
  2285  007C                     ??_runCurrentModeControl:
  2286  007C                     ?_convertRawToMilliVolts:	
  2287                           ; 1 bytes @ 0xC
  2288                           
  2289  007C                     convertRawToMilliVolts@rawValue:	
  2290                           ; 2 bytes @ 0xC
  2291                           
  2292                           
  2293                           ; 2 bytes @ 0xC
  2294  007C                     	ds	2
  2295                           
  2296                           	psect	cstackBANK0
  2297  0020                     __pcstackBANK0:
  2298  0020                     ??_readFilteredVout:
  2299  0020                     ??_readFilteredDutyPot:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0020                     ??_readFilteredFreqPot:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0020                     ??_convertRawToMilliVolts:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0020                     ??___lldiv:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0020                     ?___omul:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0020                     ___omul@multiplier:	
  2315                           ; 8 bytes @ 0x0
  2316                           
  2317                           
  2318                           ; 8 bytes @ 0x0
  2319  0020                     	ds	1
  2320  0021                     ___lldiv@quotient:
  2321                           
  2322                           ; 4 bytes @ 0x1
  2323  0021                     	ds	3
  2324  0024                     readFilteredDutyPot@sumOfSamples:
  2325  0024                     readFilteredFreqPot@sumOfSamples:	
  2326                           ; 4 bytes @ 0x4
  2327                           
  2328  0024                     readFilteredVout@sumOfSamples:	
  2329                           ; 4 bytes @ 0x4
  2330                           
  2331                           
  2332                           ; 4 bytes @ 0x4
  2333  0024                     	ds	1
  2334  0025                     ___lldiv@counter:
  2335  0025                     convertRawToMilliVolts@vsenseMult:	
  2336                           ; 1 bytes @ 0x5
  2337                           
  2338                           
  2339                           ; 4 bytes @ 0x5
  2340  0025                     	ds	1
  2341  0026                     ??_runPotScaling:
  2342                           
  2343                           ; 1 bytes @ 0x6
  2344  0026                     	ds	2
  2345  0028                     readFilteredDutyPot@i_797:
  2346  0028                     readFilteredFreqPot@i_801:	
  2347                           ; 1 bytes @ 0x8
  2348                           
  2349  0028                     readFilteredVout@i_894:	
  2350                           ; 1 bytes @ 0x8
  2351                           
  2352  0028                     ___omul@multiplicand:	
  2353                           ; 1 bytes @ 0x8
  2354                           
  2355                           
  2356                           ; 8 bytes @ 0x8
  2357  0028                     	ds	1
  2358  0029                     readFilteredDutyPot@i:
  2359  0029                     readFilteredFreqPot@i:	
  2360                           ; 1 bytes @ 0x9
  2361                           
  2362  0029                     readFilteredVout@i:	
  2363                           ; 1 bytes @ 0x9
  2364                           
  2365  0029                     convertRawToMilliVolts@offsetted:	
  2366                           ; 1 bytes @ 0x9
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x9
  2370  0029                     	ds	2
  2371  002B                     convertRawToMilliVolts@returnValuedV:
  2372                           
  2373                           ; 2 bytes @ 0xB
  2374  002B                     	ds	3
  2375  002E                     runPotScaling@maxDuty:
  2376                           
  2377                           ; 2 bytes @ 0xE
  2378  002E                     	ds	2
  2379  0030                     ??_runVoltageModeControl:
  2380  0030                     runPotScaling@minDuty:	
  2381                           ; 1 bytes @ 0x10
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x10
  2385  0030                     	ds	16
  2386  0040                     runVoltageModeControl@integralMult:
  2387                           
  2388                           ; 8 bytes @ 0x20
  2389  0040                     	ds	8
  2390  0048                     runVoltageModeControl@propMult:
  2391                           
  2392                           ; 8 bytes @ 0x28
  2393  0048                     	ds	8
  2394  0050                     runVoltageModeControl@newVoltage:
  2395                           
  2396                           ; 2 bytes @ 0x30
  2397  0050                     	ds	2
  2398  0052                     ??_controlRoutine:
  2399                           
  2400                           ; 1 bytes @ 0x32
  2401  0052                     	ds	6
  2402  0058                     controlRoutine@maxDuty:
  2403                           
  2404                           ; 2 bytes @ 0x38
  2405  0058                     	ds	2
  2406  005A                     controlRoutine@minDuty:
  2407                           
  2408                           ; 2 bytes @ 0x3A
  2409  005A                     	ds	2
  2410  005C                     ??_Tick980Hz:
  2411                           
  2412                           ; 1 bytes @ 0x3C
  2413  005C                     	ds	1
  2414                           
  2415                           	psect	maintext
  2416  0D73                     __pmaintext:	
  2417 ;;
  2418 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2419 ;;
  2420 ;; *************** function _main *****************
  2421 ;; Defined at:
  2422 ;;		line 115 in file "main.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  argc            2    9[BANK1 ] int 
  2425 ;;  argv            2   11[BANK1 ] PTR PTR unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  2    9[BANK1 ] int 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : B1F/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2437 ;;      Params:         0       0       4       0       0       0
  2438 ;;      Locals:         0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0
  2440 ;;      Totals:         0       0       4       0       0       0
  2441 ;;Total ram usage:        4 bytes
  2442 ;; Hardware stack levels required when called: 8
  2443 ;; This function calls:
  2444 ;;		_initialiseADCModule
  2445 ;;		_initialiseController
  2446 ;;		_initialiseCurrentSensors
  2447 ;;		_initialiseGPIO
  2448 ;;		_initialisePotentiometers
  2449 ;;		_readGPIO
  2450 ;;		_setupInternalOscillator
  2451 ;;		_setupPWM
  2452 ;;		_setupTimer0Interrupt
  2453 ;;		_transToCurrentModeControl
  2454 ;;		_transToPotControl
  2455 ;;		_transToVoltageModeControl
  2456 ;; This function is called by:
  2457 ;;		Startup code after reset
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461  0D73                     _main:	
  2462                           ;psect for function _main
  2463                           
  2464  0D73                     l2760:	
  2465                           ;incstack = 0
  2466                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2467                           
  2468                           
  2469                           ;main.c: 117:     setupInternalOscillator(freq32M);
  2470  0D73  300A               	movlw	10
  2471  0D74  3184  2487  318D   	fcall	_setupInternalOscillator
  2472  0D77                     l2762:
  2473                           
  2474                           ;main.c: 119:     setupPWM();
  2475  0D77  318C  24C0  318D   	fcall	_setupPWM
  2476  0D7A                     l2764:
  2477                           
  2478                           ;main.c: 120:     setupTimer0Interrupt();
  2479  0D7A  318C  2437  318D   	fcall	_setupTimer0Interrupt
  2480  0D7D                     l2766:
  2481                           
  2482                           ;main.c: 121:     initialiseADCModule();
  2483  0D7D  318C  241D  318D   	fcall	_initialiseADCModule
  2484  0D80                     l2768:
  2485                           
  2486                           ;main.c: 122:     initialiseCurrentSensors();
  2487  0D80  318C  24FB  318D   	fcall	_initialiseCurrentSensors
  2488  0D83                     l2770:
  2489                           
  2490                           ;main.c: 123:     initialisePotentiometers();
  2491  0D83  318C  2451  318D   	fcall	_initialisePotentiometers
  2492  0D86                     l2772:
  2493                           
  2494                           ;main.c: 124:     initialiseController();
  2495  0D86  318C  2472  318D   	fcall	_initialiseController
  2496  0D89                     l2774:
  2497                           
  2498                           ;main.c: 126:     initialiseGPIO(pinRB4, 0);
  2499  0D89  0021               	movlb	1	; select bank1
  2500  0D8A  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2501  0D8B  300C               	movlw	12
  2502  0D8C  3185  254C  318D   	fcall	_initialiseGPIO
  2503  0D8F                     l2776:
  2504  0D8F                     l2778:	
  2505                           ;main.c: 128:     _delay((unsigned long)((100)*(freq32M/4000.0)));
  2506                           
  2507                           
  2508                           ;main.c: 131:         if(1 == 1) transToVoltageModeControl();
  2509  0D8F  3008               	movlw	8
  2510  0D90  318E  2659  318D   	fcall	_readGPIO
  2511  0D93  3A01               	xorlw	1
  2512  0D94  1903               	skipnz
  2513  0D95  2D97               	goto	u2541
  2514  0D96  2D98               	goto	u2540
  2515  0D97                     u2541:
  2516  0D97  2D9C               	goto	l2784
  2517  0D98                     u2540:
  2518  0D98                     l2780:
  2519  0D98  318C  2430  318D   	fcall	_transToVoltageModeControl
  2520  0D9B  2D9F               	goto	l128
  2521  0D9C                     l2784:
  2522  0D9C  318C  2419  318D   	fcall	_transToPotControl
  2523  0D9F                     l128:	
  2524                           ;main.c: 136:     while(1){
  2525                           
  2526  0D9F  2D9F               	goto	l128
  2527  0DA0  3180  289D         	ljmp	start
  2528  0DA2                     __end_of_main:
  2529                           
  2530                           	psect	text1
  2531  0C30                     __ptext1:	
  2532 ;; *************** function _transToVoltageModeControl *****************
  2533 ;; Defined at:
  2534 ;;		line 27 in file "StateMachine.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2548 ;;      Params:         0       0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0
  2550 ;;      Temps:          0       0       1       0       0       0
  2551 ;;      Totals:         0       0       1       0       0       0
  2552 ;;Total ram usage:        1 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 5
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_main
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562  0C30                     _transToVoltageModeControl:	
  2563                           ;psect for function _transToVoltageModeControl
  2564                           
  2565  0C30                     l2708:	
  2566                           ;incstack = 0
  2567                           ; Regs used in _transToVoltageModeControl: [wreg]
  2568                           
  2569                           
  2570                           ;StateMachine.c: 28:     currentState = voltageModeControl;
  2571  0C30  3002               	movlw	2
  2572  0C31  0021               	movlb	1	; select bank1
  2573  0C32  00E2               	movwf	??_transToVoltageModeControl^(0+128)
  2574  0C33  0862               	movf	??_transToVoltageModeControl^(0+128),w
  2575  0C34  0020               	movlb	0	; select bank0
  2576  0C35  00ED               	movwf	_currentState
  2577  0C36                     l573:
  2578  0C36  0008               	return
  2579  0C37                     __end_of_transToVoltageModeControl:
  2580                           
  2581                           	psect	text2
  2582  0C19                     __ptext2:	
  2583 ;; *************** function _transToPotControl *****************
  2584 ;; Defined at:
  2585 ;;		line 18 in file "StateMachine.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		None
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2599 ;;      Params:         0       0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used: 1
  2605 ;; Hardware stack levels required when called: 5
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613  0C19                     _transToPotControl:	
  2614                           ;psect for function _transToPotControl
  2615                           
  2616  0C19                     l2712:	
  2617                           ;incstack = 0
  2618                           ; Regs used in _transToPotControl: []
  2619                           
  2620                           
  2621                           ;StateMachine.c: 19:     currentState = potControl;
  2622  0C19  0020               	movlb	0	; select bank0
  2623  0C1A  01ED               	clrf	_currentState
  2624  0C1B  0AED               	incf	_currentState,f
  2625  0C1C                     l570:
  2626  0C1C  0008               	return
  2627  0C1D                     __end_of_transToPotControl:
  2628                           
  2629                           	psect	text3
  2630  0C29                     __ptext3:	
  2631 ;; *************** function _transToCurrentModeControl *****************
  2632 ;; Defined at:
  2633 ;;		line 36 in file "StateMachine.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2647 ;;      Params:         0       0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0       0
  2649 ;;      Temps:          0       0       1       0       0       0
  2650 ;;      Totals:         0       0       1       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used: 1
  2653 ;; Hardware stack levels required when called: 5
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661  0C29                     _transToCurrentModeControl:	
  2662                           ;psect for function _transToCurrentModeControl
  2663                           
  2664  0C29                     l2710:	
  2665                           ;incstack = 0
  2666                           ; Regs used in _transToCurrentModeControl: [wreg]
  2667                           
  2668                           
  2669                           ;StateMachine.c: 37:     currentState = currentModeControl;
  2670  0C29  3003               	movlw	3
  2671  0C2A  0021               	movlb	1	; select bank1
  2672  0C2B  00E2               	movwf	??_transToCurrentModeControl^(0+128)
  2673  0C2C  0862               	movf	??_transToCurrentModeControl^(0+128),w
  2674  0C2D  0020               	movlb	0	; select bank0
  2675  0C2E  00ED               	movwf	_currentState
  2676  0C2F                     l576:
  2677  0C2F  0008               	return
  2678  0C30                     __end_of_transToCurrentModeControl:
  2679                           
  2680                           	psect	text4
  2681  0C37                     __ptext4:	
  2682 ;; *************** function _setupTimer0Interrupt *****************
  2683 ;; Defined at:
  2684 ;;		line 17 in file "Timer0.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2698 ;;      Params:         0       0       0       0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0
  2701 ;;      Totals:         0       0       0       0       0       0
  2702 ;;Total ram usage:        0 bytes
  2703 ;; Hardware stack levels used: 1
  2704 ;; Hardware stack levels required when called: 5
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712  0C37                     _setupTimer0Interrupt:	
  2713                           ;psect for function _setupTimer0Interrupt
  2714                           
  2715  0C37                     l2656:	
  2716                           ;incstack = 0
  2717                           ; Regs used in _setupTimer0Interrupt: [wreg]
  2718                           
  2719                           
  2720                           ;Timer0.c: 19:     INTCONbits.GIE = 1;
  2721  0C37  178B               	bsf	11,7	;volatile
  2722                           
  2723                           ;Timer0.c: 20:     INTCONbits.TMR0IE = 1;
  2724  0C38  168B               	bsf	11,5	;volatile
  2725                           
  2726                           ;Timer0.c: 21:     OPTION_REGbits.TMR0CS = 0;
  2727  0C39  0021               	movlb	1	; select bank1
  2728  0C3A  1295               	bcf	21,5	;volatile
  2729                           
  2730                           ;Timer0.c: 22:     OPTION_REGbits.PSA = 0;
  2731  0C3B  1195               	bcf	21,3	;volatile
  2732  0C3C                     l2658:
  2733                           
  2734                           ;Timer0.c: 23:     OPTION_REG = 0b100;
  2735  0C3C  3004               	movlw	4
  2736  0C3D  0095               	movwf	21	;volatile
  2737  0C3E                     l213:
  2738  0C3E  0008               	return
  2739  0C3F                     __end_of_setupTimer0Interrupt:
  2740                           
  2741                           	psect	text5
  2742  0CC0                     __ptext5:	
  2743 ;; *************** function _setupPWM *****************
  2744 ;; Defined at:
  2745 ;;		line 16 in file "PWM.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0, pclath, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2759 ;;      Params:         0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used: 1
  2765 ;; Hardware stack levels required when called: 6
  2766 ;; This function calls:
  2767 ;;		_initialiseGPIO
  2768 ;; This function is called by:
  2769 ;;		_main
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773  0CC0                     _setupPWM:	
  2774                           ;psect for function _setupPWM
  2775                           
  2776  0CC0                     l2632:	
  2777                           ;incstack = 0
  2778                           ; Regs used in _setupPWM: [wreg+status,2+status,0+pclath+cstack]
  2779                           
  2780                           
  2781                           ;PWM.c: 18:     CCP1CON = 0b00001100;
  2782  0CC0  300C               	movlw	12
  2783  0CC1  0025               	movlb	5	; select bank5
  2784  0CC2  0093               	movwf	19	;volatile
  2785  0CC3                     l2634:
  2786                           
  2787                           ;PWM.c: 20:     PR2 = 0;
  2788  0CC3  0020               	movlb	0	; select bank0
  2789  0CC4  019B               	clrf	27	;volatile
  2790  0CC5                     l2636:
  2791                           
  2792                           ;PWM.c: 21:     CCPR1L = 0;
  2793  0CC5  0025               	movlb	5	; select bank5
  2794  0CC6  0191               	clrf	17	;volatile
  2795  0CC7                     l2638:
  2796                           
  2797                           ;PWM.c: 23:     APFCON0bits.P1DSEL = 1;
  2798  0CC7  0022               	movlb	2	; select bank2
  2799  0CC8  151D               	bsf	29,2	;volatile
  2800  0CC9                     l2640:
  2801                           
  2802                           ;PWM.c: 24:     PSTR1CONbits.STR1D = 1;
  2803  0CC9  0025               	movlb	5	; select bank5
  2804  0CCA  1596               	bsf	22,3	;volatile
  2805  0CCB                     l2642:
  2806                           
  2807                           ;PWM.c: 25:     PSTR1CONbits.STR1A = 0;
  2808  0CCB  1016               	bcf	22,0	;volatile
  2809  0CCC                     l2644:
  2810                           
  2811                           ;PWM.c: 27:     T2CONbits.T2CKPS = 0b00;
  2812  0CCC  30FC               	movlw	-4
  2813  0CCD  0020               	movlb	0	; select bank0
  2814  0CCE  059C               	andwf	28,f	;volatile
  2815  0CCF                     l2646:
  2816                           
  2817                           ;PWM.c: 28:     PIE1bits.TMR2IE = 0;
  2818  0CCF  0021               	movlb	1	; select bank1
  2819  0CD0  1091               	bcf	17,1	;volatile
  2820  0CD1                     l2648:
  2821                           
  2822                           ;PWM.c: 29:     T2CONbits.TMR2ON = 1;
  2823  0CD1  0020               	movlb	0	; select bank0
  2824  0CD2  151C               	bsf	28,2	;volatile
  2825  0CD3                     l2650:
  2826                           
  2827                           ;PWM.c: 31:     INTCONbits.PEIE = 1;
  2828  0CD3  170B               	bsf	11,6	;volatile
  2829  0CD4                     l2652:
  2830                           
  2831                           ;PWM.c: 32:     PIE1bits.CCP1IE = 1;
  2832  0CD4  0021               	movlb	1	; select bank1
  2833  0CD5  1511               	bsf	17,2	;volatile
  2834  0CD6                     l2654:
  2835                           
  2836                           ;PWM.c: 36:     initialiseGPIO(pinRA6, 0);
  2837  0CD6  01E2               	clrf	initialiseGPIO@direction^(0+128)
  2838  0CD7  3006               	movlw	6
  2839  0CD8  3185  254C  318C   	fcall	_initialiseGPIO
  2840  0CDB                     l184:
  2841  0CDB  0008               	return
  2842  0CDC                     __end_of_setupPWM:
  2843                           
  2844                           	psect	text6
  2845  0487                     __ptext6:	
  2846 ;; *************** function _setupInternalOscillator *****************
  2847 ;; Defined at:
  2848 ;;		line 147 in file "main.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  selectedFreq    1    wreg     const enum E2845
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  selectedFreq    1    2[BANK1 ] const enum E2845
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2862 ;;      Params:         0       0       0       0       0       0
  2863 ;;      Locals:         0       0       1       0       0       0
  2864 ;;      Temps:          0       0       2       0       0       0
  2865 ;;      Totals:         0       0       3       0       0       0
  2866 ;;Total ram usage:        3 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 5
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876  0487                     _setupInternalOscillator:	
  2877                           ;psect for function _setupInternalOscillator
  2878                           
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _setupInternalOscillator: [wreg-fsr0h+status,2+status,0]
  2882                           ;setupInternalOscillator@selectedFreq stored from wreg
  2883  0487  0021               	movlb	1	; select bank1
  2884  0488  00E4               	movwf	setupInternalOscillator@selectedFreq^(0+128)
  2885  0489                     l2554:
  2886                           
  2887                           ;main.c: 151:     switch(selectedFreq){
  2888  0489  2D20               	goto	l2624
  2889  048A                     l2556:
  2890  048A  3087               	movlw	-121
  2891  048B  0599               	andwf	25,f	;volatile
  2892  048C                     l2558:
  2893  048C  1399               	bcf	25,7	;volatile
  2894  048D                     l2560:
  2895  048D  3000               	movlw	0
  2896  048E  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2897  048F  3000               	movlw	0
  2898  0490  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2899  0491  3079               	movlw	121
  2900  0492  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2901  0493  3018               	movlw	24
  2902  0494  00BC               	movwf	_clockFrequency^(0+128)
  2903  0495  2D4B               	goto	l147
  2904  0496                     l2562:
  2905  0496  0819               	movf	25,w	;volatile
  2906  0497  3987               	andlw	-121
  2907  0498  3820               	iorlw	32
  2908  0499  0099               	movwf	25	;volatile
  2909  049A                     l2564:
  2910  049A  1399               	bcf	25,7	;volatile
  2911  049B                     l2566:
  2912  049B  3000               	movlw	0
  2913  049C  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2914  049D  3000               	movlw	0
  2915  049E  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2916  049F  30F4               	movlw	244
  2917  04A0  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2918  04A1  3024               	movlw	36
  2919  04A2  00BC               	movwf	_clockFrequency^(0+128)
  2920  04A3  2D4B               	goto	l147
  2921  04A4                     l2568:
  2922  04A4  0819               	movf	25,w	;volatile
  2923  04A5  3987               	andlw	-121
  2924  04A6  3828               	iorlw	40
  2925  04A7  0099               	movwf	25	;volatile
  2926  04A8                     l2570:
  2927  04A8  1399               	bcf	25,7	;volatile
  2928  04A9                     l2572:
  2929  04A9  3000               	movlw	0
  2930  04AA  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2931  04AB  3001               	movlw	1
  2932  04AC  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2933  04AD  30E8               	movlw	232
  2934  04AE  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2935  04AF  3048               	movlw	72
  2936  04B0  00BC               	movwf	_clockFrequency^(0+128)
  2937  04B1  2D4B               	goto	l147
  2938  04B2                     l2574:
  2939  04B2  0819               	movf	25,w	;volatile
  2940  04B3  3987               	andlw	-121
  2941  04B4  3830               	iorlw	48
  2942  04B5  0099               	movwf	25	;volatile
  2943  04B6                     l2576:
  2944  04B6  1399               	bcf	25,7	;volatile
  2945  04B7                     l2578:
  2946  04B7  3000               	movlw	0
  2947  04B8  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2948  04B9  3003               	movlw	3
  2949  04BA  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2950  04BB  30D0               	movlw	208
  2951  04BC  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2952  04BD  3090               	movlw	144
  2953  04BE  00BC               	movwf	_clockFrequency^(0+128)
  2954  04BF  2D4B               	goto	l147
  2955  04C0                     l2580:
  2956  04C0  0819               	movf	25,w	;volatile
  2957  04C1  3987               	andlw	-121
  2958  04C2  3838               	iorlw	56
  2959  04C3  0099               	movwf	25	;volatile
  2960  04C4                     l2582:
  2961  04C4  1399               	bcf	25,7	;volatile
  2962  04C5                     l2584:
  2963  04C5  3000               	movlw	0
  2964  04C6  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2965  04C7  3007               	movlw	7
  2966  04C8  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2967  04C9  30A1               	movlw	161
  2968  04CA  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2969  04CB  3020               	movlw	32
  2970  04CC  00BC               	movwf	_clockFrequency^(0+128)
  2971  04CD  2D4B               	goto	l147
  2972  04CE                     l2586:
  2973  04CE  0819               	movf	25,w	;volatile
  2974  04CF  3987               	andlw	-121
  2975  04D0  3858               	iorlw	88
  2976  04D1  0099               	movwf	25	;volatile
  2977  04D2                     l2588:
  2978  04D2  1399               	bcf	25,7	;volatile
  2979  04D3                     l2590:
  2980  04D3  3000               	movlw	0
  2981  04D4  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2982  04D5  300F               	movlw	15
  2983  04D6  00BE               	movwf	(_clockFrequency+2)^(0+128)
  2984  04D7  3042               	movlw	66
  2985  04D8  00BD               	movwf	(_clockFrequency+1)^(0+128)
  2986  04D9  3040               	movlw	64
  2987  04DA  00BC               	movwf	_clockFrequency^(0+128)
  2988  04DB  2D4B               	goto	l147
  2989  04DC                     l2592:
  2990  04DC  0819               	movf	25,w	;volatile
  2991  04DD  3987               	andlw	-121
  2992  04DE  3860               	iorlw	96
  2993  04DF  0099               	movwf	25	;volatile
  2994  04E0                     l2594:
  2995  04E0  1399               	bcf	25,7	;volatile
  2996  04E1                     l2596:
  2997  04E1  3000               	movlw	0
  2998  04E2  00BF               	movwf	(_clockFrequency+3)^(0+128)
  2999  04E3  301E               	movlw	30
  3000  04E4  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3001  04E5  3084               	movlw	132
  3002  04E6  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3003  04E7  3080               	movlw	128
  3004  04E8  00BC               	movwf	_clockFrequency^(0+128)
  3005  04E9  2D4B               	goto	l147
  3006  04EA                     l2598:
  3007  04EA  0819               	movf	25,w	;volatile
  3008  04EB  3987               	andlw	-121
  3009  04EC  3868               	iorlw	104
  3010  04ED  0099               	movwf	25	;volatile
  3011  04EE                     l2600:
  3012  04EE  1399               	bcf	25,7	;volatile
  3013  04EF                     l2602:
  3014  04EF  3000               	movlw	0
  3015  04F0  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3016  04F1  303D               	movlw	61
  3017  04F2  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3018  04F3  3009               	movlw	9
  3019  04F4  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3020  04F5  3000               	movlw	0
  3021  04F6  00BC               	movwf	_clockFrequency^(0+128)
  3022  04F7  2D4B               	goto	l147
  3023  04F8                     l2604:
  3024  04F8  0819               	movf	25,w	;volatile
  3025  04F9  3987               	andlw	-121
  3026  04FA  3870               	iorlw	112
  3027  04FB  0099               	movwf	25	;volatile
  3028  04FC                     l2606:
  3029  04FC  1399               	bcf	25,7	;volatile
  3030  04FD                     l2608:
  3031  04FD  3000               	movlw	0
  3032  04FE  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3033  04FF  307A               	movlw	122
  3034  0500  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3035  0501  3012               	movlw	18
  3036  0502  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3037  0503  3000               	movlw	0
  3038  0504  00BC               	movwf	_clockFrequency^(0+128)
  3039  0505  2D4B               	goto	l147
  3040  0506                     l2610:
  3041  0506  3078               	movlw	120
  3042  0507  0499               	iorwf	25,f	;volatile
  3043  0508                     l2612:
  3044  0508  1399               	bcf	25,7	;volatile
  3045  0509                     l2614:
  3046  0509  3000               	movlw	0
  3047  050A  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3048  050B  30F4               	movlw	244
  3049  050C  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3050  050D  3024               	movlw	36
  3051  050E  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3052  050F  3000               	movlw	0
  3053  0510  00BC               	movwf	_clockFrequency^(0+128)
  3054  0511  2D4B               	goto	l147
  3055  0512                     l2616:
  3056  0512  0819               	movf	25,w	;volatile
  3057  0513  3987               	andlw	-121
  3058  0514  3870               	iorlw	112
  3059  0515  0099               	movwf	25	;volatile
  3060  0516                     l2618:
  3061  0516  1799               	bsf	25,7	;volatile
  3062  0517                     l2620:
  3063  0517  3001               	movlw	1
  3064  0518  00BF               	movwf	(_clockFrequency+3)^(0+128)
  3065  0519  30E8               	movlw	232
  3066  051A  00BE               	movwf	(_clockFrequency+2)^(0+128)
  3067  051B  3048               	movlw	72
  3068  051C  00BD               	movwf	(_clockFrequency+1)^(0+128)
  3069  051D  3000               	movlw	0
  3070  051E  00BC               	movwf	_clockFrequency^(0+128)
  3071  051F  2D4B               	goto	l147
  3072  0520                     l2624:
  3073  0520  0864               	movf	setupInternalOscillator@selectedFreq^(0+128),w
  3074  0521  00E2               	movwf	??_setupInternalOscillator^(0+128)
  3075  0522  01E3               	clrf	(??_setupInternalOscillator^(0+128)+1)
  3076                           
  3077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3078                           ; Switch size 1, requested type "simple"
  3079                           ; Number of cases is 1, Range of values is 0 to 0
  3080                           ; switch strategies available:
  3081                           ; Name         Instructions Cycles
  3082                           ; simple_byte            4     3 (average)
  3083                           ; direct_byte            8     6 (fixed)
  3084                           ; jumptable            260     6 (fixed)
  3085                           ;	Chosen strategy is simple_byte
  3086  0523  0863               	movf	(??_setupInternalOscillator+1)^(0+128),w
  3087  0524  3A00               	xorlw	0	; case 0
  3088  0525  1903               	skipnz
  3089  0526  2D28               	goto	l2844
  3090  0527  2D4B               	goto	l147
  3091  0528                     l2844:
  3092                           
  3093                           ; Switch size 1, requested type "simple"
  3094                           ; Number of cases is 11, Range of values is 0 to 10
  3095                           ; switch strategies available:
  3096                           ; Name         Instructions Cycles
  3097                           ; direct_byte           28     6 (fixed)
  3098                           ; simple_byte           34    18 (average)
  3099                           ; jumptable            260     6 (fixed)
  3100                           ;	Chosen strategy is simple_byte
  3101  0528  0862               	movf	??_setupInternalOscillator^(0+128),w
  3102  0529  3A00               	xorlw	0	; case 0
  3103  052A  1903               	skipnz
  3104  052B  2C8A               	goto	l2556
  3105  052C  3A01               	xorlw	1	; case 1
  3106  052D  1903               	skipnz
  3107  052E  2C96               	goto	l2562
  3108  052F  3A03               	xorlw	3	; case 2
  3109  0530  1903               	skipnz
  3110  0531  2CA4               	goto	l2568
  3111  0532  3A01               	xorlw	1	; case 3
  3112  0533  1903               	skipnz
  3113  0534  2CB2               	goto	l2574
  3114  0535  3A07               	xorlw	7	; case 4
  3115  0536  1903               	skipnz
  3116  0537  2CC0               	goto	l2580
  3117  0538  3A01               	xorlw	1	; case 5
  3118  0539  1903               	skipnz
  3119  053A  2CCE               	goto	l2586
  3120  053B  3A03               	xorlw	3	; case 6
  3121  053C  1903               	skipnz
  3122  053D  2CDC               	goto	l2592
  3123  053E  3A01               	xorlw	1	; case 7
  3124  053F  1903               	skipnz
  3125  0540  2CEA               	goto	l2598
  3126  0541  3A0F               	xorlw	15	; case 8
  3127  0542  1903               	skipnz
  3128  0543  2CF8               	goto	l2604
  3129  0544  3A01               	xorlw	1	; case 9
  3130  0545  1903               	skipnz
  3131  0546  2D06               	goto	l2610
  3132  0547  3A03               	xorlw	3	; case 10
  3133  0548  1903               	skipnz
  3134  0549  2D12               	goto	l2616
  3135  054A  2D4B               	goto	l147
  3136  054B                     l147:
  3137  054B  0008               	return
  3138  054C                     __end_of_setupInternalOscillator:
  3139                           
  3140                           	psect	text7
  3141  0E59                     __ptext7:	
  3142 ;; *************** function _readGPIO *****************
  3143 ;; Defined at:
  3144 ;;		line 79 in file "GPIO.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  gpioNumber      1    wreg     const enum E2798
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  gpioNumber      1    8[BANK1 ] const enum E2798
  3149 ;;  returnValueB    1    5[BANK1 ] unsigned char 
  3150 ;;  readB           1    4[BANK1 ] unsigned char 
  3151 ;;  returnValueA    1    3[BANK1 ] unsigned char 
  3152 ;;  readA           1    2[BANK1 ] unsigned char 
  3153 ;;  portType        1    7[BANK1 ] unsigned char 
  3154 ;;  portNumber      1    6[BANK1 ] unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      _Bool 
  3157 ;; Registers used:
  3158 ;;		wreg, status,2, status,0
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3164 ;;      Params:         0       0       0       0       0       0
  3165 ;;      Locals:         0       0       7       0       0       0
  3166 ;;      Temps:          0       0       2       0       0       0
  3167 ;;      Totals:         0       0       9       0       0       0
  3168 ;;Total ram usage:        9 bytes
  3169 ;; Hardware stack levels used: 1
  3170 ;; Hardware stack levels required when called: 5
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178  0E59                     _readGPIO:	
  3179                           ;psect for function _readGPIO
  3180                           
  3181                           
  3182                           ;incstack = 0
  3183                           ; Regs used in _readGPIO: [wreg+status,2+status,0]
  3184                           ;readGPIO@gpioNumber stored from wreg
  3185  0E59  0021               	movlb	1	; select bank1
  3186  0E5A  00EA               	movwf	readGPIO@gpioNumber^(0+128)
  3187  0E5B                     l2668:
  3188                           
  3189                           ;GPIO.c: 81:     uint8_t portType = 0;
  3190  0E5B  01E9               	clrf	readGPIO@portType^(0+128)
  3191  0E5C                     l2670:
  3192                           
  3193                           ;GPIO.c: 82:     if(gpioNumber > 7){
  3194  0E5C  3008               	movlw	8
  3195  0E5D  026A               	subwf	readGPIO@gpioNumber^(0+128),w
  3196  0E5E  1C03               	skipc
  3197  0E5F  2E61               	goto	u2381
  3198  0E60  2E62               	goto	u2380
  3199  0E61                     u2381:
  3200  0E61  2E6A               	goto	l2676
  3201  0E62                     u2380:
  3202  0E62                     l2672:
  3203                           
  3204                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  3205  0E62  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3206  0E63  3EF8               	addlw	248
  3207  0E64  00E2               	movwf	??_readGPIO^(0+128)
  3208  0E65  0862               	movf	??_readGPIO^(0+128),w
  3209  0E66  00E8               	movwf	readGPIO@portNumber^(0+128)
  3210  0E67                     l2674:
  3211                           
  3212                           ;GPIO.c: 84:         portType = 1;
  3213  0E67  01E9               	clrf	readGPIO@portType^(0+128)
  3214  0E68  0AE9               	incf	readGPIO@portType^(0+128),f
  3215                           
  3216                           ;GPIO.c: 85:     }
  3217  0E69  2E6F               	goto	l2680
  3218  0E6A                     l2676:
  3219                           
  3220                           ;GPIO.c: 87:         portNumber = gpioNumber;
  3221  0E6A  086A               	movf	readGPIO@gpioNumber^(0+128),w
  3222  0E6B  00E2               	movwf	??_readGPIO^(0+128)
  3223  0E6C  0862               	movf	??_readGPIO^(0+128),w
  3224  0E6D  00E8               	movwf	readGPIO@portNumber^(0+128)
  3225  0E6E                     l2678:
  3226                           
  3227                           ;GPIO.c: 88:         portType = 0;
  3228  0E6E  01E9               	clrf	readGPIO@portType^(0+128)
  3229  0E6F                     l2680:
  3230                           
  3231                           ;GPIO.c: 91:     if(portType == 0){
  3232  0E6F  0869               	movf	readGPIO@portType^(0+128),w
  3233  0E70  1D03               	btfss	3,2
  3234  0E71  2E73               	goto	u2391
  3235  0E72  2E74               	goto	u2390
  3236  0E73                     u2391:
  3237  0E73  2E88               	goto	l2692
  3238  0E74                     u2390:
  3239  0E74                     l2682:
  3240                           
  3241                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  3242  0E74  0020               	movlb	0	; select bank0
  3243  0E75  080C               	movf	12,w	;volatile
  3244  0E76  0021               	movlb	1	; select bank1
  3245  0E77  00E2               	movwf	??_readGPIO^(0+128)
  3246  0E78  0862               	movf	??_readGPIO^(0+128),w
  3247  0E79  00E4               	movwf	readGPIO@readA^(0+128)
  3248  0E7A                     l2684:
  3249                           
  3250                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  3251  0E7A  0864               	movf	readGPIO@readA^(0+128),w
  3252  0E7B  00E2               	movwf	??_readGPIO^(0+128)
  3253  0E7C  0A68               	incf	readGPIO@portNumber^(0+128),w
  3254  0E7D  2E7F               	goto	u2404
  3255  0E7E                     u2405:
  3256  0E7E  36E2               	lsrf	??_readGPIO^(0+128),f
  3257  0E7F                     u2404:
  3258  0E7F  0B89               	decfsz	9,f
  3259  0E80  2E7E               	goto	u2405
  3260  0E81  0862               	movf	??_readGPIO^(0+128),w
  3261  0E82  3901               	andlw	1
  3262  0E83  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3263  0E84  0863               	movf	(??_readGPIO+1)^(0+128),w
  3264  0E85  00E5               	movwf	readGPIO@returnValueA^(0+128)
  3265  0E86                     l2686:
  3266                           
  3267                           ;GPIO.c: 94:         return returnValueA;
  3268  0E86  0865               	movf	readGPIO@returnValueA^(0+128),w
  3269  0E87  2EA2               	goto	l344
  3270  0E88                     l2692:
  3271  0E88  0369               	decf	readGPIO@portType^(0+128),w
  3272  0E89  1D03               	btfss	3,2
  3273  0E8A  2E8C               	goto	u2411
  3274  0E8B  2E8D               	goto	u2410
  3275  0E8C                     u2411:
  3276  0E8C  2EA1               	goto	l2704
  3277  0E8D                     u2410:
  3278  0E8D                     l2694:
  3279                           
  3280                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  3281  0E8D  0020               	movlb	0	; select bank0
  3282  0E8E  080D               	movf	13,w	;volatile
  3283  0E8F  0021               	movlb	1	; select bank1
  3284  0E90  00E2               	movwf	??_readGPIO^(0+128)
  3285  0E91  0862               	movf	??_readGPIO^(0+128),w
  3286  0E92  00E6               	movwf	readGPIO@readB^(0+128)
  3287  0E93                     l2696:
  3288                           
  3289                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  3290  0E93  0866               	movf	readGPIO@readB^(0+128),w
  3291  0E94  00E2               	movwf	??_readGPIO^(0+128)
  3292  0E95  0A68               	incf	readGPIO@portNumber^(0+128),w
  3293  0E96  2E98               	goto	u2424
  3294  0E97                     u2425:
  3295  0E97  36E2               	lsrf	??_readGPIO^(0+128),f
  3296  0E98                     u2424:
  3297  0E98  0B89               	decfsz	9,f
  3298  0E99  2E97               	goto	u2425
  3299  0E9A  0862               	movf	??_readGPIO^(0+128),w
  3300  0E9B  3901               	andlw	1
  3301  0E9C  00E3               	movwf	(??_readGPIO+1)^(0+128)
  3302  0E9D  0863               	movf	(??_readGPIO+1)^(0+128),w
  3303  0E9E  00E7               	movwf	readGPIO@returnValueB^(0+128)
  3304  0E9F                     l2698:
  3305                           
  3306                           ;GPIO.c: 99:         return returnValueB;
  3307  0E9F  0867               	movf	readGPIO@returnValueB^(0+128),w
  3308  0EA0  2EA2               	goto	l344
  3309  0EA1                     l2704:
  3310  0EA1  3000               	movlw	0
  3311  0EA2                     l344:
  3312  0EA2  0008               	return
  3313  0EA3                     __end_of_readGPIO:
  3314                           
  3315                           	psect	text8
  3316  0C51                     __ptext8:	
  3317 ;; *************** function _initialisePotentiometers *****************
  3318 ;; Defined at:
  3319 ;;		line 15 in file "Potentiometer.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3333 ;;      Params:         0       0       0       0       0       0
  3334 ;;      Locals:         0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0
  3336 ;;      Totals:         0       0       0       0       0       0
  3337 ;;Total ram usage:        0 bytes
  3338 ;; Hardware stack levels used: 1
  3339 ;; Hardware stack levels required when called: 6
  3340 ;; This function calls:
  3341 ;;		_initialiseADCPin
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347  0C51                     _initialisePotentiometers:	
  3348                           ;psect for function _initialisePotentiometers
  3349                           
  3350  0C51                     l2664:	
  3351                           ;incstack = 0
  3352                           ; Regs used in _initialisePotentiometers: [wreg+status,2+status,0+pclath+cstack]
  3353                           
  3354                           
  3355                           ;Potentiometer.c: 16:     initialiseADCPin(pinRB1);
  3356  0C51  3009               	movlw	9
  3357  0C52  3185  25C2  318C   	fcall	_initialiseADCPin
  3358                           
  3359                           ;Potentiometer.c: 17:     initialiseADCPin(pinRB2);
  3360  0C55  300A               	movlw	10
  3361  0C56  3185  25C2  318C   	fcall	_initialiseADCPin
  3362  0C59                     l378:
  3363  0C59  0008               	return
  3364  0C5A                     __end_of_initialisePotentiometers:
  3365                           
  3366                           	psect	text9
  3367  0CFB                     __ptext9:	
  3368 ;; *************** function _initialiseCurrentSensors *****************
  3369 ;; Defined at:
  3370 ;;		line 17 in file "CurrentSensor.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0, pclath, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3384 ;;      Params:         0       0       0       0       0       0
  3385 ;;      Locals:         0       0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0
  3387 ;;      Totals:         0       0       0       0       0       0
  3388 ;;Total ram usage:        0 bytes
  3389 ;; Hardware stack levels used: 1
  3390 ;; Hardware stack levels required when called: 7
  3391 ;; This function calls:
  3392 ;;		_currentTripReset
  3393 ;;		_initialiseADCPin
  3394 ;;		_initialiseGPIO
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400  0CFB                     _initialiseCurrentSensors:	
  3401                           ;psect for function _initialiseCurrentSensors
  3402                           
  3403  0CFB                     l2662:	
  3404                           ;incstack = 0
  3405                           ; Regs used in _initialiseCurrentSensors: [wreg+status,2+status,0+pclath+cstack]
  3406                           
  3407                           
  3408                           ;CurrentSensor.c: 18:     initialiseGPIO(pinRA3, 1);
  3409  0CFB  0021               	movlb	1	; select bank1
  3410  0CFC  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3411  0CFD  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3412  0CFE  3003               	movlw	3
  3413  0CFF  3185  254C  318C   	fcall	_initialiseGPIO
  3414                           
  3415                           ;CurrentSensor.c: 19:     initialiseGPIO(pinRA1, 1);
  3416  0D02  0021               	movlb	1	; select bank1
  3417  0D03  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3418  0D04  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3419  0D05  3001               	movlw	1
  3420  0D06  3185  254C  318C   	fcall	_initialiseGPIO
  3421                           
  3422                           ;CurrentSensor.c: 20:     initialiseADCPin(pinRA0);
  3423  0D09  3000               	movlw	0
  3424  0D0A  3185  25C2  318C   	fcall	_initialiseADCPin
  3425                           
  3426                           ;CurrentSensor.c: 21:     initialiseADCPin(pinRA2);
  3427  0D0D  3002               	movlw	2
  3428  0D0E  3185  25C2  318C   	fcall	_initialiseADCPin
  3429                           
  3430                           ;CurrentSensor.c: 22:     initialiseGPIO(pinRB3, 0);
  3431  0D11  0021               	movlb	1	; select bank1
  3432  0D12  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3433  0D13  300B               	movlw	11
  3434  0D14  3185  254C  318C   	fcall	_initialiseGPIO
  3435                           
  3436                           ;CurrentSensor.c: 23:     currentTripReset();
  3437  0D17  318C  247E  318C   	fcall	_currentTripReset
  3438  0D1A                     l528:
  3439  0D1A  0008               	return
  3440  0D1B                     __end_of_initialiseCurrentSensors:
  3441                           
  3442                           	psect	text10
  3443  0C7E                     __ptext10:	
  3444 ;; *************** function _currentTripReset *****************
  3445 ;; Defined at:
  3446 ;;		line 70 in file "CurrentSensor.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3460 ;;      Params:         0       0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used: 1
  3466 ;; Hardware stack levels required when called: 6
  3467 ;; This function calls:
  3468 ;;		_writeGPIO
  3469 ;; This function is called by:
  3470 ;;		_initialiseCurrentSensors
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474  0C7E                     _currentTripReset:	
  3475                           ;psect for function _currentTripReset
  3476                           
  3477  0C7E                     l2148:	
  3478                           ;incstack = 0
  3479                           ; Regs used in _currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  3480                           
  3481                           
  3482                           ;CurrentSensor.c: 71:     writeGPIO(pinRB3, 0);
  3483  0C7E  0021               	movlb	1	; select bank1
  3484  0C7F  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3485  0C80  300B               	movlw	11
  3486  0C81  3186  268D  318C   	fcall	_writeGPIO
  3487  0C84                     l2150:
  3488                           
  3489                           ;CurrentSensor.c: 72:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  3490                           ;CurrentSensor.c: 73:     writeGPIO(pinRB3, 1);
  3491  0C84  0021               	movlb	1	; select bank1
  3492  0C85  01E2               	clrf	writeGPIO@writeValue^(0+128)
  3493  0C86  0AE2               	incf	writeGPIO@writeValue^(0+128),f
  3494  0C87  300B               	movlw	11
  3495  0C88  3186  268D  318C   	fcall	_writeGPIO
  3496  0C8B                     l550:
  3497  0C8B  0008               	return
  3498  0C8C                     __end_of_currentTripReset:
  3499                           
  3500                           	psect	text11
  3501  068D                     __ptext11:	
  3502 ;; *************** function _writeGPIO *****************
  3503 ;; Defined at:
  3504 ;;		line 52 in file "GPIO.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  gpioNumber      1    wreg     const enum E2798
  3507 ;;  writeValue      1    0[BANK1 ] unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3510 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3511 ;;  portType        1    3[BANK1 ] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3521 ;;      Params:         0       0       1       0       0       0
  3522 ;;      Locals:         0       0       3       0       0       0
  3523 ;;      Temps:          0       0       2       0       0       0
  3524 ;;      Totals:         0       0       6       0       0       0
  3525 ;;Total ram usage:        6 bytes
  3526 ;; Hardware stack levels used: 1
  3527 ;; Hardware stack levels required when called: 5
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_currentTripReset
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535  068D                     _writeGPIO:	
  3536                           ;psect for function _writeGPIO
  3537                           
  3538                           
  3539                           ;incstack = 0
  3540                           ; Regs used in _writeGPIO: [wreg+status,2+status,0]
  3541                           ;writeGPIO@gpioNumber stored from wreg
  3542  068D  0021               	movlb	1	; select bank1
  3543  068E  00E6               	movwf	writeGPIO@gpioNumber^(0+128)
  3544  068F                     l2048:
  3545                           
  3546                           ;GPIO.c: 54:     uint8_t portType = 0;
  3547  068F  01E5               	clrf	writeGPIO@portType^(0+128)
  3548  0690                     l2050:
  3549                           
  3550                           ;GPIO.c: 55:     if(gpioNumber > 7){
  3551  0690  3008               	movlw	8
  3552  0691  0266               	subwf	writeGPIO@gpioNumber^(0+128),w
  3553  0692  1C03               	skipc
  3554  0693  2E95               	goto	u1371
  3555  0694  2E96               	goto	u1370
  3556  0695                     u1371:
  3557  0695  2E9E               	goto	l2056
  3558  0696                     u1370:
  3559  0696                     l2052:
  3560                           
  3561                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  3562  0696  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3563  0697  3EF8               	addlw	248
  3564  0698  00E3               	movwf	??_writeGPIO^(0+128)
  3565  0699  0863               	movf	??_writeGPIO^(0+128),w
  3566  069A  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3567  069B                     l2054:
  3568                           
  3569                           ;GPIO.c: 57:         portType = 1;
  3570  069B  01E5               	clrf	writeGPIO@portType^(0+128)
  3571  069C  0AE5               	incf	writeGPIO@portType^(0+128),f
  3572                           
  3573                           ;GPIO.c: 58:     }
  3574  069D  2EA3               	goto	l2060
  3575  069E                     l2056:
  3576                           
  3577                           ;GPIO.c: 60:         portNumber = gpioNumber;
  3578  069E  0866               	movf	writeGPIO@gpioNumber^(0+128),w
  3579  069F  00E3               	movwf	??_writeGPIO^(0+128)
  3580  06A0  0863               	movf	??_writeGPIO^(0+128),w
  3581  06A1  00E7               	movwf	writeGPIO@portNumber^(0+128)
  3582  06A2                     l2058:
  3583                           
  3584                           ;GPIO.c: 61:         portType = 0;
  3585  06A2  01E5               	clrf	writeGPIO@portType^(0+128)
  3586  06A3                     l2060:
  3587                           
  3588                           ;GPIO.c: 64:     if(portType == 0){
  3589  06A3  0865               	movf	writeGPIO@portType^(0+128),w
  3590  06A4  1D03               	btfss	3,2
  3591  06A5  2EA7               	goto	u1381
  3592  06A6  2EA8               	goto	u1380
  3593  06A7                     u1381:
  3594  06A7  2EC8               	goto	l2068
  3595  06A8                     u1380:
  3596  06A8                     l2062:
  3597                           
  3598                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  3599  06A8  0862               	movf	writeGPIO@writeValue^(0+128),w
  3600  06A9  1903               	btfsc	3,2
  3601  06AA  2EAC               	goto	u1391
  3602  06AB  2EAD               	goto	u1390
  3603  06AC                     u1391:
  3604  06AC  2EBA               	goto	l2066
  3605  06AD                     u1390:
  3606  06AD                     l2064:
  3607  06AD  3001               	movlw	1
  3608  06AE  00E3               	movwf	??_writeGPIO^(0+128)
  3609  06AF  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3610  06B0  2EB2               	goto	u1404
  3611  06B1                     u1405:
  3612  06B1  35E3               	lslf	??_writeGPIO^(0+128),f
  3613  06B2                     u1404:
  3614  06B2  0B89               	decfsz	9,f
  3615  06B3  2EB1               	goto	u1405
  3616  06B4  0863               	movf	??_writeGPIO^(0+128),w
  3617  06B5  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3618  06B6  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3619  06B7  0022               	movlb	2	; select bank2
  3620  06B8  048C               	iorwf	12,f	;volatile
  3621  06B9  2EEC               	goto	l338
  3622  06BA                     l2066:
  3623  06BA  3001               	movlw	1
  3624  06BB  00E3               	movwf	??_writeGPIO^(0+128)
  3625  06BC  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3626  06BD  2EBF               	goto	u1414
  3627  06BE                     u1415:
  3628  06BE  35E3               	lslf	??_writeGPIO^(0+128),f
  3629  06BF                     u1414:
  3630  06BF  0B89               	decfsz	9,f
  3631  06C0  2EBE               	goto	u1415
  3632  06C1  0863               	movf	??_writeGPIO^(0+128),w
  3633  06C2  3AFF               	xorlw	255
  3634  06C3  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3635  06C4  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3636  06C5  0022               	movlb	2	; select bank2
  3637  06C6  058C               	andwf	12,f	;volatile
  3638  06C7  2EEC               	goto	l338
  3639  06C8                     l2068:
  3640  06C8  0365               	decf	writeGPIO@portType^(0+128),w
  3641  06C9  1D03               	btfss	3,2
  3642  06CA  2ECC               	goto	u1421
  3643  06CB  2ECD               	goto	u1420
  3644  06CC                     u1421:
  3645  06CC  2EEC               	goto	l338
  3646  06CD                     u1420:
  3647  06CD                     l2070:
  3648                           
  3649                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  3650  06CD  0862               	movf	writeGPIO@writeValue^(0+128),w
  3651  06CE  1903               	btfsc	3,2
  3652  06CF  2ED1               	goto	u1431
  3653  06D0  2ED2               	goto	u1430
  3654  06D1                     u1431:
  3655  06D1  2EDF               	goto	l2074
  3656  06D2                     u1430:
  3657  06D2                     l2072:
  3658  06D2  3001               	movlw	1
  3659  06D3  00E3               	movwf	??_writeGPIO^(0+128)
  3660  06D4  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3661  06D5  2ED7               	goto	u1444
  3662  06D6                     u1445:
  3663  06D6  35E3               	lslf	??_writeGPIO^(0+128),f
  3664  06D7                     u1444:
  3665  06D7  0B89               	decfsz	9,f
  3666  06D8  2ED6               	goto	u1445
  3667  06D9  0863               	movf	??_writeGPIO^(0+128),w
  3668  06DA  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3669  06DB  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3670  06DC  0022               	movlb	2	; select bank2
  3671  06DD  048D               	iorwf	13,f	;volatile
  3672  06DE  2EEC               	goto	l338
  3673  06DF                     l2074:
  3674  06DF  3001               	movlw	1
  3675  06E0  00E3               	movwf	??_writeGPIO^(0+128)
  3676  06E1  0A67               	incf	writeGPIO@portNumber^(0+128),w
  3677  06E2  2EE4               	goto	u1454
  3678  06E3                     u1455:
  3679  06E3  35E3               	lslf	??_writeGPIO^(0+128),f
  3680  06E4                     u1454:
  3681  06E4  0B89               	decfsz	9,f
  3682  06E5  2EE3               	goto	u1455
  3683  06E6  0863               	movf	??_writeGPIO^(0+128),w
  3684  06E7  3AFF               	xorlw	255
  3685  06E8  00E4               	movwf	(??_writeGPIO+1)^(0+128)
  3686  06E9  0864               	movf	(??_writeGPIO+1)^(0+128),w
  3687  06EA  0022               	movlb	2	; select bank2
  3688  06EB  058D               	andwf	13,f	;volatile
  3689  06EC                     l338:
  3690  06EC  0008               	return
  3691  06ED                     __end_of_writeGPIO:
  3692                           
  3693                           	psect	text12
  3694  0C72                     __ptext12:	
  3695 ;; *************** function _initialiseController *****************
  3696 ;; Defined at:
  3697 ;;		line 23 in file "Controller.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;		None
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, pclath, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3711 ;;      Params:         0       0       0       0       0       0
  3712 ;;      Locals:         0       0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0       0
  3714 ;;      Totals:         0       0       0       0       0       0
  3715 ;;Total ram usage:        0 bytes
  3716 ;; Hardware stack levels used: 1
  3717 ;; Hardware stack levels required when called: 6
  3718 ;; This function calls:
  3719 ;;		_initialiseADCPin
  3720 ;;		_initialiseGPIO
  3721 ;; This function is called by:
  3722 ;;		_main
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726  0C72                     _initialiseController:	
  3727                           ;psect for function _initialiseController
  3728                           
  3729  0C72                     l2666:	
  3730                           ;incstack = 0
  3731                           ; Regs used in _initialiseController: [wreg+status,2+status,0+pclath+cstack]
  3732                           
  3733                           
  3734                           ;Controller.c: 24:     initialiseGPIO(pinRA4, 1);
  3735  0C72  0021               	movlb	1	; select bank1
  3736  0C73  01E2               	clrf	initialiseGPIO@direction^(0+128)
  3737  0C74  0AE2               	incf	initialiseGPIO@direction^(0+128),f
  3738  0C75  3004               	movlw	4
  3739  0C76  3185  254C  318C   	fcall	_initialiseGPIO
  3740                           
  3741                           ;Controller.c: 25:     initialiseADCPin(pinRA4);
  3742  0C79  3004               	movlw	4
  3743  0C7A  3185  25C2  318C   	fcall	_initialiseADCPin
  3744  0C7D                     l454:
  3745  0C7D  0008               	return
  3746  0C7E                     __end_of_initialiseController:
  3747                           
  3748                           	psect	text13
  3749  054C                     __ptext13:	
  3750 ;; *************** function _initialiseGPIO *****************
  3751 ;; Defined at:
  3752 ;;		line 18 in file "GPIO.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  gpioNumber      1    wreg     const enum E2798
  3755 ;;  direction       1    0[BANK1 ] unsigned char 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  gpioNumber      1    4[BANK1 ] const enum E2798
  3758 ;;  portNumber      1    5[BANK1 ] unsigned char 
  3759 ;;  portType        1    3[BANK1 ] unsigned char 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      void 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2, status,0
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3769 ;;      Params:         0       0       1       0       0       0
  3770 ;;      Locals:         0       0       3       0       0       0
  3771 ;;      Temps:          0       0       2       0       0       0
  3772 ;;      Totals:         0       0       6       0       0       0
  3773 ;;Total ram usage:        6 bytes
  3774 ;; Hardware stack levels used: 1
  3775 ;; Hardware stack levels required when called: 5
  3776 ;; This function calls:
  3777 ;;		Nothing
  3778 ;; This function is called by:
  3779 ;;		_main
  3780 ;;		_setupPWM
  3781 ;;		_initialiseController
  3782 ;;		_initialiseCurrentSensors
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786  054C                     _initialiseGPIO:	
  3787                           ;psect for function _initialiseGPIO
  3788                           
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _initialiseGPIO: [wreg+status,2+status,0]
  3792                           ;initialiseGPIO@gpioNumber stored from wreg
  3793  054C  0021               	movlb	1	; select bank1
  3794  054D  00E6               	movwf	initialiseGPIO@gpioNumber^(0+128)
  3795  054E                     l2152:
  3796                           
  3797                           ;GPIO.c: 20:     uint8_t portType = 0;
  3798  054E  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3799  054F                     l2154:
  3800                           
  3801                           ;GPIO.c: 21:     if(gpioNumber > 7){
  3802  054F  3008               	movlw	8
  3803  0550  0266               	subwf	initialiseGPIO@gpioNumber^(0+128),w
  3804  0551  1C03               	skipc
  3805  0552  2D54               	goto	u1561
  3806  0553  2D55               	goto	u1560
  3807  0554                     u1561:
  3808  0554  2D5D               	goto	l2160
  3809  0555                     u1560:
  3810  0555                     l2156:
  3811                           
  3812                           ;GPIO.c: 22:         portNumber = gpioNumber - 8;
  3813  0555  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3814  0556  3EF8               	addlw	248
  3815  0557  00E3               	movwf	??_initialiseGPIO^(0+128)
  3816  0558  0863               	movf	??_initialiseGPIO^(0+128),w
  3817  0559  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3818  055A                     l2158:
  3819                           
  3820                           ;GPIO.c: 23:         portType = 1;
  3821  055A  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3822  055B  0AE5               	incf	initialiseGPIO@portType^(0+128),f
  3823                           
  3824                           ;GPIO.c: 24:     }
  3825  055C  2D62               	goto	l2164
  3826  055D                     l2160:
  3827                           
  3828                           ;GPIO.c: 26:         portNumber = gpioNumber;
  3829  055D  0866               	movf	initialiseGPIO@gpioNumber^(0+128),w
  3830  055E  00E3               	movwf	??_initialiseGPIO^(0+128)
  3831  055F  0863               	movf	??_initialiseGPIO^(0+128),w
  3832  0560  00E7               	movwf	initialiseGPIO@portNumber^(0+128)
  3833  0561                     l2162:
  3834                           
  3835                           ;GPIO.c: 27:         portType = 0;
  3836  0561  01E5               	clrf	initialiseGPIO@portType^(0+128)
  3837  0562                     l2164:
  3838                           
  3839                           ;GPIO.c: 30:     if(portType == 0){
  3840  0562  0865               	movf	initialiseGPIO@portType^(0+128),w
  3841  0563  1D03               	btfss	3,2
  3842  0564  2D66               	goto	u1571
  3843  0565  2D67               	goto	u1570
  3844  0566                     u1571:
  3845  0566  2D92               	goto	l2172
  3846  0567                     u1570:
  3847  0567                     l2166:
  3848                           
  3849                           ;GPIO.c: 31:         if(direction){
  3850  0567  0862               	movf	initialiseGPIO@direction^(0+128),w
  3851  0568  1903               	btfsc	3,2
  3852  0569  2D6B               	goto	u1581
  3853  056A  2D6C               	goto	u1580
  3854  056B                     u1581:
  3855  056B  2D85               	goto	l2170
  3856  056C                     u1580:
  3857  056C                     l2168:
  3858                           
  3859                           ;GPIO.c: 32:             TRISA |= (1 << (uint8_t)portNumber);
  3860  056C  3001               	movlw	1
  3861  056D  00E3               	movwf	??_initialiseGPIO^(0+128)
  3862  056E  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3863  056F  2D71               	goto	u1594
  3864  0570                     u1595:
  3865  0570  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3866  0571                     u1594:
  3867  0571  0B89               	decfsz	9,f
  3868  0572  2D70               	goto	u1595
  3869  0573  0863               	movf	??_initialiseGPIO^(0+128),w
  3870  0574  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3871  0575  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3872  0576  048C               	iorwf	12,f	;volatile
  3873                           
  3874                           ;GPIO.c: 33:             ANSELA &= ~(1 << (uint8_t)portNumber);
  3875  0577  3001               	movlw	1
  3876  0578  00E3               	movwf	??_initialiseGPIO^(0+128)
  3877  0579  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3878  057A  2D7C               	goto	u1604
  3879  057B                     u1605:
  3880  057B  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3881  057C                     u1604:
  3882  057C  0B89               	decfsz	9,f
  3883  057D  2D7B               	goto	u1605
  3884  057E  0863               	movf	??_initialiseGPIO^(0+128),w
  3885  057F  3AFF               	xorlw	255
  3886  0580  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3887  0581  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3888  0582  0023               	movlb	3	; select bank3
  3889  0583  058C               	andwf	12,f	;volatile
  3890                           
  3891                           ;GPIO.c: 34:         }
  3892  0584  2DC1               	goto	l324
  3893  0585                     l2170:
  3894  0585  3001               	movlw	1
  3895  0586  00E3               	movwf	??_initialiseGPIO^(0+128)
  3896  0587  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3897  0588  2D8A               	goto	u1614
  3898  0589                     u1615:
  3899  0589  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3900  058A                     u1614:
  3901  058A  0B89               	decfsz	9,f
  3902  058B  2D89               	goto	u1615
  3903  058C  0863               	movf	??_initialiseGPIO^(0+128),w
  3904  058D  3AFF               	xorlw	255
  3905  058E  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3906  058F  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3907  0590  058C               	andwf	12,f	;volatile
  3908  0591  2DC1               	goto	l324
  3909  0592                     l2172:
  3910  0592  0365               	decf	initialiseGPIO@portType^(0+128),w
  3911  0593  1D03               	btfss	3,2
  3912  0594  2D96               	goto	u1621
  3913  0595  2D97               	goto	u1620
  3914  0596                     u1621:
  3915  0596  2DC1               	goto	l324
  3916  0597                     u1620:
  3917  0597                     l2174:
  3918                           
  3919                           ;GPIO.c: 38:         if(direction){
  3920  0597  0862               	movf	initialiseGPIO@direction^(0+128),w
  3921  0598  1903               	btfsc	3,2
  3922  0599  2D9B               	goto	u1631
  3923  059A  2D9C               	goto	u1630
  3924  059B                     u1631:
  3925  059B  2DB5               	goto	l2178
  3926  059C                     u1630:
  3927  059C                     l2176:
  3928                           
  3929                           ;GPIO.c: 39:             TRISB |= (1 << (uint8_t)portNumber);
  3930  059C  3001               	movlw	1
  3931  059D  00E3               	movwf	??_initialiseGPIO^(0+128)
  3932  059E  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3933  059F  2DA1               	goto	u1644
  3934  05A0                     u1645:
  3935  05A0  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3936  05A1                     u1644:
  3937  05A1  0B89               	decfsz	9,f
  3938  05A2  2DA0               	goto	u1645
  3939  05A3  0863               	movf	??_initialiseGPIO^(0+128),w
  3940  05A4  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3941  05A5  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3942  05A6  048D               	iorwf	13,f	;volatile
  3943                           
  3944                           ;GPIO.c: 40:             ANSELB &= ~(1 << (uint8_t)portNumber);
  3945  05A7  3001               	movlw	1
  3946  05A8  00E3               	movwf	??_initialiseGPIO^(0+128)
  3947  05A9  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3948  05AA  2DAC               	goto	u1654
  3949  05AB                     u1655:
  3950  05AB  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3951  05AC                     u1654:
  3952  05AC  0B89               	decfsz	9,f
  3953  05AD  2DAB               	goto	u1655
  3954  05AE  0863               	movf	??_initialiseGPIO^(0+128),w
  3955  05AF  3AFF               	xorlw	255
  3956  05B0  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3957  05B1  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3958  05B2  0023               	movlb	3	; select bank3
  3959  05B3  058D               	andwf	13,f	;volatile
  3960                           
  3961                           ;GPIO.c: 41:         }
  3962  05B4  2DC1               	goto	l324
  3963  05B5                     l2178:
  3964  05B5  3001               	movlw	1
  3965  05B6  00E3               	movwf	??_initialiseGPIO^(0+128)
  3966  05B7  0A67               	incf	initialiseGPIO@portNumber^(0+128),w
  3967  05B8  2DBA               	goto	u1664
  3968  05B9                     u1665:
  3969  05B9  35E3               	lslf	??_initialiseGPIO^(0+128),f
  3970  05BA                     u1664:
  3971  05BA  0B89               	decfsz	9,f
  3972  05BB  2DB9               	goto	u1665
  3973  05BC  0863               	movf	??_initialiseGPIO^(0+128),w
  3974  05BD  3AFF               	xorlw	255
  3975  05BE  00E4               	movwf	(??_initialiseGPIO+1)^(0+128)
  3976  05BF  0864               	movf	(??_initialiseGPIO+1)^(0+128),w
  3977  05C0  058D               	andwf	13,f	;volatile
  3978  05C1                     l324:
  3979  05C1  0008               	return
  3980  05C2                     __end_of_initialiseGPIO:
  3981                           
  3982                           	psect	text14
  3983  05C2                     __ptext14:	
  3984 ;; *************** function _initialiseADCPin *****************
  3985 ;; Defined at:
  3986 ;;		line 37 in file "ADC.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  gpioNumber      1    wreg     const enum E2798
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  gpioNumber      1    5[BANK1 ] const enum E2798
  3991 ;;  portNumber      1    4[BANK1 ] unsigned char 
  3992 ;;  portType        1    3[BANK1 ] unsigned char 
  3993 ;;  gpioValid       1    2[BANK1 ] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, status,2, status,0
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4003 ;;      Params:         0       0       0       0       0       0
  4004 ;;      Locals:         0       0       4       0       0       0
  4005 ;;      Temps:          0       0       2       0       0       0
  4006 ;;      Totals:         0       0       6       0       0       0
  4007 ;;Total ram usage:        6 bytes
  4008 ;; Hardware stack levels used: 1
  4009 ;; Hardware stack levels required when called: 5
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_initialisePotentiometers
  4014 ;;		_initialiseController
  4015 ;;		_initialiseCurrentSensors
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019  05C2                     _initialiseADCPin:	
  4020                           ;psect for function _initialiseADCPin
  4021                           
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _initialiseADCPin: [wreg+status,2+status,0]
  4025                           ;initialiseADCPin@gpioNumber stored from wreg
  4026  05C2  0021               	movlb	1	; select bank1
  4027  05C3  00E7               	movwf	initialiseADCPin@gpioNumber^(0+128)
  4028  05C4                     l2180:
  4029                           
  4030                           ;ADC.c: 39:     uint8_t portNumber = 0;
  4031  05C4  01E6               	clrf	initialiseADCPin@portNumber^(0+128)
  4032                           
  4033                           ;ADC.c: 40:     uint8_t portType = 0;
  4034  05C5  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4035                           
  4036                           ;ADC.c: 41:     uint8_t gpioValid = 0;
  4037  05C6  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4038  05C7                     l2182:
  4039                           
  4040                           ;ADC.c: 43:     if(gpioNumber < 4){
  4041  05C7  3004               	movlw	4
  4042  05C8  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4043  05C9  1803               	skipnc
  4044  05CA  2DCC               	goto	u1671
  4045  05CB  2DCD               	goto	u1670
  4046  05CC                     u1671:
  4047  05CC  2DD4               	goto	l2190
  4048  05CD                     u1670:
  4049  05CD                     l2184:
  4050                           
  4051                           ;ADC.c: 44:         portNumber = gpioNumber;
  4052  05CD  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4053  05CE  00E2               	movwf	??_initialiseADCPin^(0+128)
  4054  05CF  0862               	movf	??_initialiseADCPin^(0+128),w
  4055  05D0  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4056  05D1                     l2186:
  4057                           
  4058                           ;ADC.c: 45:         portType = 0;
  4059  05D1  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4060  05D2                     l2188:
  4061                           
  4062                           ;ADC.c: 46:         gpioValid = 1;
  4063  05D2  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4064  05D3  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4065  05D4                     l2190:
  4066                           
  4067                           ;ADC.c: 49:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  4068  05D4  3009               	movlw	9
  4069  05D5  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4070  05D6  1C03               	skipc
  4071  05D7  2DD9               	goto	u1681
  4072  05D8  2DDA               	goto	u1680
  4073  05D9                     u1681:
  4074  05D9  2DE9               	goto	l252
  4075  05DA                     u1680:
  4076  05DA                     l2192:
  4077  05DA  3010               	movlw	16
  4078  05DB  0267               	subwf	initialiseADCPin@gpioNumber^(0+128),w
  4079  05DC  1803               	skipnc
  4080  05DD  2DDF               	goto	u1691
  4081  05DE  2DE0               	goto	u1690
  4082  05DF                     u1691:
  4083  05DF  2DE9               	goto	l252
  4084  05E0                     u1690:
  4085  05E0                     l2194:
  4086                           
  4087                           ;ADC.c: 50:         portNumber = gpioNumber - 8;
  4088  05E0  0867               	movf	initialiseADCPin@gpioNumber^(0+128),w
  4089  05E1  3EF8               	addlw	248
  4090  05E2  00E2               	movwf	??_initialiseADCPin^(0+128)
  4091  05E3  0862               	movf	??_initialiseADCPin^(0+128),w
  4092  05E4  00E6               	movwf	initialiseADCPin@portNumber^(0+128)
  4093  05E5                     l2196:
  4094                           
  4095                           ;ADC.c: 51:         portType = 1;
  4096  05E5  01E5               	clrf	initialiseADCPin@portType^(0+128)
  4097  05E6  0AE5               	incf	initialiseADCPin@portType^(0+128),f
  4098  05E7                     l2198:
  4099                           
  4100                           ;ADC.c: 52:         gpioValid = 1;
  4101  05E7  01E4               	clrf	initialiseADCPin@gpioValid^(0+128)
  4102  05E8  0AE4               	incf	initialiseADCPin@gpioValid^(0+128),f
  4103  05E9                     l252:	
  4104                           ;ADC.c: 53:     }
  4105                           
  4106                           
  4107                           ;ADC.c: 55:     if(gpioValid){
  4108  05E9  0864               	movf	initialiseADCPin@gpioValid^(0+128),w
  4109  05EA  1903               	btfsc	3,2
  4110  05EB  2DED               	goto	u1701
  4111  05EC  2DEE               	goto	u1700
  4112  05ED                     u1701:
  4113  05ED  2E27               	goto	l257
  4114  05EE                     u1700:
  4115  05EE                     l2200:
  4116                           
  4117                           ;ADC.c: 56:         if(portType == 0){
  4118  05EE  0865               	movf	initialiseADCPin@portType^(0+128),w
  4119  05EF  1D03               	btfss	3,2
  4120  05F0  2DF2               	goto	u1711
  4121  05F1  2DF3               	goto	u1710
  4122  05F2                     u1711:
  4123  05F2  2E0B               	goto	l2204
  4124  05F3                     u1710:
  4125  05F3                     l2202:
  4126                           
  4127                           ;ADC.c: 57:             TRISA |= (1 << (uint8_t)portNumber);
  4128  05F3  3001               	movlw	1
  4129  05F4  00E2               	movwf	??_initialiseADCPin^(0+128)
  4130  05F5  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4131  05F6  2DF8               	goto	u1724
  4132  05F7                     u1725:
  4133  05F7  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4134  05F8                     u1724:
  4135  05F8  0B89               	decfsz	9,f
  4136  05F9  2DF7               	goto	u1725
  4137  05FA  0862               	movf	??_initialiseADCPin^(0+128),w
  4138  05FB  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4139  05FC  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4140  05FD  048C               	iorwf	12,f	;volatile
  4141                           
  4142                           ;ADC.c: 58:             ANSELA |= (1 << (uint8_t)portNumber);
  4143  05FE  3001               	movlw	1
  4144  05FF  00E2               	movwf	??_initialiseADCPin^(0+128)
  4145  0600  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4146  0601  2E03               	goto	u1734
  4147  0602                     u1735:
  4148  0602  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4149  0603                     u1734:
  4150  0603  0B89               	decfsz	9,f
  4151  0604  2E02               	goto	u1735
  4152  0605  0862               	movf	??_initialiseADCPin^(0+128),w
  4153  0606  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4154  0607  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4155  0608  0023               	movlb	3	; select bank3
  4156  0609  048C               	iorwf	12,f	;volatile
  4157                           
  4158                           ;ADC.c: 59:         }
  4159  060A  2E27               	goto	l257
  4160  060B                     l2204:
  4161  060B  0365               	decf	initialiseADCPin@portType^(0+128),w
  4162  060C  1D03               	btfss	3,2
  4163  060D  2E0F               	goto	u1741
  4164  060E  2E10               	goto	u1740
  4165  060F                     u1741:
  4166  060F  2E27               	goto	l257
  4167  0610                     u1740:
  4168  0610                     l2206:
  4169                           
  4170                           ;ADC.c: 61:             TRISB |= (1 << (uint8_t)portNumber);
  4171  0610  3001               	movlw	1
  4172  0611  00E2               	movwf	??_initialiseADCPin^(0+128)
  4173  0612  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4174  0613  2E15               	goto	u1754
  4175  0614                     u1755:
  4176  0614  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4177  0615                     u1754:
  4178  0615  0B89               	decfsz	9,f
  4179  0616  2E14               	goto	u1755
  4180  0617  0862               	movf	??_initialiseADCPin^(0+128),w
  4181  0618  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4182  0619  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4183  061A  048D               	iorwf	13,f	;volatile
  4184                           
  4185                           ;ADC.c: 62:             ANSELB |= (1 << (uint8_t)portNumber);
  4186  061B  3001               	movlw	1
  4187  061C  00E2               	movwf	??_initialiseADCPin^(0+128)
  4188  061D  0A66               	incf	initialiseADCPin@portNumber^(0+128),w
  4189  061E  2E20               	goto	u1764
  4190  061F                     u1765:
  4191  061F  35E2               	lslf	??_initialiseADCPin^(0+128),f
  4192  0620                     u1764:
  4193  0620  0B89               	decfsz	9,f
  4194  0621  2E1F               	goto	u1765
  4195  0622  0862               	movf	??_initialiseADCPin^(0+128),w
  4196  0623  00E3               	movwf	(??_initialiseADCPin+1)^(0+128)
  4197  0624  0863               	movf	(??_initialiseADCPin+1)^(0+128),w
  4198  0625  0023               	movlb	3	; select bank3
  4199  0626  048D               	iorwf	13,f	;volatile
  4200  0627                     l257:
  4201  0627  0008               	return
  4202  0628                     __end_of_initialiseADCPin:
  4203                           
  4204                           	psect	text15
  4205  0C1D                     __ptext15:	
  4206 ;; *************** function _initialiseADCModule *****************
  4207 ;; Defined at:
  4208 ;;		line 14 in file "ADC.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4222 ;;      Params:         0       0       0       0       0       0
  4223 ;;      Locals:         0       0       0       0       0       0
  4224 ;;      Temps:          0       0       0       0       0       0
  4225 ;;      Totals:         0       0       0       0       0       0
  4226 ;;Total ram usage:        0 bytes
  4227 ;; Hardware stack levels used: 1
  4228 ;; Hardware stack levels required when called: 5
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236  0C1D                     _initialiseADCModule:	
  4237                           ;psect for function _initialiseADCModule
  4238                           
  4239  0C1D                     l2660:	
  4240                           ;incstack = 0
  4241                           ; Regs used in _initialiseADCModule: [wreg]
  4242                           
  4243                           
  4244                           ;ADC.c: 16:     ADCON0 = 0b00000001;
  4245  0C1D  3001               	movlw	1
  4246  0C1E  0021               	movlb	1	; select bank1
  4247  0C1F  009D               	movwf	29	;volatile
  4248                           
  4249                           ;ADC.c: 22:     ADCON1 = 0b10000000;
  4250  0C20  3080               	movlw	128
  4251  0C21  009E               	movwf	30	;volatile
  4252  0C22                     l248:
  4253  0C22  0008               	return
  4254  0C23                     __end_of_initialiseADCModule:
  4255                           
  4256                           	psect	intentry
  4257  0004                     __pintentry:	
  4258 ;; *************** function _Tick980Hz *****************
  4259 ;; Defined at:
  4260 ;;		line 41 in file "main.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      void 
  4267 ;; Registers used:
  4268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4274 ;;      Params:         0       0       0       0       0       0
  4275 ;;      Locals:         0       0       0       0       0       0
  4276 ;;      Temps:          0       1       0       0       0       0
  4277 ;;      Totals:         0       1       0       0       0       0
  4278 ;;Total ram usage:        1 bytes
  4279 ;; Hardware stack levels used: 1
  4280 ;; Hardware stack levels required when called: 4
  4281 ;; This function calls:
  4282 ;;		_controlRoutine
  4283 ;;		_currentTripRead
  4284 ;;		_readFilteredDutyPot
  4285 ;;		_readFilteredFreqPot
  4286 ;;		_readFilteredIL
  4287 ;;		_readFilteredVout
  4288 ;;		_readILCurrentADCRaw
  4289 ;;		_runPotScaling
  4290 ;;		_setPWMDutyandPeriod
  4291 ;;		_transToOverCurrentFault
  4292 ;;		i1_currentTripReset
  4293 ;;		i1_writeGPIO
  4294 ;; This function is called by:
  4295 ;;		Interrupt level 1
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299  0004                     _Tick980Hz:
  4300                           
  4301                           ;incstack = 0
  4302  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4303                           
  4304                           ; Regs used in _Tick980Hz: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4305  0005  3180               	pagesel	$
  4306  0006                     i1l2718:
  4307                           
  4308                           ;main.c: 52:         if(currentTripRead() == 1){
  4309  0006  318D  2546  3180   	fcall	_currentTripRead
  4310  0009  3A01               	xorlw	1
  4311  000A  1D03               	skipz
  4312  000B  280D               	goto	u243_21
  4313  000C  280E               	goto	u243_20
  4314  000D                     u243_21:
  4315  000D  2821               	goto	i1l2726
  4316  000E                     u243_20:
  4317  000E                     i1l2720:
  4318                           
  4319                           ;main.c: 53:             currentTripCount++;
  4320  000E  3001               	movlw	1
  4321  000F  0020               	movlb	0	; select bank0
  4322  0010  00DC               	movwf	??_Tick980Hz
  4323  0011  085C               	movf	??_Tick980Hz,w
  4324  0012  07EC               	addwf	_currentTripCount,f
  4325                           
  4326                           ;main.c: 54:             if(currentTripCount == 3){
  4327  0013  3003               	movlw	3
  4328  0014  066C               	xorwf	_currentTripCount,w
  4329  0015  1D03               	btfss	3,2
  4330  0016  2818               	goto	u244_21
  4331  0017  2819               	goto	u244_20
  4332  0018                     u244_21:
  4333  0018  281D               	goto	i1l2724
  4334  0019                     u244_20:
  4335  0019                     i1l2722:
  4336                           
  4337                           ;main.c: 55:                 transToOverCurrentFault();
  4338  0019  318C  2448  3180   	fcall	_transToOverCurrentFault
  4339                           
  4340                           ;main.c: 56:             }
  4341  001C  2829               	goto	i1l2730
  4342  001D                     i1l2724:
  4343                           
  4344                           ;main.c: 58:                 currentTripReset();
  4345  001D  318C  2466  3180   	fcall	i1_currentTripReset
  4346  0020  2829               	goto	i1l2730
  4347  0021                     i1l2726:
  4348                           
  4349                           ;main.c: 62:             if(currentTripCount > 0){
  4350  0021  0020               	movlb	0	; select bank0
  4351  0022  086C               	movf	_currentTripCount,w
  4352  0023  1903               	btfsc	3,2
  4353  0024  2826               	goto	u245_21
  4354  0025  2827               	goto	u245_20
  4355  0026                     u245_21:
  4356  0026  2829               	goto	i1l2730
  4357  0027                     u245_20:
  4358  0027                     i1l2728:
  4359                           
  4360                           ;main.c: 63:                 currentTripCount--;
  4361  0027  3001               	movlw	1
  4362  0028  02EC               	subwf	_currentTripCount,f
  4363  0029                     i1l2730:
  4364                           
  4365                           ;main.c: 66:         setPWMDutyandPeriod(setDuty, setPeriod);
  4366  0029  0020               	movlb	0	; select bank0
  4367  002A  0866               	movf	_setDuty+1,w
  4368  002B  00F1               	movwf	setPWMDutyandPeriod@dutyCycle+1
  4369  002C  0865               	movf	_setDuty,w
  4370  002D  00F0               	movwf	setPWMDutyandPeriod@dutyCycle
  4371  002E  086F               	movf	_setPeriod,w
  4372  002F  00DC               	movwf	??_Tick980Hz
  4373  0030  085C               	movf	??_Tick980Hz,w
  4374  0031  00F2               	movwf	setPWMDutyandPeriod@period
  4375  0032  318D  251B  3180   	fcall	_setPWMDutyandPeriod
  4376  0035                     i1l2732:
  4377                           
  4378                           ;main.c: 69:         if(timerSlotHalf == 0){
  4379  0035  0020               	movlb	0	; select bank0
  4380  0036  0868               	movf	_timerSlotHalf,w	;volatile
  4381  0037  1D03               	btfss	3,2
  4382  0038  283A               	goto	u246_21
  4383  0039  283B               	goto	u246_20
  4384  003A                     u246_21:
  4385  003A  2843               	goto	i1l2738
  4386  003B                     u246_20:
  4387  003B                     i1l2734:
  4388                           
  4389                           ;main.c: 71:             writeGPIO(pinRB4, 0);
  4390  003B  01F0               	clrf	i1writeGPIO@writeValue
  4391  003C  300C               	movlw	12
  4392  003D  3186  26ED  3180   	fcall	i1_writeGPIO
  4393  0040                     i1l2736:
  4394                           
  4395                           ;main.c: 72:             controlRoutine();
  4396  0040  3182  22AF  3180   	fcall	_controlRoutine
  4397  0043                     i1l2738:
  4398                           
  4399                           ;main.c: 75:         if(timerSlotHalf == 1){
  4400  0043  0020               	movlb	0	; select bank0
  4401  0044  0368               	decf	_timerSlotHalf,w	;volatile
  4402  0045  1D03               	btfss	3,2
  4403  0046  2848               	goto	u247_21
  4404  0047  2849               	goto	u247_20
  4405  0048                     u247_21:
  4406  0048  2887               	goto	i1l2752
  4407  0049                     u247_20:
  4408  0049                     i1l2740:
  4409                           
  4410                           ;main.c: 77:             filteredIL = readFilteredIL();
  4411  0049  3187  27A7  3180   	fcall	_readFilteredIL
  4412  004C  0871               	movf	?_readFilteredIL+1,w
  4413  004D  0020               	movlb	0	; select bank0
  4414  004E  00E2               	movwf	_filteredIL+1
  4415  004F  0870               	movf	?_readFilteredIL,w
  4416  0050  00E1               	movwf	_filteredIL
  4417                           
  4418                           ;main.c: 79:             filteredVout = readFilteredVout();
  4419  0051  3187  274C  3180   	fcall	_readFilteredVout
  4420  0054  087C               	movf	?_readFilteredVout+1,w
  4421  0055  0020               	movlb	0	; select bank0
  4422  0056  00E0               	movwf	_filteredVout+1
  4423  0057  087B               	movf	?_readFilteredVout,w
  4424  0058  00DF               	movwf	_filteredVout
  4425  0059                     i1l2742:
  4426                           
  4427                           ;main.c: 82:             if(timerSlotQuarter == 0){
  4428  0059  0867               	movf	_timerSlotQuarter,w	;volatile
  4429  005A  1D03               	btfss	3,2
  4430  005B  285D               	goto	u248_21
  4431  005C  285E               	goto	u248_20
  4432  005D                     u248_21:
  4433  005D  2867               	goto	i1l2746
  4434  005E                     u248_20:
  4435  005E                     i1l2744:
  4436                           
  4437                           ;main.c: 84:                 writeGPIO(pinRB4, 1);
  4438  005E  01F0               	clrf	i1writeGPIO@writeValue
  4439  005F  0AF0               	incf	i1writeGPIO@writeValue,f
  4440  0060  300C               	movlw	12
  4441  0061  3186  26ED  3180   	fcall	i1_writeGPIO
  4442                           
  4443                           ;main.c: 85:                 runPotScaling();
  4444  0064  3183  23A9  3180   	fcall	_runPotScaling
  4445  0067                     i1l2746:
  4446                           
  4447                           ;main.c: 88:             if(timerSlotQuarter == 1){
  4448  0067  0020               	movlb	0	; select bank0
  4449  0068  0367               	decf	_timerSlotQuarter,w	;volatile
  4450  0069  1D03               	btfss	3,2
  4451  006A  286C               	goto	u249_21
  4452  006B  286D               	goto	u249_20
  4453  006C                     u249_21:
  4454  006C  287D               	goto	i1l2750
  4455  006D                     u249_20:
  4456  006D                     i1l2748:
  4457                           
  4458                           ;main.c: 90:                 filteredDutyPot = readFilteredDutyPot();
  4459  006D  318F  274A  3180   	fcall	_readFilteredDutyPot
  4460  0070  087C               	movf	?_readFilteredDutyPot+1,w
  4461  0071  0021               	movlb	1	; select bank1
  4462  0072  00C1               	movwf	(_filteredDutyPot+1)^(0+128)
  4463  0073  087B               	movf	?_readFilteredDutyPot,w
  4464  0074  00C0               	movwf	_filteredDutyPot^(0+128)
  4465                           
  4466                           ;main.c: 91:                 filteredFreqPot = readFilteredFreqPot();
  4467  0075  318F  27A5  3180   	fcall	_readFilteredFreqPot
  4468  0078  087C               	movf	?_readFilteredFreqPot+1,w
  4469  0079  0020               	movlb	0	; select bank0
  4470  007A  00DE               	movwf	_filteredFreqPot+1
  4471  007B  087B               	movf	?_readFilteredFreqPot,w
  4472  007C  00DD               	movwf	_filteredFreqPot
  4473  007D                     i1l2750:
  4474                           
  4475                           ;main.c: 94:             timerSlotQuarter = ~timerSlotQuarter;
  4476  007D  0367               	decf	_timerSlotQuarter,w	;volatile
  4477  007E  1D03               	btfss	3,2
  4478  007F  2881               	goto	u250_21
  4479  0080  2883               	goto	u250_20
  4480  0081                     u250_21:
  4481  0081  3001               	movlw	1
  4482  0082  2884               	goto	u251_20
  4483  0083                     u250_20:
  4484  0083  3000               	movlw	0
  4485  0084                     u251_20:
  4486  0084  00DC               	movwf	??_Tick980Hz
  4487  0085  085C               	movf	??_Tick980Hz,w
  4488  0086  00E7               	movwf	_timerSlotQuarter	;volatile
  4489  0087                     i1l2752:
  4490                           
  4491                           ;main.c: 97:         timerSlotHalf = ~timerSlotHalf;
  4492  0087  0368               	decf	_timerSlotHalf,w	;volatile
  4493  0088  1D03               	btfss	3,2
  4494  0089  288B               	goto	u252_21
  4495  008A  288D               	goto	u252_20
  4496  008B                     u252_21:
  4497  008B  3001               	movlw	1
  4498  008C  288E               	goto	u253_20
  4499  008D                     u252_20:
  4500  008D  3000               	movlw	0
  4501  008E                     u253_20:
  4502  008E  00DC               	movwf	??_Tick980Hz
  4503  008F  085C               	movf	??_Tick980Hz,w
  4504  0090  00E8               	movwf	_timerSlotHalf	;volatile
  4505  0091                     i1l2754:
  4506                           
  4507                           ;main.c: 98:         INTCONbits.TMR0IF = 0;
  4508  0091  110B               	bcf	11,2	;volatile
  4509  0092                     i1l2756:
  4510                           
  4511                           ;main.c: 103:         latestIL = readILCurrentADCRaw();
  4512  0092  318C  245A  3180   	fcall	_readILCurrentADCRaw
  4513  0095  0871               	movf	?_readILCurrentADCRaw+1,w
  4514  0096  0020               	movlb	0	; select bank0
  4515  0097  00E4               	movwf	_latestIL+1	;volatile
  4516  0098  0870               	movf	?_readILCurrentADCRaw,w
  4517  0099  00E3               	movwf	_latestIL	;volatile
  4518  009A                     i1l2758:
  4519                           
  4520                           ;main.c: 104:         PIR1bits.CCP1IF = 0;
  4521  009A  1111               	bcf	17,2	;volatile
  4522  009B                     i1l118:
  4523  009B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4524  009C  0009               	retfie
  4525  009D                     __end_of_Tick980Hz:
  4526                           
  4527                           	psect	text17
  4528  0C66                     __ptext17:	
  4529 ;; *************** function i1_currentTripReset *****************
  4530 ;; Defined at:
  4531 ;;		line 70 in file "CurrentSensor.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4545 ;;      Params:         0       0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; Hardware stack levels required when called: 1
  4552 ;; This function calls:
  4553 ;;		i1_writeGPIO
  4554 ;; This function is called by:
  4555 ;;		_Tick980Hz
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559  0C66                     i1_currentTripReset:	
  4560                           ;psect for function i1_currentTripReset
  4561                           
  4562  0C66                     i1l2714:	
  4563                           ;incstack = 0
  4564                           ; Regs used in i1_currentTripReset: [wreg+status,2+status,0+pclath+cstack]
  4565                           
  4566                           
  4567                           ;CurrentSensor.c: 71:     writeGPIO(pinRB3, 0);
  4568  0C66  01F0               	clrf	i1writeGPIO@writeValue
  4569  0C67  300B               	movlw	11
  4570  0C68  3186  26ED  318C   	fcall	i1_writeGPIO
  4571  0C6B                     i1l2716:
  4572                           
  4573                           ;CurrentSensor.c: 72:      _delay((unsigned long)((20)*(freq32M/4000000.0)));
  4574                           ;CurrentSensor.c: 73:     writeGPIO(pinRB3, 1);
  4575  0C6B  01F0               	clrf	i1writeGPIO@writeValue
  4576  0C6C  0AF0               	incf	i1writeGPIO@writeValue,f
  4577  0C6D  300B               	movlw	11
  4578  0C6E  3186  26ED  318C   	fcall	i1_writeGPIO
  4579  0C71                     i1l550:
  4580  0C71  0008               	return
  4581  0C72                     __end_ofi1_currentTripReset:
  4582                           
  4583                           	psect	text18
  4584  06ED                     __ptext18:	
  4585 ;; *************** function i1_writeGPIO *****************
  4586 ;; Defined at:
  4587 ;;		line 52 in file "GPIO.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  gpioNumber      1    wreg     const enum E2798
  4590 ;;  writeValue      1    0[COMMON] unsigned char 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  gpioNumber      1    4[COMMON] const enum E2798
  4593 ;;  portNumber      1    5[COMMON] unsigned char 
  4594 ;;  portType        1    3[COMMON] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4604 ;;      Params:         1       0       0       0       0       0
  4605 ;;      Locals:         3       0       0       0       0       0
  4606 ;;      Temps:          2       0       0       0       0       0
  4607 ;;      Totals:         6       0       0       0       0       0
  4608 ;;Total ram usage:        6 bytes
  4609 ;; Hardware stack levels used: 1
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_Tick980Hz
  4614 ;;		i1_currentTripReset
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618  06ED                     i1_writeGPIO:	
  4619                           ;psect for function i1_writeGPIO
  4620                           
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in i1_writeGPIO: [wreg+status,2+status,0]
  4624                           ;i1writeGPIO@gpioNumber stored from wreg
  4625  06ED  00F4               	movwf	i1writeGPIO@gpioNumber
  4626  06EE                     i1l2320:
  4627                           
  4628                           ;GPIO.c: 54:     uint8_t portType = 0;
  4629  06EE  01F3               	clrf	i1writeGPIO@portType
  4630  06EF                     i1l2322:
  4631                           
  4632                           ;GPIO.c: 55:     if(gpioNumber > 7){
  4633  06EF  3008               	movlw	8
  4634  06F0  0274               	subwf	i1writeGPIO@gpioNumber,w
  4635  06F1  1C03               	skipc
  4636  06F2  2EF4               	goto	u198_21
  4637  06F3  2EF5               	goto	u198_20
  4638  06F4                     u198_21:
  4639  06F4  2EFD               	goto	i1l2328
  4640  06F5                     u198_20:
  4641  06F5                     i1l2324:
  4642                           
  4643                           ;GPIO.c: 56:         portNumber = gpioNumber - 8;
  4644  06F5  0874               	movf	i1writeGPIO@gpioNumber,w
  4645  06F6  3EF8               	addlw	248
  4646  06F7  00F1               	movwf	??i1_writeGPIO
  4647  06F8  0871               	movf	??i1_writeGPIO,w
  4648  06F9  00F5               	movwf	i1writeGPIO@portNumber
  4649  06FA                     i1l2326:
  4650                           
  4651                           ;GPIO.c: 57:         portType = 1;
  4652  06FA  01F3               	clrf	i1writeGPIO@portType
  4653  06FB  0AF3               	incf	i1writeGPIO@portType,f
  4654                           
  4655                           ;GPIO.c: 58:     }
  4656  06FC  2F02               	goto	i1l2332
  4657  06FD                     i1l2328:
  4658                           
  4659                           ;GPIO.c: 60:         portNumber = gpioNumber;
  4660  06FD  0874               	movf	i1writeGPIO@gpioNumber,w
  4661  06FE  00F1               	movwf	??i1_writeGPIO
  4662  06FF  0871               	movf	??i1_writeGPIO,w
  4663  0700  00F5               	movwf	i1writeGPIO@portNumber
  4664  0701                     i1l2330:
  4665                           
  4666                           ;GPIO.c: 61:         portType = 0;
  4667  0701  01F3               	clrf	i1writeGPIO@portType
  4668  0702                     i1l2332:
  4669                           
  4670                           ;GPIO.c: 64:     if(portType == 0){
  4671  0702  0873               	movf	i1writeGPIO@portType,w
  4672  0703  1D03               	btfss	3,2
  4673  0704  2F06               	goto	u199_21
  4674  0705  2F07               	goto	u199_20
  4675  0706                     u199_21:
  4676  0706  2F27               	goto	i1l2340
  4677  0707                     u199_20:
  4678  0707                     i1l2334:
  4679                           
  4680                           ;GPIO.c: 65:         if(writeValue) LATA |= (1 << (uint8_t)portNumber);
  4681  0707  0870               	movf	i1writeGPIO@writeValue,w
  4682  0708  1903               	btfsc	3,2
  4683  0709  2F0B               	goto	u200_21
  4684  070A  2F0C               	goto	u200_20
  4685  070B                     u200_21:
  4686  070B  2F19               	goto	i1l2338
  4687  070C                     u200_20:
  4688  070C                     i1l2336:
  4689  070C  3001               	movlw	1
  4690  070D  00F1               	movwf	??i1_writeGPIO
  4691  070E  0A75               	incf	i1writeGPIO@portNumber,w
  4692  070F  2F11               	goto	u201_24
  4693  0710                     u201_25:
  4694  0710  35F1               	lslf	??i1_writeGPIO,f
  4695  0711                     u201_24:
  4696  0711  0B89               	decfsz	9,f
  4697  0712  2F10               	goto	u201_25
  4698  0713  0871               	movf	??i1_writeGPIO,w
  4699  0714  00F2               	movwf	??i1_writeGPIO+1
  4700  0715  0872               	movf	??i1_writeGPIO+1,w
  4701  0716  0022               	movlb	2	; select bank2
  4702  0717  048C               	iorwf	12,f	;volatile
  4703  0718  2F4B               	goto	i1l338
  4704  0719                     i1l2338:
  4705  0719  3001               	movlw	1
  4706  071A  00F1               	movwf	??i1_writeGPIO
  4707  071B  0A75               	incf	i1writeGPIO@portNumber,w
  4708  071C  2F1E               	goto	u202_24
  4709  071D                     u202_25:
  4710  071D  35F1               	lslf	??i1_writeGPIO,f
  4711  071E                     u202_24:
  4712  071E  0B89               	decfsz	9,f
  4713  071F  2F1D               	goto	u202_25
  4714  0720  0871               	movf	??i1_writeGPIO,w
  4715  0721  3AFF               	xorlw	255
  4716  0722  00F2               	movwf	??i1_writeGPIO+1
  4717  0723  0872               	movf	??i1_writeGPIO+1,w
  4718  0724  0022               	movlb	2	; select bank2
  4719  0725  058C               	andwf	12,f	;volatile
  4720  0726  2F4B               	goto	i1l338
  4721  0727                     i1l2340:
  4722  0727  0373               	decf	i1writeGPIO@portType,w
  4723  0728  1D03               	btfss	3,2
  4724  0729  2F2B               	goto	u203_21
  4725  072A  2F2C               	goto	u203_20
  4726  072B                     u203_21:
  4727  072B  2F4B               	goto	i1l338
  4728  072C                     u203_20:
  4729  072C                     i1l2342:
  4730                           
  4731                           ;GPIO.c: 69:         if(writeValue) LATB |= (1 << (uint8_t)portNumber);
  4732  072C  0870               	movf	i1writeGPIO@writeValue,w
  4733  072D  1903               	btfsc	3,2
  4734  072E  2F30               	goto	u204_21
  4735  072F  2F31               	goto	u204_20
  4736  0730                     u204_21:
  4737  0730  2F3E               	goto	i1l2346
  4738  0731                     u204_20:
  4739  0731                     i1l2344:
  4740  0731  3001               	movlw	1
  4741  0732  00F1               	movwf	??i1_writeGPIO
  4742  0733  0A75               	incf	i1writeGPIO@portNumber,w
  4743  0734  2F36               	goto	u205_24
  4744  0735                     u205_25:
  4745  0735  35F1               	lslf	??i1_writeGPIO,f
  4746  0736                     u205_24:
  4747  0736  0B89               	decfsz	9,f
  4748  0737  2F35               	goto	u205_25
  4749  0738  0871               	movf	??i1_writeGPIO,w
  4750  0739  00F2               	movwf	??i1_writeGPIO+1
  4751  073A  0872               	movf	??i1_writeGPIO+1,w
  4752  073B  0022               	movlb	2	; select bank2
  4753  073C  048D               	iorwf	13,f	;volatile
  4754  073D  2F4B               	goto	i1l338
  4755  073E                     i1l2346:
  4756  073E  3001               	movlw	1
  4757  073F  00F1               	movwf	??i1_writeGPIO
  4758  0740  0A75               	incf	i1writeGPIO@portNumber,w
  4759  0741  2F43               	goto	u206_24
  4760  0742                     u206_25:
  4761  0742  35F1               	lslf	??i1_writeGPIO,f
  4762  0743                     u206_24:
  4763  0743  0B89               	decfsz	9,f
  4764  0744  2F42               	goto	u206_25
  4765  0745  0871               	movf	??i1_writeGPIO,w
  4766  0746  3AFF               	xorlw	255
  4767  0747  00F2               	movwf	??i1_writeGPIO+1
  4768  0748  0872               	movf	??i1_writeGPIO+1,w
  4769  0749  0022               	movlb	2	; select bank2
  4770  074A  058D               	andwf	13,f	;volatile
  4771  074B                     i1l338:
  4772  074B  0008               	return
  4773  074C                     __end_ofi1_writeGPIO:
  4774                           
  4775                           	psect	text19
  4776  0C48                     __ptext19:	
  4777 ;; *************** function _transToOverCurrentFault *****************
  4778 ;; Defined at:
  4779 ;;		line 45 in file "StateMachine.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;		None
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		wreg, status,2
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4793 ;;      Params:         0       0       0       0       0       0
  4794 ;;      Locals:         0       0       0       0       0       0
  4795 ;;      Temps:          1       0       0       0       0       0
  4796 ;;      Totals:         1       0       0       0       0       0
  4797 ;;Total ram usage:        1 bytes
  4798 ;; Hardware stack levels used: 1
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_Tick980Hz
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806  0C48                     _transToOverCurrentFault:	
  4807                           ;psect for function _transToOverCurrentFault
  4808                           
  4809  0C48                     i1l2362:	
  4810                           ;incstack = 0
  4811                           ; Regs used in _transToOverCurrentFault: [wreg+status,2]
  4812                           
  4813                           
  4814                           ;StateMachine.c: 46:     setDuty = 0;
  4815  0C48  0020               	movlb	0	; select bank0
  4816  0C49  01E5               	clrf	_setDuty
  4817  0C4A  01E6               	clrf	_setDuty+1
  4818                           
  4819                           ;StateMachine.c: 47:     setPeriod = 0;
  4820  0C4B  01EF               	clrf	_setPeriod
  4821  0C4C                     i1l2364:
  4822                           
  4823                           ;StateMachine.c: 48:     currentState = overCurrentFault;
  4824  0C4C  3004               	movlw	4
  4825  0C4D  00F0               	movwf	??_transToOverCurrentFault
  4826  0C4E  0870               	movf	??_transToOverCurrentFault,w
  4827  0C4F  00ED               	movwf	_currentState
  4828  0C50                     i1l579:
  4829  0C50  0008               	return
  4830  0C51                     __end_of_transToOverCurrentFault:
  4831                           
  4832                           	psect	text20
  4833  0D1B                     __ptext20:	
  4834 ;; *************** function _setPWMDutyandPeriod *****************
  4835 ;; Defined at:
  4836 ;;		line 49 in file "PWM.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  dutyCycle       2    0[COMMON] unsigned short 
  4839 ;;  period          1    2[COMMON] unsigned char 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4851 ;;      Params:         3       0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0
  4853 ;;      Temps:          2       0       0       0       0       0
  4854 ;;      Totals:         5       0       0       0       0       0
  4855 ;;Total ram usage:        5 bytes
  4856 ;; Hardware stack levels used: 1
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_Tick980Hz
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864  0D1B                     _setPWMDutyandPeriod:	
  4865                           ;psect for function _setPWMDutyandPeriod
  4866                           
  4867  0D1B                     i1l2366:	
  4868                           ;incstack = 0
  4869                           ; Regs used in _setPWMDutyandPeriod: [wreg+status,2+status,0]
  4870                           
  4871                           
  4872                           ;PWM.c: 50:     PR2 = period;
  4873  0D1B  0872               	movf	setPWMDutyandPeriod@period,w
  4874  0D1C  0020               	movlb	0	; select bank0
  4875  0D1D  009B               	movwf	27	;volatile
  4876  0D1E                     i1l2368:
  4877                           
  4878                           ;PWM.c: 51:     CCPR1L = dutyCycle >> 2;
  4879  0D1E  0871               	movf	setPWMDutyandPeriod@dutyCycle+1,w
  4880  0D1F  00F4               	movwf	??_setPWMDutyandPeriod+1
  4881  0D20  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4882  0D21  00F3               	movwf	??_setPWMDutyandPeriod
  4883  0D22  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4884  0D23  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4885  0D24  36F4               	lsrf	??_setPWMDutyandPeriod+1,f
  4886  0D25  0CF3               	rrf	??_setPWMDutyandPeriod,f
  4887  0D26  0873               	movf	??_setPWMDutyandPeriod,w
  4888  0D27  0025               	movlb	5	; select bank5
  4889  0D28  0091               	movwf	17	;volatile
  4890  0D29                     i1l2370:
  4891                           
  4892                           ;PWM.c: 52:     CCP1CONbits.DC1B0 = dutyCycle & 1;
  4893  0D29  0870               	movf	setPWMDutyandPeriod@dutyCycle,w
  4894  0D2A  3901               	andlw	1
  4895  0D2B  00F3               	movwf	??_setPWMDutyandPeriod
  4896  0D2C  0EF3               	swapf	??_setPWMDutyandPeriod,f
  4897  0D2D  0813               	movf	19,w	;volatile
  4898  0D2E  0673               	xorwf	??_setPWMDutyandPeriod,w
  4899  0D2F  39EF               	andlw	-17
  4900  0D30  0673               	xorwf	??_setPWMDutyandPeriod,w
  4901  0D31  0093               	movwf	19	;volatile
  4902                           
  4903                           ;PWM.c: 53:     CCP1CONbits.DC1B1 = (dutyCycle & 2) > 1;
  4904  0D32  3002               	movlw	2
  4905  0D33  0570               	andwf	setPWMDutyandPeriod@dutyCycle,w
  4906  0D34  00F3               	movwf	??_setPWMDutyandPeriod
  4907  0D35  3000               	movlw	0
  4908  0D36  0571               	andwf	setPWMDutyandPeriod@dutyCycle+1,w
  4909  0D37  00F4               	movwf	??_setPWMDutyandPeriod+1
  4910  0D38  3000               	movlw	0
  4911  0D39  0274               	subwf	??_setPWMDutyandPeriod+1,w
  4912  0D3A  3002               	movlw	2
  4913  0D3B  1903               	skipnz
  4914  0D3C  0273               	subwf	??_setPWMDutyandPeriod,w
  4915  0D3D  1803               	skipnc
  4916  0D3E  2D40               	goto	u213_21
  4917  0D3F  2D43               	goto	u213_20
  4918  0D40                     u213_21:
  4919  0D40  0025               	movlb	5	; select bank5
  4920  0D41  1693               	bsf	19,5	;volatile
  4921  0D42  2D45               	goto	u214_24
  4922  0D43                     u213_20:
  4923  0D43  0025               	movlb	5	; select bank5
  4924  0D44  1293               	bcf	19,5	;volatile
  4925  0D45                     u214_24:
  4926  0D45                     i1l187:
  4927  0D45  0008               	return
  4928  0D46                     __end_of_setPWMDutyandPeriod:
  4929                           
  4930                           	psect	text21
  4931  03A9                     __ptext21:	
  4932 ;; *************** function _runPotScaling *****************
  4933 ;; Defined at:
  4934 ;;		line 55 in file "Potentiometer.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  minDuty         2   16[BANK0 ] unsigned short 
  4939 ;;  maxDuty         2   14[BANK0 ] unsigned short 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0, pclath, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4949 ;;      Params:         0       0       0       0       0       0
  4950 ;;      Locals:         0       4       0       0       0       0
  4951 ;;      Temps:          0       8       0       0       0       0
  4952 ;;      Totals:         0      12       0       0       0       0
  4953 ;;Total ram usage:       12 bytes
  4954 ;; Hardware stack levels used: 1
  4955 ;; Hardware stack levels required when called: 1
  4956 ;; This function calls:
  4957 ;;		___lldiv
  4958 ;;		___lmul
  4959 ;;		___wmul
  4960 ;; This function is called by:
  4961 ;;		_Tick980Hz
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965  03A9                     _runPotScaling:	
  4966                           ;psect for function _runPotScaling
  4967                           
  4968  03A9                     i1l2462:	
  4969                           ;incstack = 0
  4970                           ; Regs used in _runPotScaling: [wreg+status,2+status,0+pclath+cstack]
  4971                           
  4972                           
  4973                           ;Potentiometer.c: 57:     if(currentState == potControl){
  4974  03A9  0020               	movlb	0	; select bank0
  4975  03AA  036D               	decf	_currentState,w
  4976  03AB  1D03               	btfss	3,2
  4977  03AC  2BAE               	goto	u225_21
  4978  03AD  2BAF               	goto	u225_20
  4979  03AE                     u225_21:
  4980  03AE  2C86               	goto	i1l399
  4981  03AF                     u225_20:
  4982  03AF                     i1l2464:
  4983                           
  4984                           ;Potentiometer.c: 58:         potSetCount++;
  4985  03AF  3001               	movlw	1
  4986  03B0  00A6               	movwf	??_runPotScaling
  4987  03B1  0826               	movf	??_runPotScaling,w
  4988  03B2  07E9               	addwf	_potSetCount,f
  4989                           
  4990                           ;Potentiometer.c: 60:         if(potSetCount == 32){
  4991  03B3  3020               	movlw	32
  4992  03B4  0669               	xorwf	_potSetCount,w
  4993  03B5  1D03               	btfss	3,2
  4994  03B6  2BB8               	goto	u226_21
  4995  03B7  2BB9               	goto	u226_20
  4996  03B8                     u226_21:
  4997  03B8  2C86               	goto	i1l399
  4998  03B9                     u226_20:
  4999  03B9                     i1l2466:
  5000                           
  5001                           ;Potentiometer.c: 62:             setPeriod = ((uint32_t)((filteredFreqPot - 45) * (uint
      +                          32_t)(159u - 15u)) >> 10 ) + 15u;
  5002  03B9  085D               	movf	_filteredFreqPot,w
  5003  03BA  3ED3               	addlw	211
  5004  03BB  00F0               	movwf	___lmul@multiplier
  5005  03BC  30FF               	movlw	255
  5006  03BD  3D5E               	addwfc	_filteredFreqPot+1,w
  5007  03BE  00F1               	movwf	___lmul@multiplier+1
  5008  03BF  01F2               	clrf	___lmul@multiplier+2
  5009  03C0  01F3               	clrf	___lmul@multiplier+3
  5010  03C1  3000               	movlw	0
  5011  03C2  00F7               	movwf	___lmul@multiplicand+3
  5012  03C3  3000               	movlw	0
  5013  03C4  00F6               	movwf	___lmul@multiplicand+2
  5014  03C5  3000               	movlw	0
  5015  03C6  00F5               	movwf	___lmul@multiplicand+1
  5016  03C7  3090               	movlw	144
  5017  03C8  00F4               	movwf	___lmul@multiplicand
  5018  03C9  318D  25A2  3183   	fcall	___lmul
  5019  03CC  0870               	movf	?___lmul,w
  5020  03CD  0020               	movlb	0	; select bank0
  5021  03CE  00A6               	movwf	??_runPotScaling
  5022  03CF  0871               	movf	?___lmul+1,w
  5023  03D0  00A7               	movwf	??_runPotScaling+1
  5024  03D1  0872               	movf	?___lmul+2,w
  5025  03D2  00A8               	movwf	??_runPotScaling+2
  5026  03D3  0873               	movf	?___lmul+3,w
  5027  03D4  00A9               	movwf	??_runPotScaling+3
  5028  03D5  300A               	movlw	10
  5029  03D6                     u227_25:
  5030  03D6  36A9               	lsrf	??_runPotScaling+3,f
  5031  03D7  0CA8               	rrf	??_runPotScaling+2,f
  5032  03D8  0CA7               	rrf	??_runPotScaling+1,f
  5033  03D9  0CA6               	rrf	??_runPotScaling,f
  5034  03DA                     u227_20:
  5035  03DA  0B89               	decfsz	9,f
  5036  03DB  2BD6               	goto	u227_25
  5037  03DC  0826               	movf	??_runPotScaling,w
  5038  03DD  3E0F               	addlw	15
  5039  03DE  00AA               	movwf	??_runPotScaling+4
  5040  03DF  082A               	movf	??_runPotScaling+4,w
  5041  03E0  00EF               	movwf	_setPeriod
  5042                           
  5043                           ;Potentiometer.c: 64:             setDuty = (uint32_t)((uint32_t)((filteredDutyPot-45) *
      +                           (uint32_t)setPeriod )) >> 8;
  5044  03E1  0021               	movlb	1	; select bank1
  5045  03E2  0840               	movf	_filteredDutyPot^(0+128),w
  5046  03E3  3ED3               	addlw	211
  5047  03E4  00F0               	movwf	___lmul@multiplier
  5048  03E5  30FF               	movlw	255
  5049  03E6  3D41               	addwfc	(_filteredDutyPot+1)^(0+128),w
  5050  03E7  00F1               	movwf	___lmul@multiplier+1
  5051  03E8  01F2               	clrf	___lmul@multiplier+2
  5052  03E9  01F3               	clrf	___lmul@multiplier+3
  5053  03EA  0020               	movlb	0	; select bank0
  5054  03EB  086F               	movf	_setPeriod,w
  5055  03EC  00A6               	movwf	??_runPotScaling
  5056  03ED  01A7               	clrf	??_runPotScaling+1
  5057  03EE  01A8               	clrf	??_runPotScaling+2
  5058  03EF  01A9               	clrf	??_runPotScaling+3
  5059  03F0  0829               	movf	??_runPotScaling+3,w
  5060  03F1  00F7               	movwf	___lmul@multiplicand+3
  5061  03F2  0828               	movf	??_runPotScaling+2,w
  5062  03F3  00F6               	movwf	___lmul@multiplicand+2
  5063  03F4  0827               	movf	??_runPotScaling+1,w
  5064  03F5  00F5               	movwf	___lmul@multiplicand+1
  5065  03F6  0826               	movf	??_runPotScaling,w
  5066  03F7  00F4               	movwf	___lmul@multiplicand
  5067  03F8  318D  25A2  3183   	fcall	___lmul
  5068  03FB  0870               	movf	?___lmul,w
  5069  03FC  0020               	movlb	0	; select bank0
  5070  03FD  00AA               	movwf	??_runPotScaling+4
  5071  03FE  0871               	movf	?___lmul+1,w
  5072  03FF  00AB               	movwf	??_runPotScaling+5
  5073  0400  0872               	movf	?___lmul+2,w
  5074  0401  00AC               	movwf	??_runPotScaling+6
  5075  0402  0873               	movf	?___lmul+3,w
  5076  0403  00AD               	movwf	??_runPotScaling+7
  5077  0404  3008               	movlw	8
  5078  0405                     u228_25:
  5079  0405  36AD               	lsrf	??_runPotScaling+7,f
  5080  0406  0CAC               	rrf	??_runPotScaling+6,f
  5081  0407  0CAB               	rrf	??_runPotScaling+5,f
  5082  0408  0CAA               	rrf	??_runPotScaling+4,f
  5083  0409                     u228_20:
  5084  0409  0B89               	decfsz	9,f
  5085  040A  2C05               	goto	u228_25
  5086  040B  082B               	movf	??_runPotScaling+5,w
  5087  040C  00E6               	movwf	_setDuty+1
  5088  040D  082A               	movf	??_runPotScaling+4,w
  5089  040E  00E5               	movwf	_setDuty
  5090                           
  5091                           ;Potentiometer.c: 67:             uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           90) * setPeriod)) / 25);
  5092  040F  3000               	movlw	0
  5093  0410  00F9               	movwf	___lldiv@divisor+3
  5094  0411  3000               	movlw	0
  5095  0412  00F8               	movwf	___lldiv@divisor+2
  5096  0413  3000               	movlw	0
  5097  0414  00F7               	movwf	___lldiv@divisor+1
  5098  0415  3019               	movlw	25
  5099  0416  00F6               	movwf	___lldiv@divisor
  5100  0417  305A               	movlw	90
  5101  0418  00F2               	movwf	___wmul@multiplicand
  5102  0419  3000               	movlw	0
  5103  041A  00F3               	movwf	___wmul@multiplicand+1
  5104  041B  086F               	movf	_setPeriod,w
  5105  041C  00A6               	movwf	??_runPotScaling
  5106  041D  01A7               	clrf	??_runPotScaling+1
  5107  041E  0826               	movf	??_runPotScaling,w
  5108  041F  00F0               	movwf	___wmul@multiplier
  5109  0420  0827               	movf	??_runPotScaling+1,w
  5110  0421  00F1               	movwf	___wmul@multiplier+1
  5111  0422  318C  24DC  3183   	fcall	___wmul
  5112  0425  0870               	movf	?___wmul,w
  5113  0426  0020               	movlb	0	; select bank0
  5114  0427  00A8               	movwf	??_runPotScaling+2
  5115  0428  0871               	movf	?___wmul+1,w
  5116  0429  00A9               	movwf	??_runPotScaling+3
  5117  042A  01AA               	clrf	??_runPotScaling+4
  5118  042B  01AB               	clrf	??_runPotScaling+5
  5119  042C  082B               	movf	??_runPotScaling+5,w
  5120  042D  00FD               	movwf	___lldiv@dividend+3
  5121  042E  082A               	movf	??_runPotScaling+4,w
  5122  042F  00FC               	movwf	___lldiv@dividend+2
  5123  0430  0829               	movf	??_runPotScaling+3,w
  5124  0431  00FB               	movwf	___lldiv@dividend+1
  5125  0432  0828               	movf	??_runPotScaling+2,w
  5126  0433  00FA               	movwf	___lldiv@dividend
  5127  0434  318E  26EF  3183   	fcall	___lldiv
  5128  0437  0877               	movf	?___lldiv+1,w
  5129  0438  0020               	movlb	0	; select bank0
  5130  0439  00AF               	movwf	runPotScaling@maxDuty+1
  5131  043A  0876               	movf	?___lldiv,w
  5132  043B  00AE               	movwf	runPotScaling@maxDuty
  5133                           
  5134                           ;Potentiometer.c: 68:             uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t)
      +                           10) * setPeriod)) / 25);
  5135  043C  3000               	movlw	0
  5136  043D  00F9               	movwf	___lldiv@divisor+3
  5137  043E  3000               	movlw	0
  5138  043F  00F8               	movwf	___lldiv@divisor+2
  5139  0440  3000               	movlw	0
  5140  0441  00F7               	movwf	___lldiv@divisor+1
  5141  0442  3019               	movlw	25
  5142  0443  00F6               	movwf	___lldiv@divisor
  5143  0444  300A               	movlw	10
  5144  0445  00F2               	movwf	___wmul@multiplicand
  5145  0446  3000               	movlw	0
  5146  0447  00F3               	movwf	___wmul@multiplicand+1
  5147  0448  086F               	movf	_setPeriod,w
  5148  0449  00A6               	movwf	??_runPotScaling
  5149  044A  01A7               	clrf	??_runPotScaling+1
  5150  044B  0826               	movf	??_runPotScaling,w
  5151  044C  00F0               	movwf	___wmul@multiplier
  5152  044D  0827               	movf	??_runPotScaling+1,w
  5153  044E  00F1               	movwf	___wmul@multiplier+1
  5154  044F  318C  24DC  3183   	fcall	___wmul
  5155  0452  0870               	movf	?___wmul,w
  5156  0453  0020               	movlb	0	; select bank0
  5157  0454  00A8               	movwf	??_runPotScaling+2
  5158  0455  0871               	movf	?___wmul+1,w
  5159  0456  00A9               	movwf	??_runPotScaling+3
  5160  0457  01AA               	clrf	??_runPotScaling+4
  5161  0458  01AB               	clrf	??_runPotScaling+5
  5162  0459  082B               	movf	??_runPotScaling+5,w
  5163  045A  00FD               	movwf	___lldiv@dividend+3
  5164  045B  082A               	movf	??_runPotScaling+4,w
  5165  045C  00FC               	movwf	___lldiv@dividend+2
  5166  045D  0829               	movf	??_runPotScaling+3,w
  5167  045E  00FB               	movwf	___lldiv@dividend+1
  5168  045F  0828               	movf	??_runPotScaling+2,w
  5169  0460  00FA               	movwf	___lldiv@dividend
  5170  0461  318E  26EF  3183   	fcall	___lldiv
  5171  0464  0877               	movf	?___lldiv+1,w
  5172  0465  0020               	movlb	0	; select bank0
  5173  0466  00B1               	movwf	runPotScaling@minDuty+1
  5174  0467  0876               	movf	?___lldiv,w
  5175  0468  00B0               	movwf	runPotScaling@minDuty
  5176  0469                     i1l2468:
  5177                           
  5178                           ;Potentiometer.c: 69:             if(setDuty > maxDuty) setDuty = maxDuty;
  5179  0469  0866               	movf	_setDuty+1,w
  5180  046A  022F               	subwf	runPotScaling@maxDuty+1,w
  5181  046B  1D03               	skipz
  5182  046C  2C6F               	goto	u229_25
  5183  046D  0865               	movf	_setDuty,w
  5184  046E  022E               	subwf	runPotScaling@maxDuty,w
  5185  046F                     u229_25:
  5186  046F  1803               	skipnc
  5187  0470  2C72               	goto	u229_21
  5188  0471  2C73               	goto	u229_20
  5189  0472                     u229_21:
  5190  0472  2C77               	goto	i1l397
  5191  0473                     u229_20:
  5192  0473                     i1l2470:
  5193  0473  082F               	movf	runPotScaling@maxDuty+1,w
  5194  0474  00E6               	movwf	_setDuty+1
  5195  0475  082E               	movf	runPotScaling@maxDuty,w
  5196  0476  00E5               	movwf	_setDuty
  5197  0477                     i1l397:
  5198                           
  5199                           ;Potentiometer.c: 70:             if(setDuty < minDuty) setDuty = minDuty;
  5200  0477  0831               	movf	runPotScaling@minDuty+1,w
  5201  0478  0266               	subwf	_setDuty+1,w
  5202  0479  1D03               	skipz
  5203  047A  2C7D               	goto	u230_25
  5204  047B  0830               	movf	runPotScaling@minDuty,w
  5205  047C  0265               	subwf	_setDuty,w
  5206  047D                     u230_25:
  5207  047D  1803               	skipnc
  5208  047E  2C80               	goto	u230_21
  5209  047F  2C81               	goto	u230_20
  5210  0480                     u230_21:
  5211  0480  2C85               	goto	i1l2474
  5212  0481                     u230_20:
  5213  0481                     i1l2472:
  5214  0481  0831               	movf	runPotScaling@minDuty+1,w
  5215  0482  00E6               	movwf	_setDuty+1
  5216  0483  0830               	movf	runPotScaling@minDuty,w
  5217  0484  00E5               	movwf	_setDuty
  5218  0485                     i1l2474:
  5219                           
  5220                           ;Potentiometer.c: 72:             potSetCount = 0;
  5221  0485  01E9               	clrf	_potSetCount
  5222  0486                     i1l399:
  5223  0486  0008               	return
  5224  0487                     __end_of_runPotScaling:
  5225                           
  5226                           	psect	text22
  5227  0C5A                     __ptext22:	
  5228 ;; *************** function _readILCurrentADCRaw *****************
  5229 ;; Defined at:
  5230 ;;		line 110 in file "ADC.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  2    0[COMMON] unsigned short 
  5237 ;; Registers used:
  5238 ;;		wreg
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5244 ;;      Params:         2       0       0       0       0       0
  5245 ;;      Locals:         0       0       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0
  5247 ;;      Totals:         2       0       0       0       0       0
  5248 ;;Total ram usage:        2 bytes
  5249 ;; Hardware stack levels used: 1
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_Tick980Hz
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257  0C5A                     _readILCurrentADCRaw:	
  5258                           ;psect for function _readILCurrentADCRaw
  5259                           
  5260  0C5A                     i1l2540:	
  5261                           ;incstack = 0
  5262                           ; Regs used in _readILCurrentADCRaw: [wreg]
  5263                           
  5264                           
  5265                           ;ADC.c: 112:     if(~ADCON0bits.GO_nDONE){
  5266  0C5A  0021               	movlb	1	; select bank1
  5267  0C5B  081D               	movf	29,w	;volatile
  5268  0C5C                     i1l2542:
  5269                           
  5270                           ;ADC.c: 113:         ADCON0bits.GO_nDONE = 1;
  5271  0C5C  149D               	bsf	29,1	;volatile
  5272  0C5D                     i1l276:	
  5273                           ;ADC.c: 114:         while(ADCON0bits.GO_nDONE);
  5274                           
  5275  0C5D  189D               	btfsc	29,1	;volatile
  5276  0C5E  2C60               	goto	u237_21
  5277  0C5F  2C61               	goto	u237_20
  5278  0C60                     u237_21:
  5279  0C60  2C5D               	goto	i1l276
  5280  0C61                     u237_20:
  5281  0C61                     i1l2544:
  5282                           
  5283                           ;ADC.c: 115:         return ((ADRESH<<8)+ADRESL);
  5284  0C61  081C               	movf	28,w	;volatile
  5285  0C62  00F1               	movwf	?_readILCurrentADCRaw+1
  5286  0C63  081B               	movf	27,w	;volatile
  5287  0C64  00F0               	movwf	?_readILCurrentADCRaw
  5288  0C65                     i1l279:
  5289  0C65  0008               	return
  5290  0C66                     __end_of_readILCurrentADCRaw:
  5291                           
  5292                           	psect	text23
  5293  074C                     __ptext23:	
  5294 ;; *************** function _readFilteredVout *****************
  5295 ;; Defined at:
  5296 ;;		line 33 in file "Controller.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  i               1    8[BANK0 ] unsigned char 
  5301 ;;  i               1    9[BANK0 ] unsigned char 
  5302 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  2   11[COMMON] unsigned short 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5312 ;;      Params:         2       0       0       0       0       0
  5313 ;;      Locals:         0       6       0       0       0       0
  5314 ;;      Temps:          0       4       0       0       0       0
  5315 ;;      Totals:         2      10       0       0       0       0
  5316 ;;Total ram usage:       12 bytes
  5317 ;; Hardware stack levels used: 1
  5318 ;; Hardware stack levels required when called: 1
  5319 ;; This function calls:
  5320 ;;		_readADCRaw
  5321 ;; This function is called by:
  5322 ;;		_Tick980Hz
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326  074C                     _readFilteredVout:	
  5327                           ;psect for function _readFilteredVout
  5328                           
  5329  074C                     i1l2430:	
  5330                           ;incstack = 0
  5331                           ; Regs used in _readFilteredVout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332                           
  5333                           
  5334                           ;Controller.c: 34:     for(uint8_t i=0; i<16 -1; i++) voutFIFO[i] = voutFIFO[i+1];
  5335  074C  0020               	movlb	0	; select bank0
  5336  074D  01A9               	clrf	readFilteredVout@i
  5337  074E                     i1l2436:
  5338  074E  3529               	lslf	readFilteredVout@i,w
  5339  074F  3EC2               	addlw	(low ((_voutFIFO| (0+256)+2)))& (0+255)
  5340  0750  0086               	movwf	6
  5341  0751  3001               	movlw	1	; select bank3/4
  5342  0752  0087               	movwf	7
  5343  0753  3529               	lslf	readFilteredVout@i,w
  5344  0754  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5345  0755  0084               	movwf	4
  5346  0756  3001               	movlw	1	; select bank3/4
  5347  0757  0085               	movwf	5
  5348  0758  3F40               	moviw [0]fsr1
  5349  0759  3F80               	movwi [0]fsr0
  5350  075A  3F41               	moviw [1]fsr1
  5351  075B  3F81               	movwi [1]fsr0
  5352  075C                     i1l2438:
  5353  075C  3001               	movlw	1
  5354  075D  00A0               	movwf	??_readFilteredVout
  5355  075E  0820               	movf	??_readFilteredVout,w
  5356  075F  07A9               	addwf	readFilteredVout@i,f
  5357  0760                     i1l2440:
  5358  0760  300F               	movlw	15
  5359  0761  0229               	subwf	readFilteredVout@i,w
  5360  0762  1C03               	skipc
  5361  0763  2F65               	goto	u222_21
  5362  0764  2F66               	goto	u222_20
  5363  0765                     u222_21:
  5364  0765  2F4E               	goto	i1l2436
  5365  0766                     u222_20:
  5366  0766                     i1l2442:
  5367                           
  5368                           ;Controller.c: 35:     voutFIFO[16 -1] = readADCRaw(pinRA4);
  5369  0766  3004               	movlw	4
  5370  0767  3186  2628  3187   	fcall	_readADCRaw
  5371  076A  0871               	movf	?_readADCRaw+1,w
  5372  076B  0023               	movlb	3	; select bank3
  5373  076C  00DF               	movwf	((_voutFIFO+1)^(0+384)+30)
  5374  076D  0870               	movf	?_readADCRaw,w
  5375  076E  00DE               	movwf	(_voutFIFO^(0+384)+30)
  5376  076F                     i1l2444:
  5377                           
  5378                           ;Controller.c: 36:     uint32_t sumOfSamples = 0;
  5379  076F  3000               	movlw	0
  5380  0770  0020               	movlb	0	; select bank0
  5381  0771  00A7               	movwf	readFilteredVout@sumOfSamples+3
  5382  0772  3000               	movlw	0
  5383  0773  00A6               	movwf	readFilteredVout@sumOfSamples+2
  5384  0774  3000               	movlw	0
  5385  0775  00A5               	movwf	readFilteredVout@sumOfSamples+1
  5386  0776  3000               	movlw	0
  5387  0777  00A4               	movwf	readFilteredVout@sumOfSamples
  5388  0778                     i1l2446:
  5389                           
  5390                           ;Controller.c: 37:             for(uint8_t i=0; i<16; i++) sumOfSamples += voutFIFO[i];
  5391  0778  01A8               	clrf	readFilteredVout@i_894
  5392  0779                     i1l2452:
  5393  0779  3528               	lslf	readFilteredVout@i_894,w
  5394  077A  3EC0               	addlw	(low (_voutFIFO| (0+256)))& (0+255)
  5395  077B  0086               	movwf	6
  5396  077C  3001               	movlw	1	; select bank3/4
  5397  077D  0087               	movwf	7
  5398  077E  3F40               	moviw [0]fsr1
  5399  077F  00A0               	movwf	??_readFilteredVout
  5400  0780  3F41               	moviw [1]fsr1
  5401  0781  00A1               	movwf	??_readFilteredVout+1
  5402  0782  0820               	movf	??_readFilteredVout,w
  5403  0783  07A4               	addwf	readFilteredVout@sumOfSamples,f
  5404  0784  0821               	movf	??_readFilteredVout+1,w
  5405  0785  3DA5               	addwfc	readFilteredVout@sumOfSamples+1,f
  5406  0786  3000               	movlw	0
  5407  0787  3DA6               	addwfc	readFilteredVout@sumOfSamples+2,f
  5408  0788  3DA7               	addwfc	readFilteredVout@sumOfSamples+3,f
  5409  0789                     i1l2454:
  5410  0789  3001               	movlw	1
  5411  078A  00A0               	movwf	??_readFilteredVout
  5412  078B  0820               	movf	??_readFilteredVout,w
  5413  078C  07A8               	addwf	readFilteredVout@i_894,f
  5414  078D                     i1l2456:
  5415  078D  3010               	movlw	16
  5416  078E  0228               	subwf	readFilteredVout@i_894,w
  5417  078F  1C03               	skipc
  5418  0790  2F92               	goto	u223_21
  5419  0791  2F93               	goto	u223_20
  5420  0792                     u223_21:
  5421  0792  2F79               	goto	i1l2452
  5422  0793                     u223_20:
  5423  0793                     i1l2458:
  5424                           
  5425                           ;Controller.c: 39:     return (sumOfSamples >> 4);
  5426  0793  0824               	movf	readFilteredVout@sumOfSamples,w
  5427  0794  00A0               	movwf	??_readFilteredVout
  5428  0795  0825               	movf	readFilteredVout@sumOfSamples+1,w
  5429  0796  00A1               	movwf	??_readFilteredVout+1
  5430  0797  0826               	movf	readFilteredVout@sumOfSamples+2,w
  5431  0798  00A2               	movwf	??_readFilteredVout+2
  5432  0799  0827               	movf	readFilteredVout@sumOfSamples+3,w
  5433  079A  00A3               	movwf	??_readFilteredVout+3
  5434  079B  3004               	movlw	4
  5435  079C                     u224_25:
  5436  079C  36A3               	lsrf	??_readFilteredVout+3,f
  5437  079D  0CA2               	rrf	??_readFilteredVout+2,f
  5438  079E  0CA1               	rrf	??_readFilteredVout+1,f
  5439  079F  0CA0               	rrf	??_readFilteredVout,f
  5440  07A0                     u224_20:
  5441  07A0  0B89               	decfsz	9,f
  5442  07A1  2F9C               	goto	u224_25
  5443  07A2  0821               	movf	??_readFilteredVout+1,w
  5444  07A3  00FC               	movwf	?_readFilteredVout+1
  5445  07A4  0820               	movf	??_readFilteredVout,w
  5446  07A5  00FB               	movwf	?_readFilteredVout
  5447  07A6                     i1l461:
  5448  07A6  0008               	return
  5449  07A7                     __end_of_readFilteredVout:
  5450                           
  5451                           	psect	text24
  5452  07A7                     __ptext24:	
  5453 ;; *************** function _readFilteredIL *****************
  5454 ;; Defined at:
  5455 ;;		line 55 in file "CurrentSensor.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  i               1   10[COMMON] unsigned char 
  5460 ;;  i               1   11[COMMON] unsigned char 
  5461 ;;  sumOfSamples    4    6[COMMON] unsigned long 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  2    0[COMMON] unsigned short 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5471 ;;      Params:         2       0       0       0       0       0
  5472 ;;      Locals:         6       0       0       0       0       0
  5473 ;;      Temps:          4       0       0       0       0       0
  5474 ;;      Totals:        12       0       0       0       0       0
  5475 ;;Total ram usage:       12 bytes
  5476 ;; Hardware stack levels used: 1
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_Tick980Hz
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484  07A7                     _readFilteredIL:	
  5485                           ;psect for function _readFilteredIL
  5486                           
  5487  07A7                     i1l2400:	
  5488                           ;incstack = 0
  5489                           ; Regs used in _readFilteredIL: [wreg-fsr1h+status,2+status,0]
  5490                           
  5491                           
  5492                           ;CurrentSensor.c: 56:     for(uint8_t i=0; i<16 -1; i++) currentILFIFO[i] = currentILFIF
      +                          O[i+1];
  5493  07A7  01FB               	clrf	readFilteredIL@i
  5494  07A8                     i1l2406:
  5495  07A8  357B               	lslf	readFilteredIL@i,w
  5496  07A9  3E22               	addlw	(low ((_currentILFIFO| (0+256)+2)))& (0+255)
  5497  07AA  0086               	movwf	6
  5498  07AB  3001               	movlw	1	; select bank2/3
  5499  07AC  0087               	movwf	7
  5500  07AD  357B               	lslf	readFilteredIL@i,w
  5501  07AE  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5502  07AF  0084               	movwf	4
  5503  07B0  3001               	movlw	1	; select bank2/3
  5504  07B1  0085               	movwf	5
  5505  07B2  3F40               	moviw [0]fsr1
  5506  07B3  3F80               	movwi [0]fsr0
  5507  07B4  3F41               	moviw [1]fsr1
  5508  07B5  3F81               	movwi [1]fsr0
  5509  07B6                     i1l2408:
  5510  07B6  3001               	movlw	1
  5511  07B7  00F2               	movwf	??_readFilteredIL
  5512  07B8  0872               	movf	??_readFilteredIL,w
  5513  07B9  07FB               	addwf	readFilteredIL@i,f
  5514  07BA                     i1l2410:
  5515  07BA  300F               	movlw	15
  5516  07BB  027B               	subwf	readFilteredIL@i,w
  5517  07BC  1C03               	skipc
  5518  07BD  2FBF               	goto	u219_21
  5519  07BE  2FC0               	goto	u219_20
  5520  07BF                     u219_21:
  5521  07BF  2FA8               	goto	i1l2406
  5522  07C0                     u219_20:
  5523  07C0                     i1l2412:
  5524                           
  5525                           ;CurrentSensor.c: 57:     currentILFIFO[16 -1] = latestIL;
  5526  07C0  0020               	movlb	0	; select bank0
  5527  07C1  0864               	movf	_latestIL+1,w	;volatile
  5528  07C2  0022               	movlb	2	; select bank2
  5529  07C3  00BF               	movwf	((_currentILFIFO+1)^(0+256)+30)
  5530  07C4  0020               	movlb	0	; select bank0
  5531  07C5  0863               	movf	_latestIL,w	;volatile
  5532  07C6  0022               	movlb	2	; select bank2
  5533  07C7  00BE               	movwf	(_currentILFIFO^(0+256)+30)
  5534                           
  5535                           ;CurrentSensor.c: 58:     uint32_t sumOfSamples = 0;
  5536  07C8  3000               	movlw	0
  5537  07C9  00F9               	movwf	readFilteredIL@sumOfSamples+3
  5538  07CA  3000               	movlw	0
  5539  07CB  00F8               	movwf	readFilteredIL@sumOfSamples+2
  5540  07CC  3000               	movlw	0
  5541  07CD  00F7               	movwf	readFilteredIL@sumOfSamples+1
  5542  07CE  3000               	movlw	0
  5543  07CF  00F6               	movwf	readFilteredIL@sumOfSamples
  5544  07D0                     i1l2414:
  5545                           
  5546                           ;CurrentSensor.c: 59:     for(uint8_t i=0; i<16; i++) sumOfSamples += currentILFIFO[i];
  5547  07D0  01FA               	clrf	readFilteredIL@i_977
  5548  07D1                     i1l2420:
  5549  07D1  357A               	lslf	readFilteredIL@i_977,w
  5550  07D2  3E20               	addlw	(low (_currentILFIFO| (0+256)))& (0+255)
  5551  07D3  0086               	movwf	6
  5552  07D4  3001               	movlw	1	; select bank2/3
  5553  07D5  0087               	movwf	7
  5554  07D6  3F40               	moviw [0]fsr1
  5555  07D7  00F2               	movwf	??_readFilteredIL
  5556  07D8  3F41               	moviw [1]fsr1
  5557  07D9  00F3               	movwf	??_readFilteredIL+1
  5558  07DA  0872               	movf	??_readFilteredIL,w
  5559  07DB  07F6               	addwf	readFilteredIL@sumOfSamples,f
  5560  07DC  0873               	movf	??_readFilteredIL+1,w
  5561  07DD  3DF7               	addwfc	readFilteredIL@sumOfSamples+1,f
  5562  07DE  3000               	movlw	0
  5563  07DF  3DF8               	addwfc	readFilteredIL@sumOfSamples+2,f
  5564  07E0  3DF9               	addwfc	readFilteredIL@sumOfSamples+3,f
  5565  07E1                     i1l2422:
  5566  07E1  3001               	movlw	1
  5567  07E2  00F2               	movwf	??_readFilteredIL
  5568  07E3  0872               	movf	??_readFilteredIL,w
  5569  07E4  07FA               	addwf	readFilteredIL@i_977,f
  5570  07E5                     i1l2424:
  5571  07E5  3010               	movlw	16
  5572  07E6  027A               	subwf	readFilteredIL@i_977,w
  5573  07E7  1C03               	skipc
  5574  07E8  2FEA               	goto	u220_21
  5575  07E9  2FEB               	goto	u220_20
  5576  07EA                     u220_21:
  5577  07EA  2FD1               	goto	i1l2420
  5578  07EB                     u220_20:
  5579  07EB                     i1l2426:
  5580                           
  5581                           ;CurrentSensor.c: 61:     return (sumOfSamples >> 4);
  5582  07EB  0876               	movf	readFilteredIL@sumOfSamples,w
  5583  07EC  00F2               	movwf	??_readFilteredIL
  5584  07ED  0877               	movf	readFilteredIL@sumOfSamples+1,w
  5585  07EE  00F3               	movwf	??_readFilteredIL+1
  5586  07EF  0878               	movf	readFilteredIL@sumOfSamples+2,w
  5587  07F0  00F4               	movwf	??_readFilteredIL+2
  5588  07F1  0879               	movf	readFilteredIL@sumOfSamples+3,w
  5589  07F2  00F5               	movwf	??_readFilteredIL+3
  5590  07F3  3004               	movlw	4
  5591  07F4                     u221_25:
  5592  07F4  36F5               	lsrf	??_readFilteredIL+3,f
  5593  07F5  0CF4               	rrf	??_readFilteredIL+2,f
  5594  07F6  0CF3               	rrf	??_readFilteredIL+1,f
  5595  07F7  0CF2               	rrf	??_readFilteredIL,f
  5596  07F8                     u221_20:
  5597  07F8  0B89               	decfsz	9,f
  5598  07F9  2FF4               	goto	u221_25
  5599  07FA  0873               	movf	??_readFilteredIL+1,w
  5600  07FB  00F1               	movwf	?_readFilteredIL+1
  5601  07FC  0872               	movf	??_readFilteredIL,w
  5602  07FD  00F0               	movwf	?_readFilteredIL
  5603  07FE                     i1l547:
  5604  07FE  0008               	return
  5605  07FF                     __end_of_readFilteredIL:
  5606                           
  5607                           	psect	text25
  5608  0FA5                     __ptext25:	
  5609 ;; *************** function _readFilteredFreqPot *****************
  5610 ;; Defined at:
  5611 ;;		line 39 in file "Potentiometer.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  i               1    8[BANK0 ] unsigned char 
  5616 ;;  i               1    9[BANK0 ] unsigned char 
  5617 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2   11[COMMON] unsigned short 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5627 ;;      Params:         2       0       0       0       0       0
  5628 ;;      Locals:         0       6       0       0       0       0
  5629 ;;      Temps:          0       4       0       0       0       0
  5630 ;;      Totals:         2      10       0       0       0       0
  5631 ;;Total ram usage:       12 bytes
  5632 ;; Hardware stack levels used: 1
  5633 ;; Hardware stack levels required when called: 1
  5634 ;; This function calls:
  5635 ;;		_readADCRaw
  5636 ;; This function is called by:
  5637 ;;		_Tick980Hz
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641  0FA5                     _readFilteredFreqPot:	
  5642                           ;psect for function _readFilteredFreqPot
  5643                           
  5644  0FA5                     i1l2508:	
  5645                           ;incstack = 0
  5646                           ; Regs used in _readFilteredFreqPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5647                           
  5648                           
  5649                           ;Potentiometer.c: 40:     for(uint8_t i=0; i<16 -1; i++) freqPotFIFO[i] = freqPotFIFO[i+
      +                          1];
  5650  0FA5  0020               	movlb	0	; select bank0
  5651  0FA6  01A9               	clrf	readFilteredFreqPot@i
  5652  0FA7                     i1l2514:
  5653  0FA7  3529               	lslf	readFilteredFreqPot@i,w
  5654  0FA8  3EA2               	addlw	(low ((_freqPotFIFO| (0+256)+2)))& (0+255)
  5655  0FA9  0086               	movwf	6
  5656  0FAA  3001               	movlw	1	; select bank3/4
  5657  0FAB  0087               	movwf	7
  5658  0FAC  3529               	lslf	readFilteredFreqPot@i,w
  5659  0FAD  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5660  0FAE  0084               	movwf	4
  5661  0FAF  3001               	movlw	1	; select bank3/4
  5662  0FB0  0085               	movwf	5
  5663  0FB1  3F40               	moviw [0]fsr1
  5664  0FB2  3F80               	movwi [0]fsr0
  5665  0FB3  3F41               	moviw [1]fsr1
  5666  0FB4  3F81               	movwi [1]fsr0
  5667  0FB5                     i1l2516:
  5668  0FB5  3001               	movlw	1
  5669  0FB6  00A0               	movwf	??_readFilteredFreqPot
  5670  0FB7  0820               	movf	??_readFilteredFreqPot,w
  5671  0FB8  07A9               	addwf	readFilteredFreqPot@i,f
  5672  0FB9                     i1l2518:
  5673  0FB9  300F               	movlw	15
  5674  0FBA  0229               	subwf	readFilteredFreqPot@i,w
  5675  0FBB  1C03               	skipc
  5676  0FBC  2FBE               	goto	u234_21
  5677  0FBD  2FBF               	goto	u234_20
  5678  0FBE                     u234_21:
  5679  0FBE  2FA7               	goto	i1l2514
  5680  0FBF                     u234_20:
  5681  0FBF                     i1l2520:
  5682                           
  5683                           ;Potentiometer.c: 41:     freqPotFIFO[16 -1] = readADCRaw(pinRB2);
  5684  0FBF  300A               	movlw	10
  5685  0FC0  3186  2628  318F   	fcall	_readADCRaw
  5686  0FC3  0871               	movf	?_readADCRaw+1,w
  5687  0FC4  0023               	movlb	3	; select bank3
  5688  0FC5  00BF               	movwf	((_freqPotFIFO+1)^(0+384)+30)
  5689  0FC6  0870               	movf	?_readADCRaw,w
  5690  0FC7  00BE               	movwf	(_freqPotFIFO^(0+384)+30)
  5691  0FC8                     i1l2522:
  5692                           
  5693                           ;Potentiometer.c: 42:     uint32_t sumOfSamples = 0;
  5694  0FC8  3000               	movlw	0
  5695  0FC9  0020               	movlb	0	; select bank0
  5696  0FCA  00A7               	movwf	readFilteredFreqPot@sumOfSamples+3
  5697  0FCB  3000               	movlw	0
  5698  0FCC  00A6               	movwf	readFilteredFreqPot@sumOfSamples+2
  5699  0FCD  3000               	movlw	0
  5700  0FCE  00A5               	movwf	readFilteredFreqPot@sumOfSamples+1
  5701  0FCF  3000               	movlw	0
  5702  0FD0  00A4               	movwf	readFilteredFreqPot@sumOfSamples
  5703  0FD1                     i1l2524:
  5704                           
  5705                           ;Potentiometer.c: 43:     for(uint8_t i=0; i<16; i++) sumOfSamples += freqPotFIFO[i];
  5706  0FD1  01A8               	clrf	readFilteredFreqPot@i_801
  5707  0FD2                     i1l2530:
  5708  0FD2  3528               	lslf	readFilteredFreqPot@i_801,w
  5709  0FD3  3EA0               	addlw	(low (_freqPotFIFO| (0+256)))& (0+255)
  5710  0FD4  0086               	movwf	6
  5711  0FD5  3001               	movlw	1	; select bank3/4
  5712  0FD6  0087               	movwf	7
  5713  0FD7  3F40               	moviw [0]fsr1
  5714  0FD8  00A0               	movwf	??_readFilteredFreqPot
  5715  0FD9  3F41               	moviw [1]fsr1
  5716  0FDA  00A1               	movwf	??_readFilteredFreqPot+1
  5717  0FDB  0820               	movf	??_readFilteredFreqPot,w
  5718  0FDC  07A4               	addwf	readFilteredFreqPot@sumOfSamples,f
  5719  0FDD  0821               	movf	??_readFilteredFreqPot+1,w
  5720  0FDE  3DA5               	addwfc	readFilteredFreqPot@sumOfSamples+1,f
  5721  0FDF  3000               	movlw	0
  5722  0FE0  3DA6               	addwfc	readFilteredFreqPot@sumOfSamples+2,f
  5723  0FE1  3DA7               	addwfc	readFilteredFreqPot@sumOfSamples+3,f
  5724  0FE2                     i1l2532:
  5725  0FE2  3001               	movlw	1
  5726  0FE3  00A0               	movwf	??_readFilteredFreqPot
  5727  0FE4  0820               	movf	??_readFilteredFreqPot,w
  5728  0FE5  07A8               	addwf	readFilteredFreqPot@i_801,f
  5729  0FE6                     i1l2534:
  5730  0FE6  3010               	movlw	16
  5731  0FE7  0228               	subwf	readFilteredFreqPot@i_801,w
  5732  0FE8  1C03               	skipc
  5733  0FE9  2FEB               	goto	u235_21
  5734  0FEA  2FEC               	goto	u235_20
  5735  0FEB                     u235_21:
  5736  0FEB  2FD2               	goto	i1l2530
  5737  0FEC                     u235_20:
  5738  0FEC                     i1l2536:
  5739                           
  5740                           ;Potentiometer.c: 45:     return (sumOfSamples >> 4);
  5741  0FEC  0824               	movf	readFilteredFreqPot@sumOfSamples,w
  5742  0FED  00A0               	movwf	??_readFilteredFreqPot
  5743  0FEE  0825               	movf	readFilteredFreqPot@sumOfSamples+1,w
  5744  0FEF  00A1               	movwf	??_readFilteredFreqPot+1
  5745  0FF0  0826               	movf	readFilteredFreqPot@sumOfSamples+2,w
  5746  0FF1  00A2               	movwf	??_readFilteredFreqPot+2
  5747  0FF2  0827               	movf	readFilteredFreqPot@sumOfSamples+3,w
  5748  0FF3  00A3               	movwf	??_readFilteredFreqPot+3
  5749  0FF4  3004               	movlw	4
  5750  0FF5                     u236_25:
  5751  0FF5  36A3               	lsrf	??_readFilteredFreqPot+3,f
  5752  0FF6  0CA2               	rrf	??_readFilteredFreqPot+2,f
  5753  0FF7  0CA1               	rrf	??_readFilteredFreqPot+1,f
  5754  0FF8  0CA0               	rrf	??_readFilteredFreqPot,f
  5755  0FF9                     u236_20:
  5756  0FF9  0B89               	decfsz	9,f
  5757  0FFA  2FF5               	goto	u236_25
  5758  0FFB  0821               	movf	??_readFilteredFreqPot+1,w
  5759  0FFC  00FC               	movwf	?_readFilteredFreqPot+1
  5760  0FFD  0820               	movf	??_readFilteredFreqPot,w
  5761  0FFE  00FB               	movwf	?_readFilteredFreqPot
  5762  0FFF                     i1l392:
  5763  0FFF  0008               	return
  5764  1000                     __end_of_readFilteredFreqPot:
  5765                           
  5766                           	psect	text26
  5767  0F4A                     __ptext26:	
  5768 ;; *************** function _readFilteredDutyPot *****************
  5769 ;; Defined at:
  5770 ;;		line 25 in file "Potentiometer.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  i               1    8[BANK0 ] unsigned char 
  5775 ;;  i               1    9[BANK0 ] unsigned char 
  5776 ;;  sumOfSamples    4    4[BANK0 ] unsigned long 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  2   11[COMMON] unsigned short 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5786 ;;      Params:         2       0       0       0       0       0
  5787 ;;      Locals:         0       6       0       0       0       0
  5788 ;;      Temps:          0       4       0       0       0       0
  5789 ;;      Totals:         2      10       0       0       0       0
  5790 ;;Total ram usage:       12 bytes
  5791 ;; Hardware stack levels used: 1
  5792 ;; Hardware stack levels required when called: 1
  5793 ;; This function calls:
  5794 ;;		_readADCRaw
  5795 ;; This function is called by:
  5796 ;;		_Tick980Hz
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800  0F4A                     _readFilteredDutyPot:	
  5801                           ;psect for function _readFilteredDutyPot
  5802                           
  5803  0F4A                     i1l2476:	
  5804                           ;incstack = 0
  5805                           ; Regs used in _readFilteredDutyPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5806                           
  5807                           
  5808                           ;Potentiometer.c: 26:     for(uint8_t i=0; i<16 -1; i++) dutyPotFIFO[i] = dutyPotFIFO[i+
      +                          1];
  5809  0F4A  0020               	movlb	0	; select bank0
  5810  0F4B  01A9               	clrf	readFilteredDutyPot@i
  5811  0F4C                     i1l2482:
  5812  0F4C  3529               	lslf	readFilteredDutyPot@i,w
  5813  0F4D  3E22               	addlw	(low ((_dutyPotFIFO| (0+512)+2)))& (0+255)
  5814  0F4E  0086               	movwf	6
  5815  0F4F  3002               	movlw	2	; select bank4/5
  5816  0F50  0087               	movwf	7
  5817  0F51  3529               	lslf	readFilteredDutyPot@i,w
  5818  0F52  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5819  0F53  0084               	movwf	4
  5820  0F54  3002               	movlw	2	; select bank4/5
  5821  0F55  0085               	movwf	5
  5822  0F56  3F40               	moviw [0]fsr1
  5823  0F57  3F80               	movwi [0]fsr0
  5824  0F58  3F41               	moviw [1]fsr1
  5825  0F59  3F81               	movwi [1]fsr0
  5826  0F5A                     i1l2484:
  5827  0F5A  3001               	movlw	1
  5828  0F5B  00A0               	movwf	??_readFilteredDutyPot
  5829  0F5C  0820               	movf	??_readFilteredDutyPot,w
  5830  0F5D  07A9               	addwf	readFilteredDutyPot@i,f
  5831  0F5E                     i1l2486:
  5832  0F5E  300F               	movlw	15
  5833  0F5F  0229               	subwf	readFilteredDutyPot@i,w
  5834  0F60  1C03               	skipc
  5835  0F61  2F63               	goto	u231_21
  5836  0F62  2F64               	goto	u231_20
  5837  0F63                     u231_21:
  5838  0F63  2F4C               	goto	i1l2482
  5839  0F64                     u231_20:
  5840  0F64                     i1l2488:
  5841                           
  5842                           ;Potentiometer.c: 27:     dutyPotFIFO[16 -1] = readADCRaw(pinRB1);
  5843  0F64  3009               	movlw	9
  5844  0F65  3186  2628  318F   	fcall	_readADCRaw
  5845  0F68  0871               	movf	?_readADCRaw+1,w
  5846  0F69  0024               	movlb	4	; select bank4
  5847  0F6A  00BF               	movwf	((_dutyPotFIFO+1)^(0+512)+30)
  5848  0F6B  0870               	movf	?_readADCRaw,w
  5849  0F6C  00BE               	movwf	(_dutyPotFIFO^(0+512)+30)
  5850  0F6D                     i1l2490:
  5851                           
  5852                           ;Potentiometer.c: 28:     uint32_t sumOfSamples = 0;
  5853  0F6D  3000               	movlw	0
  5854  0F6E  0020               	movlb	0	; select bank0
  5855  0F6F  00A7               	movwf	readFilteredDutyPot@sumOfSamples+3
  5856  0F70  3000               	movlw	0
  5857  0F71  00A6               	movwf	readFilteredDutyPot@sumOfSamples+2
  5858  0F72  3000               	movlw	0
  5859  0F73  00A5               	movwf	readFilteredDutyPot@sumOfSamples+1
  5860  0F74  3000               	movlw	0
  5861  0F75  00A4               	movwf	readFilteredDutyPot@sumOfSamples
  5862  0F76                     i1l2492:
  5863                           
  5864                           ;Potentiometer.c: 29:     for(uint8_t i=0; i<16; i++) sumOfSamples += dutyPotFIFO[i];
  5865  0F76  01A8               	clrf	readFilteredDutyPot@i_797
  5866  0F77                     i1l2498:
  5867  0F77  3528               	lslf	readFilteredDutyPot@i_797,w
  5868  0F78  3E20               	addlw	(low (_dutyPotFIFO| (0+512)))& (0+255)
  5869  0F79  0086               	movwf	6
  5870  0F7A  3002               	movlw	2	; select bank4/5
  5871  0F7B  0087               	movwf	7
  5872  0F7C  3F40               	moviw [0]fsr1
  5873  0F7D  00A0               	movwf	??_readFilteredDutyPot
  5874  0F7E  3F41               	moviw [1]fsr1
  5875  0F7F  00A1               	movwf	??_readFilteredDutyPot+1
  5876  0F80  0820               	movf	??_readFilteredDutyPot,w
  5877  0F81  07A4               	addwf	readFilteredDutyPot@sumOfSamples,f
  5878  0F82  0821               	movf	??_readFilteredDutyPot+1,w
  5879  0F83  3DA5               	addwfc	readFilteredDutyPot@sumOfSamples+1,f
  5880  0F84  3000               	movlw	0
  5881  0F85  3DA6               	addwfc	readFilteredDutyPot@sumOfSamples+2,f
  5882  0F86  3DA7               	addwfc	readFilteredDutyPot@sumOfSamples+3,f
  5883  0F87                     i1l2500:
  5884  0F87  3001               	movlw	1
  5885  0F88  00A0               	movwf	??_readFilteredDutyPot
  5886  0F89  0820               	movf	??_readFilteredDutyPot,w
  5887  0F8A  07A8               	addwf	readFilteredDutyPot@i_797,f
  5888  0F8B                     i1l2502:
  5889  0F8B  3010               	movlw	16
  5890  0F8C  0228               	subwf	readFilteredDutyPot@i_797,w
  5891  0F8D  1C03               	skipc
  5892  0F8E  2F90               	goto	u232_21
  5893  0F8F  2F91               	goto	u232_20
  5894  0F90                     u232_21:
  5895  0F90  2F77               	goto	i1l2498
  5896  0F91                     u232_20:
  5897  0F91                     i1l2504:
  5898                           
  5899                           ;Potentiometer.c: 31:     return (sumOfSamples >> 4);
  5900  0F91  0824               	movf	readFilteredDutyPot@sumOfSamples,w
  5901  0F92  00A0               	movwf	??_readFilteredDutyPot
  5902  0F93  0825               	movf	readFilteredDutyPot@sumOfSamples+1,w
  5903  0F94  00A1               	movwf	??_readFilteredDutyPot+1
  5904  0F95  0826               	movf	readFilteredDutyPot@sumOfSamples+2,w
  5905  0F96  00A2               	movwf	??_readFilteredDutyPot+2
  5906  0F97  0827               	movf	readFilteredDutyPot@sumOfSamples+3,w
  5907  0F98  00A3               	movwf	??_readFilteredDutyPot+3
  5908  0F99  3004               	movlw	4
  5909  0F9A                     u233_25:
  5910  0F9A  36A3               	lsrf	??_readFilteredDutyPot+3,f
  5911  0F9B  0CA2               	rrf	??_readFilteredDutyPot+2,f
  5912  0F9C  0CA1               	rrf	??_readFilteredDutyPot+1,f
  5913  0F9D  0CA0               	rrf	??_readFilteredDutyPot,f
  5914  0F9E                     u233_20:
  5915  0F9E  0B89               	decfsz	9,f
  5916  0F9F  2F9A               	goto	u233_25
  5917  0FA0  0821               	movf	??_readFilteredDutyPot+1,w
  5918  0FA1  00FC               	movwf	?_readFilteredDutyPot+1
  5919  0FA2  0820               	movf	??_readFilteredDutyPot,w
  5920  0FA3  00FB               	movwf	?_readFilteredDutyPot
  5921  0FA4                     i1l385:
  5922  0FA4  0008               	return
  5923  0FA5                     __end_of_readFilteredDutyPot:
  5924                           
  5925                           	psect	text27
  5926  0628                     __ptext27:	
  5927 ;; *************** function _readADCRaw *****************
  5928 ;; Defined at:
  5929 ;;		line 71 in file "ADC.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  gpioNumber      1    wreg     const enum E2798
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  gpioNumber      1   10[COMMON] const enum E2798
  5934 ;;  i               1    9[COMMON] unsigned char 
  5935 ;;  i               1    8[COMMON] unsigned char 
  5936 ;;  returnValue     2    4[COMMON] unsigned int 
  5937 ;;  gpioValid       1    7[COMMON] unsigned char 
  5938 ;;  channel         1    6[COMMON] unsigned char 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  2    0[COMMON] unsigned short 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5948 ;;      Params:         2       0       0       0       0       0
  5949 ;;      Locals:         7       0       0       0       0       0
  5950 ;;      Temps:          2       0       0       0       0       0
  5951 ;;      Totals:        11       0       0       0       0       0
  5952 ;;Total ram usage:       11 bytes
  5953 ;; Hardware stack levels used: 1
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_readFilteredDutyPot
  5958 ;;		_readFilteredFreqPot
  5959 ;;		_readFilteredVout
  5960 ;;		_readFilteredIDS
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964  0628                     _readADCRaw:	
  5965                           ;psect for function _readADCRaw
  5966                           
  5967                           
  5968                           ;incstack = 0
  5969                           ; Regs used in _readADCRaw: [wreg+status,2+status,0]
  5970                           ;readADCRaw@gpioNumber stored from wreg
  5971  0628  00FA               	movwf	readADCRaw@gpioNumber
  5972  0629                     i1l2208:
  5973                           
  5974                           ;ADC.c: 72:     uint8_t channel = 0;
  5975  0629  01F6               	clrf	readADCRaw@channel
  5976                           
  5977                           ;ADC.c: 73:     uint8_t gpioValid = 0;
  5978  062A  01F7               	clrf	readADCRaw@gpioValid
  5979  062B                     i1l2210:
  5980                           
  5981                           ;ADC.c: 75:     if(gpioNumber <= 4){
  5982  062B  3005               	movlw	5
  5983  062C  027A               	subwf	readADCRaw@gpioNumber,w
  5984  062D  1803               	skipnc
  5985  062E  2E30               	goto	u177_21
  5986  062F  2E31               	goto	u177_20
  5987  0630                     u177_21:
  5988  0630  2E37               	goto	i1l260
  5989  0631                     u177_20:
  5990  0631                     i1l2212:
  5991                           
  5992                           ;ADC.c: 76:         channel = gpioNumber;
  5993  0631  087A               	movf	readADCRaw@gpioNumber,w
  5994  0632  00F2               	movwf	??_readADCRaw
  5995  0633  0872               	movf	??_readADCRaw,w
  5996  0634  00F6               	movwf	readADCRaw@channel
  5997  0635                     i1l2214:
  5998                           
  5999                           ;ADC.c: 77:         gpioValid = 1;
  6000  0635  01F7               	clrf	readADCRaw@gpioValid
  6001  0636  0AF7               	incf	readADCRaw@gpioValid,f
  6002  0637                     i1l260:	
  6003                           ;ADC.c: 78:     }
  6004                           
  6005                           
  6006                           ;ADC.c: 79:     if((gpioNumber > 8u) && (gpioNumber <= 15u)){
  6007  0637  3009               	movlw	9
  6008  0638  027A               	subwf	readADCRaw@gpioNumber,w
  6009  0639  1C03               	skipc
  6010  063A  2E3C               	goto	u178_21
  6011  063B  2E3D               	goto	u178_20
  6012  063C                     u178_21:
  6013  063C  2E4A               	goto	i1l261
  6014  063D                     u178_20:
  6015  063D                     i1l2216:
  6016  063D  3010               	movlw	16
  6017  063E  027A               	subwf	readADCRaw@gpioNumber,w
  6018  063F  1803               	skipnc
  6019  0640  2E42               	goto	u179_21
  6020  0641  2E43               	goto	u179_20
  6021  0642                     u179_21:
  6022  0642  2E4A               	goto	i1l261
  6023  0643                     u179_20:
  6024  0643                     i1l2218:
  6025                           
  6026                           ;ADC.c: 80:         channel = 12u - (gpioNumber - 8);
  6027  0643  087A               	movf	readADCRaw@gpioNumber,w
  6028  0644  3C14               	sublw	20
  6029  0645  00F2               	movwf	??_readADCRaw
  6030  0646  0872               	movf	??_readADCRaw,w
  6031  0647  00F6               	movwf	readADCRaw@channel
  6032  0648                     i1l2220:
  6033                           
  6034                           ;ADC.c: 81:         gpioValid = 1;
  6035  0648  01F7               	clrf	readADCRaw@gpioValid
  6036  0649  0AF7               	incf	readADCRaw@gpioValid,f
  6037  064A                     i1l261:	
  6038                           ;ADC.c: 82:     }
  6039                           
  6040                           
  6041                           ;ADC.c: 83:     if(gpioValid){
  6042  064A  0877               	movf	readADCRaw@gpioValid,w
  6043  064B  1903               	btfsc	3,2
  6044  064C  2E4E               	goto	u180_21
  6045  064D  2E4F               	goto	u180_20
  6046  064E                     u180_21:
  6047  064E  2E8A               	goto	i1l2258
  6048  064F                     u180_20:
  6049  064F                     i1l2222:
  6050                           
  6051                           ;ADC.c: 85:         if(~ADCON0bits.GO_nDONE){
  6052  064F  0021               	movlb	1	; select bank1
  6053  0650  081D               	movf	29,w	;volatile
  6054  0651                     i1l2224:
  6055                           
  6056                           ;ADC.c: 86:             ADCON0 &= ~(0b01111100);
  6057  0651  3083               	movlw	131
  6058  0652  00F2               	movwf	??_readADCRaw
  6059  0653  0872               	movf	??_readADCRaw,w
  6060  0654  059D               	andwf	29,f	;volatile
  6061  0655                     i1l2226:
  6062                           
  6063                           ;ADC.c: 87:             ADCON0 |= (channel << 2);
  6064  0655  0876               	movf	readADCRaw@channel,w	;volatile
  6065  0656  00F2               	movwf	??_readADCRaw
  6066  0657  3001               	movlw	1
  6067  0658                     u181_25:
  6068  0658  35F2               	lslf	??_readADCRaw,f
  6069  0659  3EFF               	addlw	-1
  6070  065A  1D03               	skipz
  6071  065B  2E58               	goto	u181_25
  6072  065C  3572               	lslf	??_readADCRaw,w
  6073  065D  00F3               	movwf	??_readADCRaw+1
  6074  065E  0873               	movf	??_readADCRaw+1,w
  6075  065F  049D               	iorwf	29,f	;volatile
  6076  0660                     i1l2228:
  6077                           
  6078                           ;ADC.c: 88:             for(uint8_t i = 0; i < 8; i++);
  6079  0660  01F8               	clrf	readADCRaw@i
  6080  0661                     i1l2234:
  6081  0661  3001               	movlw	1
  6082  0662  00F2               	movwf	??_readADCRaw
  6083  0663  0872               	movf	??_readADCRaw,w
  6084  0664  07F8               	addwf	readADCRaw@i,f
  6085  0665                     i1l2236:
  6086  0665  3008               	movlw	8
  6087  0666  0278               	subwf	readADCRaw@i,w
  6088  0667  1C03               	skipc
  6089  0668  2E6A               	goto	u182_21
  6090  0669  2E6B               	goto	u182_20
  6091  066A                     u182_21:
  6092  066A  2E61               	goto	i1l2234
  6093  066B                     u182_20:
  6094  066B                     i1l265:
  6095                           
  6096                           ;ADC.c: 90:             ADCON0bits.GO_nDONE = 1;
  6097  066B  0021               	movlb	1	; select bank1
  6098  066C  149D               	bsf	29,1	;volatile
  6099  066D                     i1l266:	
  6100                           ;ADC.c: 91:             while(ADCON0bits.GO_nDONE);
  6101                           
  6102  066D  189D               	btfsc	29,1	;volatile
  6103  066E  2E70               	goto	u183_21
  6104  066F  2E71               	goto	u183_20
  6105  0670                     u183_21:
  6106  0670  2E6D               	goto	i1l266
  6107  0671                     u183_20:
  6108  0671                     i1l2238:
  6109                           
  6110                           ;ADC.c: 92:             unsigned int returnValue = ((ADRESH<<8)+ADRESL);
  6111  0671  081C               	movf	28,w	;volatile
  6112  0672  00F5               	movwf	readADCRaw@returnValue+1
  6113  0673  081B               	movf	27,w	;volatile
  6114  0674  00F4               	movwf	readADCRaw@returnValue
  6115  0675                     i1l2240:
  6116                           
  6117                           ;ADC.c: 93:             ADCON0 &= ~(0b01111100);
  6118  0675  3083               	movlw	131
  6119  0676  00F2               	movwf	??_readADCRaw
  6120  0677  0872               	movf	??_readADCRaw,w
  6121  0678  059D               	andwf	29,f	;volatile
  6122  0679                     i1l2242:
  6123                           
  6124                           ;ADC.c: 94:             ADCON0 |= (0b010 << 2);
  6125  0679  159D               	bsf	29,3	;volatile
  6126  067A                     i1l2244:
  6127                           
  6128                           ;ADC.c: 95:             for(uint8_t i = 0; i < 8; i++);
  6129  067A  01F9               	clrf	readADCRaw@i_696
  6130  067B                     i1l2250:
  6131  067B  3001               	movlw	1
  6132  067C  00F2               	movwf	??_readADCRaw
  6133  067D  0872               	movf	??_readADCRaw,w
  6134  067E  07F9               	addwf	readADCRaw@i_696,f
  6135  067F                     i1l2252:
  6136  067F  3008               	movlw	8
  6137  0680  0279               	subwf	readADCRaw@i_696,w
  6138  0681  1C03               	skipc
  6139  0682  2E84               	goto	u184_21
  6140  0683  2E85               	goto	u184_20
  6141  0684                     u184_21:
  6142  0684  2E7B               	goto	i1l2250
  6143  0685                     u184_20:
  6144  0685                     i1l2254:
  6145                           
  6146                           ;ADC.c: 97:             return returnValue;
  6147  0685  0875               	movf	readADCRaw@returnValue+1,w
  6148  0686  00F1               	movwf	?_readADCRaw+1
  6149  0687  0874               	movf	readADCRaw@returnValue,w
  6150  0688  00F0               	movwf	?_readADCRaw
  6151  0689  2E8C               	goto	i1l271
  6152  068A                     i1l2258:
  6153  068A  01F0               	clrf	?_readADCRaw
  6154  068B  01F1               	clrf	?_readADCRaw+1
  6155  068C                     i1l271:
  6156  068C  0008               	return
  6157  068D                     __end_of_readADCRaw:
  6158                           
  6159                           	psect	text28
  6160  0D46                     __ptext28:	
  6161 ;; *************** function _currentTripRead *****************
  6162 ;; Defined at:
  6163 ;;		line 30 in file "CurrentSensor.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;		None
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      _Bool 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, pclath, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6177 ;;      Params:         0       0       0       0       0       0
  6178 ;;      Locals:         1       0       0       0       0       0
  6179 ;;      Temps:          1       0       0       0       0       0
  6180 ;;      Totals:         2       0       0       0       0       0
  6181 ;;Total ram usage:        2 bytes
  6182 ;; Hardware stack levels used: 1
  6183 ;; Hardware stack levels required when called: 1
  6184 ;; This function calls:
  6185 ;;		i1_readGPIO
  6186 ;; This function is called by:
  6187 ;;		_Tick980Hz
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191  0D46                     _currentTripRead:	
  6192                           ;psect for function _currentTripRead
  6193                           
  6194  0D46                     i1l2348:	
  6195                           ;incstack = 0
  6196                           ; Regs used in _currentTripRead: [wreg+status,2+status,0+pclath+cstack]
  6197                           
  6198                           
  6199                           ;CurrentSensor.c: 31:     tripIDS = ~readGPIO(pinRA1);
  6200  0D46  3001               	movlw	1
  6201  0D47  318E  2612  318D   	fcall	i1_readGPIO
  6202  0D4A  3A01               	xorlw	1
  6203  0D4B  1D03               	skipz
  6204  0D4C  2D4E               	goto	u207_21
  6205  0D4D  2D50               	goto	u207_20
  6206  0D4E                     u207_21:
  6207  0D4E  3001               	movlw	1
  6208  0D4F  2D51               	goto	u208_20
  6209  0D50                     u207_20:
  6210  0D50  3000               	movlw	0
  6211  0D51                     u208_20:
  6212  0D51  00F9               	movwf	??_currentTripRead
  6213  0D52  0879               	movf	??_currentTripRead,w
  6214  0D53  0020               	movlb	0	; select bank0
  6215  0D54  00EB               	movwf	_tripIDS
  6216                           
  6217                           ;CurrentSensor.c: 32:     tripIL = ~readGPIO(pinRA3);
  6218  0D55  3003               	movlw	3
  6219  0D56  318E  2612  318D   	fcall	i1_readGPIO
  6220  0D59  3A01               	xorlw	1
  6221  0D5A  1D03               	skipz
  6222  0D5B  2D5D               	goto	u209_21
  6223  0D5C  2D5F               	goto	u209_20
  6224  0D5D                     u209_21:
  6225  0D5D  3001               	movlw	1
  6226  0D5E  2D60               	goto	u210_20
  6227  0D5F                     u209_20:
  6228  0D5F  3000               	movlw	0
  6229  0D60                     u210_20:
  6230  0D60  00F9               	movwf	??_currentTripRead
  6231  0D61  0879               	movf	??_currentTripRead,w
  6232  0D62  0020               	movlb	0	; select bank0
  6233  0D63  00EA               	movwf	_tripIL
  6234  0D64                     i1l2350:
  6235                           
  6236                           ;CurrentSensor.c: 33:     return (tripIL || tripIDS);
  6237  0D64  01FA               	clrf	_currentTripRead$969
  6238  0D65  0AFA               	incf	_currentTripRead$969,f
  6239  0D66                     i1l2352:
  6240  0D66  086A               	movf	_tripIL,w
  6241  0D67  1D03               	btfss	3,2
  6242  0D68  2D6A               	goto	u211_21
  6243  0D69  2D6B               	goto	u211_20
  6244  0D6A                     u211_21:
  6245  0D6A  2D71               	goto	i1l2358
  6246  0D6B                     u211_20:
  6247  0D6B                     i1l2354:
  6248  0D6B  086B               	movf	_tripIDS,w
  6249  0D6C  1D03               	btfss	3,2
  6250  0D6D  2D6F               	goto	u212_21
  6251  0D6E  2D70               	goto	u212_20
  6252  0D6F                     u212_21:
  6253  0D6F  2D71               	goto	i1l2358
  6254  0D70                     u212_20:
  6255  0D70                     i1l2356:
  6256  0D70  01FA               	clrf	_currentTripRead$969
  6257  0D71                     i1l2358:
  6258  0D71  087A               	movf	_currentTripRead$969,w
  6259  0D72                     i1l533:
  6260  0D72  0008               	return
  6261  0D73                     __end_of_currentTripRead:
  6262                           
  6263                           	psect	text29
  6264  02AF                     __ptext29:	
  6265 ;; *************** function _controlRoutine *****************
  6266 ;; Defined at:
  6267 ;;		line 59 in file "Controller.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  minDuty         2   58[BANK0 ] unsigned short 
  6272 ;;  maxDuty         2   56[BANK0 ] unsigned short 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6282 ;;      Params:         0       0       0       0       0       0
  6283 ;;      Locals:         0       4       0       0       0       0
  6284 ;;      Temps:          0       6       0       0       0       0
  6285 ;;      Totals:         0      10       0       0       0       0
  6286 ;;Total ram usage:       10 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 3
  6289 ;; This function calls:
  6290 ;;		___lldiv
  6291 ;;		___wmul
  6292 ;;		_runCurrentModeControl
  6293 ;;		_runVoltageModeControl
  6294 ;; This function is called by:
  6295 ;;		_Tick980Hz
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299  02AF                     _controlRoutine:	
  6300                           ;psect for function _controlRoutine
  6301                           
  6302  02AF                     i1l2372:	
  6303                           ;incstack = 0
  6304                           ; Regs used in _controlRoutine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6305                           
  6306                           
  6307                           ;Controller.c: 60:     if(currentState == voltageModeControl){
  6308  02AF  3002               	movlw	2
  6309  02B0  0020               	movlb	0	; select bank0
  6310  02B1  066D               	xorwf	_currentState,w
  6311  02B2  1D03               	btfss	3,2
  6312  02B3  2AB5               	goto	u215_21
  6313  02B4  2AB6               	goto	u215_20
  6314  02B5                     u215_21:
  6315  02B5  2AF1               	goto	i1l2380
  6316  02B6                     u215_20:
  6317  02B6                     i1l2374:
  6318                           
  6319                           ;Controller.c: 61:         runVoltageModeControl();
  6320  02B6  3180  20CB  3182   	fcall	_runVoltageModeControl
  6321  02B9                     i1l2376:
  6322                           
  6323                           ;Controller.c: 62:         setPeriod = 79u;
  6324  02B9  304F               	movlw	79
  6325  02BA  0020               	movlb	0	; select bank0
  6326  02BB  00D2               	movwf	??_controlRoutine
  6327  02BC  0852               	movf	??_controlRoutine,w
  6328  02BD  00EF               	movwf	_setPeriod
  6329  02BE                     i1l2378:
  6330                           
  6331                           ;Controller.c: 64:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + voltageModeVariables.sumOutput;
  6332  02BE  3016               	movlw	22
  6333  02BF  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6334  02C0  0086               	movwf	6
  6335  02C1  0187               	clrf	7
  6336  02C2  3000               	movlw	0
  6337  02C3  00F9               	movwf	___lldiv@divisor+3
  6338  02C4  3000               	movlw	0
  6339  02C5  00F8               	movwf	___lldiv@divisor+2
  6340  02C6  3000               	movlw	0
  6341  02C7  00F7               	movwf	___lldiv@divisor+1
  6342  02C8  3019               	movlw	25
  6343  02C9  00F6               	movwf	___lldiv@divisor
  6344  02CA  3032               	movlw	50
  6345  02CB  00F2               	movwf	___wmul@multiplicand
  6346  02CC  3000               	movlw	0
  6347  02CD  00F3               	movwf	___wmul@multiplicand+1
  6348  02CE  086F               	movf	_setPeriod,w
  6349  02CF  00D2               	movwf	??_controlRoutine
  6350  02D0  01D3               	clrf	??_controlRoutine+1
  6351  02D1  0852               	movf	??_controlRoutine,w
  6352  02D2  00F0               	movwf	___wmul@multiplier
  6353  02D3  0853               	movf	??_controlRoutine+1,w
  6354  02D4  00F1               	movwf	___wmul@multiplier+1
  6355  02D5  318C  24DC  3182   	fcall	___wmul
  6356  02D8  0870               	movf	?___wmul,w
  6357  02D9  0020               	movlb	0	; select bank0
  6358  02DA  00D4               	movwf	??_controlRoutine+2
  6359  02DB  0871               	movf	?___wmul+1,w
  6360  02DC  00D5               	movwf	??_controlRoutine+3
  6361  02DD  01D6               	clrf	??_controlRoutine+4
  6362  02DE  01D7               	clrf	??_controlRoutine+5
  6363  02DF  0857               	movf	??_controlRoutine+5,w
  6364  02E0  00FD               	movwf	___lldiv@dividend+3
  6365  02E1  0856               	movf	??_controlRoutine+4,w
  6366  02E2  00FC               	movwf	___lldiv@dividend+2
  6367  02E3  0855               	movf	??_controlRoutine+3,w
  6368  02E4  00FB               	movwf	___lldiv@dividend+1
  6369  02E5  0854               	movf	??_controlRoutine+2,w
  6370  02E6  00FA               	movwf	___lldiv@dividend
  6371  02E7  318E  26EF  3182   	fcall	___lldiv
  6372  02EA  3F40               	moviw [0]fsr1
  6373  02EB  0776               	addwf	?___lldiv,w
  6374  02EC  0020               	movlb	0	; select bank0
  6375  02ED  00E5               	movwf	_setDuty
  6376  02EE  3F41               	moviw [1]fsr1
  6377  02EF  3D77               	addwfc	?___lldiv+1,w
  6378  02F0  00E6               	movwf	_setDuty+1
  6379  02F1                     i1l2380:
  6380                           
  6381                           ;Controller.c: 66:     if(currentState == currentModeControl){
  6382  02F1  3003               	movlw	3
  6383  02F2  066D               	xorwf	_currentState,w
  6384  02F3  1D03               	btfss	3,2
  6385  02F4  2AF6               	goto	u216_21
  6386  02F5  2AF7               	goto	u216_20
  6387  02F6                     u216_21:
  6388  02F6  2B32               	goto	i1l2388
  6389  02F7                     u216_20:
  6390  02F7                     i1l2382:
  6391                           
  6392                           ;Controller.c: 67:         runCurrentModeControl();
  6393  02F7  318C  243F  3182   	fcall	_runCurrentModeControl
  6394  02FA                     i1l2384:
  6395                           
  6396                           ;Controller.c: 68:         setPeriod = 79u;
  6397  02FA  304F               	movlw	79
  6398  02FB  0020               	movlb	0	; select bank0
  6399  02FC  00D2               	movwf	??_controlRoutine
  6400  02FD  0852               	movf	??_controlRoutine,w
  6401  02FE  00EF               	movwf	_setPeriod
  6402  02FF                     i1l2386:
  6403                           
  6404                           ;Controller.c: 70:         setDuty = (uint16_t) (((uint32_t)(((uint16_t) 50u) * setPerio
      +                          d)) / 25) + currentModeVariables.sumOutput;
  6405  02FF  3016               	movlw	22
  6406  0300  3EA0               	addlw	(low (_currentModeVariables| 0))& (0+255)
  6407  0301  0086               	movwf	6
  6408  0302  0187               	clrf	7
  6409  0303  3000               	movlw	0
  6410  0304  00F9               	movwf	___lldiv@divisor+3
  6411  0305  3000               	movlw	0
  6412  0306  00F8               	movwf	___lldiv@divisor+2
  6413  0307  3000               	movlw	0
  6414  0308  00F7               	movwf	___lldiv@divisor+1
  6415  0309  3019               	movlw	25
  6416  030A  00F6               	movwf	___lldiv@divisor
  6417  030B  3032               	movlw	50
  6418  030C  00F2               	movwf	___wmul@multiplicand
  6419  030D  3000               	movlw	0
  6420  030E  00F3               	movwf	___wmul@multiplicand+1
  6421  030F  086F               	movf	_setPeriod,w
  6422  0310  00D2               	movwf	??_controlRoutine
  6423  0311  01D3               	clrf	??_controlRoutine+1
  6424  0312  0852               	movf	??_controlRoutine,w
  6425  0313  00F0               	movwf	___wmul@multiplier
  6426  0314  0853               	movf	??_controlRoutine+1,w
  6427  0315  00F1               	movwf	___wmul@multiplier+1
  6428  0316  318C  24DC  3182   	fcall	___wmul
  6429  0319  0870               	movf	?___wmul,w
  6430  031A  0020               	movlb	0	; select bank0
  6431  031B  00D4               	movwf	??_controlRoutine+2
  6432  031C  0871               	movf	?___wmul+1,w
  6433  031D  00D5               	movwf	??_controlRoutine+3
  6434  031E  01D6               	clrf	??_controlRoutine+4
  6435  031F  01D7               	clrf	??_controlRoutine+5
  6436  0320  0857               	movf	??_controlRoutine+5,w
  6437  0321  00FD               	movwf	___lldiv@dividend+3
  6438  0322  0856               	movf	??_controlRoutine+4,w
  6439  0323  00FC               	movwf	___lldiv@dividend+2
  6440  0324  0855               	movf	??_controlRoutine+3,w
  6441  0325  00FB               	movwf	___lldiv@dividend+1
  6442  0326  0854               	movf	??_controlRoutine+2,w
  6443  0327  00FA               	movwf	___lldiv@dividend
  6444  0328  318E  26EF  3182   	fcall	___lldiv
  6445  032B  3F40               	moviw [0]fsr1
  6446  032C  0776               	addwf	?___lldiv,w
  6447  032D  0020               	movlb	0	; select bank0
  6448  032E  00E5               	movwf	_setDuty
  6449  032F  3F41               	moviw [1]fsr1
  6450  0330  3D77               	addwfc	?___lldiv+1,w
  6451  0331  00E6               	movwf	_setDuty+1
  6452  0332                     i1l2388:
  6453                           
  6454                           ;Controller.c: 73:     uint16_t maxDuty = (uint16_t) (((uint32_t)(((uint16_t) 90) * setP
      +                          eriod)) / 25);
  6455  0332  3000               	movlw	0
  6456  0333  00F9               	movwf	___lldiv@divisor+3
  6457  0334  3000               	movlw	0
  6458  0335  00F8               	movwf	___lldiv@divisor+2
  6459  0336  3000               	movlw	0
  6460  0337  00F7               	movwf	___lldiv@divisor+1
  6461  0338  3019               	movlw	25
  6462  0339  00F6               	movwf	___lldiv@divisor
  6463  033A  305A               	movlw	90
  6464  033B  00F2               	movwf	___wmul@multiplicand
  6465  033C  3000               	movlw	0
  6466  033D  00F3               	movwf	___wmul@multiplicand+1
  6467  033E  086F               	movf	_setPeriod,w
  6468  033F  00D2               	movwf	??_controlRoutine
  6469  0340  01D3               	clrf	??_controlRoutine+1
  6470  0341  0852               	movf	??_controlRoutine,w
  6471  0342  00F0               	movwf	___wmul@multiplier
  6472  0343  0853               	movf	??_controlRoutine+1,w
  6473  0344  00F1               	movwf	___wmul@multiplier+1
  6474  0345  318C  24DC  3182   	fcall	___wmul
  6475  0348  0870               	movf	?___wmul,w
  6476  0349  0020               	movlb	0	; select bank0
  6477  034A  00D4               	movwf	??_controlRoutine+2
  6478  034B  0871               	movf	?___wmul+1,w
  6479  034C  00D5               	movwf	??_controlRoutine+3
  6480  034D  01D6               	clrf	??_controlRoutine+4
  6481  034E  01D7               	clrf	??_controlRoutine+5
  6482  034F  0857               	movf	??_controlRoutine+5,w
  6483  0350  00FD               	movwf	___lldiv@dividend+3
  6484  0351  0856               	movf	??_controlRoutine+4,w
  6485  0352  00FC               	movwf	___lldiv@dividend+2
  6486  0353  0855               	movf	??_controlRoutine+3,w
  6487  0354  00FB               	movwf	___lldiv@dividend+1
  6488  0355  0854               	movf	??_controlRoutine+2,w
  6489  0356  00FA               	movwf	___lldiv@dividend
  6490  0357  318E  26EF  3182   	fcall	___lldiv
  6491  035A  0877               	movf	?___lldiv+1,w
  6492  035B  0020               	movlb	0	; select bank0
  6493  035C  00D9               	movwf	controlRoutine@maxDuty+1
  6494  035D  0876               	movf	?___lldiv,w
  6495  035E  00D8               	movwf	controlRoutine@maxDuty
  6496  035F                     i1l2390:
  6497                           
  6498                           ;Controller.c: 74:     uint16_t minDuty = (uint16_t) (((uint32_t)(((uint16_t) 10) * setP
      +                          eriod)) / 25);
  6499  035F  3000               	movlw	0
  6500  0360  00F9               	movwf	___lldiv@divisor+3
  6501  0361  3000               	movlw	0
  6502  0362  00F8               	movwf	___lldiv@divisor+2
  6503  0363  3000               	movlw	0
  6504  0364  00F7               	movwf	___lldiv@divisor+1
  6505  0365  3019               	movlw	25
  6506  0366  00F6               	movwf	___lldiv@divisor
  6507  0367  300A               	movlw	10
  6508  0368  00F2               	movwf	___wmul@multiplicand
  6509  0369  3000               	movlw	0
  6510  036A  00F3               	movwf	___wmul@multiplicand+1
  6511  036B  086F               	movf	_setPeriod,w
  6512  036C  00D2               	movwf	??_controlRoutine
  6513  036D  01D3               	clrf	??_controlRoutine+1
  6514  036E  0852               	movf	??_controlRoutine,w
  6515  036F  00F0               	movwf	___wmul@multiplier
  6516  0370  0853               	movf	??_controlRoutine+1,w
  6517  0371  00F1               	movwf	___wmul@multiplier+1
  6518  0372  318C  24DC  3182   	fcall	___wmul
  6519  0375  0870               	movf	?___wmul,w
  6520  0376  0020               	movlb	0	; select bank0
  6521  0377  00D4               	movwf	??_controlRoutine+2
  6522  0378  0871               	movf	?___wmul+1,w
  6523  0379  00D5               	movwf	??_controlRoutine+3
  6524  037A  01D6               	clrf	??_controlRoutine+4
  6525  037B  01D7               	clrf	??_controlRoutine+5
  6526  037C  0857               	movf	??_controlRoutine+5,w
  6527  037D  00FD               	movwf	___lldiv@dividend+3
  6528  037E  0856               	movf	??_controlRoutine+4,w
  6529  037F  00FC               	movwf	___lldiv@dividend+2
  6530  0380  0855               	movf	??_controlRoutine+3,w
  6531  0381  00FB               	movwf	___lldiv@dividend+1
  6532  0382  0854               	movf	??_controlRoutine+2,w
  6533  0383  00FA               	movwf	___lldiv@dividend
  6534  0384  318E  26EF  3182   	fcall	___lldiv
  6535  0387  0877               	movf	?___lldiv+1,w
  6536  0388  0020               	movlb	0	; select bank0
  6537  0389  00DB               	movwf	controlRoutine@minDuty+1
  6538  038A  0876               	movf	?___lldiv,w
  6539  038B  00DA               	movwf	controlRoutine@minDuty
  6540  038C                     i1l2392:
  6541                           
  6542                           ;Controller.c: 75:     if(setDuty > maxDuty) setDuty = maxDuty;
  6543  038C  0866               	movf	_setDuty+1,w
  6544  038D  0259               	subwf	controlRoutine@maxDuty+1,w
  6545  038E  1D03               	skipz
  6546  038F  2B92               	goto	u217_25
  6547  0390  0865               	movf	_setDuty,w
  6548  0391  0258               	subwf	controlRoutine@maxDuty,w
  6549  0392                     u217_25:
  6550  0392  1803               	skipnc
  6551  0393  2B95               	goto	u217_21
  6552  0394  2B96               	goto	u217_20
  6553  0395                     u217_21:
  6554  0395  2B9A               	goto	i1l469
  6555  0396                     u217_20:
  6556  0396                     i1l2394:
  6557  0396  0859               	movf	controlRoutine@maxDuty+1,w
  6558  0397  00E6               	movwf	_setDuty+1
  6559  0398  0858               	movf	controlRoutine@maxDuty,w
  6560  0399  00E5               	movwf	_setDuty
  6561  039A                     i1l469:
  6562                           
  6563                           ;Controller.c: 76:     if(setDuty < minDuty) setDuty = minDuty;
  6564  039A  085B               	movf	controlRoutine@minDuty+1,w
  6565  039B  0266               	subwf	_setDuty+1,w
  6566  039C  1D03               	skipz
  6567  039D  2BA0               	goto	u218_25
  6568  039E  085A               	movf	controlRoutine@minDuty,w
  6569  039F  0265               	subwf	_setDuty,w
  6570  03A0                     u218_25:
  6571  03A0  1803               	skipnc
  6572  03A1  2BA3               	goto	u218_21
  6573  03A2  2BA4               	goto	u218_20
  6574  03A3                     u218_21:
  6575  03A3  2BA8               	goto	i1l472
  6576  03A4                     u218_20:
  6577  03A4                     i1l2396:
  6578  03A4  085B               	movf	controlRoutine@minDuty+1,w
  6579  03A5  00E6               	movwf	_setDuty+1
  6580  03A6  085A               	movf	controlRoutine@minDuty,w
  6581  03A7  00E5               	movwf	_setDuty
  6582  03A8                     i1l472:
  6583  03A8  0008               	return
  6584  03A9                     __end_of_controlRoutine:
  6585                           
  6586                           	psect	text30
  6587  00CB                     __ptext30:	
  6588 ;; *************** function _runVoltageModeControl *****************
  6589 ;; Defined at:
  6590 ;;		line 86 in file "Controller.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  propMult        8   40[BANK0 ] long long 
  6595 ;;  integralMult    8   32[BANK0 ] long long 
  6596 ;;  newVoltage      2   48[BANK0 ] unsigned short 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;                  1    wreg      void 
  6599 ;; Registers used:
  6600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6606 ;;      Params:         0       0       0       0       0       0
  6607 ;;      Locals:         0      18       0       0       0       0
  6608 ;;      Temps:          0      16       0       0       0       0
  6609 ;;      Totals:         0      34       0       0       0       0
  6610 ;;Total ram usage:       34 bytes
  6611 ;; Hardware stack levels used: 1
  6612 ;; Hardware stack levels required when called: 2
  6613 ;; This function calls:
  6614 ;;		___lmul
  6615 ;;		___omul
  6616 ;;		_abs
  6617 ;;		_convertRawToMilliVolts
  6618 ;;		i1_readGPIO
  6619 ;; This function is called by:
  6620 ;;		_controlRoutine
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624  00CB                     _runVoltageModeControl:	
  6625                           ;psect for function _runVoltageModeControl
  6626                           
  6627  00CB                     i1l2262:	
  6628                           ;incstack = 0
  6629                           ; Regs used in _runVoltageModeControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6630                           
  6631                           
  6632                           ;Controller.c: 89:    uint16_t newVoltage = convertRawToMilliVolts(filteredVout);
  6633  00CB  0020               	movlb	0	; select bank0
  6634  00CC  0860               	movf	_filteredVout+1,w
  6635  00CD  00FD               	movwf	convertRawToMilliVolts@rawValue+1
  6636  00CE  085F               	movf	_filteredVout,w
  6637  00CF  00FC               	movwf	convertRawToMilliVolts@rawValue
  6638  00D0  318D  25D5  3180   	fcall	_convertRawToMilliVolts
  6639  00D3  087D               	movf	?_convertRawToMilliVolts+1,w
  6640  00D4  0020               	movlb	0	; select bank0
  6641  00D5  00D1               	movwf	runVoltageModeControl@newVoltage+1
  6642  00D6  087C               	movf	?_convertRawToMilliVolts,w
  6643  00D7  00D0               	movwf	runVoltageModeControl@newVoltage
  6644                           
  6645                           ;Controller.c: 92:    if(readGPIO(pinRB0)) voltageModeVariables.error = 16000u - newVolt
      +                          age;
  6646  00D8  3008               	movlw	8
  6647  00D9  318E  2612  3180   	fcall	i1_readGPIO
  6648  00DC  3A00               	xorlw	0
  6649  00DD  1903               	skipnz
  6650  00DE  28E0               	goto	u185_21
  6651  00DF  28E1               	goto	u185_20
  6652  00E0                     u185_21:
  6653  00E0  28F0               	goto	i1l2266
  6654  00E1                     u185_20:
  6655  00E1                     i1l2264:
  6656  00E1  3080               	movlw	128
  6657  00E2  0020               	movlb	0	; select bank0
  6658  00E3  00B0               	movwf	??_runVoltageModeControl
  6659  00E4  303E               	movlw	62
  6660  00E5  00B1               	movwf	??_runVoltageModeControl+1
  6661  00E6  0850               	movf	runVoltageModeControl@newVoltage,w
  6662  00E7  0230               	subwf	??_runVoltageModeControl,w
  6663  00E8  0021               	movlb	1	; select bank1
  6664  00E9  00C6               	movwf	_voltageModeVariables^(0+128)
  6665  00EA  0020               	movlb	0	; select bank0
  6666  00EB  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6667  00EC  3B31               	subwfb	??_runVoltageModeControl+1,w
  6668  00ED  0021               	movlb	1	; select bank1
  6669  00EE  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6670  00EF  28FE               	goto	i1l2268
  6671  00F0                     i1l2266:
  6672  00F0  3010               	movlw	16
  6673  00F1  0020               	movlb	0	; select bank0
  6674  00F2  00B0               	movwf	??_runVoltageModeControl
  6675  00F3  3027               	movlw	39
  6676  00F4  00B1               	movwf	??_runVoltageModeControl+1
  6677  00F5  0850               	movf	runVoltageModeControl@newVoltage,w
  6678  00F6  0230               	subwf	??_runVoltageModeControl,w
  6679  00F7  0021               	movlb	1	; select bank1
  6680  00F8  00C6               	movwf	_voltageModeVariables^(0+128)
  6681  00F9  0020               	movlb	0	; select bank0
  6682  00FA  0851               	movf	runVoltageModeControl@newVoltage+1,w
  6683  00FB  3B31               	subwfb	??_runVoltageModeControl+1,w
  6684  00FC  0021               	movlb	1	; select bank1
  6685  00FD  00C7               	movwf	(_voltageModeVariables+1)^(0+128)
  6686  00FE                     i1l2268:
  6687                           
  6688                           ;Controller.c: 96:    int64_t integralMult = ((int64_t) (5u * ((int64_t) voltageModeVari
      +                          ables.error) )) * 134u;
  6689  00FE  0846               	movf	_voltageModeVariables^(0+128),w
  6690  00FF  0020               	movlb	0	; select bank0
  6691  0100  00A0               	movwf	___omul@multiplier
  6692  0101  0021               	movlb	1	; select bank1
  6693  0102  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  6694  0103  0020               	movlb	0	; select bank0
  6695  0104  00A1               	movwf	___omul@multiplier+1
  6696  0105  0D89               	rlf	9,f
  6697  0106  3B89               	subwfb	9,f
  6698  0107  0989               	comf	9,f
  6699  0108  00A2               	movwf	___omul@multiplier+2
  6700  0109  00A3               	movwf	___omul@multiplier+3
  6701  010A  00A4               	movwf	___omul@multiplier+4
  6702  010B  00A5               	movwf	___omul@multiplier+5
  6703  010C  00A6               	movwf	___omul@multiplier+6
  6704  010D  00A7               	movwf	___omul@multiplier+7
  6705  010E  3000               	movlw	0
  6706  010F  00AF               	movwf	___omul@multiplicand+7
  6707  0110  3000               	movlw	0
  6708  0111  00AE               	movwf	___omul@multiplicand+6
  6709  0112  3000               	movlw	0
  6710  0113  00AD               	movwf	___omul@multiplicand+5
  6711  0114  3000               	movlw	0
  6712  0115  00AC               	movwf	___omul@multiplicand+4
  6713  0116  3000               	movlw	0
  6714  0117  00AB               	movwf	___omul@multiplicand+3
  6715  0118  3000               	movlw	0
  6716  0119  00AA               	movwf	___omul@multiplicand+2
  6717  011A  3002               	movlw	2
  6718  011B  00A9               	movwf	___omul@multiplicand+1
  6719  011C  309E               	movlw	158
  6720  011D  00A8               	movwf	___omul@multiplicand
  6721  011E  318E  26A3  3180   	fcall	___omul
  6722  0121  0020               	movlb	0	; select bank0
  6723  0122  0820               	movf	?___omul,w
  6724  0123  00C0               	movwf	runVoltageModeControl@integralMult
  6725  0124  0821               	movf	?___omul+1,w
  6726  0125  00C1               	movwf	runVoltageModeControl@integralMult+1
  6727  0126  0822               	movf	?___omul+2,w
  6728  0127  00C2               	movwf	runVoltageModeControl@integralMult+2
  6729  0128  0823               	movf	?___omul+3,w
  6730  0129  00C3               	movwf	runVoltageModeControl@integralMult+3
  6731  012A  0824               	movf	?___omul+4,w
  6732  012B  00C4               	movwf	runVoltageModeControl@integralMult+4
  6733  012C  0825               	movf	?___omul+5,w
  6734  012D  00C5               	movwf	runVoltageModeControl@integralMult+5
  6735  012E  0826               	movf	?___omul+6,w
  6736  012F  00C6               	movwf	runVoltageModeControl@integralMult+6
  6737  0130  0827               	movf	?___omul+7,w
  6738  0131  00C7               	movwf	runVoltageModeControl@integralMult+7
  6739  0132                     i1l2270:
  6740                           
  6741                           ;Controller.c: 98:    voltageModeVariables.integral = integralMult;
  6742  0132  0843               	movf	runVoltageModeControl@integralMult+3,w
  6743  0133  0021               	movlb	1	; select bank1
  6744  0134  00CB               	movwf	((_voltageModeVariables+3)^(0+128)+2)
  6745  0135  0020               	movlb	0	; select bank0
  6746  0136  0842               	movf	runVoltageModeControl@integralMult+2,w
  6747  0137  0021               	movlb	1	; select bank1
  6748  0138  00CA               	movwf	((_voltageModeVariables+2)^(0+128)+2)
  6749  0139  0020               	movlb	0	; select bank0
  6750  013A  0841               	movf	runVoltageModeControl@integralMult+1,w
  6751  013B  0021               	movlb	1	; select bank1
  6752  013C  00C9               	movwf	((_voltageModeVariables+1)^(0+128)+2)
  6753  013D  0020               	movlb	0	; select bank0
  6754  013E  0840               	movf	runVoltageModeControl@integralMult,w
  6755  013F  0021               	movlb	1	; select bank1
  6756  0140  00C8               	movwf	(_voltageModeVariables^(0+128)+2)
  6757  0141                     i1l2272:
  6758                           
  6759                           ;Controller.c: 99:    voltageModeVariables.integralOutputScaled = (voltageModeVariables.
      +                          integralOutputScaled + voltageModeVariables.integral);
  6760  0141  300E               	movlw	14
  6761  0142  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6762  0143  0086               	movwf	6
  6763  0144  0187               	clrf	7
  6764  0145  3F40               	moviw [0]fsr1
  6765  0146  0020               	movlb	0	; select bank0
  6766  0147  00B0               	movwf	??_runVoltageModeControl
  6767  0148  3F41               	moviw [1]fsr1
  6768  0149  00B1               	movwf	??_runVoltageModeControl+1
  6769  014A  3F42               	moviw [2]fsr1
  6770  014B  00B2               	movwf	??_runVoltageModeControl+2
  6771  014C  3F43               	moviw [3]fsr1
  6772  014D  00B3               	movwf	??_runVoltageModeControl+3
  6773  014E  3F44               	moviw [4]fsr1
  6774  014F  00B4               	movwf	??_runVoltageModeControl+4
  6775  0150  3F45               	moviw [5]fsr1
  6776  0151  00B5               	movwf	??_runVoltageModeControl+5
  6777  0152  3F46               	moviw [6]fsr1
  6778  0153  00B6               	movwf	??_runVoltageModeControl+6
  6779  0154  3F47               	moviw [7]fsr1
  6780  0155  00B7               	movwf	??_runVoltageModeControl+7
  6781  0156  0021               	movlb	1	; select bank1
  6782  0157  0848               	movf	(_voltageModeVariables^(0+128)+2),w
  6783  0158  0020               	movlb	0	; select bank0
  6784  0159  00B8               	movwf	??_runVoltageModeControl+8
  6785  015A  0021               	movlb	1	; select bank1
  6786  015B  0849               	movf	((_voltageModeVariables+1)^(0+128)+2),w
  6787  015C  0020               	movlb	0	; select bank0
  6788  015D  00B9               	movwf	??_runVoltageModeControl+9
  6789  015E  0021               	movlb	1	; select bank1
  6790  015F  084A               	movf	((_voltageModeVariables+2)^(0+128)+2),w
  6791  0160  0020               	movlb	0	; select bank0
  6792  0161  00BA               	movwf	??_runVoltageModeControl+10
  6793  0162  0021               	movlb	1	; select bank1
  6794  0163  084B               	movf	((_voltageModeVariables+3)^(0+128)+2),w
  6795  0164  0020               	movlb	0	; select bank0
  6796  0165  00BB               	movwf	??_runVoltageModeControl+11
  6797  0166  3000               	movlw	0
  6798  0167  1BBB               	btfsc	??_runVoltageModeControl+11,7
  6799  0168  30FF               	movlw	255
  6800  0169  00BC               	movwf	??_runVoltageModeControl+12
  6801  016A  00BD               	movwf	??_runVoltageModeControl+13
  6802  016B  00BE               	movwf	??_runVoltageModeControl+14
  6803  016C  00BF               	movwf	??_runVoltageModeControl+15
  6804  016D  0838               	movf	??_runVoltageModeControl+8,w
  6805  016E  07B0               	addwf	??_runVoltageModeControl,f
  6806  016F  0839               	movf	??_runVoltageModeControl+9,w
  6807  0170  3DB1               	addwfc	??_runVoltageModeControl+1,f
  6808  0171  083A               	movf	??_runVoltageModeControl+10,w
  6809  0172  3DB2               	addwfc	??_runVoltageModeControl+2,f
  6810  0173  083B               	movf	??_runVoltageModeControl+11,w
  6811  0174  3DB3               	addwfc	??_runVoltageModeControl+3,f
  6812  0175  083C               	movf	??_runVoltageModeControl+12,w
  6813  0176  3DB4               	addwfc	??_runVoltageModeControl+4,f
  6814  0177  083D               	movf	??_runVoltageModeControl+13,w
  6815  0178  3DB5               	addwfc	??_runVoltageModeControl+5,f
  6816  0179  083E               	movf	??_runVoltageModeControl+14,w
  6817  017A  3DB6               	addwfc	??_runVoltageModeControl+6,f
  6818  017B  083F               	movf	??_runVoltageModeControl+15,w
  6819  017C  3DB7               	addwfc	??_runVoltageModeControl+7,f
  6820  017D  0837               	movf	??_runVoltageModeControl+7,w
  6821  017E  0021               	movlb	1	; select bank1
  6822  017F  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6823  0180  0020               	movlb	0	; select bank0
  6824  0181  0836               	movf	??_runVoltageModeControl+6,w
  6825  0182  0021               	movlb	1	; select bank1
  6826  0183  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6827  0184  0020               	movlb	0	; select bank0
  6828  0185  0835               	movf	??_runVoltageModeControl+5,w
  6829  0186  0021               	movlb	1	; select bank1
  6830  0187  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6831  0188  0020               	movlb	0	; select bank0
  6832  0189  0834               	movf	??_runVoltageModeControl+4,w
  6833  018A  0021               	movlb	1	; select bank1
  6834  018B  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6835  018C  0020               	movlb	0	; select bank0
  6836  018D  0833               	movf	??_runVoltageModeControl+3,w
  6837  018E  0021               	movlb	1	; select bank1
  6838  018F  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6839  0190  0020               	movlb	0	; select bank0
  6840  0191  0832               	movf	??_runVoltageModeControl+2,w
  6841  0192  0021               	movlb	1	; select bank1
  6842  0193  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6843  0194  0020               	movlb	0	; select bank0
  6844  0195  0831               	movf	??_runVoltageModeControl+1,w
  6845  0196  0021               	movlb	1	; select bank1
  6846  0197  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6847  0198  0020               	movlb	0	; select bank0
  6848  0199  0830               	movf	??_runVoltageModeControl,w
  6849  019A  0021               	movlb	1	; select bank1
  6850  019B  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6851  019C                     i1l2274:
  6852                           
  6853                           ;Controller.c: 102:    if(voltageModeVariables.integralOutputScaled > (1073741824u)){
  6854  019C  1BDB               	btfsc	((_voltageModeVariables+7)^(0+128)+14),7
  6855  019D  29B5               	goto	u186_21
  6856  019E  085B               	movf	((_voltageModeVariables+7)^(0+128)+14),w
  6857  019F  1D03               	btfss	3,2
  6858  01A0  29B6               	goto	u186_20
  6859  01A1  085A               	movf	((_voltageModeVariables+6)^(0+128)+14),w
  6860  01A2  1D03               	btfss	3,2
  6861  01A3  29B6               	goto	u186_20
  6862  01A4  0859               	movf	((_voltageModeVariables+5)^(0+128)+14),w
  6863  01A5  1D03               	btfss	3,2
  6864  01A6  29B6               	goto	u186_20
  6865  01A7  0858               	movf	((_voltageModeVariables+4)^(0+128)+14),w
  6866  01A8  1D03               	btfss	3,2
  6867  01A9  29B6               	goto	u186_20
  6868  01AA  3001               	movlw	1
  6869  01AB  0254               	subwf	(_voltageModeVariables^(0+128)+14),w
  6870  01AC  3000               	movlw	0
  6871  01AD  3B55               	subwfb	((_voltageModeVariables+1)^(0+128)+14),w
  6872  01AE  3000               	movlw	0
  6873  01AF  3B56               	subwfb	((_voltageModeVariables+2)^(0+128)+14),w
  6874  01B0  3040               	movlw	64
  6875  01B1  3B57               	subwfb	((_voltageModeVariables+3)^(0+128)+14),w
  6876  01B2  1C03               	btfss	3,0
  6877  01B3  29B5               	goto	u186_21
  6878  01B4  29B6               	goto	u186_20
  6879  01B5                     u186_21:
  6880  01B5  29C7               	goto	i1l2278
  6881  01B6                     u186_20:
  6882  01B6                     i1l2276:
  6883                           
  6884                           ;Controller.c: 103:        voltageModeVariables.integralOutputScaled = (1073741824u);
  6885  01B6  3000               	movlw	0
  6886  01B7  0021               	movlb	1	; select bank1
  6887  01B8  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6888  01B9  3000               	movlw	0
  6889  01BA  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6890  01BB  3000               	movlw	0
  6891  01BC  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6892  01BD  3000               	movlw	0
  6893  01BE  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6894  01BF  3040               	movlw	64
  6895  01C0  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6896  01C1  3000               	movlw	0
  6897  01C2  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6898  01C3  3000               	movlw	0
  6899  01C4  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6900  01C5  3000               	movlw	0
  6901  01C6  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6902  01C7                     i1l2278:
  6903                           
  6904                           ;Controller.c: 106:    if(voltageModeVariables.integralOutputScaled < 0){
  6905  01C7  300E               	movlw	14
  6906  01C8  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6907  01C9  0086               	movwf	6
  6908  01CA  0187               	clrf	7
  6909  01CB  3F47               	moviw [7]fsr1
  6910  01CC  0020               	movlb	0	; select bank0
  6911  01CD  00B0               	movwf	??_runVoltageModeControl
  6912  01CE  1FB0               	btfss	??_runVoltageModeControl,7
  6913  01CF  29D1               	goto	u187_21
  6914  01D0  29D2               	goto	u187_20
  6915  01D1                     u187_21:
  6916  01D1  2A01               	goto	i1l2284
  6917  01D2                     u187_20:
  6918  01D2                     i1l2280:
  6919                           
  6920                           ;Controller.c: 107:         if(abs(voltageModeVariables.integralOutputScaled) > (1073741
      +                          824u)){
  6921  01D2  0021               	movlb	1	; select bank1
  6922  01D3  0855               	movf	((_voltageModeVariables+1)^(0+128)+14),w
  6923  01D4  00F1               	movwf	abs@a+1
  6924  01D5  0854               	movf	(_voltageModeVariables^(0+128)+14),w
  6925  01D6  00F0               	movwf	abs@a
  6926  01D7  318C  24A6  3180   	fcall	_abs
  6927  01DA  0870               	movf	?_abs,w
  6928  01DB  0020               	movlb	0	; select bank0
  6929  01DC  00B0               	movwf	??_runVoltageModeControl
  6930  01DD  0871               	movf	?_abs+1,w
  6931  01DE  00B1               	movwf	??_runVoltageModeControl+1
  6932  01DF  3000               	movlw	0
  6933  01E0  1BB1               	btfsc	??_runVoltageModeControl+1,7
  6934  01E1  30FF               	movlw	255
  6935  01E2  00B2               	movwf	??_runVoltageModeControl+2
  6936  01E3  00B3               	movwf	??_runVoltageModeControl+3
  6937  01E4  3001               	movlw	1
  6938  01E5  0230               	subwf	??_runVoltageModeControl,w
  6939  01E6  3000               	movlw	0
  6940  01E7  3B31               	subwfb	??_runVoltageModeControl+1,w
  6941  01E8  3000               	movlw	0
  6942  01E9  3B32               	subwfb	??_runVoltageModeControl+2,w
  6943  01EA  3040               	movlw	64
  6944  01EB  3B33               	subwfb	??_runVoltageModeControl+3,w
  6945  01EC  1C03               	btfss	3,0
  6946  01ED  29EF               	goto	u188_21
  6947  01EE  29F0               	goto	u188_20
  6948  01EF                     u188_21:
  6949  01EF  2A01               	goto	i1l2284
  6950  01F0                     u188_20:
  6951  01F0                     i1l2282:
  6952                           
  6953                           ;Controller.c: 108:                 voltageModeVariables.integralOutputScaled = (int64_t
      +                          ) (0 -(1073741824u));
  6954  01F0  3000               	movlw	0
  6955  01F1  0021               	movlb	1	; select bank1
  6956  01F2  00DB               	movwf	((_voltageModeVariables+7)^(0+128)+14)
  6957  01F3  3000               	movlw	0
  6958  01F4  00DA               	movwf	((_voltageModeVariables+6)^(0+128)+14)
  6959  01F5  3000               	movlw	0
  6960  01F6  00D9               	movwf	((_voltageModeVariables+5)^(0+128)+14)
  6961  01F7  3000               	movlw	0
  6962  01F8  00D8               	movwf	((_voltageModeVariables+4)^(0+128)+14)
  6963  01F9  30C0               	movlw	192
  6964  01FA  00D7               	movwf	((_voltageModeVariables+3)^(0+128)+14)
  6965  01FB  3000               	movlw	0
  6966  01FC  00D6               	movwf	((_voltageModeVariables+2)^(0+128)+14)
  6967  01FD  3000               	movlw	0
  6968  01FE  00D5               	movwf	((_voltageModeVariables+1)^(0+128)+14)
  6969  01FF  3000               	movlw	0
  6970  0200  00D4               	movwf	(_voltageModeVariables^(0+128)+14)
  6971  0201                     i1l2284:
  6972                           
  6973                           ;Controller.c: 113:    voltageModeVariables.integralOutput = voltageModeVariables.integr
      +                          alOutputScaled >> (16u + 4u);
  6974  0201  300E               	movlw	14
  6975  0202  3EC6               	addlw	(low (_voltageModeVariables| 0))& (0+255)
  6976  0203  0086               	movwf	6
  6977  0204  0187               	clrf	7
  6978  0205  3F40               	moviw [0]fsr1
  6979  0206  0020               	movlb	0	; select bank0
  6980  0207  00B0               	movwf	??_runVoltageModeControl
  6981  0208  3F41               	moviw [1]fsr1
  6982  0209  00B1               	movwf	??_runVoltageModeControl+1
  6983  020A  3F42               	moviw [2]fsr1
  6984  020B  00B2               	movwf	??_runVoltageModeControl+2
  6985  020C  3F43               	moviw [3]fsr1
  6986  020D  00B3               	movwf	??_runVoltageModeControl+3
  6987  020E  3F44               	moviw [4]fsr1
  6988  020F  00B4               	movwf	??_runVoltageModeControl+4
  6989  0210  3F45               	moviw [5]fsr1
  6990  0211  00B5               	movwf	??_runVoltageModeControl+5
  6991  0212  3F46               	moviw [6]fsr1
  6992  0213  00B6               	movwf	??_runVoltageModeControl+6
  6993  0214  3F47               	moviw [7]fsr1
  6994  0215  00B7               	movwf	??_runVoltageModeControl+7
  6995  0216  3014               	movlw	20
  6996  0217  00B8               	movwf	??_runVoltageModeControl+8
  6997  0218                     u189_25:
  6998  0218  0020               	movlb	0	; select bank0
  6999  0219  37B7               	asrf	??_runVoltageModeControl+7,f
  7000  021A  0CB6               	rrf	??_runVoltageModeControl+6,f
  7001  021B  0CB5               	rrf	??_runVoltageModeControl+5,f
  7002  021C  0CB4               	rrf	??_runVoltageModeControl+4,f
  7003  021D  0CB3               	rrf	??_runVoltageModeControl+3,f
  7004  021E  0CB2               	rrf	??_runVoltageModeControl+2,f
  7005  021F  0CB1               	rrf	??_runVoltageModeControl+1,f
  7006  0220  0CB0               	rrf	??_runVoltageModeControl,f
  7007  0221                     u189_20:
  7008  0221  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7009  0222  2A18               	goto	u189_25
  7010  0223  0020               	movlb	0	; select bank0
  7011  0224  0833               	movf	??_runVoltageModeControl+3,w
  7012  0225  0021               	movlb	1	; select bank1
  7013  0226  00D3               	movwf	((_voltageModeVariables+3)^(0+128)+10)
  7014  0227  0020               	movlb	0	; select bank0
  7015  0228  0832               	movf	??_runVoltageModeControl+2,w
  7016  0229  0021               	movlb	1	; select bank1
  7017  022A  00D2               	movwf	((_voltageModeVariables+2)^(0+128)+10)
  7018  022B  0020               	movlb	0	; select bank0
  7019  022C  0831               	movf	??_runVoltageModeControl+1,w
  7020  022D  0021               	movlb	1	; select bank1
  7021  022E  00D1               	movwf	((_voltageModeVariables+1)^(0+128)+10)
  7022  022F  0020               	movlb	0	; select bank0
  7023  0230  0830               	movf	??_runVoltageModeControl,w
  7024  0231  0021               	movlb	1	; select bank1
  7025  0232  00D0               	movwf	(_voltageModeVariables^(0+128)+10)
  7026  0233                     i1l2286:
  7027                           
  7028                           ;Controller.c: 116:    int64_t propMult = (int32_t) (18u * ((int32_t) voltageModeVariabl
      +                          es.error));
  7029  0233  0846               	movf	_voltageModeVariables^(0+128),w
  7030  0234  00F0               	movwf	___lmul@multiplier
  7031  0235  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7032  0236  00F1               	movwf	___lmul@multiplier+1
  7033  0237  0D89               	rlf	9,f
  7034  0238  3B89               	subwfb	9,f
  7035  0239  0989               	comf	9,f
  7036  023A  00F2               	movwf	___lmul@multiplier+2
  7037  023B  00F3               	movwf	___lmul@multiplier+3
  7038  023C  3000               	movlw	0
  7039  023D  00F7               	movwf	___lmul@multiplicand+3
  7040  023E  3000               	movlw	0
  7041  023F  00F6               	movwf	___lmul@multiplicand+2
  7042  0240  3000               	movlw	0
  7043  0241  00F5               	movwf	___lmul@multiplicand+1
  7044  0242  3012               	movlw	18
  7045  0243  00F4               	movwf	___lmul@multiplicand
  7046  0244  318D  25A2  3180   	fcall	___lmul
  7047  0247  0870               	movf	?___lmul,w
  7048  0248  0020               	movlb	0	; select bank0
  7049  0249  00C8               	movwf	runVoltageModeControl@propMult
  7050  024A  0871               	movf	?___lmul+1,w
  7051  024B  00C9               	movwf	runVoltageModeControl@propMult+1
  7052  024C  0872               	movf	?___lmul+2,w
  7053  024D  00CA               	movwf	runVoltageModeControl@propMult+2
  7054  024E  0873               	movf	?___lmul+3,w
  7055  024F  00CB               	movwf	runVoltageModeControl@propMult+3
  7056  0250  3000               	movlw	0
  7057  0251  1BCB               	btfsc	runVoltageModeControl@propMult+3,7
  7058  0252  30FF               	movlw	255
  7059  0253  00CC               	movwf	runVoltageModeControl@propMult+4
  7060  0254  00CD               	movwf	runVoltageModeControl@propMult+5
  7061  0255  00CE               	movwf	runVoltageModeControl@propMult+6
  7062  0256  00CF               	movwf	runVoltageModeControl@propMult+7
  7063  0257                     i1l2288:
  7064                           
  7065                           ;Controller.c: 117:    voltageModeVariables.proportionalOutput = propMult >> 10u;
  7066  0257  3048               	movlw	low runVoltageModeControl@propMult
  7067  0258  0086               	movwf	6
  7068  0259  3000               	movlw	high runVoltageModeControl@propMult
  7069  025A  0087               	movwf	7
  7070  025B  3F40               	moviw [0]fsr1
  7071  025C  00B0               	movwf	??_runVoltageModeControl
  7072  025D  3F41               	moviw [1]fsr1
  7073  025E  00B1               	movwf	??_runVoltageModeControl+1
  7074  025F  3F42               	moviw [2]fsr1
  7075  0260  00B2               	movwf	??_runVoltageModeControl+2
  7076  0261  3F43               	moviw [3]fsr1
  7077  0262  00B3               	movwf	??_runVoltageModeControl+3
  7078  0263  3F44               	moviw [4]fsr1
  7079  0264  00B4               	movwf	??_runVoltageModeControl+4
  7080  0265  3F45               	moviw [5]fsr1
  7081  0266  00B5               	movwf	??_runVoltageModeControl+5
  7082  0267  3F46               	moviw [6]fsr1
  7083  0268  00B6               	movwf	??_runVoltageModeControl+6
  7084  0269  3F47               	moviw [7]fsr1
  7085  026A  00B7               	movwf	??_runVoltageModeControl+7
  7086  026B  300A               	movlw	10
  7087  026C  00B8               	movwf	??_runVoltageModeControl+8
  7088  026D                     u190_25:
  7089  026D  0020               	movlb	0	; select bank0
  7090  026E  37B7               	asrf	??_runVoltageModeControl+7,f
  7091  026F  0CB6               	rrf	??_runVoltageModeControl+6,f
  7092  0270  0CB5               	rrf	??_runVoltageModeControl+5,f
  7093  0271  0CB4               	rrf	??_runVoltageModeControl+4,f
  7094  0272  0CB3               	rrf	??_runVoltageModeControl+3,f
  7095  0273  0CB2               	rrf	??_runVoltageModeControl+2,f
  7096  0274  0CB1               	rrf	??_runVoltageModeControl+1,f
  7097  0275  0CB0               	rrf	??_runVoltageModeControl,f
  7098  0276                     u190_20:
  7099  0276  0BB8               	decfsz	??_runVoltageModeControl+8,f
  7100  0277  2A6D               	goto	u190_25
  7101  0278  0020               	movlb	0	; select bank0
  7102  0279  0833               	movf	??_runVoltageModeControl+3,w
  7103  027A  0021               	movlb	1	; select bank1
  7104  027B  00CF               	movwf	((_voltageModeVariables+3)^(0+128)+6)
  7105  027C  0020               	movlb	0	; select bank0
  7106  027D  0832               	movf	??_runVoltageModeControl+2,w
  7107  027E  0021               	movlb	1	; select bank1
  7108  027F  00CE               	movwf	((_voltageModeVariables+2)^(0+128)+6)
  7109  0280  0020               	movlb	0	; select bank0
  7110  0281  0831               	movf	??_runVoltageModeControl+1,w
  7111  0282  0021               	movlb	1	; select bank1
  7112  0283  00CD               	movwf	((_voltageModeVariables+1)^(0+128)+6)
  7113  0284  0020               	movlb	0	; select bank0
  7114  0285  0830               	movf	??_runVoltageModeControl,w
  7115  0286  0021               	movlb	1	; select bank1
  7116  0287  00CC               	movwf	(_voltageModeVariables^(0+128)+6)
  7117  0288                     i1l2290:
  7118                           
  7119                           ;Controller.c: 119:    voltageModeVariables.sumOutput = voltageModeVariables.integralOut
      +                          put + voltageModeVariables.proportionalOutput;
  7120  0288  0850               	movf	(_voltageModeVariables^(0+128)+10),w
  7121  0289  074C               	addwf	(_voltageModeVariables^(0+128)+6),w
  7122  028A  0020               	movlb	0	; select bank0
  7123  028B  00B0               	movwf	??_runVoltageModeControl
  7124  028C  0021               	movlb	1	; select bank1
  7125  028D  0851               	movf	((_voltageModeVariables+1)^(0+128)+10),w
  7126  028E  3D4D               	addwfc	((_voltageModeVariables+1)^(0+128)+6),w
  7127  028F  0020               	movlb	0	; select bank0
  7128  0290  00B1               	movwf	??_runVoltageModeControl+1
  7129  0291  0021               	movlb	1	; select bank1
  7130  0292  0852               	movf	((_voltageModeVariables+2)^(0+128)+10),w
  7131  0293  3D4E               	addwfc	((_voltageModeVariables+2)^(0+128)+6),w
  7132  0294  0020               	movlb	0	; select bank0
  7133  0295  00B2               	movwf	??_runVoltageModeControl+2
  7134  0296  0021               	movlb	1	; select bank1
  7135  0297  0853               	movf	((_voltageModeVariables+3)^(0+128)+10),w
  7136  0298  3D4F               	addwfc	((_voltageModeVariables+3)^(0+128)+6),w
  7137  0299  0020               	movlb	0	; select bank0
  7138  029A  00B3               	movwf	??_runVoltageModeControl+3
  7139  029B  0833               	movf	??_runVoltageModeControl+3,w
  7140  029C  0021               	movlb	1	; select bank1
  7141  029D  00DF               	movwf	((_voltageModeVariables+3)^(0+128)+22)
  7142  029E  0020               	movlb	0	; select bank0
  7143  029F  0832               	movf	??_runVoltageModeControl+2,w
  7144  02A0  0021               	movlb	1	; select bank1
  7145  02A1  00DE               	movwf	((_voltageModeVariables+2)^(0+128)+22)
  7146  02A2  0020               	movlb	0	; select bank0
  7147  02A3  0831               	movf	??_runVoltageModeControl+1,w
  7148  02A4  0021               	movlb	1	; select bank1
  7149  02A5  00DD               	movwf	((_voltageModeVariables+1)^(0+128)+22)
  7150  02A6  0020               	movlb	0	; select bank0
  7151  02A7  0830               	movf	??_runVoltageModeControl,w
  7152  02A8  0021               	movlb	1	; select bank1
  7153  02A9  00DC               	movwf	(_voltageModeVariables^(0+128)+22)
  7154  02AA                     i1l2292:
  7155                           
  7156                           ;Controller.c: 120:    voltageModeVariables.previousError = voltageModeVariables.error;
  7157  02AA  0847               	movf	(_voltageModeVariables+1)^(0+128),w
  7158  02AB  00E1               	movwf	((_voltageModeVariables+1)^(0+128)+26)
  7159  02AC  0846               	movf	_voltageModeVariables^(0+128),w
  7160  02AD  00E0               	movwf	(_voltageModeVariables^(0+128)+26)
  7161  02AE                     i1l480:
  7162  02AE  0008               	return
  7163  02AF                     __end_of_runVoltageModeControl:
  7164                           
  7165                           	psect	text31
  7166  0E12                     __ptext31:	
  7167 ;; *************** function i1_readGPIO *****************
  7168 ;; Defined at:
  7169 ;;		line 79 in file "GPIO.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;  gpioNumber      1    wreg     const enum E2798
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  gpioNumber      1    8[COMMON] const enum E2798
  7174 ;;  portType        1    7[COMMON] unsigned char 
  7175 ;;  portNumber      1    6[COMMON] unsigned char 
  7176 ;;  returnValueB    1    5[COMMON] unsigned char 
  7177 ;;  readB           1    4[COMMON] unsigned char 
  7178 ;;  returnValueA    1    3[COMMON] unsigned char 
  7179 ;;  readA           1    2[COMMON] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      _Bool 
  7182 ;; Registers used:
  7183 ;;		wreg, status,2, status,0
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7189 ;;      Params:         0       0       0       0       0       0
  7190 ;;      Locals:         7       0       0       0       0       0
  7191 ;;      Temps:          2       0       0       0       0       0
  7192 ;;      Totals:         9       0       0       0       0       0
  7193 ;;Total ram usage:        9 bytes
  7194 ;; Hardware stack levels used: 1
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_runVoltageModeControl
  7199 ;;		_currentTripRead
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203  0E12                     i1_readGPIO:	
  7204                           ;psect for function i1_readGPIO
  7205                           
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in i1_readGPIO: [wreg+status,2+status,0]
  7209                           ;i1readGPIO@gpioNumber stored from wreg
  7210  0E12  00F8               	movwf	i1readGPIO@gpioNumber
  7211  0E13                     i1l2108:
  7212                           
  7213                           ;GPIO.c: 81:     uint8_t portType = 0;
  7214  0E13  01F7               	clrf	i1readGPIO@portType
  7215  0E14                     i1l2110:
  7216                           
  7217                           ;GPIO.c: 82:     if(gpioNumber > 7){
  7218  0E14  3008               	movlw	8
  7219  0E15  0278               	subwf	i1readGPIO@gpioNumber,w
  7220  0E16  1C03               	skipc
  7221  0E17  2E19               	goto	u151_21
  7222  0E18  2E1A               	goto	u151_20
  7223  0E19                     u151_21:
  7224  0E19  2E22               	goto	i1l2116
  7225  0E1A                     u151_20:
  7226  0E1A                     i1l2112:
  7227                           
  7228                           ;GPIO.c: 83:         portNumber = gpioNumber - 8;
  7229  0E1A  0878               	movf	i1readGPIO@gpioNumber,w
  7230  0E1B  3EF8               	addlw	248
  7231  0E1C  00F0               	movwf	??i1_readGPIO
  7232  0E1D  0870               	movf	??i1_readGPIO,w
  7233  0E1E  00F6               	movwf	i1readGPIO@portNumber
  7234  0E1F                     i1l2114:
  7235                           
  7236                           ;GPIO.c: 84:         portType = 1;
  7237  0E1F  01F7               	clrf	i1readGPIO@portType
  7238  0E20  0AF7               	incf	i1readGPIO@portType,f
  7239                           
  7240                           ;GPIO.c: 85:     }
  7241  0E21  2E27               	goto	i1l2120
  7242  0E22                     i1l2116:
  7243                           
  7244                           ;GPIO.c: 87:         portNumber = gpioNumber;
  7245  0E22  0878               	movf	i1readGPIO@gpioNumber,w
  7246  0E23  00F0               	movwf	??i1_readGPIO
  7247  0E24  0870               	movf	??i1_readGPIO,w
  7248  0E25  00F6               	movwf	i1readGPIO@portNumber
  7249  0E26                     i1l2118:
  7250                           
  7251                           ;GPIO.c: 88:         portType = 0;
  7252  0E26  01F7               	clrf	i1readGPIO@portType
  7253  0E27                     i1l2120:
  7254                           
  7255                           ;GPIO.c: 91:     if(portType == 0){
  7256  0E27  0877               	movf	i1readGPIO@portType,w
  7257  0E28  1D03               	btfss	3,2
  7258  0E29  2E2B               	goto	u152_21
  7259  0E2A  2E2C               	goto	u152_20
  7260  0E2B                     u152_21:
  7261  0E2B  2E3F               	goto	i1l2132
  7262  0E2C                     u152_20:
  7263  0E2C                     i1l2122:
  7264                           
  7265                           ;GPIO.c: 92:         uint8_t readA = PORTA;
  7266  0E2C  0020               	movlb	0	; select bank0
  7267  0E2D  080C               	movf	12,w	;volatile
  7268  0E2E  00F0               	movwf	??i1_readGPIO
  7269  0E2F  0870               	movf	??i1_readGPIO,w
  7270  0E30  00F2               	movwf	i1readGPIO@readA
  7271  0E31                     i1l2124:
  7272                           
  7273                           ;GPIO.c: 93:         uint8_t returnValueA = ((readA >> ((uint8_t) portNumber)) & 1u);
  7274  0E31  0872               	movf	i1readGPIO@readA,w
  7275  0E32  00F0               	movwf	??i1_readGPIO
  7276  0E33  0A76               	incf	i1readGPIO@portNumber,w
  7277  0E34  2E36               	goto	u153_24
  7278  0E35                     u153_25:
  7279  0E35  36F0               	lsrf	??i1_readGPIO,f
  7280  0E36                     u153_24:
  7281  0E36  0B89               	decfsz	9,f
  7282  0E37  2E35               	goto	u153_25
  7283  0E38  0870               	movf	??i1_readGPIO,w
  7284  0E39  3901               	andlw	1
  7285  0E3A  00F1               	movwf	??i1_readGPIO+1
  7286  0E3B  0871               	movf	??i1_readGPIO+1,w
  7287  0E3C  00F3               	movwf	i1readGPIO@returnValueA
  7288  0E3D                     i1l2126:
  7289                           
  7290                           ;GPIO.c: 94:         return returnValueA;
  7291  0E3D  0873               	movf	i1readGPIO@returnValueA,w
  7292  0E3E  2E58               	goto	i1l344
  7293  0E3F                     i1l2132:
  7294  0E3F  0377               	decf	i1readGPIO@portType,w
  7295  0E40  1D03               	btfss	3,2
  7296  0E41  2E43               	goto	u154_21
  7297  0E42  2E44               	goto	u154_20
  7298  0E43                     u154_21:
  7299  0E43  2E57               	goto	i1l2144
  7300  0E44                     u154_20:
  7301  0E44                     i1l2134:
  7302                           
  7303                           ;GPIO.c: 97:         uint8_t readB = PORTB;
  7304  0E44  0020               	movlb	0	; select bank0
  7305  0E45  080D               	movf	13,w	;volatile
  7306  0E46  00F0               	movwf	??i1_readGPIO
  7307  0E47  0870               	movf	??i1_readGPIO,w
  7308  0E48  00F4               	movwf	i1readGPIO@readB
  7309  0E49                     i1l2136:
  7310                           
  7311                           ;GPIO.c: 98:         uint8_t returnValueB = ((readB >> ((uint8_t) portNumber)) & 1u);
  7312  0E49  0874               	movf	i1readGPIO@readB,w
  7313  0E4A  00F0               	movwf	??i1_readGPIO
  7314  0E4B  0A76               	incf	i1readGPIO@portNumber,w
  7315  0E4C  2E4E               	goto	u155_24
  7316  0E4D                     u155_25:
  7317  0E4D  36F0               	lsrf	??i1_readGPIO,f
  7318  0E4E                     u155_24:
  7319  0E4E  0B89               	decfsz	9,f
  7320  0E4F  2E4D               	goto	u155_25
  7321  0E50  0870               	movf	??i1_readGPIO,w
  7322  0E51  3901               	andlw	1
  7323  0E52  00F1               	movwf	??i1_readGPIO+1
  7324  0E53  0871               	movf	??i1_readGPIO+1,w
  7325  0E54  00F5               	movwf	i1readGPIO@returnValueB
  7326  0E55                     i1l2138:
  7327                           
  7328                           ;GPIO.c: 99:         return returnValueB;
  7329  0E55  0875               	movf	i1readGPIO@returnValueB,w
  7330  0E56  2E58               	goto	i1l344
  7331  0E57                     i1l2144:
  7332  0E57  3000               	movlw	0
  7333  0E58                     i1l344:
  7334  0E58  0008               	return
  7335  0E59                     __end_ofi1_readGPIO:
  7336                           
  7337                           	psect	text32
  7338  0DD5                     __ptext32:	
  7339 ;; *************** function _convertRawToMilliVolts *****************
  7340 ;; Defined at:
  7341 ;;		line 47 in file "Controller.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  rawValue        2   12[COMMON] unsigned short 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  vsenseMult      4    5[BANK0 ] long 
  7346 ;;  returnValued    2   11[BANK0 ] short 
  7347 ;;  offsetted       2    9[BANK0 ] short 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  2   12[COMMON] short 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7357 ;;      Params:         2       0       0       0       0       0
  7358 ;;      Locals:         0       8       0       0       0       0
  7359 ;;      Temps:          0       5       0       0       0       0
  7360 ;;      Totals:         2      13       0       0       0       0
  7361 ;;Total ram usage:       15 bytes
  7362 ;; Hardware stack levels used: 1
  7363 ;; Hardware stack levels required when called: 1
  7364 ;; This function calls:
  7365 ;;		___lmul
  7366 ;; This function is called by:
  7367 ;;		_runVoltageModeControl
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371  0DD5                     _convertRawToMilliVolts:	
  7372                           ;psect for function _convertRawToMilliVolts
  7373                           
  7374  0DD5                     i1l2076:	
  7375                           ;incstack = 0
  7376                           ; Regs used in _convertRawToMilliVolts: [wreg+status,2+status,0+pclath+cstack]
  7377                           
  7378                           
  7379                           ;Controller.c: 48:     int16_t offsetted = (int16_t)(rawValue) - 10u;
  7380  0DD5  087C               	movf	convertRawToMilliVolts@rawValue,w
  7381  0DD6  3EF6               	addlw	246
  7382  0DD7  0020               	movlb	0	; select bank0
  7383  0DD8  00A9               	movwf	convertRawToMilliVolts@offsetted
  7384  0DD9  30FF               	movlw	255
  7385  0DDA  3D7D               	addwfc	convertRawToMilliVolts@rawValue+1,w
  7386  0DDB  00AA               	movwf	convertRawToMilliVolts@offsetted+1
  7387  0DDC                     i1l2078:
  7388                           
  7389                           ;Controller.c: 49:     int32_t vsenseMult = ((int32_t)(((int32_t) offsetted) * 6100u));
  7390  0DDC  0829               	movf	convertRawToMilliVolts@offsetted,w
  7391  0DDD  00F0               	movwf	___lmul@multiplier
  7392  0DDE  082A               	movf	convertRawToMilliVolts@offsetted+1,w
  7393  0DDF  00F1               	movwf	___lmul@multiplier+1
  7394  0DE0  0D89               	rlf	9,f
  7395  0DE1  3B89               	subwfb	9,f
  7396  0DE2  0989               	comf	9,f
  7397  0DE3  00F2               	movwf	___lmul@multiplier+2
  7398  0DE4  00F3               	movwf	___lmul@multiplier+3
  7399  0DE5  3000               	movlw	0
  7400  0DE6  00F7               	movwf	___lmul@multiplicand+3
  7401  0DE7  3000               	movlw	0
  7402  0DE8  00F6               	movwf	___lmul@multiplicand+2
  7403  0DE9  3017               	movlw	23
  7404  0DEA  00F5               	movwf	___lmul@multiplicand+1
  7405  0DEB  30D4               	movlw	212
  7406  0DEC  00F4               	movwf	___lmul@multiplicand
  7407  0DED  318D  25A2  318D   	fcall	___lmul
  7408  0DF0  0873               	movf	?___lmul+3,w
  7409  0DF1  0020               	movlb	0	; select bank0
  7410  0DF2  00A8               	movwf	convertRawToMilliVolts@vsenseMult+3
  7411  0DF3  0872               	movf	?___lmul+2,w
  7412  0DF4  00A7               	movwf	convertRawToMilliVolts@vsenseMult+2
  7413  0DF5  0871               	movf	?___lmul+1,w
  7414  0DF6  00A6               	movwf	convertRawToMilliVolts@vsenseMult+1
  7415  0DF7  0870               	movf	?___lmul,w
  7416  0DF8  00A5               	movwf	convertRawToMilliVolts@vsenseMult
  7417  0DF9                     i1l2080:
  7418                           
  7419                           ;Controller.c: 50:     int16_t returnValuedV = (int16_t) (vsenseMult >> 8u);
  7420  0DF9  0825               	movf	convertRawToMilliVolts@vsenseMult,w
  7421  0DFA  00A0               	movwf	??_convertRawToMilliVolts
  7422  0DFB  0826               	movf	convertRawToMilliVolts@vsenseMult+1,w
  7423  0DFC  00A1               	movwf	??_convertRawToMilliVolts+1
  7424  0DFD  0827               	movf	convertRawToMilliVolts@vsenseMult+2,w
  7425  0DFE  00A2               	movwf	??_convertRawToMilliVolts+2
  7426  0DFF  0828               	movf	convertRawToMilliVolts@vsenseMult+3,w
  7427  0E00  00A3               	movwf	??_convertRawToMilliVolts+3
  7428  0E01  3008               	movlw	8
  7429  0E02  00A4               	movwf	??_convertRawToMilliVolts+4
  7430  0E03                     u146_25:
  7431  0E03  37A3               	asrf	??_convertRawToMilliVolts+3,f
  7432  0E04  0CA2               	rrf	??_convertRawToMilliVolts+2,f
  7433  0E05  0CA1               	rrf	??_convertRawToMilliVolts+1,f
  7434  0E06  0CA0               	rrf	??_convertRawToMilliVolts,f
  7435  0E07                     u146_20:
  7436  0E07  0BA4               	decfsz	??_convertRawToMilliVolts+4,f
  7437  0E08  2E03               	goto	u146_25
  7438  0E09  0821               	movf	??_convertRawToMilliVolts+1,w
  7439  0E0A  00AC               	movwf	convertRawToMilliVolts@returnValuedV+1
  7440  0E0B  0820               	movf	??_convertRawToMilliVolts,w
  7441  0E0C  00AB               	movwf	convertRawToMilliVolts@returnValuedV
  7442  0E0D                     i1l2082:
  7443                           
  7444                           ;Controller.c: 51:     return returnValuedV;
  7445  0E0D  082C               	movf	convertRawToMilliVolts@returnValuedV+1,w
  7446  0E0E  00FD               	movwf	?_convertRawToMilliVolts+1
  7447  0E0F  082B               	movf	convertRawToMilliVolts@returnValuedV,w
  7448  0E10  00FC               	movwf	?_convertRawToMilliVolts
  7449  0E11                     i1l464:
  7450  0E11  0008               	return
  7451  0E12                     __end_of_convertRawToMilliVolts:
  7452                           
  7453                           	psect	text33
  7454  0DA2                     __ptext33:	
  7455 ;; *************** function ___lmul *****************
  7456 ;; Defined at:
  7457 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  multiplier      4    0[COMMON] unsigned long 
  7460 ;;  multiplicand    4    4[COMMON] unsigned long 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  product         4    8[COMMON] unsigned long 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  4    0[COMMON] unsigned long 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7472 ;;      Params:         8       0       0       0       0       0
  7473 ;;      Locals:         4       0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0
  7475 ;;      Totals:        12       0       0       0       0       0
  7476 ;;Total ram usage:       12 bytes
  7477 ;; Hardware stack levels used: 1
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_runPotScaling
  7482 ;;		_convertRawToMilliVolts
  7483 ;;		_runVoltageModeControl
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487  0DA2                     ___lmul:	
  7488                           ;psect for function ___lmul
  7489                           
  7490  0DA2                     i1l2034:	
  7491                           ;incstack = 0
  7492                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7493                           
  7494  0DA2  3000               	movlw	0
  7495  0DA3  00FB               	movwf	___lmul@product+3
  7496  0DA4  3000               	movlw	0
  7497  0DA5  00FA               	movwf	___lmul@product+2
  7498  0DA6  3000               	movlw	0
  7499  0DA7  00F9               	movwf	___lmul@product+1
  7500  0DA8  3000               	movlw	0
  7501  0DA9  00F8               	movwf	___lmul@product
  7502  0DAA                     i1l2036:
  7503  0DAA  1C70               	btfss	___lmul@multiplier,0
  7504  0DAB  2DAD               	goto	u133_21
  7505  0DAC  2DAE               	goto	u133_20
  7506  0DAD                     u133_21:
  7507  0DAD  2DB6               	goto	i1l2040
  7508  0DAE                     u133_20:
  7509  0DAE                     i1l2038:
  7510  0DAE  0874               	movf	___lmul@multiplicand,w
  7511  0DAF  07F8               	addwf	___lmul@product,f
  7512  0DB0  0875               	movf	___lmul@multiplicand+1,w
  7513  0DB1  3DF9               	addwfc	___lmul@product+1,f
  7514  0DB2  0876               	movf	___lmul@multiplicand+2,w
  7515  0DB3  3DFA               	addwfc	___lmul@product+2,f
  7516  0DB4  0877               	movf	___lmul@multiplicand+3,w
  7517  0DB5  3DFB               	addwfc	___lmul@product+3,f
  7518  0DB6                     i1l2040:
  7519  0DB6  3001               	movlw	1
  7520  0DB7                     u134_25:
  7521  0DB7  35F4               	lslf	___lmul@multiplicand,f
  7522  0DB8  0DF5               	rlf	___lmul@multiplicand+1,f
  7523  0DB9  0DF6               	rlf	___lmul@multiplicand+2,f
  7524  0DBA  0DF7               	rlf	___lmul@multiplicand+3,f
  7525  0DBB  0B89               	decfsz	9,f
  7526  0DBC  2DB7               	goto	u134_25
  7527  0DBD                     i1l2042:
  7528  0DBD  3001               	movlw	1
  7529  0DBE                     u135_25:
  7530  0DBE  36F3               	lsrf	___lmul@multiplier+3,f
  7531  0DBF  0CF2               	rrf	___lmul@multiplier+2,f
  7532  0DC0  0CF1               	rrf	___lmul@multiplier+1,f
  7533  0DC1  0CF0               	rrf	___lmul@multiplier,f
  7534  0DC2  0B89               	decfsz	9,f
  7535  0DC3  2DBE               	goto	u135_25
  7536  0DC4  0873               	movf	___lmul@multiplier+3,w
  7537  0DC5  0472               	iorwf	___lmul@multiplier+2,w
  7538  0DC6  0471               	iorwf	___lmul@multiplier+1,w
  7539  0DC7  0470               	iorwf	___lmul@multiplier,w
  7540  0DC8  1D03               	skipz
  7541  0DC9  2DCB               	goto	u136_21
  7542  0DCA  2DCC               	goto	u136_20
  7543  0DCB                     u136_21:
  7544  0DCB  2DAA               	goto	i1l2036
  7545  0DCC                     u136_20:
  7546  0DCC                     i1l2044:
  7547  0DCC  087B               	movf	___lmul@product+3,w
  7548  0DCD  00F3               	movwf	?___lmul+3
  7549  0DCE  087A               	movf	___lmul@product+2,w
  7550  0DCF  00F2               	movwf	?___lmul+2
  7551  0DD0  0879               	movf	___lmul@product+1,w
  7552  0DD1  00F1               	movwf	?___lmul+1
  7553  0DD2  0878               	movf	___lmul@product,w
  7554  0DD3  00F0               	movwf	?___lmul
  7555  0DD4                     i1l743:
  7556  0DD4  0008               	return
  7557  0DD5                     __end_of___lmul:
  7558                           
  7559                           	psect	text34
  7560  0CA6                     __ptext34:	
  7561 ;; *************** function _abs *****************
  7562 ;; Defined at:
  7563 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  a               2    0[COMMON] int 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;		None
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  2    0[COMMON] int 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7577 ;;      Params:         2       0       0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0       0
  7579 ;;      Temps:          2       0       0       0       0       0
  7580 ;;      Totals:         4       0       0       0       0       0
  7581 ;;Total ram usage:        4 bytes
  7582 ;; Hardware stack levels used: 1
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		_runVoltageModeControl
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590  0CA6                     _abs:	
  7591                           ;psect for function _abs
  7592                           
  7593  0CA6                     i1l2086:	
  7594                           ;incstack = 0
  7595                           ; Regs used in _abs: [wreg+status,2+status,0]
  7596                           
  7597  0CA6  0871               	movf	abs@a+1,w
  7598  0CA7  3A80               	xorlw	128
  7599  0CA8  00F2               	movwf	??_abs
  7600  0CA9  3080               	movlw	128
  7601  0CAA  0272               	subwf	??_abs,w
  7602  0CAB  1D03               	skipz
  7603  0CAC  2CAF               	goto	u147_25
  7604  0CAD  3001               	movlw	1
  7605  0CAE  0270               	subwf	abs@a,w
  7606  0CAF                     u147_25:
  7607  0CAF  1803               	skipnc
  7608  0CB0  2CB2               	goto	u147_21
  7609  0CB1  2CB3               	goto	u147_20
  7610  0CB2                     u147_21:
  7611  0CB2  2CBF               	goto	i1l1189
  7612  0CB3                     u147_20:
  7613  0CB3                     i1l2088:
  7614  0CB3  0970               	comf	abs@a,w
  7615  0CB4  00F2               	movwf	??_abs
  7616  0CB5  0971               	comf	abs@a+1,w
  7617  0CB6  00F3               	movwf	??_abs+1
  7618  0CB7  0AF2               	incf	??_abs,f
  7619  0CB8  1903               	skipnz
  7620  0CB9  0AF3               	incf	??_abs+1,f
  7621  0CBA  0872               	movf	??_abs,w
  7622  0CBB  00F0               	movwf	?_abs
  7623  0CBC  0873               	movf	??_abs+1,w
  7624  0CBD  00F1               	movwf	?_abs+1
  7625  0CBE  2CBF               	goto	i1l1192
  7626  0CBF                     i1l1189:
  7627  0CBF                     i1l1192:
  7628  0CBF  0008               	return
  7629  0CC0                     __end_of_abs:
  7630                           
  7631                           	psect	text35
  7632  0EA3                     __ptext35:	
  7633 ;; *************** function ___omul *****************
  7634 ;; Defined at:
  7635 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul64.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  multiplier      8    0[BANK0 ] unsigned long long 
  7638 ;;  multiplicand    8    8[BANK0 ] unsigned long long 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;  product         8    1[COMMON] unsigned long long 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  8    0[BANK0 ] unsigned long long 
  7643 ;; Registers used:
  7644 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7650 ;;      Params:         0      16       0       0       0       0
  7651 ;;      Locals:         8       0       0       0       0       0
  7652 ;;      Temps:          1       0       0       0       0       0
  7653 ;;      Totals:         9      16       0       0       0       0
  7654 ;;Total ram usage:       25 bytes
  7655 ;; Hardware stack levels used: 1
  7656 ;; This function calls:
  7657 ;;		Nothing
  7658 ;; This function is called by:
  7659 ;;		_runVoltageModeControl
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663  0EA3                     ___omul:	
  7664                           ;psect for function ___omul
  7665                           
  7666  0EA3                     i1l2098:	
  7667                           ;incstack = 0
  7668                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  7669                           
  7670  0EA3  3071               	movlw	low ___omul@product
  7671  0EA4  0086               	movwf	6
  7672  0EA5  3000               	movlw	high ___omul@product
  7673  0EA6  0087               	movwf	7
  7674  0EA7  3008               	movlw	8
  7675  0EA8  00F0               	movwf	??___omul
  7676  0EA9  3000               	movlw	0
  7677  0EAA                     u148_20:
  7678  0EAA  001E               	movwi fsr1++
  7679  0EAB  0BF0               	decfsz	??___omul,f
  7680  0EAC  2EAA               	goto	u148_20
  7681  0EAD                     i1l2100:
  7682  0EAD  0020               	movlb	0	; select bank0
  7683  0EAE  1C20               	btfss	___omul@multiplier,0
  7684  0EAF  2EB1               	goto	u149_21
  7685  0EB0  2EB2               	goto	u149_20
  7686  0EB1                     u149_21:
  7687  0EB1  2EC2               	goto	i1l2104
  7688  0EB2                     u149_20:
  7689  0EB2                     i1l2102:
  7690  0EB2  0828               	movf	___omul@multiplicand,w
  7691  0EB3  07F1               	addwf	___omul@product,f
  7692  0EB4  0829               	movf	___omul@multiplicand+1,w
  7693  0EB5  3DF2               	addwfc	___omul@product+1,f
  7694  0EB6  082A               	movf	___omul@multiplicand+2,w
  7695  0EB7  3DF3               	addwfc	___omul@product+2,f
  7696  0EB8  082B               	movf	___omul@multiplicand+3,w
  7697  0EB9  3DF4               	addwfc	___omul@product+3,f
  7698  0EBA  082C               	movf	___omul@multiplicand+4,w
  7699  0EBB  3DF5               	addwfc	___omul@product+4,f
  7700  0EBC  082D               	movf	___omul@multiplicand+5,w
  7701  0EBD  3DF6               	addwfc	___omul@product+5,f
  7702  0EBE  082E               	movf	___omul@multiplicand+6,w
  7703  0EBF  3DF7               	addwfc	___omul@product+6,f
  7704  0EC0  082F               	movf	___omul@multiplicand+7,w
  7705  0EC1  3DF8               	addwfc	___omul@product+7,f
  7706  0EC2                     i1l2104:
  7707  0EC2  35A8               	lslf	___omul@multiplicand,f
  7708  0EC3  0DA9               	rlf	___omul@multiplicand+1,f
  7709  0EC4  0DAA               	rlf	___omul@multiplicand+2,f
  7710  0EC5  0DAB               	rlf	___omul@multiplicand+3,f
  7711  0EC6  0DAC               	rlf	___omul@multiplicand+4,f
  7712  0EC7  0DAD               	rlf	___omul@multiplicand+5,f
  7713  0EC8  0DAE               	rlf	___omul@multiplicand+6,f
  7714  0EC9  0DAF               	rlf	___omul@multiplicand+7,f
  7715  0ECA                     i1l2106:
  7716  0ECA  36A7               	lsrf	___omul@multiplier+7,f
  7717  0ECB  0CA6               	rrf	___omul@multiplier+6,f
  7718  0ECC  0CA5               	rrf	___omul@multiplier+5,f
  7719  0ECD  0CA4               	rrf	___omul@multiplier+4,f
  7720  0ECE  0CA3               	rrf	___omul@multiplier+3,f
  7721  0ECF  0CA2               	rrf	___omul@multiplier+2,f
  7722  0ED0  0CA1               	rrf	___omul@multiplier+1,f
  7723  0ED1  0CA0               	rrf	___omul@multiplier,f
  7724  0ED2  0820               	movf	___omul@multiplier,w
  7725  0ED3  0421               	iorwf	___omul@multiplier+1,w
  7726  0ED4  0422               	iorwf	___omul@multiplier+2,w
  7727  0ED5  0423               	iorwf	___omul@multiplier+3,w
  7728  0ED6  0424               	iorwf	___omul@multiplier+4,w
  7729  0ED7  0425               	iorwf	___omul@multiplier+5,w
  7730  0ED8  0426               	iorwf	___omul@multiplier+6,w
  7731  0ED9  0427               	iorwf	___omul@multiplier+7,w
  7732  0EDA  1D03               	skipz
  7733  0EDB  2EDD               	goto	u150_21
  7734  0EDC  2EDE               	goto	u150_20
  7735  0EDD                     u150_21:
  7736  0EDD  2EAD               	goto	i1l2100
  7737  0EDE                     u150_20:
  7738  0EDE                     i1l748:
  7739  0EDE  0871               	movf	___omul@product,w
  7740  0EDF  00A0               	movwf	?___omul
  7741  0EE0  0872               	movf	___omul@product+1,w
  7742  0EE1  00A1               	movwf	?___omul+1
  7743  0EE2  0873               	movf	___omul@product+2,w
  7744  0EE3  00A2               	movwf	?___omul+2
  7745  0EE4  0874               	movf	___omul@product+3,w
  7746  0EE5  00A3               	movwf	?___omul+3
  7747  0EE6  0875               	movf	___omul@product+4,w
  7748  0EE7  00A4               	movwf	?___omul+4
  7749  0EE8  0876               	movf	___omul@product+5,w
  7750  0EE9  00A5               	movwf	?___omul+5
  7751  0EEA  0877               	movf	___omul@product+6,w
  7752  0EEB  00A6               	movwf	?___omul+6
  7753  0EEC  0878               	movf	___omul@product+7,w
  7754  0EED  00A7               	movwf	?___omul+7
  7755  0EEE                     i1l749:
  7756  0EEE  0008               	return
  7757  0EEF                     __end_of___omul:
  7758                           
  7759                           	psect	text36
  7760  0C3F                     __ptext36:	
  7761 ;; *************** function _runCurrentModeControl *****************
  7762 ;; Defined at:
  7763 ;;		line 128 in file "Controller.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;		None
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  newCurrent      2    0        short 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      void 
  7770 ;; Registers used:
  7771 ;;		wreg, status,2, status,0, pclath, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7777 ;;      Params:         0       0       0       0       0       0
  7778 ;;      Locals:         0       0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0
  7780 ;;      Totals:         0       0       0       0       0       0
  7781 ;;Total ram usage:        0 bytes
  7782 ;; Hardware stack levels used: 1
  7783 ;; Hardware stack levels required when called: 2
  7784 ;; This function calls:
  7785 ;;		_convertRawToMilliAmps
  7786 ;; This function is called by:
  7787 ;;		_controlRoutine
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791  0C3F                     _runCurrentModeControl:	
  7792                           ;psect for function _runCurrentModeControl
  7793                           
  7794  0C3F                     i1l2294:	
  7795                           ;incstack = 0
  7796                           ; Regs used in _runCurrentModeControl: [wreg+status,2+status,0+pclath+cstack]
  7797                           
  7798  0C3F  0020               	movlb	0	; select bank0
  7799  0C40  0862               	movf	_filteredIL+1,w
  7800  0C41  00F7               	movwf	convertRawToMilliAmps@rawValue+1
  7801  0C42  0861               	movf	_filteredIL,w
  7802  0C43  00F6               	movwf	convertRawToMilliAmps@rawValue
  7803  0C44  318C  248C  318C   	fcall	_convertRawToMilliAmps
  7804  0C47                     i1l483:
  7805  0C47  0008               	return
  7806  0C48                     __end_of_runCurrentModeControl:
  7807                           
  7808                           	psect	text37
  7809  0C8C                     __ptext37:	
  7810 ;; *************** function _convertRawToMilliAmps *****************
  7811 ;; Defined at:
  7812 ;;		line 81 in file "CurrentSensor.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  rawValue        2    6[COMMON] unsigned short 
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;  returnValuem    2   10[COMMON] short 
  7817 ;;  offsetted       2    8[COMMON] short 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  2    6[COMMON] short 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7827 ;;      Params:         2       0       0       0       0       0
  7828 ;;      Locals:         4       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0
  7830 ;;      Totals:         6       0       0       0       0       0
  7831 ;;Total ram usage:        6 bytes
  7832 ;; Hardware stack levels used: 1
  7833 ;; Hardware stack levels required when called: 1
  7834 ;; This function calls:
  7835 ;;		___wmul
  7836 ;; This function is called by:
  7837 ;;		_runCurrentModeControl
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841  0C8C                     _convertRawToMilliAmps:	
  7842                           ;psect for function _convertRawToMilliAmps
  7843                           
  7844  0C8C                     i1l2090:	
  7845                           ;incstack = 0
  7846                           ; Regs used in _convertRawToMilliAmps: [wreg+status,2+status,0+pclath+cstack]
  7847                           
  7848                           
  7849                           ;CurrentSensor.c: 82:     int16_t offsetted = (int16_t)(rawValue - 445);
  7850  0C8C  0876               	movf	convertRawToMilliAmps@rawValue,w
  7851  0C8D  3E43               	addlw	67
  7852  0C8E  00F8               	movwf	convertRawToMilliAmps@offsetted
  7853  0C8F  30FE               	movlw	254
  7854  0C90  3D77               	addwfc	convertRawToMilliAmps@rawValue+1,w
  7855  0C91  00F9               	movwf	convertRawToMilliAmps@offsetted+1
  7856  0C92                     i1l2092:
  7857                           
  7858                           ;CurrentSensor.c: 83:     int16_t returnValuemA = (int32_t)(offsetted * 2857) >> 0;
  7859  0C92  0879               	movf	convertRawToMilliAmps@offsetted+1,w
  7860  0C93  00F1               	movwf	___wmul@multiplier+1
  7861  0C94  0878               	movf	convertRawToMilliAmps@offsetted,w
  7862  0C95  00F0               	movwf	___wmul@multiplier
  7863  0C96  3029               	movlw	41
  7864  0C97  00F2               	movwf	___wmul@multiplicand
  7865  0C98  300B               	movlw	11
  7866  0C99  00F3               	movwf	___wmul@multiplicand+1
  7867  0C9A  318C  24DC  318C   	fcall	___wmul
  7868  0C9D  0871               	movf	?___wmul+1,w
  7869  0C9E  00FB               	movwf	convertRawToMilliAmps@returnValuemA+1
  7870  0C9F  0870               	movf	?___wmul,w
  7871  0CA0  00FA               	movwf	convertRawToMilliAmps@returnValuemA
  7872  0CA1                     i1l2094:
  7873                           
  7874                           ;CurrentSensor.c: 84:     return returnValuemA;
  7875  0CA1  087B               	movf	convertRawToMilliAmps@returnValuemA+1,w
  7876  0CA2  00F7               	movwf	?_convertRawToMilliAmps+1
  7877  0CA3  087A               	movf	convertRawToMilliAmps@returnValuemA,w
  7878  0CA4  00F6               	movwf	?_convertRawToMilliAmps
  7879  0CA5                     i1l553:
  7880  0CA5  0008               	return
  7881  0CA6                     __end_of_convertRawToMilliAmps:
  7882                           
  7883                           	psect	text38
  7884  0CDC                     __ptext38:	
  7885 ;; *************** function ___wmul *****************
  7886 ;; Defined at:
  7887 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  multiplier      2    0[COMMON] unsigned int 
  7890 ;;  multiplicand    2    2[COMMON] unsigned int 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  product         2    4[COMMON] unsigned int 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  2    0[COMMON] unsigned int 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2, status,0
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7902 ;;      Params:         4       0       0       0       0       0
  7903 ;;      Locals:         2       0       0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0
  7905 ;;      Totals:         6       0       0       0       0       0
  7906 ;;Total ram usage:        6 bytes
  7907 ;; Hardware stack levels used: 1
  7908 ;; This function calls:
  7909 ;;		Nothing
  7910 ;; This function is called by:
  7911 ;;		_runPotScaling
  7912 ;;		_controlRoutine
  7913 ;;		_convertRawToMilliAmps
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917  0CDC                     ___wmul:	
  7918                           ;psect for function ___wmul
  7919                           
  7920  0CDC                     i1l2020:	
  7921                           ;incstack = 0
  7922                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7923                           
  7924  0CDC  01F4               	clrf	___wmul@product
  7925  0CDD  01F5               	clrf	___wmul@product+1
  7926  0CDE                     i1l2022:
  7927  0CDE  1C70               	btfss	___wmul@multiplier,0
  7928  0CDF  2CE1               	goto	u129_21
  7929  0CE0  2CE2               	goto	u129_20
  7930  0CE1                     u129_21:
  7931  0CE1  2CE6               	goto	i1l729
  7932  0CE2                     u129_20:
  7933  0CE2                     i1l2024:
  7934  0CE2  0872               	movf	___wmul@multiplicand,w
  7935  0CE3  07F4               	addwf	___wmul@product,f
  7936  0CE4  0873               	movf	___wmul@multiplicand+1,w
  7937  0CE5  3DF5               	addwfc	___wmul@product+1,f
  7938  0CE6                     i1l729:
  7939  0CE6  3001               	movlw	1
  7940  0CE7                     u130_25:
  7941  0CE7  35F2               	lslf	___wmul@multiplicand,f
  7942  0CE8  0DF3               	rlf	___wmul@multiplicand+1,f
  7943  0CE9  0B89               	decfsz	9,f
  7944  0CEA  2CE7               	goto	u130_25
  7945  0CEB                     i1l2026:
  7946  0CEB  3001               	movlw	1
  7947  0CEC                     u131_25:
  7948  0CEC  36F1               	lsrf	___wmul@multiplier+1,f
  7949  0CED  0CF0               	rrf	___wmul@multiplier,f
  7950  0CEE  0B89               	decfsz	9,f
  7951  0CEF  2CEC               	goto	u131_25
  7952  0CF0                     i1l2028:
  7953  0CF0  0870               	movf	___wmul@multiplier,w
  7954  0CF1  0471               	iorwf	___wmul@multiplier+1,w
  7955  0CF2  1D03               	btfss	3,2
  7956  0CF3  2CF5               	goto	u132_21
  7957  0CF4  2CF6               	goto	u132_20
  7958  0CF5                     u132_21:
  7959  0CF5  2CDE               	goto	i1l2022
  7960  0CF6                     u132_20:
  7961  0CF6                     i1l2030:
  7962  0CF6  0875               	movf	___wmul@product+1,w
  7963  0CF7  00F1               	movwf	?___wmul+1
  7964  0CF8  0874               	movf	___wmul@product,w
  7965  0CF9  00F0               	movwf	?___wmul
  7966  0CFA                     i1l731:
  7967  0CFA  0008               	return
  7968  0CFB                     __end_of___wmul:
  7969                           
  7970                           	psect	text39
  7971  0EEF                     __ptext39:	
  7972 ;; *************** function ___lldiv *****************
  7973 ;; Defined at:
  7974 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  divisor         4    6[COMMON] unsigned long 
  7977 ;;  dividend        4   10[COMMON] unsigned long 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  quotient        4    1[BANK0 ] unsigned long 
  7980 ;;  counter         1    5[BANK0 ] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  4    6[COMMON] unsigned long 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7990 ;;      Params:         8       0       0       0       0       0
  7991 ;;      Locals:         0       5       0       0       0       0
  7992 ;;      Temps:          0       1       0       0       0       0
  7993 ;;      Totals:         8       6       0       0       0       0
  7994 ;;Total ram usage:       14 bytes
  7995 ;; Hardware stack levels used: 1
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_runPotScaling
  8000 ;;		_controlRoutine
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004  0EEF                     ___lldiv:	
  8005                           ;psect for function ___lldiv
  8006                           
  8007  0EEF                     i1l2296:	
  8008                           ;incstack = 0
  8009                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8010                           
  8011  0EEF  3000               	movlw	0
  8012  0EF0  0020               	movlb	0	; select bank0
  8013  0EF1  00A4               	movwf	___lldiv@quotient+3
  8014  0EF2  3000               	movlw	0
  8015  0EF3  00A3               	movwf	___lldiv@quotient+2
  8016  0EF4  3000               	movlw	0
  8017  0EF5  00A2               	movwf	___lldiv@quotient+1
  8018  0EF6  3000               	movlw	0
  8019  0EF7  00A1               	movwf	___lldiv@quotient
  8020  0EF8  0879               	movf	___lldiv@divisor+3,w
  8021  0EF9  0478               	iorwf	___lldiv@divisor+2,w
  8022  0EFA  0477               	iorwf	___lldiv@divisor+1,w
  8023  0EFB  0476               	iorwf	___lldiv@divisor,w
  8024  0EFC  1903               	skipnz
  8025  0EFD  2EFF               	goto	u191_21
  8026  0EFE  2F00               	goto	u191_20
  8027  0EFF                     u191_21:
  8028  0EFF  2F41               	goto	i1l2316
  8029  0F00                     u191_20:
  8030  0F00                     i1l2298:
  8031  0F00  01A5               	clrf	___lldiv@counter
  8032  0F01  0AA5               	incf	___lldiv@counter,f
  8033  0F02  2F0E               	goto	i1l2302
  8034  0F03                     i1l2300:
  8035  0F03  3001               	movlw	1
  8036  0F04                     u192_25:
  8037  0F04  35F6               	lslf	___lldiv@divisor,f
  8038  0F05  0DF7               	rlf	___lldiv@divisor+1,f
  8039  0F06  0DF8               	rlf	___lldiv@divisor+2,f
  8040  0F07  0DF9               	rlf	___lldiv@divisor+3,f
  8041  0F08  0B89               	decfsz	9,f
  8042  0F09  2F04               	goto	u192_25
  8043  0F0A  3001               	movlw	1
  8044  0F0B  00A0               	movwf	??___lldiv
  8045  0F0C  0820               	movf	??___lldiv,w
  8046  0F0D  07A5               	addwf	___lldiv@counter,f
  8047  0F0E                     i1l2302:
  8048  0F0E  1FF9               	btfss	___lldiv@divisor+3,7
  8049  0F0F  2F11               	goto	u193_21
  8050  0F10  2F12               	goto	u193_20
  8051  0F11                     u193_21:
  8052  0F11  2F03               	goto	i1l2300
  8053  0F12                     u193_20:
  8054  0F12                     i1l2304:
  8055  0F12  3001               	movlw	1
  8056  0F13                     u194_25:
  8057  0F13  35A1               	lslf	___lldiv@quotient,f
  8058  0F14  0DA2               	rlf	___lldiv@quotient+1,f
  8059  0F15  0DA3               	rlf	___lldiv@quotient+2,f
  8060  0F16  0DA4               	rlf	___lldiv@quotient+3,f
  8061  0F17  0B89               	decfsz	9,f
  8062  0F18  2F13               	goto	u194_25
  8063  0F19                     i1l2306:
  8064  0F19  0879               	movf	___lldiv@divisor+3,w
  8065  0F1A  027D               	subwf	___lldiv@dividend+3,w
  8066  0F1B  1D03               	skipz
  8067  0F1C  2F27               	goto	u195_25
  8068  0F1D  0878               	movf	___lldiv@divisor+2,w
  8069  0F1E  027C               	subwf	___lldiv@dividend+2,w
  8070  0F1F  1D03               	skipz
  8071  0F20  2F27               	goto	u195_25
  8072  0F21  0877               	movf	___lldiv@divisor+1,w
  8073  0F22  027B               	subwf	___lldiv@dividend+1,w
  8074  0F23  1D03               	skipz
  8075  0F24  2F27               	goto	u195_25
  8076  0F25  0876               	movf	___lldiv@divisor,w
  8077  0F26  027A               	subwf	___lldiv@dividend,w
  8078  0F27                     u195_25:
  8079  0F27  1C03               	skipc
  8080  0F28  2F2A               	goto	u195_21
  8081  0F29  2F2B               	goto	u195_20
  8082  0F2A                     u195_21:
  8083  0F2A  2F34               	goto	i1l2312
  8084  0F2B                     u195_20:
  8085  0F2B                     i1l2308:
  8086  0F2B  0876               	movf	___lldiv@divisor,w
  8087  0F2C  02FA               	subwf	___lldiv@dividend,f
  8088  0F2D  0877               	movf	___lldiv@divisor+1,w
  8089  0F2E  3BFB               	subwfb	___lldiv@dividend+1,f
  8090  0F2F  0878               	movf	___lldiv@divisor+2,w
  8091  0F30  3BFC               	subwfb	___lldiv@dividend+2,f
  8092  0F31  0879               	movf	___lldiv@divisor+3,w
  8093  0F32  3BFD               	subwfb	___lldiv@dividend+3,f
  8094  0F33                     i1l2310:
  8095  0F33  1421               	bsf	___lldiv@quotient,0
  8096  0F34                     i1l2312:
  8097  0F34  3001               	movlw	1
  8098  0F35                     u196_25:
  8099  0F35  36F9               	lsrf	___lldiv@divisor+3,f
  8100  0F36  0CF8               	rrf	___lldiv@divisor+2,f
  8101  0F37  0CF7               	rrf	___lldiv@divisor+1,f
  8102  0F38  0CF6               	rrf	___lldiv@divisor,f
  8103  0F39  0B89               	decfsz	9,f
  8104  0F3A  2F35               	goto	u196_25
  8105  0F3B                     i1l2314:
  8106  0F3B  3001               	movlw	1
  8107  0F3C  02A5               	subwf	___lldiv@counter,f
  8108  0F3D  1D03               	btfss	3,2
  8109  0F3E  2F40               	goto	u197_21
  8110  0F3F  2F41               	goto	u197_20
  8111  0F40                     u197_21:
  8112  0F40  2F12               	goto	i1l2304
  8113  0F41                     u197_20:
  8114  0F41                     i1l2316:
  8115  0F41  0824               	movf	___lldiv@quotient+3,w
  8116  0F42  00F9               	movwf	?___lldiv+3
  8117  0F43  0823               	movf	___lldiv@quotient+2,w
  8118  0F44  00F8               	movwf	?___lldiv+2
  8119  0F45  0822               	movf	___lldiv@quotient+1,w
  8120  0F46  00F7               	movwf	?___lldiv+1
  8121  0F47  0821               	movf	___lldiv@quotient,w
  8122  0F48  00F6               	movwf	?___lldiv
  8123  0F49                     i1l765:
  8124  0F49  0008               	return
  8125  0F4A                     __end_of___lldiv:
  8126  007E                     btemp	set	126	;btemp
  8127  007E                     int$flags	set	126
  8128  007E                     wtemp0	set	126
  8129                           
  8130                           	psect	idloc
  8131                           
  8132                           ;Config register IDLOC0 @ 0x8000
  8133                           ;	unspecified, using default values
  8134  8000                     	org	32768
  8135  8000  3FFF               	dw	16383
  8136                           
  8137                           ;Config register IDLOC1 @ 0x8001
  8138                           ;	unspecified, using default values
  8139  8001                     	org	32769
  8140  8001  3FFF               	dw	16383
  8141                           
  8142                           ;Config register IDLOC2 @ 0x8002
  8143                           ;	unspecified, using default values
  8144  8002                     	org	32770
  8145  8002  3FFF               	dw	16383
  8146                           
  8147                           ;Config register IDLOC3 @ 0x8003
  8148                           ;	unspecified, using default values
  8149  8003                     	org	32771
  8150  8003  3FFF               	dw	16383
  8151                           
  8152                           	psect	config
  8153                           
  8154                           ;Config register CONFIG1 @ 0x8007
  8155                           ;	Oscillator Selection
  8156                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8157                           ;	Watchdog Timer Enable
  8158                           ;	WDTE = OFF, WDT disabled
  8159                           ;	Power-up Timer Enable
  8160                           ;	PWRTE = OFF, PWRT disabled
  8161                           ;	MCLR Pin Function Select
  8162                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  8163                           ;	Flash Program Memory Code Protection
  8164                           ;	CP = OFF, Program memory code protection is disabled
  8165                           ;	Data Memory Code Protection
  8166                           ;	CPD = OFF, Data memory code protection is disabled
  8167                           ;	Brown-out Reset Enable
  8168                           ;	BOREN = ON, Brown-out Reset enabled
  8169                           ;	Clock Out Enable
  8170                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8171                           ;	Internal/External Switchover
  8172                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8173                           ;	Fail-Safe Clock Monitor Enable
  8174                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8175  8007                     	org	32775
  8176  8007  0FA4               	dw	4004
  8177                           
  8178                           ;Config register CONFIG2 @ 0x8008
  8179                           ;	Flash Memory Self-Write Protection
  8180                           ;	WRT = OFF, Write protection off
  8181                           ;	PLL Enable
  8182                           ;	PLLEN = OFF, 4x PLL disabled
  8183                           ;	Stack Overflow/Underflow Reset Enable
  8184                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  8185                           ;	Brown-out Reset Voltage Selection
  8186                           ;	BORV = 0x1, unprogrammed default
  8187                           ;	Low-Voltage Programming Enable
  8188                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8189  8008                     	org	32776
  8190  8008  1CFF               	dw	7423

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         245
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      80
    BANK1            80     13      79
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            48      0      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Tick980Hz in COMMON

    i1_currentTripReset->i1_writeGPIO
    _runPotScaling->___lldiv
    _readFilteredVout->_readADCRaw
    _readFilteredFreqPot->_readADCRaw
    _readFilteredDutyPot->_readADCRaw
    _currentTripRead->i1_readGPIO
    _controlRoutine->___lldiv
    _runVoltageModeControl->_convertRawToMilliVolts
    _convertRawToMilliVolts->___lmul
    _runCurrentModeControl->_convertRawToMilliAmps
    _convertRawToMilliAmps->___wmul
    ___lldiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _Tick980Hz in BANK0

    _Tick980Hz->_controlRoutine
    _runPotScaling->___lldiv
    _controlRoutine->_runVoltageModeControl
    _runVoltageModeControl->___omul

Critical Paths under _main in BANK1

    _main->_readGPIO
    _setupPWM->_initialiseGPIO
    _initialisePotentiometers->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseADCPin
    _initialiseCurrentSensors->_initialiseGPIO
    _currentTripReset->_writeGPIO
    _initialiseController->_initialiseADCPin
    _initialiseController->_initialiseGPIO

Critical Paths under _Tick980Hz in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Tick980Hz in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Tick980Hz in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Tick980Hz in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    4585
                                              9 BANK1      4     0      4
                _initialiseADCModule
               _initialiseController
           _initialiseCurrentSensors
                     _initialiseGPIO
           _initialisePotentiometers
                           _readGPIO
            _setupInternalOscillator
                           _setupPWM
               _setupTimer0Interrupt
          _transToCurrentModeControl
                  _transToPotControl
          _transToVoltageModeControl
 ---------------------------------------------------------------------------------
 (1) _transToVoltageModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _transToPotControl                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _transToCurrentModeControl                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0     748
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (1) _setupInternalOscillator                              3     3      0      22
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _readGPIO                                             9     9      0     252
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (1) _initialisePotentiometers                             0     0      0     273
                   _initialiseADCPin
 ---------------------------------------------------------------------------------
 (1) _initialiseCurrentSensors                             0     0      0    1521
                   _currentTripReset
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _currentTripReset                                     0     0      0     500
                          _writeGPIO
 ---------------------------------------------------------------------------------
 (3) _writeGPIO                                            6     5      1     500
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (1) _initialiseController                                 0     0      0    1021
                   _initialiseADCPin
                     _initialiseGPIO
 ---------------------------------------------------------------------------------
 (2) _initialiseGPIO                                       6     5      1     748
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _initialiseADCPin                                     6     6      0     273
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initialiseADCModule                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Tick980Hz                                            1     1      0   11732
                                             60 BANK0      1     1      0
                     _controlRoutine
                    _currentTripRead
                _readFilteredDutyPot
                _readFilteredFreqPot
                     _readFilteredIL
                   _readFilteredVout
                _readILCurrentADCRaw
                      _runPotScaling
                _setPWMDutyandPeriod
            _transToOverCurrentFault
                 i1_currentTripReset
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_currentTripReset                                   0     0      0     352
                        i1_writeGPIO
 ---------------------------------------------------------------------------------
 (5) i1_writeGPIO                                          6     5      1     352
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (5) _transToOverCurrentFault                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setPWMDutyandPeriod                                  5     2      3     240
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (5) _runPotScaling                                       12    12      0    3020
                                              6 BANK0     12    12      0
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _readILCurrentADCRaw                                  2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredVout                                    12    10      2     457
                                             11 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredIL                                      12    10      2     182
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _readFilteredFreqPot                                 12    10      2     457
                                             11 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (5) _readFilteredDutyPot                                 12    10      2     457
                                             11 COMMON     2     0      2
                                              0 BANK0     10    10      0
                         _readADCRaw
 ---------------------------------------------------------------------------------
 (6) _readADCRaw                                          11     9      2     275
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _currentTripRead                                      2     2      0     276
                                              9 COMMON     2     2      0
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (5) _controlRoutine                                      10    10      0    5939
                                             50 BANK0     10    10      0
                            ___lldiv
                             ___wmul
              _runCurrentModeControl
              _runVoltageModeControl
 ---------------------------------------------------------------------------------
 (6) _runVoltageModeControl                               34    34      0    2296
                                             16 BANK0     34    34      0
                             ___lmul
                             ___omul
                                _abs
             _convertRawToMilliVolts
                         i1_readGPIO
 ---------------------------------------------------------------------------------
 (6) i1_readGPIO                                           9     9      0     252
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliVolts                              15    13      2     867
                                             12 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     700
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___omul                                              25     9     16     244
                                              0 COMMON     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _runCurrentModeControl                                2     2      0    1301
              _convertRawToMilliAmps
 ---------------------------------------------------------------------------------
 (7) _convertRawToMilliAmps                                6     4      2    1300
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1074
                                              6 COMMON     8     0      8
                                              0 BANK0      6     6      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialiseADCModule
   _initialiseController
     _initialiseADCPin
     _initialiseGPIO
   _initialiseCurrentSensors
     _currentTripReset
       _writeGPIO
     _initialiseADCPin
     _initialiseGPIO
   _initialiseGPIO
   _initialisePotentiometers
     _initialiseADCPin
   _readGPIO
   _setupInternalOscillator
   _setupPWM
     _initialiseGPIO
   _setupTimer0Interrupt
   _transToCurrentModeControl
   _transToPotControl
   _transToVoltageModeControl

 _Tick980Hz (ROOT)
   _controlRoutine
     ___lldiv
       ___wmul (ARG)
     ___wmul
     _runCurrentModeControl
       _convertRawToMilliAmps
         ___wmul
     _runVoltageModeControl
       ___lmul
       ___omul
       _abs
       _convertRawToMilliVolts
         ___lmul
       i1_readGPIO
   _currentTripRead
     i1_readGPIO
   _readFilteredDutyPot
     _readADCRaw
   _readFilteredFreqPot
     _readADCRaw
   _readFilteredIL
   _readFilteredVout
     _readADCRaw
   _readILCurrentADCRaw
   _runPotScaling
     ___lldiv
     ___lmul
     ___wmul
   _setPWMDutyandPeriod
   _transToOverCurrentFault
   i1_currentTripReset
     i1_writeGPIO
   i1_writeGPIO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     14D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0      20      14       66.7%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0     14D      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Aug 01 16:59:08 2023

                ___wmul@multiplicand 0072                                  l213 0C3E  
                                l128 0D9F                                  l147 054B  
                                l252 05E9                                  l324 05C1  
                                l248 0C22                                  l344 0EA2  
                                l184 0CDB                                  l257 0627  
                                l338 06EC                                  l454 0C7D  
                                l550 0C8B                                  l528 0D1A  
                                l378 0C59                                  l570 0C1C  
                                l573 0C36                                  l576 0C2F  
                                _PR2 001B                    readFilteredVout@i 0029  
                                _abs 0CA6                                  wreg 0009  
                __end_ofi1_writeGPIO 074C                ??_setPWMDutyandPeriod 0073  
                   ??_initialiseGPIO 00E3                           i1_readGPIO 0E12  
                               ?_abs 0070                                 l2200 05EE  
                               l2202 05F3                                 l2050 0690  
                               l2204 060B                                 l2060 06A3  
                               l2052 0696                                 l2206 0610  
                               l2070 06CD                                 l2062 06A8  
                               l2054 069B                                 l2150 0C84  
                               l2160 055D                                 l2152 054E  
                               l2072 06D2                                 l2064 06AD  
                               l2056 069E                                 l2048 068F  
                               l2170 0585                                 l2162 0561  
                               l2154 054F                                 l2074 06DF  
                               l2066 06BA                                 l2058 06A2  
                               l2180 05C4                                 l2172 0592  
                               l2164 0562                                 l2156 0555  
                               l2068 06C8                                 l2148 0C7E  
                               l2190 05D4                                 l2182 05C7  
                               l2174 0597                                 l2166 0567  
                               l2158 055A                                 l2192 05DA  
                               l2184 05CD                                 l2176 059C  
                               l2168 056C                                 l2600 04EE  
                               l2194 05E0                                 l2186 05D1  
                               l2178 05B5                                 l2610 0506  
                               l2602 04EF                                 l2196 05E5  
                               l2188 05D2                                 l2620 0517  
                               l2612 0508                                 l2604 04F8  
                               l2198 05E7                                 l2614 0509  
                               l2606 04FC                                 l2710 0C29  
                               l2704 0EA1                                 l2616 0512  
                               l2608 04FD                                 l2560 048D  
                               l2624 0520                                 l2640 0CC9  
                               l2632 0CC0                                 l2712 0C19  
                               l2618 0516                                 l2570 04A8  
                               l2562 0496                                 l2554 0489  
                               l2650 0CD3                                 l2642 0CCB  
                               l2634 0CC3                                 l2660 0C1D  
                               l2580 04C0                                 l2572 04A9  
                               l2564 049A                                 l2556 048A  
                               l2652 0CD4                                 l2644 0CCC  
                               l2636 0CC5                                 l2708 0C30  
                               l2662 0CFB                                 l2670 0E5C  
                               l2590 04D3                                 l2582 04C4  
                               l2574 04B2                                 l2566 049B  
                               l2558 048C                                 l2654 0CD6  
                               l2646 0CCF                                 l2638 0CC7  
                               l2664 0C51                                 l2680 0E6F  
                               l2672 0E62                                 l2592 04DC  
                               l2584 04C5                                 l2576 04B6  
                               l2568 04A4                                 l2648 0CD1  
                               l2656 0C37                                 l2760 0D73  
                               l2666 0C72                                 l2682 0E74  
                               l2674 0E67                                 l2594 04E0  
                               l2586 04CE                                 l2578 04B7  
                               l2658 0C3C                                 l2770 0D83  
                               l2762 0D77                                 l2684 0E7A  
                               l2692 0E88                                 l2676 0E6A  
                               l2668 0E5B                                 l2844 0528  
                               l2596 04E1                                 l2588 04D2  
                               l2780 0D98                                 l2772 0D86  
                               l2764 0D7A                                 l2694 0E8D  
                               l2686 0E86                                 l2678 0E6E  
                               l2598 04EA                                 l2774 0D89  
                               l2766 0D7D                                 l2696 0E93  
                               l2784 0D9C                                 l2776 0D8F  
                               l2768 0D80                                 l2698 0E9F  
                               l2778 0D8F                                 STR_1 07FF  
                               STR_3 0811                                 u1420 06CD  
                               u1404 06B2                                 u1421 06CC  
                               u1405 06B1                                 _LATA 010C  
                               u1430 06D2                                 u1414 06BF  
                               _LATB 010D                                 u1431 06D1  
                               u1415 06BE                                 u1370 0696  
                               u2410 0E8D                                 u1371 0695  
                               u2411 0E8C                                 u1700 05EE  
                               u1620 0597                                 u1604 057C  
                               u1444 06D7                                 u1380 06A8  
                               u2404 0E7F                                 u1701 05ED  
                               u1621 0596                                 u1605 057B  
                               u1445 06D6                                 u1381 06A7  
                               u2405 0E7E                                 u1710 05F3  
                               u1630 059C                                 u1614 058A  
                               u1454 06E4                                 u1390 06AD  
                               u1711 05F2                                 u1631 059B  
                               u1615 0589                                 u1455 06E3  
                               u1391 06AC                                 u1560 0555  
                               u2424 0E98                                 u1561 0554  
                               u2425 0E97                                 u1570 0567  
                               u1571 0566                                 u1740 0610  
                               u1724 05F8                                 u1644 05A1  
                               u1580 056C                                 u2380 0E62  
                               u2540 0D98                                 u1741 060F  
                               u1725 05F7                                 u1645 05A0  
                               u1581 056B                                 u2381 0E61  
                               u2541 0D97                                 u1734 0603  
                               u1670 05CD                                 u1654 05AC  
                               u2390 0E74                                 u1735 0602  
                               u1671 05CC                                 u1655 05AB  
                               u2391 0E73                                 u1680 05DA  
                               u1664 05BA                                 u1681 05D9  
                               u1665 05B9                                 u1754 0615  
                               u1690 05E0                                 u1594 0571  
                               u1755 0614                                 u1691 05DF  
                               u1595 0570                                 u1764 0620  
                               u1765 061F            _transToVoltageModeControl 0C30  
                    _filteredFreqPot 005D                      _filteredDutyPot 00C0  
                               abs@a 0070                                 _main 0D73  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               fsr1l 0006                                 btemp 007E  
                     ?_runPotScaling 0070        convertRawToMilliAmps@rawValue 0076  
                               start 009D            ??_setupInternalOscillator 00E2  
                              ??_abs 0072                                ?_main 00EB  
                    __end_of___lldiv 0F4A                                i1l118 009B  
                              i1l260 0637                                i1l261 064A  
                              i1l271 068C                                i1l344 0E58  
                              i1l265 066B                                i1l266 066D  
                              i1l338 074B                                i1l187 0D45  
                              i1l276 0C5D                                i1l533 0D72  
                              i1l461 07A6                                i1l550 0C71  
                              i1l279 0C65                                i1l464 0E11  
                              i1l480 02AE                                i1l472 03A8  
                              i1l392 0FFF                                i1l553 0CA5  
                              i1l385 0FA4                                i1l731 0CFA  
                              i1l483 0C47                                i1l547 07FE  
                              i1l469 039A                                i1l397 0477  
                              i1l743 0DD4                                i1l399 0486  
                              i1l729 0CE6                                i1l579 0C50  
                              i1l748 0EDE                                i1l765 0F49  
                              i1l749 0EEE                                _PORTA 000C  
                              _PORTB 000D                                _TRISA 008C  
                              _TRISB 008D                  ___lmul@multiplicand 0074  
                        readADCRaw@i 0078       convertRawToMilliAmps@offsetted 0078  
               readFilteredFreqPot@i 0029             readFilteredDutyPot@i_797 0028  
                              status 0003                                wtemp0 007E  
             initialiseGPIO@portType 00E5                  _initialiseADCModule 0C1D  
               readFilteredDutyPot@i 0029           initialiseADCPin@gpioNumber 00E7  
                    __initialization 009F                         __end_of_main 0DA2  
                  ?_initialiseADCPin 0070                          i1_writeGPIO 06ED  
                             ??_main 00EF                   ??_initialiseADCPin 00E2  
           __end_of_readFilteredVout 07A7                 ?_initialiseADCModule 0070  
         ??_initialiseCurrentSensors 00E8      __end_of_setupInternalOscillator 054C  
setupInternalOscillator@selectedFreq 00E4                               _ADCON0 009D  
                             _ADCON1 009E                          ?i1_readGPIO 0070  
                             _ADRESH 009C                               _ADRESL 009B  
                             _CCPR1L 0291                               _ANSELA 018C  
                             _ANSELB 018D                               i1l2020 0CDC  
                             i1l2100 0EAD                               i1l2030 0CF6  
                             i1l2022 0CDE                               i1l2102 0EB2  
                             i1l2110 0E14                               i1l2024 0CE2  
                             i1l2104 0EC2                               i1l2040 0DB6  
                             i1l2120 0E27                               i1l2112 0E1A  
                             i1l2026 0CEB                               i1l2106 0ECA  
                             i1l2042 0DBD                               i1l2034 0DA2  
                             i1l2122 0E2C                               i1l2114 0E1F  
                             i1l2210 062B                               i1l2300 0F03  
                             i1l2028 0CF0                               i1l2044 0DCC  
                             i1l2036 0DAA                               i1l2124 0E31  
                             i1l2132 0E3F                               i1l2116 0E22  
                             i1l2108 0E13                               i1l2220 0648  
                             i1l2212 0631                               i1l2310 0F33  
                             i1l2302 0F0E                               i1l2038 0DAE  
                             i1l2134 0E44                               i1l2126 0E3D  
                             i1l2118 0E26                               i1l2222 064F  
                             i1l2214 0635                               i1l2312 0F34  
                             i1l2304 0F12                               i1l1192 0CBF  
                             i1l2080 0DF9                               i1l2136 0E49  
                             i1l2144 0E57                               i1l2240 0675  
                             i1l2224 0651                               i1l2216 063D  
                             i1l2208 0629                               i1l2400 07A7  
                             u200_20 070C                               i1l2320 06EE  
                             u200_21 070B                               i1l2314 0F3B  
                             i1l2306 0F19                               i1l2090 0C8C  
                             i1l2082 0E0D                               i1l2138 0E55  
                             i1l2250 067B                               i1l2242 0679  
                             i1l2234 0661                               i1l2226 0655  
                             i1l2218 0643                               i1l2410 07BA  
                             i1l2330 0701                               i1l2322 06EF  
                             i1l2308 0F2B                               i1l2316 0F41  
                             i1l2092 0C92                               i1l2076 0DD5  
                             i1l2252 067F                               i1l2244 067A  
                             i1l2236 0665                               i1l2228 0660  
                             i1l2500 0F87                               i1l2420 07D1  
                             i1l2412 07C0                               i1l2340 0727  
                             i1l2332 0702                               i1l2324 06F5  
                             i1l1189 0CBF                               i1l2094 0CA1  
                             i1l2086 0CA6                               i1l2078 0DDC  
                             i1l2270 0132                               i1l2262 00CB  
                             i1l2350 0D64                               i1l2254 0685  
                             i1l2238 0671                               i1l2502 0F8B  
                             i1l2422 07E1                               i1l2414 07D0  
                             i1l2406 07A8                               i1l2430 074C  
                             i1l2342 072C                               i1l2334 0707  
                             i1l2326 06FA                               i1l2088 0CB3  
                             i1l2280 01D2                               i1l2272 0141  
                             i1l2264 00E1                               i1l2352 0D66  
                             i1l2504 0F91                               i1l2520 0FBF  
                             i1l2424 07E5                               i1l2408 07B6  
                             i1l2440 0760                               i1l2344 0731  
                             i1l2336 070C                               i1l2328 06FD  
                             i1l2098 0EA3                               i1l2290 0288  
                             i1l2282 01F0                               i1l2274 019C  
                             i1l2266 00F0                               i1l2354 0D6B  
                             i1l2258 068A                               i1l2530 0FD2  
                             i1l2522 0FC8                               i1l2514 0FA7  
                             i1l2426 07EB                               i1l2442 0766  
                             i1l2370 0D29                               i1l2362 0C48  
                             i1l2346 073E                               i1l2338 0719  
                             i1l2292 02AA                               i1l2284 0201  
                             i1l2276 01B6                               i1l2268 00FE  
                             i1l2380 02F1                               i1l2372 02AF  
                             i1l2356 0D70                               i1l2348 0D46  
                             i1l2532 0FE2                               i1l2524 0FD1  
                             i1l2516 0FB5                               i1l2508 0FA5  
                             i1l2452 0779                               i1l2444 076F  
                             i1l2436 074E                               i1l2540 0C5A  
                             i1l2364 0C4C                               u201_24 0711  
                             u201_25 0710                               i1l2294 0C3F  
                             i1l2286 0233                               i1l2278 01C7  
                             i1l2390 035F                               i1l2382 02F7  
                             i1l2374 02B6                               i1l2358 0D71  
                             i1l2534 0FE6                               i1l2518 0FB9  
                             i1l2454 0789                               i1l2446 0778  
                             i1l2438 075C                               i1l2542 0C5C  
                             i1l2470 0473                               i1l2462 03A9  
                             i1l2366 0D1B                               i1l2296 0EEF  
                             i1l2288 0257                               i1l2392 038C  
                             i1l2384 02FA                               i1l2376 02B9  
                             u210_20 0D60                               i1l2536 0FEC  
                             i1l2456 078D                               i1l2544 0C61  
                             i1l2472 0481                               i1l2464 03AF  
                             i1l2368 0D1E                               i1l2720 000E  
                             i1l2298 0F00                               i1l2394 0396  
                             i1l2386 02FF                               i1l2378 02BE  
                             i1l2490 0F6D                               i1l2482 0F4C  
                             i1l2458 0793                               i1l2474 0485  
                             i1l2466 03B9                               i1l2714 0C66  
                             i1l2730 0029                               i1l2722 0019  
                             i1l2396 03A4                               i1l2388 0332  
                             i1l2492 0F76                               i1l2484 0F5A  
                             i1l2476 0F4A                               i1l2468 0469  
                             u202_24 071E                               i1l2716 0C6B  
                             i1l2740 0049                               i1l2732 0035  
                             i1l2724 001D                               u130_25 0CE7  
                             u202_25 071D                               i1l2486 0F5E  
                             i1l2750 007D                               i1l2742 0059  
                             i1l2734 003B                               i1l2726 0021  
                             i1l2718 0006                               u211_20 0D6B  
                             i1l2488 0F64                               u203_20 072C  
                             i1l2744 005E                               i1l2752 0087  
                             i1l2736 0040                               i1l2728 0027  
                             u211_21 0D6A                               u203_21 072B  
                             i1l2498 0F77                               i1l2754 0091  
                             i1l2746 0067                               i1l2738 0043  
                             i1l2756 0092                               i1l2748 006D  
                             u131_25 0CEC                               i1l2758 009A  
                             u132_20 0CF6                               u212_20 0D70  
                             u220_20 07EB                               u204_20 0731  
                             u132_21 0CF5                               u212_21 0D6F  
                             u220_21 07EA                               u204_21 0730  
                             u133_20 0DAE                               u221_20 07F8  
                             u213_20 0D43                               u133_21 0DAD  
                             u213_21 0D40                               u205_24 0736  
                             u221_25 07F4                               u205_25 0735  
                             u150_20 0EDE                               u222_20 0766  
                             u230_20 0481                               u150_21 0EDD  
                             u222_21 0765                               u230_21 0480  
                             u214_24 0D45                               u206_24 0743  
                             u134_25 0DB7                               u230_25 047D  
                             u206_25 0742                               u151_20 0E1A  
                             u215_20 02B6                               u207_20 0D50  
                             u231_20 0F64                               u223_20 0793  
                             u151_21 0E19                               u215_21 02B5  
                             u207_21 0D4E                               u231_21 0F63  
                             u223_21 0792                               u135_25 0DBE  
                             u136_20 0DCC                               u152_20 0E2C  
                             u216_20 02F7                               u208_20 0D51  
                             u232_20 0F91                               u224_20 07A0  
                             u136_21 0DCB                               u152_21 0E2B  
                             u216_21 02F6                               u232_21 0F90  
                             u224_25 079C                               u129_20 0CE2  
                             u217_20 0396                               u209_20 0D5F  
                             u233_20 0F9E                               u225_20 03AF  
                             u129_21 0CE1                               u217_21 0395  
                             u209_21 0D5D                               u225_21 03AE  
                             u153_24 0E36                               u153_25 0E35  
                             u217_25 0392                               u233_25 0F9A  
                             u146_20 0E07                               u154_20 0E44  
                             u218_20 03A4                               u234_20 0FBF  
                             u226_20 03B9                               u250_20 0083  
                             u154_21 0E43                               u218_21 03A3  
                             u234_21 0FBE                               u226_21 03B8  
                             u250_21 0081                               u146_25 0E03  
                             u218_25 03A0                               u147_20 0CB3  
                             u235_20 0FEC                               u219_20 07C0  
                             u227_20 03DA                               u251_20 0084  
                             u243_20 000E                               u147_21 0CB2  
                             u235_21 0FEB                               u219_21 07BF  
                             u243_21 000D                               u155_24 0E4E  
                             u147_25 0CAF                               u155_25 0E4D  
                             u227_25 03D6                               u148_20 0EAA  
                             u180_20 064F                               u236_20 0FF9  
                             u228_20 0409                               u252_20 008D  
                             u244_20 0019                               u180_21 064E  
                             u252_21 008B                               u244_21 0018  
                             u236_25 0FF5                               u228_25 0405  
                             u149_20 0EB2                               u237_20 0C61  
                             u229_20 0473                               u253_20 008E  
                             u245_20 0027                               u149_21 0EB1  
                             u237_21 0C60                               u229_21 0472  
                             u245_21 0026                               u181_25 0658  
                             u229_25 046F                               u190_20 0276  
                             u182_20 066B                               u246_20 003B  
                             u182_21 066A                               u246_21 003A  
                             u190_25 026D                               u191_20 0F00  
                             u183_20 0671                               u247_20 0049  
                             u191_21 0EFF                               u183_21 0670  
                             u247_21 0048                               u184_20 0685  
                             u248_20 005E                               u184_21 0684  
                             u248_21 005D                               u192_25 0F04  
                             u193_20 0F12                               u185_20 00E1  
                             u177_20 0631                               u249_20 006D  
                             u193_21 0F11                               u185_21 00E0  
                             u177_21 0630                               u249_21 006C  
                             u186_20 01B6                               u178_20 063D  
                             u186_21 01B5                               u178_21 063C  
                             u194_25 0F13                               u195_20 0F2B  
                             u187_20 01D2                               u179_20 0643  
                             u195_21 0F2A                               u187_21 01D1  
                             u179_21 0642                               u195_25 0F27  
                             u188_20 01F0                               u188_21 01EF  
                    ??_runPotScaling 0026                               u196_25 0F35  
                             u197_20 0F41                               u189_20 0221  
                             u197_21 0F40                               u189_25 0218  
                             u198_20 06F5                               u198_21 06F4  
                             u199_20 0707                               u199_21 0706  
            initialiseGPIO@direction 00E2                     readGPIO@portType 00E9  
        __end_of_readILCurrentADCRaw 0C66                  readADCRaw@gpioValid 0077  
                             ___lmul 0DA2                               ___omul 0EA3  
                             ___wmul 0CDC                            ??___lldiv 0020  
                   __end_of_readGPIO 0EA3                       _controlRoutine 02AF  
                             _tripIL 006A       convertRawToMilliVolts@rawValue 007C  
          setPWMDutyandPeriod@period 0072                ??_initialiseADCModule 00E2  
           _initialisePotentiometers 0C51           initialiseADCPin@portNumber 00E6  
                   __end_of_setupPWM 0CDC                      _currentTripRead 0D46  
         ?_transToCurrentModeControl 0070              __end_of__initialization 00C7  
            ??_runCurrentModeControl 007C               __end_of_controlRoutine 03A9  
                     __pcstackCOMMON 0070            initialiseADCPin@gpioValid 00E4  
              i1writeGPIO@gpioNumber 0074                _convertRawToMilliAmps 0C8C  
                      _currentILFIFO 0120                       _OPTION_REGbits 0095  
                  __end_of_Tick980Hz 009D                _runVoltageModeControl 00CB  
                         __pbssBANK0 005D                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pmaintext 0D73  
                    ?_controlRoutine 0070                              ?___lmul 0070  
                            ?___omul 0020                              ?___wmul 0070  
  __end_of_transToVoltageModeControl 0C37             ??_convertRawToMilliVolts 0020  
                         __pintentry 0004                              _CCP1CON 0293  
                ___omul@multiplicand 0028                       ___lmul@product 0078  
            __end_of_currentTripRead 0D73          __end_of_setPWMDutyandPeriod 0D46  
   __end_of_initialiseCurrentSensors 0D1B           __end_ofi1_currentTripReset 0C72  
           initialiseADCPin@portType 00E5              _transToOverCurrentFault 0C48  
                 i1readGPIO@portType 0077                readFilteredVout@i_894 0028  
              i1writeGPIO@portNumber 0075                           _filteredIL 0061  
                          ?_readGPIO 0070                           _readADCRaw 0628  
                _readFilteredFreqPot 0FA5                 i1readGPIO@gpioNumber 0078  
                _readFilteredDutyPot 0F4A   convertRawToMilliAmps@returnValuemA 007A  
                          ?_setupPWM 0070                 readADCRaw@gpioNumber 007A  
           initialiseGPIO@gpioNumber 00E6                              ___lldiv 0EEF  
             ?_convertRawToMilliAmps 0076                         ?i1_writeGPIO 0070  
               ?_readFilteredFreqPot 007B                              __ptext1 0C30  
                            __ptext2 0C19                              __ptext3 0C29  
                            __ptext4 0C37                              __ptext5 0CC0  
                            __ptext6 0487                              __ptext7 0E59  
                            __ptext8 0C51                              __ptext9 0CFB  
               ?_readFilteredDutyPot 007B         __end_of_initialiseController 0C7E  
                          _T2CONbits 001C                    ?_readFilteredVout 007B  
                            _setDuty 0065                i1writeGPIO@writeValue 0070  
             ?_runVoltageModeControl 0070                              _tripIDS 006B  
                 ??_readFilteredVout 0020                         ??i1_readGPIO 0070  
                            clrloop0 0C24                 end_of_initialization 00C7  
    convertRawToMilliVolts@offsetted 0029                           ??_readGPIO 00E2  
                     ___omul@product 0071             ?_setupInternalOscillator 0070  
                    ___lldiv@divisor 0076                      ___lldiv@counter 0025  
                   _currentTripCount 006C                           ??_setupPWM 00E8  
                   _currentTripReset 0C7E           ??_initialisePotentiometers 00E8  
                         _prevPeriod 006E                    writeGPIO@portType 00E5  
                     _readFilteredIL 07A7                   __end_ofi1_readGPIO 0E59  
              ??_readFilteredFreqPot 0020                ??_readFilteredDutyPot 0020  
               i1readGPIO@portNumber 0076                     ?_currentTripRead 0070  
                  __end_of_writeGPIO 06ED            ??_transToOverCurrentFault 0070  
           initialiseGPIO@portNumber 00E7                         _filteredVout 005F  
        ??_transToCurrentModeControl 00E2                          ?_readADCRaw 0070  
                  _transToPotControl 0C19                          _CCP1CONbits 0293  
                      readGPIO@readA 00E4                        readGPIO@readB 00E6  
              __end_of_runPotScaling 0487                   ?_transToPotControl 0070  
          ?_initialiseCurrentSensors 0070        __end_of_runCurrentModeControl 0C48  
               _voltageModeVariables 00C6               __end_of_readFilteredIL 07FF  
                ??_transToPotControl 00E2                       __end_of___lmul 0DD5  
        __end_of_initialiseADCModule 0C23                       __end_of___omul 0EEF  
              controlRoutine@maxDuty 0058                       __end_of___wmul 0CFB  
              controlRoutine@minDuty 005A                       _clockFrequency 00BC  
                start_initialization 009F         __end_of_setupTimer0Interrupt 0C3F  
                     _currentIDSFIFO 0140                          __end_of_abs 0CC0  
                          _Tick980Hz 0004               _convertRawToMilliVolts 0DD5  
          __end_of_transToPotControl 0C1D     convertRawToMilliVolts@vsenseMult 0025  
                   ??_controlRoutine 0052                    ___omul@multiplier 0020  
    __end_of_transToOverCurrentFault 0C51                 _initialiseController 0C72  
                        _APFCON0bits 011D                             ??___lmul 0078  
                           ??___omul 0070                             ??___wmul 0074  
                    ?_readFilteredIL 0070            _transToCurrentModeControl 0C29  
                          ___latbits 0001                        __pcstackBANK0 0020  
                      __pcstackBANK1 00E2                           ?_Tick980Hz 0070  
                   _initialiseADCPin 05C2                         _currentState 006D  
                 i1_currentTripReset 0C66                   readGPIO@gpioNumber 00EA  
              ?_initialiseController 0070                       _initialiseGPIO 054C  
            ??_convertRawToMilliAmps 0078                      i1readGPIO@readA 0072  
                    i1readGPIO@readB 0074     __end_of_initialisePotentiometers 0C5A  
                ?i1_currentTripReset 0070                             ?___lldiv 0076  
         ?_transToVoltageModeControl 0070      runVoltageModeControl@newVoltage 0050  
      runVoltageModeControl@propMult 0048              ??_runVoltageModeControl 0030  
                    readADCRaw@i_696 0079                 ??i1_currentTripReset 0076  
           __end_of_currentTripReset 0C8C      readFilteredDutyPot@sumOfSamples 0024  
                     ___wmul@product 0074               __end_of_initialiseGPIO 05C2  
                          clear_ram0 0C23                            _setPeriod 006F  
                           _PIE1bits 0091                             _PIR1bits 0011  
       setPWMDutyandPeriod@dutyCycle 0070                 _setupTimer0Interrupt 0C37  
  runVoltageModeControl@integralMult 0040                  _currentTripRead$969 007A  
                        _filteredIDS 00C2                           _ADCON0bits 009D  
                  ___wmul@multiplier 0070                   readGPIO@portNumber 00E8  
                        _freqPotFIFO 01A0                            _writeGPIO 068D  
                        ??_Tick980Hz 005C                    ___lmul@multiplier 0070  
                _readILCurrentADCRaw 0C5A                         ??_readADCRaw 0072  
             ??_initialiseController 00E8                      ?_initialiseGPIO 00E2  
       readFilteredVout@sumOfSamples 0024                    readADCRaw@channel 0076  
               _currentModeVariables 00A0                ?_setupTimer0Interrupt 0070  
        __end_of_readFilteredFreqPot 1000          __end_of_readFilteredDutyPot 0FA5  
               runPotScaling@maxDuty 002E                 runPotScaling@minDuty 0030  
               ?_readILCurrentADCRaw 0070                  writeGPIO@gpioNumber 00E6  
convertRawToMilliVolts@returnValuedV 002B                   __end_of_readADCRaw 068D  
           readFilteredFreqPot@i_801 0028              ?_convertRawToMilliVolts 007C  
                         ?_writeGPIO 00E2                             __ptext10 0C7E  
                           __ptext11 068D                             __ptext20 0D1B  
                           __ptext12 0C72                             __ptext21 03A9  
                           __ptext13 054C                             __ptext30 00CB  
                           __ptext22 0C5A                             __ptext14 05C2  
                           __ptext31 0E12                             __ptext23 074C  
                           __ptext15 0C1D                             __ptext32 0DD5  
                           __ptext24 07A7                             __ptext33 0DA2  
                           __ptext25 0FA5                             __ptext17 0C66  
                           __ptext34 0CA6                             __ptext26 0F4A  
                           __ptext18 06ED                             __ptext35 0EA3  
                           __ptext27 0628                             __ptext19 0C48  
                           __ptext36 0C3F                             __ptext28 0D46  
                           __ptext37 0C8C                             __ptext29 02AF  
                           __ptext38 0CDC                             __ptext39 0EEF  
          ?_initialisePotentiometers 0070                          _dutyPotFIFO 0220  
                i1writeGPIO@portType 0073           readFilteredIL@sumOfSamples 0076  
                           _readGPIO 0E59                             _latestIL 0063  
                   ??_readFilteredIL 0072                        _timerSlotHalf 0068  
                       _PSTR1CONbits 0296                             _prevDuty 00C4  
                           _setupPWM 0CC0                _runCurrentModeControl 0C3F  
                           int$flags 007E                ??_readILCurrentADCRaw 0072  
           __end_of_initialiseADCPin 0628                             main@argc 00EB  
           ?_transToOverCurrentFault 0070                             main@argv 00ED  
                           _voutFIFO 01C0      readFilteredFreqPot@sumOfSamples 0024  
                   _timerSlotQuarter 0067       __end_of_convertRawToMilliVolts 0E12  
                         _INTCONbits 000B    __end_of_transToCurrentModeControl 0C30  
                writeGPIO@portNumber 00E7                             intlevel1 0000  
           _initialiseCurrentSensors 0CFB                     ___lldiv@dividend 007A  
             i1readGPIO@returnValueA 0073               i1readGPIO@returnValueB 0075  
                   _readFilteredVout 074C               ??_setupTimer0Interrupt 00E2  
                         _OSCCONbits 0099                          _potSetCount 0069  
                _setPWMDutyandPeriod 0D1B        __end_of_convertRawToMilliAmps 0CA6  
            _setupInternalOscillator 0487          ??_transToVoltageModeControl 00E2  
                      ??i1_writeGPIO 0071                        __pstringtext1 07FF  
                      __pstringtext2 0811                        __pstringtext3 0000  
                         _OPTION_REG 0095                     ___lldiv@quotient 0021  
      __end_of_runVoltageModeControl 02AF                  writeGPIO@writeValue 00E2  
                        ??_writeGPIO 00E3                 ?_setPWMDutyandPeriod 0070  
                  ?_currentTripReset 0070                   ??_currentTripReset 00E8  
              readADCRaw@returnValue 0074                    ??_currentTripRead 0079  
                      _runPotScaling 03A9                 readGPIO@returnValueA 00E5  
               readGPIO@returnValueB 00E7                  readFilteredIL@i_977 007A  
             ?_runCurrentModeControl 0070                      readFilteredIL@i 007B  
